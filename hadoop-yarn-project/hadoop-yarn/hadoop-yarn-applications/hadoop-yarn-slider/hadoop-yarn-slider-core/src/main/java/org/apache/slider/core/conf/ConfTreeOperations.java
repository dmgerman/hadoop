begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.conf
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|ConfTreeSerDeser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|PersistKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ConfTreeOperations
specifier|public
class|class
name|ConfTreeOperations
block|{
DECL|field|confTree
specifier|public
specifier|final
name|ConfTree
name|confTree
decl_stmt|;
DECL|field|globalOptions
specifier|private
specifier|final
name|MapOperations
name|globalOptions
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfTreeOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ConfTreeOperations (ConfTree confTree)
specifier|public
name|ConfTreeOperations
parameter_list|(
name|ConfTree
name|confTree
parameter_list|)
block|{
assert|assert
name|confTree
operator|!=
literal|null
operator|:
literal|"null tree"
assert|;
assert|assert
name|confTree
operator|.
name|components
operator|!=
literal|null
operator|:
literal|"null tree components"
assert|;
name|this
operator|.
name|confTree
operator|=
name|confTree
expr_stmt|;
name|globalOptions
operator|=
operator|new
name|MapOperations
argument_list|(
literal|"global"
argument_list|,
name|confTree
operator|.
name|global
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the underlying conf tree    * @return the tree    */
DECL|method|getConfTree ()
specifier|public
name|ConfTree
name|getConfTree
parameter_list|()
block|{
return|return
name|confTree
return|;
block|}
comment|/**    * Validate the configuration    * @throws BadConfigException    */
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|validate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate the configuration    * @param validator a provided properties validator    * @throws BadConfigException    */
DECL|method|validate (InputPropertiesValidator validator)
specifier|public
name|void
name|validate
parameter_list|(
name|InputPropertiesValidator
name|validator
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|version
init|=
name|confTree
operator|.
name|schema
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"'version' undefined"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|PersistKeys
operator|.
name|SCHEMA
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"version %s incompatible with supported version %s"
argument_list|,
name|version
argument_list|,
name|PersistKeys
operator|.
name|SCHEMA
argument_list|)
throw|;
block|}
if|if
condition|(
name|validator
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|validate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Resolve a ConfTree by mapping all global options into each component    * -if there is none there already    */
DECL|method|resolve ()
specifier|public
name|void
name|resolve
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|comp
range|:
name|confTree
operator|.
name|components
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mergeInGlobal
argument_list|(
name|comp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge any options    * @param component dest values    */
DECL|method|mergeInGlobal (Map<String, String> component)
specifier|public
name|void
name|mergeInGlobal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|component
parameter_list|)
block|{
name|SliderUtils
operator|.
name|mergeMapsIgnoreDuplicateKeys
argument_list|(
name|component
argument_list|,
name|confTree
operator|.
name|global
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get operations on the global set    * @return a wrapped map    */
DECL|method|getGlobalOptions ()
specifier|public
name|MapOperations
name|getGlobalOptions
parameter_list|()
block|{
return|return
name|globalOptions
return|;
block|}
comment|/**    * look up a component and return its options    * @param component component name    * @return component mapping or null    */
DECL|method|getComponent (String component)
specifier|public
name|MapOperations
name|getComponent
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|instance
init|=
name|confTree
operator|.
name|components
operator|.
name|get
argument_list|(
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|MapOperations
argument_list|(
name|component
argument_list|,
name|instance
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * look up a component and return its options with the specified replacements    * @param component component name    * @param replacementOptions replacement options    * @return component mapping or null    */
DECL|method|getComponent (String component, Map<String,String> replacementOptions)
specifier|public
name|MapOperations
name|getComponent
parameter_list|(
name|String
name|component
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacementOptions
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|instance
init|=
name|confTree
operator|.
name|components
operator|.
name|get
argument_list|(
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newInstance
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newInstance
operator|.
name|putAll
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|newInstance
operator|.
name|putAll
argument_list|(
name|replacementOptions
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapOperations
argument_list|(
name|component
argument_list|,
name|newInstance
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get at the underlying component map    * @return a map of components. This is the raw ConfTree data structure    */
DECL|method|getComponents ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getComponents
parameter_list|()
block|{
return|return
name|confTree
operator|.
name|components
return|;
block|}
comment|/**    * Get a component -adding it to the components map if    * none with that name exists    * @param name role    * @return role mapping    */
DECL|method|getOrAddComponent (String name)
specifier|public
name|MapOperations
name|getOrAddComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MapOperations
name|operations
init|=
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|operations
operator|!=
literal|null
condition|)
block|{
return|return
name|operations
return|;
block|}
comment|//create a new instances
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|confTree
operator|.
name|components
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|map
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapOperations
argument_list|(
name|name
argument_list|,
name|map
argument_list|)
return|;
block|}
comment|/*    * return the Set of names names    */
annotation|@
name|JsonIgnore
DECL|method|getComponentNames ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getComponentNames
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|confTree
operator|.
name|components
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get a component whose presence is mandatory    * @param name component name    * @return the mapping    * @throws BadConfigException if the name is not there    */
DECL|method|getMandatoryComponent (String name)
specifier|public
name|MapOperations
name|getMandatoryComponent
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|MapOperations
name|ops
init|=
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ops
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Missing component "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|ops
return|;
block|}
comment|/**    * Set a global option, converting it to a string as needed    * @param key key    * @param value non null value    */
DECL|method|set (String key, Object value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|globalOptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * get a global option    * @param key key    * @return value or null    *     */
DECL|method|get (String key)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|globalOptions
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * append to a global option    * @param key key    * @return value    *    */
DECL|method|append (String key, String value)
specifier|public
name|String
name|append
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|globalOptions
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|globalOptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|globalOptions
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|+
literal|","
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|globalOptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|globalOptions
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Propagate all global keys matching a prefix    * @param src source    * @param prefix prefix    */
DECL|method|propagateGlobalKeys (ConfTree src, String prefix)
specifier|public
name|void
name|propagateGlobalKeys
parameter_list|(
name|ConfTree
name|src
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|global
init|=
name|src
operator|.
name|global
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|global
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|set
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Propagate all global keys matching a prefix    * @param src source    * @param prefix prefix    */
DECL|method|propagateGlobalKeys (ConfTreeOperations src, String prefix)
specifier|public
name|void
name|propagateGlobalKeys
parameter_list|(
name|ConfTreeOperations
name|src
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|propagateGlobalKeys
argument_list|(
name|src
operator|.
name|confTree
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge the map of a single component    * @param component component name    * @param map map to merge    */
DECL|method|mergeSingleComponentMap (String component, Map<String, String> map)
specifier|public
name|void
name|mergeSingleComponentMap
parameter_list|(
name|String
name|component
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|MapOperations
name|comp
init|=
name|getOrAddComponent
argument_list|(
name|component
argument_list|)
decl_stmt|;
name|comp
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge the map of a single component    * @param component component name    * @param map map to merge    */
DECL|method|mergeSingleComponentMapPrefix (String component, Map<String, String> map, String prefix, boolean overwrite)
specifier|public
name|void
name|mergeSingleComponentMapPrefix
parameter_list|(
name|String
name|component
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
name|boolean
name|needsMerge
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|needsMerge
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|needsMerge
condition|)
block|{
return|return;
block|}
name|MapOperations
name|comp
init|=
name|getOrAddComponent
argument_list|(
name|component
argument_list|)
decl_stmt|;
name|comp
operator|.
name|mergeMapPrefixedKeys
argument_list|(
name|map
argument_list|,
name|prefix
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge in components    * @param commandOptions component options on the CLI    */
DECL|method|mergeComponents (Map<String, Map<String, String>> commandOptions)
specifier|public
name|void
name|mergeComponents
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|commandOptions
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|commandOptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mergeSingleComponentMap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge in components    * @param commandOptions component options on the CLI    */
DECL|method|mergeComponentsPrefix (Map<String, Map<String, String>> commandOptions, String prefix, boolean overwrite)
specifier|public
name|void
name|mergeComponentsPrefix
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|commandOptions
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|commandOptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mergeSingleComponentMapPrefix
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|prefix
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge in another tree -no overwrites of global or conf data    * (note that metadata does a naive putAll merge/overwrite)    * @param that the other tree    */
DECL|method|mergeWithoutOverwrite (ConfTree that)
specifier|public
name|void
name|mergeWithoutOverwrite
parameter_list|(
name|ConfTree
name|that
parameter_list|)
block|{
name|getGlobalOptions
argument_list|()
operator|.
name|mergeWithoutOverwrite
argument_list|(
name|that
operator|.
name|global
argument_list|)
expr_stmt|;
name|confTree
operator|.
name|metadata
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|metadata
argument_list|)
expr_stmt|;
name|confTree
operator|.
name|credentials
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|credentials
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|that
operator|.
name|components
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MapOperations
name|comp
init|=
name|getOrAddComponent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|comp
operator|.
name|mergeWithoutOverwrite
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge in another tree with overwrites    * @param that the other tree    */
DECL|method|merge (ConfTree that)
specifier|public
name|void
name|merge
parameter_list|(
name|ConfTree
name|that
parameter_list|)
block|{
name|getGlobalOptions
argument_list|()
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|global
argument_list|)
expr_stmt|;
name|confTree
operator|.
name|metadata
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|metadata
argument_list|)
expr_stmt|;
name|confTree
operator|.
name|credentials
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|credentials
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|that
operator|.
name|components
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MapOperations
name|comp
init|=
name|getOrAddComponent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|comp
operator|.
name|putAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load from a resource. The inner conf tree is the loaded data -unresolved    * @param resource resource    * @return loaded value    * @throws IOException load failure    */
DECL|method|fromResource (String resource)
specifier|public
specifier|static
name|ConfTreeOperations
name|fromResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|ConfTreeSerDeser
name|confTreeSerDeser
init|=
operator|new
name|ConfTreeSerDeser
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|ops
init|=
operator|new
name|ConfTreeOperations
argument_list|(
name|confTreeSerDeser
operator|.
name|fromResource
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ops
return|;
block|}
comment|/**    * Load from a resource. The inner conf tree is the loaded data -unresolved    * @param resource resource    * @return loaded value    * @throws IOException load failure    */
DECL|method|fromFile (File resource)
specifier|public
specifier|static
name|ConfTreeOperations
name|fromFile
parameter_list|(
name|File
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|ConfTreeSerDeser
name|confTreeSerDeser
init|=
operator|new
name|ConfTreeSerDeser
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|ops
init|=
operator|new
name|ConfTreeOperations
argument_list|(
name|confTreeSerDeser
operator|.
name|fromFile
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ops
return|;
block|}
comment|/**    * Build from an existing instance -which is cloned via JSON ser/deser    * @param instance the source instance    * @return loaded value    * @throws IOException load failure    */
DECL|method|fromInstance (ConfTree instance)
specifier|public
specifier|static
name|ConfTreeOperations
name|fromInstance
parameter_list|(
name|ConfTree
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|ConfTreeSerDeser
name|confTreeSerDeser
init|=
operator|new
name|ConfTreeSerDeser
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|ops
init|=
operator|new
name|ConfTreeOperations
argument_list|(
name|confTreeSerDeser
operator|.
name|fromJson
argument_list|(
name|confTreeSerDeser
operator|.
name|toJson
argument_list|(
name|instance
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ops
return|;
block|}
comment|/**    * Load from a file and merge it in    * @param file file    * @throws IOException any IO problem    * @throws BadConfigException if the file is invalid    */
DECL|method|mergeFile (File file)
specifier|public
name|void
name|mergeFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
name|mergeFile
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load from a file and merge it in    * @param file file    * @param validator properties validator    * @throws IOException any IO problem    * @throws BadConfigException if the file is invalid    */
DECL|method|mergeFile (File file, InputPropertiesValidator validator)
specifier|public
name|void
name|mergeFile
parameter_list|(
name|File
name|file
parameter_list|,
name|InputPropertiesValidator
name|validator
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
name|ConfTreeSerDeser
name|confTreeSerDeser
init|=
operator|new
name|ConfTreeSerDeser
argument_list|()
decl_stmt|;
name|ConfTree
name|tree
init|=
name|confTreeSerDeser
operator|.
name|fromFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ConfTreeOperations
name|ops
init|=
operator|new
name|ConfTreeOperations
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|ops
operator|.
name|validate
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ops
operator|.
name|confTree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|confTree
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert to a JSON string    * @return a JSON string description    */
DECL|method|toJson ()
specifier|public
name|String
name|toJson
parameter_list|()
throws|throws
name|IOException
throws|,
name|JsonGenerationException
throws|,
name|JsonMappingException
block|{
return|return
name|confTree
operator|.
name|toJson
argument_list|()
return|;
block|}
comment|/**    * Get a component option    * @param name component name    * @param option option name    * @param defVal default value    * @return resolved value    */
DECL|method|getComponentOpt (String name, String option, String defVal)
specifier|public
name|String
name|getComponentOpt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|option
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
name|MapOperations
name|roleopts
init|=
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleopts
operator|==
literal|null
condition|)
block|{
return|return
name|defVal
return|;
block|}
return|return
name|roleopts
operator|.
name|getOption
argument_list|(
name|option
argument_list|,
name|defVal
argument_list|)
return|;
block|}
comment|/**    * Get a component opt; use {@link Integer#decode(String)} so as to take hex    * oct and bin values too.    *    * @param name component name    * @param option option name    * @param defVal default value    * @return parsed value    * @throws NumberFormatException if the role could not be parsed.    */
DECL|method|getComponentOptInt (String name, String option, int defVal)
specifier|public
name|int
name|getComponentOptInt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|option
parameter_list|,
name|int
name|defVal
parameter_list|)
block|{
name|String
name|val
init|=
name|getComponentOpt
argument_list|(
name|name
argument_list|,
name|option
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|decode
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/**    * Get a component opt as a boolean using {@link Boolean#valueOf(String)}.    *    * @param name component name    * @param option option name    * @param defVal default value    * @return parsed value    * @throws NumberFormatException if the role could not be parsed.    */
DECL|method|getComponentOptBool (String name, String option, boolean defVal)
specifier|public
name|boolean
name|getComponentOptBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|option
parameter_list|,
name|boolean
name|defVal
parameter_list|)
block|{
name|String
name|val
init|=
name|getComponentOpt
argument_list|(
name|name
argument_list|,
name|option
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/**    * Set a component option, creating the component if necessary    * @param component component name    * @param option option name    * @param val value    */
DECL|method|setComponentOpt (String component, String option, String val)
specifier|public
name|void
name|setComponentOpt
parameter_list|(
name|String
name|component
parameter_list|,
name|String
name|option
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleopts
init|=
name|getOrAddComponent
argument_list|(
name|component
argument_list|)
decl_stmt|;
name|roleopts
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set an integer role option, creating the role if necessary    * @param role role name    * @param option option name    * @param val integer value    */
DECL|method|setComponentOpt (String role, String option, int val)
specifier|public
name|void
name|setComponentOpt
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|option
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|setComponentOpt
argument_list|(
name|role
argument_list|,
name|option
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a long role option, creating the role if necessary    * @param role role name    * @param option option name    * @param val long value    */
DECL|method|setComponentOpt (String role, String option, long val)
specifier|public
name|void
name|setComponentOpt
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|option
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|setComponentOpt
argument_list|(
name|role
argument_list|,
name|option
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * append to a component option    * @param key key    * @return value    *    */
DECL|method|appendComponentOpt (String role, String key, String value)
specifier|public
name|String
name|appendComponentOpt
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MapOperations
name|roleopts
init|=
name|getComponent
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleopts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|roleopts
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|roleopts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|roleopts
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|+
literal|","
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roleopts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|roleopts
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

