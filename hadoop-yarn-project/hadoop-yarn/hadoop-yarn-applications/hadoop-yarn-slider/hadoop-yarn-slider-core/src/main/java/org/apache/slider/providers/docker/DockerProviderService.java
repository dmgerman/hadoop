begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.docker
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|OptionKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|CommandLineBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ExportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|AbstractProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|MonitorDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
operator|.
name|ROLE_PREFIX
import|;
end_import

begin_class
DECL|class|DockerProviderService
specifier|public
class|class
name|DockerProviderService
extends|extends
name|AbstractProviderService
implements|implements
name|ProviderCore
implements|,
name|DockerKeys
implements|,
name|SliderKeys
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DockerProviderService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|providerUtils
specifier|private
specifier|static
specifier|final
name|ProviderUtils
name|providerUtils
init|=
operator|new
name|ProviderUtils
argument_list|(
name|log
argument_list|)
decl_stmt|;
DECL|field|EXPORT_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|EXPORT_GROUP
init|=
literal|"quicklinks"
decl_stmt|;
DECL|field|APPLICATION_TAG
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_TAG
init|=
literal|"application"
decl_stmt|;
DECL|field|clusterName
specifier|private
name|String
name|clusterName
init|=
literal|null
decl_stmt|;
DECL|field|fileSystem
specifier|private
name|SliderFileSystem
name|fileSystem
init|=
literal|null
decl_stmt|;
DECL|method|DockerProviderService ()
specifier|protected
name|DockerProviderService
parameter_list|()
block|{
name|super
argument_list|(
literal|"DockerProviderService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRoles ()
specifier|public
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSupportedRole (String role)
specifier|public
name|boolean
name|isSupportedRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|validateInstanceDefinition (AggregateConf instanceDefinition)
specifier|public
name|void
name|validateInstanceDefinition
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|)
throws|throws
name|SliderException
block|{   }
DECL|method|getClusterName ()
specifier|private
name|String
name|getClusterName
parameter_list|()
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|clusterName
argument_list|)
condition|)
block|{
name|clusterName
operator|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterName
return|;
block|}
annotation|@
name|Override
DECL|method|buildContainerLaunchContext (ContainerLauncher launcher, AggregateConf instanceDefinition, Container container, ProviderRole providerRole, SliderFileSystem fileSystem, Path generatedConfPath, MapOperations resourceComponent, MapOperations appComponent, Path containerTmpDirPath)
specifier|public
name|void
name|buildContainerLaunchContext
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|Container
name|container
parameter_list|,
name|ProviderRole
name|providerRole
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Path
name|generatedConfPath
parameter_list|,
name|MapOperations
name|resourceComponent
parameter_list|,
name|MapOperations
name|appComponent
parameter_list|,
name|Path
name|containerTmpDirPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|String
name|roleName
init|=
name|providerRole
operator|.
name|name
decl_stmt|;
name|String
name|roleGroup
init|=
name|providerRole
operator|.
name|group
decl_stmt|;
name|initializeApplicationConfiguration
argument_list|(
name|instanceDefinition
argument_list|,
name|fileSystem
argument_list|,
name|roleGroup
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Build launch context for Docker"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|instanceDefinition
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ConfTreeOperations
name|appConf
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
decl_stmt|;
name|launcher
operator|.
name|setYarnDockerMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setDockerImage
argument_list|(
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|DOCKER_IMAGE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setDockerNetwork
argument_list|(
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|DOCKER_NETWORK
argument_list|,
name|DEFAULT_DOCKER_NETWORK
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setRunPrivilegedContainer
argument_list|(
name|appConf
operator|.
name|getComponentOptBool
argument_list|(
name|roleGroup
argument_list|,
name|DOCKER_USE_PRIVILEGED
argument_list|,
name|DEFAULT_DOCKER_USE_PRIVILEGED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the environment
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|standardTokens
init|=
name|providerUtils
operator|.
name|getStandardTokenMap
argument_list|(
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
argument_list|,
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replaceTokens
init|=
name|providerUtils
operator|.
name|filterSiteOptions
argument_list|(
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|options
argument_list|,
name|standardTokens
argument_list|)
decl_stmt|;
name|replaceTokens
operator|.
name|putAll
argument_list|(
name|standardTokens
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|putEnv
argument_list|(
name|SliderUtils
operator|.
name|buildEnvMap
argument_list|(
name|appComponent
argument_list|,
name|replaceTokens
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|workDir
init|=
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$
argument_list|()
decl_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"WORK_DIR"
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"WORK_DIR set to {}"
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
decl_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LOG_DIR"
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"LOG_DIR set to {}"
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_USER_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|launcher
operator|.
name|setEnv
argument_list|(
name|HADOOP_USER_NAME
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_USER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add english env
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LANG"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LC_ALL"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LANGUAGE"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
comment|//local resources
name|providerUtils
operator|.
name|localizePackages
argument_list|(
name|launcher
argument_list|,
name|fileSystem
argument_list|,
name|appConf
argument_list|,
name|roleGroup
argument_list|,
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isHadoopClusterSecure
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|providerUtils
operator|.
name|localizeServiceKeytabs
argument_list|(
name|launcher
argument_list|,
name|instanceDefinition
argument_list|,
name|fileSystem
argument_list|,
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appComponent
operator|.
name|getOptionBool
argument_list|(
name|AM_CONFIG_GENERATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// build and localize configuration files
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|providerUtils
operator|.
name|buildConfigurations
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|,
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getClusterName
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|getAmState
argument_list|()
argument_list|)
decl_stmt|;
name|providerUtils
operator|.
name|localizeConfigFiles
argument_list|(
name|launcher
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|appConf
argument_list|,
name|configurations
argument_list|,
name|launcher
operator|.
name|getEnv
argument_list|()
argument_list|,
name|fileSystem
argument_list|,
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//add the configuration resources
name|launcher
operator|.
name|addLocalResources
argument_list|(
name|fileSystem
operator|.
name|submitDirectory
argument_list|(
name|generatedConfPath
argument_list|,
name|PROPAGATED_CONF_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLineBuilder
name|operation
init|=
operator|new
name|CommandLineBuilder
argument_list|()
decl_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|DOCKER_START_COMMAND
argument_list|,
literal|"/bin/bash"
argument_list|)
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
literal|"> "
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/"
operator|+
name|OUT_FILE
operator|+
literal|" 2>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/"
operator|+
name|ERR_FILE
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|addCommand
argument_list|(
name|operation
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Additional files to localize
name|String
name|appResourcesString
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|APP_RESOURCES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Configuration value for extra resources to localize: {}"
argument_list|,
name|appResourcesString
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|appResourcesString
condition|)
block|{
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|appResourcesString
argument_list|)
operator|.
name|useDelimiter
argument_list|(
literal|","
argument_list|)
init|)
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|resource
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|resourcePath
init|=
operator|new
name|Path
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|LocalResource
name|extraResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
name|resourcePath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|String
name|destination
init|=
name|APP_RESOURCES_DIR
operator|+
literal|"/"
operator|+
name|resourcePath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Localizing {} to {}"
argument_list|,
name|resourcePath
argument_list|,
name|destination
argument_list|)
expr_stmt|;
comment|// TODO Can we try harder to avoid collisions?
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|destination
argument_list|,
name|extraResource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|initializeApplicationConfiguration ( AggregateConf instanceDefinition, SliderFileSystem fileSystem, String roleGroup)
specifier|public
name|void
name|initializeApplicationConfiguration
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|roleGroup
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|this
operator|.
name|fileSystem
operator|=
name|fileSystem
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyInitialRegistryDefinitions (URL amWebURI, ServiceRecord serviceRecord)
specifier|public
name|void
name|applyInitialRegistryDefinitions
parameter_list|(
name|URL
name|amWebURI
parameter_list|,
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|applyInitialRegistryDefinitions
argument_list|(
name|amWebURI
argument_list|,
name|serviceRecord
argument_list|)
expr_stmt|;
comment|// identify client component
name|String
name|clientName
init|=
literal|null
decl_stmt|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|component
range|:
name|appConf
operator|.
name|getComponentNames
argument_list|()
control|)
block|{
if|if
condition|(
name|COMPONENT_TYPE_CLIENT
operator|.
name|equals
argument_list|(
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|component
argument_list|,
name|COMPONENT_TYPE_KEY
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
block|{
name|clientName
operator|=
name|component
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|clientName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No client component specified, not publishing client configs"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// register AM-generated client configs
comment|// appConf should already be resolved!
name|MapOperations
name|clientOperations
init|=
name|appConf
operator|.
name|getComponent
argument_list|(
name|clientName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|clientOperations
operator|.
name|getOptionBool
argument_list|(
name|AM_CONFIG_GENERATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"AM config generation is false, not publishing client configs"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// build and localize configuration files
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|providerUtils
operator|.
name|buildConfigurations
argument_list|(
name|appConf
argument_list|,
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
argument_list|,
literal|null
argument_list|,
name|getClusterName
argument_list|()
argument_list|,
name|clientName
argument_list|,
name|clientName
argument_list|,
name|getAmState
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configFileDN
range|:
name|configurations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|configFileName
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|clientName
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configFileDN
operator|+
name|OptionKeys
operator|.
name|NAME_SUFFIX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|configFileType
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|clientName
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configFileDN
operator|+
name|OptionKeys
operator|.
name|TYPE_SUFFIX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFileName
operator|==
literal|null
operator|&&
name|configFileType
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ConfigFormat
name|configFormat
init|=
name|ConfigFormat
operator|.
name|resolve
argument_list|(
name|configFileType
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|configurations
operator|.
name|get
argument_list|(
name|configFileDN
argument_list|)
decl_stmt|;
name|ConfigUtils
operator|.
name|prepConfigForTemplateOutputter
argument_list|(
name|configFormat
argument_list|,
name|config
argument_list|,
name|fileSystem
argument_list|,
name|getClusterName
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|configFileName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|providerUtils
operator|.
name|publishApplicationInstanceData
argument_list|(
name|configFileDN
argument_list|,
name|configFileDN
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|,
name|getAmState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|processContainerStatus (ContainerId containerId, ContainerStatus status)
specifier|public
name|boolean
name|processContainerStatus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerStatus
name|status
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Handling container status: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|status
operator|.
name|getIPs
argument_list|()
argument_list|)
operator|||
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|RoleInstance
name|instance
init|=
name|getAmState
argument_list|()
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
comment|// container is completed?
return|return
literal|false
return|;
block|}
name|String
name|roleName
init|=
name|instance
operator|.
name|role
decl_stmt|;
name|String
name|roleGroup
init|=
name|instance
operator|.
name|group
decl_stmt|;
name|String
name|containerIdStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|providerUtils
operator|.
name|updateServiceRecord
argument_list|(
name|getAmState
argument_list|()
argument_list|,
name|yarnRegistry
argument_list|,
name|containerIdStr
argument_list|,
name|roleName
argument_list|,
name|status
operator|.
name|getIPs
argument_list|()
argument_list|,
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|publishExportGroups
argument_list|(
name|containerIdStr
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * This method looks for configuration properties of the form    * export.key,value and publishes the key,value pair. Standard tokens are    * substituted into the value, and COMPONENTNAME_HOST and THIS_HOST tokens    * are substituted with the actual hostnames of the containers.    */
DECL|method|publishExportGroups (String containerId, String roleName, String roleGroup, String thisHost)
specifier|protected
name|void
name|publishExportGroups
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|thisHost
parameter_list|)
block|{
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|internalsConf
init|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exports
init|=
name|providerUtils
operator|.
name|getExports
argument_list|(
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|String
name|hostKeyFormat
init|=
literal|"${%s_HOST}"
decl_stmt|;
name|String
name|hostNameKeyFormat
init|=
literal|"${%s_HOSTNAME}"
decl_stmt|;
name|String
name|ipKeyFormat
init|=
literal|"${%s_IP}"
decl_stmt|;
comment|// publish export groups if any
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|standardTokens
init|=
name|providerUtils
operator|.
name|getStandardTokenMap
argument_list|(
name|appConf
argument_list|,
name|internalsConf
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replaceTokens
init|=
name|providerUtils
operator|.
name|filterSiteOptions
argument_list|(
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|options
argument_list|,
name|standardTokens
argument_list|)
decl_stmt|;
name|replaceTokens
operator|.
name|putAll
argument_list|(
name|standardTokens
argument_list|)
expr_stmt|;
name|String
name|rolePrefix
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|ROLE_PREFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|getAmState
argument_list|()
operator|.
name|getRoleClusterNodeMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|otherRolePrefix
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ROLE_PREFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|otherRolePrefix
operator|.
name|equals
argument_list|(
name|rolePrefix
argument_list|)
condition|)
block|{
comment|// hostname replacements are only made within role prefix groups
continue|continue;
block|}
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rolePrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|rolePrefix
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Something went wrong, {} doesn't start with {}"
argument_list|,
name|key
argument_list|,
name|rolePrefix
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
name|rolePrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|key
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|providerUtils
operator|.
name|getHostsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|replaceTokens
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|hostKeyFormat
argument_list|,
name|key
argument_list|)
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|String
name|hostName
init|=
name|providerUtils
operator|.
name|getHostNamesList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|replaceTokens
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|hostNameKeyFormat
argument_list|,
name|key
argument_list|)
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
name|String
name|ip
init|=
name|providerUtils
operator|.
name|getIPsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|replaceTokens
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ipKeyFormat
argument_list|,
name|key
argument_list|)
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
name|replaceTokens
operator|.
name|put
argument_list|(
literal|"${THIS_HOST}"
argument_list|,
name|thisHost
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|export
range|:
name|exports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|export
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// replace host names and site properties
for|for
control|(
name|String
name|token
range|:
name|replaceTokens
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
argument_list|)
argument_list|,
name|replaceTokens
operator|.
name|get
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ExportEntry
name|entry
init|=
operator|new
name|ExportEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setLevel
argument_list|(
name|APPLICATION_TAG
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdatedTime
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// over-write, app exports are singletons
name|entries
operator|.
name|put
argument_list|(
name|export
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Preparing to publish. Key {} and Value {}"
argument_list|,
name|export
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|providerUtils
operator|.
name|publishExportGroup
argument_list|(
name|entries
argument_list|,
name|getAmState
argument_list|()
argument_list|,
name|EXPORT_GROUP
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|buildMonitorDetails (ClusterDescription clusterDesc)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|buildMonitorDetails
parameter_list|(
name|ClusterDescription
name|clusterDesc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|details
init|=
name|super
operator|.
name|buildMonitorDetails
argument_list|(
name|clusterDesc
argument_list|)
decl_stmt|;
name|buildRoleHostDetails
argument_list|(
name|details
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
DECL|method|buildRoleHostDetails (Map<String, MonitorDetail> details)
specifier|private
name|void
name|buildRoleHostDetails
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|details
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|getAmState
argument_list|()
operator|.
name|getRoleClusterNodeMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|details
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" Host(s)/Container(s)"
argument_list|,
operator|new
name|MonitorDetail
argument_list|(
name|providerUtils
operator|.
name|getHostsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

