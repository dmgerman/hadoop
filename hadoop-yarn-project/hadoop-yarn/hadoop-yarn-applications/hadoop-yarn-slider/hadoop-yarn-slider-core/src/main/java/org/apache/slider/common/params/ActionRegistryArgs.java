begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|AbstractActionArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|SliderActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|UsageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|SliderActions
operator|.
name|ACTION_REGISTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|SliderActions
operator|.
name|DESCRIBE_ACTION_REGISTRY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Registry actions  *   * --instance {app name}, if  a / is in it, refers underneath?  * --dest {destfile}  * --list : list instances of slider service  * --listfiles   */
end_comment

begin_class
annotation|@
name|Parameters
argument_list|(
name|commandNames
operator|=
block|{
name|ACTION_REGISTRY
block|}
argument_list|,
name|commandDescription
operator|=
name|DESCRIBE_ACTION_REGISTRY
argument_list|)
DECL|class|ActionRegistryArgs
specifier|public
class|class
name|ActionRegistryArgs
extends|extends
name|AbstractActionArgs
block|{
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: "
operator|+
name|SliderActions
operator|.
name|ACTION_REGISTRY
operator|+
literal|" ("
operator|+
name|Arguments
operator|.
name|ARG_LIST
operator|+
literal|"|"
operator|+
name|Arguments
operator|.
name|ARG_LISTCONF
operator|+
literal|"|"
operator|+
name|Arguments
operator|.
name|ARG_LISTEXP
operator|+
literal|"|"
operator|+
name|Arguments
operator|.
name|ARG_LISTFILES
operator|+
literal|"|"
operator|+
name|Arguments
operator|.
name|ARG_GETCONF
operator|+
literal|"|"
operator|+
name|Arguments
operator|.
name|ARG_GETEXP
operator|+
literal|"> "
operator|+
name|Arguments
operator|.
name|ARG_NAME
operator|+
literal|"<name> "
operator|+
literal|" )"
operator|+
literal|"["
operator|+
name|Arguments
operator|.
name|ARG_VERBOSE
operator|+
literal|"] "
operator|+
literal|"["
operator|+
name|Arguments
operator|.
name|ARG_USER
operator|+
literal|"] "
operator|+
literal|"["
operator|+
name|Arguments
operator|.
name|ARG_OUTPUT
operator|+
literal|"<filename> ] "
operator|+
literal|"["
operator|+
name|Arguments
operator|.
name|ARG_SERVICETYPE
operator|+
literal|"<servicetype> ] "
operator|+
literal|"["
operator|+
name|Arguments
operator|.
name|ARG_FORMAT
operator|+
literal|"<xml|json|properties>] "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|"Arguments.ARG_GETEXP only supports "
operator|+
name|Arguments
operator|.
name|ARG_FORMAT
operator|+
literal|" json"
decl_stmt|;
DECL|method|ActionRegistryArgs ()
specifier|public
name|ActionRegistryArgs
parameter_list|()
block|{   }
DECL|method|ActionRegistryArgs (String name)
specifier|public
name|ActionRegistryArgs
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getActionName ()
specifier|public
name|String
name|getActionName
parameter_list|()
block|{
return|return
name|ACTION_REGISTRY
return|;
block|}
comment|/**    * Get the min #of params expected    * @return the min number of params in the {@link #parameters} field    */
annotation|@
name|Override
DECL|method|getMinParams ()
specifier|public
name|int
name|getMinParams
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_LIST
block|}
argument_list|,
name|description
operator|=
literal|"list services"
argument_list|)
DECL|field|list
specifier|public
name|boolean
name|list
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_LISTCONF
block|}
argument_list|,
name|description
operator|=
literal|"list configurations"
argument_list|)
DECL|field|listConf
specifier|public
name|boolean
name|listConf
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_GETCONF
block|}
argument_list|,
name|description
operator|=
literal|"get configuration"
argument_list|)
DECL|field|getConf
specifier|public
name|String
name|getConf
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_LISTEXP
block|}
argument_list|,
name|description
operator|=
literal|"list exports"
argument_list|)
DECL|field|listExports
specifier|public
name|boolean
name|listExports
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_GETEXP
block|}
argument_list|,
name|description
operator|=
literal|"get export"
argument_list|)
DECL|field|getExport
specifier|public
name|String
name|getExport
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_LISTFILES
block|}
argument_list|,
name|description
operator|=
literal|"list files"
argument_list|)
DECL|field|listFiles
specifier|public
name|String
name|listFiles
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_GETFILES
block|}
argument_list|,
name|description
operator|=
literal|"get files"
argument_list|)
DECL|field|getFiles
specifier|public
name|String
name|getFiles
decl_stmt|;
comment|//--format
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_FORMAT
argument_list|,
name|description
operator|=
literal|"Format for a response:<xml|json|properties>"
argument_list|)
DECL|field|format
specifier|public
name|String
name|format
init|=
name|ConfigFormat
operator|.
name|XML
operator|.
name|toString
argument_list|()
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_OUTPUT
block|,
name|ARG_OUTPUT_SHORT
block|,
name|ARG_DEST
block|}
argument_list|,
name|description
operator|=
literal|"Output destination"
argument_list|)
DECL|field|out
specifier|public
name|File
name|out
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_NAME
block|}
argument_list|,
name|description
operator|=
literal|"name of an instance"
argument_list|)
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_SERVICETYPE
block|}
argument_list|,
name|description
operator|=
literal|"optional service type"
argument_list|)
DECL|field|serviceType
specifier|public
name|String
name|serviceType
init|=
name|SliderKeys
operator|.
name|APP_TYPE
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_VERBOSE
block|}
argument_list|,
name|description
operator|=
literal|"verbose output"
argument_list|)
DECL|field|verbose
specifier|public
name|boolean
name|verbose
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_INTERNAL
block|}
argument_list|,
name|description
operator|=
literal|"fetch internal registry entries"
argument_list|)
DECL|field|internal
specifier|public
name|boolean
name|internal
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_USER
block|}
argument_list|,
name|description
operator|=
literal|"the name of the user whose application is being resolved"
argument_list|)
DECL|field|user
specifier|public
name|String
name|user
decl_stmt|;
comment|/**    * validate health of all the different operations    * @throws BadCommandArgumentsException    */
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|BadCommandArgumentsException
throws|,
name|UsageException
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|//verify that at most one of the operations is set
name|int
name|gets
init|=
name|s
argument_list|(
name|getConf
argument_list|)
operator|+
name|s
argument_list|(
name|getFiles
argument_list|)
operator|+
name|s
argument_list|(
name|getExport
argument_list|)
decl_stmt|;
name|int
name|lists
init|=
name|s
argument_list|(
name|list
argument_list|)
operator|+
name|s
argument_list|(
name|listConf
argument_list|)
operator|+
name|s
argument_list|(
name|listFiles
argument_list|)
operator|+
name|s
argument_list|(
name|listExports
argument_list|)
decl_stmt|;
name|int
name|set
init|=
name|lists
operator|+
name|gets
decl_stmt|;
if|if
condition|(
name|set
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|UsageException
argument_list|(
name|USAGE
argument_list|)
throw|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
operator|(
name|set
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|UsageException
argument_list|(
literal|"output path"
operator|+
literal|" is only supported on 'get' operations: "
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|list
operator|&&
operator|!
name|is
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UsageException
argument_list|(
literal|"Argument "
operator|+
name|ARG_NAME
operator|+
literal|" missing: "
argument_list|)
throw|;
block|}
block|}
DECL|method|s (String arg)
specifier|private
name|int
name|s
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
return|return
name|is
argument_list|(
name|arg
argument_list|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
DECL|method|is (String arg)
specifier|private
name|boolean
name|is
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|!=
literal|null
return|;
block|}
DECL|method|s (boolean arg)
specifier|private
name|int
name|s
parameter_list|(
name|boolean
name|arg
parameter_list|)
block|{
return|return
name|arg
condition|?
literal|1
else|:
literal|0
return|;
block|}
DECL|method|ifdef (String arg, boolean val)
specifier|private
name|String
name|ifdef
parameter_list|(
name|String
name|arg
parameter_list|,
name|boolean
name|val
parameter_list|)
block|{
return|return
name|val
condition|?
operator|(
name|arg
operator|+
literal|" "
operator|)
else|:
literal|""
return|;
block|}
DECL|method|ifdef (String arg, String val)
specifier|private
name|String
name|ifdef
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|is
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|arg
operator|+
literal|" "
operator|+
name|val
operator|+
literal|" "
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|ACTION_REGISTRY
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_LIST
argument_list|,
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_LISTCONF
argument_list|,
name|listConf
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_LISTFILES
argument_list|,
name|listFiles
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_GETCONF
argument_list|,
name|getConf
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_GETFILES
argument_list|,
name|getFiles
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_NAME
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_SERVICETYPE
argument_list|,
name|serviceType
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_VERBOSE
argument_list|,
name|verbose
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_INTERNAL
argument_list|,
name|internal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_OUTPUT
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ifdef
argument_list|(
name|ARG_FORMAT
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

