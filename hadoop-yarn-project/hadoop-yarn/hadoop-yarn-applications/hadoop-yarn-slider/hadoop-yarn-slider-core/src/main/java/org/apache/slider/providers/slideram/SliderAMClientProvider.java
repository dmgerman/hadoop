begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.slideram
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|slideram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|AbstractLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|JavaCommandLineBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|AbstractClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
import|;
end_import

begin_comment
comment|/**  * handles the setup of the Slider AM.  * This keeps aspects of role, cluster validation and Clusterspec setup  * out of the core slider client  */
end_comment

begin_class
DECL|class|SliderAMClientProvider
specifier|public
class|class
name|SliderAMClientProvider
extends|extends
name|AbstractClientProvider
implements|implements
name|SliderKeys
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderAMClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|protected
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"SliderAM"
decl_stmt|;
DECL|field|INSTANCE_RESOURCE_BASE
specifier|public
specifier|static
specifier|final
name|String
name|INSTANCE_RESOURCE_BASE
init|=
name|PROVIDER_RESOURCE_BASE_ROOT
operator|+
literal|"slideram/instance/"
decl_stmt|;
DECL|field|INTERNAL_JSON
specifier|public
specifier|static
specifier|final
name|String
name|INTERNAL_JSON
init|=
name|INSTANCE_RESOURCE_BASE
operator|+
literal|"internal.json"
decl_stmt|;
DECL|field|APPCONF_JSON
specifier|public
specifier|static
specifier|final
name|String
name|APPCONF_JSON
init|=
name|INSTANCE_RESOURCE_BASE
operator|+
literal|"appconf.json"
decl_stmt|;
DECL|field|RESOURCES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCES_JSON
init|=
name|INSTANCE_RESOURCE_BASE
operator|+
literal|"resources.json"
decl_stmt|;
DECL|method|SliderAMClientProvider (Configuration conf)
specifier|public
name|SliderAMClientProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * List of roles    */
DECL|field|ROLES
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|ROLES
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderRole
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|KEY_AM
specifier|public
specifier|static
specifier|final
name|int
name|KEY_AM
init|=
name|ROLE_AM_PRIORITY_INDEX
decl_stmt|;
DECL|field|APPMASTER
specifier|public
specifier|static
specifier|final
name|ProviderRole
name|APPMASTER
init|=
operator|new
name|ProviderRole
argument_list|(
name|COMPONENT_AM
argument_list|,
name|KEY_AM
argument_list|,
name|PlacementPolicy
operator|.
name|EXCLUDE_FROM_FLEXING
argument_list|,
name|ResourceKeys
operator|.
name|DEFAULT_NODE_FAILURE_THRESHOLD
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|/**    * Initialize role list    */
static|static
block|{
name|ROLES
operator|.
name|add
argument_list|(
name|APPMASTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getRoles ()
specifier|public
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|ROLES
return|;
block|}
annotation|@
name|Override
comment|//Client
DECL|method|preflightValidateClusterConfiguration (SliderFileSystem sliderFileSystem, String clustername, Configuration configuration, AggregateConf instanceDefinition, Path clusterDirPath, Path generatedConfDirPath, boolean secure)
specifier|public
name|void
name|preflightValidateClusterConfiguration
parameter_list|(
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|String
name|clustername
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|Path
name|clusterDirPath
parameter_list|,
name|Path
name|generatedConfDirPath
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
name|super
operator|.
name|preflightValidateClusterConfiguration
argument_list|(
name|sliderFileSystem
argument_list|,
name|clustername
argument_list|,
name|configuration
argument_list|,
name|instanceDefinition
argument_list|,
name|clusterDirPath
argument_list|,
name|generatedConfDirPath
argument_list|,
name|secure
argument_list|)
expr_stmt|;
comment|//add a check for the directory being writeable by the current user
name|String
name|dataPath
init|=
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getMandatoryOption
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_DATA_DIR_PATH
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
name|sliderFileSystem
operator|.
name|verifyDirectoryWriteAccess
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|historyPath
init|=
operator|new
name|Path
argument_list|(
name|clusterDirPath
argument_list|,
name|SliderKeys
operator|.
name|HISTORY_DIR_NAME
argument_list|)
decl_stmt|;
name|sliderFileSystem
operator|.
name|verifyDirectoryWriteAccess
argument_list|(
name|historyPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that an instance definition is considered valid by the provider    * @param instanceDefinition instance definition    * @throws SliderException if the configuration is not valid    */
DECL|method|validateInstanceDefinition (AggregateConf instanceDefinition, SliderFileSystem fs)
specifier|public
name|void
name|validateInstanceDefinition
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fs
parameter_list|)
throws|throws
name|SliderException
block|{
name|super
operator|.
name|validateInstanceDefinition
argument_list|(
name|instanceDefinition
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// make sure there is no negative entry in the instance count
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|instanceMap
init|=
name|instanceDefinition
operator|.
name|getResources
argument_list|()
operator|.
name|components
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|instanceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MapOperations
name|mapOperations
init|=
operator|new
name|MapOperations
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|int
name|instances
init|=
name|mapOperations
operator|.
name|getOptionInt
argument_list|(
name|COMPONENT_INSTANCES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|instances
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
literal|"Component %s has negative instance count: %d"
argument_list|,
name|mapOperations
operator|.
name|name
argument_list|,
name|instances
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * The Slider AM sets up all the dependency JARs above slider.jar itself    * {@inheritDoc}    */
DECL|method|prepareAMAndConfigForLaunch (SliderFileSystem fileSystem, Configuration serviceConf, AbstractLauncher launcher, AggregateConf instanceDescription, Path snapshotConfDirPath, Path generatedConfDirPath, Configuration clientConfExtras, String libdir, Path tempPath, boolean miniClusterTestRun)
specifier|public
name|void
name|prepareAMAndConfigForLaunch
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Configuration
name|serviceConf
parameter_list|,
name|AbstractLauncher
name|launcher
parameter_list|,
name|AggregateConf
name|instanceDescription
parameter_list|,
name|Path
name|snapshotConfDirPath
parameter_list|,
name|Path
name|generatedConfDirPath
parameter_list|,
name|Configuration
name|clientConfExtras
parameter_list|,
name|String
name|libdir
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|boolean
name|miniClusterTestRun
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ProviderUtils
operator|.
name|addProviderJar
argument_list|(
name|providerResources
argument_list|,
name|this
argument_list|,
name|SLIDER_JAR
argument_list|,
name|fileSystem
argument_list|,
name|tempPath
argument_list|,
name|libdir
argument_list|,
name|miniClusterTestRun
argument_list|)
expr_stmt|;
name|String
name|libDirProp
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SliderKeys
operator|.
name|PROPERTY_LIB_DIR
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Loading all dependencies for AM."
argument_list|)
expr_stmt|;
comment|// If slider.tar.gz is available in hdfs use it, else upload all jars
name|Path
name|dependencyLibTarGzip
init|=
name|fileSystem
operator|.
name|getDependencyTarGzip
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|dependencyLibTarGzip
argument_list|)
condition|)
block|{
name|SliderUtils
operator|.
name|putAmTarGzipAndUpdate
argument_list|(
name|providerResources
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProviderUtils
operator|.
name|addAllDependencyJars
argument_list|(
name|providerResources
argument_list|,
name|fileSystem
argument_list|,
name|tempPath
argument_list|,
name|libdir
argument_list|,
name|libDirProp
argument_list|)
expr_stmt|;
block|}
name|addKeytabResourceIfNecessary
argument_list|(
name|fileSystem
argument_list|,
name|instanceDescription
argument_list|,
name|providerResources
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|addLocalResources
argument_list|(
name|providerResources
argument_list|)
expr_stmt|;
comment|//also pick up all env variables from a map
name|launcher
operator|.
name|copyEnvVars
argument_list|(
name|instanceDescription
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|getOrAddComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the cluster is secure, and an HDFS installed keytab is available for AM    * authentication, add this keytab as a local resource for the AM launch.    *    * @param fileSystem    * @param instanceDescription    * @param providerResources    * @throws IOException    * @throws BadConfigException if there's no keytab and it is explicitly required.    */
DECL|method|addKeytabResourceIfNecessary (SliderFileSystem fileSystem, AggregateConf instanceDescription, Map<String, LocalResource> providerResources)
specifier|protected
name|void
name|addKeytabResourceIfNecessary
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|AggregateConf
name|instanceDescription
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|keytabPathOnHost
init|=
name|instanceDescription
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|keytabPathOnHost
argument_list|)
condition|)
block|{
name|String
name|amKeytabName
init|=
name|instanceDescription
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
decl_stmt|;
name|String
name|keytabDir
init|=
name|instanceDescription
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_HDFS_KEYTAB_DIR
argument_list|)
decl_stmt|;
name|Path
name|keytabPath
init|=
name|fileSystem
operator|.
name|buildKeytabPath
argument_list|(
name|keytabDir
argument_list|,
name|amKeytabName
argument_list|,
name|instanceDescription
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|keytabPath
argument_list|)
condition|)
block|{
name|LocalResource
name|keytabRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|keytabPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|KEYTAB_DIR
operator|+
literal|"/"
operator|+
name|amKeytabName
argument_list|,
name|keytabRes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No keytab file was found at {}."
argument_list|,
name|keytabPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|KEY_AM_LOGIN_KEYTAB_REQUIRED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"No keytab file was found at %s."
argument_list|,
name|keytabPath
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The AM will be "
operator|+
literal|"started without a kerberos authenticated identity. "
operator|+
literal|"The application is therefore not guaranteed to remain "
operator|+
literal|"operational beyond 24 hours."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Update the AM resource with any local needs    * @param capability capability to update    */
DECL|method|prepareAMResourceRequirements (MapOperations sliderAM, Resource capability)
specifier|public
name|void
name|prepareAMResourceRequirements
parameter_list|(
name|MapOperations
name|sliderAM
parameter_list|,
name|Resource
name|capability
parameter_list|)
block|{
name|capability
operator|.
name|setMemory
argument_list|(
name|sliderAM
operator|.
name|getOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|YARN_MEMORY
argument_list|,
name|capability
operator|.
name|getMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setVirtualCores
argument_list|(
name|sliderAM
operator|.
name|getOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|YARN_CORES
argument_list|,
name|capability
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extract any JVM options from the cluster specification and    * add them to the command line    */
DECL|method|addJVMOptions (AggregateConf aggregateConf, JavaCommandLineBuilder cmdLine)
specifier|public
name|void
name|addJVMOptions
parameter_list|(
name|AggregateConf
name|aggregateConf
parameter_list|,
name|JavaCommandLineBuilder
name|cmdLine
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|MapOperations
name|sliderAM
init|=
name|aggregateConf
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getMandatoryComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
decl_stmt|;
name|cmdLine
operator|.
name|forceIPv4
argument_list|()
operator|.
name|headless
argument_list|()
expr_stmt|;
name|String
name|heap
init|=
name|sliderAM
operator|.
name|getOption
argument_list|(
name|RoleKeys
operator|.
name|JVM_HEAP
argument_list|,
name|DEFAULT_JVM_HEAP
argument_list|)
decl_stmt|;
name|cmdLine
operator|.
name|setJVMHeap
argument_list|(
name|heap
argument_list|)
expr_stmt|;
name|String
name|jvmopts
init|=
name|sliderAM
operator|.
name|getOption
argument_list|(
name|RoleKeys
operator|.
name|JVM_OPTS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|jvmopts
argument_list|)
condition|)
block|{
name|cmdLine
operator|.
name|add
argument_list|(
name|jvmopts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepareInstanceConfiguration (AggregateConf aggregateConf)
specifier|public
name|void
name|prepareInstanceConfiguration
parameter_list|(
name|AggregateConf
name|aggregateConf
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
name|mergeTemplates
argument_list|(
name|aggregateConf
argument_list|,
name|INTERNAL_JSON
argument_list|,
name|RESOURCES_JSON
argument_list|,
name|APPCONF_JSON
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

