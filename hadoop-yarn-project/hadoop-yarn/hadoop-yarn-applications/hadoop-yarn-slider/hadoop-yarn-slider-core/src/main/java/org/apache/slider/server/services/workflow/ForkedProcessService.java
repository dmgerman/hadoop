begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|ServiceLaunchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Service wrapper for an external program that is launched and can/will terminate.  * This service is notified when the subprocess terminates, and stops itself   * and converts a non-zero exit code into a failure exception.  *   *<p>  * Key Features:  *<ol>  *<li>The property {@link #executionTimeout} can be set to set a limit  *   on the duration of a process</li>  *<li>Output is streamed to the output logger provided</li>.  *<li>The most recent lines of output are saved to a linked list</li>.  *<li>A synchronous callback, {@link LongLivedProcessLifecycleEvent}, is raised on the start  *   and finish of a process.</li>  *</ol>  *  * Usage:  *<p></p>  * The service can be built in the constructor, {@link #ForkedProcessService(String, Map, List)},  * or have its simple constructor used to instantiate the service, then the   * {@link #build(Map, List)} command used to define the environment variables  * and list of commands to execute. One of these two options MUST be exercised  * before calling the services's {@link #start()} method.  *<p></p>  * The forked process is executed in the service's {@link #serviceStart()} method;  * if still running when the service is stopped, {@link #serviceStop()} will  * attempt to stop it.  *<p></p>  *   * The service delegates process execution to {@link LongLivedProcess},  * receiving callbacks via the {@link LongLivedProcessLifecycleEvent}.  * When the service receives a callback notifying that the process has completed,  * it calls its {@link #stop()} method. If the error code was non-zero,   * the service is logged as having failed.  */
end_comment

begin_class
DECL|class|ForkedProcessService
specifier|public
class|class
name|ForkedProcessService
extends|extends
name|WorkflowExecutorService
argument_list|<
name|ExecutorService
argument_list|>
implements|implements
name|LongLivedProcessLifecycleEvent
implements|,
name|Runnable
block|{
comment|/**    * Log for the forked master process    */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ForkedProcessService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|processTerminated
specifier|private
specifier|final
name|AtomicBoolean
name|processTerminated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|processStarted
specifier|private
name|boolean
name|processStarted
init|=
literal|false
decl_stmt|;
DECL|field|process
specifier|private
name|LongLivedProcess
name|process
decl_stmt|;
DECL|field|executionTimeout
specifier|private
name|int
name|executionTimeout
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|timeoutCode
specifier|private
name|int
name|timeoutCode
init|=
literal|1
decl_stmt|;
comment|/**    log to log to; defaults to this service log    */
DECL|field|processLog
specifier|private
name|Logger
name|processLog
init|=
name|LOG
decl_stmt|;
comment|/**    * Exit code set when the spawned process exits    */
DECL|field|exitCode
specifier|private
name|AtomicInteger
name|exitCode
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Create an instance of the service    * @param name a name    */
DECL|method|ForkedProcessService (String name)
specifier|public
name|ForkedProcessService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an instance of the service,  set up the process    * @param name a name    * @param commandList list of commands is inserted on the front    * @param env environment variables above those generated by    * @throws IOException IO problems    */
DECL|method|ForkedProcessService (String name, Map<String, String> env, List<String> commandList)
specifier|public
name|ForkedProcessService
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commandList
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|build
argument_list|(
name|env
argument_list|,
name|commandList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//AbstractService
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|process
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceStateException
argument_list|(
literal|"Process not yet configured"
argument_list|)
throw|;
block|}
comment|//now spawn the process -expect updates via callbacks
name|process
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|//AbstractService
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|completed
argument_list|()
expr_stmt|;
name|stopForkedProcess
argument_list|()
expr_stmt|;
block|}
DECL|method|stopForkedProcess ()
specifier|private
name|void
name|stopForkedProcess
parameter_list|()
block|{
if|if
condition|(
name|process
operator|!=
literal|null
condition|)
block|{
name|process
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the process log. This may be null for "do not log"    * @param processLog process log    */
DECL|method|setProcessLog (Logger processLog)
specifier|public
name|void
name|setProcessLog
parameter_list|(
name|Logger
name|processLog
parameter_list|)
block|{
name|this
operator|.
name|processLog
operator|=
name|processLog
expr_stmt|;
name|process
operator|.
name|setProcessLog
argument_list|(
name|processLog
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the timeout by which time a process must have finished -or -1 for forever    * @param timeout timeout in milliseconds    */
DECL|method|setTimeout (int timeout, int code)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|,
name|int
name|code
parameter_list|)
block|{
name|this
operator|.
name|executionTimeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|timeoutCode
operator|=
name|code
expr_stmt|;
block|}
comment|/**    * Build the process to execute when the service is started    * @param commandList list of commands is inserted on the front    * @param env environment variables above those generated by    * @throws IOException IO problems    */
DECL|method|build (Map<String, String> env, List<String> commandList)
specifier|public
name|void
name|build
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commandList
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|process
operator|==
literal|null
assert|;
name|process
operator|=
operator|new
name|LongLivedProcess
argument_list|(
name|getName
argument_list|()
argument_list|,
name|processLog
argument_list|,
name|commandList
argument_list|)
expr_stmt|;
name|process
operator|.
name|setLifecycleCallback
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//set the env variable mapping
name|process
operator|.
name|putEnvMap
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// notification from executed process
DECL|method|onProcessStarted (LongLivedProcess process)
specifier|public
specifier|synchronized
name|void
name|onProcessStarted
parameter_list|(
name|LongLivedProcess
name|process
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process has started"
argument_list|)
expr_stmt|;
name|processStarted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|executionTimeout
operator|>
literal|0
condition|)
block|{
name|setExecutor
argument_list|(
name|ServiceThreadFactory
operator|.
name|singleThreadExecutor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// notification from executed process
DECL|method|onProcessExited (LongLivedProcess process, int uncorrected, int code)
specifier|public
name|void
name|onProcessExited
parameter_list|(
name|LongLivedProcess
name|process
parameter_list|,
name|int
name|uncorrected
parameter_list|,
name|int
name|code
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|completed
argument_list|()
expr_stmt|;
comment|//note whether or not the service had already stopped
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process has exited with exit code {}"
argument_list|,
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|!=
literal|0
condition|)
block|{
name|reportFailure
argument_list|(
name|code
argument_list|,
name|getName
argument_list|()
operator|+
literal|" failed with code "
operator|+
name|code
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reportFailure (int code, String text)
specifier|private
name|void
name|reportFailure
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|text
parameter_list|)
block|{
comment|//error
name|ServiceLaunchException
name|execEx
init|=
operator|new
name|ServiceLaunchException
argument_list|(
name|code
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Noting failure"
argument_list|,
name|execEx
argument_list|)
expr_stmt|;
name|noteFailure
argument_list|(
name|execEx
argument_list|)
expr_stmt|;
block|}
comment|/**    * handle timeout response by escalating it to a failure    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|processTerminated
init|)
block|{
if|if
condition|(
operator|!
name|processTerminated
operator|.
name|get
argument_list|()
condition|)
block|{
name|processTerminated
operator|.
name|wait
argument_list|(
name|executionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//assume signalled; exit
block|}
comment|//check the status; if the marker isn't true, bail
if|if
condition|(
operator|!
name|processTerminated
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"process timeout: reporting error code {}"
argument_list|,
name|timeoutCode
argument_list|)
expr_stmt|;
comment|//timeout
if|if
condition|(
name|isInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
condition|)
block|{
comment|//trigger a failure
name|stopForkedProcess
argument_list|()
expr_stmt|;
block|}
name|reportFailure
argument_list|(
name|timeoutCode
argument_list|,
name|getName
argument_list|()
operator|+
literal|": timeout after "
operator|+
name|executionTimeout
operator|+
literal|" millis: exit code ="
operator|+
name|timeoutCode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Note the process as having completed.    * The process marked as terminated    * -and anything synchronized on<code>processTerminated</code>    * is notified    */
DECL|method|completed ()
specifier|protected
name|void
name|completed
parameter_list|()
block|{
name|processTerminated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|processTerminated
init|)
block|{
name|processTerminated
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isProcessTerminated ()
specifier|public
name|boolean
name|isProcessTerminated
parameter_list|()
block|{
return|return
name|processTerminated
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isProcessStarted ()
specifier|public
specifier|synchronized
name|boolean
name|isProcessStarted
parameter_list|()
block|{
return|return
name|processStarted
return|;
block|}
comment|/**    * Is a process running: between started and terminated    * @return true if the process is up.    */
DECL|method|isProcessRunning ()
specifier|public
specifier|synchronized
name|boolean
name|isProcessRunning
parameter_list|()
block|{
return|return
name|processStarted
operator|&&
operator|!
name|isProcessTerminated
argument_list|()
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|Integer
name|getExitCode
parameter_list|()
block|{
return|return
name|process
operator|.
name|getExitCode
argument_list|()
return|;
block|}
DECL|method|getExitCodeSignCorrected ()
specifier|public
name|int
name|getExitCodeSignCorrected
parameter_list|()
block|{
name|Integer
name|exitCode
init|=
name|process
operator|.
name|getExitCodeSignCorrected
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitCode
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|exitCode
return|;
block|}
comment|/**    * Get the recent output from the process, or [] if not defined    * @return a possibly empty list    */
DECL|method|getRecentOutput ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRecentOutput
parameter_list|()
block|{
return|return
name|process
operator|!=
literal|null
condition|?
name|process
operator|.
name|getRecentOutput
argument_list|()
else|:
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Get the recent output from the process, or [] if not defined    *    * @param finalOutput flag to indicate "wait for the final output of the process"    * @param duration the duration, in ms,     * to wait for recent output to become non-empty    * @return a possibly empty list    */
DECL|method|getRecentOutput (boolean finalOutput, int duration)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRecentOutput
parameter_list|(
name|boolean
name|finalOutput
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
if|if
condition|(
name|process
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|process
operator|.
name|getRecentOutput
argument_list|(
name|finalOutput
argument_list|,
name|duration
argument_list|)
return|;
block|}
block|}
end_class

end_unit

