begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.launch
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderYarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Launched App with logic around it.  */
end_comment

begin_class
DECL|class|LaunchedApplication
specifier|public
class|class
name|LaunchedApplication
block|{
DECL|field|applicationId
specifier|protected
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|yarnClient
specifier|protected
specifier|final
name|SliderYarnClientImpl
name|yarnClient
decl_stmt|;
DECL|method|LaunchedApplication (ApplicationId applicationId, SliderYarnClientImpl yarnClient)
specifier|public
name|LaunchedApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|SliderYarnClientImpl
name|yarnClient
parameter_list|)
block|{
assert|assert
name|applicationId
operator|!=
literal|null
assert|;
assert|assert
name|yarnClient
operator|!=
literal|null
assert|;
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
block|}
DECL|method|LaunchedApplication (SliderYarnClientImpl yarnClient, ApplicationReport report)
specifier|public
name|LaunchedApplication
parameter_list|(
name|SliderYarnClientImpl
name|yarnClient
parameter_list|,
name|ApplicationReport
name|report
parameter_list|)
block|{
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|report
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
comment|/**    * Monitor the submitted application for reaching the requested state.    * Will also report if the app reaches a later state (failed, killed, etc)    * Kill application if duration!= null& time expires.     * @param duration how long to wait -must be more than 0    * @param desiredState desired state.    * @return the application report -null on a timeout    * @throws YarnException    * @throws IOException    */
DECL|method|monitorAppToState (YarnApplicationState desiredState, Duration duration)
specifier|public
name|ApplicationReport
name|monitorAppToState
parameter_list|(
name|YarnApplicationState
name|desiredState
parameter_list|,
name|Duration
name|duration
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|yarnClient
operator|.
name|monitorAppToState
argument_list|(
name|applicationId
argument_list|,
name|desiredState
argument_list|,
name|duration
argument_list|)
return|;
block|}
comment|/**    * Kill the submitted application by sending a call to the ASM    * @throws YarnException    * @throws IOException    */
DECL|method|forceKill (String reason)
specifier|public
name|boolean
name|forceKill
parameter_list|(
name|String
name|reason
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|applicationId
operator|!=
literal|null
condition|)
block|{
name|yarnClient
operator|.
name|killRunningApplication
argument_list|(
name|applicationId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Kill the application    * @return the response    * @throws YarnException YARN problems    * @throws IOException IO problems    */
DECL|method|kill (String reason)
specifier|public
name|KillApplicationResponse
name|kill
parameter_list|(
name|String
name|reason
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|yarnClient
operator|.
name|killRunningApplication
argument_list|(
name|applicationId
argument_list|,
name|reason
argument_list|)
return|;
block|}
comment|/**    * Get the application report of this application    * @return an application report    * @throws YarnException    * @throws IOException    */
DECL|method|getApplicationReport ()
specifier|public
name|ApplicationReport
name|getApplicationReport
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|applicationId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

