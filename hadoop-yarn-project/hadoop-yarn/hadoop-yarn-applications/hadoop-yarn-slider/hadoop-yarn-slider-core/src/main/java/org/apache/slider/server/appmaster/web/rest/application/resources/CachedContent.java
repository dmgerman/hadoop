begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.rest.application.resources
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|application
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A cached resource is one that can be stored and served up, with a refresh   * only taking place when the expiry happens.  *   * The refresh check/refresh is synchronized.  * @param<T> type to return  */
end_comment

begin_class
DECL|class|CachedContent
specifier|public
class|class
name|CachedContent
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedContent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cachedValue
specifier|private
name|T
name|cachedValue
decl_stmt|;
DECL|field|expires
specifier|private
name|long
name|expires
decl_stmt|;
DECL|field|lifespan
specifier|private
specifier|final
name|long
name|lifespan
decl_stmt|;
DECL|field|refresh
specifier|private
specifier|final
name|ResourceRefresher
argument_list|<
name|T
argument_list|>
name|refresh
decl_stmt|;
DECL|field|refreshCounter
specifier|private
name|int
name|refreshCounter
decl_stmt|;
DECL|method|CachedContent (long lifespan, ResourceRefresher<T> refresh)
specifier|public
name|CachedContent
parameter_list|(
name|long
name|lifespan
parameter_list|,
name|ResourceRefresher
argument_list|<
name|T
argument_list|>
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|lifespan
operator|=
name|lifespan
expr_stmt|;
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
block|}
comment|/**    * Get the value, triggering a refresh if needed    * @return the cached or latest value.    */
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|maybeRefresh
argument_list|()
expr_stmt|;
return|return
name|getCachedValue
argument_list|()
return|;
block|}
comment|/**    * Get the cached value without any expiry check    * @return the last value set. May be null.    */
DECL|method|getCachedValue ()
specifier|public
specifier|synchronized
name|T
name|getCachedValue
parameter_list|()
block|{
return|return
name|cachedValue
return|;
block|}
DECL|method|getRefreshCounter ()
specifier|public
specifier|synchronized
name|int
name|getRefreshCounter
parameter_list|()
block|{
return|return
name|refreshCounter
return|;
block|}
comment|/**    * Get the lifespan in millis of the cached value    * @return the lifespan    */
DECL|method|getLifespan ()
specifier|public
name|long
name|getLifespan
parameter_list|()
block|{
return|return
name|lifespan
return|;
block|}
comment|/**    * Maybe refresh the content    * @return true if a refresh took place.    */
DECL|method|maybeRefresh ()
specifier|public
specifier|synchronized
name|boolean
name|maybeRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachedValue
operator|==
literal|null
operator|||
name|now
operator|>=
name|expires
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Refreshing at time {}"
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|forceRefresh
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Refreshed value now {}"
argument_list|,
name|cachedValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|now ()
specifier|protected
name|long
name|now
parameter_list|()
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
return|;
block|}
comment|/**    * Force a refresh and reset the expiry counter    * @return the new value    */
DECL|method|forceRefresh ()
specifier|protected
specifier|synchronized
name|T
name|forceRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|refreshCounter
operator|++
expr_stmt|;
name|T
name|updated
init|=
name|refresh
operator|.
name|refresh
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|updated
argument_list|)
expr_stmt|;
name|cachedValue
operator|=
name|updated
expr_stmt|;
name|expires
operator|=
name|now
argument_list|()
operator|+
name|lifespan
expr_stmt|;
return|return
name|cachedValue
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"CachedContent{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  expires="
argument_list|)
operator|.
name|append
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", lifespan="
argument_list|)
operator|.
name|append
argument_list|(
name|lifespan
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", refresh="
argument_list|)
operator|.
name|append
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", refreshCounter="
argument_list|)
operator|.
name|append
argument_list|(
name|refreshCounter
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", cached="
argument_list|)
operator|.
name|append
argument_list|(
name|cachedValue
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

