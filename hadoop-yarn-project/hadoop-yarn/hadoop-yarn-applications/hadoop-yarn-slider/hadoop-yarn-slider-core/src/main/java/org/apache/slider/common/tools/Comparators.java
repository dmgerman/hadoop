begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Some general comparators  */
end_comment

begin_class
DECL|class|Comparators
specifier|public
class|class
name|Comparators
block|{
DECL|class|LongComparator
specifier|public
specifier|static
class|class
name|LongComparator
implements|implements
name|Comparator
argument_list|<
name|Long
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (Long o1, Long o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|o1
parameter_list|,
name|Long
name|o2
parameter_list|)
block|{
name|long
name|result
init|=
name|o1
operator|-
name|o2
decl_stmt|;
comment|// need to comparisons with a diff greater than integer size
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|InvertedLongComparator
specifier|public
specifier|static
class|class
name|InvertedLongComparator
implements|implements
name|Comparator
argument_list|<
name|Long
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|inner
specifier|private
specifier|static
specifier|final
name|LongComparator
name|inner
init|=
operator|new
name|LongComparator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|compare (Long o1, Long o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|o1
parameter_list|,
name|Long
name|o2
parameter_list|)
block|{
return|return
operator|-
name|inner
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
block|}
comment|/**    * Little template class to reverse any comparitor    * @param<CompareType> the type that is being compared    */
DECL|class|ComparatorReverser
specifier|public
specifier|static
class|class
name|ComparatorReverser
parameter_list|<
name|CompareType
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|CompareType
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|instance
specifier|final
name|Comparator
argument_list|<
name|CompareType
argument_list|>
name|instance
decl_stmt|;
DECL|method|ComparatorReverser (Comparator<CompareType> instance)
specifier|public
name|ComparatorReverser
parameter_list|(
name|Comparator
argument_list|<
name|CompareType
argument_list|>
name|instance
parameter_list|)
block|{
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (CompareType first, CompareType second)
specifier|public
name|int
name|compare
parameter_list|(
name|CompareType
name|first
parameter_list|,
name|CompareType
name|second
parameter_list|)
block|{
return|return
name|instance
operator|.
name|compare
argument_list|(
name|second
argument_list|,
name|first
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

