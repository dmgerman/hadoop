begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An extended composite service which stops itself if any child service  * fails, or when all its children have successfully stopped without failure.  *  * Lifecycle  *<ol>  *<li>If any child exits with a failure: this service stops, propagating  *   the exception.</li>  *<li>When all child services has stopped, this service stops itself</li>  *</ol>  *  */
end_comment

begin_class
DECL|class|WorkflowCompositeService
specifier|public
class|class
name|WorkflowCompositeService
extends|extends
name|CompositeService
implements|implements
name|ServiceParent
implements|,
name|ServiceStateChangeListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkflowCompositeService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Deadlock-avoiding overridden config for slider services; see SLIDER-1052    */
DECL|field|configuration
specifier|private
specifier|volatile
name|Configuration
name|configuration
decl_stmt|;
comment|/**    * Construct an instance    * @param name name of this service instance    */
DECL|method|WorkflowCompositeService (String name)
specifier|public
name|WorkflowCompositeService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfig ()
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
DECL|method|setConfig (Configuration conf)
specifier|protected
name|void
name|setConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Construct an instance with the default name.    */
DECL|method|WorkflowCompositeService ()
specifier|public
name|WorkflowCompositeService
parameter_list|()
block|{
name|this
argument_list|(
literal|"WorkflowCompositeService"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Varargs constructor    * @param name name of this service instance    * @param children children    */
DECL|method|WorkflowCompositeService (String name, Service... children)
specifier|public
name|WorkflowCompositeService
parameter_list|(
name|String
name|name
parameter_list|,
name|Service
modifier|...
name|children
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Service
name|child
range|:
name|children
control|)
block|{
name|addService
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Construct with a list of children    * @param name name of this service instance    * @param children children to add    */
DECL|method|WorkflowCompositeService (String name, List<Service> children)
specifier|public
name|WorkflowCompositeService
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Service
argument_list|>
name|children
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Service
name|child
range|:
name|children
control|)
block|{
name|addService
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a service, and register it    * @param service the {@link Service} to be added.    * Important: do not add a service to a parent during your own serviceInit/start,    * in Hadoop 2.2; you will trigger a ConcurrentModificationException.    */
annotation|@
name|Override
DECL|method|addService (Service service)
specifier|public
specifier|synchronized
name|void
name|addService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|service
operator|!=
literal|null
argument_list|,
literal|"null service argument"
argument_list|)
expr_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|super
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
comment|/**    * When this service is started, any service stopping with a failure    * exception is converted immediately into a failure of this service,     * storing the failure and stopping ourselves.    * @param child the service that has changed.    */
annotation|@
name|Override
DECL|method|stateChanged (Service child)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|Service
name|child
parameter_list|)
block|{
comment|//if that child stopped while we are running:
if|if
condition|(
name|isInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
operator|&&
name|child
operator|.
name|isInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|)
condition|)
block|{
comment|// a child service has stopped
comment|//did the child fail? if so: propagate
name|Throwable
name|failureCause
init|=
name|child
operator|.
name|getFailureCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|failureCause
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Child service "
operator|+
name|child
operator|+
literal|" failed"
argument_list|,
name|failureCause
argument_list|)
expr_stmt|;
comment|//failure. Convert to an exception
name|Exception
name|e
init|=
operator|(
name|failureCause
operator|instanceof
name|Exception
operator|)
condition|?
operator|(
name|Exception
operator|)
name|failureCause
else|:
operator|new
name|Exception
argument_list|(
name|failureCause
argument_list|)
decl_stmt|;
comment|//flip ourselves into the failed state
name|noteFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Child service completed {}"
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|areAllChildrenStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All children are halted: stopping"
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Probe to query if all children are stopped -simply    * by taking a snapshot of the child service list and enumerating    * their state.     * The state of the children may change during this operation -that will    * not get picked up.    * @return true if all the children are stopped.    */
DECL|method|areAllChildrenStopped ()
specifier|private
name|boolean
name|areAllChildrenStopped
parameter_list|()
block|{
name|List
argument_list|<
name|Service
argument_list|>
name|children
init|=
name|getServices
argument_list|()
decl_stmt|;
name|boolean
name|stopped
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Service
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|isInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|)
condition|)
block|{
name|stopped
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|stopped
return|;
block|}
block|}
end_class

end_unit

