begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|JmxReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ScheduledReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Slf4jReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|ClosingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * YARN service which hooks up Codahale metrics to   * JMX, and, if enabled Ganglia and/or an SLF4J log.  */
end_comment

begin_class
DECL|class|MetricsBindingService
specifier|public
class|class
name|MetricsBindingService
extends|extends
name|CompositeService
implements|implements
name|MetricsKeys
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricsBindingService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|MetricRegistry
name|metrics
decl_stmt|;
DECL|field|reportingDetails
specifier|private
name|String
name|reportingDetails
init|=
literal|"not started"
decl_stmt|;
DECL|method|MetricsBindingService (String name, MetricRegistry metrics)
specifier|public
name|MetricsBindingService
parameter_list|(
name|String
name|name
parameter_list|,
name|MetricRegistry
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|metrics
operator|!=
literal|null
argument_list|,
literal|"Null metrics"
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
comment|/**    * Instantiate...create a metric registry in the process    * @param name service name    */
DECL|method|MetricsBindingService (String name)
specifier|public
name|MetricsBindingService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|MetricRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Accessor for the metrics instance    * @return the metrics    */
DECL|method|getMetrics ()
specifier|public
name|MetricRegistry
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|StringBuilder
name|summary
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|summary
operator|.
name|append
argument_list|(
literal|"Reporting to JMX"
argument_list|)
expr_stmt|;
comment|// always start the JMX binding
name|JmxReporter
name|jmxReporter
decl_stmt|;
name|jmxReporter
operator|=
name|JmxReporter
operator|.
name|forRegistry
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|jmxReporter
operator|.
name|start
argument_list|()
expr_stmt|;
name|addService
argument_list|(
operator|new
name|ClosingService
argument_list|<>
argument_list|(
name|jmxReporter
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ganglia
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|METRICS_GANGLIA_ENABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ganglia integration is not implemented"
argument_list|)
expr_stmt|;
comment|/*       // This is all disabled due to transitive dependencies on an LGPL library       com.codahale.metrics.ganglia.GangliaReporter gangliaReporter;       String host = conf.getTrimmed(METRICS_GANGLIA_HOST, "");       int port = conf.getInt(METRICS_GANGLIA_PORT, DEFAULT_GANGLIA_PORT);       int interval = conf.getInt(METRICS_GANGLIA_REPORT_INTERVAL, 60);       int ttl = 1;       info.ganglia.gmetric4j.gmetric.GMetric.UDPAddressingMode           mcast = info.ganglia.gmetric4j.gmetric.GMetric.UDPAddressingMode.getModeForAddress(host);       boolean ganglia31 = conf.getBoolean(METRICS_GANGLIA_VERSION_31, true);        final info.ganglia.gmetric4j.gmetric.GMetric ganglia =           new info.ganglia.gmetric4j.gmetric.GMetric(               host,               port,               mcast,               ttl,               ganglia31);       gangliaReporter = com.codahale.metrics.ganglia.GangliaReporter.forRegistry(metrics)                                        .convertRatesTo(TimeUnit.SECONDS)                                        .convertDurationsTo(                                            TimeUnit.MILLISECONDS)                                        .build(ganglia);       gangliaReporter.start(interval, TimeUnit.SECONDS);       addService(new ClosingService<ScheduledReporter>(gangliaReporter));       summary.append(String.format(", Ganglia at %s:%d interval=%d",           host, port, interval));       */
block|}
comment|// Logging
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|METRICS_LOGGING_ENABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ScheduledReporter
name|reporter
decl_stmt|;
name|String
name|logName
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|METRICS_LOGGING_LOG
argument_list|,
name|METRICS_DEFAULT_LOG
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|METRICS_LOGGING_LOG_INTERVAL
argument_list|,
name|METRICS_DEFAULT_LOG_INTERVAL
argument_list|)
decl_stmt|;
name|reporter
operator|=
name|Slf4jReporter
operator|.
name|forRegistry
argument_list|(
name|metrics
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|outputTo
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|reporter
operator|.
name|start
argument_list|(
name|interval
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|addService
argument_list|(
operator|new
name|ClosingService
argument_list|<>
argument_list|(
name|reporter
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|", SLF4J to log %s interval=%d"
argument_list|,
name|logName
argument_list|,
name|interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reportingDetails
operator|=
name|summary
operator|.
name|toString
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|reportingDetails
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|reportingDetails
return|;
block|}
block|}
end_class

end_unit

