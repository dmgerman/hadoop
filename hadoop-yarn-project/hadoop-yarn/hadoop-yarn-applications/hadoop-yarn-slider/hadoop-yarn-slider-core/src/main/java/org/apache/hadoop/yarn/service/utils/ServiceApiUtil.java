begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|AbstractClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|servicemonitor
operator|.
name|probe
operator|.
name|MonitorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|RestApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|RestApiErrorMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|PropertyNamingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ServiceApiUtil
specifier|public
class|class
name|ServiceApiUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceApiUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jsonSerDeser
specifier|public
specifier|static
name|JsonSerDeser
argument_list|<
name|Application
argument_list|>
name|jsonSerDeser
init|=
operator|new
name|JsonSerDeser
argument_list|<>
argument_list|(
name|Application
operator|.
name|class
argument_list|,
name|PropertyNamingStrategy
operator|.
name|CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES
argument_list|)
decl_stmt|;
DECL|field|compNamePattern
specifier|private
specifier|static
specifier|final
name|PatternValidator
name|compNamePattern
init|=
operator|new
name|PatternValidator
argument_list|(
literal|"[a-z][a-z0-9-]*"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|setJsonSerDeser (JsonSerDeser jsd)
specifier|public
specifier|static
name|void
name|setJsonSerDeser
parameter_list|(
name|JsonSerDeser
name|jsd
parameter_list|)
block|{
name|jsonSerDeser
operator|=
name|jsd
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|validateAndResolveApplication (Application application, SliderFileSystem fs, org.apache.hadoop.conf.Configuration conf)
specifier|public
specifier|static
name|void
name|validateAndResolveApplication
parameter_list|(
name|Application
name|application
parameter_list|,
name|SliderFileSystem
name|fs
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|dnsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_ENABLED
argument_list|,
name|RegistryConstants
operator|.
name|DEFAULT_DNS_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnsEnabled
operator|&&
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|RegistryConstants
operator|.
name|MAX_FQDN_LABEL_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_USER_NAME_INVALID
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_APPLICATION_NAME_INVALID
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isClusternameValid
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
operator|(
name|dnsEnabled
operator|&&
name|application
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|RegistryConstants
operator|.
name|MAX_FQDN_LABEL_LENGTH
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_APPLICATION_NAME_INVALID_FORMAT
argument_list|,
name|application
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// If the application has no components do top-level checks
if|if
condition|(
operator|!
name|hasComponent
argument_list|(
name|application
argument_list|)
condition|)
block|{
comment|// If artifact is of type APPLICATION, read other application components
if|if
condition|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|!=
literal|null
operator|&&
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ARTIFACT_ID_INVALID
argument_list|)
throw|;
block|}
name|Application
name|otherApplication
init|=
name|loadApplication
argument_list|(
name|fs
argument_list|,
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|application
operator|.
name|setComponents
argument_list|(
name|otherApplication
operator|.
name|getComponents
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|.
name|setArtifact
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SliderUtils
operator|.
name|mergeMapsIgnoreDuplicateKeys
argument_list|(
name|application
operator|.
name|getQuicklinks
argument_list|()
argument_list|,
name|otherApplication
operator|.
name|getQuicklinks
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Since it is a simple app with no components, create a default
comment|// component
name|Component
name|comp
init|=
name|createDefaultComponent
argument_list|(
name|application
argument_list|)
decl_stmt|;
name|validateComponent
argument_list|(
name|comp
argument_list|,
name|fs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
if|if
condition|(
name|application
operator|.
name|getLifetime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setLifetime
argument_list|(
name|RestApiConstants
operator|.
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
comment|// Validate there are no component name collisions (collisions are not
comment|// currently supported) and add any components from external applications
comment|// TODO allow name collisions? see AppState#roles
comment|// TODO or add prefix to external component names?
name|Configuration
name|globalConf
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Component
argument_list|>
name|componentsToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Component
argument_list|>
name|componentsToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|int
name|maxCompLength
init|=
name|RegistryConstants
operator|.
name|MAX_FQDN_LABEL_LENGTH
decl_stmt|;
name|maxCompLength
operator|=
name|maxCompLength
operator|-
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|dnsEnabled
operator|&&
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|maxCompLength
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_COMPONENT_NAME_INVALID
argument_list|,
name|maxCompLength
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|componentNames
operator|.
name|contains
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Component name collision: "
operator|+
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// If artifact is of type APPLICATION (which cannot be filled from
comment|// global), read external application and add its components to this
comment|// application
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|!=
literal|null
operator|&&
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ARTIFACT_ID_INVALID
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Marking {} for removal"
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|componentsToRemove
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Component
argument_list|>
name|externalComponents
init|=
name|getApplicationComponents
argument_list|(
name|fs
argument_list|,
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|c
range|:
name|externalComponents
control|)
block|{
name|Component
name|override
init|=
name|application
operator|.
name|getComponent
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|!=
literal|null
operator|&&
name|override
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// allow properties from external components to be overridden /
comment|// augmented by properties in this component, except for artifact
comment|// which must be read from external component
name|override
operator|.
name|mergeFrom
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging external component {} from external {}"
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|componentNames
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Component name collision: "
operator|+
name|c
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|componentNames
operator|.
name|add
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|componentsToAdd
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding component {} from external {}"
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// otherwise handle as a normal component
name|componentNames
operator|.
name|add
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// configuration
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|globalConf
argument_list|)
expr_stmt|;
block|}
block|}
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|removeAll
argument_list|(
name|componentsToRemove
argument_list|)
expr_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|addAll
argument_list|(
name|componentsToAdd
argument_list|)
expr_stmt|;
comment|// Validate components and let global values take effect if component level
comment|// values are not provided
name|Artifact
name|globalArtifact
init|=
name|application
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|Resource
name|globalResource
init|=
name|application
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Long
name|globalNumberOfContainers
init|=
name|application
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
name|String
name|globalLaunchCommand
init|=
name|application
operator|.
name|getLaunchCommand
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
comment|// fill in global artifact unless it is type APPLICATION
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
operator|&&
name|application
operator|.
name|getArtifact
argument_list|()
operator|!=
literal|null
operator|&&
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
name|comp
operator|.
name|setArtifact
argument_list|(
name|globalArtifact
argument_list|)
expr_stmt|;
block|}
comment|// fill in global resource
if|if
condition|(
name|comp
operator|.
name|getResource
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setResource
argument_list|(
name|globalResource
argument_list|)
expr_stmt|;
block|}
comment|// fill in global container count
if|if
condition|(
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
name|globalNumberOfContainers
argument_list|)
expr_stmt|;
block|}
comment|// fill in global launch command
if|if
condition|(
name|comp
operator|.
name|getLaunchCommand
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setLaunchCommand
argument_list|(
name|globalLaunchCommand
argument_list|)
expr_stmt|;
block|}
comment|// validate dependency existence
if|if
condition|(
name|comp
operator|.
name|getDependencies
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|dependency
range|:
name|comp
operator|.
name|getDependencies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|componentNames
operator|.
name|contains
argument_list|(
name|dependency
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_DEPENDENCY_INVALID
argument_list|,
name|dependency
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
name|validateComponent
argument_list|(
name|comp
argument_list|,
name|fs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// validate dependency tree
name|sortByDependencies
argument_list|(
name|application
operator|.
name|getComponents
argument_list|()
argument_list|)
expr_stmt|;
comment|// Application lifetime if not specified, is set to unlimited lifetime
if|if
condition|(
name|application
operator|.
name|getLifetime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setLifetime
argument_list|(
name|RestApiConstants
operator|.
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateComponent (Component comp, FileSystem fs)
specifier|public
specifier|static
name|void
name|validateComponent
parameter_list|(
name|Component
name|comp
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|validateCompName
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractClientProvider
name|compClientProvider
init|=
name|ProviderFactory
operator|.
name|getClientProvider
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|compClientProvider
operator|.
name|validateArtifact
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|getLaunchCommand
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
operator|||
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|Artifact
operator|.
name|TypeEnum
operator|.
name|DOCKER
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ABSENT_LAUNCH_COMMAND
argument_list|)
throw|;
block|}
name|validateApplicationResource
argument_list|(
name|comp
operator|.
name|getResource
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
operator|||
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID
operator|+
literal|": "
operator|+
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|compClientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|MonitorUtils
operator|.
name|getProbe
argument_list|(
name|comp
operator|.
name|getReadinessCheck
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check component name format and transform to lower case.
DECL|method|validateCompName (String compName)
specifier|public
specifier|static
name|void
name|validateCompName
parameter_list|(
name|String
name|compName
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|compName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Component name can not be empty"
argument_list|)
throw|;
block|}
comment|// validate component name
if|if
condition|(
name|compName
operator|.
name|contains
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid format for component name: "
operator|+
name|compName
operator|+
literal|", can not use '_' as DNS hostname does not allow underscore. Use '-' Instead. "
argument_list|)
throw|;
block|}
name|compNamePattern
operator|.
name|validate
argument_list|(
name|compName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getApplicationComponents (SliderFileSystem fs, String appName)
specifier|public
specifier|static
name|List
argument_list|<
name|Component
argument_list|>
name|getApplicationComponents
parameter_list|(
name|SliderFileSystem
name|fs
parameter_list|,
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadApplication
argument_list|(
name|fs
argument_list|,
name|appName
argument_list|)
operator|.
name|getComponents
argument_list|()
return|;
block|}
DECL|method|loadApplication (SliderFileSystem fs, String appName)
specifier|public
specifier|static
name|Application
name|loadApplication
parameter_list|(
name|SliderFileSystem
name|fs
parameter_list|,
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appJson
init|=
name|getAppJsonPath
argument_list|(
name|fs
argument_list|,
name|appName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading application definition from "
operator|+
name|appJson
argument_list|)
expr_stmt|;
return|return
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|fs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|appJson
argument_list|)
return|;
block|}
DECL|method|loadApplicationFrom (SliderFileSystem fs, Path appDefPath)
specifier|public
specifier|static
name|Application
name|loadApplicationFrom
parameter_list|(
name|SliderFileSystem
name|fs
parameter_list|,
name|Path
name|appDefPath
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading application definition from "
operator|+
name|appDefPath
argument_list|)
expr_stmt|;
return|return
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|fs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|appDefPath
argument_list|)
return|;
block|}
DECL|method|getAppJsonPath (SliderFileSystem fs, String appName)
specifier|public
specifier|static
name|Path
name|getAppJsonPath
parameter_list|(
name|SliderFileSystem
name|fs
parameter_list|,
name|String
name|appName
parameter_list|)
block|{
name|Path
name|appDir
init|=
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|appName
argument_list|)
decl_stmt|;
name|Path
name|appJson
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|appName
operator|+
literal|".json"
argument_list|)
decl_stmt|;
return|return
name|appJson
return|;
block|}
DECL|method|validateApplicationResource (Resource resource, Component comp)
specifier|private
specifier|static
name|void
name|validateApplicationResource
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Component
name|comp
parameter_list|)
block|{
comment|// Only apps/components of type APPLICATION can skip resource requirement
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// One and only one of profile OR cpus& memory can be specified. Specifying
comment|// both raises validation error.
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
operator|&&
operator|(
name|resource
operator|.
name|getCpus
argument_list|()
operator|!=
literal|null
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_NOT_SUPPORTED
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_FOR_COMP_NOT_SUPPORTED
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Currently resource profile is not supported yet, so we will raise
comment|// validation error if only resource profile is specified
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET
argument_list|)
throw|;
block|}
name|String
name|memory
init|=
name|resource
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|Integer
name|cpus
init|=
name|resource
operator|.
name|getCpus
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|memory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_MEMORY_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_MEMORY_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpus
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_INVALID_RANGE
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID_RANGE
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// check if comp mem size exceeds cluster limit
DECL|method|validateCompResourceSize ( org.apache.hadoop.yarn.api.records.Resource maxResource, Application application)
specifier|public
specifier|static
name|void
name|validateCompResourceSize
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
name|maxResource
parameter_list|,
name|Application
name|application
parameter_list|)
throws|throws
name|YarnException
block|{
for|for
control|(
name|Component
name|component
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
comment|// only handle mem now.
name|long
name|mem
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|component
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mem
operator|>
name|maxResource
operator|.
name|getMemorySize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Component "
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|" memory size ("
operator|+
name|mem
operator|+
literal|") is larger than configured max container memory size ("
operator|+
name|maxResource
operator|.
name|getMemorySize
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|hasComponent (Application application)
specifier|public
specifier|static
name|boolean
name|hasComponent
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
if|if
condition|(
name|application
operator|.
name|getComponents
argument_list|()
operator|==
literal|null
operator|||
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createDefaultComponent (Application app)
specifier|public
specifier|static
name|Component
name|createDefaultComponent
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
name|Component
name|comp
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setName
argument_list|(
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setArtifact
argument_list|(
name|app
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setResource
argument_list|(
name|app
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
name|app
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setLaunchCommand
argument_list|(
name|app
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setConfiguration
argument_list|(
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|comp
return|;
block|}
DECL|method|sortByDependencies (List<Component> components)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Component
argument_list|>
name|sortByDependencies
parameter_list|(
name|List
argument_list|<
name|Component
argument_list|>
name|components
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|sortedComponents
init|=
name|sortByDependencies
argument_list|(
name|components
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|sortedComponents
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**    * Each internal call of sortByDependencies will identify all of the    * components with the same dependency depth (the lowest depth that has not    * been processed yet) and add them to the sortedComponents list, preserving    * their original ordering in the components list.    *    * So the first time it is called, all components with no dependencies    * (depth 0) will be identified. The next time it is called, all components    * that have dependencies only on the the depth 0 components will be    * identified (depth 1). This will be repeated until all components have    * been added to the sortedComponents list. If no new components are    * identified but the sortedComponents list is not complete, an error is    * thrown.    */
DECL|method|sortByDependencies (List<Component> components, Map<String, Component> sortedComponents)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|sortByDependencies
parameter_list|(
name|List
argument_list|<
name|Component
argument_list|>
name|components
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|sortedComponents
parameter_list|)
block|{
if|if
condition|(
name|sortedComponents
operator|==
literal|null
condition|)
block|{
name|sortedComponents
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|componentsToAdd
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Component
argument_list|>
name|componentsSkipped
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|components
control|)
block|{
name|String
name|name
init|=
name|component
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortedComponents
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|dependenciesAlreadySorted
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|component
operator|.
name|getDependencies
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|dependency
range|:
name|component
operator|.
name|getDependencies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|sortedComponents
operator|.
name|containsKey
argument_list|(
name|dependency
argument_list|)
condition|)
block|{
name|dependenciesAlreadySorted
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|dependenciesAlreadySorted
condition|)
block|{
name|componentsToAdd
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|componentsSkipped
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|componentsToAdd
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_DEPENDENCY_CYCLE
argument_list|,
name|componentsSkipped
argument_list|)
argument_list|)
throw|;
block|}
name|sortedComponents
operator|.
name|putAll
argument_list|(
name|componentsToAdd
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortedComponents
operator|.
name|size
argument_list|()
operator|==
name|components
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|sortedComponents
return|;
block|}
return|return
name|sortByDependencies
argument_list|(
name|components
argument_list|,
name|sortedComponents
argument_list|)
return|;
block|}
DECL|method|$ (String s)
specifier|public
specifier|static
name|String
name|$
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"${"
operator|+
name|s
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

