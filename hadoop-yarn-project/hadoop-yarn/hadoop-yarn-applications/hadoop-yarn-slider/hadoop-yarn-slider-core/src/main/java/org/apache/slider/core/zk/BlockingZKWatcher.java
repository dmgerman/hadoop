begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.zk
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|zk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|BlockingZKWatcher
specifier|public
class|class
name|BlockingZKWatcher
implements|implements
name|Watcher
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockingZKWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectedFlag
specifier|private
specifier|final
name|AtomicBoolean
name|connectedFlag
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ZK binding callback received"
argument_list|)
expr_stmt|;
name|connectedFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|connectedFlag
init|)
block|{
try|try
block|{
name|connectedFlag
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"failed while waiting for notification"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Wait for a flag to go true    * @param timeout timeout in millis    */
DECL|method|waitForZKConnection (int timeout)
specifier|public
name|void
name|waitForZKConnection
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ConnectException
block|{
synchronized|synchronized
init|(
name|connectedFlag
init|)
block|{
if|if
condition|(
operator|!
name|connectedFlag
operator|.
name|get
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"waiting for ZK event"
argument_list|)
expr_stmt|;
comment|//wait a bit
name|connectedFlag
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|connectedFlag
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectException
argument_list|(
literal|"Unable to connect to ZK quorum"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

