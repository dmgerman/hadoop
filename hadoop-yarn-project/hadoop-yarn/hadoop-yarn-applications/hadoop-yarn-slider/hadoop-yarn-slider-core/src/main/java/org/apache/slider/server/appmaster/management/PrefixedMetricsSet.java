begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * From an existing metrics set, generate a new metrics set with the  * prefix in front of every key.  *  * The prefix is added directly: if you want a '.' between prefix and metric  * keys, include it in the prefix.  */
end_comment

begin_class
DECL|class|PrefixedMetricsSet
specifier|public
class|class
name|PrefixedMetricsSet
implements|implements
name|MetricSet
block|{
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|MetricSet
name|source
decl_stmt|;
DECL|method|PrefixedMetricsSet (String prefix, MetricSet source)
specifier|public
name|PrefixedMetricsSet
parameter_list|(
name|String
name|prefix
parameter_list|,
name|MetricSet
name|source
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|getMetrics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|sourceMetrics
init|=
name|source
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|sourceMetrics
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|entry
range|:
name|sourceMetrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metrics
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
block|}
end_class

end_unit

