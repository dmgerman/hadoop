begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.conf
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Aggregate Configuration.  *  * It is serializable to JSON  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|AggregateConf
specifier|public
specifier|final
class|class
name|AggregateConf
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|resources
specifier|private
name|ConfTree
name|resources
decl_stmt|;
DECL|field|internal
specifier|private
name|ConfTree
name|internal
decl_stmt|;
DECL|field|appConf
specifier|private
name|ConfTree
name|appConf
decl_stmt|;
DECL|field|resourceOperations
specifier|private
name|ConfTreeOperations
name|resourceOperations
decl_stmt|;
DECL|field|appConfOperations
specifier|private
name|ConfTreeOperations
name|appConfOperations
decl_stmt|;
DECL|field|internalOperations
specifier|private
name|ConfTreeOperations
name|internalOperations
decl_stmt|;
DECL|field|passphrase
specifier|private
name|String
name|passphrase
decl_stmt|;
DECL|method|AggregateConf ()
specifier|public
name|AggregateConf
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|ConfTree
argument_list|()
argument_list|,
operator|new
name|ConfTree
argument_list|()
argument_list|,
operator|new
name|ConfTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|AggregateConf (String name)
specifier|public
name|AggregateConf
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ConfTree
argument_list|()
argument_list|,
operator|new
name|ConfTree
argument_list|()
argument_list|,
operator|new
name|ConfTree
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|AggregateConf (ConfTree resources, ConfTree appConf, ConfTree internal)
specifier|public
name|AggregateConf
parameter_list|(
name|ConfTree
name|resources
parameter_list|,
name|ConfTree
name|appConf
parameter_list|,
name|ConfTree
name|internal
parameter_list|)
block|{
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|setAppConf
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
name|setInternal
argument_list|(
name|internal
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a snapshot of the configuration    * @param instanceDefinition source    * @throws IOException marshalling/copying problems    */
DECL|method|AggregateConf (AggregateConf instanceDefinition)
specifier|public
name|AggregateConf
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|)
throws|throws
name|IOException
block|{
name|ConfTreeOperations
name|resourcesSnapshot
init|=
name|ConfTreeOperations
operator|.
name|fromInstance
argument_list|(
name|instanceDefinition
operator|.
name|getResources
argument_list|()
argument_list|)
decl_stmt|;
name|ConfTreeOperations
name|appConfSnapshot
init|=
name|ConfTreeOperations
operator|.
name|fromInstance
argument_list|(
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
argument_list|)
decl_stmt|;
name|ConfTreeOperations
name|internalsSnapshot
init|=
name|ConfTreeOperations
operator|.
name|fromInstance
argument_list|(
name|instanceDefinition
operator|.
name|getInternal
argument_list|()
argument_list|)
decl_stmt|;
comment|//build a new aggregate from the snapshots
name|setResources
argument_list|(
name|resourcesSnapshot
operator|.
name|confTree
argument_list|)
expr_stmt|;
name|setAppConf
argument_list|(
name|appConfSnapshot
operator|.
name|confTree
argument_list|)
expr_stmt|;
name|setInternal
argument_list|(
name|internalsSnapshot
operator|.
name|confTree
argument_list|)
expr_stmt|;
block|}
DECL|method|setResources (ConfTree resources)
specifier|public
name|void
name|setResources
parameter_list|(
name|ConfTree
name|resources
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
name|resourceOperations
operator|=
operator|new
name|ConfTreeOperations
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppConf (ConfTree appConf)
specifier|public
name|void
name|setAppConf
parameter_list|(
name|ConfTree
name|appConf
parameter_list|)
block|{
name|this
operator|.
name|appConf
operator|=
name|appConf
expr_stmt|;
name|appConfOperations
operator|=
operator|new
name|ConfTreeOperations
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
block|}
DECL|method|getInternal ()
specifier|public
name|ConfTree
name|getInternal
parameter_list|()
block|{
return|return
name|internal
return|;
block|}
DECL|method|setInternal (ConfTree internal)
specifier|public
name|void
name|setInternal
parameter_list|(
name|ConfTree
name|internal
parameter_list|)
block|{
name|this
operator|.
name|internal
operator|=
name|internal
expr_stmt|;
name|internalOperations
operator|=
operator|new
name|ConfTreeOperations
argument_list|(
name|internal
argument_list|)
expr_stmt|;
block|}
DECL|method|getResources ()
specifier|public
name|ConfTree
name|getResources
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
DECL|method|getAppConf ()
specifier|public
name|ConfTree
name|getAppConf
parameter_list|()
block|{
return|return
name|appConf
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|JsonIgnore
DECL|method|getResourceOperations ()
specifier|public
name|ConfTreeOperations
name|getResourceOperations
parameter_list|()
block|{
return|return
name|resourceOperations
return|;
block|}
annotation|@
name|JsonIgnore
DECL|method|getAppConfOperations ()
specifier|public
name|ConfTreeOperations
name|getAppConfOperations
parameter_list|()
block|{
return|return
name|appConfOperations
return|;
block|}
annotation|@
name|JsonIgnore
DECL|method|getInternalOperations ()
specifier|public
name|ConfTreeOperations
name|getInternalOperations
parameter_list|()
block|{
return|return
name|internalOperations
return|;
block|}
comment|/**    * predicate to query if all sections have data structures    * @return true if every section is non-null    */
annotation|@
name|JsonIgnore
DECL|method|isComplete ()
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|resources
operator|!=
literal|null
operator|&&
name|appConf
operator|!=
literal|null
operator|&&
name|internal
operator|!=
literal|null
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|BadConfigException
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Incomplete instance %s"
argument_list|,
name|this
argument_list|)
throw|;
block|}
name|resourceOperations
operator|.
name|validate
argument_list|()
expr_stmt|;
name|internalOperations
operator|.
name|validate
argument_list|()
expr_stmt|;
name|appConfOperations
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|resolve ()
specifier|public
name|void
name|resolve
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|validate
argument_list|()
expr_stmt|;
name|resourceOperations
operator|.
name|resolve
argument_list|()
expr_stmt|;
name|internalOperations
operator|.
name|resolve
argument_list|()
expr_stmt|;
name|appConfOperations
operator|.
name|resolve
argument_list|()
expr_stmt|;
block|}
annotation|@
name|JsonIgnore
DECL|method|getPassphrase ()
specifier|public
name|String
name|getPassphrase
parameter_list|()
block|{
if|if
condition|(
name|passphrase
operator|==
literal|null
condition|)
block|{
name|passphrase
operator|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|SliderKeys
operator|.
name|PASS_LEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|passphrase
return|;
block|}
comment|/**    * Is this app package versioned?    *     * @return true if {@link SliderKeys#APP_VERSION} was set in the app config    *         provided during creation of this app    * @since 0.80.0-incubating    */
DECL|method|isVersioned ()
specifier|public
name|boolean
name|isVersioned
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|SliderKeys
operator|.
name|APP_VERSION
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * string operation includes all the inner conftrees    * @return a string description    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"internal\": "
argument_list|)
operator|.
name|append
argument_list|(
name|internal
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"resources\": "
argument_list|)
operator|.
name|append
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"appConf\" :"
argument_list|)
operator|.
name|append
argument_list|(
name|appConf
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

