begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client.rest
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|ClientRegistryBinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|SliderApplicationApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|info
operator|.
name|CustomRegistryConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|RestPaths
operator|.
name|SLIDER_PATH_APPLICATION
import|;
end_import

begin_comment
comment|/**  * Factory for the Rest client; hides the lookup and instantiation.  *<p>  *   */
end_comment

begin_class
DECL|class|RestClientFactory
specifier|public
class|class
name|RestClientFactory
block|{
DECL|field|binder
specifier|private
specifier|final
name|ClientRegistryBinder
name|binder
decl_stmt|;
DECL|field|jerseyClient
specifier|private
specifier|final
name|Client
name|jerseyClient
decl_stmt|;
DECL|field|user
DECL|field|serviceclass
DECL|field|instance
specifier|private
specifier|final
name|String
name|user
decl_stmt|,
name|serviceclass
decl_stmt|,
name|instance
decl_stmt|;
DECL|method|RestClientFactory (RegistryOperations operations, Client jerseyClient, String user, String serviceclass, String instance)
specifier|public
name|RestClientFactory
parameter_list|(
name|RegistryOperations
name|operations
parameter_list|,
name|Client
name|jerseyClient
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|serviceclass
parameter_list|,
name|String
name|instance
parameter_list|)
block|{
name|this
operator|.
name|jerseyClient
operator|=
name|jerseyClient
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|serviceclass
operator|=
name|serviceclass
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
name|binder
operator|=
operator|new
name|ClientRegistryBinder
argument_list|(
name|operations
argument_list|)
expr_stmt|;
block|}
comment|/**    * Locate the AM    * @return a resource to the AM    * @throws IOException any failure to resolve to the AM    */
DECL|method|locateAppmaster ()
specifier|private
name|WebResource
name|locateAppmaster
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|restAPI
init|=
name|binder
operator|.
name|lookupExternalRestAPI
argument_list|(
name|user
argument_list|,
name|serviceclass
argument_list|,
name|instance
argument_list|,
name|CustomRegistryConstants
operator|.
name|AM_REST_BASE
argument_list|)
decl_stmt|;
return|return
name|jerseyClient
operator|.
name|resource
argument_list|(
name|restAPI
argument_list|)
return|;
block|}
comment|/**    * Locate the slider AM then instantiate a client instance against    * its Application API.    * @return the instance    * @throws IOException on any failure    */
DECL|method|createSliderAppApiClient ()
specifier|public
name|SliderApplicationApi
name|createSliderAppApiClient
parameter_list|()
throws|throws
name|IOException
block|{
name|WebResource
name|appmaster
init|=
name|locateAppmaster
argument_list|()
decl_stmt|;
return|return
name|createSliderAppApiClient
argument_list|(
name|appmaster
argument_list|)
return|;
block|}
comment|/**    * Create a Slider application API client instance against    * its Application API.    * @param appmaster The AM to work against.    * @return the instance    * @throws IOException on any failure    */
DECL|method|createSliderAppApiClient (WebResource appmaster)
specifier|public
name|SliderApplicationApi
name|createSliderAppApiClient
parameter_list|(
name|WebResource
name|appmaster
parameter_list|)
block|{
name|WebResource
name|appResource
init|=
name|appmaster
operator|.
name|path
argument_list|(
name|SLIDER_PATH_APPLICATION
argument_list|)
decl_stmt|;
return|return
operator|new
name|SliderApplicationApiRestClient
argument_list|(
name|jerseyClient
argument_list|,
name|appResource
argument_list|)
return|;
block|}
block|}
end_class

end_unit

