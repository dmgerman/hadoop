begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|ClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|AbstractLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|AbstractClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Metainfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|MetainfoParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|OSPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|OSSpecific
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Package
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
operator|.
name|getApplicationDefinitionPath
import|;
end_import

begin_comment
comment|/** This class implements  the client-side aspects of the agent deployer */
end_comment

begin_class
DECL|class|AgentClientProvider
specifier|public
class|class
name|AgentClientProvider
extends|extends
name|AbstractClientProvider
implements|implements
name|AgentKeys
implements|,
name|SliderKeys
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AgentClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|protected
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"agent"
decl_stmt|;
DECL|field|providerUtils
specifier|private
specifier|static
specifier|final
name|ProviderUtils
name|providerUtils
init|=
operator|new
name|ProviderUtils
argument_list|(
name|log
argument_list|)
decl_stmt|;
DECL|field|E_COULD_NOT_READ_METAINFO
specifier|public
specifier|static
specifier|final
name|String
name|E_COULD_NOT_READ_METAINFO
init|=
literal|"Not a valid app package. Could not read metainfo."
decl_stmt|;
DECL|field|metaInfoMap
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Metainfo
argument_list|>
name|metaInfoMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Metainfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|AgentClientProvider (Configuration conf)
specifier|protected
name|AgentClientProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getRoles ()
specifier|public
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|AgentRoles
operator|.
name|getRoles
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|//Client
DECL|method|preflightValidateClusterConfiguration (SliderFileSystem sliderFileSystem, String clustername, Configuration configuration, AggregateConf instanceDefinition, Path clusterDirPath, Path generatedConfDirPath, boolean secure)
specifier|public
name|void
name|preflightValidateClusterConfiguration
parameter_list|(
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|String
name|clustername
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|Path
name|clusterDirPath
parameter_list|,
name|Path
name|generatedConfDirPath
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
name|super
operator|.
name|preflightValidateClusterConfiguration
argument_list|(
name|sliderFileSystem
argument_list|,
name|clustername
argument_list|,
name|configuration
argument_list|,
name|instanceDefinition
argument_list|,
name|clusterDirPath
argument_list|,
name|generatedConfDirPath
argument_list|,
name|secure
argument_list|)
expr_stmt|;
name|String
name|appDef
init|=
name|SliderUtils
operator|.
name|getApplicationDefinitionPath
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|appDefPath
init|=
operator|new
name|Path
argument_list|(
name|appDef
argument_list|)
decl_stmt|;
name|sliderFileSystem
operator|.
name|verifyFileExists
argument_list|(
name|appDefPath
argument_list|)
expr_stmt|;
name|String
name|agentConf
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AGENT_CONF
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|agentConf
argument_list|)
condition|)
block|{
name|sliderFileSystem
operator|.
name|verifyFileExists
argument_list|(
operator|new
name|Path
argument_list|(
name|agentConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|appHome
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|PACKAGE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|appHome
argument_list|)
condition|)
block|{
name|String
name|agentImage
init|=
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|get
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_APPLICATION_IMAGE_PATH
argument_list|)
decl_stmt|;
name|sliderFileSystem
operator|.
name|verifyFileExists
argument_list|(
operator|new
name|Path
argument_list|(
name|agentImage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateInstanceDefinition (AggregateConf instanceDefinition, SliderFileSystem fs)
specifier|public
name|void
name|validateInstanceDefinition
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fs
parameter_list|)
throws|throws
name|SliderException
block|{
name|super
operator|.
name|validateInstanceDefinition
argument_list|(
name|instanceDefinition
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Validating conf {}"
argument_list|,
name|instanceDefinition
argument_list|)
expr_stmt|;
name|ConfTreeOperations
name|resources
init|=
name|instanceDefinition
operator|.
name|getResourceOperations
argument_list|()
decl_stmt|;
name|providerUtils
operator|.
name|validateNodeCount
argument_list|(
name|instanceDefinition
argument_list|,
name|ROLE_NODE
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|appDef
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Validate the app definition
name|appDef
operator|=
name|SliderUtils
operator|.
name|getApplicationDefinitionPath
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Application definition must be provided. "
operator|+
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Validating app definition {}"
argument_list|,
name|appDef
argument_list|)
expr_stmt|;
name|String
name|extension
init|=
name|appDef
operator|.
name|substring
argument_list|(
name|appDef
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|,
name|appDef
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"zip"
operator|.
name|equals
argument_list|(
name|extension
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"App definition must be packaged as a .zip file. File provided is "
operator|+
name|appDef
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|resources
operator|.
name|getComponentNames
argument_list|()
decl_stmt|;
name|names
operator|.
name|remove
argument_list|(
name|COMPONENT_AM
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|priorityMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
try|try
block|{
comment|// Validate the app definition
name|appDef
operator|=
name|SliderUtils
operator|.
name|getApplicationDefinitionPath
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Application definition must be provided. "
operator|+
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Metainfo
name|metaInfo
init|=
name|getMetainfo
argument_list|(
name|fs
argument_list|,
name|appDef
argument_list|)
decl_stmt|;
name|MapOperations
name|component
init|=
name|resources
operator|.
name|getMandatoryComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaInfo
operator|!=
literal|null
condition|)
block|{
name|Component
name|componentDef
init|=
name|metaInfo
operator|.
name|getApplicationComponent
argument_list|(
name|AgentUtils
operator|.
name|getMetainfoComponentName
argument_list|(
name|name
argument_list|,
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentDef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s is not a member of application."
argument_list|,
name|name
argument_list|)
throw|;
block|}
block|}
name|int
name|priority
init|=
name|component
operator|.
name|getMandatoryOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_PRIORITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s %s value out of range %d"
argument_list|,
name|name
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_PRIORITY
argument_list|,
name|priority
argument_list|)
throw|;
block|}
name|String
name|existing
init|=
name|priorityMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s has a %s value %d which duplicates that of %s"
argument_list|,
name|name
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_PRIORITY
argument_list|,
name|priority
argument_list|,
name|existing
argument_list|)
throw|;
block|}
name|priorityMap
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// fileSystem may be null for tests
if|if
condition|(
name|metaInfo
operator|!=
literal|null
condition|)
block|{
name|Component
name|componentDef
init|=
name|metaInfo
operator|.
name|getApplicationComponent
argument_list|(
name|AgentUtils
operator|.
name|getMetainfoComponentName
argument_list|(
name|name
argument_list|,
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// ensure that intance count is 0 for client components
if|if
condition|(
literal|"CLIENT"
operator|.
name|equals
argument_list|(
name|componentDef
operator|.
name|getCategory
argument_list|()
argument_list|)
condition|)
block|{
name|MapOperations
name|componentConfig
init|=
name|resources
operator|.
name|getMandatoryComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|componentConfig
operator|.
name|getMandatoryOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s is of type CLIENT and cannot be instantiated."
operator|+
literal|" Use \"slider client install ...\" command instead."
argument_list|,
name|name
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|MapOperations
name|componentConfig
init|=
name|resources
operator|.
name|getMandatoryComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|componentConfig
operator|.
name|getMandatoryOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|)
decl_stmt|;
name|int
name|definedMinCount
init|=
name|componentDef
operator|.
name|getMinInstanceCountInt
argument_list|()
decl_stmt|;
name|int
name|definedMaxCount
init|=
name|componentDef
operator|.
name|getMaxInstanceCountInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
name|definedMinCount
operator|||
name|count
argument_list|>
name|definedMaxCount
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s, %s value %d out of range. "
operator|+
literal|"Expected minimum is %d and maximum is %d"
argument_list|,
name|name
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|,
name|count
argument_list|,
name|definedMinCount
argument_list|,
name|definedMaxCount
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|prepareAMAndConfigForLaunch (SliderFileSystem fileSystem, Configuration serviceConf, AbstractLauncher launcher, AggregateConf instanceDefinition, Path snapshotConfDirPath, Path generatedConfDirPath, Configuration clientConfExtras, String libdir, Path tempPath, boolean miniClusterTestRun)
specifier|public
name|void
name|prepareAMAndConfigForLaunch
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Configuration
name|serviceConf
parameter_list|,
name|AbstractLauncher
name|launcher
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|Path
name|snapshotConfDirPath
parameter_list|,
name|Path
name|generatedConfDirPath
parameter_list|,
name|Configuration
name|clientConfExtras
parameter_list|,
name|String
name|libdir
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|boolean
name|miniClusterTestRun
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|String
name|agentImage
init|=
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|get
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_APPLICATION_IMAGE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|agentImage
argument_list|)
condition|)
block|{
name|Path
name|agentPath
init|=
operator|new
name|Path
argument_list|(
name|tempPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|PROVIDER_AGENT
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Automatically uploading the agent tarball at {}"
argument_list|,
name|agentPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|agentPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|ProviderUtils
operator|.
name|addAgentTar
argument_list|(
name|this
argument_list|,
name|AGENT_TAR
argument_list|,
name|fileSystem
argument_list|,
name|agentPath
argument_list|)
condition|)
block|{
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|set
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_APPLICATION_IMAGE_PATH
argument_list|,
operator|new
name|Path
argument_list|(
name|agentPath
argument_list|,
name|AGENT_TAR
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationTags (SliderFileSystem fileSystem, ConfTreeOperations appConf)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getApplicationTags
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|)
throws|throws
name|SliderException
block|{
return|return
name|getApplicationTags
argument_list|(
name|fileSystem
argument_list|,
name|getApplicationDefinitionPath
argument_list|(
name|appConf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getApplicationTags (SliderFileSystem fileSystem, String appDef)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getApplicationTags
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|appDef
parameter_list|)
throws|throws
name|SliderException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tags
decl_stmt|;
name|Metainfo
name|metaInfo
init|=
name|getMetainfo
argument_list|(
name|fileSystem
argument_list|,
name|appDef
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaInfo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error retrieving metainfo from {}"
argument_list|,
name|appDef
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Error parsing metainfo file, possibly bad structure."
argument_list|)
throw|;
block|}
name|Application
name|application
init|=
name|metaInfo
operator|.
name|getApplication
argument_list|()
decl_stmt|;
name|tags
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"Name: "
operator|+
name|application
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"Version: "
operator|+
name|application
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"Description: "
operator|+
name|SliderUtils
operator|.
name|truncate
argument_list|(
name|application
operator|.
name|getComment
argument_list|()
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tags
return|;
block|}
annotation|@
name|Override
DECL|method|processClientOperation (SliderFileSystem fileSystem, RegistryOperations rops, Configuration configuration, String operation, File clientInstallPath, File appPackage, JSONObject config, String name)
specifier|public
name|void
name|processClientOperation
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|RegistryOperations
name|rops
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|String
name|operation
parameter_list|,
name|File
name|clientInstallPath
parameter_list|,
name|File
name|appPackage
parameter_list|,
name|JSONObject
name|config
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SliderException
block|{
comment|// create temp folder
comment|// create sub-folders app_pkg, agent_pkg, command
name|File
name|tmpDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Command is being executed at {}"
argument_list|,
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|appPkgDir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"app_pkg"
argument_list|)
decl_stmt|;
name|appPkgDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|agentPkgDir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"agent_pkg"
argument_list|)
decl_stmt|;
name|agentPkgDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|cmdDir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"command"
argument_list|)
decl_stmt|;
name|cmdDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|Metainfo
name|metaInfo
init|=
literal|null
decl_stmt|;
name|JSONObject
name|defaultConfig
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// expand app package into /app_pkg
name|ZipInputStream
name|zipInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zipInputStream
operator|=
operator|new
name|ZipInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|appPackage
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|ZipEntry
name|zipEntry
init|=
name|zipInputStream
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|zipEntry
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processing {}"
argument_list|,
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|filePath
init|=
name|appPkgDir
operator|+
name|File
operator|.
name|separator
operator|+
name|zipEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|zipEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Extracting file {}"
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|extractFile
argument_list|(
name|zipInputStream
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"metainfo.xml"
operator|.
name|equals
argument_list|(
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|FileInputStream
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|metaInfo
operator|=
operator|new
name|MetainfoParser
argument_list|()
operator|.
name|fromXmlStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"metainfo.json"
operator|.
name|equals
argument_list|(
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|FileInputStream
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|metaInfo
operator|=
operator|new
name|MetainfoParser
argument_list|()
operator|.
name|fromJsonStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"clientInstallConfig-default.json"
operator|.
name|equals
argument_list|(
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|defaultConfig
operator|=
operator|new
name|JSONObject
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|jex
parameter_list|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Unable to read default client config."
argument_list|,
name|jex
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating dir {}"
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|zipInputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zipEntry
operator|=
name|zipInputStream
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|zipInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|metaInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
name|E_COULD_NOT_READ_METAINFO
argument_list|)
throw|;
block|}
name|String
name|clientScript
init|=
literal|null
decl_stmt|;
name|String
name|clientComponent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|metaInfo
operator|.
name|getApplication
argument_list|()
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|component
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CLIENT"
argument_list|)
condition|)
block|{
name|clientComponent
operator|=
name|component
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|component
operator|.
name|getCommandScript
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientScript
operator|=
name|component
operator|.
name|getCommandScript
argument_list|()
operator|.
name|getScript
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|clientScript
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Installing CLIENT without script"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Package
argument_list|>
name|packages
init|=
name|metaInfo
operator|.
name|getApplication
argument_list|()
operator|.
name|getPackages
argument_list|()
decl_stmt|;
if|if
condition|(
name|packages
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// retrieve package resources from HDFS and extract
for|for
control|(
name|Package
name|pkg
range|:
name|packages
control|)
block|{
name|Path
name|pkgPath
init|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|pkgPath
argument_list|)
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
name|pkgPath
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|name
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|pkgPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Package doesn't exist as a resource: "
operator|+
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"archive"
operator|.
name|equals
argument_list|(
name|pkg
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|pkgFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|copyHdfsFileToLocal
argument_list|(
name|pkgPath
argument_list|,
name|pkgFile
argument_list|)
expr_stmt|;
name|expandTar
argument_list|(
name|pkgFile
argument_list|,
name|clientInstallPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|pkgFile
init|=
operator|new
name|File
argument_list|(
name|clientInstallPath
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|copyHdfsFileToLocal
argument_list|(
name|pkgPath
argument_list|,
name|pkgFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// extract tarball from app def
for|for
control|(
name|OSSpecific
name|osSpecific
range|:
name|metaInfo
operator|.
name|getApplication
argument_list|()
operator|.
name|getOSSpecifics
argument_list|()
control|)
block|{
for|for
control|(
name|OSPackage
name|pkg
range|:
name|osSpecific
operator|.
name|getPackages
argument_list|()
control|)
block|{
if|if
condition|(
literal|"tarball"
operator|.
name|equals
argument_list|(
name|pkg
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|pkgFile
init|=
operator|new
name|File
argument_list|(
name|appPkgDir
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|expandTar
argument_list|(
name|pkgFile
argument_list|,
name|clientInstallPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Conf files not being generated because no app name was "
operator|+
literal|"provided"
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|confInstallDir
decl_stmt|;
name|String
name|clientRoot
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clientRoot
operator|=
name|config
operator|.
name|getJSONObject
argument_list|(
literal|"global"
argument_list|)
operator|.
name|getString
argument_list|(
name|APP_CLIENT_ROOT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Couldn't read {} from provided client config, falling "
operator|+
literal|"back on default"
argument_list|,
name|APP_CLIENT_ROOT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clientRoot
operator|==
literal|null
operator|&&
name|defaultConfig
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clientRoot
operator|=
name|defaultConfig
operator|.
name|getJSONObject
argument_list|(
literal|"global"
argument_list|)
operator|.
name|getString
argument_list|(
name|APP_CLIENT_ROOT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Couldn't read {} from default client config, using {}"
argument_list|,
name|APP_CLIENT_ROOT
argument_list|,
name|clientInstallPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clientRoot
operator|==
literal|null
condition|)
block|{
name|confInstallDir
operator|=
name|clientInstallPath
expr_stmt|;
block|}
else|else
block|{
name|confInstallDir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|clientInstallPath
argument_list|,
name|clientRoot
argument_list|)
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|confInstallDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|confInstallDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|user
init|=
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|metaInfo
operator|.
name|getComponentConfigFiles
argument_list|(
name|clientComponent
argument_list|)
control|)
block|{
name|retrieveConfigFile
argument_list|(
name|rops
argument_list|,
name|configuration
argument_list|,
name|configFile
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|confInstallDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Installing CLIENT using script {}"
argument_list|,
name|clientScript
argument_list|)
expr_stmt|;
name|expandAgentTar
argument_list|(
name|agentPkgDir
argument_list|)
expr_stmt|;
name|JSONObject
name|commandJson
init|=
name|getCommandJson
argument_list|(
name|defaultConfig
argument_list|,
name|config
argument_list|,
name|metaInfo
argument_list|,
name|clientInstallPath
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|FileWriter
name|file
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|cmdDir
argument_list|,
literal|"command.json"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|file
operator|.
name|write
argument_list|(
name|commandJson
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Couldn't write command.json to file"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|runCommand
argument_list|(
name|appPkgDir
argument_list|,
name|agentPkgDir
argument_list|,
name|cmdDir
argument_list|,
name|clientScript
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while executing INSTALL command {}"
argument_list|,
name|ioex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"INSTALL client failed."
argument_list|)
throw|;
block|}
block|}
DECL|method|runCommand ( File appPkgDir, File agentPkgDir, File cmdDir, String clientScript)
specifier|protected
name|void
name|runCommand
parameter_list|(
name|File
name|appPkgDir
parameter_list|,
name|File
name|agentPkgDir
parameter_list|,
name|File
name|cmdDir
parameter_list|,
name|String
name|clientScript
parameter_list|)
throws|throws
name|SliderException
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|Exception
name|exp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|clientScriptPath
init|=
name|appPkgDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"package"
operator|+
name|File
operator|.
name|separator
operator|+
name|clientScript
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|PYTHON_EXE
argument_list|,
literal|"-S"
argument_list|,
name|clientScriptPath
argument_list|,
literal|"INSTALL"
argument_list|,
name|cmdDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"command.json"
argument_list|,
name|appPkgDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"package"
argument_list|,
name|cmdDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"command-out.json"
argument_list|,
literal|"DEBUG"
argument_list|)
decl_stmt|;
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Command: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|pb
operator|.
name|command
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
name|PYTHONPATH
argument_list|,
name|agentPkgDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"slider-agent"
operator|+
name|File
operator|.
name|pathSeparator
operator|+
name|agentPkgDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"slider-agent/jinja2"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{}={}"
argument_list|,
name|PYTHONPATH
argument_list|,
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|get
argument_list|(
name|PYTHONPATH
argument_list|)
argument_list|)
expr_stmt|;
name|Process
name|proc
init|=
name|pb
operator|.
name|start
argument_list|()
decl_stmt|;
name|InputStream
name|stderr
init|=
name|proc
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
name|InputStream
name|stdout
init|=
name|proc
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|BufferedReader
name|stdOutReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stdout
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|stdErrReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stderr
argument_list|)
argument_list|)
decl_stmt|;
name|proc
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|stdOutReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stdout: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|line
operator|=
name|stdErrReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stderr: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
name|proc
operator|.
name|exitValue
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Exit value is {}"
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exp
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|exp
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"INSTALL client failed with exit code "
operator|+
name|exitCode
argument_list|)
throw|;
block|}
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while executing INSTALL command {}. Stack trace {}"
argument_list|,
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"INSTALL client failed."
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
DECL|method|expandAgentTar (File agentPkgDir)
specifier|private
name|void
name|expandAgentTar
parameter_list|(
name|File
name|agentPkgDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|libDirProp
init|=
name|SliderUtils
operator|.
name|getLibDir
argument_list|()
decl_stmt|;
name|File
name|tarFile
init|=
operator|new
name|File
argument_list|(
name|libDirProp
argument_list|,
name|AGENT_TAR
argument_list|)
decl_stmt|;
name|expandTar
argument_list|(
name|tarFile
argument_list|,
name|agentPkgDir
argument_list|)
expr_stmt|;
block|}
DECL|method|expandTar (File tarFile, File destDir)
specifier|private
name|void
name|expandTar
parameter_list|(
name|File
name|tarFile
parameter_list|,
name|File
name|destDir
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Expanding tar {} to {}"
argument_list|,
name|tarFile
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
name|TarArchiveInputStream
name|tarIn
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
operator|new
name|GzipCompressorInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tarFile
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|TarArchiveEntry
name|tarEntry
init|=
name|tarIn
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|tarEntry
operator|!=
literal|null
condition|)
block|{
name|File
name|destPath
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|tarEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|destPath
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|exists
argument_list|()
condition|)
block|{
name|parent
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tarEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|destPath
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|byteToRead
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|BufferedOutputStream
name|buffOut
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|tarIn
operator|.
name|read
argument_list|(
name|byteToRead
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffOut
operator|.
name|write
argument_list|(
name|byteToRead
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|buffOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|tarEntry
operator|.
name|getMode
argument_list|()
operator|&
literal|0100
operator|)
operator|!=
literal|0
condition|)
block|{
name|destPath
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|tarEntry
operator|=
name|tarIn
operator|.
name|getNextTarEntry
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tarIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|retrieveConfigFile (RegistryOperations rops, Configuration configuration, ConfigFile configFile, String name, String user, File destDir)
specifier|private
name|void
name|retrieveConfigFile
parameter_list|(
name|RegistryOperations
name|rops
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|ConfigFile
name|configFile
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|File
name|destDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Retrieving config {} to {}"
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
name|PublishedConfiguration
name|published
init|=
name|ClientUtils
operator|.
name|getConfigFromRegistry
argument_list|(
name|rops
argument_list|,
name|configuration
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ClientUtils
operator|.
name|saveOrReturnConfig
argument_list|(
name|published
argument_list|,
name|configFile
operator|.
name|getType
argument_list|()
argument_list|,
name|destDir
argument_list|,
name|configFile
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommandJson (JSONObject defaultConfig, JSONObject inputConfig, Metainfo metainfo, File clientInstallPath, String name)
specifier|protected
name|JSONObject
name|getCommandJson
parameter_list|(
name|JSONObject
name|defaultConfig
parameter_list|,
name|JSONObject
name|inputConfig
parameter_list|,
name|Metainfo
name|metainfo
parameter_list|,
name|File
name|clientInstallPath
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SliderException
block|{
try|try
block|{
name|JSONObject
name|pkgList
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|pkgList
operator|.
name|put
argument_list|(
name|PACKAGE_LIST
argument_list|,
name|AgentProviderService
operator|.
name|getPackageListFromApplication
argument_list|(
name|metainfo
operator|.
name|getApplication
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|obj
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|obj
operator|.
name|put
argument_list|(
literal|"hostLevelParams"
argument_list|,
name|pkgList
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
decl_stmt|;
name|JSONObject
name|configuration
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONObject
name|global
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|global
operator|.
name|put
argument_list|(
literal|"app_install_dir"
argument_list|,
name|clientInstallPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|global
operator|.
name|put
argument_list|(
literal|"app_user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|global
operator|.
name|put
argument_list|(
literal|"app_name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultConfig
operator|!=
literal|null
condition|)
block|{
name|readConfigEntries
argument_list|(
name|defaultConfig
argument_list|,
name|clientInstallPath
argument_list|,
name|global
argument_list|,
name|name
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputConfig
operator|!=
literal|null
condition|)
block|{
name|readConfigEntries
argument_list|(
name|inputConfig
argument_list|,
name|clientInstallPath
argument_list|,
name|global
argument_list|,
name|name
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|put
argument_list|(
literal|"global"
argument_list|,
name|global
argument_list|)
expr_stmt|;
name|obj
operator|.
name|put
argument_list|(
literal|"configurations"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|jex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while executing INSTALL command {}"
argument_list|,
name|jex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"INSTALL client failed."
argument_list|)
throw|;
block|}
block|}
DECL|method|readConfigEntries (JSONObject inpConfig, File clientInstallPath, JSONObject globalConfig, String name, String user)
specifier|private
name|void
name|readConfigEntries
parameter_list|(
name|JSONObject
name|inpConfig
parameter_list|,
name|File
name|clientInstallPath
parameter_list|,
name|JSONObject
name|globalConfig
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|globalSection
init|=
name|inpConfig
operator|.
name|getJSONObject
argument_list|(
literal|"global"
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|globalSection
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|globalSection
operator|.
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"{app_install_dir}"
argument_list|,
name|clientInstallPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"{app_user}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"{app_name}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|globalConfig
operator|.
name|has
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// last one wins
name|globalConfig
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|globalConfig
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractFile (ZipInputStream zipInputStream, String filePath)
specifier|private
name|void
name|extractFile
parameter_list|(
name|ZipInputStream
name|zipInputStream
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedOutputStream
name|output
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|bytesRead
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|zipInputStream
operator|.
name|read
argument_list|(
name|bytesRead
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|bytesRead
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMetainfo (SliderFileSystem fs, String appDef)
specifier|private
name|Metainfo
name|getMetainfo
parameter_list|(
name|SliderFileSystem
name|fs
parameter_list|,
name|String
name|appDef
parameter_list|)
block|{
name|Metainfo
name|metaInfo
init|=
name|metaInfoMap
operator|.
name|get
argument_list|(
name|appDef
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
operator|&&
name|metaInfo
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|metaInfo
operator|=
name|AgentUtils
operator|.
name|getApplicationMetainfo
argument_list|(
name|fs
argument_list|,
name|appDef
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|metaInfoMap
operator|.
name|put
argument_list|(
name|appDef
argument_list|,
name|metaInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Ignore missing metainfo file for now
name|log
operator|.
name|info
argument_list|(
literal|"Missing metainfo {}"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bad Configuration {}"
argument_list|,
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metaInfo
return|;
block|}
block|}
end_class

end_unit

