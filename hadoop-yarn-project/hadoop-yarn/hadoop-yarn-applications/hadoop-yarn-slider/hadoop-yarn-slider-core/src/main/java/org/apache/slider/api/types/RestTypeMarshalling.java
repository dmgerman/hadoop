begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.api.types
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|proto
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Class to handle marshalling of REST  * types to/from Protobuf records.  */
end_comment

begin_class
DECL|class|RestTypeMarshalling
specifier|public
class|class
name|RestTypeMarshalling
block|{
specifier|public
specifier|static
name|Messages
operator|.
name|ApplicationLivenessInformationProto
DECL|method|marshall (ApplicationLivenessInformation info)
name|marshall
parameter_list|(
name|ApplicationLivenessInformation
name|info
parameter_list|)
block|{
name|Messages
operator|.
name|ApplicationLivenessInformationProto
operator|.
name|Builder
name|builder
init|=
name|Messages
operator|.
name|ApplicationLivenessInformationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAllRequestsSatisfied
argument_list|(
name|info
operator|.
name|allRequestsSatisfied
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRequestsOutstanding
argument_list|(
name|info
operator|.
name|requestsOutstanding
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ApplicationLivenessInformation
DECL|method|unmarshall (Messages.ApplicationLivenessInformationProto wire)
name|unmarshall
parameter_list|(
name|Messages
operator|.
name|ApplicationLivenessInformationProto
name|wire
parameter_list|)
block|{
name|ApplicationLivenessInformation
name|info
init|=
operator|new
name|ApplicationLivenessInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|allRequestsSatisfied
operator|=
name|wire
operator|.
name|getAllRequestsSatisfied
argument_list|()
expr_stmt|;
name|info
operator|.
name|requestsOutstanding
operator|=
name|wire
operator|.
name|getRequestsOutstanding
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|public
specifier|static
name|ComponentInformation
DECL|method|unmarshall (Messages.ComponentInformationProto wire)
name|unmarshall
parameter_list|(
name|Messages
operator|.
name|ComponentInformationProto
name|wire
parameter_list|)
block|{
name|ComponentInformation
name|info
init|=
operator|new
name|ComponentInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|name
operator|=
name|wire
operator|.
name|getName
argument_list|()
expr_stmt|;
name|info
operator|.
name|priority
operator|=
name|wire
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|info
operator|.
name|placementPolicy
operator|=
name|wire
operator|.
name|getPlacementPolicy
argument_list|()
expr_stmt|;
name|info
operator|.
name|actual
operator|=
name|wire
operator|.
name|getActual
argument_list|()
expr_stmt|;
name|info
operator|.
name|completed
operator|=
name|wire
operator|.
name|getCompleted
argument_list|()
expr_stmt|;
name|info
operator|.
name|desired
operator|=
name|wire
operator|.
name|getDesired
argument_list|()
expr_stmt|;
name|info
operator|.
name|failed
operator|=
name|wire
operator|.
name|getFailed
argument_list|()
expr_stmt|;
name|info
operator|.
name|releasing
operator|=
name|wire
operator|.
name|getReleasing
argument_list|()
expr_stmt|;
name|info
operator|.
name|requested
operator|=
name|wire
operator|.
name|getRequested
argument_list|()
expr_stmt|;
name|info
operator|.
name|started
operator|=
name|wire
operator|.
name|getStarted
argument_list|()
expr_stmt|;
name|info
operator|.
name|startFailed
operator|=
name|wire
operator|.
name|getStartFailed
argument_list|()
expr_stmt|;
name|info
operator|.
name|totalRequested
operator|=
name|wire
operator|.
name|getTotalRequested
argument_list|()
expr_stmt|;
name|info
operator|.
name|containers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|wire
operator|.
name|getContainersList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wire
operator|.
name|hasFailureMessage
argument_list|()
condition|)
block|{
name|info
operator|.
name|failureMessage
operator|=
name|wire
operator|.
name|getFailureMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wire
operator|.
name|hasPendingAntiAffineRequestCount
argument_list|()
condition|)
block|{
name|info
operator|.
name|pendingAntiAffineRequestCount
operator|=
name|wire
operator|.
name|getPendingAntiAffineRequestCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wire
operator|.
name|hasIsAARequestOutstanding
argument_list|()
condition|)
block|{
name|info
operator|.
name|isAARequestOutstanding
operator|=
name|wire
operator|.
name|getIsAARequestOutstanding
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|marshall (ComponentInformation info)
specifier|public
specifier|static
name|Messages
operator|.
name|ComponentInformationProto
name|marshall
parameter_list|(
name|ComponentInformation
name|info
parameter_list|)
block|{
name|Messages
operator|.
name|ComponentInformationProto
operator|.
name|Builder
name|builder
init|=
name|Messages
operator|.
name|ComponentInformationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPriority
argument_list|(
name|info
operator|.
name|priority
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPlacementPolicy
argument_list|(
name|info
operator|.
name|placementPolicy
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setActual
argument_list|(
name|info
operator|.
name|actual
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCompleted
argument_list|(
name|info
operator|.
name|completed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDesired
argument_list|(
name|info
operator|.
name|desired
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFailed
argument_list|(
name|info
operator|.
name|failed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReleasing
argument_list|(
name|info
operator|.
name|releasing
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRequested
argument_list|(
name|info
operator|.
name|requested
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStarted
argument_list|(
name|info
operator|.
name|started
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartFailed
argument_list|(
name|info
operator|.
name|startFailed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTotalRequested
argument_list|(
name|info
operator|.
name|totalRequested
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNodeFailed
argument_list|(
name|info
operator|.
name|nodeFailed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPreempted
argument_list|(
name|info
operator|.
name|preempted
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFailedRecently
argument_list|(
name|info
operator|.
name|failedRecently
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|failureMessage
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFailureMessage
argument_list|(
name|info
operator|.
name|failureMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|containers
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllContainers
argument_list|(
name|info
operator|.
name|containers
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setPendingAntiAffineRequestCount
argument_list|(
name|info
operator|.
name|pendingAntiAffineRequestCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setIsAARequestOutstanding
argument_list|(
name|info
operator|.
name|isAARequestOutstanding
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|marshall (NodeInformation info)
specifier|public
specifier|static
name|Messages
operator|.
name|NodeInformationProto
name|marshall
parameter_list|(
name|NodeInformation
name|info
parameter_list|)
block|{
name|Messages
operator|.
name|NodeInformationProto
operator|.
name|Builder
name|builder
init|=
name|Messages
operator|.
name|NodeInformationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setHostname
argument_list|(
name|info
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastUpdated
argument_list|(
name|info
operator|.
name|lastUpdated
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|info
operator|.
name|state
operator|!=
literal|null
condition|?
name|info
operator|.
name|state
else|:
literal|"unknown"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRackName
argument_list|(
name|info
operator|.
name|rackName
operator|!=
literal|null
condition|?
name|info
operator|.
name|rackName
else|:
literal|""
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHealthReport
argument_list|(
name|info
operator|.
name|healthReport
operator|!=
literal|null
condition|?
name|info
operator|.
name|healthReport
else|:
literal|""
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHttpAddress
argument_list|(
name|info
operator|.
name|httpAddress
operator|!=
literal|null
condition|?
name|info
operator|.
name|httpAddress
else|:
literal|""
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLabels
argument_list|(
name|info
operator|.
name|labels
operator|!=
literal|null
condition|?
name|info
operator|.
name|labels
else|:
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeEntryInformation
argument_list|>
name|elt
range|:
name|info
operator|.
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeEntryInformation
name|entry
init|=
name|elt
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Messages
operator|.
name|NodeEntryInformationProto
operator|.
name|Builder
name|node
init|=
name|Messages
operator|.
name|NodeEntryInformationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|node
operator|.
name|setPriority
argument_list|(
name|entry
operator|.
name|priority
argument_list|)
expr_stmt|;
name|node
operator|.
name|setName
argument_list|(
name|elt
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setFailed
argument_list|(
name|entry
operator|.
name|failed
argument_list|)
expr_stmt|;
name|node
operator|.
name|setFailedRecently
argument_list|(
name|entry
operator|.
name|failedRecently
argument_list|)
expr_stmt|;
name|node
operator|.
name|setLive
argument_list|(
name|entry
operator|.
name|live
argument_list|)
expr_stmt|;
name|node
operator|.
name|setLastUsed
argument_list|(
name|entry
operator|.
name|lastUsed
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPreempted
argument_list|(
name|entry
operator|.
name|preempted
argument_list|)
expr_stmt|;
name|node
operator|.
name|setRequested
argument_list|(
name|entry
operator|.
name|requested
argument_list|)
expr_stmt|;
name|node
operator|.
name|setReleasing
argument_list|(
name|entry
operator|.
name|releasing
argument_list|)
expr_stmt|;
name|node
operator|.
name|setStartFailed
argument_list|(
name|entry
operator|.
name|startFailed
argument_list|)
expr_stmt|;
name|node
operator|.
name|setStarting
argument_list|(
name|entry
operator|.
name|starting
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addEntries
argument_list|(
name|node
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|unmarshall (Messages.NodeInformationProto wire)
specifier|public
specifier|static
name|NodeInformation
name|unmarshall
parameter_list|(
name|Messages
operator|.
name|NodeInformationProto
name|wire
parameter_list|)
block|{
name|NodeInformation
name|info
init|=
operator|new
name|NodeInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|healthReport
operator|=
name|wire
operator|.
name|getHealthReport
argument_list|()
expr_stmt|;
name|info
operator|.
name|hostname
operator|=
name|wire
operator|.
name|getHostname
argument_list|()
expr_stmt|;
name|info
operator|.
name|httpAddress
operator|=
name|wire
operator|.
name|getHttpAddress
argument_list|()
expr_stmt|;
name|info
operator|.
name|labels
operator|=
name|wire
operator|.
name|getLabels
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastUpdated
operator|=
name|wire
operator|.
name|getLastUpdated
argument_list|()
expr_stmt|;
name|info
operator|.
name|rackName
operator|=
name|wire
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|info
operator|.
name|state
operator|=
name|wire
operator|.
name|getState
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Messages
operator|.
name|NodeEntryInformationProto
argument_list|>
name|entriesList
init|=
name|wire
operator|.
name|getEntriesList
argument_list|()
decl_stmt|;
if|if
condition|(
name|entriesList
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|entries
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|entriesList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Messages
operator|.
name|NodeEntryInformationProto
name|entry
range|:
name|entriesList
control|)
block|{
name|NodeEntryInformation
name|nei
init|=
operator|new
name|NodeEntryInformation
argument_list|()
decl_stmt|;
name|nei
operator|.
name|failed
operator|=
name|entry
operator|.
name|getFailed
argument_list|()
expr_stmt|;
name|nei
operator|.
name|failedRecently
operator|=
name|entry
operator|.
name|getFailedRecently
argument_list|()
expr_stmt|;
name|nei
operator|.
name|lastUsed
operator|=
name|entry
operator|.
name|getLastUsed
argument_list|()
expr_stmt|;
name|nei
operator|.
name|live
operator|=
name|entry
operator|.
name|getLive
argument_list|()
expr_stmt|;
name|nei
operator|.
name|preempted
operator|=
name|entry
operator|.
name|getPreempted
argument_list|()
expr_stmt|;
name|nei
operator|.
name|priority
operator|=
name|entry
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|nei
operator|.
name|requested
operator|=
name|entry
operator|.
name|getRequested
argument_list|()
expr_stmt|;
name|nei
operator|.
name|releasing
operator|=
name|entry
operator|.
name|getReleasing
argument_list|()
expr_stmt|;
name|nei
operator|.
name|startFailed
operator|=
name|entry
operator|.
name|getStartFailed
argument_list|()
expr_stmt|;
name|nei
operator|.
name|starting
operator|=
name|entry
operator|.
name|getStarting
argument_list|()
expr_stmt|;
name|info
operator|.
name|entries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|nei
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|unmarshall (Messages.ContainerInformationProto wire)
specifier|public
specifier|static
name|ContainerInformation
name|unmarshall
parameter_list|(
name|Messages
operator|.
name|ContainerInformationProto
name|wire
parameter_list|)
block|{
name|ContainerInformation
name|info
init|=
operator|new
name|ContainerInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|containerId
operator|=
name|wire
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|info
operator|.
name|component
operator|=
name|wire
operator|.
name|getComponent
argument_list|()
expr_stmt|;
name|info
operator|.
name|appVersion
operator|=
name|wire
operator|.
name|getAppVersion
argument_list|()
expr_stmt|;
name|info
operator|.
name|state
operator|=
name|wire
operator|.
name|getState
argument_list|()
expr_stmt|;
if|if
condition|(
name|wire
operator|.
name|hasReleased
argument_list|()
condition|)
block|{
name|info
operator|.
name|released
operator|=
name|wire
operator|.
name|getReleased
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wire
operator|.
name|hasExitCode
argument_list|()
condition|)
block|{
name|info
operator|.
name|exitCode
operator|=
name|wire
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wire
operator|.
name|hasDiagnostics
argument_list|()
condition|)
block|{
name|info
operator|.
name|diagnostics
operator|=
name|wire
operator|.
name|getDiagnostics
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wire
operator|.
name|hasHost
argument_list|()
condition|)
block|{
name|info
operator|.
name|host
operator|=
name|wire
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wire
operator|.
name|hasHostURL
argument_list|()
condition|)
block|{
name|info
operator|.
name|host
operator|=
name|wire
operator|.
name|getHostURL
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|createTime
operator|=
name|wire
operator|.
name|getCreateTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|startTime
operator|=
name|wire
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|output
operator|=
name|wire
operator|.
name|getOutputList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|wire
operator|.
name|getOutputCount
argument_list|()
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|wire
operator|.
name|hasPlacement
argument_list|()
condition|)
block|{
name|info
operator|.
name|placement
operator|=
name|wire
operator|.
name|getPlacement
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|unmarshall (Messages.GetLiveContainersResponseProto wire)
specifier|public
specifier|static
name|List
argument_list|<
name|ContainerInformation
argument_list|>
name|unmarshall
parameter_list|(
name|Messages
operator|.
name|GetLiveContainersResponseProto
name|wire
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerInformation
argument_list|>
name|infoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|wire
operator|.
name|getContainersList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Messages
operator|.
name|ContainerInformationProto
name|container
range|:
name|wire
operator|.
name|getContainersList
argument_list|()
control|)
block|{
name|infoList
operator|.
name|add
argument_list|(
name|unmarshall
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|infoList
return|;
block|}
DECL|method|marshall (ContainerInformation info)
specifier|public
specifier|static
name|Messages
operator|.
name|ContainerInformationProto
name|marshall
parameter_list|(
name|ContainerInformation
name|info
parameter_list|)
block|{
name|Messages
operator|.
name|ContainerInformationProto
operator|.
name|Builder
name|builder
init|=
name|Messages
operator|.
name|ContainerInformationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|containerId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setContainerId
argument_list|(
name|info
operator|.
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|component
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setComponent
argument_list|(
name|info
operator|.
name|component
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|appVersion
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAppVersion
argument_list|(
name|info
operator|.
name|appVersion
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setCreateTime
argument_list|(
name|info
operator|.
name|createTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|diagnostics
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setDiagnostics
argument_list|(
name|info
operator|.
name|diagnostics
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|host
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHost
argument_list|(
name|info
operator|.
name|host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hostURL
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHostURL
argument_list|(
name|info
operator|.
name|hostURL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|output
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllOutput
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|info
operator|.
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|released
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReleased
argument_list|(
name|info
operator|.
name|released
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|placement
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPlacement
argument_list|(
name|info
operator|.
name|placement
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStartTime
argument_list|(
name|info
operator|.
name|startTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|info
operator|.
name|state
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|unmarshall (Messages.WrappedJsonProto wire)
specifier|public
specifier|static
name|String
name|unmarshall
parameter_list|(
name|Messages
operator|.
name|WrappedJsonProto
name|wire
parameter_list|)
block|{
return|return
name|wire
operator|.
name|getJson
argument_list|()
return|;
block|}
block|}
end_class

end_unit

