begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.api
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|proto
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Describe a specific node in the cluster  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|ClusterNode
specifier|public
specifier|final
class|class
name|ClusterNode
implements|implements
name|Cloneable
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
DECL|field|LOG
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClusterNode
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|JsonIgnore
DECL|field|containerId
specifier|public
name|ContainerId
name|containerId
decl_stmt|;
comment|/**    * server name    */
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
comment|/**    * UUID of container used in Slider RPC to refer to instances    */
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|role
specifier|public
name|String
name|role
decl_stmt|;
DECL|field|roleId
specifier|public
name|int
name|roleId
decl_stmt|;
DECL|field|createTime
specifier|public
name|long
name|createTime
decl_stmt|;
DECL|field|startTime
specifier|public
name|long
name|startTime
decl_stmt|;
comment|/**    * flag set when it is released, to know if it has    * already been targeted for termination    */
DECL|field|released
specifier|public
name|boolean
name|released
decl_stmt|;
DECL|field|host
specifier|public
name|String
name|host
decl_stmt|;
DECL|field|ip
specifier|public
name|String
name|ip
decl_stmt|;
DECL|field|hostname
specifier|public
name|String
name|hostname
decl_stmt|;
DECL|field|hostUrl
specifier|public
name|String
name|hostUrl
decl_stmt|;
comment|/**    * state from {@link ClusterDescription}    */
DECL|field|state
specifier|public
name|int
name|state
decl_stmt|;
comment|/**    * Exit code: only valid if the state>= STOPPED    */
DECL|field|exitCode
specifier|public
name|int
name|exitCode
decl_stmt|;
comment|/**    * what was the command executed?    */
DECL|field|command
specifier|public
name|String
name|command
decl_stmt|;
comment|/**    * Any diagnostics    */
DECL|field|diagnostics
specifier|public
name|String
name|diagnostics
decl_stmt|;
comment|/**    * What is the tail output from the executed process (or [] if not started    * or the log cannot be picked up    */
DECL|field|output
specifier|public
name|String
index|[]
name|output
decl_stmt|;
comment|/**    * Any environment details    */
DECL|field|environment
specifier|public
name|String
index|[]
name|environment
decl_stmt|;
comment|/**    * server-side ctor takes the container ID and builds the name from it    * @param containerId container ID; can be null    */
DECL|method|ClusterNode (ContainerId containerId)
specifier|public
name|ClusterNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|containerId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * ctor for deserialization    */
DECL|method|ClusterNode ()
specifier|public
name|ClusterNode
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"state: "
argument_list|)
operator|.
name|append
argument_list|(
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"role: "
argument_list|)
operator|.
name|append
argument_list|(
name|role
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|builder
argument_list|,
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|builder
argument_list|,
literal|"hostURL"
argument_list|,
name|hostUrl
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|builder
argument_list|,
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|line
range|:
name|output
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|append
argument_list|(
name|builder
argument_list|,
literal|"diagnostics"
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|append (StringBuilder builder, String key, Object val)
specifier|private
name|void
name|append
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convert to a JSON string    * @return a JSON string description    * @throws IOException Problems mapping/writing the object    */
DECL|method|toJsonString ()
specifier|public
name|String
name|toJsonString
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Convert from JSON    * @param json input    * @return the parsed JSON    * @throws IOException IO    */
DECL|method|fromJson (String json)
specifier|public
specifier|static
name|ClusterNode
name|fromJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ClusterNode
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json : {}\n{}"
argument_list|,
name|e
argument_list|,
name|json
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Build from a protobuf response    * @param message    * @return the deserialized node    */
DECL|method|fromProtobuf (Messages.RoleInstanceState message)
specifier|public
specifier|static
name|ClusterNode
name|fromProtobuf
parameter_list|(
name|Messages
operator|.
name|RoleInstanceState
name|message
parameter_list|)
block|{
name|ClusterNode
name|node
init|=
operator|new
name|ClusterNode
argument_list|()
decl_stmt|;
name|node
operator|.
name|name
operator|=
name|message
operator|.
name|getName
argument_list|()
expr_stmt|;
name|node
operator|.
name|command
operator|=
name|message
operator|.
name|getCommand
argument_list|()
expr_stmt|;
name|node
operator|.
name|diagnostics
operator|=
name|message
operator|.
name|getDiagnostics
argument_list|()
expr_stmt|;
name|String
index|[]
name|arr
decl_stmt|;
name|int
name|environmentCount
init|=
name|message
operator|.
name|getEnvironmentCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|environmentCount
operator|>
literal|0
condition|)
block|{
name|arr
operator|=
operator|new
name|String
index|[
name|environmentCount
index|]
expr_stmt|;
name|node
operator|.
name|environment
operator|=
name|message
operator|.
name|getEnvironmentList
argument_list|()
operator|.
name|toArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|exitCode
operator|=
name|message
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
name|int
name|outputCount
init|=
name|message
operator|.
name|getOutputCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputCount
operator|>
literal|0
condition|)
block|{
name|arr
operator|=
operator|new
name|String
index|[
name|outputCount
index|]
expr_stmt|;
name|node
operator|.
name|output
operator|=
name|message
operator|.
name|getOutputList
argument_list|()
operator|.
name|toArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|role
operator|=
name|message
operator|.
name|getRole
argument_list|()
expr_stmt|;
name|node
operator|.
name|roleId
operator|=
name|message
operator|.
name|getRoleId
argument_list|()
expr_stmt|;
name|node
operator|.
name|state
operator|=
name|message
operator|.
name|getState
argument_list|()
expr_stmt|;
name|node
operator|.
name|host
operator|=
name|message
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|node
operator|.
name|hostUrl
operator|=
name|message
operator|.
name|getHostURL
argument_list|()
expr_stmt|;
name|node
operator|.
name|createTime
operator|=
name|message
operator|.
name|getCreateTime
argument_list|()
expr_stmt|;
name|node
operator|.
name|startTime
operator|=
name|message
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|node
operator|.
name|released
operator|=
name|message
operator|.
name|getReleased
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|doClone ()
specifier|public
name|ClusterNode
name|doClone
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ClusterNode
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|//not going to happen. This is a final class
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

