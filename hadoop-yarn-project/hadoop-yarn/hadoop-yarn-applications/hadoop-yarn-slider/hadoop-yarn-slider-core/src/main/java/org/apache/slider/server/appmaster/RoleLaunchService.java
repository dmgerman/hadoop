begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|AgentKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|ActionStartContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|QueueAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|WorkflowExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|ServiceThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A service for launching containers  */
end_comment

begin_class
DECL|class|RoleLaunchService
specifier|public
class|class
name|RoleLaunchService
extends|extends
name|WorkflowExecutorService
argument_list|<
name|ExecutorService
argument_list|>
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RoleLaunchService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROLE_LAUNCH_SERVICE
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_LAUNCH_SERVICE
init|=
literal|"RoleLaunchService"
decl_stmt|;
comment|/**    * Queue submission API    */
DECL|field|actionQueue
specifier|private
specifier|final
name|QueueAccess
name|actionQueue
decl_stmt|;
comment|/**    * Provider building up the command    */
DECL|field|provider
specifier|private
specifier|final
name|ProviderService
name|provider
decl_stmt|;
comment|/**    * Filesystem to use for the launch    */
DECL|field|fs
specifier|private
specifier|final
name|SliderFileSystem
name|fs
decl_stmt|;
comment|/**    * Path in the launch filesystem that refers to a configuration directory    * -the interpretation of it is left to the Provider    */
DECL|field|generatedConfDirPath
specifier|private
specifier|final
name|Path
name|generatedConfDirPath
decl_stmt|;
comment|/**    * Path in the launch filesystem that refers to a temp directory    * which will be cleaned up at (some) time in the future    */
DECL|field|launcherTmpDirPath
specifier|private
specifier|final
name|Path
name|launcherTmpDirPath
decl_stmt|;
DECL|field|envVars
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envVars
decl_stmt|;
comment|/**    * Construct an instance of the launcher    * @param queueAccess    * @param provider the provider    * @param fs filesystem    * @param generatedConfDirPath path in the FS for the generated dir    * @param envVars environment variables    * @param launcherTmpDirPath path for a temporary data in the launch process    */
DECL|method|RoleLaunchService (QueueAccess queueAccess, ProviderService provider, SliderFileSystem fs, Path generatedConfDirPath, Map<String, String> envVars, Path launcherTmpDirPath)
specifier|public
name|RoleLaunchService
parameter_list|(
name|QueueAccess
name|queueAccess
parameter_list|,
name|ProviderService
name|provider
parameter_list|,
name|SliderFileSystem
name|fs
parameter_list|,
name|Path
name|generatedConfDirPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envVars
parameter_list|,
name|Path
name|launcherTmpDirPath
parameter_list|)
block|{
name|super
argument_list|(
name|ROLE_LAUNCH_SERVICE
argument_list|)
expr_stmt|;
name|this
operator|.
name|actionQueue
operator|=
name|queueAccess
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|generatedConfDirPath
operator|=
name|generatedConfDirPath
expr_stmt|;
name|this
operator|.
name|launcherTmpDirPath
operator|=
name|launcherTmpDirPath
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|envVars
operator|=
name|envVars
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setExecutor
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|ServiceThreadFactory
argument_list|(
name|ROLE_LAUNCH_SERVICE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start an asychronous launch operation    * @param assignment container assignment    * @param clusterSpec cluster spec to use for template    * @param credentials credentials to use    */
DECL|method|launchRole (ContainerAssignment assignment, AggregateConf clusterSpec, Credentials credentials)
specifier|public
name|void
name|launchRole
parameter_list|(
name|ContainerAssignment
name|assignment
parameter_list|,
name|AggregateConf
name|clusterSpec
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{
name|RoleStatus
name|role
init|=
name|assignment
operator|.
name|role
decl_stmt|;
name|String
name|roleName
init|=
name|role
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|roleGroup
init|=
name|role
operator|.
name|getGroup
argument_list|()
decl_stmt|;
comment|// prelaunch safety check
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|provider
operator|.
name|isSupportedRole
argument_list|(
name|roleName
argument_list|)
argument_list|)
expr_stmt|;
name|RoleLaunchService
operator|.
name|RoleLauncher
name|launcher
init|=
operator|new
name|RoleLaunchService
operator|.
name|RoleLauncher
argument_list|(
name|assignment
argument_list|,
name|clusterSpec
argument_list|,
name|clusterSpec
operator|.
name|getResourceOperations
argument_list|()
operator|.
name|getOrAddComponent
argument_list|(
name|roleGroup
argument_list|)
argument_list|,
name|clusterSpec
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getOrAddComponent
argument_list|(
name|roleGroup
argument_list|)
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|launcher
argument_list|)
expr_stmt|;
block|}
comment|/**    * Thread that runs on the AM to launch a container    */
DECL|class|RoleLauncher
specifier|private
class|class
name|RoleLauncher
implements|implements
name|Runnable
block|{
DECL|field|assignment
specifier|private
specifier|final
name|ContainerAssignment
name|assignment
decl_stmt|;
comment|// Allocated container
DECL|field|container
specifier|public
specifier|final
name|Container
name|container
decl_stmt|;
DECL|field|resourceComponent
specifier|private
specifier|final
name|MapOperations
name|resourceComponent
decl_stmt|;
DECL|field|appComponent
specifier|private
specifier|final
name|MapOperations
name|appComponent
decl_stmt|;
DECL|field|instanceDefinition
specifier|private
specifier|final
name|AggregateConf
name|instanceDefinition
decl_stmt|;
DECL|field|role
specifier|public
specifier|final
name|ProviderRole
name|role
decl_stmt|;
DECL|field|credentials
specifier|private
specifier|final
name|Credentials
name|credentials
decl_stmt|;
DECL|field|raisedException
specifier|private
name|Exception
name|raisedException
decl_stmt|;
DECL|method|RoleLauncher (ContainerAssignment assignment, AggregateConf instanceDefinition, MapOperations resourceComponent, MapOperations appComponent, Credentials credentials)
specifier|public
name|RoleLauncher
parameter_list|(
name|ContainerAssignment
name|assignment
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|MapOperations
name|resourceComponent
parameter_list|,
name|MapOperations
name|appComponent
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{
name|this
operator|.
name|assignment
operator|=
name|assignment
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentials
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|assignment
operator|.
name|container
expr_stmt|;
name|RoleStatus
name|roleStatus
init|=
name|assignment
operator|.
name|role
decl_stmt|;
assert|assert
name|resourceComponent
operator|!=
literal|null
assert|;
assert|assert
name|appComponent
operator|!=
literal|null
assert|;
name|ProviderRole
name|providerRole
init|=
name|roleStatus
operator|.
name|getProviderRole
argument_list|()
decl_stmt|;
assert|assert
name|providerRole
operator|!=
literal|null
assert|;
name|this
operator|.
name|role
operator|=
name|providerRole
expr_stmt|;
name|this
operator|.
name|resourceComponent
operator|=
name|resourceComponent
expr_stmt|;
name|this
operator|.
name|appComponent
operator|=
name|appComponent
expr_stmt|;
name|this
operator|.
name|instanceDefinition
operator|=
name|instanceDefinition
expr_stmt|;
block|}
DECL|method|getRaisedException ()
specifier|public
name|Exception
name|getRaisedException
parameter_list|()
block|{
return|return
name|raisedException
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RoleLauncher{"
operator|+
literal|"container="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|", containerRole='"
operator|+
name|role
operator|.
name|name
operator|+
literal|'\''
operator|+
literal|", containerGroup='"
operator|+
name|role
operator|.
name|group
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ContainerLauncher
name|containerLauncher
init|=
operator|new
name|ContainerLauncher
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|fs
argument_list|,
name|container
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|containerLauncher
operator|.
name|setupUGI
argument_list|()
expr_stmt|;
name|containerLauncher
operator|.
name|putEnv
argument_list|(
name|envVars
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Launching container {} into role {}"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|role
operator|.
name|name
argument_list|)
expr_stmt|;
comment|//now build up the configuration data
name|Path
name|containerTmpDirPath
init|=
operator|new
name|Path
argument_list|(
name|launcherTmpDirPath
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|provider
operator|.
name|buildContainerLaunchContext
argument_list|(
name|containerLauncher
argument_list|,
name|instanceDefinition
argument_list|,
name|container
argument_list|,
name|role
argument_list|,
name|fs
argument_list|,
name|generatedConfDirPath
argument_list|,
name|resourceComponent
argument_list|,
name|appComponent
argument_list|,
name|containerTmpDirPath
argument_list|)
expr_stmt|;
name|RoleInstance
name|instance
init|=
operator|new
name|RoleInstance
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|String
index|[]
name|envDescription
init|=
name|containerLauncher
operator|.
name|dumpEnvToString
argument_list|()
decl_stmt|;
name|String
name|commandsAsString
init|=
name|containerLauncher
operator|.
name|getCommandsAsString
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting container with command: {}"
argument_list|,
name|commandsAsString
argument_list|)
expr_stmt|;
name|instance
operator|.
name|command
operator|=
name|commandsAsString
expr_stmt|;
name|instance
operator|.
name|role
operator|=
name|role
operator|.
name|name
expr_stmt|;
name|instance
operator|.
name|group
operator|=
name|role
operator|.
name|group
expr_stmt|;
name|instance
operator|.
name|roleId
operator|=
name|role
operator|.
name|id
expr_stmt|;
name|instance
operator|.
name|appVersion
operator|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|SliderKeys
operator|.
name|APP_VERSION
argument_list|)
expr_stmt|;
name|instance
operator|.
name|environment
operator|=
name|envDescription
expr_stmt|;
name|int
name|delay
init|=
name|appComponent
operator|.
name|getOptionInt
argument_list|(
name|AgentKeys
operator|.
name|KEY_CONTAINER_LAUNCH_DELAY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxDelay
init|=
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
argument_list|)
decl_stmt|;
if|if
condition|(
name|delay
operator|>
name|maxDelay
operator|/
literal|1000
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Container launch delay of {} exceeds the maximum allowed of"
operator|+
literal|" {} seconds.  Delay will not be utilized."
argument_list|,
name|delay
argument_list|,
name|maxDelay
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|delay
operator|=
literal|0
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Container launch delay for {} set to {} seconds"
argument_list|,
name|role
operator|.
name|name
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|actionQueue
operator|.
name|schedule
argument_list|(
operator|new
name|ActionStartContainer
argument_list|(
literal|"starting "
operator|+
name|role
operator|.
name|name
argument_list|,
name|container
argument_list|,
name|containerLauncher
operator|.
name|completeContainerLaunch
argument_list|()
argument_list|,
name|instance
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception thrown while trying to start {}: {}"
argument_list|,
name|role
operator|.
name|name
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|raisedException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

