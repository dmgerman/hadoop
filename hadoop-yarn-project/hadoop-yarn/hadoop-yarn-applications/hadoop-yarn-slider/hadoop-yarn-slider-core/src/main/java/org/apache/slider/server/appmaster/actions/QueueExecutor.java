begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.actions
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|SliderAppMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Executor for async actions - hands them off to the AM as   * appropriate  */
end_comment

begin_class
DECL|class|QueueExecutor
specifier|public
class|class
name|QueueExecutor
implements|implements
name|Runnable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appMaster
specifier|private
specifier|final
name|SliderAppMaster
name|appMaster
decl_stmt|;
DECL|field|actionQueues
specifier|private
specifier|final
name|QueueService
name|actionQueues
decl_stmt|;
DECL|field|appState
specifier|private
specifier|final
name|AppState
name|appState
decl_stmt|;
DECL|method|QueueExecutor (SliderAppMaster appMaster, QueueService actionQueues)
specifier|public
name|QueueExecutor
parameter_list|(
name|SliderAppMaster
name|appMaster
parameter_list|,
name|QueueService
name|actionQueues
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appMaster
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|actionQueues
argument_list|)
expr_stmt|;
name|this
operator|.
name|appMaster
operator|=
name|appMaster
expr_stmt|;
name|this
operator|.
name|actionQueues
operator|=
name|actionQueues
expr_stmt|;
name|this
operator|.
name|appState
operator|=
name|appMaster
operator|.
name|getAppState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|QueueExecutor (QueueService actionQueues)
specifier|public
name|QueueExecutor
parameter_list|(
name|QueueService
name|actionQueues
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|actionQueues
argument_list|)
expr_stmt|;
name|this
operator|.
name|appMaster
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|appState
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|actionQueues
operator|=
name|actionQueues
expr_stmt|;
block|}
comment|/**    * Run until the queue has been told to stop    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|AsyncAction
name|take
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Queue Executor run() started"
argument_list|)
expr_stmt|;
do|do
block|{
name|take
operator|=
name|actionQueues
operator|.
name|actionQueue
operator|.
name|take
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Executing {}"
argument_list|,
name|take
argument_list|)
expr_stmt|;
name|take
operator|.
name|execute
argument_list|(
name|appMaster
argument_list|,
name|actionQueues
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Completed {}"
argument_list|,
name|take
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
operator|(
name|take
operator|instanceof
name|ActionStopQueue
operator|)
condition|)
do|;
name|log
operator|.
name|info
argument_list|(
literal|"Queue Executor run() stopped"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// interrupted: exit
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception processing {}: {}"
argument_list|,
name|take
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|appMaster
operator|!=
literal|null
condition|)
block|{
name|appMaster
operator|.
name|onExceptionInThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// tag completed
name|actionQueues
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

