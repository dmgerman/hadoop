begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.launch
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Build a single command line to include in the container commands;  * Special support for JVM command buildup.  */
end_comment

begin_class
DECL|class|CommandLineBuilder
specifier|public
class|class
name|CommandLineBuilder
block|{
DECL|field|argumentList
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|argumentList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|/**    * Add an entry to the command list    * @param args arguments -these will be converted strings    */
DECL|method|add (Object... args)
specifier|public
name|void
name|add
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
name|argumentList
operator|.
name|add
argument_list|(
name|arg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the number of arguments    * @return an integer>= 0    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|argumentList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Append the output and error files to the tail of the command    * @param stdout out    * @param stderr error. Set this to null to append into stdout    */
DECL|method|addOutAndErrFiles (String stdout, String stderr)
specifier|public
name|void
name|addOutAndErrFiles
parameter_list|(
name|String
name|stdout
parameter_list|,
name|String
name|stderr
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|stdout
argument_list|,
literal|"Null output file"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|stdout
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"output filename invalid"
argument_list|)
expr_stmt|;
comment|// write out the path output
name|argumentList
operator|.
name|add
argument_list|(
literal|"1>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/"
operator|+
name|stdout
argument_list|)
expr_stmt|;
if|if
condition|(
name|stderr
operator|!=
literal|null
condition|)
block|{
name|argumentList
operator|.
name|add
argument_list|(
literal|"2>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/"
operator|+
name|stderr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentList
operator|.
name|add
argument_list|(
literal|"2>&1"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This just returns the command line    * @see #build()    * @return the command line    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|build
argument_list|()
return|;
block|}
comment|/**    * Build the command line    * @return the command line    */
DECL|method|build ()
specifier|public
name|String
name|build
parameter_list|()
block|{
return|return
name|SliderUtils
operator|.
name|join
argument_list|(
name|argumentList
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
end_class

end_unit

