begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client.params
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Static argument manipulation operations  */
end_comment

begin_class
DECL|class|ArgOps
specifier|public
class|class
name|ArgOps
block|{
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArgOps
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * create a 3-tuple    */
DECL|method|triple (String msg, int min, int max)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|triple
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|applyFileSystemBinding (String filesystemBinding, Configuration conf)
specifier|public
specifier|static
name|void
name|applyFileSystemBinding
parameter_list|(
name|String
name|filesystemBinding
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|filesystemBinding
operator|!=
literal|null
condition|)
block|{
comment|//filesystem argument was set -this overwrites any defaults in the
comment|//configuration
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|filesystemBinding
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|splitPairs (Collection<String> pairs, Map<String, String> dest)
specifier|public
specifier|static
name|void
name|splitPairs
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|pairs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dest
parameter_list|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|pairs
control|)
block|{
name|String
index|[]
name|keyval
init|=
name|prop
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyval
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|dest
operator|.
name|put
argument_list|(
name|keyval
index|[
literal|0
index|]
argument_list|,
name|keyval
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|applyDefinitions (Map<String, String> definitionMap, Configuration conf)
specifier|public
specifier|static
name|void
name|applyDefinitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|definitionMap
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|definitionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"configuration[{}]<=\"{}\""
argument_list|,
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|val
argument_list|,
literal|"command line"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a map from a tuple list like ['worker','2','master','1] into a map    * ['worker':'2',"master":'1'];    * Duplicate entries also trigger errors    * @param description description for errors    * @param list list to conver to tuples    * @return the map of key value pairs -unordered.    * @throws BadCommandArgumentsException odd #of arguments received    */
DECL|method|convertTupleListToMap (String description, List<String> list)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertTupleListToMap
parameter_list|(
name|String
name|description
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
comment|//odd number of elements, not permitted
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_PARSE_FAILURE
operator|+
name|description
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|size
condition|;
name|count
operator|+=
literal|2
control|)
block|{
name|String
name|key
init|=
name|list
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|list
operator|.
name|get
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_DUPLICATE_ENTRY
operator|+
name|description
operator|+
literal|": "
operator|+
name|key
argument_list|)
throw|;
block|}
name|results
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Create a map from a tuple list like    * ['worker','heapsize','5G','master','heapsize','2M'] into a map    * ['worker':'2',"master":'1'];    * Duplicate entries also trigger errors     * @throws BadCommandArgumentsException odd #of arguments received    */
DECL|method|convertTripleListToMaps (String description, List<String> list)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|convertTripleListToMaps
parameter_list|(
name|String
name|description
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
comment|//wrong number of elements, not permitted
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_PARSE_FAILURE
operator|+
name|description
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|size
condition|;
name|count
operator|+=
literal|3
control|)
block|{
name|String
name|role
init|=
name|list
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|list
operator|.
name|get
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|list
operator|.
name|get
argument_list|(
name|count
operator|+
literal|2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|results
operator|.
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleMap
operator|==
literal|null
condition|)
block|{
comment|//demand create new role map
name|roleMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|role
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roleMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_DUPLICATE_ENTRY
operator|+
name|description
operator|+
literal|": for key "
operator|+
name|key
operator|+
literal|" under "
operator|+
name|role
argument_list|)
throw|;
block|}
name|roleMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

