begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|StoresGenerator
specifier|public
class|class
name|StoresGenerator
block|{
DECL|field|certMgr
specifier|static
name|CertificateManager
name|certMgr
init|=
operator|new
name|CertificateManager
argument_list|()
decl_stmt|;
DECL|field|GENERATORS
specifier|private
specifier|static
name|SecurityStoreGenerator
index|[]
name|GENERATORS
init|=
block|{
operator|new
name|KeystoreGenerator
argument_list|(
name|certMgr
argument_list|)
block|,
operator|new
name|TruststoreGenerator
argument_list|(
name|certMgr
argument_list|)
block|}
decl_stmt|;
DECL|method|generateSecurityStores (String hostname, String containerId, String role, AggregateConf instanceDefinition, MapOperations compOps)
specifier|public
specifier|static
name|SecurityStore
index|[]
name|generateSecurityStores
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|role
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|MapOperations
name|compOps
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
comment|//discover which stores need generation based on the passwords configured
name|List
argument_list|<
name|SecurityStore
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|SecurityStore
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SecurityStoreGenerator
name|generator
range|:
name|GENERATORS
control|)
block|{
if|if
condition|(
name|generator
operator|.
name|isStoreRequested
argument_list|(
name|compOps
argument_list|)
condition|)
block|{
name|SecurityStore
name|store
init|=
name|generator
operator|.
name|generate
argument_list|(
name|hostname
argument_list|,
name|containerId
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|,
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Security stores were requested but none were "
operator|+
literal|"generated. Check the AM logs and ensure "
operator|+
literal|"passwords are configured for the components "
operator|+
literal|"requiring the stores."
argument_list|)
throw|;
block|}
return|return
name|files
operator|.
name|toArray
argument_list|(
operator|new
name|SecurityStore
index|[
name|files
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

