begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client.rest
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|representation
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ApplicationLivenessInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ComponentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|SliderApplicationApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformationList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ExceptionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|restclient
operator|.
name|HttpVerb
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|PingInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|RestPaths
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link SliderApplicationApi}  */
end_comment

begin_class
DECL|class|SliderApplicationApiRestClient
specifier|public
class|class
name|SliderApplicationApiRestClient
extends|extends
name|BaseRestClient
implements|implements
name|SliderApplicationApi
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderApplicationApiRestClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appResource
specifier|private
name|WebResource
name|appResource
decl_stmt|;
comment|/**    * Create an instance    * @param jerseyClient jersey client for operations    * @param appResource resource of application API    */
DECL|method|SliderApplicationApiRestClient (Client jerseyClient, WebResource appResource)
specifier|public
name|SliderApplicationApiRestClient
parameter_list|(
name|Client
name|jerseyClient
parameter_list|,
name|WebResource
name|appResource
parameter_list|)
block|{
name|super
argument_list|(
name|jerseyClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|appResource
operator|=
name|appResource
expr_stmt|;
block|}
comment|/**    * Create an instance    * @param jerseyClient jersey client for operations    * @param appmaster URL of appmaster/proxy to AM    */
DECL|method|SliderApplicationApiRestClient (Client jerseyClient, String appmaster)
specifier|public
name|SliderApplicationApiRestClient
parameter_list|(
name|Client
name|jerseyClient
parameter_list|,
name|String
name|appmaster
parameter_list|)
block|{
name|super
argument_list|(
name|jerseyClient
argument_list|)
expr_stmt|;
name|WebResource
name|amResource
init|=
name|jerseyClient
operator|.
name|resource
argument_list|(
name|appmaster
argument_list|)
decl_stmt|;
name|amResource
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|this
operator|.
name|appResource
operator|=
name|amResource
operator|.
name|path
argument_list|(
name|SLIDER_PATH_APPLICATION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SliderApplicationApiRestClient{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"appResource="
argument_list|)
operator|.
name|append
argument_list|(
name|appResource
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a resource under the application path    * @param subpath path under application    * @return a resource under the application path    */
DECL|method|applicationResource (String subpath)
specifier|public
name|WebResource
name|applicationResource
parameter_list|(
name|String
name|subpath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|subpath
argument_list|)
argument_list|,
literal|"empty path"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appResource
argument_list|,
literal|"Null app resource"
argument_list|)
expr_stmt|;
return|return
name|appResource
operator|.
name|path
argument_list|(
name|subpath
argument_list|)
return|;
block|}
comment|/**    * Get operation against a path under the Application    * @param<T> type expected    * @param subpath path    * @param c class to instantiate    * @return instance    * @throws IOException on any problem    */
DECL|method|getApplicationResource (String subpath, Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getApplicationResource
parameter_list|(
name|String
name|subpath
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|appResourceOperation
argument_list|(
name|HttpVerb
operator|.
name|GET
argument_list|,
name|subpath
argument_list|,
name|c
argument_list|)
return|;
block|}
comment|/**    * Get operation against a path under the Application    * @param<T> type expected    * @param subpath path    * @param t type info    * @return instance    * @throws IOException on any problem    */
DECL|method|getApplicationResource (String subpath, GenericType<T> t)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getApplicationResource
parameter_list|(
name|String
name|subpath
parameter_list|,
name|GenericType
argument_list|<
name|T
argument_list|>
name|t
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|appResourceOperation
argument_list|(
name|HttpVerb
operator|.
name|GET
argument_list|,
name|subpath
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|/**    *     * @param method method to exec    * @param<T> type expected    * @param subpath path    * @param c class to instantiate    * @return instance    * @throws IOException on any problem    */
DECL|method|appResourceOperation (HttpVerb method, String subpath, Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|appResourceOperation
parameter_list|(
name|HttpVerb
name|method
parameter_list|,
name|String
name|subpath
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exec
argument_list|(
name|method
argument_list|,
name|applicationResource
argument_list|(
name|subpath
argument_list|)
argument_list|,
name|c
argument_list|)
return|;
block|}
comment|/**    * Get operation against a path under the Application    * @param<T> type expected    * @param subpath path    * @param t type info    * @return instance    * @throws IOException on any problem    */
DECL|method|appResourceOperation (HttpVerb method, String subpath, GenericType<T> t)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|appResourceOperation
parameter_list|(
name|HttpVerb
name|method
parameter_list|,
name|String
name|subpath
parameter_list|,
name|GenericType
argument_list|<
name|T
argument_list|>
name|t
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exec
argument_list|(
name|method
argument_list|,
name|applicationResource
argument_list|(
name|subpath
argument_list|)
argument_list|,
name|t
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDesiredModel ()
specifier|public
name|AggregateConf
name|getDesiredModel
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|MODEL_DESIRED
argument_list|,
name|AggregateConf
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDesiredAppconf ()
specifier|public
name|ConfTreeOperations
name|getDesiredAppconf
parameter_list|()
throws|throws
name|IOException
block|{
name|ConfTree
name|resource
init|=
name|getApplicationResource
argument_list|(
name|MODEL_DESIRED_APPCONF
argument_list|,
name|ConfTree
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfTreeOperations
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDesiredResources ()
specifier|public
name|ConfTreeOperations
name|getDesiredResources
parameter_list|()
throws|throws
name|IOException
block|{
name|ConfTree
name|resource
init|=
name|getApplicationResource
argument_list|(
name|MODEL_DESIRED_RESOURCES
argument_list|,
name|ConfTree
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfTreeOperations
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putDesiredResources (ConfTree updated)
specifier|public
name|void
name|putDesiredResources
parameter_list|(
name|ConfTree
name|updated
parameter_list|)
throws|throws
name|IOException
block|{
name|WebResource
name|resource
init|=
name|applicationResource
argument_list|(
name|MODEL_DESIRED_RESOURCES
argument_list|)
decl_stmt|;
try|try
block|{
comment|// put operation. The result is discarded; it does help validate
comment|// that the operation returned a JSON data structure as well as a 200
comment|// response.
name|resource
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
operator|.
name|entity
argument_list|(
name|updated
argument_list|)
operator|.
name|put
argument_list|(
name|ConfTree
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClientHandlerException
name|ex
parameter_list|)
block|{
throw|throw
name|ExceptionConverter
operator|.
name|convertJerseyException
argument_list|(
literal|"PUT"
argument_list|,
name|resource
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ex
parameter_list|)
block|{
throw|throw
name|ExceptionConverter
operator|.
name|convertJerseyException
argument_list|(
literal|"PUT"
argument_list|,
name|resource
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResolvedModel ()
specifier|public
name|AggregateConf
name|getResolvedModel
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|MODEL_RESOLVED
argument_list|,
name|AggregateConf
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResolvedAppconf ()
specifier|public
name|ConfTreeOperations
name|getResolvedAppconf
parameter_list|()
throws|throws
name|IOException
block|{
name|ConfTree
name|resource
init|=
name|getApplicationResource
argument_list|(
name|MODEL_RESOLVED_APPCONF
argument_list|,
name|ConfTree
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfTreeOperations
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResolvedResources ()
specifier|public
name|ConfTreeOperations
name|getResolvedResources
parameter_list|()
throws|throws
name|IOException
block|{
name|ConfTree
name|resource
init|=
name|getApplicationResource
argument_list|(
name|MODEL_RESOLVED_RESOURCES
argument_list|,
name|ConfTree
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfTreeOperations
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLiveResources ()
specifier|public
name|ConfTreeOperations
name|getLiveResources
parameter_list|()
throws|throws
name|IOException
block|{
name|ConfTree
name|resource
init|=
name|getApplicationResource
argument_list|(
name|LIVE_RESOURCES
argument_list|,
name|ConfTree
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfTreeOperations
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|enumContainers ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerInformation
argument_list|>
name|enumContainers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_CONTAINERS
argument_list|,
operator|new
name|GenericType
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerInformation
argument_list|>
argument_list|>
argument_list|()
block|{         }
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainer (String containerId)
specifier|public
name|ContainerInformation
name|getContainer
parameter_list|(
name|String
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_CONTAINERS
operator|+
literal|"/"
operator|+
name|containerId
argument_list|,
name|ContainerInformation
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|enumComponents ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInformation
argument_list|>
name|enumComponents
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_COMPONENTS
argument_list|,
operator|new
name|GenericType
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInformation
argument_list|>
argument_list|>
argument_list|()
block|{ }
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent (String componentName)
specifier|public
name|ComponentInformation
name|getComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_COMPONENTS
operator|+
literal|"/"
operator|+
name|componentName
argument_list|,
name|ComponentInformation
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLiveNodes ()
specifier|public
name|NodeInformationList
name|getLiveNodes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_NODES
argument_list|,
name|NodeInformationList
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLiveNode (String hostname)
specifier|public
name|NodeInformation
name|getLiveNode
parameter_list|(
name|String
name|hostname
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_NODES
operator|+
literal|"/"
operator|+
name|hostname
argument_list|,
name|NodeInformation
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ping (String text)
specifier|public
name|PingInformation
name|ping
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|pingPost
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/**    * Ping as a GET    * @param text text to include    * @return the response    * @throws IOException on any failure    */
DECL|method|pingGet (String text)
specifier|public
name|PingInformation
name|pingGet
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|WebResource
name|pingResource
init|=
name|applicationResource
argument_list|(
name|ACTION_PING
argument_list|)
decl_stmt|;
name|pingResource
operator|.
name|getUriBuilder
argument_list|()
operator|.
name|queryParam
argument_list|(
literal|"body"
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
name|pingResource
operator|.
name|get
argument_list|(
name|PingInformation
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Ping as a POST    * @param text text to include    * @return the response    * @throws IOException on any failure    */
DECL|method|pingPost (String text)
specifier|public
name|PingInformation
name|pingPost
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|WebResource
name|pingResource
init|=
name|applicationResource
argument_list|(
name|ACTION_PING
argument_list|)
decl_stmt|;
name|Form
name|f
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
name|pingResource
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
operator|.
name|post
argument_list|(
name|PingInformation
operator|.
name|class
argument_list|,
name|f
argument_list|)
return|;
block|}
comment|/**    * Ping as a POST    * @param text text to include    * @return the response    * @throws IOException on any failure    */
DECL|method|pingPut (String text)
specifier|public
name|PingInformation
name|pingPut
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|WebResource
name|pingResource
init|=
name|applicationResource
argument_list|(
name|ACTION_PING
argument_list|)
decl_stmt|;
name|Form
name|f
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
return|return
name|pingResource
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|put
argument_list|(
name|PingInformation
operator|.
name|class
argument_list|,
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stop (String text)
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|WebResource
name|resource
init|=
name|applicationResource
argument_list|(
name|ACTION_STOP
argument_list|)
decl_stmt|;
name|resource
operator|.
name|post
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationLiveness ()
specifier|public
name|ApplicationLivenessInformation
name|getApplicationLiveness
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApplicationResource
argument_list|(
name|LIVE_LIVENESS
argument_list|,
name|ApplicationLivenessInformation
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

