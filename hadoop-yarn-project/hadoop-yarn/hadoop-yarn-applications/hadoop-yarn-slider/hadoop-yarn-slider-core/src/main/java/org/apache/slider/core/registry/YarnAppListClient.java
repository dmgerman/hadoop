begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderYarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|SliderInstanceDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|CoreFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Client code for interacting with a list of service instances.  * The initial logic just enumerates service instances in the YARN RM  */
end_comment

begin_class
DECL|class|YarnAppListClient
specifier|public
class|class
name|YarnAppListClient
block|{
DECL|field|yarnClient
specifier|private
specifier|final
name|SliderYarnClientImpl
name|yarnClient
decl_stmt|;
DECL|field|username
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnAppListClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|YarnAppListClient (SliderYarnClientImpl yarnClient, String username, Configuration conf)
specifier|public
name|YarnAppListClient
parameter_list|(
name|SliderYarnClientImpl
name|yarnClient
parameter_list|,
name|String
name|username
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|yarnClient
operator|!=
literal|null
argument_list|,
literal|"yarn client is null: is app inited?"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|username
operator|!=
literal|null
argument_list|,
literal|"username is null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|conf
operator|!=
literal|null
argument_list|,
literal|"conf parameter is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * find all live instances of a specific app -if there is more than one     * in the cluster, this returns them all. State should be running or earlier    * in the lifecycle    * @param appname application name    * @return the list of all matching application instances    */
DECL|method|findAllLiveInstances (String appname)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|findAllLiveInstances
parameter_list|(
name|String
name|appname
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|yarnClient
operator|.
name|findAllLiveInstances
argument_list|(
name|username
argument_list|,
name|appname
argument_list|)
return|;
block|}
comment|/**    * Find an instance of a application belong to the current user.    * @param appname application name    * @return the app report or null if none is found    * @throws YarnException YARN issues    * @throws IOException IO problems    */
DECL|method|findInstance (String appname)
specifier|public
name|ApplicationReport
name|findInstance
parameter_list|(
name|String
name|appname
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|findInstance
argument_list|(
name|appname
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Find an instance of a application belong to the current user in specific    * app states.    * @param appname application name    * @param appStates list of states in which application should be in    * @return the app report or null if none is found    * @throws YarnException YARN issues    * @throws IOException IO problems    */
DECL|method|findInstance (String appname, EnumSet<YarnApplicationState> appStates)
specifier|public
name|ApplicationReport
name|findInstance
parameter_list|(
name|String
name|appname
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
name|listInstances
argument_list|(
literal|null
argument_list|,
name|appname
argument_list|,
name|appStates
argument_list|)
decl_stmt|;
return|return
name|yarnClient
operator|.
name|findClusterInInstanceList
argument_list|(
name|instances
argument_list|,
name|appname
argument_list|)
return|;
block|}
comment|/**    * List instances belonging to the specific user    * @return a possibly empty list of AMs    */
DECL|method|listInstances ()
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|listInstances
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|listInstances
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * List instances belonging to a specific user    * @return a possibly empty list of AMs    * @param user user if not the default. null means default, "" means all users,     * otherwise it is the name of a user    */
DECL|method|listInstances (String user)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|listInstances
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|listInstances
argument_list|(
name|user
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * List all instances belonging to a specific user with a specific app name.    *    * @param user    *          user if not the default. null means default, "" means all users,    *          otherwise it is the name of a user    * @param appName    *          application name set as an application tag    * @return a possibly empty list of AMs    * @throws YarnException    * @throws IOException    */
DECL|method|listInstances (String user, String appName)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|listInstances
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|appName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|listInstances
argument_list|(
name|user
argument_list|,
name|appName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * List all instances belonging to a specific user, with a specific app name    * and in specific app states.    *    * @param user    *          user if not the default. null means default, "" means all users,    *          otherwise it is the name of a user    * @param appName    *          application name set as an application tag    * @param appStates    *          a set of application states within which the app should be in    * @return a possibly empty list of AMs    * @throws YarnException    * @throws IOException    */
DECL|method|listInstances (String user, String appName, EnumSet<YarnApplicationState> appStates)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|listInstances
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|appName
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"listInstances called with user: {}, appName: {}, appStates: {}"
argument_list|,
name|user
argument_list|,
name|appName
argument_list|,
name|appStates
argument_list|)
expr_stmt|;
name|String
name|listUser
init|=
name|user
operator|==
literal|null
condition|?
name|username
else|:
name|user
decl_stmt|;
return|return
name|yarnClient
operator|.
name|listDeployedInstances
argument_list|(
name|listUser
argument_list|,
name|appStates
argument_list|,
name|appName
argument_list|)
return|;
block|}
comment|/**    * Enumerate slider instances for the current user, and the    * most recent app report, where available.    * @param listOnlyInState boolean to indicate that the instances should    * only include those in a YARN state    *<code> minAppState&lt;= currentState&lt;= maxAppState</code>    *     * @param minAppState minimum application state to include in enumeration.    * @param maxAppState maximum application state to include    * @return a map of application instance name to description    * @throws IOException Any IO problem    * @throws YarnException YARN problems    */
DECL|method|enumSliderInstances ( boolean listOnlyInState, YarnApplicationState minAppState, YarnApplicationState maxAppState)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SliderInstanceDescription
argument_list|>
name|enumSliderInstances
parameter_list|(
name|boolean
name|listOnlyInState
parameter_list|,
name|YarnApplicationState
name|minAppState
parameter_list|,
name|YarnApplicationState
name|maxAppState
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|CoreFileSystem
name|sliderFileSystem
init|=
operator|new
name|CoreFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|listOnlyInState
operator|||
name|minAppState
operator|!=
literal|null
argument_list|,
literal|"null minAppState when listOnlyInState set"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|listOnlyInState
operator|||
name|maxAppState
operator|!=
literal|null
argument_list|,
literal|"null maxAppState when listOnlyInState set"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|listOnlyInState
condition|)
block|{
comment|// if there's not filtering, ask for the entire range of states
name|minAppState
operator|=
name|YarnApplicationState
operator|.
name|NEW
expr_stmt|;
name|maxAppState
operator|=
name|YarnApplicationState
operator|.
name|KILLED
expr_stmt|;
block|}
comment|// get the complete list of persistent instances
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|persistentInstances
init|=
name|sliderFileSystem
operator|.
name|listPersistentInstances
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SliderInstanceDescription
argument_list|>
name|descriptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SliderInstanceDescription
argument_list|>
argument_list|(
name|persistentInstances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|persistentInstances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// an empty listing is a success if no cluster was named
name|log
operator|.
name|debug
argument_list|(
literal|"No application instances found"
argument_list|)
expr_stmt|;
return|return
name|descriptions
return|;
block|}
comment|// enum those the RM knows about
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|rmInstances
init|=
name|listInstances
argument_list|()
decl_stmt|;
name|SliderUtils
operator|.
name|sortApplicationsByMostRecent
argument_list|(
name|rmInstances
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ApplicationReport
argument_list|>
name|reportMap
init|=
name|SliderUtils
operator|.
name|buildApplicationReportMap
argument_list|(
name|rmInstances
argument_list|,
name|minAppState
argument_list|,
name|maxAppState
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Persisted {} deployed {} filtered[{}-{}]& de-duped to {}"
argument_list|,
name|persistentInstances
operator|.
name|size
argument_list|()
argument_list|,
name|rmInstances
operator|.
name|size
argument_list|()
argument_list|,
name|minAppState
argument_list|,
name|maxAppState
argument_list|,
name|reportMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// at this point there is a list of all persistent instances, and
comment|// a (possibly filtered) list of application reports
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|entry
range|:
name|persistentInstances
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// loop through the persistent values
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// look up any report from the (possibly filtered) report set
name|ApplicationReport
name|report
init|=
name|reportMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|listOnlyInState
operator|||
name|report
operator|!=
literal|null
condition|)
block|{
comment|// if the enum wants to filter in state, only add it if there is
comment|// a report in that range. Otherwise: include all values
name|SliderInstanceDescription
name|sid
init|=
operator|new
name|SliderInstanceDescription
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|report
argument_list|)
decl_stmt|;
name|descriptions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|descriptions
return|;
block|}
block|}
end_class

end_unit

