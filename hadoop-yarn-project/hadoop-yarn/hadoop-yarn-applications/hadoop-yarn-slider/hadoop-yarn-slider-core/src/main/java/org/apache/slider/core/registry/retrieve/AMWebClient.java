begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.retrieve
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|retrieve
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|ClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|client
operator|.
name|urlconnection
operator|.
name|HttpURLConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|client
operator|.
name|urlconnection
operator|.
name|URLConnectionClientHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|rest
operator|.
name|BaseRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|restclient
operator|.
name|HttpVerb
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|restclient
operator|.
name|UgiJerseyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Class to retrieve artifacts from the AM's web site. This sets up  * the redirection and security logic properly  */
end_comment

begin_class
DECL|class|AMWebClient
specifier|public
class|class
name|AMWebClient
block|{
DECL|field|restClient
specifier|private
specifier|final
name|BaseRestClient
name|restClient
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMWebClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AMWebClient (Configuration conf)
specifier|public
name|AMWebClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|UgiJerseyBinding
name|binding
init|=
operator|new
name|UgiJerseyBinding
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|restClient
operator|=
operator|new
name|BaseRestClient
argument_list|(
name|binding
operator|.
name|createJerseyClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getUrlConnectionClientHandler ()
specifier|private
specifier|static
name|URLConnectionClientHandler
name|getUrlConnectionClientHandler
parameter_list|()
block|{
return|return
operator|new
name|URLConnectionClientHandler
argument_list|(
operator|new
name|HttpURLConnectionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|getHttpURLConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HttpURLConnection
operator|.
name|HTTP_MOVED_TEMP
condition|)
block|{
comment|// is a redirect - are we changing schemes?
name|String
name|redirectLocation
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
name|String
name|originalScheme
init|=
name|url
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|String
name|redirectScheme
init|=
name|URI
operator|.
name|create
argument_list|(
name|redirectLocation
argument_list|)
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|originalScheme
operator|.
name|equals
argument_list|(
name|redirectScheme
argument_list|)
condition|)
block|{
comment|// need to fake it out by doing redirect ourselves
name|log
operator|.
name|info
argument_list|(
literal|"Protocol change during redirect. Redirecting {} to URL {}"
argument_list|,
name|url
argument_list|,
name|redirectLocation
argument_list|)
expr_stmt|;
name|URL
name|redirectURL
init|=
operator|new
name|URL
argument_list|(
name|redirectLocation
argument_list|)
decl_stmt|;
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|redirectURL
operator|.
name|openConnection
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connection
operator|instanceof
name|HttpsURLConnection
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Attempting to configure HTTPS connection using client "
operator|+
literal|"configuration"
argument_list|)
expr_stmt|;
specifier|final
name|SSLFactory
name|factory
decl_stmt|;
specifier|final
name|SSLSocketFactory
name|sf
decl_stmt|;
specifier|final
name|HostnameVerifier
name|hv
decl_stmt|;
try|try
block|{
name|HttpsURLConnection
name|c
init|=
operator|(
name|HttpsURLConnection
operator|)
name|connection
decl_stmt|;
name|factory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|()
expr_stmt|;
name|sf
operator|=
name|factory
operator|.
name|createSSLSocketFactory
argument_list|()
expr_stmt|;
name|hv
operator|=
name|factory
operator|.
name|getHostnameVerifier
argument_list|()
expr_stmt|;
name|c
operator|.
name|setSSLSocketFactory
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHostnameVerifier
argument_list|(
name|hv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to configure HTTPS connection from "
operator|+
literal|"configuration.  Using JDK properties."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|connection
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|resource (String url)
specifier|public
name|WebResource
name|resource
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|restClient
operator|.
name|resource
argument_list|(
name|url
argument_list|)
return|;
block|}
DECL|method|getRestClient ()
specifier|public
name|BaseRestClient
name|getRestClient
parameter_list|()
block|{
return|return
name|restClient
return|;
block|}
comment|/**    * Execute the operation. Failures are raised as IOException subclasses    * @param method method to execute    * @param resource resource to work against    * @param c class to build    * @param<T> type expected    * @return an instance of the type T    * @throws IOException on any failure    */
DECL|method|exec (HttpVerb method, WebResource resource, Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|exec
parameter_list|(
name|HttpVerb
name|method
parameter_list|,
name|WebResource
name|resource
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restClient
operator|.
name|exec
argument_list|(
name|method
argument_list|,
name|resource
argument_list|,
name|c
argument_list|)
return|;
block|}
comment|/**    * Execute the operation. Failures are raised as IOException subclasses    * @param method method to execute    * @param resource resource to work against    * @param t type to work with    * @param<T> type expected    * @return an instance of the type T    * @throws IOException on any failure    */
DECL|method|exec (HttpVerb method, WebResource resource, GenericType<T> t)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|exec
parameter_list|(
name|HttpVerb
name|method
parameter_list|,
name|WebResource
name|resource
parameter_list|,
name|GenericType
argument_list|<
name|T
argument_list|>
name|t
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restClient
operator|.
name|exec
argument_list|(
name|method
argument_list|,
name|resource
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|/**    * Execute the  GET operation. Failures are raised as IOException subclasses    * @param resource resource to work against    * @param c class to build    * @param<T> type expected    * @return an instance of the type T    * @throws IOException on any failure    */
DECL|method|get (WebResource resource, Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|WebResource
name|resource
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restClient
operator|.
name|get
argument_list|(
name|resource
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
end_class

end_unit

