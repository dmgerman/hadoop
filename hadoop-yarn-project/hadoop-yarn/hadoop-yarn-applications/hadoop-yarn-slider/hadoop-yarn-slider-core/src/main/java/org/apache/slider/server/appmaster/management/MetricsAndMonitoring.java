begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|health
operator|.
name|HealthCheckRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Class for all metrics and monitoring  */
end_comment

begin_class
DECL|class|MetricsAndMonitoring
specifier|public
class|class
name|MetricsAndMonitoring
extends|extends
name|CompositeService
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricsAndMonitoring
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MetricsAndMonitoring (String name)
specifier|public
name|MetricsAndMonitoring
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|MetricsAndMonitoring ()
specifier|public
name|MetricsAndMonitoring
parameter_list|()
block|{
name|super
argument_list|(
literal|"MetricsAndMonitoring"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Singleton of metrics registry    */
DECL|field|metrics
specifier|final
name|MetricRegistry
name|metrics
init|=
operator|new
name|MetricRegistry
argument_list|()
decl_stmt|;
DECL|field|health
specifier|final
name|HealthCheckRegistry
name|health
init|=
operator|new
name|HealthCheckRegistry
argument_list|()
decl_stmt|;
DECL|field|meterAndCounterMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MeterAndCounter
argument_list|>
name|meterAndCounterMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|metricSets
specifier|private
specifier|final
name|List
argument_list|<
name|MetricSet
argument_list|>
name|metricSets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * List of recorded events    */
DECL|field|eventHistory
specifier|private
specifier|final
name|List
argument_list|<
name|RecordedEvent
argument_list|>
name|eventHistory
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
DECL|field|EVENT_LIMIT
specifier|public
specifier|static
specifier|final
name|int
name|EVENT_LIMIT
init|=
literal|1000
decl_stmt|;
DECL|method|getMetrics ()
specifier|public
name|MetricRegistry
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|method|getHealth ()
specifier|public
name|HealthCheckRegistry
name|getHealth
parameter_list|()
block|{
return|return
name|health
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|addService
argument_list|(
operator|new
name|MetricsBindingService
argument_list|(
literal|"MetricsBindingService"
argument_list|,
name|metrics
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
for|for
control|(
name|MetricSet
name|set
range|:
name|metricSets
control|)
block|{
name|unregister
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMeterAndCounter (String name)
specifier|public
name|MeterAndCounter
name|getMeterAndCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|meterAndCounterMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get or create the meter/counter pair    * @param name name of instance    * @return an instance    */
DECL|method|getOrCreateMeterAndCounter (String name)
specifier|public
name|MeterAndCounter
name|getOrCreateMeterAndCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MeterAndCounter
name|instance
init|=
name|meterAndCounterMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// check in a sync block
name|instance
operator|=
name|meterAndCounterMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|MeterAndCounter
argument_list|(
name|metrics
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|meterAndCounterMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|instance
return|;
block|}
comment|/**    * Get a specific meter and mark it. This will create and register it on demand.    * @param name name of meter/counter    */
DECL|method|markMeterAndCounter (String name)
specifier|public
name|void
name|markMeterAndCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MeterAndCounter
name|meter
init|=
name|getOrCreateMeterAndCounter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
comment|/**    * Given a {@link Metric}, registers it under the given name.    *    * @param name   the name of the metric    * @param metric the metric    * @param<T>    the type of the metric    * @return {@code metric}    * @throws IllegalArgumentException if the name is already registered    */
DECL|method|register (String name, T metric)
specifier|public
parameter_list|<
name|T
extends|extends
name|Metric
parameter_list|>
name|T
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|metric
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|metrics
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|metric
argument_list|)
return|;
block|}
DECL|method|register (Class<?> klass, T metric, String... names)
specifier|public
parameter_list|<
name|T
extends|extends
name|Metric
parameter_list|>
name|T
name|register
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|,
name|T
name|metric
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|register
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|klass
argument_list|,
name|names
argument_list|)
argument_list|,
name|metric
argument_list|)
return|;
block|}
comment|/**    * Add an event (synchronized)    * @param event event    */
DECL|method|noteEvent (RecordedEvent event)
specifier|public
specifier|synchronized
name|void
name|noteEvent
parameter_list|(
name|RecordedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventHistory
operator|.
name|size
argument_list|()
operator|>
name|EVENT_LIMIT
condition|)
block|{
name|eventHistory
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|eventHistory
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clone the event history; blocks for the duration of the copy operation.    * @return a new list    */
DECL|method|cloneEventHistory ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RecordedEvent
argument_list|>
name|cloneEventHistory
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|eventHistory
argument_list|)
return|;
block|}
comment|/**    * Add a metric set for registering and deregistration on service stop    * @param metricSet metric set    */
DECL|method|addMetricSet (MetricSet metricSet)
specifier|public
name|void
name|addMetricSet
parameter_list|(
name|MetricSet
name|metricSet
parameter_list|)
block|{
name|metricSets
operator|.
name|add
argument_list|(
name|metricSet
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|registerAll
argument_list|(
name|metricSet
argument_list|)
expr_stmt|;
block|}
comment|/**    * add a metric set, giving each entry a prefix    * @param prefix prefix (a trailing "." is automatically added)    * @param metricSet the metric set to register    */
DECL|method|addMetricSet (String prefix, MetricSet metricSet)
specifier|public
name|void
name|addMetricSet
parameter_list|(
name|String
name|prefix
parameter_list|,
name|MetricSet
name|metricSet
parameter_list|)
block|{
name|addMetricSet
argument_list|(
operator|new
name|PrefixedMetricsSet
argument_list|(
name|prefix
argument_list|,
name|metricSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unregister a metric set; robust    * @param metricSet metric set to unregister    */
DECL|method|unregister (MetricSet metricSet)
specifier|public
name|void
name|unregister
parameter_list|(
name|MetricSet
name|metricSet
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|metricSet
operator|.
name|getMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|metrics
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// log but continue
name|log
operator|.
name|info
argument_list|(
literal|"Exception when trying to unregister {}"
argument_list|,
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

