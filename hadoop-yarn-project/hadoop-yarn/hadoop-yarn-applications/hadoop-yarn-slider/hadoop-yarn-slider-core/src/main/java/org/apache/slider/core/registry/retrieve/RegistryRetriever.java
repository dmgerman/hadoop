begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.retrieve
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|retrieve
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|RegistryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|ClientRegistryBinder
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ExceptionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedExports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedExportsSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|info
operator|.
name|CustomRegistryConstants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Registry retriever.   * This hides the HTTP operations that take place to  * get the actual content  */
end_comment

begin_class
DECL|class|RegistryRetriever
specifier|public
class|class
name|RegistryRetriever
extends|extends
name|AMWebClient
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegistryRetriever
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|externalConfigurationURL
specifier|private
specifier|final
name|String
name|externalConfigurationURL
decl_stmt|;
DECL|field|internalConfigurationURL
specifier|private
specifier|final
name|String
name|internalConfigurationURL
decl_stmt|;
DECL|field|externalExportsURL
specifier|private
specifier|final
name|String
name|externalExportsURL
decl_stmt|;
DECL|field|internalExportsURL
specifier|private
specifier|final
name|String
name|internalExportsURL
decl_stmt|;
comment|/**    * Retrieve from a service by locating the    * exported {@link CustomRegistryConstants.PUBLISHER_CONFIGURATIONS_API}    * and working off it.    *    * @param conf configuration to work from    * @param record service record    * @throws RegistryIOException the address type of the endpoint does    * not match that expected (i.e. not a list of URLs), missing endpoint...    */
DECL|method|RegistryRetriever (Configuration conf, ServiceRecord record)
specifier|public
name|RegistryRetriever
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|RegistryIOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|externalConfigurationURL
operator|=
name|lookupRestAPI
argument_list|(
name|record
argument_list|,
name|PUBLISHER_CONFIGURATIONS_API
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|internalConfigurationURL
operator|=
name|lookupRestAPI
argument_list|(
name|record
argument_list|,
name|PUBLISHER_CONFIGURATIONS_API
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|externalExportsURL
operator|=
name|lookupRestAPI
argument_list|(
name|record
argument_list|,
name|PUBLISHER_EXPORTS_API
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|internalExportsURL
operator|=
name|lookupRestAPI
argument_list|(
name|record
argument_list|,
name|PUBLISHER_EXPORTS_API
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does a bonded registry retriever have a configuration?    * @param external flag to indicate that it is the external entries to fetch    * @return true if there is a URL to the configurations defined    */
DECL|method|hasConfigurations (boolean external)
specifier|public
name|boolean
name|hasConfigurations
parameter_list|(
name|boolean
name|external
parameter_list|)
block|{
return|return
operator|!
name|Strings
operator|.
name|isStringEmpty
argument_list|(
name|external
condition|?
name|externalConfigurationURL
else|:
name|internalConfigurationURL
argument_list|)
return|;
block|}
comment|/**    * Get the configurations of the registry    * @param external flag to indicate that it is the external entries to fetch    * @return the configuration sets    */
DECL|method|getConfigurations (boolean external)
specifier|public
name|PublishedConfigSet
name|getConfigurations
parameter_list|(
name|boolean
name|external
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|String
name|confURL
init|=
name|getConfigurationURL
argument_list|(
name|external
argument_list|)
decl_stmt|;
name|WebResource
name|webResource
init|=
name|resource
argument_list|(
name|confURL
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|webResource
argument_list|,
name|PublishedConfigSet
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getConfigurationURL (boolean external)
specifier|protected
name|String
name|getConfigurationURL
parameter_list|(
name|boolean
name|external
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|String
name|confURL
init|=
name|external
condition|?
name|externalConfigurationURL
else|:
name|internalConfigurationURL
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isStringEmpty
argument_list|(
name|confURL
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No configuration URL"
argument_list|)
throw|;
block|}
return|return
name|confURL
return|;
block|}
DECL|method|getExportURL (boolean external)
specifier|protected
name|String
name|getExportURL
parameter_list|(
name|boolean
name|external
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|String
name|confURL
init|=
name|external
condition|?
name|externalExportsURL
else|:
name|internalExportsURL
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isStringEmpty
argument_list|(
name|confURL
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No configuration URL"
argument_list|)
throw|;
block|}
return|return
name|confURL
return|;
block|}
comment|/**    * Get the configurations of the registry    * @param external flag to indicate that it is the external entries to fetch    * @return the configuration sets    */
DECL|method|getExports (boolean external)
specifier|public
name|PublishedExportsSet
name|getExports
parameter_list|(
name|boolean
name|external
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|String
name|exportsUrl
init|=
name|getExportURL
argument_list|(
name|external
argument_list|)
decl_stmt|;
name|WebResource
name|webResource
init|=
name|resource
argument_list|(
name|exportsUrl
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|webResource
argument_list|,
name|PublishedExportsSet
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Get a complete configuration, with all values    * @param configSet config set to ask for    * @param name name of the configuration    * @param external flag to indicate that it is an external configuration    * @return the retrieved config    * @throws IOException IO problems    */
DECL|method|retrieveConfiguration (PublishedConfigSet configSet, String name, boolean external)
specifier|public
name|PublishedConfiguration
name|retrieveConfiguration
parameter_list|(
name|PublishedConfigSet
name|configSet
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|external
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|confURL
init|=
name|getConfigurationURL
argument_list|(
name|external
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configSet
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Unknown configuration "
operator|+
name|name
argument_list|)
throw|;
block|}
name|confURL
operator|=
name|SliderUtils
operator|.
name|appendToURL
argument_list|(
name|confURL
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|WebResource
name|webResource
init|=
name|resource
argument_list|(
name|confURL
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|webResource
argument_list|,
name|PublishedConfiguration
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Get a complete export, with all values    * @param exportSet    * @param name name of the configuration    * @param external flag to indicate that it is an external configuration    * @return the retrieved config    * @throws IOException IO problems    */
DECL|method|retrieveExports (PublishedExportsSet exportSet, String name, boolean external)
specifier|public
name|PublishedExports
name|retrieveExports
parameter_list|(
name|PublishedExportsSet
name|exportSet
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|external
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exportSet
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Unknown export "
operator|+
name|name
argument_list|)
throw|;
block|}
name|String
name|exportsURL
init|=
name|getExportURL
argument_list|(
name|external
argument_list|)
decl_stmt|;
name|exportsURL
operator|=
name|SliderUtils
operator|.
name|appendToURL
argument_list|(
name|exportsURL
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|resource
argument_list|(
name|exportsURL
argument_list|)
argument_list|,
name|PublishedExports
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RegistryRetriever{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"externalConfigurationURL='"
argument_list|)
operator|.
name|append
argument_list|(
name|externalConfigurationURL
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", internalConfigurationURL='"
argument_list|)
operator|.
name|append
argument_list|(
name|internalConfigurationURL
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", externalExportsURL='"
argument_list|)
operator|.
name|append
argument_list|(
name|externalExportsURL
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", internalExportsURL='"
argument_list|)
operator|.
name|append
argument_list|(
name|internalExportsURL
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

