begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AbstractSecurityStoreGenerator
specifier|public
specifier|abstract
class|class
name|AbstractSecurityStoreGenerator
implements|implements
name|SecurityStoreGenerator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractSecurityStoreGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|certificateMgr
specifier|protected
name|CertificateManager
name|certificateMgr
decl_stmt|;
DECL|method|AbstractSecurityStoreGenerator (CertificateManager certificateMgr)
specifier|public
name|AbstractSecurityStoreGenerator
parameter_list|(
name|CertificateManager
name|certificateMgr
parameter_list|)
block|{
name|this
operator|.
name|certificateMgr
operator|=
name|certificateMgr
expr_stmt|;
block|}
DECL|method|getStorePassword (Map<String, List<String>> credentials, MapOperations compOps, String role)
specifier|protected
name|String
name|getStorePassword
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|credentials
parameter_list|,
name|MapOperations
name|compOps
parameter_list|,
name|String
name|role
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
name|String
name|password
init|=
name|getPassword
argument_list|(
name|compOps
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
comment|// need to leverage credential provider
name|String
name|alias
init|=
name|getAlias
argument_list|(
name|compOps
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Alias {} found for role {}"
argument_list|,
name|alias
argument_list|,
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"No store password or credential provider "
operator|+
literal|"alias found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentials
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Credentials can not be retrieved for store generation since "
operator|+
literal|"no CP paths are configured"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cred
range|:
name|credentials
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|provider
init|=
name|cred
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured provider {}"
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|CredentialProvider
name|cp
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|c
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aliases: {}"
argument_list|,
name|cp
operator|.
name|getAliases
argument_list|()
argument_list|)
expr_stmt|;
name|char
index|[]
name|credential
init|=
name|c
operator|.
name|getPassword
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|credential
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Credential found for role {}"
argument_list|,
name|role
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|credential
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No store credential found for alias {}.  "
operator|+
literal|"Generation of store for {} is not possible."
argument_list|,
name|alias
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|password
return|;
block|}
annotation|@
name|Override
DECL|method|isStoreRequested (MapOperations compOps)
specifier|public
name|boolean
name|isStoreRequested
parameter_list|(
name|MapOperations
name|compOps
parameter_list|)
block|{
return|return
name|compOps
operator|.
name|getOptionBool
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getPassword (MapOperations compOps)
specifier|abstract
name|String
name|getPassword
parameter_list|(
name|MapOperations
name|compOps
parameter_list|)
function_decl|;
DECL|method|getAlias (MapOperations compOps)
specifier|abstract
name|String
name|getAlias
parameter_list|(
name|MapOperations
name|compOps
parameter_list|)
function_decl|;
block|}
end_class

end_unit

