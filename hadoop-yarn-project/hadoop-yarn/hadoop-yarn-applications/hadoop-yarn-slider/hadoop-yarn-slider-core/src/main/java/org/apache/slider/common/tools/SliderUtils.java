begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|Slider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|SliderActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|ClasspathConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|AgentKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|utility
operator|.
name|PatternValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|ForkedProcessService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
operator|.
name|COMPONENT_SEPARATOR
import|;
end_import

begin_comment
comment|/**  * These are slider-specific Util methods  */
end_comment

begin_class
DECL|class|SliderUtils
specifier|public
specifier|final
class|class
name|SliderUtils
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Atomic bool to track whether or not process security has already been    * turned on (prevents re-entrancy)    */
DECL|field|processSecurityAlreadyInitialized
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|processSecurityAlreadyInitialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|JAVA_SECURITY_KRB5_REALM
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_SECURITY_KRB5_REALM
init|=
literal|"java.security.krb5.realm"
decl_stmt|;
DECL|field|JAVA_SECURITY_KRB5_KDC
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_SECURITY_KRB5_KDC
init|=
literal|"java.security.krb5.kdc"
decl_stmt|;
comment|/**    * Winutils    */
DECL|field|WINUTILS
specifier|public
specifier|static
specifier|final
name|String
name|WINUTILS
init|=
literal|"WINUTILS.EXE"
decl_stmt|;
comment|/**    * name of openssl program    */
DECL|field|OPENSSL
specifier|public
specifier|static
specifier|final
name|String
name|OPENSSL
init|=
literal|"openssl"
decl_stmt|;
comment|/**    * name of python program    */
DECL|field|PYTHON
specifier|public
specifier|static
specifier|final
name|String
name|PYTHON
init|=
literal|"python"
decl_stmt|;
comment|/**    * type of docker standalone application    */
DECL|field|DOCKER
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER
init|=
literal|"docker"
decl_stmt|;
comment|/**    * type of docker on yarn application    */
DECL|field|DOCKER_YARN
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER_YARN
init|=
literal|"yarn_docker"
decl_stmt|;
DECL|field|NODE_LIST_LIMIT
specifier|public
specifier|static
specifier|final
name|int
name|NODE_LIST_LIMIT
init|=
literal|10
decl_stmt|;
DECL|method|SliderUtils ()
specifier|private
name|SliderUtils
parameter_list|()
block|{   }
comment|/**    * Implementation of set-ness, groovy definition of true/false for a string    * @param s string    * @return true iff the string is neither null nor empty    */
DECL|method|isUnset (String s)
specifier|public
specifier|static
name|boolean
name|isUnset
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|isSet (String s)
specifier|public
specifier|static
name|boolean
name|isSet
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|!
name|isUnset
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|isEmpty (Collection l)
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|Collection
name|l
parameter_list|)
block|{
return|return
name|l
operator|==
literal|null
operator|||
name|l
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Probe for a collection existing and not being empty    * @param l collection    * @return true if the reference is valid and it contains entries    */
DECL|method|isNotEmpty (Collection l)
specifier|public
specifier|static
name|boolean
name|isNotEmpty
parameter_list|(
name|Collection
name|l
parameter_list|)
block|{
return|return
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Probe for a map existing and not being empty    * @param m map    * @return true if the reference is valid and it contains map entries    */
DECL|method|isNotEmpty (Map m)
specifier|public
specifier|static
name|boolean
name|isNotEmpty
parameter_list|(
name|Map
name|m
parameter_list|)
block|{
return|return
name|m
operator|!=
literal|null
operator|&&
operator|!
name|m
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/*    * Validates whether num is an integer    * @param num    * @param msg the message to be shown in exception    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ResultOfMethodCallIgnored"
argument_list|)
DECL|method|validateNumber (String num, String msg)
specifier|private
specifier|static
name|void
name|validateNumber
parameter_list|(
name|String
name|num
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|BadConfigException
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
name|msg
operator|+
name|num
argument_list|)
throw|;
block|}
block|}
comment|/*    * Translates the trailing JVM heapsize unit: g, G, m, M    * This assumes designated unit of 'm'    * @param heapsize    * @return heapsize in MB    */
DECL|method|translateTrailingHeapUnit (String heapsize)
specifier|public
specifier|static
name|String
name|translateTrailingHeapUnit
parameter_list|(
name|String
name|heapsize
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|errMsg
init|=
literal|"Bad heapsize: "
decl_stmt|;
if|if
condition|(
name|heapsize
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
operator|||
name|heapsize
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
condition|)
block|{
name|String
name|num
init|=
name|heapsize
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|heapsize
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|validateNumber
argument_list|(
name|num
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
return|return
name|num
return|;
block|}
if|if
condition|(
name|heapsize
operator|.
name|endsWith
argument_list|(
literal|"g"
argument_list|)
operator|||
name|heapsize
operator|.
name|endsWith
argument_list|(
literal|"G"
argument_list|)
condition|)
block|{
name|String
name|num
init|=
name|heapsize
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|heapsize
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"000"
decl_stmt|;
name|validateNumber
argument_list|(
name|num
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
return|return
name|num
return|;
block|}
comment|// check if specified heap size is a number
name|validateNumber
argument_list|(
name|heapsize
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
return|return
name|heapsize
return|;
block|}
comment|/**    * recursive directory delete    * @param dir dir to delete    * @throws IOException on any problem    */
DECL|method|deleteDirectoryTree (File dir)
specifier|public
specifier|static
name|void
name|deleteDirectoryTree
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cleaning up {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|//delete the children
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"listfiles() failed for "
operator|+
name|dir
argument_list|)
throw|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deleting {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to delete "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to delete "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|//not found, do nothing
name|log
operator|.
name|debug
argument_list|(
literal|"No output dir yet"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find a containing JAR    * @param clazz class to find    * @return the file    * @throws IOException any IO problem, including the class not having a    * classloader    * @throws FileNotFoundException if the class did not resolve to a file    */
DECL|method|findContainingJarOrFail (Class clazz)
specifier|public
specifier|static
name|File
name|findContainingJarOrFail
parameter_list|(
name|Class
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|localFile
init|=
name|SliderUtils
operator|.
name|findContainingJar
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localFile
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Could not find JAR containing "
operator|+
name|clazz
argument_list|)
throw|;
block|}
return|return
name|localFile
return|;
block|}
comment|/**    * Find a containing JAR    * @param my_class class to find    * @return the file or null if it is not found    * @throws IOException any IO problem, including the class not having a    * classloader    */
DECL|method|findContainingJar (Class my_class)
specifier|public
specifier|static
name|File
name|findContainingJar
parameter_list|(
name|Class
name|my_class
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|my_class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Class "
operator|+
name|my_class
operator|+
literal|" does not have a classloader!"
argument_list|)
throw|;
block|}
name|String
name|class_file
init|=
name|my_class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|urlEnumeration
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|class_file
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|urlEnumeration
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|URL
name|url
init|=
name|urlEnumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|toReturn
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|toReturn
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|toReturn
operator|=
name|toReturn
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// URLDecoder is a misnamed class, since it actually decodes
comment|// x-www-form-urlencoded MIME type rather than actual
comment|// URL encoding (which the file path has). Therefore it would
comment|// decode +s to ' 's which is incorrect (spaces are actually
comment|// either unencoded or encoded as "%20"). Replace +s first, so
comment|// that they are kept sacred during the decoding process.
name|toReturn
operator|=
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"%2B"
argument_list|)
expr_stmt|;
name|toReturn
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|toReturn
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|jarFilePath
init|=
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"!.*$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|jarFilePath
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"could not locate JAR containing {} URL={}"
argument_list|,
name|my_class
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkPort (String hostname, int port, int connectTimeout)
specifier|public
specifier|static
name|void
name|checkPort
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|connectTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|checkPort
argument_list|(
name|hostname
argument_list|,
name|addr
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SocketOpenedButNotSafelyClosed"
argument_list|)
DECL|method|checkPort (String name, InetSocketAddress address, int connectTimeout)
specifier|public
specifier|static
name|void
name|checkPort
parameter_list|(
name|String
name|name
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|int
name|connectTimeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|()
init|)
block|{
name|socket
operator|.
name|connect
argument_list|(
name|address
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to connect to "
operator|+
name|name
operator|+
literal|" at "
operator|+
name|address
operator|+
literal|" after "
operator|+
name|connectTimeout
operator|+
literal|"milliseconds"
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkURL (String name, String url, int timeout)
specifier|public
specifier|static
name|void
name|checkURL
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|checkPort
argument_list|(
name|name
argument_list|,
name|address
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * A required file    * @param role role of the file (for errors)    * @param filename the filename    * @throws ExitUtil.ExitException if the file is missing    * @return the file    */
DECL|method|requiredFile (String filename, String role)
specifier|public
specifier|static
name|File
name|requiredFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|role
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ExitUtil
operator|.
name|ExitException
argument_list|(
operator|-
literal|1
argument_list|,
name|role
operator|+
literal|" file not defined"
argument_list|)
throw|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ExitUtil
operator|.
name|ExitException
argument_list|(
operator|-
literal|1
argument_list|,
name|role
operator|+
literal|" file not found: "
operator|+
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
DECL|field|clusternamePattern
specifier|private
specifier|static
specifier|final
name|PatternValidator
name|clusternamePattern
init|=
operator|new
name|PatternValidator
argument_list|(
literal|"[a-z][a-z0-9_-]*"
argument_list|)
decl_stmt|;
comment|/**    * Normalize a cluster name then verify that it is valid    * @param name proposed cluster name    * @return true iff it is valid    */
DECL|method|isClusternameValid (String name)
specifier|public
specifier|static
name|boolean
name|isClusternameValid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|!=
literal|null
operator|&&
name|clusternamePattern
operator|.
name|matches
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|oldIsClusternameValid (String name)
specifier|public
specifier|static
name|boolean
name|oldIsClusternameValid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|first
init|=
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
operator|(
name|Character
operator|.
name|getType
argument_list|(
name|first
argument_list|)
operator|&
name|Character
operator|.
name|LOWERCASE_LETTER
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|elt
init|=
operator|(
name|int
operator|)
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|Character
operator|.
name|getType
argument_list|(
name|elt
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
operator|(
name|t
operator|&
name|Character
operator|.
name|LOWERCASE_LETTER
operator|)
operator|&&
literal|0
operator|==
operator|(
name|t
operator|&
name|Character
operator|.
name|DECIMAL_DIGIT_NUMBER
operator|)
operator|&&
name|elt
operator|!=
literal|'-'
operator|&&
name|elt
operator|!=
literal|'_'
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|elt
argument_list|)
operator|&&
name|elt
operator|!=
literal|'-'
operator|&&
name|elt
operator|!=
literal|'_'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Copy a directory to a new FS -both paths must be qualified. If    * a directory needs to be created, supplied permissions can override    * the default values. Existing directories are not touched    * @param conf conf file    * @param srcDirPath src dir    * @param destDirPath dest dir    * @param permission permission for the dest directory; null means "default"    * @return # of files copies    */
DECL|method|copyDirectory (Configuration conf, Path srcDirPath, Path destDirPath, FsPermission permission)
specifier|public
specifier|static
name|int
name|copyDirectory
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|srcDirPath
parameter_list|,
name|Path
name|destDirPath
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
name|FileSystem
name|srcFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|srcDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|destFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|destDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//list all paths in the src.
if|if
condition|(
operator|!
name|srcFS
operator|.
name|exists
argument_list|(
name|srcDirPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Source dir not found "
operator|+
name|srcDirPath
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|srcFS
operator|.
name|isDirectory
argument_list|(
name|srcDirPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Source dir not a directory "
operator|+
name|srcDirPath
argument_list|)
throw|;
block|}
name|GlobFilter
name|dotFilter
init|=
operator|new
name|GlobFilter
argument_list|(
literal|"[!.]*"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|entries
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|srcDirPath
argument_list|,
name|dotFilter
argument_list|)
decl_stmt|;
name|int
name|srcFileCount
init|=
name|entries
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|srcFileCount
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|destFS
operator|.
name|exists
argument_list|(
name|destDirPath
argument_list|)
condition|)
block|{
operator|new
name|SliderFileSystem
argument_list|(
name|destFS
argument_list|,
name|conf
argument_list|)
operator|.
name|createWithPermissions
argument_list|(
name|destDirPath
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
name|Path
index|[]
name|sourcePaths
init|=
operator|new
name|Path
index|[
name|srcFileCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcFileCount
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
name|e
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|Path
name|srcFile
init|=
name|e
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcFS
operator|.
name|isDirectory
argument_list|(
name|srcFile
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration dir "
operator|+
name|srcDirPath
operator|+
literal|" contains a directory "
operator|+
name|srcFile
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"copying src conf file {}"
argument_list|,
name|srcFile
argument_list|)
expr_stmt|;
name|sourcePaths
index|[
name|i
index|]
operator|=
name|srcFile
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Copying {} files from {} to dest {}"
argument_list|,
name|srcFileCount
argument_list|,
name|srcDirPath
argument_list|,
name|destDirPath
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFS
argument_list|,
name|sourcePaths
argument_list|,
name|destFS
argument_list|,
name|destDirPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|srcFileCount
return|;
block|}
comment|/**    * Copy a file to a new FS -both paths must be qualified.    * @param conf conf file    * @param srcFile src file    * @param destFile dest file    */
DECL|method|copy (Configuration conf, Path srcFile, Path destFile)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|srcFile
parameter_list|,
name|Path
name|destFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
name|FileSystem
name|srcFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|srcFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//list all paths in the src.
if|if
condition|(
operator|!
name|srcFS
operator|.
name|exists
argument_list|(
name|srcFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Source file not found "
operator|+
name|srcFile
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|srcFS
operator|.
name|isFile
argument_list|(
name|srcFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Source file not a file "
operator|+
name|srcFile
argument_list|)
throw|;
block|}
name|FileSystem
name|destFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|destFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|destFS
operator|.
name|exists
argument_list|(
name|destFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Dest file already exists "
operator|+
name|destFile
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFS
argument_list|,
name|srcFile
argument_list|,
name|destFS
argument_list|,
name|destFile
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|stringify (Throwable t)
specifier|public
specifier|static
name|String
name|stringify
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|sw
operator|.
name|append
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a configuration with Slider-specific tuning.    * This is done rather than doing custom configs.    * @return the config    */
DECL|method|createConfiguration ()
specifier|public
specifier|static
name|YarnConfiguration
name|createConfiguration
parameter_list|()
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|patchConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Take an existing conf and patch it for Slider's needs. Useful    * in Service.init& RunService methods where a shared config is being    * passed in    * @param conf configuration    * @return the patched configuration    */
DECL|method|patchConfiguration (Configuration conf)
specifier|public
specifier|static
name|Configuration
name|patchConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|//if the fallback option is NOT set, enable it.
comment|//if it is explicitly set to anything -leave alone
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|SliderXmlConfKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Take a collection, return a list containing the string value of every    * element in the collection.    * @param c collection    * @return a stringified list    */
DECL|method|collectionToStringList (Collection c)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|collectionToStringList
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|c
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * Join an collection of objects with a separator that appears after every    * instance in the list -including at the end    * @param collection collection to call toString() on each element    * @param separator separator string    * @return the joined entries    */
DECL|method|join (Collection collection, String separator)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|collection
argument_list|,
name|separator
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Join an collection of objects with a separator that appears after every    * instance in the list -optionally at the end    * @param collection collection to call toString() on each element    * @param separator separator string    * @param trailing add a trailing entry or not    * @return the joined entries    */
DECL|method|join (Collection collection, String separator, boolean trailing)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|separator
parameter_list|,
name|boolean
name|trailing
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// fast return on empty collection
if|if
condition|(
name|collection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|trailing
condition|?
name|separator
else|:
literal|""
return|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|separator
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|b
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|(
name|trailing
operator|||
name|s
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|s
else|:
operator|(
name|b
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|()
operator|-
name|length
argument_list|)
operator|)
return|;
block|}
comment|/**    * Join an array of strings with a separator that appears after every    * instance in the list -including at the end    * @param collection strings    * @param separator separator string    * @return the joined entries    */
DECL|method|join (String[] collection, String separator)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|collection
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|collection
argument_list|,
name|separator
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Join an array of strings with a separator that appears after every    * instance in the list -optionally at the end    * @param collection strings    * @param separator separator string    * @param trailing add a trailing entry or not    * @return the joined entries    */
DECL|method|join (String[] collection, String separator, boolean trailing)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|collection
parameter_list|,
name|String
name|separator
parameter_list|,
name|boolean
name|trailing
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|collection
argument_list|)
argument_list|,
name|separator
argument_list|,
name|trailing
argument_list|)
return|;
block|}
comment|/**    * Join an array of strings with a separator that appears after every    * instance in the list -except at the end    * @param collection strings    * @param separator separator string    * @return the list    */
DECL|method|joinWithInnerSeparator (String separator, Object... collection)
specifier|public
specifier|static
name|String
name|joinWithInnerSeparator
parameter_list|(
name|String
name|separator
parameter_list|,
name|Object
modifier|...
name|collection
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Resolve a mandatory environment variable    * @param key env var    * @return the resolved value    * @throws BadClusterStateException    */
DECL|method|mandatoryEnvVariable (String key)
specifier|public
specifier|static
name|String
name|mandatoryEnvVariable
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|BadClusterStateException
block|{
name|String
name|v
init|=
name|System
operator|.
name|getenv
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
literal|"Missing Environment variable "
operator|+
name|key
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
DECL|method|appReportToString (ApplicationReport r, String separator)
specifier|public
specifier|static
name|String
name|appReportToString
parameter_list|(
name|ApplicationReport
name|r
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|512
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"application "
argument_list|)
operator|.
name|append
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|r
operator|.
name|getApplicationType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|r
operator|.
name|getApplicationTags
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|tag
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
name|DateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm"
argument_list|)
decl_stmt|;
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"state: "
argument_list|)
operator|.
name|append
argument_list|(
name|r
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|trackingUrl
init|=
name|r
operator|.
name|getTrackingUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSet
argument_list|(
name|trackingUrl
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
literal|"URL: "
argument_list|)
operator|.
name|append
argument_list|(
name|trackingUrl
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
literal|"Started: "
argument_list|)
operator|.
name|append
argument_list|(
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|r
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|finishTime
init|=
name|r
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|finishTime
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
literal|"Finished: "
argument_list|)
operator|.
name|append
argument_list|(
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|finishTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|rpcHost
init|=
name|r
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|rpcHost
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
literal|"RPC :"
argument_list|)
operator|.
name|append
argument_list|(
name|rpcHost
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|r
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|diagnostics
init|=
name|r
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|diagnostics
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
literal|"Diagnostics :"
argument_list|)
operator|.
name|append
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert the instance details of an application to a string    * @param name instance name    * @param report the application report    * @param verbose verbose output    * @return a string    */
DECL|method|instanceDetailsToString (String name, ApplicationReport report, List<ContainerInformation> containers, String version, Set<String> components, boolean verbose)
specifier|public
specifier|static
name|String
name|instanceDetailsToString
parameter_list|(
name|String
name|name
parameter_list|,
name|ApplicationReport
name|report
parameter_list|,
name|List
argument_list|<
name|ContainerInformation
argument_list|>
name|containers
parameter_list|,
name|String
name|version
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
comment|// format strings
name|String
name|staticf
init|=
literal|"%-30s"
decl_stmt|;
name|String
name|reportedf
init|=
name|staticf
operator|+
literal|"  %10s  %-42s"
decl_stmt|;
name|String
name|livef
init|=
name|reportedf
operator|+
literal|"  %s"
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|200
argument_list|)
decl_stmt|;
if|if
condition|(
name|report
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|staticf
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// there's a report to look at
name|String
name|appId
init|=
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|state
init|=
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
condition|)
block|{
comment|// running: there's a URL
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|livef
argument_list|,
name|name
argument_list|,
name|state
argument_list|,
name|appId
argument_list|,
name|report
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|reportedf
argument_list|,
name|name
argument_list|,
name|state
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SliderUtils
operator|.
name|appReportToString
argument_list|(
name|report
argument_list|,
literal|"\n  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containers
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SliderUtils
operator|.
name|containersToString
argument_list|(
name|containers
argument_list|,
name|version
argument_list|,
name|components
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|containersToString ( List<ContainerInformation> containers, String version, Set<String> components)
specifier|public
specifier|static
name|String
name|containersToString
parameter_list|(
name|List
argument_list|<
name|ContainerInformation
argument_list|>
name|containers
parameter_list|,
name|String
name|version
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|components
parameter_list|)
block|{
name|String
name|containerf
init|=
literal|"  %-28s  %30s  %45s  %s%n"
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|512
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Containers:%n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  %-28s  %30s  %45s  %s%n"
argument_list|,
literal|"Component Name"
argument_list|,
literal|"App Version"
argument_list|,
literal|"Container Id"
argument_list|,
literal|"Container Info/Logs"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerInformation
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|filter
argument_list|(
name|container
operator|.
name|appVersion
argument_list|,
name|version
argument_list|)
operator|||
name|filter
argument_list|(
name|container
operator|.
name|component
argument_list|,
name|components
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|containerf
argument_list|,
name|container
operator|.
name|component
argument_list|,
name|container
operator|.
name|appVersion
argument_list|,
name|container
operator|.
name|containerId
argument_list|,
name|container
operator|.
name|host
operator|+
name|SliderKeys
operator|.
name|YARN_CONTAINER_PATH
operator|+
name|container
operator|.
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Filter a string value given a single filter    *     * @param value    *          the string value to check    * @param filter    *          a single string filter    * @return return true if value should be trapped, false if it should be let    *         through    */
DECL|method|filter (String value, String filter)
specifier|public
specifier|static
name|boolean
name|filter
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
operator|!
operator|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|filter
argument_list|)
operator|||
name|filter
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
comment|/**    * Filter a string value given a set of filters    *     * @param value    *          the string value to check    * @param filters    *          a set of string filters    * @return return true if value should be trapped, false if it should be let    *         through    */
DECL|method|filter (String value, Set<String> filters)
specifier|public
specifier|static
name|boolean
name|filter
parameter_list|(
name|String
name|value
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|filters
parameter_list|)
block|{
return|return
operator|!
operator|(
name|filters
operator|.
name|isEmpty
argument_list|()
operator|||
name|filters
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
comment|/**    * Sorts the given list of application reports, most recently started     * or finished instance first.    *    * @param instances list of instances    */
DECL|method|sortApplicationsByMostRecent (List<ApplicationReport> instances)
specifier|public
specifier|static
name|void
name|sortApplicationsByMostRecent
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|instances
argument_list|,
operator|new
name|MostRecentlyStartedOrFinishedFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given list of application reports    * Finished instances are ordered by finished time and running/accepted instances are    * ordered by start time    * Finally Instance are order by finished instances coming after running instances    *    * @param instances list of instances    */
DECL|method|sortApplicationReport (List<ApplicationReport> instances)
specifier|public
specifier|static
name|void
name|sortApplicationReport
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
parameter_list|)
block|{
if|if
condition|(
name|instances
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|nonLiveInstance
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|instances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|liveInstance
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|instances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|instances
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
operator|||
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
condition|)
block|{
name|liveInstance
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonLiveInstance
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|liveInstance
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|liveInstance
argument_list|,
operator|new
name|MostRecentlyStartedAppFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonLiveInstance
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nonLiveInstance
argument_list|,
operator|new
name|MostRecentAppFinishFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|instances
operator|.
name|clear
argument_list|()
expr_stmt|;
name|instances
operator|.
name|addAll
argument_list|(
name|liveInstance
argument_list|)
expr_stmt|;
name|instances
operator|.
name|addAll
argument_list|(
name|nonLiveInstance
argument_list|)
expr_stmt|;
block|}
comment|/**    * Built a (sorted) map of application reports, mapped to the instance name    * The list is sorted, and the addition process does not add a report    * if there is already one that exists. If the list handed in is sorted,    * those that are listed first form the entries returned    * @param instances list of intances    * @param minState minimum YARN state to be included    * @param maxState maximum YARN state to be included    * @return all reports in the list whose state&gt;= minimum and&lt;= maximum    */
DECL|method|buildApplicationReportMap ( List<ApplicationReport> instances, YarnApplicationState minState, YarnApplicationState maxState)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ApplicationReport
argument_list|>
name|buildApplicationReportMap
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
parameter_list|,
name|YarnApplicationState
name|minState
parameter_list|,
name|YarnApplicationState
name|maxState
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ApplicationReport
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|instances
control|)
block|{
name|YarnApplicationState
name|state
init|=
name|report
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|ordinal
argument_list|()
operator|>=
name|minState
operator|.
name|ordinal
argument_list|()
operator|&&
name|state
operator|.
name|ordinal
argument_list|()
operator|<=
name|maxState
operator|.
name|ordinal
argument_list|()
operator|&&
name|map
operator|.
name|get
argument_list|(
name|report
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|report
operator|.
name|getName
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**    * Take a map and produce a sorted equivalent    * @param source source map    * @return a map whose iterator returns the string-sorted ordering of entries    */
DECL|method|sortedMap (Map<String, String> source)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|source
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
comment|/**    * Convert a properties instance to a string map.    * @param properties source property object    * @return a string map    */
DECL|method|toMap (Properties properties)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toMap
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|out
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Merge in one map to another -all entries in the second map are    * merged into the first -overwriting any duplicate keys.    * @param first first map -the updated one.    * @param second the map that is merged in    * @return the first map    */
DECL|method|mergeMap (Map<String, String> first, Map<String, String> second)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mergeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|second
parameter_list|)
block|{
name|first
operator|.
name|putAll
argument_list|(
name|second
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
comment|/**    * Merge a set of entries into a map. This will take the entryset of    * a map, or a Hadoop collection itself    * @param dest destination    * @param entries entries    * @return dest -with the entries merged in    */
DECL|method|mergeEntries (Map<String, String> dest, Iterable<Map.Entry<String, String>> entries)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mergeEntries
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dest
parameter_list|,
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|dest
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
comment|/**    * Generic map merge logic    * @param first first map    * @param second second map    * @param<T1> key type    * @param<T2> value type    * @return 'first' merged with the second    */
DECL|method|mergeMaps (Map<T1, T2> first, Map<T1, T2> second)
specifier|public
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|mergeMaps
parameter_list|(
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|second
parameter_list|)
block|{
name|first
operator|.
name|putAll
argument_list|(
name|second
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
comment|/**    * Generic map merge logic    * @param first first map    * @param second second map    * @param<T1> key type    * @param<T2> value type    * @return 'first' merged with the second    */
DECL|method|mergeMapsIgnoreDuplicateKeys (Map<T1, T2> first, Map<T1, T2> second)
specifier|public
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|mergeMapsIgnoreDuplicateKeys
parameter_list|(
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|second
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|first
operator|!=
literal|null
argument_list|,
literal|"Null 'first' value"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|second
operator|!=
literal|null
argument_list|,
literal|"Null 'second' value"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|entry
range|:
name|second
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|T1
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|first
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|first
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|first
return|;
block|}
comment|/**    * Merge string maps excluding prefixes    * @param first first map    * @param second second map    * @param  prefixes prefixes to ignore    * @return 'first' merged with the second    */
DECL|method|mergeMapsIgnoreDuplicateKeysAndPrefixes ( Map<String, String> first, Map<String, String> second, List<String> prefixes)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mergeMapsIgnoreDuplicateKeysAndPrefixes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|second
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|first
operator|!=
literal|null
argument_list|,
literal|"Null 'first' value"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|second
operator|!=
literal|null
argument_list|,
literal|"Null 'second' value"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|prefixes
operator|!=
literal|null
argument_list|,
literal|"Null 'prefixes' value"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|second
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|boolean
name|hasPrefix
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|hasPrefix
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasPrefix
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|first
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|first
return|;
block|}
comment|/**    * Convert a map to a multi-line string for printing    * @param map map to stringify    * @return a string representation of the map    */
DECL|method|stringifyMap (Map<String, String> map)
specifier|public
specifier|static
name|String
name|stringifyMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the int value of a role    * @param roleMap map of role key->val entries    * @param key key the key to look for    * @param defVal default value to use if the key is not in the map    * @param min min value or -1 for do not check    * @param max max value or -1 for do not check    * @return the int value the integer value    * @throws BadConfigException if the value could not be parsed    */
DECL|method|getIntValue (Map<String, String> roleMap, String key, int defVal, int min, int max )
specifier|public
specifier|static
name|int
name|getIntValue
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|defVal
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|valS
init|=
name|roleMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|parseAndValidate
argument_list|(
name|key
argument_list|,
name|valS
argument_list|,
name|defVal
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * Parse an int value, replacing it with defval if undefined;    * @param errorKey key to use in exceptions    * @param defVal default value to use if the key is not in the map    * @param min min value or -1 for do not check    * @param max max value or -1 for do not check    * @return the int value the integer value    * @throws BadConfigException if the value could not be parsed    */
DECL|method|parseAndValidate (String errorKey, String valS, int defVal, int min, int max)
specifier|public
specifier|static
name|int
name|parseAndValidate
parameter_list|(
name|String
name|errorKey
parameter_list|,
name|String
name|valS
parameter_list|,
name|int
name|defVal
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|BadConfigException
block|{
if|if
condition|(
name|valS
operator|==
literal|null
condition|)
block|{
name|valS
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
expr_stmt|;
block|}
name|String
name|trim
init|=
name|valS
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
decl_stmt|;
try|try
block|{
name|val
operator|=
name|Integer
operator|.
name|decode
argument_list|(
name|trim
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Failed to parse value of "
operator|+
name|errorKey
operator|+
literal|": \""
operator|+
name|trim
operator|+
literal|"\""
argument_list|)
throw|;
block|}
if|if
condition|(
name|min
operator|>=
literal|0
operator|&&
name|val
operator|<
name|min
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Value of "
operator|+
name|errorKey
operator|+
literal|": "
operator|+
name|val
operator|+
literal|""
operator|+
literal|"is less than the minimum of "
operator|+
name|min
argument_list|)
throw|;
block|}
if|if
condition|(
name|max
operator|>=
literal|0
operator|&&
name|val
operator|>
name|max
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Value of "
operator|+
name|errorKey
operator|+
literal|": "
operator|+
name|val
operator|+
literal|""
operator|+
literal|"is more than the maximum of "
operator|+
name|max
argument_list|)
throw|;
block|}
return|return
name|val
return|;
block|}
DECL|method|getRmAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getRmAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
return|;
block|}
DECL|method|getRmSchedulerAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getRmSchedulerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_PORT
argument_list|)
return|;
block|}
comment|/**    * probe to see if the RM scheduler is defined    * @param conf config    * @return true if the RM scheduler address is set to    * something other than 0.0.0.0    */
DECL|method|isRmSchedulerAddressDefined (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isRmSchedulerAddressDefined
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
name|getRmSchedulerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|isAddressDefined
argument_list|(
name|address
argument_list|)
return|;
block|}
comment|/**    * probe to see if the address    * @param address network address    * @return true if the scheduler address is set to    * something other than 0.0.0.0    */
DECL|method|isAddressDefined (InetSocketAddress address)
specifier|public
specifier|static
name|boolean
name|isAddressDefined
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|==
literal|null
operator|||
name|address
operator|.
name|getHostString
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
operator|(
name|address
operator|.
name|getHostString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|)
return|;
block|}
DECL|method|setRmAddress (Configuration conf, String rmAddr)
specifier|public
specifier|static
name|void
name|setRmAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|rmAddr
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
block|}
DECL|method|setRmSchedulerAddress (Configuration conf, String rmAddr)
specifier|public
specifier|static
name|void
name|setRmSchedulerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|rmAddr
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
block|}
DECL|method|hasAppFinished (ApplicationReport report)
specifier|public
specifier|static
name|boolean
name|hasAppFinished
parameter_list|(
name|ApplicationReport
name|report
parameter_list|)
block|{
return|return
name|report
operator|==
literal|null
operator|||
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|>=
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|ordinal
argument_list|()
return|;
block|}
DECL|method|containerToString (Container container)
specifier|public
specifier|static
name|String
name|containerToString
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
return|return
literal|"null container"
return|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"ContainerID=%s nodeID=%s http=%s priority=%s resource=%s"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|container
operator|.
name|getPriority
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * convert an AM report to a string for diagnostics    * @param report the report    * @return the string value    */
DECL|method|reportToString (ApplicationReport report)
specifier|public
specifier|static
name|String
name|reportToString
parameter_list|(
name|ApplicationReport
name|report
parameter_list|)
block|{
if|if
condition|(
name|report
operator|==
literal|null
condition|)
block|{
return|return
literal|"Null application report"
return|;
block|}
return|return
literal|"App "
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|report
operator|.
name|getApplicationType
argument_list|()
operator|+
literal|"# "
operator|+
name|report
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" user "
operator|+
name|report
operator|.
name|getUser
argument_list|()
operator|+
literal|" is in state "
operator|+
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|+
literal|" RPC: "
operator|+
name|report
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|report
operator|.
name|getRpcPort
argument_list|()
operator|+
literal|" URL: "
operator|+
name|report
operator|.
name|getOriginalTrackingUrl
argument_list|()
return|;
block|}
comment|/**    * Convert a YARN URL into a string value of a normal URL    * @param url URL    * @return string representatin    */
DECL|method|stringify (org.apache.hadoop.yarn.api.records.URL url)
specifier|public
specifier|static
name|String
name|stringify
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
name|url
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|url
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findFreePort (int start, int limit)
specifier|public
specifier|static
name|int
name|findFreePort
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
comment|//bail out if the default is "dont care"
return|return
literal|0
return|;
block|}
name|int
name|found
init|=
literal|0
decl_stmt|;
name|int
name|port
init|=
name|start
decl_stmt|;
name|int
name|finish
init|=
name|start
operator|+
name|limit
decl_stmt|;
while|while
condition|(
name|found
operator|==
literal|0
operator|&&
name|port
operator|<
name|finish
condition|)
block|{
if|if
condition|(
name|isPortAvailable
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|found
operator|=
name|port
expr_stmt|;
block|}
else|else
block|{
name|port
operator|++
expr_stmt|;
block|}
block|}
return|return
name|found
return|;
block|}
comment|/**    * Get a random open port    * @return true if the port was available for listening on    */
DECL|method|getOpenPort ()
specifier|public
specifier|static
name|int
name|getOpenPort
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerSocket
name|socket
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|socket
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * See if a port is available for listening on by trying to listen    * on it and seeing if that works or fails.    * @param port port to listen to    * @return true if the port was available for listening on    */
DECL|method|isPortAvailable (int port)
specifier|public
specifier|static
name|boolean
name|isPortAvailable
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Build the environment map from a role option map, finding all entries    * beginning with "env.", adding them to a map of (prefix-removed)    * env vars    * @param roleOpts role options. This can be null, meaning the    * role is undefined    * @return a possibly empty map of environment variables.    */
DECL|method|buildEnvMap (Map<String, String> roleOpts)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildEnvMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleOpts
parameter_list|)
block|{
return|return
name|buildEnvMap
argument_list|(
name|roleOpts
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|buildEnvMap (Map<String, String> roleOpts, Map<String,String> tokenMap)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildEnvMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleOpts
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|roleOpts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|roleOpts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|RoleKeys
operator|.
name|ENV_PREFIX
argument_list|)
condition|)
block|{
name|String
name|envName
init|=
name|key
operator|.
name|substring
argument_list|(
name|RoleKeys
operator|.
name|ENV_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|envName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|token
range|:
name|tokenMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|token
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|env
operator|.
name|put
argument_list|(
name|envName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|env
return|;
block|}
comment|/**    * Apply a set of command line options to a cluster role map    * @param clusterRoleMap cluster role map to merge onto    * @param commandOptions command opts    */
DECL|method|applyCommandLineRoleOptsToRoleMap ( Map<String, Map<String, String>> clusterRoleMap, Map<String, Map<String, String>> commandOptions)
specifier|public
specifier|static
name|void
name|applyCommandLineRoleOptsToRoleMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|clusterRoleMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|commandOptions
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|commandOptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|optionMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|existingMap
init|=
name|clusterRoleMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMap
operator|==
literal|null
condition|)
block|{
name|existingMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Overwriting role options with command line values {}"
argument_list|,
name|stringifyMap
argument_list|(
name|optionMap
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMap
argument_list|(
name|existingMap
argument_list|,
name|optionMap
argument_list|)
expr_stmt|;
comment|//set or overwrite the role
name|clusterRoleMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|existingMap
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * verify that the supplied cluster name is valid    * @param clustername cluster name    * @throws BadCommandArgumentsException if it is invalid    */
DECL|method|validateClusterName (String clustername)
specifier|public
specifier|static
name|void
name|validateClusterName
parameter_list|(
name|String
name|clustername
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
if|if
condition|(
operator|!
name|isClusternameValid
argument_list|(
name|clustername
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Illegal cluster name: "
operator|+
name|clustername
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a Kerberos principal has been set -if not fail    * with an error message that actually tells you what is missing    * @param conf configuration to look at    * @param principal key of principal    * @throws BadConfigException if the key is not set    */
DECL|method|verifyPrincipalSet (Configuration conf, String principal)
specifier|public
specifier|static
name|void
name|verifyPrincipalSet
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|principal
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|principalName
init|=
name|conf
operator|.
name|get
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Unset Kerberos principal : %s"
argument_list|,
name|principal
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Kerberos princial {}={}"
argument_list|,
name|principal
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Flag to indicate whether the cluster is in secure mode    * @param conf configuration to look at    * @return true if the slider client/service should be in secure mode    */
DECL|method|isHadoopClusterSecure (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isHadoopClusterSecure
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
operator|!=
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|SIMPLE
return|;
block|}
comment|/**    * Init security if the cluster configuration declares the cluster is secure    * @param conf configuration to look at    * @return true if the cluster is secure    * @throws IOException cluster is secure    * @throws SliderException the configuration/process is invalid    */
DECL|method|maybeInitSecurity (Configuration conf)
specifier|public
specifier|static
name|boolean
name|maybeInitSecurity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|boolean
name|clusterSecure
init|=
name|isHadoopClusterSecure
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterSecure
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Enabling security"
argument_list|)
expr_stmt|;
name|initProcessSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterSecure
return|;
block|}
comment|/**    * Turn on security. This is setup to only run once.    * @param conf configuration to build up security    * @return true if security was initialized in this call    * @throws IOException IO/Net problems    * @throws BadConfigException the configuration and system state are inconsistent    */
DECL|method|initProcessSecurity (Configuration conf)
specifier|public
specifier|static
name|boolean
name|initProcessSecurity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|processSecurityAlreadyInitialized
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|//security is already inited
return|return
literal|false
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"JVM initialized into secure mode with kerberos realm {}"
argument_list|,
name|SliderUtils
operator|.
name|getKerberosRealm
argument_list|()
argument_list|)
expr_stmt|;
comment|//this gets UGI to reset its previous world view (i.e simple auth)
comment|//security
name|log
operator|.
name|debug
argument_list|(
literal|"java.security.krb5.realm={}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|JAVA_SECURITY_KRB5_REALM
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"java.security.krb5.kdc={}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|JAVA_SECURITY_KRB5_KDC
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"hadoop.security.authentication={}"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"hadoop.security.authorization={}"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|authUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Authenticating as {}"
argument_list|,
name|authUser
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Login user is {}"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|LauncherExitCodes
operator|.
name|EXIT_UNAUTHORIZED
argument_list|,
literal|"Although secure mode is enabled,"
operator|+
literal|"the application has already set up its user as an insecure entity %s"
argument_list|,
name|authUser
argument_list|)
throw|;
block|}
if|if
condition|(
name|authUser
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|SIMPLE
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Auth User is not Kerberized %s"
operator|+
literal|" -security has already been set up with the wrong authentication method. "
operator|+
literal|"This can occur if a file system has already been created prior to the loading of "
operator|+
literal|"the security configuration."
argument_list|,
name|authUser
argument_list|)
throw|;
block|}
name|SliderUtils
operator|.
name|verifyPrincipalSet
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|)
expr_stmt|;
name|SliderUtils
operator|.
name|verifyPrincipalSet
argument_list|(
name|conf
argument_list|,
name|SliderXmlConfKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Force an early login: This catches any auth problems early rather than    * in RPC operations    * @throws IOException if the login fails    */
DECL|method|forceLogin ()
specifier|public
specifier|static
name|void
name|forceLogin
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isLoginKeytabBased
argument_list|()
condition|)
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromTicketCache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLibDir ()
specifier|public
specifier|static
name|String
name|getLibDir
parameter_list|()
block|{
name|String
index|[]
name|libDirs
init|=
name|getLibDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|libDirs
operator|==
literal|null
operator|||
name|libDirs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|libDirs
index|[
literal|0
index|]
return|;
block|}
DECL|method|getLibDirs ()
specifier|public
specifier|static
name|String
index|[]
name|getLibDirs
parameter_list|()
block|{
name|String
name|libDirStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SliderKeys
operator|.
name|PROPERTY_LIB_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUnset
argument_list|(
name|libDirStr
argument_list|)
condition|)
block|{
return|return
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
return|;
block|}
return|return
name|StringUtils
operator|.
name|split
argument_list|(
name|libDirStr
argument_list|,
literal|','
argument_list|)
return|;
block|}
comment|/**    * Submit a JAR containing a specific class and map it    * @param providerResources provider map to build up    * @param sliderFileSystem remote fs    * @param clazz class to look for    * @param libdir lib directory    * @param jarName<i>At the destination</i>    * @return the local resource ref    * @throws IOException trouble copying to HDFS    */
DECL|method|putJar (Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Class clazz, Path tempPath, String libdir, String jarName )
specifier|public
specifier|static
name|LocalResource
name|putJar
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|libdir
parameter_list|,
name|String
name|jarName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|LocalResource
name|res
init|=
name|sliderFileSystem
operator|.
name|submitJarWithClass
argument_list|(
name|clazz
argument_list|,
name|tempPath
argument_list|,
name|libdir
argument_list|,
name|jarName
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|libdir
operator|+
literal|"/"
operator|+
name|jarName
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**    * Submit a JAR containing and map it    * @param providerResources provider map to build up    * @param sliderFileSystem remote fs    * @param libDir lib directory    * @param srcPath copy jars from    * @throws IOException, SliderException trouble copying to HDFS    */
DECL|method|putAllJars (Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Path tempPath, String libDir, String srcPath)
specifier|public
specifier|static
name|void
name|putAllJars
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|libDir
parameter_list|,
name|String
name|srcPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading all dependencies from {}"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
name|File
name|srcFolder
init|=
operator|new
name|File
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|FilenameFilter
name|jarFilter
init|=
name|createJarFilter
argument_list|()
decl_stmt|;
name|File
index|[]
name|listOfJars
init|=
name|srcFolder
operator|.
name|listFiles
argument_list|(
name|jarFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|listOfJars
operator|==
literal|null
operator|||
name|listOfJars
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|jarFile
range|:
name|listOfJars
control|)
block|{
name|LocalResource
name|res
init|=
name|sliderFileSystem
operator|.
name|submitFile
argument_list|(
name|jarFile
argument_list|,
name|tempPath
argument_list|,
name|libDir
argument_list|,
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|libDir
operator|+
literal|"/"
operator|+
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Accept all filenames ending with {@code .jar}    * @return a filename filter    */
DECL|method|createJarFilter ()
specifier|public
specifier|static
name|FilenameFilter
name|createJarFilter
parameter_list|()
block|{
return|return
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Submit the AM tar.gz containing all dependencies and map it    * @param providerResources provider map to build up    * @param sliderFileSystem remote fs    * @throws IOException, SliderException trouble copying to HDFS    */
DECL|method|putAmTarGzipAndUpdate ( Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem )
specifier|public
specifier|static
name|void
name|putAmTarGzipAndUpdate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading all dependencies from {}{}"
argument_list|,
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_TAR_GZ_FILE_NAME
argument_list|,
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_TAR_GZ_FILE_EXT
argument_list|)
expr_stmt|;
name|sliderFileSystem
operator|.
name|submitTarGzipAndUpdate
argument_list|(
name|providerResources
argument_list|)
expr_stmt|;
block|}
DECL|method|deepClone (Map<String, Map<String, String>> src)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|deepClone
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|src
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|dest
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|src
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|dest
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|stringMapClone
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
DECL|method|stringMapClone (Map<String, String> src)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stringMapClone
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|src
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dest
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|mergeEntries
argument_list|(
name|dest
argument_list|,
name|src
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * List a directory in the local filesystem    * @param dir directory    * @return a listing, one to a line    */
DECL|method|listDir (File dir)
specifier|public
specifier|static
name|String
name|listDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
index|[]
name|confDirEntries
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|confDirEntries
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|confDirEntries
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|entry
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a file:// path from a local file    * @param file file to point the path    * @return a new Path    */
DECL|method|createLocalPath (File file)
specifier|public
specifier|static
name|Path
name|createLocalPath
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the current user -relays to    * {@link UserGroupInformation#getCurrentUser()}    * with any Slider-specific post processing and exception handling    * @return user info    * @throws IOException on a failure to get the credentials    */
DECL|method|getCurrentUser ()
specifier|public
specifier|static
name|UserGroupInformation
name|getCurrentUser
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
name|currentUser
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to get user info"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getKerberosRealm ()
specifier|public
specifier|static
name|String
name|getKerberosRealm
parameter_list|()
block|{
try|try
block|{
return|return
name|KerberosUtil
operator|.
name|getDefaultRealm
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"introspection into JVM internals failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|"(unknown)"
return|;
block|}
block|}
comment|/**    * Register the client resource in    * {@link SliderKeys#SLIDER_CLIENT_XML}    * for Configuration instances.    *    * @return true if the resource could be loaded    */
DECL|method|registerClientResource ()
specifier|public
specifier|static
name|URL
name|registerClientResource
parameter_list|()
block|{
return|return
name|ConfigHelper
operator|.
name|registerDefaultResource
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_CLIENT_XML
argument_list|)
return|;
block|}
comment|/**    * Attempt to load the slider client resource. If the    * resource is not on the CP an empty config is returned.    * @return a config    */
DECL|method|loadSliderClientXML ()
specifier|public
specifier|static
name|Configuration
name|loadSliderClientXML
parameter_list|()
block|{
return|return
name|ConfigHelper
operator|.
name|loadFromResource
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_CLIENT_XML
argument_list|)
return|;
block|}
comment|/**    * Convert a char sequence to a string.    * This ensures that comparisons work    * @param charSequence source    * @return the string equivalent    */
DECL|method|sequenceToString (CharSequence charSequence)
specifier|public
specifier|static
name|String
name|sequenceToString
parameter_list|(
name|CharSequence
name|charSequence
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|charSequence
argument_list|)
decl_stmt|;
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Build up the classpath for execution    * -behaves very differently on a mini test cluster vs a production    * production one.    *    * @param sliderConfDir relative path to the dir containing slider config    *                      options to put on the classpath -or null    * @param libdir directory containing the JAR files    * @param config the configuration    * @param usingMiniMRCluster flag to indicate the MiniMR cluster is in use    * (and hence the current classpath should be used, not anything built up)    * @return a classpath    */
DECL|method|buildClasspath (String sliderConfDir, String libdir, Configuration config, SliderFileSystem sliderFileSystem, boolean usingMiniMRCluster)
specifier|public
specifier|static
name|ClasspathConstructor
name|buildClasspath
parameter_list|(
name|String
name|sliderConfDir
parameter_list|,
name|String
name|libdir
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|boolean
name|usingMiniMRCluster
parameter_list|)
block|{
name|ClasspathConstructor
name|classpath
init|=
operator|new
name|ClasspathConstructor
argument_list|()
decl_stmt|;
comment|// add the runtime classpath needed for tests to work
if|if
condition|(
name|usingMiniMRCluster
condition|)
block|{
comment|// for mini cluster we pass down the java CP properties
comment|// and nothing else
name|classpath
operator|.
name|appendAll
argument_list|(
name|classpath
operator|.
name|localJVMClasspath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sliderConfDir
operator|!=
literal|null
condition|)
block|{
name|classpath
operator|.
name|addClassDirectory
argument_list|(
name|sliderConfDir
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|addLibDir
argument_list|(
name|libdir
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliderFileSystem
operator|.
name|isFile
argument_list|(
name|sliderFileSystem
operator|.
name|getDependencyTarGzip
argument_list|()
argument_list|)
condition|)
block|{
name|classpath
operator|.
name|addLibDir
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"For faster submission of apps, upload dependencies using cmd {} {}"
argument_list|,
name|SliderActions
operator|.
name|ACTION_DEPENDENCY
argument_list|,
name|Arguments
operator|.
name|ARG_UPLOAD
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|addRemoteClasspathEnvVar
argument_list|()
expr_stmt|;
name|classpath
operator|.
name|append
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|$$
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|classpath
return|;
block|}
comment|/**    * Verify that a path refers to a directory. If not    * logs the parent dir then throws an exception    * @param dir the directory    * @param errorlog log for output on an error    * @throws FileNotFoundException if it is not a directory    */
DECL|method|verifyIsDir (File dir, Logger errorlog)
specifier|public
specifier|static
name|void
name|verifyIsDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|Logger
name|errorlog
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|errorlog
operator|.
name|warn
argument_list|(
literal|"contents of {}: {}"
argument_list|,
name|dir
argument_list|,
name|listDir
argument_list|(
name|dir
operator|.
name|getParentFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|errorlog
operator|.
name|info
argument_list|(
literal|"contents of {}: {}"
argument_list|,
name|dir
argument_list|,
name|listDir
argument_list|(
name|dir
operator|.
name|getParentFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not a directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a file exists    * @param file file    * @param errorlog log for output on an error    * @throws FileNotFoundException    */
DECL|method|verifyFileExists (File file, Logger errorlog)
specifier|public
specifier|static
name|void
name|verifyFileExists
parameter_list|(
name|File
name|file
parameter_list|,
name|Logger
name|errorlog
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|errorlog
operator|.
name|warn
argument_list|(
literal|"contents of {}: {}"
argument_list|,
name|file
argument_list|,
name|listDir
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not a file: "
operator|+
name|file
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * verify that a config option is set    * @param configuration config    * @param key key    * @return the value, in case it needs to be verified too    * @throws BadConfigException if the key is missing    */
DECL|method|verifyOptionSet (Configuration configuration, String key, boolean allowEmpty)
specifier|public
specifier|static
name|String
name|verifyOptionSet
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|allowEmpty
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|val
init|=
name|configuration
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Required configuration option \"%s\" not defined "
argument_list|,
name|key
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|allowEmpty
operator|&&
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Configuration option \"%s\" must not be empty"
argument_list|,
name|key
argument_list|)
throw|;
block|}
return|return
name|val
return|;
block|}
comment|/**    * Verify that a keytab property is defined and refers to a non-empty file    *    * @param siteConf configuration    * @param prop property to look for    * @return the file referenced    * @throws BadConfigException on a failure    */
DECL|method|verifyKeytabExists (Configuration siteConf, String prop)
specifier|public
specifier|static
name|File
name|verifyKeytabExists
parameter_list|(
name|Configuration
name|siteConf
parameter_list|,
name|String
name|prop
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|keytab
init|=
name|siteConf
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|keytab
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Missing keytab property %s"
argument_list|,
name|prop
argument_list|)
throw|;
block|}
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|keytab
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keytabFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Missing keytab file %s defined in %s"
argument_list|,
name|keytabFile
argument_list|,
name|prop
argument_list|)
throw|;
block|}
if|if
condition|(
name|keytabFile
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|keytabFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Invalid keytab file %s defined in %s"
argument_list|,
name|keytabFile
argument_list|,
name|prop
argument_list|)
throw|;
block|}
return|return
name|keytabFile
return|;
block|}
comment|/**    * Convert an epoch time to a GMT time. This    * uses the deprecated Date.toString() operation,    * so is in one place to reduce the number of deprecation warnings.    * @param time timestamp    * @return string value as ISO-9601    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"CallToDateToString"
block|,
literal|"deprecation"
block|}
argument_list|)
DECL|method|toGMTString (long time)
specifier|public
specifier|static
name|String
name|toGMTString
parameter_list|(
name|long
name|time
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|time
argument_list|)
operator|.
name|toGMTString
argument_list|()
return|;
block|}
comment|/**    * Add the cluster build information; this will include Hadoop details too    * @param info cluster info    * @param prefix prefix for the build info    */
DECL|method|addBuildInfo (Map<String, String> info, String prefix)
specifier|public
specifier|static
name|void
name|addBuildInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Properties
name|props
init|=
name|SliderVersionInfo
operator|.
name|loadVersionProperties
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|SliderVersionInfo
operator|.
name|APP_BUILD_INFO
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|SliderVersionInfo
operator|.
name|APP_BUILD_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|SliderVersionInfo
operator|.
name|HADOOP_BUILD_INFO
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|SliderVersionInfo
operator|.
name|HADOOP_BUILD_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|SliderVersionInfo
operator|.
name|HADOOP_DEPLOYED_INFO
argument_list|,
name|VersionInfo
operator|.
name|getBranch
argument_list|()
operator|+
literal|" @"
operator|+
name|VersionInfo
operator|.
name|getSrcChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the time for an information (human, machine) timestamp pair of fields.    * The human time is the time in millis converted via the {@link Date} class.    * @param info info fields    * @param keyHumanTime name of human time key    * @param keyMachineTime name of machine time    * @param time timestamp    */
DECL|method|setInfoTime (Map info, String keyHumanTime, String keyMachineTime, long time)
specifier|public
specifier|static
name|void
name|setInfoTime
parameter_list|(
name|Map
name|info
parameter_list|,
name|String
name|keyHumanTime
parameter_list|,
name|String
name|keyMachineTime
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|info
operator|.
name|put
argument_list|(
name|keyHumanTime
argument_list|,
name|SliderUtils
operator|.
name|toGMTString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|keyMachineTime
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|extractImagePath (CoreFileSystem fs, MapOperations internalOptions)
specifier|public
specifier|static
name|Path
name|extractImagePath
parameter_list|(
name|CoreFileSystem
name|fs
parameter_list|,
name|MapOperations
name|internalOptions
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
name|Path
name|imagePath
decl_stmt|;
name|String
name|imagePathOption
init|=
name|internalOptions
operator|.
name|get
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_APPLICATION_IMAGE_PATH
argument_list|)
decl_stmt|;
name|String
name|appHomeOption
init|=
name|internalOptions
operator|.
name|get
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_APPLICATION_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isUnset
argument_list|(
name|imagePathOption
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isUnset
argument_list|(
name|appHomeOption
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|ErrorStrings
operator|.
name|E_BOTH_IMAGE_AND_HOME_DIR_SPECIFIED
argument_list|)
throw|;
block|}
name|imagePath
operator|=
name|fs
operator|.
name|createPathThatMustExist
argument_list|(
name|imagePathOption
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|imagePath
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|isUnset
argument_list|(
name|appHomeOption
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|ErrorStrings
operator|.
name|E_NO_IMAGE_OR_HOME_DIR_SPECIFIED
argument_list|)
throw|;
block|}
block|}
return|return
name|imagePath
return|;
block|}
comment|/**    * trigger a  JVM halt with no clean shutdown at all    * @param status status code for exit    * @param text text message    * @param delay delay in millis    * @return the timer (assuming the JVM hasn't halted yet)    *    */
DECL|method|haltAM (int status, String text, int delay)
specifier|public
specifier|static
name|Timer
name|haltAM
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|delay
parameter_list|)
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
literal|"halt timer"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
operator|new
name|DelayedHalt
argument_list|(
name|status
argument_list|,
name|text
argument_list|)
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|timer
return|;
block|}
DECL|method|propertiesToString (Properties props)
specifier|public
specifier|static
name|String
name|propertiesToString
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|props
operator|.
name|stringPropertyNames
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Add a subpath to an existing URL. This extends    * the path, inserting a / between all entries    * if needed.    * @param base base path/URL    * @param path subpath    * @return base+"/"+subpath    */
DECL|method|appendToURL (String base, String path)
specifier|public
specifier|static
name|String
name|appendToURL
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|StringBuilder
name|fullpath
init|=
operator|new
name|StringBuilder
argument_list|(
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|base
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fullpath
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fullpath
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fullpath
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|fullpath
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Append a list of paths, inserting "/" signs as appropriate    * @param base base path/URL    * @param paths subpaths    * @return base+"/"+paths[0]+"/"+paths[1]...    */
DECL|method|appendToURL (String base, String... paths)
specifier|public
specifier|static
name|String
name|appendToURL
parameter_list|(
name|String
name|base
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|String
name|result
init|=
name|base
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|result
operator|=
name|appendToURL
argument_list|(
name|result
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Truncate the given string to a maximum length provided    * with a pad (...) added to the end if expected size if more than 10.    * @param toTruncate string to truncate; may be null    * @param maxSize maximum size    * @return the truncated/padded string.     */
DECL|method|truncate (String toTruncate, int maxSize)
specifier|public
specifier|static
name|String
name|truncate
parameter_list|(
name|String
name|toTruncate
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
if|if
condition|(
name|toTruncate
operator|==
literal|null
operator|||
name|maxSize
operator|<
literal|1
operator|||
name|toTruncate
operator|.
name|length
argument_list|()
operator|<=
name|maxSize
condition|)
block|{
return|return
name|toTruncate
return|;
block|}
name|String
name|pad
init|=
literal|"..."
decl_stmt|;
if|if
condition|(
name|maxSize
operator|<
literal|10
condition|)
block|{
name|pad
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|toTruncate
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxSize
operator|-
name|pad
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|concat
argument_list|(
name|pad
argument_list|)
return|;
block|}
comment|/**    * Get a string node label value from a node report    * @param report node report    * @return a single trimmed label or ""    */
DECL|method|extractNodeLabel (NodeReport report)
specifier|public
specifier|static
name|String
name|extractNodeLabel
parameter_list|(
name|NodeReport
name|report
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newlabels
init|=
name|report
operator|.
name|getNodeLabels
argument_list|()
decl_stmt|;
if|if
condition|(
name|newlabels
operator|!=
literal|null
operator|&&
operator|!
name|newlabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|newlabels
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**    * Callable for async/scheduled halt    */
DECL|class|DelayedHalt
specifier|public
specifier|static
class|class
name|DelayedHalt
extends|extends
name|TimerTask
block|{
DECL|field|status
specifier|private
specifier|final
name|int
name|status
decl_stmt|;
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|method|DelayedHalt (int status, String text)
specifier|public
name|DelayedHalt
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ExitUtil
operator|.
name|halt
argument_list|(
name|status
argument_list|,
name|text
argument_list|)
expr_stmt|;
comment|//this should never be reached
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|HaltException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Halt failed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A compareTo function that converts the result of a long    * comparision into the integer that<code>Comparable</code>    * expects.    * @param left left side    * @param right right side    * @return -1, 0, 1 depending on the diff    */
DECL|method|compareTo (long left, long right)
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|long
name|left
parameter_list|,
name|long
name|right
parameter_list|)
block|{
name|long
name|diff
init|=
name|left
operator|-
name|right
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Given a source folder create zipped file    *    * @param srcFolder    * @param zipFile    *    * @throws IOException    */
DECL|method|zipFolder (File srcFolder, File zipFile)
specifier|public
specifier|static
name|void
name|zipFolder
parameter_list|(
name|File
name|srcFolder
parameter_list|,
name|File
name|zipFile
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Zipping folder {} to {}"
argument_list|,
name|srcFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|zipFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|generateFileList
argument_list|(
name|files
argument_list|,
name|srcFolder
argument_list|,
name|srcFolder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|zipFile
argument_list|)
init|)
block|{
try|try
init|(
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|fos
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|srcFolder
operator|+
name|File
operator|.
name|separator
operator|+
name|file
argument_list|)
init|)
block|{
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|zos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Given a source folder create a tar.gz file    *     * @param libDirs    * @param tarGzipFile    *     * @throws IOException    */
DECL|method|tarGzipFolder (String[] libDirs, File tarGzipFile, FilenameFilter filter)
specifier|public
specifier|static
name|void
name|tarGzipFolder
parameter_list|(
name|String
index|[]
name|libDirs
parameter_list|,
name|File
name|tarGzipFile
parameter_list|,
name|FilenameFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Tar-gzipping folders {} to {}"
argument_list|,
name|libDirs
argument_list|,
name|tarGzipFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|TarArchiveOutputStream
name|taos
init|=
operator|new
name|TarArchiveOutputStream
argument_list|(
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tarGzipFile
argument_list|)
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|libDir
range|:
name|libDirs
control|)
block|{
name|File
name|srcFolder
init|=
operator|new
name|File
argument_list|(
name|libDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|generateFileList
argument_list|(
name|files
argument_list|,
name|srcFolder
argument_list|,
name|srcFolder
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|srcFolder
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|tarEntry
init|=
operator|new
name|TarArchiveEntry
argument_list|(
name|srcFile
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|taos
operator|.
name|putArchiveEntry
argument_list|(
name|tarEntry
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|srcFile
argument_list|)
init|)
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|taos
argument_list|)
expr_stmt|;
block|}
name|taos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|taos
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Retrieve the HDP version if it is an HDP cluster, or null otherwise. It    * first checks if system property HDP_VERSION is defined. If not it checks if    * system env HDP_VERSION is defined.    *     * @return HDP version (if defined) or null otherwise    */
DECL|method|getHdpVersion ()
specifier|public
specifier|static
name|String
name|getHdpVersion
parameter_list|()
block|{
name|String
name|hdpVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SliderKeys
operator|.
name|HDP_VERSION_PROP_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|hdpVersion
argument_list|)
condition|)
block|{
name|hdpVersion
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|SliderKeys
operator|.
name|HDP_VERSION_PROP_NAME
argument_list|)
expr_stmt|;
block|}
return|return
name|hdpVersion
return|;
block|}
comment|/**    * Query to find if it is an HDP cluster    *     * @return true if this is invoked in an HDP cluster or false otherwise    */
DECL|method|isHdp ()
specifier|public
specifier|static
name|boolean
name|isHdp
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|getHdpVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Retrieve the version of the current Slider install    *     * @return the version string of the Slider release    */
DECL|method|getSliderVersion ()
specifier|public
specifier|static
name|String
name|getSliderVersion
parameter_list|()
block|{
if|if
condition|(
name|isHdp
argument_list|()
condition|)
block|{
return|return
name|getHdpVersion
argument_list|()
return|;
block|}
else|else
block|{
name|Properties
name|props
init|=
name|SliderVersionInfo
operator|.
name|loadVersionProperties
argument_list|()
decl_stmt|;
return|return
name|props
operator|.
name|getProperty
argument_list|(
name|SliderVersionInfo
operator|.
name|APP_VERSION
argument_list|)
return|;
block|}
block|}
DECL|method|generateFileList (List<String> fileList, File node, File rootFolder, Boolean relative)
specifier|private
specifier|static
name|void
name|generateFileList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileList
parameter_list|,
name|File
name|node
parameter_list|,
name|File
name|rootFolder
parameter_list|,
name|Boolean
name|relative
parameter_list|)
block|{
name|generateFileList
argument_list|(
name|fileList
argument_list|,
name|node
argument_list|,
name|rootFolder
argument_list|,
name|relative
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|generateFileList (List<String> fileList, File node, File rootFolder, Boolean relative, FilenameFilter filter)
specifier|private
specifier|static
name|void
name|generateFileList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileList
parameter_list|,
name|File
name|node
parameter_list|,
name|File
name|rootFolder
parameter_list|,
name|Boolean
name|relative
parameter_list|,
name|FilenameFilter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|fileFullPath
init|=
name|node
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|relative
condition|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|fileFullPath
operator|.
name|substring
argument_list|(
name|rootFolder
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|fileFullPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileList
operator|.
name|add
argument_list|(
name|fileFullPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|subNode
init|=
name|node
operator|.
name|list
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|subNode
operator|==
literal|null
operator|||
name|subNode
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|filename
range|:
name|subNode
control|)
block|{
name|generateFileList
argument_list|(
name|fileList
argument_list|,
operator|new
name|File
argument_list|(
name|node
argument_list|,
name|filename
argument_list|)
argument_list|,
name|rootFolder
argument_list|,
name|relative
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This wraps ApplicationReports and generates a string version    * iff the toString() operator is invoked    */
DECL|class|OnDemandReportStringifier
specifier|public
specifier|static
class|class
name|OnDemandReportStringifier
block|{
DECL|field|report
specifier|private
specifier|final
name|ApplicationReport
name|report
decl_stmt|;
DECL|method|OnDemandReportStringifier (ApplicationReport report)
specifier|public
name|OnDemandReportStringifier
parameter_list|(
name|ApplicationReport
name|report
parameter_list|)
block|{
name|this
operator|.
name|report
operator|=
name|report
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appReportToString
argument_list|(
name|report
argument_list|,
literal|"\n"
argument_list|)
return|;
block|}
block|}
DECL|method|getApplicationResourceInputStream (FileSystem fs, Path appPath, String entry)
specifier|public
specifier|static
name|InputStream
name|getApplicationResourceInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|appPath
parameter_list|,
name|String
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|appStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|appPath
argument_list|)
init|)
block|{
name|ZipArchiveInputStream
name|zis
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|appStream
argument_list|)
decl_stmt|;
name|ZipArchiveEntry
name|zipEntry
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
name|zipEntry
operator|=
name|zis
operator|.
name|getNextZipEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|equals
argument_list|(
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|size
init|=
operator|(
name|int
operator|)
name|zipEntry
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reading {} of size {}"
argument_list|,
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|,
name|zipEntry
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|size
condition|)
block|{
name|offset
operator|+=
name|zis
operator|.
name|read
argument_list|(
name|content
argument_list|,
name|offset
argument_list|,
name|size
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Size unknown. Reading {}"
argument_list|,
name|zipEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|byteRead
init|=
name|zis
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteRead
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|baos
operator|.
name|write
argument_list|(
name|byteRead
argument_list|)
expr_stmt|;
block|}
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|is
return|;
block|}
comment|/**    * Check for any needed libraries being present. On Unix none are needed;    * on windows they must be present    * @return true if all is well    */
DECL|method|checkForRequiredNativeLibraries ()
specifier|public
specifier|static
name|String
name|checkForRequiredNativeLibraries
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|errorText
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|NativeIO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|errorText
operator|.
name|append
argument_list|(
literal|"No native IO library. "
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|path
init|=
name|Shell
operator|.
name|getQualifiedBinPath
argument_list|(
name|WINUTILS
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"winutils is at {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|errorText
operator|.
name|append
argument_list|(
literal|"No "
operator|+
name|WINUTILS
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No winutils: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|canRead
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failing to link to native IO methods: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errorText
operator|.
name|append
argument_list|(
literal|"No native IO methods"
argument_list|)
expr_stmt|;
block|}
return|return
name|errorText
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Strictly verify that windows utils is present.    * Checks go as far as opening the file and looking for    * the headers.     * @throws IOException on any problem reading the file    * @throws FileNotFoundException if the file is not considered valid    */
DECL|method|maybeVerifyWinUtilsValid ()
specifier|public
specifier|static
name|void
name|maybeVerifyWinUtilsValid
parameter_list|()
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|String
name|errorText
init|=
name|SliderUtils
operator|.
name|checkForRequiredNativeLibraries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|errorText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyIsFile (String program, File exe)
specifier|public
specifier|static
name|void
name|verifyIsFile
parameter_list|(
name|String
name|program
parameter_list|,
name|File
name|exe
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
operator|!
name|exe
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|program
operator|+
literal|" at "
operator|+
name|exe
operator|+
literal|" is not a file"
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyFileSize (String program, File exe, int minFileSize)
specifier|public
specifier|static
name|void
name|verifyFileSize
parameter_list|(
name|String
name|program
parameter_list|,
name|File
name|exe
parameter_list|,
name|int
name|minFileSize
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|exe
operator|.
name|length
argument_list|()
operator|<
name|minFileSize
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|program
operator|+
literal|" at "
operator|+
name|exe
operator|+
literal|" is too short to be an executable"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Write bytes to a file    * @param outfile output file    * @param data data to write    * @throws IOException on any IO problem    */
DECL|method|write (File outfile, byte[] data)
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|File
name|outfile
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|parentDir
init|=
name|outfile
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|outfile
operator|.
name|getPath
argument_list|()
operator|+
literal|" has no parent dir"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|parentDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create parent directory "
operator|+
name|parentDir
argument_list|)
throw|;
block|}
block|}
name|SliderUtils
operator|.
name|verifyIsDir
argument_list|(
name|parentDir
argument_list|,
name|log
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outfile
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute a command for a test operation    * @param name name in error    * @param status status code expected    * @param timeoutMillis timeout in millis for process to finish    * @param logger    * @param outputString optional string to grep for (must not span a line)    * @param commands commands   @return the process    * @throws IOException on any failure.    */
DECL|method|execCommand (String name, int status, long timeoutMillis, Logger logger, String outputString, String... commands)
specifier|public
specifier|static
name|ForkedProcessService
name|execCommand
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|status
parameter_list|,
name|long
name|timeoutMillis
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|outputString
parameter_list|,
name|String
modifier|...
name|commands
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isSet
argument_list|(
name|name
argument_list|)
argument_list|,
literal|"no name"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|commands
operator|.
name|length
operator|>
literal|0
argument_list|,
literal|"no commands"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isSet
argument_list|(
name|commands
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"empty command"
argument_list|)
expr_stmt|;
name|ForkedProcessService
name|process
decl_stmt|;
name|process
operator|=
operator|new
name|ForkedProcessService
argument_list|(
name|name
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|commands
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|setProcessLog
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|process
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|errorText
init|=
literal|null
decl_stmt|;
name|process
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|process
operator|.
name|waitForServiceToStop
argument_list|(
name|timeoutMillis
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Process did not stop in "
operator|+
name|timeoutMillis
operator|+
literal|"mS"
argument_list|)
throw|;
block|}
name|int
name|exitCode
init|=
name|process
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|recentOutput
init|=
name|process
operator|.
name|getRecentOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|exitCode
condition|)
block|{
comment|// error condition
name|errorText
operator|=
literal|"Expected exit code={"
operator|+
name|status
operator|+
literal|"}, "
operator|+
literal|"actual exit code={"
operator|+
name|exitCode
operator|+
literal|"}"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isSet
argument_list|(
name|outputString
argument_list|)
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|recentOutput
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|outputString
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|errorText
operator|=
literal|"Did not find \""
operator|+
name|outputString
operator|+
literal|"\""
operator|+
literal|" in output"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|errorText
operator|==
literal|null
condition|)
block|{
return|return
name|process
return|;
block|}
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|errorText
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// error text: non null ==> operation failed
name|log
operator|.
name|warn
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|recentOutput
init|=
name|process
operator|.
name|getRecentOutput
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|recentOutput
control|)
block|{
name|log
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SliderException
argument_list|(
name|LauncherExitCodes
operator|.
name|EXIT_OTHER_FAILURE
argument_list|,
literal|"Process %s failed: %s"
argument_list|,
name|name
argument_list|,
name|errorText
argument_list|)
throw|;
block|}
comment|/**    * Validate the slider client-side execution environment.    * This looks for everything felt to be critical for execution, including    * native binaries and other essential dependencies.    * @param logger logger to log to on normal execution    * @throws IOException on IO failures    * @throws SliderException on validation failures    */
DECL|method|validateSliderClientEnvironment (Logger logger)
specifier|public
specifier|static
name|void
name|validateSliderClientEnvironment
parameter_list|(
name|Logger
name|logger
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|maybeVerifyWinUtilsValid
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate the slider server-side execution environment.    * This looks for everything felt to be critical for execution, including    * native binaries and other essential dependencies.    * @param logger logger to log to on normal execution    * @param dependencyChecks flag to indicate checks for agent dependencies    * @throws IOException on IO failures    * @throws SliderException on validation failures    */
DECL|method|validateSliderServerEnvironment (Logger logger, boolean dependencyChecks)
specifier|public
specifier|static
name|void
name|validateSliderServerEnvironment
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|boolean
name|dependencyChecks
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|maybeVerifyWinUtilsValid
argument_list|()
expr_stmt|;
if|if
condition|(
name|dependencyChecks
condition|)
block|{
name|validatePythonEnv
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|validateOpenSSLEnv
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateOpenSSLEnv (Logger logger)
specifier|public
specifier|static
name|void
name|validateOpenSSLEnv
parameter_list|(
name|Logger
name|logger
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|execCommand
argument_list|(
name|OPENSSL
argument_list|,
literal|0
argument_list|,
literal|5000
argument_list|,
name|logger
argument_list|,
literal|"OpenSSL"
argument_list|,
name|OPENSSL
argument_list|,
literal|"version"
argument_list|)
expr_stmt|;
block|}
DECL|method|validatePythonEnv (Logger logger)
specifier|public
specifier|static
name|void
name|validatePythonEnv
parameter_list|(
name|Logger
name|logger
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|execCommand
argument_list|(
name|PYTHON
argument_list|,
literal|0
argument_list|,
literal|5000
argument_list|,
name|logger
argument_list|,
literal|"Python"
argument_list|,
name|PYTHON
argument_list|,
literal|"-V"
argument_list|)
expr_stmt|;
block|}
comment|/**    * return the path to the currently running slider command    *    * @throws NullPointerException    *             - If the pathname argument is null    * @throws SecurityException    *             - if a security manager exists and its checkPermission method    *             doesn't allow getting the ProtectionDomain    */
DECL|method|getCurrentCommandPath ()
specifier|public
specifier|static
name|String
name|getCurrentCommandPath
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|Slider
operator|.
name|class
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
comment|/**    * return the HDFS path where the application package has been uploaded    * manually or by using slider client (install package command)    *     * @param conf configuration    * @return    */
DECL|method|getApplicationDefinitionPath (ConfTreeOperations conf)
specifier|public
specifier|static
name|String
name|getApplicationDefinitionPath
parameter_list|(
name|ConfTreeOperations
name|conf
parameter_list|)
throws|throws
name|BadConfigException
block|{
return|return
name|getApplicationDefinitionPath
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * return the HDFS path where the application package has been uploaded    * manually or by using slider client (install package command)    *    * @param conf configuration    * @param roleGroup name of component    * @return    */
DECL|method|getApplicationDefinitionPath (ConfTreeOperations conf, String roleGroup)
specifier|public
specifier|static
name|String
name|getApplicationDefinitionPath
parameter_list|(
name|ConfTreeOperations
name|conf
parameter_list|,
name|String
name|roleGroup
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|appDefPath
init|=
name|conf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getMandatoryOption
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleGroup
operator|!=
literal|null
condition|)
block|{
name|MapOperations
name|component
init|=
name|conf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|appDefPath
operator|=
name|component
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|,
name|appDefPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appDefPath
return|;
block|}
comment|/**    * return the path to the slider-client.xml used by the current running    * slider command    *    * @throws SecurityException    *             - if a security manager exists and its checkPermission method    *             denies access to the class loader for the class    */
DECL|method|getClientConfigPath ()
specifier|public
specifier|static
name|String
name|getClientConfigPath
parameter_list|()
block|{
name|URL
name|path
init|=
name|ConfigHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_CLIENT_XML
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|,
literal|"Failed to locate resource "
operator|+
name|SliderKeys
operator|.
name|SLIDER_CLIENT_XML
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * validate if slider-client.xml under the path can be opened    *    * @throws IOException    *             : the file can't be found or open    */
DECL|method|validateClientConfigFile ()
specifier|public
specifier|static
name|void
name|validateClientConfigFile
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|resURL
init|=
name|SliderVersionInfo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_CLIENT_XML
argument_list|)
decl_stmt|;
if|if
condition|(
name|resURL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"slider-client.xml doesn't exist on the path: "
operator|+
name|getClientConfigPath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|InputStream
name|inStream
init|=
name|resURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|inStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"slider-client.xml can't be opened"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"slider-client.xml can't be opened: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * validate if a file on HDFS can be open    *    * @throws IOException the file can't be found or opened    * @throws URISyntaxException    */
DECL|method|validateHDFSFile (SliderFileSystem sliderFileSystem, String pathStr)
specifier|public
specifier|static
name|void
name|validateHDFSFile
parameter_list|(
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|String
name|pathStr
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
try|try
init|(
name|InputStream
name|inputStream
init|=
name|sliderFileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|pathStr
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HDFS file "
operator|+
name|pathStr
operator|+
literal|" can't be opened"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * return the version and path of the JDK invoking the current running    * slider command    *    * @throws SecurityException    *             - if a security manager exists and its checkPropertyAccess    *             method doesn't allow access to the specified system property.    */
DECL|method|getJDKInfo ()
specifier|public
specifier|static
name|String
name|getJDKInfo
parameter_list|()
block|{
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
name|String
name|javaHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
return|return
literal|"The version of the JDK invoking the current running slider command: "
operator|+
name|version
operator|+
literal|"; The path to it is: "
operator|+
name|javaHome
return|;
block|}
comment|/**    * return a description of whether the current user has created credential    * cache files from kerberos servers    *    * @throws IOException    * @throws BadConfigException    * @throws SecurityException    *             - if a security manager exists and its checkPropertyAccess    *             method doesn't allow access to the specified system property.    */
DECL|method|checkCredentialCacheFile ()
specifier|public
specifier|static
name|String
name|checkCredentialCacheFile
parameter_list|()
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|result
operator|=
name|Shell
operator|.
name|execCommand
argument_list|(
literal|"klist"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Compare the times of two applications: most recent app comes first    * Specifically: the one whose start time value is greater.    */
DECL|class|MostRecentlyStartedAppFirst
specifier|private
specifier|static
class|class
name|MostRecentlyStartedAppFirst
implements|implements
name|Comparator
argument_list|<
name|ApplicationReport
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (ApplicationReport r1, ApplicationReport r2)
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationReport
name|r1
parameter_list|,
name|ApplicationReport
name|r2
parameter_list|)
block|{
name|long
name|x
init|=
name|r1
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|y
init|=
name|r2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|compareTwoLongsReverse
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
block|}
comment|/**    * Compare the times of two applications: most recent app comes first.    * "Recent"== the app whose start time<i>or finish time</i> is the greatest.    */
DECL|class|MostRecentlyStartedOrFinishedFirst
specifier|private
specifier|static
class|class
name|MostRecentlyStartedOrFinishedFirst
implements|implements
name|Comparator
argument_list|<
name|ApplicationReport
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (ApplicationReport r1, ApplicationReport r2)
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationReport
name|r1
parameter_list|,
name|ApplicationReport
name|r2
parameter_list|)
block|{
name|long
name|started1
init|=
name|r1
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|started2
init|=
name|r2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|finished1
init|=
name|r1
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|long
name|finished2
init|=
name|r2
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|long
name|lastEvent1
init|=
name|Math
operator|.
name|max
argument_list|(
name|started1
argument_list|,
name|finished1
argument_list|)
decl_stmt|;
name|long
name|lastEvent2
init|=
name|Math
operator|.
name|max
argument_list|(
name|started2
argument_list|,
name|finished2
argument_list|)
decl_stmt|;
return|return
name|compareTwoLongsReverse
argument_list|(
name|lastEvent1
argument_list|,
name|lastEvent2
argument_list|)
return|;
block|}
block|}
comment|/**    * Compare the times of two applications: most recently finished app comes first    * Specifically: the one whose finish time value is greater.    */
DECL|class|MostRecentAppFinishFirst
specifier|private
specifier|static
class|class
name|MostRecentAppFinishFirst
implements|implements
name|Comparator
argument_list|<
name|ApplicationReport
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (ApplicationReport r1, ApplicationReport r2)
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationReport
name|r1
parameter_list|,
name|ApplicationReport
name|r2
parameter_list|)
block|{
name|long
name|x
init|=
name|r1
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|long
name|y
init|=
name|r2
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
return|return
name|compareTwoLongsReverse
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
block|}
comment|/**    * Compare two long values for sorting. As the return value for     * comparators must be int, the simple value of<code>x-y</code>    * is inapplicable    * @param x x value    * @param y y value    * @return +ve if x is less than y, -ve if y is greater than x; 0 for equality    */
DECL|method|compareTwoLongsReverse (long x, long y)
specifier|public
specifier|static
name|int
name|compareTwoLongsReverse
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|<
name|y
operator|)
condition|?
literal|1
else|:
operator|(
operator|(
name|x
operator|==
name|y
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
return|;
block|}
DECL|method|getSystemEnv (String property)
specifier|public
specifier|static
name|String
name|getSystemEnv
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|System
operator|.
name|getenv
argument_list|(
name|property
argument_list|)
return|;
block|}
DECL|method|getSystemEnv ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSystemEnv
parameter_list|()
block|{
return|return
name|System
operator|.
name|getenv
argument_list|()
return|;
block|}
DECL|method|requestToString (AMRMClient.ContainerRequest request)
specifier|public
specifier|static
name|String
name|requestToString
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|request
operator|!=
literal|null
argument_list|,
literal|"Null request"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|request
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"relaxLocality="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|String
name|labels
init|=
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"nodeLabels="
argument_list|)
operator|.
name|append
argument_list|(
name|labels
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|request
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Nodes = [ "
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|nodes
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|NODE_LIST_LIMIT
argument_list|,
name|size
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|>
name|NODE_LIST_LIMIT
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"...(total %d entries)"
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]; "
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|racks
init|=
name|request
operator|.
name|getRacks
argument_list|()
decl_stmt|;
if|if
condition|(
name|racks
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"racks = ["
argument_list|)
operator|.
name|append
argument_list|(
name|join
argument_list|(
name|racks
argument_list|,
literal|", "
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]; "
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|trimPrefix (String prefix)
specifier|public
specifier|static
name|String
name|trimPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|endsWith
argument_list|(
name|COMPONENT_SEPARATOR
argument_list|)
condition|)
block|{
return|return
name|prefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|prefix
return|;
block|}
DECL|method|createNameTag (String name)
specifier|public
specifier|static
name|String
name|createNameTag
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|"Name: "
operator|+
name|name
return|;
block|}
DECL|method|createVersionTag (String version)
specifier|public
specifier|static
name|String
name|createVersionTag
parameter_list|(
name|String
name|version
parameter_list|)
block|{
return|return
literal|"Version: "
operator|+
name|version
return|;
block|}
DECL|method|createDescriptionTag (String description)
specifier|public
specifier|static
name|String
name|createDescriptionTag
parameter_list|(
name|String
name|description
parameter_list|)
block|{
return|return
literal|"Description: "
operator|+
name|description
return|;
block|}
comment|/**    * Get all YarnApplicationState values which signify that an application is    * in RUNNING or pre-RUNNING state.    *    * @return all live app states    */
DECL|method|getAllLiveAppStates ()
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|getAllLiveAppStates
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|range
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
return|;
block|}
comment|/**    * Get all YarnApplicationState values which signify that an application is    * not live, which means it is in one of the post RUNNING states.    *    * @return all non live app states    */
DECL|method|getAllNonLiveAppStates ()
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|getAllNonLiveAppStates
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|range
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
return|;
block|}
block|}
end_class

end_unit

