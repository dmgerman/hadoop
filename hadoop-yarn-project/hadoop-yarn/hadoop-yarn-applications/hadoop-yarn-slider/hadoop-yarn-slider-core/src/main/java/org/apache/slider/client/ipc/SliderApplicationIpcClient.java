begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|SliderClusterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ApplicationLivenessInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ComponentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformationList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|PingInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|SliderApplicationApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NoSuchNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of the Slider RESTy Application API over IPC.  *<p>  * Operations are executed via the {@link SliderClusterOperations}  * instance passed in; raised exceptions may be converted into ones  * consistent with the REST API.  */
end_comment

begin_class
DECL|class|SliderApplicationIpcClient
specifier|public
class|class
name|SliderApplicationIpcClient
implements|implements
name|SliderApplicationApi
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderApplicationIpcClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|operations
specifier|private
specifier|final
name|SliderClusterOperations
name|operations
decl_stmt|;
DECL|method|SliderApplicationIpcClient (SliderClusterOperations operations)
specifier|public
name|SliderApplicationIpcClient
parameter_list|(
name|SliderClusterOperations
name|operations
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|operations
operator|!=
literal|null
argument_list|,
literal|"null operations"
argument_list|)
expr_stmt|;
name|this
operator|.
name|operations
operator|=
name|operations
expr_stmt|;
block|}
comment|/**    * Convert received (And potentially unmarshalled) local/remote    * exceptions into the equivalents in the REST API.    * Best effort.     *<p>    * If there is no translation, the original exception is returned.    *<p>    * If a new exception was created, it will have the message of the     * string value of the original exception, and that original    * exception will be the nested cause of this one    * @param exception IOException to convert    * @return an exception to throw    */
DECL|method|convert (IOException exception)
specifier|private
name|IOException
name|convert
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|IOException
name|result
init|=
name|exception
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|NoSuchNodeException
condition|)
block|{
name|result
operator|=
operator|new
name|FileNotFoundException
argument_list|(
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: remap any other exceptions
block|}
return|return
name|result
return|;
block|}
DECL|method|SliderApplicationIpcClient (SliderClusterProtocol proxy)
specifier|public
name|SliderApplicationIpcClient
parameter_list|(
name|SliderClusterProtocol
name|proxy
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|SliderClusterOperations
argument_list|(
name|proxy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDesiredModel ()
specifier|public
name|AggregateConf
name|getDesiredModel
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getModelDesired
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDesiredAppconf ()
specifier|public
name|ConfTreeOperations
name|getDesiredAppconf
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getModelDesiredAppconf
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDesiredResources ()
specifier|public
name|ConfTreeOperations
name|getDesiredResources
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getModelDesiredResources
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|putDesiredResources (ConfTree updated)
specifier|public
name|void
name|putDesiredResources
parameter_list|(
name|ConfTree
name|updated
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|operations
operator|.
name|flex
argument_list|(
name|updated
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResolvedModel ()
specifier|public
name|AggregateConf
name|getResolvedModel
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getModelResolved
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResolvedAppconf ()
specifier|public
name|ConfTreeOperations
name|getResolvedAppconf
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getModelResolvedAppconf
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResolvedResources ()
specifier|public
name|ConfTreeOperations
name|getResolvedResources
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getModelResolvedResources
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveResources ()
specifier|public
name|ConfTreeOperations
name|getLiveResources
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getLiveResources
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|enumContainers ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerInformation
argument_list|>
name|enumContainers
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|enumContainers
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainer (String containerId)
specifier|public
name|ContainerInformation
name|getContainer
parameter_list|(
name|String
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|enumComponents ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInformation
argument_list|>
name|enumComponents
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|enumComponents
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getComponent (String componentName)
specifier|public
name|ComponentInformation
name|getComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveNodes ()
specifier|public
name|NodeInformationList
name|getLiveNodes
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getLiveNodes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveNode (String hostname)
specifier|public
name|NodeInformation
name|getLiveNode
parameter_list|(
name|String
name|hostname
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getLiveNode
argument_list|(
name|hostname
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|ping (String text)
specifier|public
name|PingInformation
name|ping
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|stop (String text)
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|operations
operator|.
name|stop
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationLiveness ()
specifier|public
name|ApplicationLivenessInformation
name|getApplicationLiveness
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|operations
operator|.
name|getApplicationLiveness
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IPC implementation of SliderApplicationApi bonded to "
operator|+
name|operations
return|;
block|}
block|}
end_class

end_unit

