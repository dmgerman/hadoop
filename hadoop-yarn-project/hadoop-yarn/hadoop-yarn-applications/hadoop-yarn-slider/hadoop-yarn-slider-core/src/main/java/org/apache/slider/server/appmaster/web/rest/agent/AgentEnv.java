begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.rest.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|annotations
operator|.
name|SerializedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|AgentEnv
specifier|public
class|class
name|AgentEnv
block|{
comment|/**    * Various directories, configurable in<code>ambari-agent.ini</code>    */
DECL|field|stackFoldersAndFiles
specifier|private
name|Directory
index|[]
name|stackFoldersAndFiles
init|=
operator|new
name|Directory
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * Directories that match name<code>/etc/alternatives/*conf</code>    */
DECL|field|alternatives
specifier|private
name|Alternative
index|[]
name|alternatives
init|=
operator|new
name|Alternative
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * List of existing users    */
DECL|field|existingUsers
specifier|private
name|ExistingUser
index|[]
name|existingUsers
init|=
operator|new
name|ExistingUser
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * List of repos    */
DECL|field|existingRepos
specifier|private
name|String
index|[]
name|existingRepos
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * List of packages    */
DECL|field|installedPackages
specifier|private
name|PackageDetail
index|[]
name|installedPackages
init|=
operator|new
name|PackageDetail
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * The host health report    */
DECL|field|hostHealth
specifier|private
name|HostHealth
name|hostHealth
init|=
operator|new
name|HostHealth
argument_list|()
decl_stmt|;
DECL|field|umask
specifier|private
name|Integer
name|umask
decl_stmt|;
DECL|field|iptablesIsRunning
specifier|private
name|Boolean
name|iptablesIsRunning
decl_stmt|;
DECL|method|getUmask ()
specifier|public
name|Integer
name|getUmask
parameter_list|()
block|{
return|return
name|umask
return|;
block|}
DECL|method|setUmask (Integer umask)
specifier|public
name|void
name|setUmask
parameter_list|(
name|Integer
name|umask
parameter_list|)
block|{
name|this
operator|.
name|umask
operator|=
name|umask
expr_stmt|;
block|}
DECL|method|getStackFoldersAndFiles ()
specifier|public
name|Directory
index|[]
name|getStackFoldersAndFiles
parameter_list|()
block|{
return|return
name|stackFoldersAndFiles
return|;
block|}
DECL|method|setStackFoldersAndFiles (Directory[] dirs)
specifier|public
name|void
name|setStackFoldersAndFiles
parameter_list|(
name|Directory
index|[]
name|dirs
parameter_list|)
block|{
name|stackFoldersAndFiles
operator|=
name|dirs
expr_stmt|;
block|}
DECL|method|setExistingUsers (ExistingUser[] users)
specifier|public
name|void
name|setExistingUsers
parameter_list|(
name|ExistingUser
index|[]
name|users
parameter_list|)
block|{
name|existingUsers
operator|=
name|users
expr_stmt|;
block|}
DECL|method|getExistingUsers ()
specifier|public
name|ExistingUser
index|[]
name|getExistingUsers
parameter_list|()
block|{
return|return
name|existingUsers
return|;
block|}
DECL|method|setAlternatives (Alternative[] dirs)
specifier|public
name|void
name|setAlternatives
parameter_list|(
name|Alternative
index|[]
name|dirs
parameter_list|)
block|{
name|alternatives
operator|=
name|dirs
expr_stmt|;
block|}
DECL|method|getAlternatives ()
specifier|public
name|Alternative
index|[]
name|getAlternatives
parameter_list|()
block|{
return|return
name|alternatives
return|;
block|}
DECL|method|setExistingRepos (String[] repos)
specifier|public
name|void
name|setExistingRepos
parameter_list|(
name|String
index|[]
name|repos
parameter_list|)
block|{
name|existingRepos
operator|=
name|repos
expr_stmt|;
block|}
DECL|method|getExistingRepos ()
specifier|public
name|String
index|[]
name|getExistingRepos
parameter_list|()
block|{
return|return
name|existingRepos
return|;
block|}
DECL|method|setInstalledPackages (PackageDetail[] packages)
specifier|public
name|void
name|setInstalledPackages
parameter_list|(
name|PackageDetail
index|[]
name|packages
parameter_list|)
block|{
name|installedPackages
operator|=
name|packages
expr_stmt|;
block|}
DECL|method|getInstalledPackages ()
specifier|public
name|PackageDetail
index|[]
name|getInstalledPackages
parameter_list|()
block|{
return|return
name|installedPackages
return|;
block|}
DECL|method|setHostHealth (HostHealth healthReport)
specifier|public
name|void
name|setHostHealth
parameter_list|(
name|HostHealth
name|healthReport
parameter_list|)
block|{
name|hostHealth
operator|=
name|healthReport
expr_stmt|;
block|}
DECL|method|getHostHealth ()
specifier|public
name|HostHealth
name|getHostHealth
parameter_list|()
block|{
return|return
name|hostHealth
return|;
block|}
DECL|method|getIptablesIsRunning ()
specifier|public
name|Boolean
name|getIptablesIsRunning
parameter_list|()
block|{
return|return
name|iptablesIsRunning
return|;
block|}
DECL|method|setIptablesIsRunning (Boolean iptablesIsRunning)
specifier|public
name|void
name|setIptablesIsRunning
parameter_list|(
name|Boolean
name|iptablesIsRunning
parameter_list|)
block|{
name|this
operator|.
name|iptablesIsRunning
operator|=
name|iptablesIsRunning
expr_stmt|;
block|}
DECL|class|HostHealth
specifier|public
specifier|static
class|class
name|HostHealth
block|{
comment|/**      * Java processes running on the system.  Default empty array.      */
annotation|@
name|SerializedName
argument_list|(
literal|"activeJavaProcs"
argument_list|)
DECL|field|activeJavaProcs
specifier|private
name|JavaProc
index|[]
name|activeJavaProcs
init|=
operator|new
name|JavaProc
index|[
literal|0
index|]
decl_stmt|;
comment|/**      * The current time when agent send the host check report      */
annotation|@
name|SerializedName
argument_list|(
literal|"agentTimeStampAtReporting"
argument_list|)
DECL|field|agentTimeStampAtReporting
specifier|private
name|long
name|agentTimeStampAtReporting
init|=
literal|0
decl_stmt|;
comment|/**      * The current time when host check report was received      */
annotation|@
name|SerializedName
argument_list|(
literal|"serverTimeStampAtReporting"
argument_list|)
DECL|field|serverTimeStampAtReporting
specifier|private
name|long
name|serverTimeStampAtReporting
init|=
literal|0
decl_stmt|;
comment|/**      * Live services running on the agent      */
annotation|@
name|SerializedName
argument_list|(
literal|"liveServices"
argument_list|)
DECL|field|liveServices
specifier|private
name|LiveService
index|[]
name|liveServices
init|=
operator|new
name|LiveService
index|[
literal|0
index|]
decl_stmt|;
DECL|method|setAgentTimeStampAtReporting (long currentTime)
specifier|public
name|void
name|setAgentTimeStampAtReporting
parameter_list|(
name|long
name|currentTime
parameter_list|)
block|{
name|agentTimeStampAtReporting
operator|=
name|currentTime
expr_stmt|;
block|}
DECL|method|getAgentTimeStampAtReporting ()
specifier|public
name|long
name|getAgentTimeStampAtReporting
parameter_list|()
block|{
return|return
name|agentTimeStampAtReporting
return|;
block|}
DECL|method|setServerTimeStampAtReporting (long currentTime)
specifier|public
name|void
name|setServerTimeStampAtReporting
parameter_list|(
name|long
name|currentTime
parameter_list|)
block|{
name|serverTimeStampAtReporting
operator|=
name|currentTime
expr_stmt|;
block|}
DECL|method|getServerTimeStampAtReporting ()
specifier|public
name|long
name|getServerTimeStampAtReporting
parameter_list|()
block|{
return|return
name|serverTimeStampAtReporting
return|;
block|}
DECL|method|setActiveJavaProcs (JavaProc[] procs)
specifier|public
name|void
name|setActiveJavaProcs
parameter_list|(
name|JavaProc
index|[]
name|procs
parameter_list|)
block|{
name|activeJavaProcs
operator|=
name|procs
expr_stmt|;
block|}
DECL|method|getActiveJavaProcs ()
specifier|public
name|JavaProc
index|[]
name|getActiveJavaProcs
parameter_list|()
block|{
return|return
name|activeJavaProcs
return|;
block|}
DECL|method|setLiveServices (LiveService[] services)
specifier|public
name|void
name|setLiveServices
parameter_list|(
name|LiveService
index|[]
name|services
parameter_list|)
block|{
name|liveServices
operator|=
name|services
expr_stmt|;
block|}
DECL|method|getLiveServices ()
specifier|public
name|LiveService
index|[]
name|getLiveServices
parameter_list|()
block|{
return|return
name|liveServices
return|;
block|}
block|}
DECL|class|PackageDetail
specifier|public
specifier|static
class|class
name|PackageDetail
block|{
annotation|@
name|SerializedName
argument_list|(
literal|"name"
argument_list|)
DECL|field|pkgName
specifier|private
name|String
name|pkgName
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"version"
argument_list|)
DECL|field|pkgVersion
specifier|private
name|String
name|pkgVersion
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"repoName"
argument_list|)
DECL|field|pkgRepoName
specifier|private
name|String
name|pkgRepoName
decl_stmt|;
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|pkgName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|pkgName
return|;
block|}
DECL|method|setVersion (String version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|pkgVersion
operator|=
name|version
expr_stmt|;
block|}
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|pkgVersion
return|;
block|}
DECL|method|setRepoName (String repoName)
specifier|public
name|void
name|setRepoName
parameter_list|(
name|String
name|repoName
parameter_list|)
block|{
name|pkgRepoName
operator|=
name|repoName
expr_stmt|;
block|}
DECL|method|getRepoName ()
specifier|public
name|String
name|getRepoName
parameter_list|()
block|{
return|return
name|pkgRepoName
return|;
block|}
block|}
comment|/**    * Represents information about a directory of interest.    */
DECL|class|Directory
specifier|public
specifier|static
class|class
name|Directory
block|{
annotation|@
name|SerializedName
argument_list|(
literal|"name"
argument_list|)
DECL|field|dirName
specifier|private
name|String
name|dirName
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"type"
argument_list|)
DECL|field|dirType
specifier|private
name|String
name|dirType
decl_stmt|;
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|dirName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|dirName
return|;
block|}
DECL|method|setType (String type)
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|dirType
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|dirType
return|;
block|}
block|}
comment|/**    * Represents information about running java processes.    */
DECL|class|JavaProc
specifier|public
specifier|static
class|class
name|JavaProc
block|{
annotation|@
name|SerializedName
argument_list|(
literal|"user"
argument_list|)
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"pid"
argument_list|)
DECL|field|pid
specifier|private
name|int
name|pid
init|=
literal|0
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"hadoop"
argument_list|)
DECL|field|is_hadoop
specifier|private
name|boolean
name|is_hadoop
init|=
literal|false
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"command"
argument_list|)
DECL|field|command
specifier|private
name|String
name|command
decl_stmt|;
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|setPid (int pid)
specifier|public
name|void
name|setPid
parameter_list|(
name|int
name|pid
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|pid
expr_stmt|;
block|}
DECL|method|getPid ()
specifier|public
name|int
name|getPid
parameter_list|()
block|{
return|return
name|pid
return|;
block|}
DECL|method|setHadoop (boolean hadoop)
specifier|public
name|void
name|setHadoop
parameter_list|(
name|boolean
name|hadoop
parameter_list|)
block|{
name|is_hadoop
operator|=
name|hadoop
expr_stmt|;
block|}
DECL|method|isHadoop ()
specifier|public
name|boolean
name|isHadoop
parameter_list|()
block|{
return|return
name|is_hadoop
return|;
block|}
DECL|method|setCommand (String cmd)
specifier|public
name|void
name|setCommand
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|command
operator|=
name|cmd
expr_stmt|;
block|}
DECL|method|getCommand ()
specifier|public
name|String
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
block|}
DECL|class|Alternative
specifier|public
specifier|static
class|class
name|Alternative
block|{
annotation|@
name|SerializedName
argument_list|(
literal|"name"
argument_list|)
DECL|field|altName
specifier|private
name|String
name|altName
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"target"
argument_list|)
DECL|field|altTarget
specifier|private
name|String
name|altTarget
decl_stmt|;
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|altName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|altName
return|;
block|}
DECL|method|setTarget (String target)
specifier|public
name|void
name|setTarget
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|altTarget
operator|=
name|target
expr_stmt|;
block|}
DECL|method|getTarget ()
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|altTarget
return|;
block|}
block|}
DECL|class|LiveService
specifier|public
specifier|static
class|class
name|LiveService
block|{
annotation|@
name|SerializedName
argument_list|(
literal|"name"
argument_list|)
DECL|field|svcName
specifier|private
name|String
name|svcName
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"status"
argument_list|)
DECL|field|svcStatus
specifier|private
name|String
name|svcStatus
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"desc"
argument_list|)
DECL|field|svcDesc
specifier|private
name|String
name|svcDesc
decl_stmt|;
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|svcName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|svcName
return|;
block|}
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|svcStatus
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|svcStatus
return|;
block|}
DECL|method|setDesc (String desc)
specifier|public
name|void
name|setDesc
parameter_list|(
name|String
name|desc
parameter_list|)
block|{
name|svcDesc
operator|=
name|desc
expr_stmt|;
block|}
DECL|method|getDesc ()
specifier|public
name|String
name|getDesc
parameter_list|()
block|{
return|return
name|svcDesc
return|;
block|}
block|}
DECL|class|ExistingUser
specifier|public
specifier|static
class|class
name|ExistingUser
block|{
annotation|@
name|SerializedName
argument_list|(
literal|"name"
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"homeDir"
argument_list|)
DECL|field|homeDir
specifier|private
name|String
name|homeDir
decl_stmt|;
annotation|@
name|SerializedName
argument_list|(
literal|"status"
argument_list|)
DECL|field|status
specifier|private
name|String
name|status
decl_stmt|;
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|name
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setUserHomeDir (String userHomeDir)
specifier|public
name|void
name|setUserHomeDir
parameter_list|(
name|String
name|userHomeDir
parameter_list|)
block|{
name|homeDir
operator|=
name|userHomeDir
expr_stmt|;
block|}
DECL|method|getUserHomeDir ()
specifier|public
name|String
name|getUserHomeDir
parameter_list|()
block|{
return|return
name|homeDir
return|;
block|}
DECL|method|setUserStatus (String userStatus)
specifier|public
name|void
name|setUserStatus
parameter_list|(
name|String
name|userStatus
parameter_list|)
block|{
name|status
operator|=
name|userStatus
expr_stmt|;
block|}
DECL|method|getUserStatus ()
specifier|public
name|String
name|getUserStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
block|}
end_class

end_unit

