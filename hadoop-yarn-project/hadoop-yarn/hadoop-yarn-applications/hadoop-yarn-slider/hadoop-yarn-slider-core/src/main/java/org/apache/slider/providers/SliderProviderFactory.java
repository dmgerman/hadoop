begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|AgentKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for factories  */
end_comment

begin_class
DECL|class|SliderProviderFactory
specifier|public
specifier|abstract
class|class
name|SliderProviderFactory
extends|extends
name|Configured
block|{
DECL|field|DEFAULT_CLUSTER_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CLUSTER_TYPE
init|=
name|AgentKeys
operator|.
name|PROVIDER_AGENT
decl_stmt|;
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderProviderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PROVIDER_NOT_FOUND
specifier|public
specifier|static
specifier|final
name|String
name|PROVIDER_NOT_FOUND
init|=
literal|"Unable to find provider of application type %s"
decl_stmt|;
DECL|method|SliderProviderFactory (Configuration conf)
specifier|public
name|SliderProviderFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|SliderProviderFactory ()
specifier|protected
name|SliderProviderFactory
parameter_list|()
block|{   }
DECL|method|createClientProvider ()
specifier|public
specifier|abstract
name|AbstractClientProvider
name|createClientProvider
parameter_list|()
function_decl|;
DECL|method|createServerProvider ()
specifier|public
specifier|abstract
name|ProviderService
name|createServerProvider
parameter_list|()
function_decl|;
comment|/**    * Create a provider for a specific application    * @param application app    * @return app instance    * @throws SliderException on any instantiation problem    */
DECL|method|createSliderProviderFactory (String application)
specifier|public
specifier|static
name|SliderProviderFactory
name|createSliderProviderFactory
parameter_list|(
name|String
name|application
parameter_list|)
throws|throws
name|SliderException
block|{
name|Configuration
name|conf
init|=
name|loadSliderConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|application
operator|=
name|DEFAULT_CLUSTER_TYPE
expr_stmt|;
block|}
name|String
name|providerKey
init|=
name|String
operator|.
name|format
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_PROVIDER
argument_list|,
name|application
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Treating {} as a classname"
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|String
name|name
init|=
literal|"classname.key"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|providerKey
operator|=
name|name
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|SliderProviderFactory
argument_list|>
name|providerClass
decl_stmt|;
try|try
block|{
name|providerClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|providerKey
argument_list|,
literal|null
argument_list|,
name|SliderProviderFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|e
argument_list|,
literal|"Failed to load provider %s: %s"
argument_list|,
name|application
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|providerClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|PROVIDER_NOT_FOUND
argument_list|,
name|application
argument_list|)
throw|;
block|}
name|Exception
name|ex
decl_stmt|;
try|try
block|{
name|SliderProviderFactory
name|providerFactory
init|=
name|providerClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|providerFactory
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|providerFactory
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
comment|//by here the operation failed and ex is set to the value
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|ex
argument_list|,
literal|"Failed to create an instance of %s : %s"
argument_list|,
name|providerClass
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|/**    * Load a configuration with the {@link SliderKeys#SLIDER_XML} resource    * included    * @return a configuration instance    */
DECL|method|loadSliderConfiguration ()
specifier|public
specifier|static
name|Configuration
name|loadSliderConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_XML
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

