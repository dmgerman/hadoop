begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|//import java.nio.file.Files;
end_comment

begin_comment
comment|//import java.nio.file.Path;
end_comment

begin_comment
comment|//import java.nio.file.Paths;
end_comment

begin_comment
comment|//import java.nio.file.attribute.PosixFilePermission;
end_comment

begin_comment
comment|//import java.nio.file.attribute.PosixFilePermissions;
end_comment

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SecurityUtils
specifier|public
class|class
name|SecurityUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecurityUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CA_CONFIG_CONTENTS
specifier|private
specifier|static
name|String
name|CA_CONFIG_CONTENTS
init|=
literal|"HOME            = .\n"
operator|+
literal|"RANDFILE        = $ENV::HOME/.rnd\n\n"
operator|+
literal|"[ ca ]\n"
operator|+
literal|"default_ca             = CA_CLIENT\n"
operator|+
literal|"[ CA_CLIENT ]\n"
operator|+
literal|"dir                    = ${SEC_DIR}/db\n"
operator|+
literal|"certs                  = $dir/certs\n"
operator|+
literal|"new_certs_dir          = $dir/newcerts\n"
operator|+
literal|"\n"
operator|+
literal|"database               = $dir/index.txt\n"
operator|+
literal|"serial                 = $dir/serial\n"
operator|+
literal|"default_days           = 365    \n"
operator|+
literal|"\n"
operator|+
literal|"default_crl_days       = 7  \n"
operator|+
literal|"default_md             = sha256 \n"
operator|+
literal|"\n"
operator|+
literal|"policy                 = policy_anything \n"
operator|+
literal|"\n"
operator|+
literal|"[ policy_anything ]\n"
operator|+
literal|"countryName            = optional\n"
operator|+
literal|"stateOrProvinceName    = optional\n"
operator|+
literal|"localityName           = optional\n"
operator|+
literal|"organizationName       = optional\n"
operator|+
literal|"organizationalUnitName = optional\n"
operator|+
literal|"commonName             = optional\n"
operator|+
literal|"emailAddress           = optional\n"
operator|+
literal|"\n"
operator|+
literal|"[req]\n"
operator|+
literal|"distinguished_name     = req_distinguished_name\n"
operator|+
literal|"\n"
operator|+
literal|"[ req_distinguished_name ]\n"
operator|+
literal|"\n"
operator|+
literal|"[ jdk7_ca ]\n"
operator|+
literal|"subjectKeyIdentifier = hash\n"
operator|+
literal|"authorityKeyIdentifier = keyid:always,issuer:always\n"
operator|+
literal|"basicConstraints = CA:true\n"
decl_stmt|;
DECL|field|PASS_TOKEN
specifier|private
specifier|static
specifier|final
name|String
name|PASS_TOKEN
init|=
literal|"pass:"
decl_stmt|;
DECL|field|keystorePass
specifier|private
specifier|static
name|String
name|keystorePass
decl_stmt|;
DECL|field|securityDir
specifier|private
specifier|static
name|String
name|securityDir
decl_stmt|;
DECL|method|logOpenSslExitCode (String command, int exitCode)
specifier|public
specifier|static
name|void
name|logOpenSslExitCode
parameter_list|(
name|String
name|command
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
if|if
condition|(
name|exitCode
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getOpenSslCommandResult
argument_list|(
name|command
argument_list|,
name|exitCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getOpenSslCommandResult
argument_list|(
name|command
argument_list|,
name|exitCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hideOpenSslPassword (String command)
specifier|public
specifier|static
name|String
name|hideOpenSslPassword
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|int
name|start
init|=
name|command
operator|.
name|indexOf
argument_list|(
name|PASS_TOKEN
argument_list|)
decl_stmt|;
while|while
condition|(
name|start
operator|>=
literal|0
condition|)
block|{
name|start
operator|+=
name|PASS_TOKEN
operator|.
name|length
argument_list|()
expr_stmt|;
name|CharSequence
name|cs
init|=
name|command
operator|.
name|subSequence
argument_list|(
name|start
argument_list|,
name|command
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|,
name|start
argument_list|)
argument_list|)
decl_stmt|;
name|command
operator|=
name|command
operator|.
name|replace
argument_list|(
name|cs
argument_list|,
literal|"****"
argument_list|)
expr_stmt|;
name|start
operator|=
name|command
operator|.
name|indexOf
argument_list|(
name|PASS_TOKEN
argument_list|,
name|start
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
DECL|method|getOpenSslCommandResult (String command, int exitCode)
specifier|public
specifier|static
name|String
name|getOpenSslCommandResult
parameter_list|(
name|String
name|command
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"Command "
argument_list|)
operator|.
name|append
argument_list|(
name|hideOpenSslPassword
argument_list|(
name|command
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" was finished with exit code: "
argument_list|)
operator|.
name|append
argument_list|(
name|exitCode
argument_list|)
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
operator|.
name|append
argument_list|(
name|getOpenSslExitCodeDescription
argument_list|(
name|exitCode
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getOpenSslExitCodeDescription (int exitCode)
specifier|private
specifier|static
name|String
name|getOpenSslExitCodeDescription
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
switch|switch
condition|(
name|exitCode
condition|)
block|{
case|case
literal|0
case|:
block|{
return|return
literal|"the operation was completed successfully."
return|;
block|}
case|case
literal|1
case|:
block|{
return|return
literal|"an error occurred parsing the command options."
return|;
block|}
case|case
literal|2
case|:
block|{
return|return
literal|"one of the input files could not be read."
return|;
block|}
case|case
literal|3
case|:
block|{
return|return
literal|"an error occurred creating the PKCS#7 file or when reading the MIME message."
return|;
block|}
case|case
literal|4
case|:
block|{
return|return
literal|"an error occurred decrypting or verifying the message."
return|;
block|}
case|case
literal|5
case|:
block|{
return|return
literal|"the message was verified correctly but an error occurred writing out the signers certificates."
return|;
block|}
default|default:
return|return
literal|"unsupported code"
return|;
block|}
block|}
DECL|method|writeCaConfigFile (String path)
specifier|public
specifier|static
name|void
name|writeCaConfigFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|contents
init|=
name|CA_CONFIG_CONTENTS
operator|.
name|replace
argument_list|(
literal|"${SEC_DIR}"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|,
literal|"ca.config"
argument_list|)
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeystorePass ()
specifier|public
specifier|static
name|String
name|getKeystorePass
parameter_list|()
block|{
return|return
name|keystorePass
return|;
block|}
DECL|method|getSecurityDir ()
specifier|public
specifier|static
name|String
name|getSecurityDir
parameter_list|()
block|{
return|return
name|securityDir
return|;
block|}
DECL|method|initializeSecurityParameters (MapOperations configMap)
specifier|public
specifier|static
name|void
name|initializeSecurityParameters
parameter_list|(
name|MapOperations
name|configMap
parameter_list|)
block|{
name|initializeSecurityParameters
argument_list|(
name|configMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeSecurityParameters (MapOperations configMap, boolean persistPassword)
specifier|public
specifier|static
name|void
name|initializeSecurityParameters
parameter_list|(
name|MapOperations
name|configMap
parameter_list|,
name|boolean
name|persistPassword
parameter_list|)
block|{
name|String
name|keyStoreLocation
init|=
name|configMap
operator|.
name|getOption
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_KEYSTORE_LOCATION
argument_list|,
name|getDefaultKeystoreLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStoreLocation
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_KEYSTORE_LOCATION
operator|+
literal|" is not specified. Unable to initialize security params."
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|secDirFile
init|=
operator|new
name|File
argument_list|(
name|keyStoreLocation
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|secDirFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// create entire required directory structure
name|File
name|dbDir
init|=
operator|new
name|File
argument_list|(
name|secDirFile
argument_list|,
literal|"db"
argument_list|)
decl_stmt|;
name|File
name|newCertsDir
init|=
operator|new
name|File
argument_list|(
name|dbDir
argument_list|,
literal|"newcerts"
argument_list|)
decl_stmt|;
name|newCertsDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|RawLocalFileSystem
name|fileSystem
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileSystem
operator|=
operator|new
name|RawLocalFileSystem
argument_list|()
expr_stmt|;
name|FsPermission
name|permissions
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|dbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|dbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|newCertsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
name|File
name|indexFile
init|=
operator|new
name|File
argument_list|(
name|dbDir
argument_list|,
literal|"index.txt"
argument_list|)
decl_stmt|;
name|indexFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|SecurityUtils
operator|.
name|writeCaConfigFile
argument_list|(
name|secDirFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create SSL configuration directories/files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileSystem
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to close fileSystem"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// need to create the password
block|}
name|keystorePass
operator|=
name|getKeystorePassword
argument_list|(
name|secDirFile
argument_list|,
name|persistPassword
argument_list|)
expr_stmt|;
name|securityDir
operator|=
name|secDirFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
DECL|method|getKeystorePassword (File secDirFile, boolean persistPassword)
specifier|private
specifier|static
name|String
name|getKeystorePassword
parameter_list|(
name|File
name|secDirFile
parameter_list|,
name|boolean
name|persistPassword
parameter_list|)
block|{
name|File
name|passFile
init|=
operator|new
name|File
argument_list|(
name|secDirFile
argument_list|,
name|SliderKeys
operator|.
name|CRT_PASS_FILE_NAME
argument_list|)
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|passFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating keystore password"
argument_list|)
expr_stmt|;
name|password
operator|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|SliderKeys
operator|.
name|PASS_LEN
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistPassword
condition|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|passFile
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|passFile
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|passFile
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating certificate password file"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading password from existing file"
argument_list|)
expr_stmt|;
try|try
block|{
name|password
operator|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|passFile
argument_list|)
expr_stmt|;
name|password
operator|=
name|password
operator|.
name|replaceAll
argument_list|(
literal|"\\p{Cntrl}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|password
return|;
block|}
DECL|method|getDefaultKeystoreLocation ()
specifier|private
specifier|static
name|String
name|getDefaultKeystoreLocation
parameter_list|()
block|{
name|File
name|workDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|FileUtils
operator|.
name|getTempDirectory
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/sec"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|workDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create temporary security directory"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create security directory"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|workDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|SliderKeys
operator|.
name|SECURITY_DIR
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|SliderKeys
operator|.
name|KEYSTORE_FILE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

