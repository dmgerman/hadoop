begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.rest
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Operations on the JDK UrlConnection class.  *  */
end_comment

begin_class
DECL|class|UrlConnectionOperations
specifier|public
class|class
name|UrlConnectionOperations
extends|extends
name|Configured
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UrlConnectionOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectionFactory
specifier|private
name|SliderURLConnectionFactory
name|connectionFactory
decl_stmt|;
DECL|field|useSpnego
specifier|private
name|boolean
name|useSpnego
init|=
literal|false
decl_stmt|;
comment|/**    * Create an instance off the configuration. The SPNEGO policy    * is derived from the current UGI settings.    * @param conf config    */
DECL|method|UrlConnectionOperations (Configuration conf)
specifier|public
name|UrlConnectionOperations
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
name|SliderURLConnectionFactory
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SPNEGO is enabled"
argument_list|)
expr_stmt|;
name|setUseSpnego
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isUseSpnego ()
specifier|public
name|boolean
name|isUseSpnego
parameter_list|()
block|{
return|return
name|useSpnego
return|;
block|}
DECL|method|setUseSpnego (boolean useSpnego)
specifier|public
name|void
name|setUseSpnego
parameter_list|(
name|boolean
name|useSpnego
parameter_list|)
block|{
name|this
operator|.
name|useSpnego
operator|=
name|useSpnego
expr_stmt|;
block|}
comment|/**    * Opens a url with cache disabled, redirect handled in     * (JDK) implementation.    *    * @param url to open    * @return URLConnection    * @throws IOException    * @throws AuthenticationException authentication failure    */
DECL|method|openConnection (URL url)
specifier|public
name|HttpURLConnection
name|openConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|url
operator|.
name|getPort
argument_list|()
operator|!=
literal|0
argument_list|,
literal|"no port"
argument_list|)
expr_stmt|;
return|return
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|useSpnego
argument_list|)
return|;
block|}
block|}
end_class

end_unit

