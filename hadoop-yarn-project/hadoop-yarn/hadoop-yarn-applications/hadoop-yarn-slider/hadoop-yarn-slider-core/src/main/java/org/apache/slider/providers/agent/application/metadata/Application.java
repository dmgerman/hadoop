begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Application type defined in the metainfo  */
end_comment

begin_class
DECL|class|Application
specifier|public
class|class
name|Application
extends|extends
name|AbstractMetainfoSchema
block|{
DECL|field|exportedConfigs
name|String
name|exportedConfigs
decl_stmt|;
DECL|field|exportGroups
name|List
argument_list|<
name|ExportGroup
argument_list|>
name|exportGroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|osSpecifics
name|List
argument_list|<
name|OSSpecific
argument_list|>
name|osSpecifics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|commandOrders
name|List
argument_list|<
name|CommandOrder
argument_list|>
name|commandOrders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|packages
name|List
argument_list|<
name|Package
argument_list|>
name|packages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|components
specifier|private
name|List
argument_list|<
name|Component
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Application ()
specifier|public
name|Application
parameter_list|()
block|{   }
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getComment ()
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
DECL|method|setComment (String comment)
specifier|public
name|void
name|setComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
block|}
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|setVersion (String version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
DECL|method|getExportedConfigs ()
specifier|public
name|String
name|getExportedConfigs
parameter_list|()
block|{
return|return
name|exportedConfigs
return|;
block|}
DECL|method|setExportedConfigs (String exportedConfigs)
specifier|public
name|void
name|setExportedConfigs
parameter_list|(
name|String
name|exportedConfigs
parameter_list|)
block|{
name|this
operator|.
name|exportedConfigs
operator|=
name|exportedConfigs
expr_stmt|;
block|}
DECL|method|addConfigFile (ConfigFile configFile)
specifier|public
name|void
name|addConfigFile
parameter_list|(
name|ConfigFile
name|configFile
parameter_list|)
block|{
name|this
operator|.
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"configFiles"
argument_list|)
DECL|method|getConfigFiles ()
specifier|public
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|getConfigFiles
parameter_list|()
block|{
return|return
name|configFiles
return|;
block|}
DECL|method|addComponent (Component component)
specifier|public
name|void
name|addComponent
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|components
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"components"
argument_list|)
DECL|method|getComponents ()
specifier|public
name|List
argument_list|<
name|Component
argument_list|>
name|getComponents
parameter_list|()
block|{
return|return
name|components
return|;
block|}
DECL|method|addExportGroup (ExportGroup exportGroup)
specifier|public
name|void
name|addExportGroup
parameter_list|(
name|ExportGroup
name|exportGroup
parameter_list|)
block|{
name|exportGroups
operator|.
name|add
argument_list|(
name|exportGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"exportGroups"
argument_list|)
DECL|method|getExportGroups ()
specifier|public
name|List
argument_list|<
name|ExportGroup
argument_list|>
name|getExportGroups
parameter_list|()
block|{
return|return
name|exportGroups
return|;
block|}
DECL|method|addOSSpecific (OSSpecific osSpecific)
specifier|public
name|void
name|addOSSpecific
parameter_list|(
name|OSSpecific
name|osSpecific
parameter_list|)
block|{
name|osSpecifics
operator|.
name|add
argument_list|(
name|osSpecific
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonIgnore
DECL|method|getOSSpecifics ()
specifier|public
name|List
argument_list|<
name|OSSpecific
argument_list|>
name|getOSSpecifics
parameter_list|()
block|{
return|return
name|osSpecifics
return|;
block|}
DECL|method|addCommandOrder (CommandOrder commandOrder)
specifier|public
name|void
name|addCommandOrder
parameter_list|(
name|CommandOrder
name|commandOrder
parameter_list|)
block|{
name|commandOrders
operator|.
name|add
argument_list|(
name|commandOrder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"commandOrders"
argument_list|)
DECL|method|getCommandOrders ()
specifier|public
name|List
argument_list|<
name|CommandOrder
argument_list|>
name|getCommandOrders
parameter_list|()
block|{
return|return
name|commandOrders
return|;
block|}
DECL|method|addPackage (Package pkg)
specifier|public
name|void
name|addPackage
parameter_list|(
name|Package
name|pkg
parameter_list|)
block|{
name|packages
operator|.
name|add
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"packages"
argument_list|)
DECL|method|getPackages ()
specifier|public
name|List
argument_list|<
name|Package
argument_list|>
name|getPackages
parameter_list|()
block|{
return|return
name|packages
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"name\": "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"comment\": "
argument_list|)
operator|.
name|append
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"version\" :"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"components\" : {"
argument_list|)
expr_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|components
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|component
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n},"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate (String version)
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|version
parameter_list|)
throws|throws
name|SliderException
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"schema version cannot be null"
argument_list|)
throw|;
block|}
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|"name"
argument_list|,
literal|"application"
argument_list|)
expr_stmt|;
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getVersion
argument_list|()
argument_list|,
literal|"version"
argument_list|,
literal|"application"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"application must contain at least one component"
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|Metainfo
operator|.
name|VERSION_TWO_ZERO
argument_list|)
condition|)
block|{
if|if
condition|(
name|getPackages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"packages is not supported in version "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|Metainfo
operator|.
name|VERSION_TWO_ONE
argument_list|)
condition|)
block|{
if|if
condition|(
name|getOSSpecifics
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"osSpecifics is not supported in version "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|CommandOrder
name|co
range|:
name|getCommandOrders
argument_list|()
control|)
block|{
name|co
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Component
name|comp
range|:
name|getComponents
argument_list|()
control|)
block|{
name|comp
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ConfigFile
name|cf
range|:
name|getConfigFiles
argument_list|()
control|)
block|{
name|cf
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExportGroup
name|eg
range|:
name|getExportGroups
argument_list|()
control|)
block|{
name|eg
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Package
name|pkg
range|:
name|getPackages
argument_list|()
control|)
block|{
name|pkg
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OSSpecific
name|os
range|:
name|getOSSpecifics
argument_list|()
control|)
block|{
name|os
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

