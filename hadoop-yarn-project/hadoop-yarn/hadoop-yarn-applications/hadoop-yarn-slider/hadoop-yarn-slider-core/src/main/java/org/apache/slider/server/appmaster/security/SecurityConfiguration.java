begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_UNAUTHORIZED
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class keeping code security information  */
end_comment

begin_class
DECL|class|SecurityConfiguration
specifier|public
class|class
name|SecurityConfiguration
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecurityConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
DECL|field|application
specifier|private
specifier|final
name|Application
name|application
decl_stmt|;
DECL|field|clusterName
specifier|private
name|String
name|clusterName
decl_stmt|;
DECL|method|SecurityConfiguration (Configuration configuration, Application application, String clusterName)
specifier|public
name|SecurityConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Application
name|application
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|SliderException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|validate ()
specifier|private
name|void
name|validate
parameter_list|()
throws|throws
name|SliderException
block|{
if|if
condition|(
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// TODO use AM configuration rather than app configuration
name|String
name|principal
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_KEYTAB_PRINCIPAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|principal
argument_list|)
condition|)
block|{
comment|// if no login identity is available, fail
name|UserGroupInformation
name|loginUser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|loginUser
operator|=
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|EXIT_UNAUTHORIZED
argument_list|,
name|e
argument_list|,
literal|"No principal configured for the application and "
operator|+
literal|"exception raised during retrieval of login user. "
operator|+
literal|"Unable to proceed with application "
operator|+
literal|"initialization.  Please ensure a value "
operator|+
literal|"for %s exists in the application "
operator|+
literal|"configuration or the login issue is addressed"
argument_list|,
name|SliderXmlConfKeys
operator|.
name|KEY_KEYTAB_PRINCIPAL
argument_list|)
throw|;
block|}
if|if
condition|(
name|loginUser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|EXIT_UNAUTHORIZED
argument_list|,
literal|"No principal configured for the application "
operator|+
literal|"and no login user found. "
operator|+
literal|"Unable to proceed with application "
operator|+
literal|"initialization.  Please ensure a value "
operator|+
literal|"for %s exists in the application "
operator|+
literal|"configuration or the login issue is addressed"
argument_list|,
name|SliderXmlConfKeys
operator|.
name|KEY_KEYTAB_PRINCIPAL
argument_list|)
throw|;
block|}
block|}
comment|// ensure that either local or distributed keytab mechanism is enabled,
comment|// but not both
name|String
name|keytabFullPath
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|)
decl_stmt|;
name|String
name|keytabName
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|keytabFullPath
argument_list|)
operator|&&
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|keytabName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|EXIT_UNAUTHORIZED
argument_list|,
literal|"Both a keytab on the cluster host (%s) and a"
operator|+
literal|" keytab to be retrieved from HDFS (%s) are"
operator|+
literal|" specified.  Please configure only one keytab"
operator|+
literal|" retrieval mechanism."
argument_list|,
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|,
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getLoginUser ()
specifier|protected
name|UserGroupInformation
name|getLoginUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
return|;
block|}
DECL|method|isSecurityEnabled ()
specifier|public
name|boolean
name|isSecurityEnabled
parameter_list|()
block|{
return|return
name|SliderUtils
operator|.
name|isHadoopClusterSecure
argument_list|(
name|configuration
argument_list|)
return|;
block|}
DECL|method|getPrincipal ()
specifier|public
name|String
name|getPrincipal
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|principal
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_KEYTAB_PRINCIPAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|principal
argument_list|)
condition|)
block|{
name|principal
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"No principal set in the slider configuration.  Will use AM "
operator|+
literal|"login identity {} to attempt keytab-based login"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
return|return
name|principal
return|;
block|}
DECL|method|isKeytabProvided ()
specifier|public
name|boolean
name|isKeytabProvided
parameter_list|()
block|{
name|String
name|keytabLocalPath
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|)
decl_stmt|;
name|String
name|keytabName
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|keytabLocalPath
argument_list|)
operator|||
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|keytabName
argument_list|)
return|;
block|}
DECL|method|getKeytabFile ()
specifier|public
name|File
name|getKeytabFile
parameter_list|()
throws|throws
name|SliderException
throws|,
name|IOException
block|{
comment|//TODO implement this for dash semantic
name|String
name|keytabFullPath
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|)
decl_stmt|;
name|File
name|localKeytabFile
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|keytabFullPath
argument_list|)
condition|)
block|{
comment|// get the keytab
name|String
name|keytabName
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"No host keytab file path specified. Will attempt to retrieve"
operator|+
literal|" keytab file {} as a local resource for the container"
argument_list|,
name|keytabName
argument_list|)
expr_stmt|;
comment|// download keytab to local, protected directory
name|localKeytabFile
operator|=
operator|new
name|File
argument_list|(
name|SliderKeys
operator|.
name|KEYTAB_DIR
argument_list|,
name|keytabName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using host keytab file {} for login"
argument_list|,
name|keytabFullPath
argument_list|)
expr_stmt|;
name|localKeytabFile
operator|=
operator|new
name|File
argument_list|(
name|keytabFullPath
argument_list|)
expr_stmt|;
block|}
return|return
name|localKeytabFile
return|;
block|}
block|}
end_class

end_unit

