begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|UnknownApplicationInstanceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|Filenames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|InstancePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
operator|.
name|CLUSTER_DIRECTORY_PERMISSIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
operator|.
name|DEFAULT_CLUSTER_DIRECTORY_PERMISSIONS
import|;
end_import

begin_class
DECL|class|CoreFileSystem
specifier|public
class|class
name|CoreFileSystem
block|{
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|fileSystem
specifier|protected
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|configuration
specifier|protected
specifier|final
name|Configuration
name|configuration
decl_stmt|;
DECL|method|CoreFileSystem (FileSystem fileSystem, Configuration configuration)
specifier|public
name|CoreFileSystem
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fileSystem
argument_list|,
literal|"Cannot create a CoreFileSystem with a null FileSystem"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"Cannot create a CoreFileSystem with a null Configuration"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|fileSystem
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|CoreFileSystem (Configuration configuration)
specifier|public
name|CoreFileSystem
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"Cannot create a CoreFileSystem with a null Configuration"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|fileSystem
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the temp path for this cluster    * @param clustername name of the cluster    * @return path for temp files (is not purged)    */
DECL|method|getTempPathForCluster (String clustername)
specifier|public
name|Path
name|getTempPathForCluster
parameter_list|(
name|String
name|clustername
parameter_list|)
block|{
name|Path
name|clusterDir
init|=
name|buildClusterDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|clusterDir
argument_list|,
name|SliderKeys
operator|.
name|TMP_DIR_PREFIX
argument_list|)
return|;
block|}
comment|/**    * Returns the underlying FileSystem for this object.    *    * @return filesystem    */
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fileSystem
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"CoreFileSystem{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"fileSystem="
argument_list|)
operator|.
name|append
argument_list|(
name|fileSystem
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Build up the path string for a cluster instance -no attempt to    * create the directory is made    *    * @param clustername name of the cluster    * @return the path for persistent data    */
DECL|method|buildClusterDirPath (String clustername)
specifier|public
name|Path
name|buildClusterDirPath
parameter_list|(
name|String
name|clustername
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clustername
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|CLUSTER_DIRECTORY
operator|+
literal|"/"
operator|+
name|clustername
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for app def folder -no attempt to    * create the directory is made    *    * @param clustername name of the cluster    * @return the path for persistent data    */
DECL|method|buildAppDefDirPath (String clustername)
specifier|public
name|Path
name|buildAppDefDirPath
parameter_list|(
name|String
name|clustername
parameter_list|)
block|{
name|Path
name|path
init|=
name|buildClusterDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|APP_DEF_DIR
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for addon folder -no attempt to    * create the directory is made    *    * @param clustername name of the cluster    * @return the path for persistent data    */
DECL|method|buildAddonDirPath (String clustername, String addonId)
specifier|public
name|Path
name|buildAddonDirPath
parameter_list|(
name|String
name|clustername
parameter_list|,
name|String
name|addonId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|addonId
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|buildClusterDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|ADDONS_DIR
operator|+
literal|"/"
operator|+
name|addonId
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for package install location -no attempt to    * create the directory is made    *    * @return the path for persistent app package    */
DECL|method|buildPackageDirPath (String packageName, String packageVersion)
specifier|public
name|Path
name|buildPackageDirPath
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|packageVersion
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|PACKAGE_DIRECTORY
operator|+
literal|"/"
operator|+
name|packageName
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|packageVersion
argument_list|)
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|packageVersion
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**    * Build up the path string for package install location -no attempt to    * create the directory is made    *    * @return the path for persistent app package    */
DECL|method|buildClusterSecurityDirPath (String clusterName)
specifier|public
name|Path
name|buildClusterSecurityDirPath
parameter_list|(
name|String
name|clusterName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|buildClusterDirPath
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|SECURITY_DIR
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for keytab install location -no attempt to    * create the directory is made    *    * @return the path for keytab    */
DECL|method|buildKeytabInstallationDirPath (String keytabFolder)
specifier|public
name|Path
name|buildKeytabInstallationDirPath
parameter_list|(
name|String
name|keytabFolder
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|keytabFolder
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|KEYTAB_DIR
operator|+
literal|"/"
operator|+
name|keytabFolder
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for keytab install location -no attempt to    * create the directory is made    *    * @return the path for keytab installation location    */
DECL|method|buildKeytabPath (String keytabDir, String keytabName, String clusterName)
specifier|public
name|Path
name|buildKeytabPath
parameter_list|(
name|String
name|keytabDir
parameter_list|,
name|String
name|keytabName
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|Path
name|homePath
init|=
name|getHomeDirectory
argument_list|()
decl_stmt|;
name|Path
name|baseKeytabDir
decl_stmt|;
if|if
condition|(
name|keytabDir
operator|!=
literal|null
condition|)
block|{
name|baseKeytabDir
operator|=
operator|new
name|Path
argument_list|(
name|homePath
argument_list|,
name|keytabDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseKeytabDir
operator|=
operator|new
name|Path
argument_list|(
name|buildClusterDirPath
argument_list|(
name|clusterName
argument_list|)
argument_list|,
name|SliderKeys
operator|.
name|KEYTAB_DIR
argument_list|)
expr_stmt|;
block|}
return|return
name|keytabName
operator|==
literal|null
condition|?
name|baseKeytabDir
else|:
operator|new
name|Path
argument_list|(
name|baseKeytabDir
argument_list|,
name|keytabName
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for resource install location -no attempt to    * create the directory is made    *    * @return the path for resource    */
DECL|method|buildResourcePath (String resourceFolder)
specifier|public
name|Path
name|buildResourcePath
parameter_list|(
name|String
name|resourceFolder
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|resourceFolder
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|resourceFolder
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for resource install location -no attempt to    * create the directory is made    *    * @return the path for resource    */
DECL|method|buildResourcePath (String dirName, String fileName)
specifier|public
name|Path
name|buildResourcePath
parameter_list|(
name|String
name|dirName
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|dirName
operator|+
literal|"/"
operator|+
name|fileName
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for cluster resource install location -no    * attempt to create the directory is made    *    * @return the path for resource    */
DECL|method|buildClusterResourcePath (String clusterName, String component)
specifier|public
name|Path
name|buildClusterResourcePath
parameter_list|(
name|String
name|clusterName
parameter_list|,
name|String
name|component
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|buildClusterDirPath
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|component
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for cluster resource install location -no    * attempt to create the directory is made    *    * @return the path for resource    */
DECL|method|buildClusterResourcePath (String clusterName)
specifier|public
name|Path
name|buildClusterResourcePath
parameter_list|(
name|String
name|clusterName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|buildClusterDirPath
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|SliderKeys
operator|.
name|RESOURCE_DIR
argument_list|)
return|;
block|}
comment|/**    * Create the Slider cluster path for a named cluster and all its subdirs    * This is a directory; a mkdirs() operation is executed    * to ensure that it is there.    *    * @param clustername name of the cluster    * @return the path to the cluster directory    * @throws java.io.IOException                      trouble    * @throws SliderException slider-specific exceptions    */
DECL|method|createClusterDirectories (String clustername, Configuration conf)
specifier|public
name|Path
name|createClusterDirectories
parameter_list|(
name|String
name|clustername
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|clusterDirectory
init|=
name|buildClusterDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
name|InstancePaths
name|instancePaths
init|=
operator|new
name|InstancePaths
argument_list|(
name|clusterDirectory
argument_list|)
decl_stmt|;
name|createClusterDirectories
argument_list|(
name|instancePaths
argument_list|)
expr_stmt|;
return|return
name|clusterDirectory
return|;
block|}
comment|/**    * Create the Slider cluster path for a named cluster and all its subdirs    * This is a directory; a mkdirs() operation is executed    * to ensure that it is there.    *    * @param instancePaths instance paths    * @throws IOException trouble    * @throws SliderException slider-specific exceptions    */
DECL|method|createClusterDirectories (InstancePaths instancePaths)
specifier|public
name|void
name|createClusterDirectories
parameter_list|(
name|InstancePaths
name|instancePaths
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|instanceDir
init|=
name|instancePaths
operator|.
name|instanceDir
decl_stmt|;
name|verifyDirectoryNonexistent
argument_list|(
name|instanceDir
argument_list|)
expr_stmt|;
name|FsPermission
name|clusterPerms
init|=
name|getInstanceDirectoryPermissions
argument_list|()
decl_stmt|;
name|createWithPermissions
argument_list|(
name|instanceDir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
name|createWithPermissions
argument_list|(
name|instancePaths
operator|.
name|snapshotConfPath
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
name|createWithPermissions
argument_list|(
name|instancePaths
operator|.
name|generatedConfPath
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
name|createWithPermissions
argument_list|(
name|instancePaths
operator|.
name|historyPath
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
name|createWithPermissions
argument_list|(
name|instancePaths
operator|.
name|tmpPathAM
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
comment|// Data Directory
name|String
name|dataOpts
init|=
name|configuration
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|DATA_DIRECTORY_PERMISSIONS
argument_list|,
name|SliderXmlConfKeys
operator|.
name|DEFAULT_DATA_DIRECTORY_PERMISSIONS
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Setting data directory permissions to {}"
argument_list|,
name|dataOpts
argument_list|)
expr_stmt|;
name|createWithPermissions
argument_list|(
name|instancePaths
operator|.
name|dataPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|dataOpts
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a directory with the given permissions.    *    * @param dir          directory    * @param clusterPerms cluster permissions    * @throws IOException  IO problem    * @throws BadClusterStateException any cluster state problem    */
DECL|method|createWithPermissions (Path dir, FsPermission clusterPerms)
specifier|public
name|void
name|createWithPermissions
parameter_list|(
name|Path
name|dir
parameter_list|,
name|FsPermission
name|clusterPerms
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
if|if
condition|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|dir
argument_list|)
condition|)
block|{
comment|// HADOOP-9361 shows some filesystems don't correctly fail here
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
literal|"Cannot create a directory over a file %s"
argument_list|,
name|dir
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"mkdir {} with perms {}"
argument_list|,
name|dir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
comment|//no mask whatoever
name|fileSystem
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
comment|//and force set it anyway just to make sure
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the permissions of a path    *    * @param path path to check    * @return the permissions    * @throws IOException any IO problem (including file not found)    */
DECL|method|getPathPermissions (Path path)
specifier|public
name|FsPermission
name|getPathPermissions
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|status
operator|.
name|getPermission
argument_list|()
return|;
block|}
DECL|method|getInstanceDirectoryPermissions ()
specifier|public
name|FsPermission
name|getInstanceDirectoryPermissions
parameter_list|()
block|{
name|String
name|clusterDirPermsOct
init|=
name|configuration
operator|.
name|get
argument_list|(
name|CLUSTER_DIRECTORY_PERMISSIONS
argument_list|,
name|DEFAULT_CLUSTER_DIRECTORY_PERMISSIONS
argument_list|)
decl_stmt|;
return|return
operator|new
name|FsPermission
argument_list|(
name|clusterDirPermsOct
argument_list|)
return|;
block|}
comment|/**    * Verify that the cluster directory is not present    *    * @param clustername      name of the cluster    * @param clusterDirectory actual directory to look for    * @throws IOException trouble with FS    * @throws SliderException If the directory exists    */
DECL|method|verifyClusterDirectoryNonexistent (String clustername, Path clusterDirectory)
specifier|public
name|void
name|verifyClusterDirectoryNonexistent
parameter_list|(
name|String
name|clustername
parameter_list|,
name|Path
name|clusterDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|clusterDirectory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_INSTANCE_EXISTS
argument_list|,
name|ErrorStrings
operator|.
name|PRINTF_E_INSTANCE_ALREADY_EXISTS
argument_list|,
name|clustername
argument_list|,
name|clusterDirectory
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that the given directory is not present    *    * @param clusterDirectory actual directory to look for    * @throws IOException    trouble with FS    * @throws SliderException If the directory exists    */
DECL|method|verifyDirectoryNonexistent (Path clusterDirectory)
specifier|public
name|void
name|verifyDirectoryNonexistent
parameter_list|(
name|Path
name|clusterDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|clusterDirectory
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Dir {} exists: {}"
argument_list|,
name|clusterDirectory
argument_list|,
name|listFSDir
argument_list|(
name|clusterDirectory
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_INSTANCE_EXISTS
argument_list|,
name|ErrorStrings
operator|.
name|PRINTF_E_INSTANCE_DIR_ALREADY_EXISTS
argument_list|,
name|clusterDirectory
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a user has write access to a directory.    * It does this by creating then deleting a temp file    *    * @param dirPath actual directory to look for    * @throws FileNotFoundException file not found    * @throws IOException  trouble with FS    * @throws BadClusterStateException if the directory is not writeable    */
DECL|method|verifyDirectoryWriteAccess (Path dirPath)
specifier|public
name|void
name|verifyDirectoryWriteAccess
parameter_list|(
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|verifyPathExists
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|Path
name|tempFile
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"tmp-file-for-checks"
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fileSystem
operator|.
name|create
argument_list|(
name|tempFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|tempFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to create file {}: {}"
argument_list|,
name|tempFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|e
argument_list|,
literal|"Unable to write to directory %s : %s"
argument_list|,
name|dirPath
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a path exists    * @param path path to check    * @throws FileNotFoundException file not found    * @throws IOException  trouble with FS    */
DECL|method|verifyPathExists (Path path)
specifier|public
name|void
name|verifyPathExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a path exists    * @param path path to check    * @throws FileNotFoundException file not found or is not a file    * @throws IOException  trouble with FS    */
DECL|method|verifyFileExists (Path path)
specifier|public
name|void
name|verifyFileExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not a file: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Given a path, check if it exists and is a file    *     * @param path    *          absolute path to the file to check    * @returns true if and only if path exists and is a file, false for all other    *          reasons including if file check throws IOException    */
DECL|method|isFile (Path path)
specifier|public
name|boolean
name|isFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|boolean
name|isFile
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|isFile
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore, isFile is already set to false
block|}
return|return
name|isFile
return|;
block|}
comment|/**    * Create the application-instance specific temporary directory    * in the DFS    *    * @param clustername name of the cluster    * @param subdir       application ID    * @return the path; this directory will already have been created    */
DECL|method|createAppInstanceTempPath (String clustername, String subdir)
specifier|public
name|Path
name|createAppInstanceTempPath
parameter_list|(
name|String
name|clustername
parameter_list|,
name|String
name|subdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tmp
init|=
name|getTempPathForCluster
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
name|Path
name|instancePath
init|=
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
name|subdir
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|instancePath
argument_list|)
expr_stmt|;
return|return
name|instancePath
return|;
block|}
comment|/**    * Create the application-instance specific temporary directory    * in the DFS    *    * @param clustername name of the cluster    * @return the path; this directory will already have been deleted    */
DECL|method|purgeAppInstanceTempFiles (String clustername)
specifier|public
name|Path
name|purgeAppInstanceTempFiles
parameter_list|(
name|String
name|clustername
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tmp
init|=
name|getTempPathForCluster
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|tmp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
comment|/**    * Get the base path    *    * @return the base path optionally configured by     * {@link SliderXmlConfKeys#KEY_SLIDER_BASE_PATH}    */
DECL|method|getBaseApplicationPath ()
specifier|public
name|Path
name|getBaseApplicationPath
parameter_list|()
block|{
name|String
name|configuredBasePath
init|=
name|configuration
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_SLIDER_BASE_PATH
argument_list|)
decl_stmt|;
return|return
name|configuredBasePath
operator|!=
literal|null
condition|?
operator|new
name|Path
argument_list|(
name|configuredBasePath
argument_list|)
else|:
operator|new
name|Path
argument_list|(
name|getHomeDirectory
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|SLIDER_BASE_DIRECTORY
argument_list|)
return|;
block|}
comment|/**    * Get slider dependency parent dir in HDFS    *     * @return the parent dir path of slider.tar.gz in HDFS    */
DECL|method|getDependencyPath ()
specifier|public
name|Path
name|getDependencyPath
parameter_list|()
block|{
name|String
name|parentDir
init|=
operator|(
name|SliderUtils
operator|.
name|isHdp
argument_list|()
operator|)
condition|?
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_HDP_PARENT_DIR
operator|+
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_DIR
else|:
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_DIR
decl_stmt|;
name|Path
name|dependencyPath
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|parentDir
argument_list|,
name|SliderUtils
operator|.
name|getSliderVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dependencyPath
return|;
block|}
comment|/**    * Get slider.tar.gz absolute filepath in HDFS    *     * @return the absolute path to slider.tar.gz in HDFS    */
DECL|method|getDependencyTarGzip ()
specifier|public
name|Path
name|getDependencyTarGzip
parameter_list|()
block|{
name|Path
name|dependencyLibAmPath
init|=
name|getDependencyPath
argument_list|()
decl_stmt|;
name|Path
name|dependencyLibTarGzip
init|=
operator|new
name|Path
argument_list|(
name|dependencyLibAmPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_TAR_GZ_FILE_NAME
operator|+
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_TAR_GZ_FILE_EXT
argument_list|)
decl_stmt|;
return|return
name|dependencyLibTarGzip
return|;
block|}
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|fileSystem
operator|.
name|getHomeDirectory
argument_list|()
return|;
block|}
DECL|method|maybeAddImagePath (Map<String, LocalResource> localResources, Path imagePath)
specifier|public
name|boolean
name|maybeAddImagePath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|,
name|Path
name|imagePath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|imagePath
operator|!=
literal|null
condition|)
block|{
name|LocalResource
name|resource
init|=
name|createAmResource
argument_list|(
name|imagePath
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|LOCAL_TARBALL_INSTALL_SUBDIR
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|maybeAddImagePath (Map<String, LocalResource> localResources, String imagePath)
specifier|public
name|boolean
name|maybeAddImagePath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|,
name|String
name|imagePath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|imagePath
operator|!=
literal|null
operator|&&
name|maybeAddImagePath
argument_list|(
name|localResources
argument_list|,
operator|new
name|Path
argument_list|(
name|imagePath
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create an AM resource from the    *    * @param destPath     dest path in filesystem    * @param resourceType resource type    * @return the resource set up wih application-level visibility and the    * timestamp& size set from the file stats.    */
DECL|method|createAmResource (Path destPath, LocalResourceType resourceType)
specifier|public
name|LocalResource
name|createAmResource
parameter_list|(
name|Path
name|destPath
parameter_list|,
name|LocalResourceType
name|resourceType
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|destStatus
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
name|LocalResource
name|amResource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|amResource
operator|.
name|setType
argument_list|(
name|resourceType
argument_list|)
expr_stmt|;
comment|// Set visibility of the resource
comment|// Setting to most private option
name|amResource
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
comment|// Set the resource to be copied over
name|amResource
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|fileSystem
operator|.
name|resolvePath
argument_list|(
name|destStatus
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set timestamp and length of file so that the framework
comment|// can do basic sanity checks for the local resource
comment|// after it has been copied over to ensure it is the same
comment|// resource the client intended to use with the application
name|amResource
operator|.
name|setTimestamp
argument_list|(
name|destStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|amResource
operator|.
name|setSize
argument_list|(
name|destStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|amResource
return|;
block|}
comment|/**    * Register all files under a fs path as a directory to push out    *    * @param srcDir          src dir    * @param destRelativeDir dest dir (no trailing /)    * @return the map of entries    */
DECL|method|submitDirectory (Path srcDir, String destRelativeDir)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|submitDirectory
parameter_list|(
name|Path
name|srcDir
parameter_list|,
name|String
name|destRelativeDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|//now register each of the files in the directory to be
comment|//copied to the destination
name|FileStatus
index|[]
name|fileset
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|(
name|fileset
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|entry
range|:
name|fileset
control|)
block|{
name|LocalResource
name|resource
init|=
name|createAmResource
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|String
name|relativePath
init|=
name|destRelativeDir
operator|+
literal|"/"
operator|+
name|entry
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|relativePath
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|localResources
return|;
block|}
comment|/**    * Submit a JAR containing a specific class, returning    * the resource to be mapped in    *    * @param clazz   class to look for    * @param subdir  subdirectory (expected to end in a "/")    * @param jarName<i>At the destination</i>    * @return the local resource ref    * @throws IOException trouble copying to HDFS    */
DECL|method|submitJarWithClass (Class clazz, Path tempPath, String subdir, String jarName)
specifier|public
name|LocalResource
name|submitJarWithClass
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|subdir
parameter_list|,
name|String
name|jarName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|File
name|localFile
init|=
name|SliderUtils
operator|.
name|findContainingJarOrFail
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|submitFile
argument_list|(
name|localFile
argument_list|,
name|tempPath
argument_list|,
name|subdir
argument_list|,
name|jarName
argument_list|)
return|;
block|}
comment|/**    * Submit a local file to the filesystem references by the instance's cluster    * filesystem    *    * @param localFile    filename    * @param subdir       subdirectory (expected to end in a "/")    * @param destFileName destination filename    * @return the local resource ref    * @throws IOException trouble copying to HDFS    */
DECL|method|submitFile (File localFile, Path tempPath, String subdir, String destFileName)
specifier|public
name|LocalResource
name|submitFile
parameter_list|(
name|File
name|localFile
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|subdir
parameter_list|,
name|String
name|destFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|localFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
name|tempPath
argument_list|,
name|subdir
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|subdirPath
argument_list|,
name|destFileName
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Copying {} (size={} bytes) to {}"
argument_list|,
name|localFile
argument_list|,
name|localFile
operator|.
name|length
argument_list|()
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|src
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
comment|// Set the type of resource - file or archive
comment|// archives are untarred at destination
comment|// we don't need the jar file to be untarred for now
return|return
name|createAmResource
argument_list|(
name|destPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
return|;
block|}
comment|/**    * Submit the AM tar.gz resource referenced by the instance's cluster    * filesystem. Also, update the providerResources object with the new    * resource.    *     * @param providerResources    *          the provider resource map to be updated    * @throws IOException    *           trouble copying to HDFS    */
DECL|method|submitTarGzipAndUpdate ( Map<String, LocalResource> providerResources)
specifier|public
name|void
name|submitTarGzipAndUpdate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
name|Path
name|dependencyLibTarGzip
init|=
name|getDependencyTarGzip
argument_list|()
decl_stmt|;
name|LocalResource
name|lc
init|=
name|createAmResource
argument_list|(
name|dependencyLibTarGzip
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK
argument_list|,
name|lc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy local file(s) to destination HDFS directory. If {@code localPath} is a    * local directory then all files matching the {@code filenameFilter}    * (optional) are copied, otherwise {@code filenameFilter} is ignored.    *     * @param localPath    *          a local file or directory path    * @param filenameFilter    *          if {@code localPath} is a directory then filenameFilter is used as    *          a filter (if specified)    * @param destDir    *          the destination HDFS directory where the file(s) should be copied    * @param fp    *          file permissions of all the directories and files that will be    *          created in this api    * @throws IOException    */
DECL|method|copyLocalFilesToHdfs (File localPath, FilenameFilter filenameFilter, Path destDir, FsPermission fp)
specifier|public
name|void
name|copyLocalFilesToHdfs
parameter_list|(
name|File
name|localPath
parameter_list|,
name|FilenameFilter
name|filenameFilter
parameter_list|,
name|Path
name|destDir
parameter_list|,
name|FsPermission
name|fp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localPath
operator|==
literal|null
operator|||
name|destDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either localPath or destDir is null"
argument_list|)
throw|;
block|}
name|fileSystem
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|destDir
argument_list|,
name|fp
argument_list|)
expr_stmt|;
if|if
condition|(
name|localPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// copy all local files under localPath to destDir (honoring filename
comment|// filter if provided
name|File
index|[]
name|localFiles
init|=
name|localPath
operator|.
name|listFiles
argument_list|(
name|filenameFilter
argument_list|)
decl_stmt|;
name|Path
index|[]
name|localFilePaths
init|=
operator|new
name|Path
index|[
name|localFiles
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|localFile
range|:
name|localFiles
control|)
block|{
name|localFilePaths
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Copying {} files from {} to {}"
argument_list|,
name|i
argument_list|,
name|localPath
operator|.
name|toURI
argument_list|()
argument_list|,
name|destDir
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|localFilePaths
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Copying file {} to {}"
argument_list|,
name|localPath
operator|.
name|toURI
argument_list|()
argument_list|,
name|destDir
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|localPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
block|}
comment|// set permissions for all the files created in the destDir
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|destDir
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
DECL|method|copyLocalFileToHdfs (File localPath, Path destPath, FsPermission fp)
specifier|public
name|void
name|copyLocalFileToHdfs
parameter_list|(
name|File
name|localPath
parameter_list|,
name|Path
name|destPath
parameter_list|,
name|FsPermission
name|fp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localPath
operator|==
literal|null
operator|||
name|destPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either localPath or destPath is null"
argument_list|)
throw|;
block|}
name|fileSystem
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|destPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fp
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying file {} to {}"
argument_list|,
name|localPath
operator|.
name|toURI
argument_list|()
argument_list|,
name|destPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|localPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
comment|// set file permissions of the destPath
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|destPath
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
DECL|method|copyHdfsFileToLocal (Path hdfsPath, File destFile)
specifier|public
name|void
name|copyHdfsFileToLocal
parameter_list|(
name|Path
name|hdfsPath
parameter_list|,
name|File
name|destFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfsPath
operator|==
literal|null
operator|||
name|destFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either hdfsPath or destPath is null"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Copying file {} to {}"
argument_list|,
name|hdfsPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|destFile
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|destFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|copyToLocalFile
argument_list|(
name|hdfsPath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * list entries in a filesystem directory    *    * @param path directory    * @return a listing, one to a line    * @throws IOException    */
DECL|method|listFSDir (Path path)
specifier|public
name|String
name|listFSDir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * List all application instances persisted for this user, giving the     * path. The instance name is the last element in the path    * @return a possibly empty map of application instance names to paths    */
DECL|method|listPersistentInstances ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|listPersistentInstances
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getBaseApplicationPath
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|CLUSTER_DIRECTORY
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Looking for all persisted application at {}"
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// special case: no instances have ever been created
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|instances
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|(
name|statuses
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// enum the child entries
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// for directories, look for an internal.json underneath
name|Path
name|child
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|internalJson
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
name|Filenames
operator|.
name|INTERNAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|internalJson
argument_list|)
condition|)
block|{
comment|// success => this is an instance
name|instances
operator|.
name|put
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Malformed cluster found at {}. It does not appear to be a valid persisted instance."
argument_list|,
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|instances
return|;
block|}
DECL|method|touch (Path path, boolean overwrite)
specifier|public
name|void
name|touch
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fileSystem
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cat (Path path, boolean overwrite, String data)
specifier|public
name|void
name|cat
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fileSystem
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|data
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cat (Path path)
specifier|public
name|String
name|cat
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|status
operator|.
name|getLen
argument_list|()
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a path that must exist in the cluster fs    * @param uri uri to create    * @return the path    * @throws SliderException if the path does not exist    */
DECL|method|createPathThatMustExist (String uri)
specifier|public
name|Path
name|createPathThatMustExist
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|verifyPathExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/**    * Locate an application conf json in the FS. This includes a check to verify    * that the file is there.    *    * @param clustername name of the cluster    * @return the path to the spec.    * @throws IOException IO problems    * @throws SliderException if the path isn't there    */
DECL|method|locateInstanceDefinition (String clustername)
specifier|public
name|Path
name|locateInstanceDefinition
parameter_list|(
name|String
name|clustername
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|clusterDirectory
init|=
name|buildClusterDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
name|Path
name|appConfPath
init|=
operator|new
name|Path
argument_list|(
name|clusterDirectory
argument_list|,
name|Filenames
operator|.
name|APPCONF
argument_list|)
decl_stmt|;
name|verifyClusterSpecExists
argument_list|(
name|clustername
argument_list|,
name|appConfPath
argument_list|)
expr_stmt|;
return|return
name|appConfPath
return|;
block|}
comment|/**    * Verify that a cluster specification exists    * @param clustername name of the cluster (For errors only)    * @param clusterSpecPath cluster specification path    * @throws IOException IO problems    * @throws SliderException if the cluster specification is not present    */
DECL|method|verifyClusterSpecExists (String clustername, Path clusterSpecPath)
specifier|public
name|void
name|verifyClusterSpecExists
parameter_list|(
name|String
name|clustername
parameter_list|,
name|Path
name|clusterSpecPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|clusterSpecPath
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Missing specification file {}"
argument_list|,
name|clusterSpecPath
argument_list|)
expr_stmt|;
throw|throw
name|UnknownApplicationInstanceException
operator|.
name|unknownInstance
argument_list|(
name|clustername
operator|+
literal|"\n (definition not found at "
operator|+
name|clusterSpecPath
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

