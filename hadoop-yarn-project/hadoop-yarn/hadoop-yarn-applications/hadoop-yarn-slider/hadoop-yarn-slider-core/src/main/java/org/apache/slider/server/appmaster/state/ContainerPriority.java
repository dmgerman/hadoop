begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Class containing the logic to build/split container priorities into the  * different fields used by Slider  *  * The original design here had a requestID merged with the role, to  * track outstanding requests. However, this isn't possible, so  * the request ID has been dropped. A "location specified" flag was  * added to indicate whether or not the request was for a specific location  * -though this is currently unused.  *   * The methods are effectively surplus -but retained to preserve the  * option of changing behavior in future  */
end_comment

begin_class
DECL|class|ContainerPriority
specifier|public
specifier|final
class|class
name|ContainerPriority
block|{
comment|// bit that represents whether location is specified
DECL|field|NOLOCATION
specifier|static
specifier|final
name|int
name|NOLOCATION
init|=
literal|1
operator|<<
literal|30
decl_stmt|;
DECL|method|buildPriority (int role, boolean locationSpecified)
specifier|public
specifier|static
name|int
name|buildPriority
parameter_list|(
name|int
name|role
parameter_list|,
name|boolean
name|locationSpecified
parameter_list|)
block|{
name|int
name|location
init|=
name|locationSpecified
condition|?
literal|0
else|:
name|NOLOCATION
decl_stmt|;
return|return
name|role
operator||
name|location
return|;
block|}
DECL|method|createPriority (int role, boolean locationSpecified)
specifier|public
specifier|static
name|Priority
name|createPriority
parameter_list|(
name|int
name|role
parameter_list|,
name|boolean
name|locationSpecified
parameter_list|)
block|{
name|Priority
name|pri
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|pri
operator|.
name|setPriority
argument_list|(
name|ContainerPriority
operator|.
name|buildPriority
argument_list|(
name|role
argument_list|,
name|locationSpecified
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pri
return|;
block|}
DECL|method|extractRole (int priority)
specifier|public
specifier|static
name|int
name|extractRole
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
return|return
name|priority
operator|>=
name|NOLOCATION
condition|?
name|priority
operator|^
name|NOLOCATION
else|:
name|priority
return|;
block|}
comment|/**    * Does the priority have location    * @param priority priority index    * @return true if the priority has the location marker    */
DECL|method|hasLocation (int priority)
specifier|public
specifier|static
name|boolean
name|hasLocation
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
return|return
operator|(
name|priority
operator|^
name|NOLOCATION
operator|)
operator|==
literal|0
return|;
block|}
comment|/**    * Map from a container to a role key by way of its priority    * @param container container    * @return role key    */
DECL|method|extractRole (Container container)
specifier|public
specifier|static
name|int
name|extractRole
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|container
operator|.
name|getPriority
argument_list|()
decl_stmt|;
return|return
name|extractRole
argument_list|(
name|priority
argument_list|)
return|;
block|}
comment|/**    * Priority record to role mapper    * @param priorityRecord priority record    * @return the role #    */
DECL|method|extractRole (Priority priorityRecord)
specifier|public
specifier|static
name|int
name|extractRole
parameter_list|(
name|Priority
name|priorityRecord
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|priorityRecord
argument_list|)
expr_stmt|;
return|return
name|extractRole
argument_list|(
name|priorityRecord
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a priority record to a string, extracting role and locality    * @param priorityRecord priority record. May be null    * @return a string value    */
DECL|method|toString (Priority priorityRecord)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Priority
name|priorityRecord
parameter_list|)
block|{
if|if
condition|(
name|priorityRecord
operator|==
literal|null
condition|)
block|{
return|return
literal|"(null)"
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"role %d (locality=%b)"
argument_list|,
name|extractRole
argument_list|(
name|priorityRecord
argument_list|)
argument_list|,
name|hasLocation
argument_list|(
name|priorityRecord
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

