begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.servicemonitor
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderYarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|UnknownApplicationInstanceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Probe for YARN application  */
end_comment

begin_class
DECL|class|YarnApplicationProbe
specifier|public
class|class
name|YarnApplicationProbe
extends|extends
name|Probe
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnApplicationProbe
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Yarn client service    */
DECL|field|yarnClient
specifier|private
name|SliderYarnClientImpl
name|yarnClient
decl_stmt|;
DECL|field|clustername
specifier|private
specifier|final
name|String
name|clustername
decl_stmt|;
DECL|field|username
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
DECL|method|YarnApplicationProbe (String clustername, SliderYarnClientImpl yarnClient, String name, Configuration conf, String username)
specifier|public
name|YarnApplicationProbe
parameter_list|(
name|String
name|clustername
parameter_list|,
name|SliderYarnClientImpl
name|yarnClient
parameter_list|,
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"Port probe "
operator|+
name|name
operator|+
literal|" "
operator|+
name|clustername
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|clustername
operator|=
name|clustername
expr_stmt|;
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Checking "
operator|+
name|clustername
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try to connect to the (host,port); a failure to connect within    * the specified timeout is a failure    * @param livePing is the ping live: true for live; false for boot time    * @return the outcome    */
annotation|@
name|Override
DECL|method|ping (boolean livePing)
specifier|public
name|ProbeStatus
name|ping
parameter_list|(
name|boolean
name|livePing
parameter_list|)
block|{
name|ProbeStatus
name|status
init|=
operator|new
name|ProbeStatus
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
name|yarnClient
operator|.
name|listDeployedInstances
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|ApplicationReport
name|instance
init|=
name|yarnClient
operator|.
name|findClusterInInstanceList
argument_list|(
name|instances
argument_list|,
name|clustername
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|instance
condition|)
block|{
throw|throw
name|UnknownApplicationInstanceException
operator|.
name|unknownInstance
argument_list|(
name|clustername
argument_list|)
throw|;
block|}
name|status
operator|.
name|succeed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|.
name|fail
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

