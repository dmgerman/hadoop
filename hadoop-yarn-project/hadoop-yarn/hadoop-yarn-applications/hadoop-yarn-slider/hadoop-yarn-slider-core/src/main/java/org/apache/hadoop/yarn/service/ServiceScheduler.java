begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineV2Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|AMRMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|NMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|compinstance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|compinstance
operator|.
name|ComponentInstanceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|compinstance
operator|.
name|ComponentInstanceEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|metrics
operator|.
name|ServiceMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|timelineservice
operator|.
name|ServiceMetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|timelineservice
operator|.
name|ServiceTimelinePublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BoundedAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ServiceApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|info
operator|.
name|CustomRegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|zk
operator|.
name|ZKIntegration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|yarnregistry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ServiceApiConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ServiceScheduler
specifier|public
class|class
name|ServiceScheduler
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|app
specifier|private
name|Application
name|app
decl_stmt|;
comment|// component_name -> component
DECL|field|componentsByName
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|componentsByName
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// id -> component
DECL|field|componentsById
specifier|protected
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Component
argument_list|>
name|componentsById
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|liveInstances
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ComponentInstance
argument_list|>
name|liveInstances
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|serviceMetrics
specifier|private
name|ServiceMetrics
name|serviceMetrics
decl_stmt|;
DECL|field|serviceTimelinePublisher
specifier|private
name|ServiceTimelinePublisher
name|serviceTimelinePublisher
decl_stmt|;
comment|// Global diagnostics that will be reported to RM on eRxit.
comment|// The unit the number of characters. This will be limited to 64 * 1024
comment|// characters.
DECL|field|diagnostics
specifier|private
name|BoundedAppender
name|diagnostics
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|64
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|// A cache for loading config files from remote such as hdfs
DECL|field|configFileCache
specifier|public
name|LoadingCache
argument_list|<
name|ConfigFile
argument_list|,
name|Object
argument_list|>
name|configFileCache
init|=
literal|null
decl_stmt|;
DECL|field|executorService
specifier|public
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|globalTokens
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalTokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|amRMClient
specifier|private
name|AMRMClientAsync
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amRMClient
decl_stmt|;
DECL|field|nmClient
specifier|private
name|NMClientAsync
name|nmClient
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|compInstanceDispatcher
name|AsyncDispatcher
name|compInstanceDispatcher
decl_stmt|;
DECL|field|yarnRegistryOperations
specifier|private
name|YarnRegistryViewForProviders
name|yarnRegistryOperations
decl_stmt|;
DECL|field|context
specifier|private
name|ServiceContext
name|context
decl_stmt|;
DECL|field|containerLaunchService
specifier|private
name|ContainerLaunchService
name|containerLaunchService
decl_stmt|;
DECL|method|ServiceScheduler (ServiceContext context)
specifier|public
name|ServiceScheduler
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
operator|.
name|application
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|buildInstance (ServiceContext context, Configuration configuration)
specifier|public
name|void
name|buildInstance
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|YarnException
block|{
name|app
operator|=
name|context
operator|.
name|application
expr_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|RegistryOperations
name|registryClient
init|=
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
literal|"ServiceScheduler"
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|addIfService
argument_list|(
name|registryClient
argument_list|)
expr_stmt|;
name|yarnRegistryOperations
operator|=
name|createYarnRegistryOperations
argument_list|(
name|context
argument_list|,
name|registryClient
argument_list|)
expr_stmt|;
comment|// register metrics
name|serviceMetrics
operator|=
name|ServiceMetrics
operator|.
name|register
argument_list|(
name|app
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Metrics for service"
argument_list|)
expr_stmt|;
name|serviceMetrics
operator|.
name|tag
argument_list|(
literal|"type"
argument_list|,
literal|"Metrics type [component or service]"
argument_list|,
literal|"service"
argument_list|)
expr_stmt|;
name|serviceMetrics
operator|.
name|tag
argument_list|(
literal|"appId"
argument_list|,
literal|"Application id for service"
argument_list|,
name|app
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|amRMClient
operator|=
name|createAMRMClient
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|amRMClient
argument_list|)
expr_stmt|;
name|nmClient
operator|=
name|createNMClient
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|(
literal|"Component  dispatcher"
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ComponentEventType
operator|.
name|class
argument_list|,
operator|new
name|ComponentEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|compInstanceDispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|(
literal|"CompInstance dispatcher"
argument_list|)
expr_stmt|;
name|compInstanceDispatcher
operator|.
name|register
argument_list|(
name|ComponentInstanceEventType
operator|.
name|class
argument_list|,
operator|new
name|ComponentInstanceEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|compInstanceDispatcher
argument_list|)
expr_stmt|;
name|containerLaunchService
operator|=
operator|new
name|ContainerLaunchService
argument_list|(
name|context
operator|.
name|fs
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|containerLaunchService
argument_list|)
expr_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|configuration
argument_list|)
condition|)
block|{
name|TimelineV2Client
name|timelineClient
init|=
name|TimelineV2Client
operator|.
name|createTimelineClient
argument_list|(
name|context
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|amRMClient
operator|.
name|registerTimelineV2Client
argument_list|(
name|timelineClient
argument_list|)
expr_stmt|;
name|serviceTimelinePublisher
operator|=
operator|new
name|ServiceTimelinePublisher
argument_list|(
name|timelineClient
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|serviceTimelinePublisher
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
literal|"ServiceMetricsSink"
argument_list|,
literal|"For processing metrics to ATS"
argument_list|,
operator|new
name|ServiceMetricsSink
argument_list|(
name|serviceTimelinePublisher
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeline v2 is enabled."
argument_list|)
expr_stmt|;
block|}
name|initGlobalTokensForSubstitute
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//substitute quicklinks
name|ProviderUtils
operator|.
name|substituteMapWithTokens
argument_list|(
name|app
operator|.
name|getQuicklinks
argument_list|()
argument_list|,
name|globalTokens
argument_list|)
expr_stmt|;
name|createConfigFileCache
argument_list|(
name|context
operator|.
name|fs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|createAllComponents
argument_list|()
expr_stmt|;
block|}
DECL|method|createYarnRegistryOperations ( ServiceContext context, RegistryOperations registryClient)
specifier|protected
name|YarnRegistryViewForProviders
name|createYarnRegistryOperations
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|RegistryOperations
name|registryClient
parameter_list|)
block|{
return|return
operator|new
name|YarnRegistryViewForProviders
argument_list|(
name|registryClient
argument_list|,
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|APP_TYPE
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|context
operator|.
name|attemptId
argument_list|)
return|;
block|}
DECL|method|createNMClient ()
specifier|protected
name|NMClientAsync
name|createNMClient
parameter_list|()
block|{
return|return
name|NMClientAsync
operator|.
name|createNMClientAsync
argument_list|(
operator|new
name|NMClientCallback
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createAMRMClient ()
specifier|protected
name|AMRMClientAsync
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|createAMRMClient
parameter_list|()
block|{
return|return
name|AMRMClientAsync
operator|.
name|createAMRMClientAsync
argument_list|(
literal|1000
argument_list|,
operator|new
name|AMRMClientCallback
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|buildInstance
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping service scheduler"
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|serviceTimelinePublisher
operator|.
name|serviceAttemptUnregistered
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Cleanup each component instance. no need to release containers as
comment|// they will be automatically released by RM
for|for
control|(
name|ComponentInstance
name|instance
range|:
name|liveInstances
operator|.
name|values
argument_list|()
control|)
block|{
name|instance
operator|.
name|cleanupRegistryAndCompHdfsDir
argument_list|()
expr_stmt|;
block|}
name|String
name|msg
init|=
name|diagnostics
operator|.
name|toString
argument_list|()
operator|+
literal|"Navigate to the failed component for more details."
decl_stmt|;
name|amRMClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|ENDED
argument_list|,
name|msg
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|app
operator|.
name|getName
argument_list|()
operator|+
literal|" unregistered with RM, with attemptId = "
operator|+
name|context
operator|.
name|attemptId
operator|+
literal|", diagnostics = "
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|bindAddress
init|=
name|context
operator|.
name|clientAMService
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|RegisterApplicationMasterResponse
name|response
init|=
name|amRMClient
operator|.
name|registerApplicationMaster
argument_list|(
name|bindAddress
operator|.
name|getHostName
argument_list|()
argument_list|,
name|bindAddress
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"N/A"
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
operator|.
name|remaining
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|context
operator|.
name|secretManager
operator|.
name|setMasterKey
argument_list|(
name|response
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|registerServiceInstance
argument_list|(
name|context
operator|.
name|attemptId
argument_list|,
name|app
argument_list|)
expr_stmt|;
comment|//TODO handle containers recover
block|}
DECL|method|recover ()
specifier|private
name|void
name|recover
parameter_list|()
block|{    }
DECL|method|initGlobalTokensForSubstitute (ServiceContext context)
specifier|private
name|void
name|initGlobalTokensForSubstitute
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
block|{
comment|// ZK
name|globalTokens
operator|.
name|put
argument_list|(
name|ServiceApiConstants
operator|.
name|CLUSTER_ZK_QUORUM
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|DEFAULT_REGISTRY_ZK_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get user."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|globalTokens
operator|.
name|put
argument_list|(
name|SERVICE_ZK_PATH
argument_list|,
name|ZKIntegration
operator|.
name|mkClusterPath
argument_list|(
name|user
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|globalTokens
operator|.
name|put
argument_list|(
name|ServiceApiConstants
operator|.
name|USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|String
name|dnsDomain
init|=
name|getConfig
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|KEY_DNS_DOMAIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnsDomain
operator|!=
literal|null
operator|&&
operator|!
name|dnsDomain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|globalTokens
operator|.
name|put
argument_list|(
name|ServiceApiConstants
operator|.
name|DOMAIN
argument_list|,
name|dnsDomain
argument_list|)
expr_stmt|;
block|}
comment|// HDFS
name|String
name|clusterFs
init|=
name|getConfig
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterFs
operator|!=
literal|null
operator|&&
operator|!
name|clusterFs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|globalTokens
operator|.
name|put
argument_list|(
name|ServiceApiConstants
operator|.
name|CLUSTER_FS_URI
argument_list|,
name|clusterFs
argument_list|)
expr_stmt|;
name|globalTokens
operator|.
name|put
argument_list|(
name|ServiceApiConstants
operator|.
name|CLUSTER_FS_HOST
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|clusterFs
argument_list|)
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|globalTokens
operator|.
name|put
argument_list|(
name|SERVICE_HDFS_DIR
argument_list|,
name|context
operator|.
name|serviceHdfsDir
argument_list|)
expr_stmt|;
comment|// service name
name|globalTokens
operator|.
name|put
argument_list|(
name|SERVICE_NAME_LC
argument_list|,
name|app
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|globalTokens
operator|.
name|put
argument_list|(
name|SERVICE_NAME
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createConfigFileCache (final FileSystem fileSystem)
specifier|private
name|void
name|createConfigFileCache
parameter_list|(
specifier|final
name|FileSystem
name|fileSystem
parameter_list|)
block|{
name|this
operator|.
name|configFileCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|ConfigFile
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|ConfigFile
name|key
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|key
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HADOOP_XML
case|:
try|try
init|(
name|FSDataInputStream
name|input
init|=
name|fileSystem
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|key
operator|.
name|getSrcFile
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|confRead
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|confRead
operator|.
name|addResource
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|confRead
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|confRead
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
case|case
name|TEMPLATE
case|:
try|try
init|(
name|FSDataInputStream
name|fileInput
init|=
name|fileSystem
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|key
operator|.
name|getSrcFile
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|fileInput
argument_list|)
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|configCache
operator|=
name|configFileCache
expr_stmt|;
block|}
DECL|method|registerServiceInstance (ApplicationAttemptId attemptId, Application application)
specifier|protected
name|void
name|registerServiceInstance
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Application
name|application
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering "
operator|+
name|attemptId
operator|+
literal|", "
operator|+
name|application
operator|.
name|getName
argument_list|()
operator|+
literal|" into registry"
argument_list|)
expr_stmt|;
name|ServiceRecord
name|serviceRecord
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|serviceRecord
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
name|attemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|serviceRecord
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_PERSISTENCE
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|serviceRecord
operator|.
name|description
operator|=
literal|"Slider Application Master"
expr_stmt|;
name|serviceRecord
operator|.
name|addExternalEndpoint
argument_list|(
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
name|CustomRegistryConstants
operator|.
name|AM_IPC_PROTOCOL
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|5000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// FIXME
comment|// set any provided attributes
name|setUserProvidedServiceRecordAttributes
argument_list|(
name|application
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|serviceRecord
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|yarnRegistryOperations
operator|.
name|registerSelf
argument_list|(
name|serviceRecord
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered service under {}; absolute path {}"
argument_list|,
name|yarnRegistryOperations
operator|.
name|getSelfRegistrationPath
argument_list|()
argument_list|,
name|yarnRegistryOperations
operator|.
name|getAbsoluteSelfRegistrationPath
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isFirstAttempt
init|=
literal|1
operator|==
name|attemptId
operator|.
name|getAttemptId
argument_list|()
decl_stmt|;
comment|// delete the children in case there are any and this is an AM startup.
comment|// just to make sure everything underneath is purged
if|if
condition|(
name|isFirstAttempt
condition|)
block|{
name|yarnRegistryOperations
operator|.
name|deleteChildren
argument_list|(
name|yarnRegistryOperations
operator|.
name|getSelfRegistrationPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register app "
operator|+
name|app
operator|.
name|getName
argument_list|()
operator|+
literal|" in registry"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|serviceTimelinePublisher
operator|.
name|serviceAttemptRegistered
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUserProvidedServiceRecordAttributes ( org.apache.slider.api.resource.Configuration conf, ServiceRecord record)
specifier|private
name|void
name|setUserProvidedServiceRecordAttributes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Configuration
name|conf
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
block|{
name|String
name|prefix
init|=
name|RoleKeys
operator|.
name|SERVICE_RECORD_ATTRIBUTE_PREFIX
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAllComponents ()
specifier|private
name|void
name|createAllComponents
parameter_list|()
block|{
name|long
name|allocateId
init|=
literal|0
decl_stmt|;
comment|// sort components by dependencies
name|Collection
argument_list|<
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
argument_list|>
name|sortedComponents
init|=
name|ServiceApiUtil
operator|.
name|sortByDependencies
argument_list|(
name|app
operator|.
name|getComponents
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
name|compSpec
range|:
name|sortedComponents
control|)
block|{
name|Component
name|component
init|=
operator|new
name|Component
argument_list|(
name|compSpec
argument_list|,
name|allocateId
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|componentsById
operator|.
name|put
argument_list|(
name|allocateId
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|componentsByName
operator|.
name|put
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|allocateId
operator|++
expr_stmt|;
comment|// Trigger the component without dependencies
if|if
condition|(
name|component
operator|.
name|areDependenciesReady
argument_list|()
condition|)
block|{
name|ComponentEvent
name|event
init|=
operator|new
name|ComponentEvent
argument_list|(
name|compSpec
operator|.
name|getName
argument_list|()
argument_list|,
name|FLEX
argument_list|)
operator|.
name|setDesired
argument_list|(
name|compSpec
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ComponentEventHandler
specifier|private
specifier|final
class|class
name|ComponentEventHandler
implements|implements
name|EventHandler
argument_list|<
name|ComponentEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ComponentEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ComponentEvent
name|event
parameter_list|)
block|{
name|Component
name|component
init|=
name|componentsByName
operator|.
name|get
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No component exists for "
operator|+
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|component
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[COMPONENT {0}]: Error in handling event type {1}"
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ComponentInstanceEventHandler
specifier|private
specifier|final
class|class
name|ComponentInstanceEventHandler
implements|implements
name|EventHandler
argument_list|<
name|ComponentInstanceEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ComponentInstanceEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
name|ComponentInstance
name|instance
init|=
name|liveInstances
operator|.
name|get
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No component instance exists for "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|instance
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|instance
operator|.
name|getCompInstanceId
argument_list|()
operator|+
literal|": Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|AMRMClientCallback
class|class
name|AMRMClientCallback
extends|extends
name|AMRMClientAsync
operator|.
name|AbstractCallbackHandler
block|{
annotation|@
name|Override
DECL|method|onContainersAllocated (List<Container> containers)
specifier|public
name|void
name|onContainersAllocated
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|+
literal|" containers allocated. "
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
name|Component
name|comp
init|=
name|componentsById
operator|.
name|get
argument_list|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentEvent
name|event
init|=
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|CONTAINER_ALLOCATED
argument_list|)
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: {} outstanding container requests."
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|amRMClient
operator|.
name|getMatchingRequests
argument_list|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the corresponding request
name|Collection
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|collection
init|=
name|amRMClient
operator|.
name|getMatchingRequests
argument_list|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|collection
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|amRMClient
operator|.
name|removeContainerRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onContainersCompleted (List<ContainerStatus> statuses)
specifier|public
name|void
name|onContainersCompleted
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|statuses
parameter_list|)
block|{
for|for
control|(
name|ContainerStatus
name|status
range|:
name|statuses
control|)
block|{
name|ContainerId
name|containerId
init|=
name|status
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|ComponentInstance
name|instance
init|=
name|liveInstances
operator|.
name|get
argument_list|(
name|status
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container {} Completed. No component instance exists. exitStatus={}. diagnostics={} "
argument_list|,
name|containerId
argument_list|,
name|status
operator|.
name|getExitStatus
argument_list|()
argument_list|,
name|status
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComponentEvent
name|event
init|=
operator|new
name|ComponentEvent
argument_list|(
name|instance
operator|.
name|getCompName
argument_list|()
argument_list|,
name|CONTAINER_COMPLETED
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onContainersUpdated (List<UpdatedContainer> containers)
specifier|public
name|void
name|onContainersUpdated
parameter_list|(
name|List
argument_list|<
name|UpdatedContainer
argument_list|>
name|containers
parameter_list|)
block|{     }
DECL|method|onShutdownRequest ()
annotation|@
name|Override
specifier|public
name|void
name|onShutdownRequest
parameter_list|()
block|{
comment|//Was used for non-work-preserving restart in YARN, should be deprecated.
block|}
DECL|method|onNodesUpdated (List<NodeReport> updatedNodes)
annotation|@
name|Override
specifier|public
name|void
name|onNodesUpdated
parameter_list|(
name|List
argument_list|<
name|NodeReport
argument_list|>
name|updatedNodes
parameter_list|)
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"Nodes updated info: "
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeReport
name|report
range|:
name|updatedNodes
control|)
block|{
name|str
operator|.
name|append
argument_list|(
name|report
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", state = "
argument_list|)
operator|.
name|append
argument_list|(
name|report
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", healthDiagnostics = "
argument_list|)
operator|.
name|append
argument_list|(
name|report
operator|.
name|getHealthReport
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|str
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getProgress ()
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
comment|// get running containers over desired containers
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
name|component
range|:
name|app
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|total
operator|+=
name|component
operator|.
name|getNumberOfContainers
argument_list|()
expr_stmt|;
block|}
comment|// Probably due to user flexed down to 0
if|if
condition|(
name|total
operator|==
literal|0
condition|)
block|{
return|return
literal|100
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
operator|(
name|float
operator|)
name|liveInstances
operator|.
name|size
argument_list|()
operator|/
name|total
operator|*
literal|100
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|onError (Throwable e)
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in AMRMClient callback handler "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NMClientCallback
specifier|private
class|class
name|NMClientCallback
extends|extends
name|NMClientAsync
operator|.
name|AbstractCallbackHandler
block|{
DECL|method|onContainerStarted (ContainerId containerId, Map<String, ByteBuffer> allServiceResponse)
annotation|@
name|Override
specifier|public
name|void
name|onContainerStarted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|allServiceResponse
parameter_list|)
block|{
name|ComponentInstance
name|instance
init|=
name|liveInstances
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No component instance exists for "
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComponentEvent
name|event
init|=
operator|new
name|ComponentEvent
argument_list|(
name|instance
operator|.
name|getCompName
argument_list|()
argument_list|,
name|CONTAINER_STARTED
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|onContainerStatusReceived (ContainerId containerId, ContainerStatus containerStatus)
annotation|@
name|Override
specifier|public
name|void
name|onContainerStatusReceived
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|)
block|{      }
DECL|method|onContainerStopped (ContainerId containerId)
annotation|@
name|Override
specifier|public
name|void
name|onContainerStopped
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|onStartContainerError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onStartContainerError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|ComponentInstance
name|instance
init|=
name|liveInstances
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No component instance exists for "
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return;
block|}
name|amRMClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
comment|// After container released, it'll get CONTAINER_COMPLETED event from RM
comment|// automatically which will trigger stopping COMPONENT INSTANCE
block|}
DECL|method|onContainerResourceIncreased (ContainerId containerId, Resource resource)
annotation|@
name|Override
specifier|public
name|void
name|onContainerResourceIncreased
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{      }
DECL|method|onGetContainerStatusError (ContainerId containerId, Throwable t)
annotation|@
name|Override
specifier|public
name|void
name|onGetContainerStatusError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|onIncreaseContainerResourceError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onIncreaseContainerResourceError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|onStopContainerError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onStopContainerError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{      }
block|}
DECL|method|getServiceMetrics ()
specifier|public
name|ServiceMetrics
name|getServiceMetrics
parameter_list|()
block|{
return|return
name|serviceMetrics
return|;
block|}
DECL|method|getAmRMClient ()
specifier|public
name|AMRMClientAsync
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|getAmRMClient
parameter_list|()
block|{
return|return
name|amRMClient
return|;
block|}
DECL|method|getNmClient ()
specifier|public
name|NMClientAsync
name|getNmClient
parameter_list|()
block|{
return|return
name|nmClient
return|;
block|}
DECL|method|addLiveCompInstance (ContainerId containerId, ComponentInstance instance)
specifier|public
name|void
name|addLiveCompInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ComponentInstance
name|instance
parameter_list|)
block|{
name|liveInstances
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
DECL|method|removeLiveCompInstance (ContainerId containerId)
specifier|public
name|void
name|removeLiveCompInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|liveInstances
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompInstanceDispatcher ()
specifier|public
name|AsyncDispatcher
name|getCompInstanceDispatcher
parameter_list|()
block|{
return|return
name|compInstanceDispatcher
return|;
block|}
DECL|method|getYarnRegistryOperations ()
specifier|public
name|YarnRegistryViewForProviders
name|getYarnRegistryOperations
parameter_list|()
block|{
return|return
name|yarnRegistryOperations
return|;
block|}
DECL|method|getServiceTimelinePublisher ()
specifier|public
name|ServiceTimelinePublisher
name|getServiceTimelinePublisher
parameter_list|()
block|{
return|return
name|serviceTimelinePublisher
return|;
block|}
DECL|method|getLiveInstances ()
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ComponentInstance
argument_list|>
name|getLiveInstances
parameter_list|()
block|{
return|return
name|liveInstances
return|;
block|}
DECL|method|getContainerLaunchService ()
specifier|public
name|ContainerLaunchService
name|getContainerLaunchService
parameter_list|()
block|{
return|return
name|containerLaunchService
return|;
block|}
DECL|method|getContext ()
specifier|public
name|ServiceContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getAllComponents ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|getAllComponents
parameter_list|()
block|{
return|return
name|componentsByName
return|;
block|}
DECL|method|getApp ()
specifier|public
name|Application
name|getApp
parameter_list|()
block|{
return|return
name|app
return|;
block|}
DECL|method|getDispatcher ()
specifier|public
name|AsyncDispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
DECL|method|getDiagnostics ()
specifier|public
name|BoundedAppender
name|getDiagnostics
parameter_list|()
block|{
return|return
name|diagnostics
return|;
block|}
block|}
end_class

end_unit

