begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Write the metrics to a ATSv2. Generally, this class is instantiated via  * hadoop-metrics2 property files. Specifically, you would create this class by  * adding the following to by This would actually be set as:<code>  * [prefix].sink.[some instance name].class  * =org.apache.slider.server.appmaster.timelineservice.SliderMetricsSink  *</code>, where<tt>prefix</tt> is "atsv2": and<tt>some instance name</tt> is  * just any unique name, so properties can be differentiated if there are  * multiple sinks of the same type created  */
end_comment

begin_class
DECL|class|SliderMetricsSink
specifier|public
class|class
name|SliderMetricsSink
implements|implements
name|MetricsSink
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderMetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serviceTimelinePublisher
specifier|private
name|ServiceTimelinePublisher
name|serviceTimelinePublisher
decl_stmt|;
DECL|method|SliderMetricsSink ()
specifier|public
name|SliderMetricsSink
parameter_list|()
block|{    }
DECL|method|SliderMetricsSink (ServiceTimelinePublisher publisher)
specifier|public
name|SliderMetricsSink
parameter_list|(
name|ServiceTimelinePublisher
name|publisher
parameter_list|)
block|{
name|serviceTimelinePublisher
operator|=
name|publisher
expr_stmt|;
block|}
comment|/**    * Publishes service and component metrics to ATS.    */
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|serviceTimelinePublisher
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ServiceTimelinePublisher has stopped. "
operator|+
literal|"Not publishing any more metrics to ATS."
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|isServiceMetrics
init|=
literal|false
decl_stmt|;
name|boolean
name|isComponentMetrics
init|=
literal|false
decl_stmt|;
name|String
name|appId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MetricsTag
name|tag
range|:
name|record
operator|.
name|tags
argument_list|()
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
operator|&&
name|tag
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"service"
argument_list|)
condition|)
block|{
name|isServiceMetrics
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
operator|&&
name|tag
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"component"
argument_list|)
condition|)
block|{
name|isComponentMetrics
operator|=
literal|true
expr_stmt|;
break|break;
comment|// if component metrics, no more information required from tag so
comment|// break the loop
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"appId"
argument_list|)
condition|)
block|{
name|appId
operator|=
name|tag
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isServiceMetrics
operator|&&
name|appId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Publishing service metrics. "
operator|+
name|record
argument_list|)
expr_stmt|;
block|}
name|serviceTimelinePublisher
operator|.
name|publishMetrics
argument_list|(
name|record
operator|.
name|metrics
argument_list|()
argument_list|,
name|appId
argument_list|,
name|SliderTimelineEntityType
operator|.
name|SERVICE_ATTEMPT
operator|.
name|toString
argument_list|()
argument_list|,
name|record
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isComponentMetrics
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Publishing Component metrics. "
operator|+
name|record
argument_list|)
expr_stmt|;
block|}
name|serviceTimelinePublisher
operator|.
name|publishMetrics
argument_list|(
name|record
operator|.
name|metrics
argument_list|()
argument_list|,
name|record
operator|.
name|name
argument_list|()
argument_list|,
name|SliderTimelineEntityType
operator|.
name|COMPONENT
operator|.
name|toString
argument_list|()
argument_list|,
name|record
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{   }
block|}
end_class

end_unit

