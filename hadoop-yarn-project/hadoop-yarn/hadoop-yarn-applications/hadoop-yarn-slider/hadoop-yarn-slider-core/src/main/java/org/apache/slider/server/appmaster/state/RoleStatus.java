begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ComponentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|RoleStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
operator|.
name|BoolMetricPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|metrics
operator|.
name|ServiceMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Models the ongoing status of all nodes in an application.  *  * These structures are shared across the {@link AppState} and {@link RoleHistory} structures,  * and must be designed for synchronous access. Atomic counters are preferred to anything which  * requires synchronization. Where synchronized access is good is that it allows for  * the whole instance to be locked, for updating multiple entries.  */
end_comment

begin_class
DECL|class|RoleStatus
specifier|public
specifier|final
class|class
name|RoleStatus
implements|implements
name|MetricSet
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * Role priority    */
DECL|field|key
specifier|private
specifier|final
name|int
name|key
decl_stmt|;
DECL|field|providerRole
specifier|private
specifier|final
name|ProviderRole
name|providerRole
decl_stmt|;
comment|/** resource requirements */
DECL|field|resourceRequirements
specifier|private
name|Resource
name|resourceRequirements
decl_stmt|;
DECL|field|componentMetrics
specifier|private
name|ServiceMetrics
name|componentMetrics
decl_stmt|;
comment|/** any pending AA request */
DECL|field|outstandingAArequest
specifier|private
specifier|volatile
name|OutstandingRequest
name|outstandingAArequest
init|=
literal|null
decl_stmt|;
DECL|field|failureMessage
specifier|private
name|String
name|failureMessage
init|=
literal|""
decl_stmt|;
DECL|method|RoleStatus (ProviderRole providerRole)
specifier|public
name|RoleStatus
parameter_list|(
name|ProviderRole
name|providerRole
parameter_list|)
block|{
name|this
operator|.
name|providerRole
operator|=
name|providerRole
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|providerRole
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|providerRole
operator|.
name|id
expr_stmt|;
name|componentMetrics
operator|=
name|ServiceMetrics
operator|.
name|register
argument_list|(
name|this
operator|.
name|name
argument_list|,
literal|"Metrics for component "
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|componentMetrics
operator|.
name|tag
argument_list|(
literal|"type"
argument_list|,
literal|"Metrics type [component or service]"
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
block|}
DECL|method|getComponentMetrics ()
specifier|public
name|ServiceMetrics
name|getComponentMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|componentMetrics
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|getMetrics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"outstandingAArequest"
argument_list|,
operator|new
name|BoolMetricPredicate
argument_list|(
operator|new
name|BoolMetricPredicate
operator|.
name|Eval
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|eval
parameter_list|()
block|{
return|return
name|isAARequestOutstanding
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metrics
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getKey ()
specifier|public
name|int
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
return|;
block|}
comment|/**    * Get the placement policy enum, from the values in    * {@link PlacementPolicy}    * @return the placement policy for this role    */
DECL|method|getPlacementPolicy ()
specifier|public
name|int
name|getPlacementPolicy
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|placementPolicy
return|;
block|}
DECL|method|getPlacementTimeoutSeconds ()
specifier|public
name|long
name|getPlacementTimeoutSeconds
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|placementTimeoutSeconds
return|;
block|}
comment|/**    * The number of failures on a specific node that can be tolerated    * before selecting a different node for placement    * @return    */
DECL|method|getNodeFailureThreshold ()
specifier|public
name|int
name|getNodeFailureThreshold
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|nodeFailureThreshold
return|;
block|}
DECL|method|isExcludeFromFlexing ()
specifier|public
name|boolean
name|isExcludeFromFlexing
parameter_list|()
block|{
return|return
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|EXCLUDE_FROM_FLEXING
argument_list|)
return|;
block|}
DECL|method|isStrictPlacement ()
specifier|public
name|boolean
name|isStrictPlacement
parameter_list|()
block|{
return|return
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|STRICT
argument_list|)
return|;
block|}
DECL|method|isAntiAffinePlacement ()
specifier|public
name|boolean
name|isAntiAffinePlacement
parameter_list|()
block|{
return|return
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|ANTI_AFFINITY_REQUIRED
argument_list|)
return|;
block|}
DECL|method|hasPlacementPolicy (int policy)
specifier|public
name|boolean
name|hasPlacementPolicy
parameter_list|(
name|int
name|policy
parameter_list|)
block|{
return|return
literal|0
operator|!=
operator|(
name|getPlacementPolicy
argument_list|()
operator|&
name|policy
operator|)
return|;
block|}
DECL|method|isPlacementDesired ()
specifier|public
name|boolean
name|isPlacementDesired
parameter_list|()
block|{
return|return
operator|!
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|ANYWHERE
argument_list|)
return|;
block|}
comment|/**    * Probe for an outstanding AA request being true    * @return true if there is an outstanding AA Request    */
DECL|method|isAARequestOutstanding ()
specifier|public
name|boolean
name|isAARequestOutstanding
parameter_list|()
block|{
return|return
name|outstandingAArequest
operator|!=
literal|null
return|;
block|}
comment|/**    * expose the predicate {@link #isAARequestOutstanding()} as an integer,    * which is very convenient in tests    * @return 1 if there is an outstanding request; 0 if not    */
DECL|method|getOutstandingAARequestCount ()
specifier|public
name|int
name|getOutstandingAARequestCount
parameter_list|()
block|{
return|return
name|isAARequestOutstanding
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
comment|/**    * Note that a role failed, text will    * be used in any diagnostics if an exception    * is later raised.    * @param text text about the failure    */
DECL|method|noteFailed (String text)
specifier|public
specifier|synchronized
name|void
name|noteFailed
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|failureMessage
operator|=
name|text
expr_stmt|;
block|}
block|}
DECL|method|setOutstandingAArequest (OutstandingRequest outstandingAArequest)
specifier|public
name|void
name|setOutstandingAArequest
parameter_list|(
name|OutstandingRequest
name|outstandingAArequest
parameter_list|)
block|{
name|this
operator|.
name|outstandingAArequest
operator|=
name|outstandingAArequest
expr_stmt|;
block|}
comment|/**    * Complete the outstanding AA request (there's no check for one in progress, caller    * expected to have done that).    */
DECL|method|completeOutstandingAARequest ()
specifier|public
name|void
name|completeOutstandingAARequest
parameter_list|()
block|{
name|setOutstandingAArequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cancel any outstanding AA request. Harmless if the role is non-AA, or    * if there are no outstanding requests.    */
DECL|method|cancelOutstandingAARequest ()
specifier|public
name|void
name|cancelOutstandingAARequest
parameter_list|()
block|{
if|if
condition|(
name|outstandingAArequest
operator|!=
literal|null
condition|)
block|{
name|setOutstandingAArequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDesired ()
specifier|public
name|long
name|getDesired
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersDesired
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|setDesired (int desired)
specifier|public
name|void
name|setDesired
parameter_list|(
name|int
name|desired
parameter_list|)
block|{
name|componentMetrics
operator|.
name|containersDesired
operator|.
name|set
argument_list|(
name|desired
argument_list|)
expr_stmt|;
block|}
DECL|method|getRunning ()
specifier|public
name|long
name|getRunning
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersRunning
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getRequested ()
specifier|public
name|long
name|getRequested
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersRequested
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAAPending ()
specifier|public
name|long
name|getAAPending
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|pendingAAContainers
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|decAAPending ()
name|void
name|decAAPending
parameter_list|()
block|{
name|componentMetrics
operator|.
name|pendingAAContainers
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
DECL|method|setAAPending (long n)
name|void
name|setAAPending
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|componentMetrics
operator|.
name|pendingAAContainers
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|getLimitsExceeded ()
specifier|public
name|long
name|getLimitsExceeded
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersLimitsExceeded
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getPreempted ()
specifier|public
name|long
name|getPreempted
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersPreempted
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getDiskFailed ()
specifier|public
name|long
name|getDiskFailed
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersDiskFailure
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getFailedRecently ()
specifier|public
name|long
name|getFailedRecently
parameter_list|()
block|{
comment|//    return componentMetrics.failedSinceLastThreshold.value();
return|return
literal|0
return|;
block|}
DECL|method|resetFailedRecently ()
specifier|public
name|long
name|resetFailedRecently
parameter_list|()
block|{
comment|//    long count =
comment|//        componentMetrics.failedSinceLastThreshold.value();
comment|//    componentMetrics.failedSinceLastThreshold.set(0);
return|return
literal|0
return|;
block|}
DECL|method|getFailed ()
specifier|public
name|long
name|getFailed
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersFailed
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getFailureMessage ()
name|String
name|getFailureMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|failureMessage
return|;
block|}
comment|/**    * Get the number of roles we are short of.    * nodes released are ignored.    * @return the positive or negative number of roles to add/release.    * 0 means "do nothing".    */
DECL|method|getDelta ()
specifier|public
name|long
name|getDelta
parameter_list|()
block|{
name|long
name|inuse
init|=
name|getActualAndRequested
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|getDesired
argument_list|()
operator|-
name|inuse
decl_stmt|;
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
comment|// TODO this doesn't do anything now that we're not tracking releasing
comment|// containers -- maybe we need releasing
comment|//if we are releasing, remove the number that are already released.
comment|//but never switch to a positive
comment|// TODO, WHY is this min operation even needed ??? if delta is negative, it's always< 0 ???
name|delta
operator|=
name|Math
operator|.
name|min
argument_list|(
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|delta
return|;
block|}
comment|/**    * Get count of actual and requested containers.    * @return the size of the application when outstanding requests are included.    */
DECL|method|getActualAndRequested ()
specifier|public
name|long
name|getActualAndRequested
parameter_list|()
block|{
return|return
name|getRunning
argument_list|()
operator|+
name|getRequested
argument_list|()
return|;
block|}
comment|/**    * Get the provider role    * @return the provider role    */
DECL|method|getProviderRole ()
specifier|public
name|ProviderRole
name|getProviderRole
parameter_list|()
block|{
return|return
name|providerRole
return|;
block|}
comment|/**    * Produced a serialized form which can be served up as JSON    * @return a summary of the current role status.    */
DECL|method|serialize ()
specifier|public
specifier|synchronized
name|ComponentInformation
name|serialize
parameter_list|()
block|{
name|ComponentInformation
name|info
init|=
operator|new
name|ComponentInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Get the (possibly null) label expression for this role    * @return a string or null    */
DECL|method|getLabelExpression ()
specifier|public
name|String
name|getLabelExpression
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|labelExpression
return|;
block|}
DECL|method|getResourceRequirements ()
specifier|public
name|Resource
name|getResourceRequirements
parameter_list|()
block|{
return|return
name|resourceRequirements
return|;
block|}
DECL|method|setResourceRequirements (Resource resourceRequirements)
specifier|public
name|void
name|setResourceRequirements
parameter_list|(
name|Resource
name|resourceRequirements
parameter_list|)
block|{
name|this
operator|.
name|resourceRequirements
operator|=
name|resourceRequirements
expr_stmt|;
block|}
comment|/**    * Compare two role status entries by name    */
DECL|class|CompareByName
specifier|public
specifier|static
class|class
name|CompareByName
implements|implements
name|Comparator
argument_list|<
name|RoleStatus
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (RoleStatus o1, RoleStatus o2)
specifier|public
name|int
name|compare
parameter_list|(
name|RoleStatus
name|o1
parameter_list|,
name|RoleStatus
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Compare two role status entries by key    */
DECL|class|CompareByKey
specifier|public
specifier|static
class|class
name|CompareByKey
implements|implements
name|Comparator
argument_list|<
name|RoleStatus
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (RoleStatus o1, RoleStatus o2)
specifier|public
name|int
name|compare
parameter_list|(
name|RoleStatus
name|o1
parameter_list|,
name|RoleStatus
name|o2
parameter_list|)
block|{
return|return
operator|(
name|o1
operator|.
name|getKey
argument_list|()
operator|<
name|o2
operator|.
name|getKey
argument_list|()
condition|?
operator|-
literal|1
else|:
operator|(
name|o1
operator|.
name|getKey
argument_list|()
operator|==
name|o2
operator|.
name|getKey
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * Given a resource, set its requirements to those this role needs    * @param resource resource to configure    * @return the resource    */
DECL|method|copyResourceRequirements (Resource resource)
specifier|public
name|Resource
name|copyResourceRequirements
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|resourceRequirements
argument_list|,
literal|"Role resource requirements have not been set"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
name|resourceRequirements
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVirtualCores
argument_list|(
name|resourceRequirements
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
DECL|method|getStatistics ()
specifier|public
specifier|synchronized
name|RoleStatistics
name|getStatistics
parameter_list|()
block|{
name|RoleStatistics
name|stats
init|=
operator|new
name|RoleStatistics
argument_list|()
decl_stmt|;
name|stats
operator|.
name|activeAA
operator|=
name|getOutstandingAARequestCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|actual
operator|=
name|getRunning
argument_list|()
expr_stmt|;
name|stats
operator|.
name|desired
operator|=
name|getDesired
argument_list|()
expr_stmt|;
name|stats
operator|.
name|failed
operator|=
name|getFailed
argument_list|()
expr_stmt|;
name|stats
operator|.
name|limitsExceeded
operator|=
name|getLimitsExceeded
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeFailed
operator|=
name|getDiskFailed
argument_list|()
expr_stmt|;
name|stats
operator|.
name|preempted
operator|=
name|getPreempted
argument_list|()
expr_stmt|;
name|stats
operator|.
name|requested
operator|=
name|getRequested
argument_list|()
expr_stmt|;
name|stats
operator|.
name|started
operator|=
name|getRunning
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

