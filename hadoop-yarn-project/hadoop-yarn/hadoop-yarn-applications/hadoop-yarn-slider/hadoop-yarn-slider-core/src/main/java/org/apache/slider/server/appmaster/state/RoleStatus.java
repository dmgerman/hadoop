begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ComponentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|RoleStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
operator|.
name|BoolMetricPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
operator|.
name|LongGauge
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Models the ongoing status of all nodes in an application.  *  * These structures are shared across the {@link AppState} and {@link RoleHistory} structures,  * and must be designed for synchronous access. Atomic counters are preferred to anything which  * requires synchronization. Where synchronized access is good is that it allows for  * the whole instance to be locked, for updating multiple entries.  */
end_comment

begin_class
DECL|class|RoleStatus
specifier|public
specifier|final
class|class
name|RoleStatus
implements|implements
name|Cloneable
implements|,
name|MetricSet
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|String
name|group
decl_stmt|;
comment|/**    * Role priority    */
DECL|field|key
specifier|private
specifier|final
name|int
name|key
decl_stmt|;
DECL|field|providerRole
specifier|private
specifier|final
name|ProviderRole
name|providerRole
decl_stmt|;
DECL|field|actual
specifier|private
specifier|final
name|LongGauge
name|actual
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|completed
specifier|private
specifier|final
name|LongGauge
name|completed
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|desired
specifier|private
specifier|final
name|LongGauge
name|desired
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|failed
specifier|private
specifier|final
name|LongGauge
name|failed
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|failedRecently
specifier|private
specifier|final
name|LongGauge
name|failedRecently
init|=
operator|new
name|LongGauge
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|limitsExceeded
specifier|private
specifier|final
name|LongGauge
name|limitsExceeded
init|=
operator|new
name|LongGauge
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|nodeFailed
specifier|private
specifier|final
name|LongGauge
name|nodeFailed
init|=
operator|new
name|LongGauge
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** Number of AA requests queued. */
DECL|field|pendingAntiAffineRequests
specifier|private
specifier|final
name|LongGauge
name|pendingAntiAffineRequests
init|=
operator|new
name|LongGauge
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|preempted
specifier|private
specifier|final
name|LongGauge
name|preempted
init|=
operator|new
name|LongGauge
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|releasing
specifier|private
specifier|final
name|LongGauge
name|releasing
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|requested
specifier|private
specifier|final
name|LongGauge
name|requested
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|started
specifier|private
specifier|final
name|LongGauge
name|started
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|startFailed
specifier|private
specifier|final
name|LongGauge
name|startFailed
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
DECL|field|totalRequested
specifier|private
specifier|final
name|LongGauge
name|totalRequested
init|=
operator|new
name|LongGauge
argument_list|()
decl_stmt|;
comment|/** resource requirements */
DECL|field|resourceRequirements
specifier|private
name|Resource
name|resourceRequirements
decl_stmt|;
comment|/** any pending AA request */
DECL|field|outstandingAArequest
specifier|private
specifier|volatile
name|OutstandingRequest
name|outstandingAArequest
init|=
literal|null
decl_stmt|;
DECL|field|failureMessage
specifier|private
name|String
name|failureMessage
init|=
literal|""
decl_stmt|;
DECL|method|RoleStatus (ProviderRole providerRole)
specifier|public
name|RoleStatus
parameter_list|(
name|ProviderRole
name|providerRole
parameter_list|)
block|{
name|this
operator|.
name|providerRole
operator|=
name|providerRole
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|providerRole
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|providerRole
operator|.
name|group
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|providerRole
operator|.
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|getMetrics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"actual"
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"completed"
argument_list|,
name|completed
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"desired"
argument_list|,
name|desired
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"failed"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"limitsExceeded"
argument_list|,
name|limitsExceeded
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"nodeFailed"
argument_list|,
name|nodeFailed
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"preempted"
argument_list|,
name|preempted
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"pendingAntiAffineRequests"
argument_list|,
name|pendingAntiAffineRequests
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"releasing"
argument_list|,
name|releasing
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"requested"
argument_list|,
name|requested
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"preempted"
argument_list|,
name|preempted
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"releasing"
argument_list|,
name|releasing
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"requested"
argument_list|,
name|requested
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"started"
argument_list|,
name|started
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"startFailed"
argument_list|,
name|startFailed
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"totalRequested"
argument_list|,
name|totalRequested
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
literal|"outstandingAArequest"
argument_list|,
operator|new
name|BoolMetricPredicate
argument_list|(
operator|new
name|BoolMetricPredicate
operator|.
name|Eval
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|eval
parameter_list|()
block|{
return|return
name|isAARequestOutstanding
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metrics
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
DECL|method|getKey ()
specifier|public
name|int
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
return|;
block|}
comment|/**    * Get the placement policy enum, from the values in    * {@link PlacementPolicy}    * @return the placement policy for this role    */
DECL|method|getPlacementPolicy ()
specifier|public
name|int
name|getPlacementPolicy
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|placementPolicy
return|;
block|}
DECL|method|getPlacementTimeoutSeconds ()
specifier|public
name|long
name|getPlacementTimeoutSeconds
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|placementTimeoutSeconds
return|;
block|}
comment|/**    * The number of failures on a specific node that can be tolerated    * before selecting a different node for placement    * @return    */
DECL|method|getNodeFailureThreshold ()
specifier|public
name|int
name|getNodeFailureThreshold
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|nodeFailureThreshold
return|;
block|}
DECL|method|isExcludeFromFlexing ()
specifier|public
name|boolean
name|isExcludeFromFlexing
parameter_list|()
block|{
return|return
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|EXCLUDE_FROM_FLEXING
argument_list|)
return|;
block|}
DECL|method|isStrictPlacement ()
specifier|public
name|boolean
name|isStrictPlacement
parameter_list|()
block|{
return|return
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|STRICT
argument_list|)
return|;
block|}
DECL|method|isAntiAffinePlacement ()
specifier|public
name|boolean
name|isAntiAffinePlacement
parameter_list|()
block|{
return|return
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|ANTI_AFFINITY_REQUIRED
argument_list|)
return|;
block|}
DECL|method|hasPlacementPolicy (int policy)
specifier|public
name|boolean
name|hasPlacementPolicy
parameter_list|(
name|int
name|policy
parameter_list|)
block|{
return|return
literal|0
operator|!=
operator|(
name|getPlacementPolicy
argument_list|()
operator|&
name|policy
operator|)
return|;
block|}
DECL|method|isPlacementDesired ()
specifier|public
name|boolean
name|isPlacementDesired
parameter_list|()
block|{
return|return
operator|!
name|hasPlacementPolicy
argument_list|(
name|PlacementPolicy
operator|.
name|ANYWHERE
argument_list|)
return|;
block|}
DECL|method|getDesired ()
specifier|public
name|long
name|getDesired
parameter_list|()
block|{
return|return
name|desired
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setDesired (long desired)
specifier|public
name|void
name|setDesired
parameter_list|(
name|long
name|desired
parameter_list|)
block|{
name|this
operator|.
name|desired
operator|.
name|set
argument_list|(
name|desired
argument_list|)
expr_stmt|;
block|}
DECL|method|getActual ()
specifier|public
name|long
name|getActual
parameter_list|()
block|{
return|return
name|actual
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incActual ()
specifier|public
name|long
name|incActual
parameter_list|()
block|{
return|return
name|actual
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|decActual ()
specifier|public
name|long
name|decActual
parameter_list|()
block|{
return|return
name|actual
operator|.
name|decToFloor
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Get the request count.    * @return a count of requested containers    */
DECL|method|getRequested ()
specifier|public
name|long
name|getRequested
parameter_list|()
block|{
return|return
name|requested
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incRequested ()
specifier|public
name|long
name|incRequested
parameter_list|()
block|{
name|totalRequested
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|requested
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|cancel (long count)
specifier|public
name|void
name|cancel
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|requested
operator|.
name|decToFloor
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|decRequested ()
specifier|public
name|void
name|decRequested
parameter_list|()
block|{
name|cancel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getReleasing ()
specifier|public
name|long
name|getReleasing
parameter_list|()
block|{
return|return
name|releasing
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incReleasing ()
specifier|public
name|long
name|incReleasing
parameter_list|()
block|{
return|return
name|releasing
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|decReleasing ()
specifier|public
name|long
name|decReleasing
parameter_list|()
block|{
return|return
name|releasing
operator|.
name|decToFloor
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|getFailed ()
specifier|public
name|long
name|getFailed
parameter_list|()
block|{
return|return
name|failed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getFailedRecently ()
specifier|public
name|long
name|getFailedRecently
parameter_list|()
block|{
return|return
name|failedRecently
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Reset the recent failure    * @return the number of failures in the "recent" window    */
DECL|method|resetFailedRecently ()
specifier|public
name|long
name|resetFailedRecently
parameter_list|()
block|{
return|return
name|failedRecently
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getLimitsExceeded ()
specifier|public
name|long
name|getLimitsExceeded
parameter_list|()
block|{
return|return
name|limitsExceeded
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incPendingAntiAffineRequests (long v)
specifier|public
name|long
name|incPendingAntiAffineRequests
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
name|pendingAntiAffineRequests
operator|.
name|addAndGet
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/**    * Probe for an outstanding AA request being true    * @return true if there is an outstanding AA Request    */
DECL|method|isAARequestOutstanding ()
specifier|public
name|boolean
name|isAARequestOutstanding
parameter_list|()
block|{
return|return
name|outstandingAArequest
operator|!=
literal|null
return|;
block|}
comment|/**    * expose the predicate {@link #isAARequestOutstanding()} as an integer,    * which is very convenient in tests    * @return 1 if there is an outstanding request; 0 if not    */
DECL|method|getOutstandingAARequestCount ()
specifier|public
name|int
name|getOutstandingAARequestCount
parameter_list|()
block|{
return|return
name|isAARequestOutstanding
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
comment|/**    * Note that a role failed, text will    * be used in any diagnostics if an exception    * is later raised.    * @param startupFailure flag to indicate this was a startup event    * @param text text about the failure    * @param outcome outcome of the container    */
DECL|method|noteFailed (boolean startupFailure, String text, ContainerOutcome outcome)
specifier|public
specifier|synchronized
name|void
name|noteFailed
parameter_list|(
name|boolean
name|startupFailure
parameter_list|,
name|String
name|text
parameter_list|,
name|ContainerOutcome
name|outcome
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|failureMessage
operator|=
name|text
expr_stmt|;
block|}
switch|switch
condition|(
name|outcome
condition|)
block|{
case|case
name|Preempted
case|:
name|preempted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|Node_failure
case|:
name|nodeFailed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|failed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|Failed_limits_exceeded
case|:
comment|// exceeded memory or CPU; app/configuration related
name|limitsExceeded
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// fall through
case|case
name|Failed
case|:
comment|// application failure, possibly node related, possibly not
default|default:
comment|// anything else (future-proofing)
name|failed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|failedRecently
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|//have a look to see if it short lived
if|if
condition|(
name|startupFailure
condition|)
block|{
name|incStartFailed
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getStartFailed ()
specifier|public
name|long
name|getStartFailed
parameter_list|()
block|{
return|return
name|startFailed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incStartFailed ()
specifier|public
specifier|synchronized
name|void
name|incStartFailed
parameter_list|()
block|{
name|startFailed
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
DECL|method|getFailureMessage ()
specifier|public
specifier|synchronized
name|String
name|getFailureMessage
parameter_list|()
block|{
return|return
name|failureMessage
return|;
block|}
DECL|method|getCompleted ()
specifier|public
name|long
name|getCompleted
parameter_list|()
block|{
return|return
name|completed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setCompleted (int completed)
specifier|public
specifier|synchronized
name|void
name|setCompleted
parameter_list|(
name|int
name|completed
parameter_list|)
block|{
name|this
operator|.
name|completed
operator|.
name|set
argument_list|(
name|completed
argument_list|)
expr_stmt|;
block|}
DECL|method|incCompleted ()
specifier|public
name|long
name|incCompleted
parameter_list|()
block|{
return|return
name|completed
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|getStarted ()
specifier|public
name|long
name|getStarted
parameter_list|()
block|{
return|return
name|started
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incStarted ()
specifier|public
specifier|synchronized
name|void
name|incStarted
parameter_list|()
block|{
name|started
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|getTotalRequested ()
specifier|public
name|long
name|getTotalRequested
parameter_list|()
block|{
return|return
name|totalRequested
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getPreempted ()
specifier|public
name|long
name|getPreempted
parameter_list|()
block|{
return|return
name|preempted
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getNodeFailed ()
specifier|public
name|long
name|getNodeFailed
parameter_list|()
block|{
return|return
name|nodeFailed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getPendingAntiAffineRequests ()
specifier|public
name|long
name|getPendingAntiAffineRequests
parameter_list|()
block|{
return|return
name|pendingAntiAffineRequests
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setPendingAntiAffineRequests (long pendingAntiAffineRequests)
specifier|public
name|void
name|setPendingAntiAffineRequests
parameter_list|(
name|long
name|pendingAntiAffineRequests
parameter_list|)
block|{
name|this
operator|.
name|pendingAntiAffineRequests
operator|.
name|set
argument_list|(
name|pendingAntiAffineRequests
argument_list|)
expr_stmt|;
block|}
DECL|method|decPendingAntiAffineRequests ()
specifier|public
name|long
name|decPendingAntiAffineRequests
parameter_list|()
block|{
return|return
name|pendingAntiAffineRequests
operator|.
name|decToFloor
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|getOutstandingAArequest ()
specifier|public
name|OutstandingRequest
name|getOutstandingAArequest
parameter_list|()
block|{
return|return
name|outstandingAArequest
return|;
block|}
DECL|method|setOutstandingAArequest (OutstandingRequest outstandingAArequest)
specifier|public
name|void
name|setOutstandingAArequest
parameter_list|(
name|OutstandingRequest
name|outstandingAArequest
parameter_list|)
block|{
name|this
operator|.
name|outstandingAArequest
operator|=
name|outstandingAArequest
expr_stmt|;
block|}
comment|/**    * Complete the outstanding AA request (there's no check for one in progress, caller    * expected to have done that).    */
DECL|method|completeOutstandingAARequest ()
specifier|public
name|void
name|completeOutstandingAARequest
parameter_list|()
block|{
name|setOutstandingAArequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cancel any outstanding AA request. Harmless if the role is non-AA, or    * if there are no outstanding requests.    */
DECL|method|cancelOutstandingAARequest ()
specifier|public
name|void
name|cancelOutstandingAARequest
parameter_list|()
block|{
if|if
condition|(
name|outstandingAArequest
operator|!=
literal|null
condition|)
block|{
name|setOutstandingAArequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setPendingAntiAffineRequests
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|decRequested
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the number of roles we are short of.    * nodes released are ignored.    * @return the positive or negative number of roles to add/release.    * 0 means "do nothing".    */
DECL|method|getDelta ()
specifier|public
name|long
name|getDelta
parameter_list|()
block|{
name|long
name|inuse
init|=
name|getActualAndRequested
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|desired
operator|.
name|get
argument_list|()
operator|-
name|inuse
decl_stmt|;
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
comment|//if we are releasing, remove the number that are already released.
name|delta
operator|+=
name|releasing
operator|.
name|get
argument_list|()
expr_stmt|;
comment|//but never switch to a positive
name|delta
operator|=
name|Math
operator|.
name|min
argument_list|(
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|delta
return|;
block|}
comment|/**    * Get count of actual and requested containers. This includes pending ones    * @return the size of the application when outstanding requests are included.    */
DECL|method|getActualAndRequested ()
specifier|public
name|long
name|getActualAndRequested
parameter_list|()
block|{
return|return
name|actual
operator|.
name|get
argument_list|()
operator|+
name|requested
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RoleStatus{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", group="
argument_list|)
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", key="
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", desired="
argument_list|)
operator|.
name|append
argument_list|(
name|desired
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", actual="
argument_list|)
operator|.
name|append
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", requested="
argument_list|)
operator|.
name|append
argument_list|(
name|requested
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", releasing="
argument_list|)
operator|.
name|append
argument_list|(
name|releasing
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failed="
argument_list|)
operator|.
name|append
argument_list|(
name|failed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", startFailed="
argument_list|)
operator|.
name|append
argument_list|(
name|startFailed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", started="
argument_list|)
operator|.
name|append
argument_list|(
name|started
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", completed="
argument_list|)
operator|.
name|append
argument_list|(
name|completed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", totalRequested="
argument_list|)
operator|.
name|append
argument_list|(
name|totalRequested
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", preempted="
argument_list|)
operator|.
name|append
argument_list|(
name|preempted
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", nodeFailed="
argument_list|)
operator|.
name|append
argument_list|(
name|nodeFailed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failedRecently="
argument_list|)
operator|.
name|append
argument_list|(
name|failedRecently
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", limitsExceeded="
argument_list|)
operator|.
name|append
argument_list|(
name|limitsExceeded
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", resourceRequirements="
argument_list|)
operator|.
name|append
argument_list|(
name|resourceRequirements
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", isAntiAffinePlacement="
argument_list|)
operator|.
name|append
argument_list|(
name|isAntiAffinePlacement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAntiAffinePlacement
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", pendingAntiAffineRequests="
argument_list|)
operator|.
name|append
argument_list|(
name|pendingAntiAffineRequests
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", outstandingAArequest="
argument_list|)
operator|.
name|append
argument_list|(
name|outstandingAArequest
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", failureMessage='"
argument_list|)
operator|.
name|append
argument_list|(
name|failureMessage
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", providerRole="
argument_list|)
operator|.
name|append
argument_list|(
name|providerRole
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone ()
specifier|public
specifier|synchronized
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**    * Get the provider role    * @return the provider role    */
DECL|method|getProviderRole ()
specifier|public
name|ProviderRole
name|getProviderRole
parameter_list|()
block|{
return|return
name|providerRole
return|;
block|}
comment|/**    * Build the statistics map from the current data    * @return a map for use in statistics reports    */
DECL|method|buildStatistics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|buildStatistics
parameter_list|()
block|{
name|ComponentInformation
name|componentInformation
init|=
name|serialize
argument_list|()
decl_stmt|;
return|return
name|componentInformation
operator|.
name|buildStatistics
argument_list|()
return|;
block|}
comment|/**    * Produced a serialized form which can be served up as JSON    * @return a summary of the current role status.    */
DECL|method|serialize ()
specifier|public
specifier|synchronized
name|ComponentInformation
name|serialize
parameter_list|()
block|{
name|ComponentInformation
name|info
init|=
operator|new
name|ComponentInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|info
operator|.
name|priority
operator|=
name|getPriority
argument_list|()
expr_stmt|;
name|info
operator|.
name|desired
operator|=
name|desired
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|actual
operator|=
name|actual
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|requested
operator|=
name|requested
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|releasing
operator|=
name|releasing
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|failed
operator|=
name|failed
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|startFailed
operator|=
name|startFailed
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|placementPolicy
operator|=
name|getPlacementPolicy
argument_list|()
expr_stmt|;
name|info
operator|.
name|failureMessage
operator|=
name|failureMessage
expr_stmt|;
name|info
operator|.
name|totalRequested
operator|=
name|totalRequested
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|failedRecently
operator|=
name|failedRecently
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|nodeFailed
operator|=
name|nodeFailed
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|preempted
operator|=
name|preempted
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|pendingAntiAffineRequestCount
operator|=
name|pendingAntiAffineRequests
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|info
operator|.
name|isAARequestOutstanding
operator|=
name|isAARequestOutstanding
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Get the (possibly null) label expression for this role    * @return a string or null    */
DECL|method|getLabelExpression ()
specifier|public
name|String
name|getLabelExpression
parameter_list|()
block|{
return|return
name|providerRole
operator|.
name|labelExpression
return|;
block|}
DECL|method|getResourceRequirements ()
specifier|public
name|Resource
name|getResourceRequirements
parameter_list|()
block|{
return|return
name|resourceRequirements
return|;
block|}
DECL|method|setResourceRequirements (Resource resourceRequirements)
specifier|public
name|void
name|setResourceRequirements
parameter_list|(
name|Resource
name|resourceRequirements
parameter_list|)
block|{
name|this
operator|.
name|resourceRequirements
operator|=
name|resourceRequirements
expr_stmt|;
block|}
comment|/**    * Compare two role status entries by name    */
DECL|class|CompareByName
specifier|public
specifier|static
class|class
name|CompareByName
implements|implements
name|Comparator
argument_list|<
name|RoleStatus
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (RoleStatus o1, RoleStatus o2)
specifier|public
name|int
name|compare
parameter_list|(
name|RoleStatus
name|o1
parameter_list|,
name|RoleStatus
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Compare two role status entries by key    */
DECL|class|CompareByKey
specifier|public
specifier|static
class|class
name|CompareByKey
implements|implements
name|Comparator
argument_list|<
name|RoleStatus
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (RoleStatus o1, RoleStatus o2)
specifier|public
name|int
name|compare
parameter_list|(
name|RoleStatus
name|o1
parameter_list|,
name|RoleStatus
name|o2
parameter_list|)
block|{
return|return
operator|(
name|o1
operator|.
name|getKey
argument_list|()
operator|<
name|o2
operator|.
name|getKey
argument_list|()
condition|?
operator|-
literal|1
else|:
operator|(
name|o1
operator|.
name|getKey
argument_list|()
operator|==
name|o2
operator|.
name|getKey
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * Given a resource, set its requirements to those this role needs    * @param resource resource to configure    * @return the resource    */
DECL|method|copyResourceRequirements (Resource resource)
specifier|public
name|Resource
name|copyResourceRequirements
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|resourceRequirements
argument_list|,
literal|"Role resource requirements have not been set"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
name|resourceRequirements
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVirtualCores
argument_list|(
name|resourceRequirements
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
DECL|method|getStatistics ()
specifier|public
specifier|synchronized
name|RoleStatistics
name|getStatistics
parameter_list|()
block|{
name|RoleStatistics
name|stats
init|=
operator|new
name|RoleStatistics
argument_list|()
decl_stmt|;
name|stats
operator|.
name|activeAA
operator|=
name|getOutstandingAARequestCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|actual
operator|=
name|actual
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|desired
operator|=
name|desired
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|failed
operator|=
name|failed
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|limitsExceeded
operator|=
name|limitsExceeded
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeFailed
operator|=
name|nodeFailed
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|preempted
operator|=
name|preempted
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|releasing
operator|=
name|releasing
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|requested
operator|=
name|requested
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|started
operator|=
name|started
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|startFailed
operator|=
name|startFailed
operator|.
name|get
argument_list|()
expr_stmt|;
name|stats
operator|.
name|totalRequested
operator|=
name|totalRequested
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

