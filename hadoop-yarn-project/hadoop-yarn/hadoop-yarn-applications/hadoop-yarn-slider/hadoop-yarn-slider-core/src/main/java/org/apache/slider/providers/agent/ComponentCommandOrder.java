begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|CommandOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
operator|.
name|ROLE_PREFIX
import|;
end_import

begin_comment
comment|/**  * Stores the command dependency order for all components in a service.<commandOrder>  *<command>SUPERVISOR-START</command><requires>NIMBUS-STARTED</requires></commandOrder> Means, SUPERVISOR START  * requires NIMBUS to be STARTED  */
end_comment

begin_class
DECL|class|ComponentCommandOrder
specifier|public
class|class
name|ComponentCommandOrder
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ComponentCommandOrder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SPLIT_CHAR
specifier|private
specifier|static
name|char
name|SPLIT_CHAR
init|=
literal|'-'
decl_stmt|;
DECL|field|dependencies
name|Map
argument_list|<
name|Command
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComponentState
argument_list|>
argument_list|>
argument_list|>
name|dependencies
init|=
operator|new
name|HashMap
argument_list|<
name|Command
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComponentState
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|prefixRoleMap
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|prefixRoleMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rolePrefixMap
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rolePrefixMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ComponentCommandOrder ()
specifier|public
name|ComponentCommandOrder
parameter_list|()
block|{}
DECL|method|ComponentCommandOrder (List<CommandOrder> commandOrders, ConfTreeOperations resources)
specifier|public
name|ComponentCommandOrder
parameter_list|(
name|List
argument_list|<
name|CommandOrder
argument_list|>
name|commandOrders
parameter_list|,
name|ConfTreeOperations
name|resources
parameter_list|)
block|{
name|mergeCommandOrders
argument_list|(
name|commandOrders
argument_list|,
name|resources
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeCommandOrders (List<CommandOrder> commandOrders, ConfTreeOperations resources)
name|void
name|mergeCommandOrders
parameter_list|(
name|List
argument_list|<
name|CommandOrder
argument_list|>
name|commandOrders
parameter_list|,
name|ConfTreeOperations
name|resources
parameter_list|)
block|{
for|for
control|(
name|String
name|component
range|:
name|resources
operator|.
name|getComponentNames
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|SliderUtils
operator|.
name|trimPrefix
argument_list|(
name|resources
operator|.
name|getComponentOpt
argument_list|(
name|component
argument_list|,
name|ROLE_PREFIX
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|rolePrefixMap
operator|.
name|put
argument_list|(
name|component
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prefixRoleMap
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|prefixRoleMap
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|prefixRoleMap
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commandOrders
operator|!=
literal|null
operator|&&
name|commandOrders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|CommandOrder
name|commandOrder
range|:
name|commandOrders
control|)
block|{
name|ComponentCommand
name|componentCmd
init|=
name|getComponentCommand
argument_list|(
name|commandOrder
operator|.
name|getCommand
argument_list|()
argument_list|,
name|resources
argument_list|)
decl_stmt|;
name|String
name|requires
init|=
name|commandOrder
operator|.
name|getRequires
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ComponentState
argument_list|>
name|requiredStates
init|=
name|parseRequiredStates
argument_list|(
name|requires
argument_list|,
name|resources
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredStates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComponentState
argument_list|>
argument_list|>
name|compDep
init|=
name|dependencies
operator|.
name|get
argument_list|(
name|componentCmd
operator|.
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|compDep
operator|==
literal|null
condition|)
block|{
name|compDep
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dependencies
operator|.
name|put
argument_list|(
name|componentCmd
operator|.
name|command
argument_list|,
name|compDep
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ComponentState
argument_list|>
name|requirements
init|=
name|compDep
operator|.
name|get
argument_list|(
name|componentCmd
operator|.
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|requirements
operator|==
literal|null
condition|)
block|{
name|requirements
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|compDep
operator|.
name|put
argument_list|(
name|componentCmd
operator|.
name|componentName
argument_list|,
name|requirements
argument_list|)
expr_stmt|;
block|}
name|requirements
operator|.
name|addAll
argument_list|(
name|requiredStates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseRequiredStates (String requires, ConfTreeOperations resources)
specifier|private
name|List
argument_list|<
name|ComponentState
argument_list|>
name|parseRequiredStates
parameter_list|(
name|String
name|requires
parameter_list|,
name|ConfTreeOperations
name|resources
parameter_list|)
block|{
if|if
condition|(
name|requires
operator|==
literal|null
operator|||
name|requires
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input cannot be null and must contain component and state."
argument_list|)
throw|;
block|}
name|String
index|[]
name|componentStates
init|=
name|requires
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ComponentState
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<
name|ComponentState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|componentStateStr
range|:
name|componentStates
control|)
block|{
name|retList
operator|.
name|add
argument_list|(
name|getComponentState
argument_list|(
name|componentStateStr
argument_list|,
name|resources
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retList
return|;
block|}
DECL|method|getComponentCommand (String compCmdStr, ConfTreeOperations resources)
specifier|private
name|ComponentCommand
name|getComponentCommand
parameter_list|(
name|String
name|compCmdStr
parameter_list|,
name|ConfTreeOperations
name|resources
parameter_list|)
block|{
if|if
condition|(
name|compCmdStr
operator|==
literal|null
operator|||
name|compCmdStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input cannot be null and must contain component and command."
argument_list|)
throw|;
block|}
name|compCmdStr
operator|=
name|compCmdStr
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|splitIndex
init|=
name|compCmdStr
operator|.
name|lastIndexOf
argument_list|(
name|SPLIT_CHAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitIndex
operator|==
operator|-
literal|1
operator|||
name|splitIndex
operator|==
literal|0
operator|||
name|splitIndex
operator|==
name|compCmdStr
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input does not appear to be well-formed."
argument_list|)
throw|;
block|}
name|String
name|compStr
init|=
name|compCmdStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitIndex
argument_list|)
decl_stmt|;
name|String
name|cmdStr
init|=
name|compCmdStr
operator|.
name|substring
argument_list|(
name|splitIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|.
name|getComponent
argument_list|(
name|compStr
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|prefixRoleMap
operator|.
name|containsKey
argument_list|(
name|compStr
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Component "
operator|+
name|compStr
operator|+
literal|" specified"
operator|+
literal|" in command order does not exist"
argument_list|)
throw|;
block|}
name|Command
name|cmd
init|=
name|Command
operator|.
name|valueOf
argument_list|(
name|cmdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|!=
name|Command
operator|.
name|START
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Dependency order can only be specified for START."
argument_list|)
throw|;
block|}
return|return
operator|new
name|ComponentCommand
argument_list|(
name|compStr
argument_list|,
name|cmd
argument_list|)
return|;
block|}
DECL|method|getComponentState (String compStStr, ConfTreeOperations resources)
specifier|private
name|ComponentState
name|getComponentState
parameter_list|(
name|String
name|compStStr
parameter_list|,
name|ConfTreeOperations
name|resources
parameter_list|)
block|{
if|if
condition|(
name|compStStr
operator|==
literal|null
operator|||
name|compStStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input cannot be null."
argument_list|)
throw|;
block|}
name|compStStr
operator|=
name|compStStr
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|splitIndex
init|=
name|compStStr
operator|.
name|lastIndexOf
argument_list|(
name|SPLIT_CHAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitIndex
operator|==
operator|-
literal|1
operator|||
name|splitIndex
operator|==
literal|0
operator|||
name|splitIndex
operator|==
name|compStStr
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input does not appear to be well-formed."
argument_list|)
throw|;
block|}
name|String
name|compStr
init|=
name|compStStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitIndex
argument_list|)
decl_stmt|;
name|String
name|stateStr
init|=
name|compStStr
operator|.
name|substring
argument_list|(
name|splitIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|.
name|getComponent
argument_list|(
name|compStr
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|prefixRoleMap
operator|.
name|containsKey
argument_list|(
name|compStr
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Component "
operator|+
name|compStr
operator|+
literal|" specified"
operator|+
literal|" in command order does not exist"
argument_list|)
throw|;
block|}
name|State
name|state
init|=
name|State
operator|.
name|valueOf
argument_list|(
name|stateStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|STARTED
operator|&&
name|state
operator|!=
name|State
operator|.
name|INSTALLED
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Dependency order can only be specified against STARTED/INSTALLED."
argument_list|)
throw|;
block|}
return|return
operator|new
name|ComponentState
argument_list|(
name|compStr
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|// dependency is still on component level, but not package level
comment|// so use component name to check dependency, not component-package
DECL|method|canExecute (String component, Command command, Collection<ComponentInstanceState> currentStates)
specifier|public
name|boolean
name|canExecute
parameter_list|(
name|String
name|component
parameter_list|,
name|Command
name|command
parameter_list|,
name|Collection
argument_list|<
name|ComponentInstanceState
argument_list|>
name|currentStates
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dependencies
operator|.
name|containsKey
argument_list|(
name|command
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|ComponentState
argument_list|>
name|required
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencies
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|.
name|containsKey
argument_list|(
name|component
argument_list|)
condition|)
block|{
name|required
operator|.
name|addAll
argument_list|(
name|dependencies
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|.
name|get
argument_list|(
name|component
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
init|=
name|rolePrefixMap
operator|.
name|get
argument_list|(
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|dependencies
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|required
operator|.
name|addAll
argument_list|(
name|dependencies
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ComponentState
name|stateToMatch
range|:
name|required
control|)
block|{
for|for
control|(
name|ComponentInstanceState
name|currState
range|:
name|currentStates
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Checking schedule {} {} against dependency {} is {}"
argument_list|,
name|component
argument_list|,
name|command
argument_list|,
name|currState
operator|.
name|getComponentName
argument_list|()
argument_list|,
name|currState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currState
operator|.
name|getComponentName
argument_list|()
operator|.
name|equals
argument_list|(
name|stateToMatch
operator|.
name|componentName
argument_list|)
operator|||
operator|(
name|prefixRoleMap
operator|.
name|containsKey
argument_list|(
name|stateToMatch
operator|.
name|componentName
argument_list|)
operator|&&
name|prefixRoleMap
operator|.
name|get
argument_list|(
name|stateToMatch
operator|.
name|componentName
argument_list|)
operator|.
name|contains
argument_list|(
name|currState
operator|.
name|getComponentName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|currState
operator|.
name|getState
argument_list|()
operator|!=
name|stateToMatch
operator|.
name|state
condition|)
block|{
if|if
condition|(
name|stateToMatch
operator|.
name|state
operator|==
name|State
operator|.
name|STARTED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cannot schedule {} {} as dependency {} is {}"
argument_list|,
name|component
argument_list|,
name|command
argument_list|,
name|currState
operator|.
name|getComponentName
argument_list|()
argument_list|,
name|currState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|//state is INSTALLED
if|if
condition|(
name|currState
operator|.
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|STARTING
operator|&&
name|currState
operator|.
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|STARTED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cannot schedule {} {} as dependency {} is {}"
argument_list|,
name|component
argument_list|,
name|command
argument_list|,
name|currState
operator|.
name|getComponentName
argument_list|()
argument_list|,
name|currState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|class|ComponentState
specifier|static
class|class
name|ComponentState
block|{
DECL|field|componentName
specifier|public
name|String
name|componentName
decl_stmt|;
DECL|field|state
specifier|public
name|State
name|state
decl_stmt|;
DECL|method|ComponentState (String componentName, State state)
specifier|public
name|ComponentState
parameter_list|(
name|String
name|componentName
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
block|}
DECL|class|ComponentCommand
specifier|static
class|class
name|ComponentCommand
block|{
DECL|field|componentName
specifier|public
name|String
name|componentName
decl_stmt|;
DECL|field|command
specifier|public
name|Command
name|command
decl_stmt|;
DECL|method|ComponentCommand (String componentName, Command command)
specifier|public
name|ComponentCommand
parameter_list|(
name|String
name|componentName
parameter_list|,
name|Command
name|command
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

