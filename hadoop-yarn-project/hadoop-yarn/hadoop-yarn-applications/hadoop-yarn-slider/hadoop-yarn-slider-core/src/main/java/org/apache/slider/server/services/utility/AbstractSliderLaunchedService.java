begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.utility
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|utility
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|ConfigHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|zk
operator|.
name|ZookeeperUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base service for the standard slider client/server services  */
end_comment

begin_class
DECL|class|AbstractSliderLaunchedService
specifier|public
specifier|abstract
class|class
name|AbstractSliderLaunchedService
extends|extends
name|LaunchedWorkflowCompositeService
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractSliderLaunchedService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AbstractSliderLaunchedService (String name)
specifier|protected
name|AbstractSliderLaunchedService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// make sure all the yarn configs get loaded
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|ConfigHelper
operator|.
name|registerDeprecatedConfigItems
argument_list|()
expr_stmt|;
block|}
comment|/**    * look up the registry quorum from the config    * @return the quorum string    * @throws BadConfigException if it is not there or invalid    */
DECL|method|lookupZKQuorum ()
specifier|public
name|String
name|lookupZKQuorum
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|String
name|registryQuorum
init|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|)
decl_stmt|;
comment|// though if neither is set: trouble
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|registryQuorum
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"No Zookeeper quorum provided in the"
operator|+
literal|" configuration property "
operator|+
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|)
throw|;
block|}
name|ZookeeperUtils
operator|.
name|splitToHostsAndPortsStrictly
argument_list|(
name|registryQuorum
argument_list|)
expr_stmt|;
return|return
name|registryQuorum
return|;
block|}
comment|/**    * Create, adopt ,and start the YARN registration service    * @return the registry operations service, already deployed as a child    * of the AbstractSliderLaunchedService instance.    */
DECL|method|startRegistryOperationsService ()
specifier|public
name|RegistryOperations
name|startRegistryOperationsService
parameter_list|()
throws|throws
name|BadConfigException
block|{
comment|// push back the slider registry entry if needed
name|String
name|quorum
init|=
name|lookupZKQuorum
argument_list|()
decl_stmt|;
name|RegistryOperations
name|registryWriterService
init|=
name|createRegistryOperationsInstance
argument_list|()
decl_stmt|;
name|deployChildService
argument_list|(
name|registryWriterService
argument_list|)
expr_stmt|;
return|return
name|registryWriterService
return|;
block|}
comment|/**    * Create the registry operations instance. This is to allow    * subclasses to instantiate a subclass service    * @return an instance to match to the lifecycle of this service    */
DECL|method|createRegistryOperationsInstance ()
specifier|protected
name|RegistryOperations
name|createRegistryOperationsInstance
parameter_list|()
block|{
return|return
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
literal|"YarnRegistry"
argument_list|,
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Utility method to require an argument to be set (non null, non-empty)    * @param argname argument name    * @param value value    * @throws BadCommandArgumentsException if the condition is not met    */
DECL|method|requireArgumentSet (String argname, String value)
specifier|protected
specifier|static
name|void
name|requireArgumentSet
parameter_list|(
name|String
name|argname
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
name|require
argument_list|(
name|isSet
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"Required argument %s missing"
argument_list|,
name|argname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Require a condition to hold; throw {@link BadCommandArgumentsException} if not.    * The exception text is the formatted message.    * @param condition condition    * @param message string to format    * @param args list of arguments to format.    * @throws BadCommandArgumentsException    */
DECL|method|require (boolean condition, String message, Object... args)
specifier|protected
specifier|static
name|void
name|require
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
if|if
condition|(
operator|!
name|condition
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

