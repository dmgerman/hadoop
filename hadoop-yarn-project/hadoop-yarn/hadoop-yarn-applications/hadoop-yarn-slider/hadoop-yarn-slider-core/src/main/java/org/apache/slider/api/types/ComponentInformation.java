begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.api.types
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|StatusKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Serializable version of component data.  *<p>  * This is sent in REST calls as a JSON object âbut is also marshalled into  * a protobuf structure. Look at {@link org.apache.slider.api.proto.RestTypeMarshalling}  * for the specifics there.  *<p>  * This means that if any fields are added here. they must be added to  *<code>src/main/proto/SliderClusterMessages.proto</code> and  * the protobuf structures rebuilt via a {@code mvn generate-sources -Pcompile-protobuf}  *  * See also {@link RoleStatus#serialize()}  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|ComponentInformation
specifier|public
class|class
name|ComponentInformation
block|{
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
DECL|field|priority
specifier|public
name|int
name|priority
decl_stmt|;
DECL|field|desired
DECL|field|actual
DECL|field|releasing
specifier|public
name|int
name|desired
decl_stmt|,
name|actual
decl_stmt|,
name|releasing
decl_stmt|;
DECL|field|placementPolicy
specifier|public
name|int
name|placementPolicy
decl_stmt|;
DECL|field|requested
specifier|public
name|int
name|requested
decl_stmt|;
DECL|field|failed
DECL|field|started
DECL|field|startFailed
DECL|field|completed
DECL|field|totalRequested
specifier|public
name|int
name|failed
decl_stmt|,
name|started
decl_stmt|,
name|startFailed
decl_stmt|,
name|completed
decl_stmt|,
name|totalRequested
decl_stmt|;
DECL|field|nodeFailed
DECL|field|failedRecently
DECL|field|preempted
specifier|public
name|int
name|nodeFailed
decl_stmt|,
name|failedRecently
decl_stmt|,
name|preempted
decl_stmt|;
DECL|field|pendingAntiAffineRequestCount
specifier|public
name|int
name|pendingAntiAffineRequestCount
decl_stmt|;
DECL|field|isAARequestOutstanding
specifier|public
name|boolean
name|isAARequestOutstanding
decl_stmt|;
DECL|field|failureMessage
specifier|public
name|String
name|failureMessage
decl_stmt|;
DECL|field|containers
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|containers
decl_stmt|;
comment|/**    * Build the statistics map from the current data    * @return a map for use in statistics reports    */
DECL|method|buildStatistics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|buildStatistics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|stats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_ACTIVE_REQUESTS
argument_list|,
name|requested
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_ANTI_AFFINE_PENDING
argument_list|,
name|pendingAntiAffineRequestCount
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_COMPLETED
argument_list|,
name|completed
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_DESIRED
argument_list|,
name|desired
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_FAILED
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_FAILED_NODE
argument_list|,
name|nodeFailed
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_FAILED_RECENTLY
argument_list|,
name|failedRecently
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_LIVE
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_PREEMPTED
argument_list|,
name|preempted
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_REQUESTED
argument_list|,
name|totalRequested
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_STARTED
argument_list|,
name|started
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_START_FAILED
argument_list|,
name|startFailed
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ComponentInformation{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", actual="
argument_list|)
operator|.
name|append
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", completed="
argument_list|)
operator|.
name|append
argument_list|(
name|completed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", desired="
argument_list|)
operator|.
name|append
argument_list|(
name|desired
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failed="
argument_list|)
operator|.
name|append
argument_list|(
name|failed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failureMessage='"
argument_list|)
operator|.
name|append
argument_list|(
name|failureMessage
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", placementPolicy="
argument_list|)
operator|.
name|append
argument_list|(
name|placementPolicy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", isAARequestOutstanding="
argument_list|)
operator|.
name|append
argument_list|(
name|isAARequestOutstanding
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", pendingAntiAffineRequestCount="
argument_list|)
operator|.
name|append
argument_list|(
name|pendingAntiAffineRequestCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", priority="
argument_list|)
operator|.
name|append
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", releasing="
argument_list|)
operator|.
name|append
argument_list|(
name|releasing
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", requested="
argument_list|)
operator|.
name|append
argument_list|(
name|requested
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", started="
argument_list|)
operator|.
name|append
argument_list|(
name|started
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", startFailed="
argument_list|)
operator|.
name|append
argument_list|(
name|startFailed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", totalRequested="
argument_list|)
operator|.
name|append
argument_list|(
name|totalRequested
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", container count='"
argument_list|)
operator|.
name|append
argument_list|(
name|containers
operator|==
literal|null
condition|?
literal|0
else|:
name|containers
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

