begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|RecordedEvent
specifier|public
class|class
name|RecordedEvent
block|{
DECL|field|dateFormat
specifier|private
specifier|static
specifier|final
name|DateFormat
name|dateFormat
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|()
decl_stmt|;
DECL|field|id
specifier|public
name|long
name|id
decl_stmt|;
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
DECL|field|timestamp
specifier|public
name|long
name|timestamp
decl_stmt|;
DECL|field|time
specifier|public
name|String
name|time
decl_stmt|;
DECL|field|category
specifier|public
name|String
name|category
decl_stmt|;
DECL|field|host
specifier|public
name|String
name|host
decl_stmt|;
DECL|field|role
specifier|public
name|int
name|role
decl_stmt|;
DECL|field|text
specifier|public
name|String
name|text
decl_stmt|;
DECL|method|RecordedEvent ()
specifier|public
name|RecordedEvent
parameter_list|()
block|{   }
comment|/**    * Create an event. The timestamp is also converted to a time string    * @param id id counter    * @param name event name    * @param timestamp timestamp. If non-zero, is used to build the {@code time} text field.    * @param category even category    * @param text arbitrary text    */
DECL|method|RecordedEvent (long id, String name, long timestamp, String category, String text)
specifier|public
name|RecordedEvent
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|String
name|category
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|timestamp
operator|>
literal|0
condition|?
name|dateFormat
operator|.
name|format
argument_list|(
name|timestamp
argument_list|)
else|:
literal|""
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
block|}
end_class

end_unit

