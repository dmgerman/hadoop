begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.persist
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|CoreFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * Class to implement persistence of a configuration.  *  * This code contains the logic to acquire and release locks.  * # writelock MUST be acquired exclusively for writes. This is done  * by creating the file with no overwrite  * # shared readlock MUST be acquired for reads. This is done by creating the readlock  * file with overwrite forbidden -but treating a failure as a sign that  * the lock exists, and therefore the operation can continue.  * # releaselock is only released if the client created it.  * # after acquiring either lock, client must check for the alternate lock  * existing. If it is, release lock and fail.  *   * There's one small race here: multiple readers; first reader releases lock  * while second is in use.   *   * Strict Fix: client checks for readlock after read completed.  * If it is not there, problem: fail. But this massively increases the risk of  * false negatives.  *   * This isn't 100% perfect, because of the condition where the owner releases  * a lock, a writer grabs its lock& writes to it, the reader gets slightly  * contaminated data:  * own-share-delete-write-own-release(shared)-delete  *   * We are assuming that the rate of change is low enough that this is rare, and  * of limited damage.  *   * ONCE A CLUSTER IS RUNNING, ONLY THE AM MAY PERSIST UPDATES VIA ITS APIs  *   * That is: outside the AM, a writelock MUST only be acquired after verifying there is no  * running application.  */
end_comment

begin_class
DECL|class|ConfPersister
specifier|public
class|class
name|ConfPersister
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfPersister
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|confTreeSerDeser
specifier|private
specifier|final
name|ConfTreeSerDeser
name|confTreeSerDeser
init|=
operator|new
name|ConfTreeSerDeser
argument_list|()
decl_stmt|;
DECL|field|coreFS
specifier|private
specifier|final
name|CoreFileSystem
name|coreFS
decl_stmt|;
DECL|field|fileSystem
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|persistDir
specifier|private
specifier|final
name|Path
name|persistDir
decl_stmt|;
DECL|field|internal
DECL|field|resources
DECL|field|app_conf
specifier|private
specifier|final
name|Path
name|internal
decl_stmt|,
name|resources
decl_stmt|,
name|app_conf
decl_stmt|;
DECL|field|writelock
DECL|field|readlock
specifier|private
specifier|final
name|Path
name|writelock
decl_stmt|,
name|readlock
decl_stmt|;
DECL|method|ConfPersister (CoreFileSystem coreFS, Path persistDir)
specifier|public
name|ConfPersister
parameter_list|(
name|CoreFileSystem
name|coreFS
parameter_list|,
name|Path
name|persistDir
parameter_list|)
block|{
name|this
operator|.
name|coreFS
operator|=
name|coreFS
expr_stmt|;
name|this
operator|.
name|persistDir
operator|=
name|persistDir
expr_stmt|;
name|internal
operator|=
operator|new
name|Path
argument_list|(
name|persistDir
argument_list|,
name|Filenames
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|resources
operator|=
operator|new
name|Path
argument_list|(
name|persistDir
argument_list|,
name|Filenames
operator|.
name|RESOURCES
argument_list|)
expr_stmt|;
name|app_conf
operator|=
operator|new
name|Path
argument_list|(
name|persistDir
argument_list|,
name|Filenames
operator|.
name|APPCONF
argument_list|)
expr_stmt|;
name|writelock
operator|=
operator|new
name|Path
argument_list|(
name|persistDir
argument_list|,
name|Filenames
operator|.
name|WRITELOCK
argument_list|)
expr_stmt|;
name|readlock
operator|=
operator|new
name|Path
argument_list|(
name|persistDir
argument_list|,
name|Filenames
operator|.
name|READLOCK
argument_list|)
expr_stmt|;
name|fileSystem
operator|=
name|coreFS
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the target directory    * @return the directory for persistence    */
DECL|method|getPersistDir ()
specifier|public
name|Path
name|getPersistDir
parameter_list|()
block|{
return|return
name|persistDir
return|;
block|}
comment|/**    * Make the persistent directory    * @throws IOException IO failure    */
DECL|method|mkPersistDir ()
specifier|public
name|void
name|mkPersistDir
parameter_list|()
throws|throws
name|IOException
block|{
name|coreFS
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|persistDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Persister to "
operator|+
name|persistDir
return|;
block|}
comment|/**    * Acquire the writelock    * @throws IOException IO    * @throws LockAcquireFailedException    */
annotation|@
name|VisibleForTesting
DECL|method|acquireWritelock ()
name|void
name|acquireWritelock
parameter_list|()
throws|throws
name|IOException
throws|,
name|LockAcquireFailedException
block|{
name|mkPersistDir
argument_list|()
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|coreFS
operator|.
name|cat
argument_list|(
name|writelock
argument_list|,
literal|false
argument_list|,
operator|new
name|Date
argument_list|(
name|now
argument_list|)
operator|.
name|toGMTString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// filesystems should raise this (HDFS does)
throw|throw
operator|new
name|LockAcquireFailedException
argument_list|(
name|writelock
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// some filesystems throw a generic IOE
throw|throw
operator|new
name|LockAcquireFailedException
argument_list|(
name|writelock
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//here the lock is acquired, but verify there is no readlock
name|boolean
name|lockFailure
decl_stmt|;
try|try
block|{
name|lockFailure
operator|=
name|readLockExists
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lockFailure
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|lockFailure
condition|)
block|{
name|releaseWritelock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|LockAcquireFailedException
argument_list|(
name|readlock
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|readLockExists ()
name|boolean
name|readLockExists
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileSystem
operator|.
name|exists
argument_list|(
name|readlock
argument_list|)
return|;
block|}
comment|/**    * Release the writelock if it is present.    * IOExceptions are logged    */
annotation|@
name|VisibleForTesting
DECL|method|releaseWritelock ()
name|boolean
name|releaseWritelock
parameter_list|()
block|{
try|try
block|{
return|return
name|fileSystem
operator|.
name|delete
argument_list|(
name|writelock
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"IOException releasing writelock {} "
argument_list|,
name|writelock
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Acquire the writelock    * @throws IOException IO    * @throws LockAcquireFailedException    * @throws FileNotFoundException if the target dir does not exist.    */
annotation|@
name|VisibleForTesting
DECL|method|acquireReadLock ()
name|boolean
name|acquireReadLock
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
throws|,
name|LockAcquireFailedException
block|{
if|if
condition|(
operator|!
name|coreFS
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|persistDir
argument_list|)
condition|)
block|{
comment|// the dir is not there, so the data is not there, so there
comment|// is nothing to read
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|persistDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|owner
decl_stmt|;
try|try
block|{
name|coreFS
operator|.
name|cat
argument_list|(
name|readlock
argument_list|,
literal|false
argument_list|,
operator|new
name|Date
argument_list|(
name|now
argument_list|)
operator|.
name|toGMTString
argument_list|()
argument_list|)
expr_stmt|;
name|owner
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|owner
operator|=
literal|false
expr_stmt|;
block|}
comment|//here the lock is acquired, but verify there is no readlock
name|boolean
name|lockFailure
decl_stmt|;
try|try
block|{
name|lockFailure
operator|=
name|writelockExists
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lockFailure
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|lockFailure
condition|)
block|{
name|releaseReadlock
argument_list|(
name|owner
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockAcquireFailedException
argument_list|(
name|writelock
argument_list|)
throw|;
block|}
return|return
name|owner
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|writelockExists ()
name|boolean
name|writelockExists
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileSystem
operator|.
name|exists
argument_list|(
name|writelock
argument_list|)
return|;
block|}
comment|/**    * Release the writelock if it is present.    * IOExceptions are downgraded to failures    * @return true if the lock was present and then released      */
annotation|@
name|VisibleForTesting
DECL|method|releaseReadlock (boolean owner)
name|boolean
name|releaseReadlock
parameter_list|(
name|boolean
name|owner
parameter_list|)
block|{
if|if
condition|(
name|owner
condition|)
block|{
try|try
block|{
return|return
name|fileSystem
operator|.
name|delete
argument_list|(
name|readlock
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"IOException releasing writelock {} "
argument_list|,
name|readlock
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|saveConf (AggregateConf conf)
specifier|private
name|void
name|saveConf
parameter_list|(
name|AggregateConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|confTreeSerDeser
operator|.
name|save
argument_list|(
name|fileSystem
argument_list|,
name|internal
argument_list|,
name|conf
operator|.
name|getInternal
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|confTreeSerDeser
operator|.
name|save
argument_list|(
name|fileSystem
argument_list|,
name|resources
argument_list|,
name|conf
operator|.
name|getResources
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|confTreeSerDeser
operator|.
name|save
argument_list|(
name|fileSystem
argument_list|,
name|app_conf
argument_list|,
name|conf
operator|.
name|getAppConf
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|loadConf (AggregateConf conf)
specifier|private
name|void
name|loadConf
parameter_list|(
name|AggregateConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setInternal
argument_list|(
name|confTreeSerDeser
operator|.
name|load
argument_list|(
name|fileSystem
argument_list|,
name|internal
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setResources
argument_list|(
name|confTreeSerDeser
operator|.
name|load
argument_list|(
name|fileSystem
argument_list|,
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAppConf
argument_list|(
name|confTreeSerDeser
operator|.
name|load
argument_list|(
name|fileSystem
argument_list|,
name|app_conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeExecLockHeldAction (LockHeldAction action)
specifier|private
name|void
name|maybeExecLockHeldAction
parameter_list|(
name|LockHeldAction
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Save the configuration    * @param conf configuration to fill in    * @param action    * @throws IOException IO problems    * @throws LockAcquireFailedException the lock could not be acquired    */
DECL|method|save (AggregateConf conf, LockHeldAction action)
specifier|public
name|void
name|save
parameter_list|(
name|AggregateConf
name|conf
parameter_list|,
name|LockHeldAction
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
throws|,
name|LockAcquireFailedException
block|{
name|acquireWritelock
argument_list|()
expr_stmt|;
try|try
block|{
name|saveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maybeExecLockHeldAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseWritelock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Load the configuration. If a lock failure is raised, the     * contents of the configuration MAY have changed -lock race conditions    * are looked for on exit    * @param conf configuration to fill in    * @throws IOException IO problems    * @throws LockAcquireFailedException the lock could not be acquired    */
DECL|method|load (AggregateConf conf)
specifier|public
name|void
name|load
parameter_list|(
name|AggregateConf
name|conf
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
throws|,
name|SliderException
throws|,
name|LockAcquireFailedException
block|{
name|boolean
name|owner
init|=
name|acquireReadLock
argument_list|()
decl_stmt|;
try|try
block|{
name|loadConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseReadlock
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

