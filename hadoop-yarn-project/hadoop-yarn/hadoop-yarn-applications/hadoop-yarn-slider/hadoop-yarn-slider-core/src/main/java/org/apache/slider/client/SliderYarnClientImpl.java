begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|YarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformationList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionNodesArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|CoreFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A class that extends visibility to some of the YarnClientImpl  * members and data structures, and factors out pure-YARN operations  * from the slider entry point service  */
end_comment

begin_class
DECL|class|SliderYarnClientImpl
specifier|public
class|class
name|SliderYarnClientImpl
extends|extends
name|YarnClientImpl
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderYarnClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Keyword to use in the {@link #emergencyForceKill(String)}    * operation to force kill<i>all</i> application instances belonging    * to a specific user    */
DECL|field|KILL_ALL
specifier|public
specifier|static
specifier|final
name|String
name|KILL_ALL
init|=
literal|"all"
decl_stmt|;
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|InetSocketAddress
name|clientRpcAddress
init|=
name|SliderUtils
operator|.
name|getRmAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isAddressDefined
argument_list|(
name|clientRpcAddress
argument_list|)
condition|)
block|{
comment|// address isn't known; fail fast
throw|throw
operator|new
name|BindException
argument_list|(
literal|"Invalid "
operator|+
name|YarnConfiguration
operator|.
name|RM_ADDRESS
operator|+
literal|" value:"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|)
operator|+
literal|" - see https://wiki.apache.org/hadoop/UnsetHostnameOrPort"
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the RM Client RPC interface    * @return an RPC interface valid after initialization and authentication    */
DECL|method|getRmClient ()
specifier|public
name|ApplicationClientProtocol
name|getRmClient
parameter_list|()
block|{
return|return
name|rmClient
return|;
block|}
comment|/**    * List Slider<i>running</i>instances belonging to a specific user.    * @deprecated use {@link #listDeployedInstances(String)}    * @param user user: "" means all users    * @return a possibly empty list of Slider AMs    */
DECL|method|listInstances (String user)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|listInstances
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|listDeployedInstances
argument_list|(
name|user
argument_list|)
return|;
block|}
comment|/**    * List Slider<i>deployed</i>instances belonging to a specific user.    *<p>    *   Deployed means: known about in the YARN cluster; it will include    *   any that are in the failed/finished state, as well as those queued    *   for starting.    * @param user user: "" means all users    * @return a possibly empty list of Slider AMs    */
DECL|method|listDeployedInstances (String user)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|listDeployedInstances
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|user
operator|!=
literal|null
argument_list|,
literal|"Null User"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SliderKeys
operator|.
name|APP_TYPE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|allApps
init|=
name|getApplications
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|allApps
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
operator|||
name|user
operator|.
name|equals
argument_list|(
name|report
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * find all instances of a specific app -if there is more than one in the    * YARN cluster,    * this returns them all    * @param user user; use "" for all users    * @param appname application name    * @return the list of all matching application instances    */
DECL|method|findAllInstances (String user, String appname)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|findAllInstances
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|appname
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|appname
operator|!=
literal|null
argument_list|,
literal|"Null application name"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
name|listDeployedInstances
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|instances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|instances
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|appname
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Helper method to determine if a cluster application is running -or    * is earlier in the lifecycle    * @param app application report    * @return true if the application is considered live    */
DECL|method|isApplicationLive (ApplicationReport app)
specifier|public
name|boolean
name|isApplicationLive
parameter_list|(
name|ApplicationReport
name|app
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|app
operator|!=
literal|null
argument_list|,
literal|"Null app report"
argument_list|)
expr_stmt|;
return|return
name|app
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|<=
name|YarnApplicationState
operator|.
name|RUNNING
operator|.
name|ordinal
argument_list|()
return|;
block|}
comment|/**    * Kill a running application    * @param applicationId app Id    * @param reason reason: reason for log    * @return the response    * @throws YarnException YARN problems    * @throws IOException IO problems    */
DECL|method|killRunningApplication (ApplicationId applicationId, String reason)
specifier|public
name|KillApplicationResponse
name|killRunningApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|applicationId
operator|!=
literal|null
argument_list|,
literal|"Null application Id"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing application {} - {}"
argument_list|,
name|applicationId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|KillApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
return|return
name|getRmClient
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|getUsername ()
specifier|private
name|String
name|getUsername
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
comment|/**    * Force kill a yarn application by ID. No niceties here    * @param applicationId app Id. "all" means "kill all instances of the current user    *     */
DECL|method|emergencyForceKill (String applicationId)
specifier|public
name|void
name|emergencyForceKill
parameter_list|(
name|String
name|applicationId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|applicationId
argument_list|)
argument_list|,
literal|"Null/empty application Id"
argument_list|)
expr_stmt|;
if|if
condition|(
name|KILL_ALL
operator|.
name|equals
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
comment|// user wants all instances killed
name|String
name|user
init|=
name|getUsername
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing all applications belonging to {}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
name|listDeployedInstances
argument_list|(
name|user
argument_list|)
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|instance
range|:
name|instances
control|)
block|{
if|if
condition|(
name|isApplicationLive
argument_list|(
name|instance
argument_list|)
condition|)
block|{
name|ApplicationId
name|appId
init|=
name|instance
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing Application {}"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|killRunningApplication
argument_list|(
name|appId
argument_list|,
literal|"forced kill"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing Application {}"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|killRunningApplication
argument_list|(
name|appId
argument_list|,
literal|"forced kill"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Monitor the submitted application for reaching the requested state.    * Will also report if the app reaches a later state (failed, killed, etc)    * Kill application if duration!= null& time expires.     * @param appId Application Id of application to be monitored    * @param duration how long to wait -must be more than 0    * @param desiredState desired state.    * @return the application report -null on a timeout    * @throws YarnException    * @throws IOException    */
DECL|method|monitorAppToState ( ApplicationId appId, YarnApplicationState desiredState, Duration duration)
specifier|public
name|ApplicationReport
name|monitorAppToState
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|YarnApplicationState
name|desiredState
parameter_list|,
name|Duration
name|duration
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"null application ID"
argument_list|)
throw|;
block|}
if|if
condition|(
name|duration
operator|.
name|limit
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Invalid monitoring duration"
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Waiting {} millis for app to reach state {} "
argument_list|,
name|duration
operator|.
name|limit
argument_list|,
name|desiredState
argument_list|)
expr_stmt|;
name|duration
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Get application report for the appId we are interested in
name|ApplicationReport
name|r
init|=
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"queried status is\n{}"
argument_list|,
operator|new
name|SliderUtils
operator|.
name|OnDemandReportStringifier
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|YarnApplicationState
name|state
init|=
name|r
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|ordinal
argument_list|()
operator|>=
name|desiredState
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"App in desired state (or higher) :{}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
if|if
condition|(
name|duration
operator|.
name|getLimitExceeded
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Wait limit of {} millis to get to state {}, exceeded; app status\n {}"
argument_list|,
name|duration
operator|.
name|limit
argument_list|,
name|desiredState
argument_list|,
operator|new
name|SliderUtils
operator|.
name|OnDemandReportStringifier
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// sleep 1s.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Thread sleep in monitoring loop interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|duration
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * find all live instances of a specific app -if there is>1 in the cluster,    * this returns them all. State should be running or less    * @param user user    * @param appname application name    * @return the list of all matching application instances    */
DECL|method|findAllLiveInstances (String user, String appname)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|findAllLiveInstances
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|appname
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|appname
argument_list|)
argument_list|,
literal|"Null/empty application name"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
name|listDeployedInstances
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|(
name|instances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|app
range|:
name|instances
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|appname
argument_list|)
operator|&&
name|isApplicationLive
argument_list|(
name|app
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Find a cluster in the instance list; biased towards live instances    * @param instances list of instances    * @param appname application name    * @return the first found instance, else a failed/finished instance, or null    * if there are none of those    */
DECL|method|findClusterInInstanceList (List<ApplicationReport> instances, String appname)
specifier|public
name|ApplicationReport
name|findClusterInInstanceList
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
parameter_list|,
name|String
name|appname
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|instances
operator|!=
literal|null
argument_list|,
literal|"Null instances list"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|appname
argument_list|)
argument_list|,
literal|"Null/empty application name"
argument_list|)
expr_stmt|;
comment|// sort by most recent
name|SliderUtils
operator|.
name|sortApplicationsByMostRecent
argument_list|(
name|instances
argument_list|)
expr_stmt|;
name|ApplicationReport
name|found
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|app
range|:
name|instances
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|appname
argument_list|)
condition|)
block|{
if|if
condition|(
name|isApplicationLive
argument_list|(
name|app
argument_list|)
condition|)
block|{
return|return
name|app
return|;
block|}
comment|// set the found value if not set
name|found
operator|=
name|found
operator|!=
literal|null
condition|?
name|found
else|:
name|app
expr_stmt|;
block|}
block|}
return|return
name|found
return|;
block|}
comment|/**    * Find an app in the instance list in the desired state     * @param instances instance list    * @param appname application name    * @param desiredState yarn state desired    * @return the match or null for none    */
DECL|method|findAppInInstanceList (List<ApplicationReport> instances, String appname, YarnApplicationState desiredState)
specifier|public
name|ApplicationReport
name|findAppInInstanceList
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
parameter_list|,
name|String
name|appname
parameter_list|,
name|YarnApplicationState
name|desiredState
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|instances
operator|!=
literal|null
argument_list|,
literal|"Null instances list"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|appname
argument_list|)
argument_list|,
literal|"Null/empty application name"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|desiredState
operator|!=
literal|null
argument_list|,
literal|"Null desiredState"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Searching {} records for instance name {} in state '{}'"
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|,
name|appname
argument_list|,
name|desiredState
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|app
range|:
name|instances
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|appname
argument_list|)
condition|)
block|{
name|YarnApplicationState
name|appstate
init|=
name|app
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"app ID {} is in state {}"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appstate
argument_list|)
expr_stmt|;
if|if
condition|(
name|appstate
operator|.
name|equals
argument_list|(
name|desiredState
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
block|}
block|}
comment|// nothing found in desired state
name|log
operator|.
name|debug
argument_list|(
literal|"No match"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * List the nodes in the cluster, possibly filtering by node state or label.    *    * @param label label to filter by -or "" for any    * @param live flag to request running nodes only    * @return a possibly empty list of nodes in the cluster    * @throws IOException IO problems    * @throws YarnException YARN problems    */
DECL|method|listNodes (String label, boolean live)
specifier|public
name|NodeInformationList
name|listNodes
parameter_list|(
name|String
name|label
parameter_list|,
name|boolean
name|live
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|label
operator|!=
literal|null
argument_list|,
literal|"null label"
argument_list|)
expr_stmt|;
name|NodeState
index|[]
name|states
decl_stmt|;
if|if
condition|(
name|live
condition|)
block|{
name|states
operator|=
operator|new
name|NodeState
index|[
literal|1
index|]
expr_stmt|;
name|states
index|[
literal|0
index|]
operator|=
name|NodeState
operator|.
name|RUNNING
expr_stmt|;
block|}
else|else
block|{
name|states
operator|=
operator|new
name|NodeState
index|[
literal|0
index|]
expr_stmt|;
block|}
name|List
argument_list|<
name|NodeReport
argument_list|>
name|reports
init|=
name|getNodeReports
argument_list|(
name|states
argument_list|)
decl_stmt|;
name|NodeInformationList
name|results
init|=
operator|new
name|NodeInformationList
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeReport
name|report
range|:
name|reports
control|)
block|{
if|if
condition|(
name|live
operator|&&
name|report
operator|.
name|getNodeState
argument_list|()
operator|!=
name|NodeState
operator|.
name|RUNNING
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|label
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|report
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|label
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// build node info from report
name|NodeInformation
name|info
init|=
operator|new
name|NodeInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|hostname
operator|=
name|report
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|info
operator|.
name|healthReport
operator|=
name|report
operator|.
name|getHealthReport
argument_list|()
expr_stmt|;
name|info
operator|.
name|httpAddress
operator|=
name|report
operator|.
name|getHttpAddress
argument_list|()
expr_stmt|;
name|info
operator|.
name|labels
operator|=
name|SliderUtils
operator|.
name|extractNodeLabel
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|info
operator|.
name|rackName
operator|=
name|report
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|info
operator|.
name|state
operator|=
name|report
operator|.
name|getNodeState
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

