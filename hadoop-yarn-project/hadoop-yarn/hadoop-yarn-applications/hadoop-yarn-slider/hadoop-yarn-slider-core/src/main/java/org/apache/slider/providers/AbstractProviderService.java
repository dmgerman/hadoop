begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|AddressTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|ConfigHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|ExitCodeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|QueueAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerReleaseSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|MostRecentContainerReleaseSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|AgentRestOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|ForkedProcessService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|ServiceParent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|WorkflowSequenceService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|yarnregistry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The base class for provider services. It lets the implementations  * add sequences of operations, and propagates service failures  * upstream  */
end_comment

begin_class
DECL|class|AbstractProviderService
specifier|public
specifier|abstract
class|class
name|AbstractProviderService
extends|extends
name|WorkflowSequenceService
implements|implements
name|ProviderCore
implements|,
name|SliderKeys
implements|,
name|ProviderService
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractProviderService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|amState
specifier|protected
name|StateAccessForProviders
name|amState
decl_stmt|;
DECL|field|restOps
specifier|protected
name|AgentRestOperations
name|restOps
decl_stmt|;
DECL|field|amWebAPI
specifier|protected
name|URL
name|amWebAPI
decl_stmt|;
DECL|field|yarnRegistry
specifier|protected
name|YarnRegistryViewForProviders
name|yarnRegistry
decl_stmt|;
DECL|field|queueAccess
specifier|protected
name|QueueAccess
name|queueAccess
decl_stmt|;
DECL|method|AbstractProviderService (String name)
specifier|protected
name|AbstractProviderService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setStopIfNoChildServicesAtStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|getConfig
argument_list|()
return|;
block|}
DECL|method|getAmState ()
specifier|public
name|StateAccessForProviders
name|getAmState
parameter_list|()
block|{
return|return
name|amState
return|;
block|}
DECL|method|getQueueAccess ()
specifier|public
name|QueueAccess
name|getQueueAccess
parameter_list|()
block|{
return|return
name|queueAccess
return|;
block|}
DECL|method|setAmState (StateAccessForProviders amState)
specifier|public
name|void
name|setAmState
parameter_list|(
name|StateAccessForProviders
name|amState
parameter_list|)
block|{
name|this
operator|.
name|amState
operator|=
name|amState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHumanName ()
specifier|public
name|String
name|getHumanName
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bind (StateAccessForProviders stateAccessor, QueueAccess queueAccess, List<Container> liveContainers)
specifier|public
name|void
name|bind
parameter_list|(
name|StateAccessForProviders
name|stateAccessor
parameter_list|,
name|QueueAccess
name|queueAccess
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|liveContainers
parameter_list|)
block|{
name|this
operator|.
name|amState
operator|=
name|stateAccessor
expr_stmt|;
name|this
operator|.
name|queueAccess
operator|=
name|queueAccess
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bindToYarnRegistry (YarnRegistryViewForProviders yarnRegistry)
specifier|public
name|void
name|bindToYarnRegistry
parameter_list|(
name|YarnRegistryViewForProviders
name|yarnRegistry
parameter_list|)
block|{
name|this
operator|.
name|yarnRegistry
operator|=
name|yarnRegistry
expr_stmt|;
block|}
DECL|method|getYarnRegistry ()
specifier|public
name|YarnRegistryViewForProviders
name|getYarnRegistry
parameter_list|()
block|{
return|return
name|yarnRegistry
return|;
block|}
annotation|@
name|Override
DECL|method|getAgentRestOperations ()
specifier|public
name|AgentRestOperations
name|getAgentRestOperations
parameter_list|()
block|{
return|return
name|restOps
return|;
block|}
annotation|@
name|Override
DECL|method|notifyContainerCompleted (ContainerId containerId)
specifier|public
name|void
name|notifyContainerCompleted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{   }
DECL|method|setAgentRestOperations (AgentRestOperations agentRestOperations)
specifier|public
name|void
name|setAgentRestOperations
parameter_list|(
name|AgentRestOperations
name|agentRestOperations
parameter_list|)
block|{
name|this
operator|.
name|restOps
operator|=
name|agentRestOperations
expr_stmt|;
block|}
comment|/**    * Load a specific XML configuration file for the provider config    * @param confDir configuration directory    * @param siteXMLFilename provider-specific filename    * @return a configuration to be included in status    * @throws BadCommandArgumentsException argument problems    * @throws IOException IO problems    */
DECL|method|loadProviderConfigurationInformation (File confDir, String siteXMLFilename)
specifier|protected
name|Configuration
name|loadProviderConfigurationInformation
parameter_list|(
name|File
name|confDir
parameter_list|,
name|String
name|siteXMLFilename
parameter_list|)
throws|throws
name|BadCommandArgumentsException
throws|,
name|IOException
block|{
name|Configuration
name|siteConf
decl_stmt|;
name|File
name|siteXML
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|siteXMLFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|siteXML
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Configuration directory %s doesn't contain %s - listing is %s"
argument_list|,
name|confDir
argument_list|,
name|siteXMLFilename
argument_list|,
name|SliderUtils
operator|.
name|listDir
argument_list|(
name|confDir
argument_list|)
argument_list|)
throw|;
block|}
comment|//now read it in
name|siteConf
operator|=
name|ConfigHelper
operator|.
name|loadConfFromFile
argument_list|(
name|siteXML
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} file is at {}"
argument_list|,
name|siteXMLFilename
argument_list|,
name|siteXML
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|ConfigHelper
operator|.
name|dumpConfigToString
argument_list|(
name|siteConf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|siteConf
return|;
block|}
comment|/**    * No-op implementation of this method.    */
annotation|@
name|Override
DECL|method|initializeApplicationConfiguration ( AggregateConf instanceDefinition, SliderFileSystem fileSystem)
specifier|public
name|void
name|initializeApplicationConfiguration
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{   }
comment|/**    * No-op implementation of this method.    *    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|validateApplicationConfiguration (AggregateConf instance, File confDir, boolean secure)
specifier|public
name|void
name|validateApplicationConfiguration
parameter_list|(
name|AggregateConf
name|instance
parameter_list|,
name|File
name|confDir
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{    }
comment|/**    * Scan through the roles and see if it is supported.    * @param role role to look for    * @return true if the role is known about -and therefore    * that a launcher thread can be deployed to launch it    */
annotation|@
name|Override
DECL|method|isSupportedRole (String role)
specifier|public
name|boolean
name|isSupportedRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|Collection
argument_list|<
name|ProviderRole
argument_list|>
name|roles
init|=
name|getRoles
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderRole
name|providedRole
range|:
name|roles
control|)
block|{
if|if
condition|(
name|providedRole
operator|.
name|name
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * override point to allow a process to start executing in this container    * @param instanceDefinition cluster description    * @param confDir configuration directory    * @param env environment    * @param execInProgress the callback for the exec events    * @return false    * @throws IOException    * @throws SliderException    */
annotation|@
name|Override
DECL|method|exec (AggregateConf instanceDefinition, File confDir, Map<String, String> env, ProviderCompleted execInProgress)
specifier|public
name|boolean
name|exec
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|File
name|confDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|ProviderCompleted
name|execInProgress
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableResultOfMethodCallIgnored"
argument_list|)
annotation|@
name|Override
comment|// ExitCodeProvider
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
name|Throwable
name|cause
init|=
name|getFailureCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
comment|//failed for some reason
if|if
condition|(
name|cause
operator|instanceof
name|ExitCodeProvider
condition|)
block|{
return|return
operator|(
operator|(
name|ExitCodeProvider
operator|)
name|cause
operator|)
operator|.
name|getExitCode
argument_list|()
return|;
block|}
block|}
name|ForkedProcessService
name|lastProc
init|=
name|latestProcess
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastProc
operator|==
literal|null
operator|||
operator|!
name|lastProc
operator|.
name|isProcessTerminated
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|lastProc
operator|.
name|getExitCode
argument_list|()
return|;
block|}
block|}
comment|/**    * Return the latest forked process service that ran    * @return the forkes service    */
DECL|method|latestProcess ()
specifier|protected
name|ForkedProcessService
name|latestProcess
parameter_list|()
block|{
name|Service
name|current
init|=
name|getActiveService
argument_list|()
decl_stmt|;
name|Service
name|prev
init|=
name|getPreviousService
argument_list|()
decl_stmt|;
name|Service
name|latest
init|=
name|current
operator|!=
literal|null
condition|?
name|current
else|:
name|prev
decl_stmt|;
if|if
condition|(
name|latest
operator|instanceof
name|ForkedProcessService
condition|)
block|{
return|return
operator|(
name|ForkedProcessService
operator|)
name|latest
return|;
block|}
else|else
block|{
comment|//its a composite object, so look inside it for a process
if|if
condition|(
name|latest
operator|instanceof
name|ServiceParent
condition|)
block|{
return|return
name|getFPSFromParentService
argument_list|(
operator|(
name|ServiceParent
operator|)
name|latest
argument_list|)
return|;
block|}
else|else
block|{
comment|//no match
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**    * Given a parent service, find the one that is a forked process    * @param serviceParent parent    * @return the forked process service or null if there is none    */
DECL|method|getFPSFromParentService (ServiceParent serviceParent)
specifier|protected
name|ForkedProcessService
name|getFPSFromParentService
parameter_list|(
name|ServiceParent
name|serviceParent
parameter_list|)
block|{
name|List
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|serviceParent
operator|.
name|getServices
argument_list|()
decl_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|services
control|)
block|{
if|if
condition|(
name|s
operator|instanceof
name|ForkedProcessService
condition|)
block|{
return|return
operator|(
name|ForkedProcessService
operator|)
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * if we are already running, start this service    */
DECL|method|maybeStartCommandSequence ()
specifier|protected
name|void
name|maybeStartCommandSequence
parameter_list|()
block|{
if|if
condition|(
name|isInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
condition|)
block|{
name|startNextService
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a new forked process service with the given    * name, environment and command list -then add it as a child    * for execution in the sequence.    *    * @param name command name    * @param env environment    * @param commands command line    * @throws IOException    * @throws SliderException    */
DECL|method|queueCommand (String name, Map<String, String> env, List<String> commands)
specifier|protected
name|ForkedProcessService
name|queueCommand
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commands
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|ForkedProcessService
name|process
init|=
name|buildProcess
argument_list|(
name|name
argument_list|,
name|env
argument_list|,
name|commands
argument_list|)
decl_stmt|;
comment|//register the service for lifecycle management; when this service
comment|//is terminated, so is the master process
name|addService
argument_list|(
name|process
argument_list|)
expr_stmt|;
return|return
name|process
return|;
block|}
DECL|method|buildProcess (String name, Map<String, String> env, List<String> commands)
specifier|public
name|ForkedProcessService
name|buildProcess
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commands
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|ForkedProcessService
name|process
decl_stmt|;
name|process
operator|=
operator|new
name|ForkedProcessService
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|process
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|build
argument_list|(
name|env
argument_list|,
name|commands
argument_list|)
expr_stmt|;
return|return
name|process
return|;
block|}
comment|/*    * Build the provider status, can be empty    * @return the provider status - map of entries to add to the info section    */
annotation|@
name|Override
DECL|method|buildProviderStatus ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildProviderStatus
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
comment|/*   Build the monitor details. The base implementation includes all the external URL endpoints   in the external view    */
annotation|@
name|Override
DECL|method|buildMonitorDetails (ClusterDescription clusterDesc)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|buildMonitorDetails
parameter_list|(
name|ClusterDescription
name|clusterDesc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|details
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
argument_list|()
decl_stmt|;
comment|// add in all the endpoints
name|buildEndpointDetails
argument_list|(
name|details
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
annotation|@
name|Override
DECL|method|buildEndpointDetails (Map<String, MonitorDetail> details)
specifier|public
name|void
name|buildEndpointDetails
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|details
parameter_list|)
block|{
name|ServiceRecord
name|self
init|=
name|yarnRegistry
operator|.
name|getSelfRegistration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Endpoint
argument_list|>
name|externals
init|=
name|self
operator|.
name|external
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|externals
control|)
block|{
name|String
name|addressType
init|=
name|endpoint
operator|.
name|addressType
decl_stmt|;
if|if
condition|(
name|AddressTypes
operator|.
name|ADDRESS_URI
operator|.
name|equals
argument_list|(
name|addressType
argument_list|)
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|RegistryTypeUtils
operator|.
name|retrieveAddressURLs
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|urls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|details
operator|.
name|put
argument_list|(
name|endpoint
operator|.
name|api
argument_list|,
operator|new
name|MonitorDetail
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidRecordException
decl||
name|MalformedURLException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|applyInitialRegistryDefinitions (URL amWebURI, URL agentOpsURI, URL agentStatusURI, ServiceRecord serviceRecord)
specifier|public
name|void
name|applyInitialRegistryDefinitions
parameter_list|(
name|URL
name|amWebURI
parameter_list|,
name|URL
name|agentOpsURI
parameter_list|,
name|URL
name|agentStatusURI
parameter_list|,
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|amWebAPI
operator|=
name|amWebURI
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    *     *     * @return The base implementation returns the most recent containers first.    */
annotation|@
name|Override
DECL|method|createContainerReleaseSelector ()
specifier|public
name|ContainerReleaseSelector
name|createContainerReleaseSelector
parameter_list|()
block|{
return|return
operator|new
name|MostRecentContainerReleaseSelector
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|releaseAssignedContainer (ContainerId containerId)
specifier|public
name|void
name|releaseAssignedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|addContainerRequest (AMRMClient.ContainerRequest req)
specifier|public
name|void
name|addContainerRequest
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|req
parameter_list|)
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|cancelSingleRequest (AMRMClient.ContainerRequest request)
specifier|public
name|void
name|cancelSingleRequest
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|cancelContainerRequests (Priority priority1, Priority priority2, int count)
specifier|public
name|int
name|cancelContainerRequests
parameter_list|(
name|Priority
name|priority1
parameter_list|,
name|Priority
name|priority2
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|execute (List<AbstractRMOperation> operations)
specifier|public
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
parameter_list|)
block|{
for|for
control|(
name|AbstractRMOperation
name|operation
range|:
name|operations
control|)
block|{
name|operation
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * No-op implementation of this method.    */
annotation|@
name|Override
DECL|method|rebuildContainerDetails (List<Container> liveContainers, String applicationId, Map<Integer, ProviderRole> providerRoles)
specifier|public
name|void
name|rebuildContainerDetails
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|liveContainers
parameter_list|,
name|String
name|applicationId
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|ProviderRole
argument_list|>
name|providerRoles
parameter_list|)
block|{   }
block|}
end_class

end_unit

