begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|timelineservice
operator|.
name|ServiceTimelinePublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|CommandLineBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|yarnregistry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|$
import|;
end_import

begin_class
DECL|class|AbstractProviderService
specifier|public
specifier|abstract
class|class
name|AbstractProviderService
extends|extends
name|AbstractService
implements|implements
name|ProviderService
implements|,
name|SliderKeys
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractProviderService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|providerUtils
specifier|private
specifier|static
specifier|final
name|ProviderUtils
name|providerUtils
init|=
operator|new
name|ProviderUtils
argument_list|()
decl_stmt|;
DECL|field|amState
specifier|protected
name|StateAccessForProviders
name|amState
decl_stmt|;
DECL|field|yarnRegistry
specifier|protected
name|YarnRegistryViewForProviders
name|yarnRegistry
decl_stmt|;
DECL|field|serviceTimelinePublisher
specifier|private
name|ServiceTimelinePublisher
name|serviceTimelinePublisher
decl_stmt|;
DECL|method|AbstractProviderService (String name)
specifier|protected
name|AbstractProviderService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|processArtifact (ContainerLauncher launcher, Application application, RoleInstance roleInstance, SliderFileSystem fileSystem)
specifier|public
specifier|abstract
name|void
name|processArtifact
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|Application
name|application
parameter_list|,
name|RoleInstance
name|roleInstance
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|buildContainerLaunchContext (ContainerLauncher launcher, Application application, Container container, ProviderRole providerRole, SliderFileSystem fileSystem, RoleInstance roleInstance)
specifier|public
name|void
name|buildContainerLaunchContext
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|Application
name|application
parameter_list|,
name|Container
name|container
parameter_list|,
name|ProviderRole
name|providerRole
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|RoleInstance
name|roleInstance
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Component
name|component
init|=
name|providerRole
operator|.
name|component
decl_stmt|;
name|processArtifact
argument_list|(
name|launcher
argument_list|,
name|application
argument_list|,
name|roleInstance
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
comment|// Generate tokens (key-value pair) for config substitution.
comment|// Get pre-defined tokens
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalTokens
init|=
name|amState
operator|.
name|getGlobalSubstitutionTokens
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokensForSubstitution
init|=
name|providerUtils
operator|.
name|initCompTokensForSubstitute
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|tokensForSubstitution
operator|.
name|putAll
argument_list|(
name|globalTokens
argument_list|)
expr_stmt|;
comment|// Set the environment variables in launcher
name|launcher
operator|.
name|putEnv
argument_list|(
name|SliderUtils
operator|.
name|buildEnvMap
argument_list|(
name|component
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tokensForSubstitution
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"WORK_DIR"
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$
argument_list|()
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LOG_DIR"
argument_list|,
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_USER_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|launcher
operator|.
name|setEnv
argument_list|(
name|HADOOP_USER_NAME
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_USER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LANG"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LC_ALL"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LANGUAGE"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|launcher
operator|.
name|getEnv
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tokensForSubstitution
operator|.
name|put
argument_list|(
name|$
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|providerUtils
operator|.
name|addComponentHostTokens
argument_list|(
name|tokensForSubstitution
argument_list|,
name|amState
argument_list|)
expr_stmt|;
comment|// create config file on hdfs and add local resource
comment|// substitute launch command
name|String
name|launchCommand
init|=
name|ProviderUtils
operator|.
name|substituteStrWithTokens
argument_list|(
name|component
operator|.
name|getLaunchCommand
argument_list|()
argument_list|,
name|tokensForSubstitution
argument_list|)
decl_stmt|;
name|CommandLineBuilder
name|operation
init|=
operator|new
name|CommandLineBuilder
argument_list|()
decl_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|launchCommand
argument_list|)
expr_stmt|;
name|operation
operator|.
name|addOutAndErrFiles
argument_list|(
name|OUT_FILE
argument_list|,
name|ERR_FILE
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|addCommand
argument_list|(
name|operation
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// publish exports
name|providerUtils
operator|.
name|substituteMapWithTokens
argument_list|(
name|application
operator|.
name|getQuicklinks
argument_list|()
argument_list|,
name|tokensForSubstitution
argument_list|)
expr_stmt|;
name|PublishedConfiguration
name|pubconf
init|=
operator|new
name|PublishedConfiguration
argument_list|(
name|QUICK_LINKS
argument_list|,
name|application
operator|.
name|getQuicklinks
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|amState
operator|.
name|getPublishedSliderConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|QUICK_LINKS
argument_list|,
name|pubconf
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceTimelinePublisher
operator|!=
literal|null
condition|)
block|{
name|serviceTimelinePublisher
operator|.
name|serviceAttemptUpdated
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processContainerStatus (ContainerId containerId, ContainerStatus status)
specifier|public
name|boolean
name|processContainerStatus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerStatus
name|status
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Handling container status: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|status
operator|.
name|getIPs
argument_list|()
argument_list|)
operator|||
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|RoleInstance
name|instance
init|=
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
comment|// container is completed?
return|return
literal|false
return|;
block|}
comment|// TODO publish ip and host
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Container
name|container
init|=
name|instance
operator|.
name|providerRole
operator|.
name|component
operator|.
name|getContainer
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setIp
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|status
operator|.
name|getIPs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setHostname
argument_list|(
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|READY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|containerId
operator|+
literal|" not found in Application!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

