begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.servicemonitor
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
DECL|class|HttpProbe
specifier|public
class|class
name|HttpProbe
extends|extends
name|Probe
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpProbe
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|url
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
DECL|field|timeout
specifier|private
specifier|final
name|int
name|timeout
decl_stmt|;
DECL|field|min
DECL|field|max
specifier|private
specifier|final
name|int
name|min
decl_stmt|,
name|max
decl_stmt|;
DECL|method|HttpProbe (URL url, int timeout, int min, int max, Configuration conf)
specifier|public
name|HttpProbe
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"Http probe of "
operator|+
name|url
operator|+
literal|" ["
operator|+
name|min
operator|+
literal|"-"
operator|+
name|max
operator|+
literal|"]"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|getConnection (URL url, int timeout)
specifier|public
specifier|static
name|HttpURLConnection
name|getConnection
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setConnectTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
annotation|@
name|Override
DECL|method|ping (boolean livePing)
specifier|public
name|ProbeStatus
name|ping
parameter_list|(
name|boolean
name|livePing
parameter_list|)
block|{
name|ProbeStatus
name|status
init|=
operator|new
name|ProbeStatus
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// LOG.debug("Fetching " + url + " with timeout " + timeout);
block|}
name|connection
operator|=
name|getConnection
argument_list|(
name|url
argument_list|,
name|this
operator|.
name|timeout
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|connection
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
argument_list|<
name|min
operator|||
name|rc
argument_list|>
name|max
condition|)
block|{
name|String
name|error
init|=
literal|"Probe "
operator|+
name|url
operator|+
literal|" error code: "
operator|+
name|rc
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|status
operator|.
name|fail
argument_list|(
name|this
argument_list|,
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|succeed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|error
init|=
literal|"Probe "
operator|+
name|url
operator|+
literal|" failed: "
operator|+
name|e
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|error
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|status
operator|.
name|fail
argument_list|(
name|this
argument_list|,
operator|new
name|IOException
argument_list|(
name|error
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

