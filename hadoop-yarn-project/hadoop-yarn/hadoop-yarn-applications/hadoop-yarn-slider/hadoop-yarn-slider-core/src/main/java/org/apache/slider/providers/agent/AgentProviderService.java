begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ProtocolTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|OptionKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|StatusKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NoSuchNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|CommandLineBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ExportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigurationOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedExports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|info
operator|.
name|CustomRegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|AbstractProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|MonitorDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|CommandScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|ComponentCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|ComponentExport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|ComponentsInAddonPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|DefaultConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|DockerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Export
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|ExportGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Metainfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|OSPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|OSSpecific
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Package
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|PropertyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|ProviderReportedContainerLoss
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|RegisterComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|AgentCommandType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|AgentRestOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|CommandReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|ComponentStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|ExecutionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|HeartBeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|HeartBeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|Register
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|RegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|RegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|agent
operator|.
name|StatusCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
operator|.
name|CertificateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
operator|.
name|SecurityStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
operator|.
name|StoresGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|RestPaths
operator|.
name|SLIDER_PATH_AGENTS
import|;
end_import

begin_comment
comment|/**  * This class implements the server-side logic for application deployment through Slider application package  */
end_comment

begin_class
DECL|class|AgentProviderService
specifier|public
class|class
name|AgentProviderService
extends|extends
name|AbstractProviderService
implements|implements
name|ProviderCore
implements|,
name|AgentKeys
implements|,
name|SliderKeys
implements|,
name|AgentRestOperations
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AgentProviderService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|providerUtils
specifier|private
specifier|static
specifier|final
name|ProviderUtils
name|providerUtils
init|=
operator|new
name|ProviderUtils
argument_list|(
name|log
argument_list|)
decl_stmt|;
DECL|field|LABEL_MAKER
specifier|private
specifier|static
specifier|final
name|String
name|LABEL_MAKER
init|=
literal|"___"
decl_stmt|;
DECL|field|CONTAINER_ID
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_ID
init|=
literal|"container_id"
decl_stmt|;
DECL|field|GLOBAL_CONFIG_TAG
specifier|private
specifier|static
specifier|final
name|String
name|GLOBAL_CONFIG_TAG
init|=
literal|"global"
decl_stmt|;
DECL|field|LOG_FOLDERS_TAG
specifier|private
specifier|static
specifier|final
name|String
name|LOG_FOLDERS_TAG
init|=
literal|"LogFolders"
decl_stmt|;
DECL|field|HOST_FOLDER_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|HOST_FOLDER_FORMAT
init|=
literal|"%s:%s"
decl_stmt|;
DECL|field|CONTAINER_LOGS_TAG
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_LOGS_TAG
init|=
literal|"container_log_dirs"
decl_stmt|;
DECL|field|CONTAINER_PWDS_TAG
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_PWDS_TAG
init|=
literal|"container_work_dirs"
decl_stmt|;
DECL|field|COMPONENT_TAG
specifier|private
specifier|static
specifier|final
name|String
name|COMPONENT_TAG
init|=
literal|"component"
decl_stmt|;
DECL|field|APPLICATION_TAG
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_TAG
init|=
literal|"application"
decl_stmt|;
DECL|field|COMPONENT_DATA_TAG
specifier|private
specifier|static
specifier|final
name|String
name|COMPONENT_DATA_TAG
init|=
literal|"ComponentInstanceData"
decl_stmt|;
DECL|field|SHARED_PORT_TAG
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_PORT_TAG
init|=
literal|"SHARED"
decl_stmt|;
DECL|field|PER_CONTAINER_TAG
specifier|private
specifier|static
specifier|final
name|String
name|PER_CONTAINER_TAG
init|=
literal|"{PER_CONTAINER}"
decl_stmt|;
DECL|field|MAX_LOG_ENTRIES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LOG_ENTRIES
init|=
literal|40
decl_stmt|;
DECL|field|DEFAULT_HEARTBEAT_MONITOR_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_HEARTBEAT_MONITOR_INTERVAL
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
DECL|field|syncLock
specifier|private
specifier|final
name|Object
name|syncLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|tags
specifier|private
specifier|final
name|ComponentTagProvider
name|tags
init|=
operator|new
name|ComponentTagProvider
argument_list|()
decl_stmt|;
DECL|field|heartbeatMonitorInterval
specifier|private
name|int
name|heartbeatMonitorInterval
init|=
literal|0
decl_stmt|;
DECL|field|clientProvider
specifier|private
name|AgentClientProvider
name|clientProvider
decl_stmt|;
DECL|field|taskId
specifier|private
name|AtomicInteger
name|taskId
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|metaInfo
specifier|private
specifier|volatile
name|Metainfo
name|metaInfo
init|=
literal|null
decl_stmt|;
DECL|field|fileSystem
specifier|private
name|SliderFileSystem
name|fileSystem
init|=
literal|null
decl_stmt|;
DECL|field|defaultConfigs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DefaultConfig
argument_list|>
name|defaultConfigs
init|=
literal|null
decl_stmt|;
DECL|field|commandOrder
specifier|private
name|ComponentCommandOrder
name|commandOrder
init|=
literal|null
decl_stmt|;
DECL|field|monitor
specifier|private
name|HeartbeatMonitor
name|monitor
decl_stmt|;
DECL|field|canAnyMasterPublish
specifier|private
name|Boolean
name|canAnyMasterPublish
init|=
literal|null
decl_stmt|;
DECL|field|agentLaunchParameter
specifier|private
name|AgentLaunchParameter
name|agentLaunchParameter
init|=
literal|null
decl_stmt|;
DECL|field|clusterName
specifier|private
name|String
name|clusterName
init|=
literal|null
decl_stmt|;
DECL|field|isInUpgradeMode
specifier|private
name|boolean
name|isInUpgradeMode
decl_stmt|;
DECL|field|upgradeContainers
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|upgradeContainers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|appStopInitiated
specifier|private
name|boolean
name|appStopInitiated
decl_stmt|;
DECL|field|componentStatuses
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstanceState
argument_list|>
name|componentStatuses
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ComponentInstanceState
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|componentInstanceData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|componentInstanceData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|exportGroups
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
argument_list|>
name|exportGroups
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|allocatedPorts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|allocatedPorts
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|packageMetainfo
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Metainfo
argument_list|>
name|packageMetainfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Metainfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logFolderExports
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|logFolderExports
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
argument_list|(
name|MAX_LOG_ENTRIES
argument_list|,
literal|0.75f
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|MAX_LOG_ENTRIES
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|workFolderExports
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|workFolderExports
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
argument_list|(
name|MAX_LOG_ENTRIES
argument_list|,
literal|0.75f
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|MAX_LOG_ENTRIES
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|containerExportsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|containerExportsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Create an instance of AgentProviderService    */
DECL|method|AgentProviderService ()
specifier|public
name|AgentProviderService
parameter_list|()
block|{
name|super
argument_list|(
literal|"AgentProviderService"
argument_list|)
expr_stmt|;
name|setAgentRestOperations
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setHeartbeatMonitorInterval
argument_list|(
name|DEFAULT_HEARTBEAT_MONITOR_INTERVAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHumanName ()
specifier|public
name|String
name|getHumanName
parameter_list|()
block|{
return|return
literal|"Slider Agent"
return|;
block|}
annotation|@
name|Override
DECL|method|getRoles ()
specifier|public
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|AgentRoles
operator|.
name|getRoles
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|clientProvider
operator|=
operator|new
name|AgentClientProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadProviderConfigurationInformation (File confDir)
specifier|public
name|Configuration
name|loadProviderConfigurationInformation
parameter_list|(
name|File
name|confDir
parameter_list|)
throws|throws
name|BadCommandArgumentsException
throws|,
name|IOException
block|{
return|return
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validateInstanceDefinition (AggregateConf instanceDefinition)
specifier|public
name|void
name|validateInstanceDefinition
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|)
throws|throws
name|SliderException
block|{
name|clientProvider
operator|.
name|validateInstanceDefinition
argument_list|(
name|instanceDefinition
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ConfTreeOperations
name|resources
init|=
name|instanceDefinition
operator|.
name|getResourceOperations
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|resources
operator|.
name|getComponentNames
argument_list|()
decl_stmt|;
name|names
operator|.
name|remove
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Component
name|componentDef
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentDef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s is not a member of application."
argument_list|,
name|name
argument_list|)
throw|;
block|}
name|MapOperations
name|componentConfig
init|=
name|resources
operator|.
name|getMandatoryComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|componentConfig
operator|.
name|getMandatoryOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|)
decl_stmt|;
name|int
name|definedMinCount
init|=
name|componentDef
operator|.
name|getMinInstanceCountInt
argument_list|()
decl_stmt|;
name|int
name|definedMaxCount
init|=
name|componentDef
operator|.
name|getMaxInstanceCountInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
name|definedMinCount
operator|||
name|count
argument_list|>
name|definedMaxCount
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component %s, %s value %d out of range. "
operator|+
literal|"Expected minimum is %d and maximum is %d"
argument_list|,
name|name
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|,
name|count
argument_list|,
name|definedMinCount
argument_list|,
name|definedMaxCount
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Reads the metainfo.xml in the application package and loads it
DECL|method|buildMetainfo (AggregateConf instanceDefinition, SliderFileSystem fileSystem)
specifier|private
name|void
name|buildMetainfo
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|String
name|appDef
init|=
name|SliderUtils
operator|.
name|getApplicationDefinitionPath
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaInfo
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|syncLock
init|)
block|{
if|if
condition|(
name|metaInfo
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fileSystem
operator|=
name|fileSystem
expr_stmt|;
name|readAndSetHeartbeatMonitoringInterval
argument_list|(
name|instanceDefinition
argument_list|)
expr_stmt|;
name|initializeAgentDebugCommands
argument_list|(
name|instanceDefinition
argument_list|)
expr_stmt|;
name|metaInfo
operator|=
name|getApplicationMetainfo
argument_list|(
name|fileSystem
argument_list|,
name|appDef
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Master package metainfo: {}"
argument_list|,
name|metaInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaInfo
operator|==
literal|null
operator|||
name|metaInfo
operator|.
name|getApplication
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"metainfo.xml is unavailable or malformed at {}."
argument_list|,
name|appDef
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"metainfo.xml is required in app package."
argument_list|)
throw|;
block|}
name|commandOrder
operator|=
operator|new
name|ComponentCommandOrder
argument_list|(
name|metaInfo
operator|.
name|getApplication
argument_list|()
operator|.
name|getCommandOrders
argument_list|()
argument_list|)
expr_stmt|;
name|defaultConfigs
operator|=
name|initializeDefaultConfigs
argument_list|(
name|fileSystem
argument_list|,
name|appDef
argument_list|,
name|metaInfo
argument_list|)
expr_stmt|;
name|monitor
operator|=
operator|new
name|HeartbeatMonitor
argument_list|(
name|this
argument_list|,
name|getHeartbeatMonitorInterval
argument_list|()
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// build a map from component to metainfo
name|String
name|addonAppDefString
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|ADDONS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"All addon appdefs: {}"
argument_list|,
name|addonAppDefString
argument_list|)
expr_stmt|;
if|if
condition|(
name|addonAppDefString
operator|!=
literal|null
condition|)
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|addonAppDefString
argument_list|)
operator|.
name|useDelimiter
argument_list|(
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|addonAppDef
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|addonAppDefPath
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|addonAppDef
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Addon package {} is stored at: {}"
argument_list|,
name|addonAppDef
operator|+
name|addonAppDefPath
argument_list|)
expr_stmt|;
name|Metainfo
name|addonMetaInfo
init|=
name|getApplicationMetainfo
argument_list|(
name|fileSystem
argument_list|,
name|addonAppDefPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addonMetaInfo
operator|.
name|validate
argument_list|()
expr_stmt|;
name|packageMetainfo
operator|.
name|put
argument_list|(
name|addonMetaInfo
operator|.
name|getApplicationPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|addonMetaInfo
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Metainfo map for master and addon: {}"
argument_list|,
name|packageMetainfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|initializeApplicationConfiguration ( AggregateConf instanceDefinition, SliderFileSystem fileSystem)
specifier|public
name|void
name|initializeApplicationConfiguration
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|buildMetainfo
argument_list|(
name|instanceDefinition
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildContainerLaunchContext (ContainerLauncher launcher, AggregateConf instanceDefinition, Container container, ProviderRole providerRole, SliderFileSystem fileSystem, Path generatedConfPath, MapOperations resourceComponent, MapOperations appComponent, Path containerTmpDirPath)
specifier|public
name|void
name|buildContainerLaunchContext
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|Container
name|container
parameter_list|,
name|ProviderRole
name|providerRole
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Path
name|generatedConfPath
parameter_list|,
name|MapOperations
name|resourceComponent
parameter_list|,
name|MapOperations
name|appComponent
parameter_list|,
name|Path
name|containerTmpDirPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|String
name|roleName
init|=
name|providerRole
operator|.
name|name
decl_stmt|;
name|String
name|roleGroup
init|=
name|providerRole
operator|.
name|group
decl_stmt|;
name|String
name|appDef
init|=
name|SliderUtils
operator|.
name|getApplicationDefinitionPath
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|)
decl_stmt|;
name|initializeApplicationConfiguration
argument_list|(
name|instanceDefinition
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Build launch context for Agent"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|instanceDefinition
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//if we are launching docker based app on yarn, then we need to pass docker image
if|if
condition|(
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|launcher
operator|.
name|setYarnDockerMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setDockerImage
argument_list|(
name|getConfigFromMetaInfo
argument_list|(
name|roleGroup
argument_list|,
literal|"image"
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setRunPrivilegedContainer
argument_list|(
name|getConfigFromMetaInfo
argument_list|(
name|roleGroup
argument_list|,
literal|"runPriviledgedContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setYarnContainerMountPoints
argument_list|(
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"yarn.container.mount.points"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set the environment
name|launcher
operator|.
name|putEnv
argument_list|(
name|SliderUtils
operator|.
name|buildEnvMap
argument_list|(
name|appComponent
argument_list|,
name|getStandardTokenMap
argument_list|(
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|workDir
init|=
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$
argument_list|()
decl_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"AGENT_WORK_ROOT"
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"AGENT_WORK_ROOT set to {}"
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
decl_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"AGENT_LOG_ROOT"
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"AGENT_LOG_ROOT set to {}"
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_USER_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|launcher
operator|.
name|setEnv
argument_list|(
name|HADOOP_USER_NAME
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_USER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// for 2-Way SSL
name|launcher
operator|.
name|setEnv
argument_list|(
name|SLIDER_PASSPHRASE
argument_list|,
name|instanceDefinition
operator|.
name|getPassphrase
argument_list|()
argument_list|)
expr_stmt|;
comment|//add english env
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LANG"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LC_ALL"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
literal|"LANGUAGE"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
comment|//local resources
comment|// TODO: Should agent need to support App Home
name|String
name|scriptPath
init|=
operator|new
name|File
argument_list|(
name|AgentKeys
operator|.
name|AGENT_MAIN_SCRIPT_ROOT
argument_list|,
name|AgentKeys
operator|.
name|AGENT_MAIN_SCRIPT
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|appHome
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|PACKAGE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|appHome
argument_list|)
condition|)
block|{
name|scriptPath
operator|=
operator|new
name|File
argument_list|(
name|appHome
argument_list|,
name|AgentKeys
operator|.
name|AGENT_MAIN_SCRIPT
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
comment|// set PYTHONPATH
name|List
argument_list|<
name|String
argument_list|>
name|pythonPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pythonPaths
operator|.
name|add
argument_list|(
name|AgentKeys
operator|.
name|AGENT_MAIN_SCRIPT_ROOT
argument_list|)
expr_stmt|;
name|pythonPaths
operator|.
name|add
argument_list|(
name|AgentKeys
operator|.
name|AGENT_JINJA2_ROOT
argument_list|)
expr_stmt|;
name|String
name|pythonPath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|,
name|pythonPaths
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|setEnv
argument_list|(
name|PYTHONPATH
argument_list|,
name|pythonPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"PYTHONPATH set to {}"
argument_list|,
name|pythonPath
argument_list|)
expr_stmt|;
name|Path
name|agentImagePath
init|=
literal|null
decl_stmt|;
name|String
name|agentImage
init|=
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|get
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_APPLICATION_IMAGE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|agentImage
argument_list|)
condition|)
block|{
name|agentImagePath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|instanceDefinition
operator|.
name|getInternalOperations
argument_list|()
operator|.
name|get
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_TMP_DIR
argument_list|)
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|AgentKeys
operator|.
name|PROVIDER_AGENT
argument_list|)
argument_list|,
name|SliderKeys
operator|.
name|AGENT_TAR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|agentImagePath
operator|=
operator|new
name|Path
argument_list|(
name|agentImage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|agentImagePath
argument_list|)
condition|)
block|{
name|LocalResource
name|agentImageRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|agentImagePath
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|AGENT_INSTALL_DIR
argument_list|,
name|agentImageRes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Required agent image slider-agent.tar.gz is unavailable at %s"
argument_list|,
name|agentImagePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|MapOperations
name|compOps
init|=
name|appComponent
decl_stmt|;
name|boolean
name|relaxVerificationForTest
init|=
name|compOps
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|compOps
operator|.
name|getOptionBool
argument_list|(
name|AgentKeys
operator|.
name|TEST_RELAX_VERIFICATION
argument_list|,
literal|false
argument_list|)
argument_list|)
else|:
literal|false
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|relaxVerificationForTest
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_DEPLOYMENT_FAILED
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Using {} for agent."
argument_list|,
name|scriptPath
argument_list|)
expr_stmt|;
name|LocalResource
name|appDefRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
name|appDef
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|APP_DEFINITION_DIR
argument_list|,
name|appDefRes
argument_list|)
expr_stmt|;
for|for
control|(
name|Package
name|pkg
range|:
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getPackages
argument_list|()
control|)
block|{
name|Path
name|pkgPath
init|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|pkgPath
argument_list|)
condition|)
block|{
name|pkgPath
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|getClusterName
argument_list|()
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|pkgPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Package doesn't exist as a resource: "
operator|+
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Adding resource {}"
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceType
name|type
init|=
name|LocalResourceType
operator|.
name|FILE
decl_stmt|;
if|if
condition|(
literal|"archive"
operator|.
name|equals
argument_list|(
name|pkg
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|LocalResourceType
operator|.
name|ARCHIVE
expr_stmt|;
block|}
name|LocalResource
name|packageResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|pkgPath
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|APP_PACKAGES_DIR
argument_list|,
name|packageResource
argument_list|)
expr_stmt|;
block|}
name|String
name|agentConf
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|AGENT_CONF
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|agentConf
argument_list|)
condition|)
block|{
name|LocalResource
name|agentConfRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
name|agentConf
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|AGENT_CONFIG_FILE
argument_list|,
name|agentConfRes
argument_list|)
expr_stmt|;
block|}
name|String
name|agentVer
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|AGENT_VERSION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|agentVer
operator|!=
literal|null
condition|)
block|{
name|LocalResource
name|agentVerRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
name|agentVer
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|AGENT_VERSION_FILE
argument_list|,
name|agentVerRes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SliderUtils
operator|.
name|isHadoopClusterSecure
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|localizeServiceKeytabs
argument_list|(
name|launcher
argument_list|,
name|instanceDefinition
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
block|}
name|MapOperations
name|amComponent
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
decl_stmt|;
name|boolean
name|twoWayEnabled
init|=
name|amComponent
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|amComponent
operator|.
name|getOptionBool
argument_list|(
name|AgentKeys
operator|.
name|KEY_AGENT_TWO_WAY_SSL_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|twoWayEnabled
condition|)
block|{
name|localizeContainerSSLResources
argument_list|(
name|launcher
argument_list|,
name|container
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
block|}
name|MapOperations
name|compOps
init|=
name|appComponent
decl_stmt|;
if|if
condition|(
name|areStoresRequested
argument_list|(
name|compOps
argument_list|)
condition|)
block|{
name|localizeContainerSecurityStores
argument_list|(
name|launcher
argument_list|,
name|container
argument_list|,
name|roleName
argument_list|,
name|fileSystem
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
expr_stmt|;
block|}
comment|//add the configuration resources
name|launcher
operator|.
name|addLocalResources
argument_list|(
name|fileSystem
operator|.
name|submitDirectory
argument_list|(
name|generatedConfPath
argument_list|,
name|SliderKeys
operator|.
name|PROPAGATED_CONF_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appComponent
operator|.
name|getOptionBool
argument_list|(
name|AgentKeys
operator|.
name|AM_CONFIG_GENERATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// build and localize configuration files
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|localizeConfigFiles
argument_list|(
name|launcher
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|getMetaInfo
argument_list|()
argument_list|,
name|configurations
argument_list|,
name|launcher
operator|.
name|getEnv
argument_list|()
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
block|}
name|String
name|label
init|=
name|getContainerLabel
argument_list|(
name|container
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|CommandLineBuilder
name|operation
init|=
operator|new
name|CommandLineBuilder
argument_list|()
decl_stmt|;
name|String
name|pythonExec
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|SliderXmlConfKeys
operator|.
name|PYTHON_EXECUTABLE_PATH
argument_list|,
name|AgentKeys
operator|.
name|PYTHON_EXE
argument_list|)
decl_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|pythonExec
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|ARG_LABEL
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|ARG_ZOOKEEPER_QUORUM
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|getClusterOptionPropertyValue
argument_list|(
name|OptionKeys
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|ARG_ZOOKEEPER_REGISTRY_PATH
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|getZkRegistryPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|debugCmd
init|=
name|agentLaunchParameter
operator|.
name|getNextLaunchParameter
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|debugCmd
argument_list|)
condition|)
block|{
name|operation
operator|.
name|add
argument_list|(
name|ARG_DEBUG
argument_list|)
expr_stmt|;
name|operation
operator|.
name|add
argument_list|(
name|debugCmd
argument_list|)
expr_stmt|;
block|}
name|operation
operator|.
name|add
argument_list|(
literal|"> "
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/"
operator|+
name|AgentKeys
operator|.
name|AGENT_OUT_FILE
operator|+
literal|" 2>&1"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|addCommand
argument_list|(
name|operation
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// localize addon package
name|String
name|addonAppDefString
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|ADDONS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"All addon appdefs: {}"
argument_list|,
name|addonAppDefString
argument_list|)
expr_stmt|;
if|if
condition|(
name|addonAppDefString
operator|!=
literal|null
condition|)
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|addonAppDefString
argument_list|)
operator|.
name|useDelimiter
argument_list|(
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|addonAppDef
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|addonAppDefPath
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|addonAppDef
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Addon package {} is stored at: {}"
argument_list|,
name|addonAppDef
argument_list|,
name|addonAppDefPath
argument_list|)
expr_stmt|;
name|LocalResource
name|addonPkgRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
name|addonAppDefPath
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|ADDON_DEFINITION_DIR
operator|+
literal|"/"
operator|+
name|addonAppDef
argument_list|,
name|addonPkgRes
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Metainfo map for master and addon: {}"
argument_list|,
name|packageMetainfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Additional files to localize in addition to the application def
name|String
name|appResourcesString
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|APP_RESOURCES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Configuration value for extra resources to localize: {}"
argument_list|,
name|appResourcesString
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|appResourcesString
condition|)
block|{
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|appResourcesString
argument_list|)
operator|.
name|useDelimiter
argument_list|(
literal|","
argument_list|)
init|)
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|resource
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|resourcePath
init|=
operator|new
name|Path
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|LocalResource
name|extraResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
name|resourcePath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|String
name|destination
init|=
name|AgentKeys
operator|.
name|APP_RESOURCES_DIR
operator|+
literal|"/"
operator|+
name|resourcePath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Localizing {} to {}"
argument_list|,
name|resourcePath
argument_list|,
name|destination
argument_list|)
expr_stmt|;
comment|// TODO Can we try harder to avoid collisions?
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|destination
argument_list|,
name|extraResource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// initialize addon pkg states for all componentInstanceStatus
name|Map
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
name|pkgStatuses
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Metainfo
name|appPkg
range|:
name|packageMetainfo
operator|.
name|values
argument_list|()
control|)
block|{
comment|// check each component of that addon to see if they apply to this
comment|// component 'role'
for|for
control|(
name|ComponentsInAddonPackage
name|comp
range|:
name|appPkg
operator|.
name|getApplicationPackage
argument_list|()
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Current component: {} component in metainfo: {}"
argument_list|,
name|roleName
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleGroup
argument_list|)
operator|||
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AgentKeys
operator|.
name|ADDON_FOR_ALL_COMPONENTS
argument_list|)
condition|)
block|{
name|pkgStatuses
operator|.
name|put
argument_list|(
name|appPkg
operator|.
name|getApplicationPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|State
operator|.
name|INIT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"For component: {} pkg status map: {}"
argument_list|,
name|roleName
argument_list|,
name|pkgStatuses
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize the component instance state
name|getComponentStatuses
argument_list|()
operator|.
name|put
argument_list|(
name|label
argument_list|,
operator|new
name|ComponentInstanceState
argument_list|(
name|roleName
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|getClusterInfoPropertyValue
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
argument_list|,
name|pkgStatuses
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|localizeContainerSecurityStores (ContainerLauncher launcher, Container container, String role, SliderFileSystem fileSystem, AggregateConf instanceDefinition, MapOperations compOps)
specifier|private
name|void
name|localizeContainerSecurityStores
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|Container
name|container
parameter_list|,
name|String
name|role
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|MapOperations
name|compOps
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
comment|// generate and localize security stores
name|SecurityStore
index|[]
name|stores
init|=
name|generateSecurityStores
argument_list|(
name|container
argument_list|,
name|role
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
for|for
control|(
name|SecurityStore
name|store
range|:
name|stores
control|)
block|{
name|LocalResource
name|keystoreResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|uploadSecurityResource
argument_list|(
name|store
operator|.
name|getFile
argument_list|()
argument_list|,
name|fileSystem
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"secstores/%s-%s.p12"
argument_list|,
name|store
operator|.
name|getType
argument_list|()
argument_list|,
name|role
argument_list|)
argument_list|,
name|keystoreResource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateSecurityStores (Container container, String role, AggregateConf instanceDefinition, MapOperations compOps)
specifier|private
name|SecurityStore
index|[]
name|generateSecurityStores
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|role
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|MapOperations
name|compOps
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
return|return
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|role
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
return|;
block|}
DECL|method|areStoresRequested (MapOperations compOps)
specifier|private
name|boolean
name|areStoresRequested
parameter_list|(
name|MapOperations
name|compOps
parameter_list|)
block|{
return|return
name|compOps
operator|!=
literal|null
condition|?
name|compOps
operator|.
name|getOptionBool
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|false
argument_list|)
else|:
literal|false
return|;
block|}
DECL|method|localizeContainerSSLResources (ContainerLauncher launcher, Container container, SliderFileSystem fileSystem)
specifier|private
name|void
name|localizeContainerSSLResources
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|Container
name|container
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|SliderException
block|{
try|try
block|{
comment|// localize server cert
name|Path
name|certsDir
init|=
name|fileSystem
operator|.
name|buildClusterSecurityDirPath
argument_list|(
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
name|LocalResource
name|certResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
operator|new
name|Path
argument_list|(
name|certsDir
argument_list|,
name|SliderKeys
operator|.
name|CRT_FILE_NAME
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|CERT_FILE_LOCALIZATION_PATH
argument_list|,
name|certResource
argument_list|)
expr_stmt|;
comment|// generate and localize agent cert
name|CertificateManager
name|certMgr
init|=
operator|new
name|CertificateManager
argument_list|()
decl_stmt|;
name|String
name|hostname
init|=
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|certMgr
operator|.
name|generateContainerCertificate
argument_list|(
name|hostname
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|LocalResource
name|agentCertResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|uploadSecurityResource
argument_list|(
name|CertificateManager
operator|.
name|getAgentCertficateFilePath
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|fileSystem
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
comment|// still using hostname as file name on the agent side, but the files
comment|// do end up under the specific container's file space
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|INFRA_RUN_SECURITY_DIR
operator|+
name|hostname
operator|+
literal|".crt"
argument_list|,
name|agentCertResource
argument_list|)
expr_stmt|;
name|LocalResource
name|agentKeyResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|uploadSecurityResource
argument_list|(
name|CertificateManager
operator|.
name|getAgentKeyFilePath
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|fileSystem
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|INFRA_RUN_SECURITY_DIR
operator|+
name|hostname
operator|+
literal|".key"
argument_list|,
name|agentKeyResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_DEPLOYMENT_FAILED
argument_list|,
name|e
argument_list|,
literal|"Unable to localize certificates.  Two-way SSL cannot be enabled"
argument_list|)
throw|;
block|}
block|}
DECL|method|uploadSecurityResource (File resource, SliderFileSystem fileSystem)
specifier|private
name|Path
name|uploadSecurityResource
parameter_list|(
name|File
name|resource
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|certsDir
init|=
name|fileSystem
operator|.
name|buildClusterSecurityDirPath
argument_list|(
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|uploadResource
argument_list|(
name|resource
argument_list|,
name|fileSystem
argument_list|,
name|certsDir
argument_list|)
return|;
block|}
DECL|method|uploadResource (File resource, SliderFileSystem fileSystem, String roleName)
specifier|private
name|Path
name|uploadResource
parameter_list|(
name|File
name|resource
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|roleName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
decl_stmt|;
if|if
condition|(
name|roleName
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
name|fileSystem
operator|.
name|buildClusterResourcePath
argument_list|(
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|fileSystem
operator|.
name|buildClusterResourcePath
argument_list|(
name|getClusterName
argument_list|()
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
block|}
return|return
name|uploadResource
argument_list|(
name|resource
argument_list|,
name|fileSystem
argument_list|,
name|dir
argument_list|)
return|;
block|}
DECL|method|uploadResource (File resource, SliderFileSystem fileSystem, Path parentDir)
specifier|private
specifier|static
specifier|synchronized
name|Path
name|uploadResource
parameter_list|(
name|File
name|resource
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Path
name|parentDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|parentDir
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
name|FSDataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|contents
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|contents
operator|.
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Uploaded {} to localization path {}"
argument_list|,
name|resource
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Resource {} already existed at localization path {}"
argument_list|,
name|resource
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
name|destPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|destPath
return|;
block|}
DECL|method|localizeServiceKeytabs (ContainerLauncher launcher, AggregateConf instanceDefinition, SliderFileSystem fileSystem)
specifier|private
name|void
name|localizeServiceKeytabs
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|keytabPathOnHost
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|keytabPathOnHost
argument_list|)
condition|)
block|{
name|String
name|amKeytabName
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
decl_stmt|;
name|String
name|keytabDir
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_HDFS_KEYTAB_DIR
argument_list|)
decl_stmt|;
comment|// we need to localize the keytab files in the directory
name|Path
name|keytabDirPath
init|=
name|fileSystem
operator|.
name|buildKeytabPath
argument_list|(
name|keytabDir
argument_list|,
literal|null
argument_list|,
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|serviceKeytabsDeployed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|keytabDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|keytabs
init|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|keytabDirPath
argument_list|)
decl_stmt|;
name|LocalResource
name|keytabRes
decl_stmt|;
for|for
control|(
name|FileStatus
name|keytab
range|:
name|keytabs
control|)
block|{
if|if
condition|(
operator|!
name|amKeytabName
operator|.
name|equals
argument_list|(
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".keytab"
argument_list|)
condition|)
block|{
name|serviceKeytabsDeployed
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Localizing keytab {}"
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|keytabRes
operator|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|SliderKeys
operator|.
name|KEYTAB_DIR
operator|+
literal|"/"
operator|+
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|keytabRes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|serviceKeytabsDeployed
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No service keytabs for the application have been localized.  "
operator|+
literal|"If the application requires keytabs for secure operation, "
operator|+
literal|"please ensure that the required keytabs have been uploaded "
operator|+
literal|"to the folder {}"
argument_list|,
name|keytabDirPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createConfigFile (SliderFileSystem fileSystem, File file, ConfigFile configFile, Map<String, String> config)
specifier|private
name|void
name|createConfigFile
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|File
name|file
parameter_list|,
name|ConfigFile
name|configFile
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|ConfigFormat
name|configFormat
init|=
name|ConfigFormat
operator|.
name|resolve
argument_list|(
name|configFile
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Writing {} file {}"
argument_list|,
name|configFormat
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|ConfigUtils
operator|.
name|prepConfigForTemplateOutputter
argument_list|(
name|configFormat
argument_list|,
name|config
argument_list|,
name|fileSystem
argument_list|,
name|getClusterName
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PublishedConfiguration
name|publishedConfiguration
init|=
operator|new
name|PublishedConfiguration
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|configFormat
argument_list|,
name|publishedConfiguration
argument_list|)
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|localizeConfigFiles (ContainerLauncher launcher, String roleName, String roleGroup, Metainfo metainfo, Map<String, Map<String, String>> configs, MapOperations env, SliderFileSystem fileSystem)
specifier|protected
name|void
name|localizeConfigFiles
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|Metainfo
name|metainfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configs
parameter_list|,
name|MapOperations
name|env
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|metainfo
operator|.
name|getComponentConfigFiles
argument_list|(
name|roleGroup
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|ConfigUtils
operator|.
name|replacePropsInConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
argument_list|,
name|env
operator|.
name|options
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|ConfigUtils
operator|.
name|replaceProps
argument_list|(
name|config
argument_list|,
name|configFile
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|SliderKeys
operator|.
name|RESOURCE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|localFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|localFile
operator|=
operator|new
name|File
argument_list|(
name|localFile
argument_list|,
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|folder
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PER_COMPONENT
argument_list|)
argument_list|)
condition|)
block|{
name|folder
operator|=
name|roleName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PER_GROUP
argument_list|)
argument_list|)
condition|)
block|{
name|folder
operator|=
name|roleGroup
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Localizing {} configs to config file {} (destination {}) "
operator|+
literal|"based on {} configs"
argument_list|,
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|localFile
argument_list|,
name|fileName
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
name|createConfigFile
argument_list|(
name|fileSystem
argument_list|,
name|localFile
argument_list|,
name|configFile
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|Path
name|destPath
init|=
name|uploadResource
argument_list|(
name|localFile
argument_list|,
name|fileSystem
argument_list|,
name|folder
argument_list|)
decl_stmt|;
name|LocalResource
name|configResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|destPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|destFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|SliderKeys
operator|.
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|destFile
operator|.
name|getName
argument_list|()
argument_list|,
name|configResource
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|AgentKeys
operator|.
name|APP_CONF_DIR
operator|+
literal|"/"
operator|+
name|fileName
argument_list|,
name|configResource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * build the zookeeper registry path.    *     * @return the path the service registered at    * @throws NullPointerException if the service has not yet registered    */
DECL|method|getZkRegistryPath ()
specifier|private
name|String
name|getZkRegistryPath
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|yarnRegistry
argument_list|,
literal|"Yarn registry not bound"
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|yarnRegistry
operator|.
name|getAbsoluteSelfRegistrationPath
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|,
literal|"Service record path not defined"
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|rebuildContainerDetails (List<Container> liveContainers, String applicationId, Map<Integer, ProviderRole> providerRoleMap)
specifier|public
name|void
name|rebuildContainerDetails
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|liveContainers
parameter_list|,
name|String
name|applicationId
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|ProviderRole
argument_list|>
name|providerRoleMap
parameter_list|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|liveContainers
control|)
block|{
comment|// get the role name and label
name|ProviderRole
name|role
init|=
name|providerRoleMap
operator|.
name|get
argument_list|(
name|ContainerPriority
operator|.
name|extractRole
argument_list|(
name|container
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|String
name|roleName
init|=
name|role
operator|.
name|name
decl_stmt|;
name|String
name|label
init|=
name|getContainerLabel
argument_list|(
name|container
argument_list|,
name|roleName
argument_list|,
name|role
operator|.
name|group
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Rebuilding in-memory: container {} in role {} in cluster {}"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|getComponentStatuses
argument_list|()
operator|.
name|put
argument_list|(
name|label
argument_list|,
operator|new
name|ComponentInstanceState
argument_list|(
name|roleName
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Role not found for container {} in cluster {}"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isSupportedRole (String role)
specifier|public
name|boolean
name|isSupportedRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Handle registration calls from the agents    *    * @param registration registration entry    *    * @return response    */
annotation|@
name|Override
DECL|method|handleRegistration (Register registration)
specifier|public
name|RegistrationResponse
name|handleRegistration
parameter_list|(
name|Register
name|registration
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Handling registration: {}"
argument_list|,
name|registration
argument_list|)
expr_stmt|;
name|RegistrationResponse
name|response
init|=
operator|new
name|RegistrationResponse
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|registration
operator|.
name|getLabel
argument_list|()
decl_stmt|;
name|String
name|pkg
init|=
name|registration
operator|.
name|getPkg
argument_list|()
decl_stmt|;
name|State
name|agentState
init|=
name|registration
operator|.
name|getActualState
argument_list|()
decl_stmt|;
name|String
name|appVersion
init|=
name|registration
operator|.
name|getAppVersion
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"label: {} pkg: {}"
argument_list|,
name|label
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
if|if
condition|(
name|getComponentStatuses
argument_list|()
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|response
operator|.
name|setResponseStatus
argument_list|(
name|RegistrationStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
name|ComponentInstanceState
name|componentStatus
init|=
name|getComponentStatuses
argument_list|()
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|componentStatus
operator|.
name|heartbeat
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|updateComponentStatusWithAgentState
argument_list|(
name|componentStatus
argument_list|,
name|agentState
argument_list|)
expr_stmt|;
name|String
name|roleName
init|=
name|getRoleName
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|String
name|roleGroup
init|=
name|getRoleGroup
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|String
name|containerId
init|=
name|getContainerId
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|registration
operator|.
name|getTags
argument_list|()
argument_list|)
condition|)
block|{
name|tags
operator|.
name|recordAssignedTag
argument_list|(
name|roleName
argument_list|,
name|containerId
argument_list|,
name|registration
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setTags
argument_list|(
name|tags
operator|.
name|getTag
argument_list|(
name|roleName
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|hostFqdn
init|=
name|registration
operator|.
name|getPublicHostname
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ports
init|=
name|registration
operator|.
name|getAllocatedPorts
argument_list|()
decl_stmt|;
if|if
condition|(
name|ports
operator|!=
literal|null
operator|&&
operator|!
name|ports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|processAllocatedPorts
argument_list|(
name|hostFqdn
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|ports
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|folders
init|=
name|registration
operator|.
name|getLogFolders
argument_list|()
decl_stmt|;
if|if
condition|(
name|folders
operator|!=
literal|null
operator|&&
operator|!
name|folders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|publishFolderPaths
argument_list|(
name|folders
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|hostFqdn
argument_list|)
expr_stmt|;
block|}
comment|// Set app version if empty. It gets unset during upgrade - why?
name|checkAndSetContainerAppVersion
argument_list|(
name|containerId
argument_list|,
name|appVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setResponseStatus
argument_list|(
name|RegistrationStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setLog
argument_list|(
literal|"Label not recognized."
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Received registration request from unknown label {}"
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Registration response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|// Checks if app version is empty. Sets it to the version as reported by the
comment|// container during registration phase.
DECL|method|checkAndSetContainerAppVersion (String containerId, String appVersion)
specifier|private
name|void
name|checkAndSetContainerAppVersion
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|appVersion
parameter_list|)
block|{
name|StateAccessForProviders
name|amState
init|=
name|getAmState
argument_list|()
decl_stmt|;
try|try
block|{
name|RoleInstance
name|role
init|=
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|String
name|currentAppVersion
init|=
name|role
operator|.
name|appVersion
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Container = {}, app version current = {} new = {}"
argument_list|,
name|containerId
argument_list|,
name|currentAppVersion
argument_list|,
name|appVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAppVersion
operator|==
literal|null
operator|||
name|currentAppVersion
operator|.
name|equals
argument_list|(
name|APP_VERSION_UNKNOWN
argument_list|)
condition|)
block|{
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
operator|.
name|appVersion
operator|=
name|appVersion
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchNodeException
name|e
parameter_list|)
block|{
comment|// ignore - there is nothing to do if we don't find a container
name|log
operator|.
name|warn
argument_list|(
literal|"Owned container {} not found - {}"
argument_list|,
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle heartbeat response from agents    *    * @param heartBeat incoming heartbeat from Agent    *    * @return response to send back    */
annotation|@
name|Override
DECL|method|handleHeartBeat (HeartBeat heartBeat)
specifier|public
name|HeartBeatResponse
name|handleHeartBeat
parameter_list|(
name|HeartBeat
name|heartBeat
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Handling heartbeat: {}"
argument_list|,
name|heartBeat
argument_list|)
expr_stmt|;
name|HeartBeatResponse
name|response
init|=
operator|new
name|HeartBeatResponse
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|heartBeat
operator|.
name|getResponseId
argument_list|()
decl_stmt|;
name|response
operator|.
name|setResponseId
argument_list|(
name|id
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|heartBeat
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|String
name|pkg
init|=
name|heartBeat
operator|.
name|getPackage
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"package received: "
operator|+
name|pkg
argument_list|)
expr_stmt|;
name|String
name|roleName
init|=
name|getRoleName
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|String
name|roleGroup
init|=
name|getRoleGroup
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|String
name|containerId
init|=
name|getContainerId
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|boolean
name|doUpgrade
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isInUpgradeMode
operator|&&
name|upgradeContainers
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|doUpgrade
operator|=
literal|true
expr_stmt|;
block|}
name|StateAccessForProviders
name|accessor
init|=
name|getAmState
argument_list|()
decl_stmt|;
name|CommandScript
name|cmdScript
init|=
name|getScriptPathForMasterPackage
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ComponentCommand
argument_list|>
name|commands
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|getCommands
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isDockerContainer
argument_list|(
name|roleGroup
argument_list|)
operator|&&
operator|!
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
operator|&&
operator|(
name|cmdScript
operator|==
literal|null
operator|||
name|cmdScript
operator|.
name|getScript
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|commands
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"role.script is unavailable for {}. Commands will not be sent."
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|scriptPath
init|=
literal|null
decl_stmt|;
name|long
name|timeout
init|=
literal|600L
decl_stmt|;
if|if
condition|(
name|cmdScript
operator|!=
literal|null
condition|)
block|{
name|scriptPath
operator|=
name|cmdScript
operator|.
name|getScript
argument_list|()
expr_stmt|;
name|timeout
operator|=
name|cmdScript
operator|.
name|getTimeout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeout
operator|==
literal|0L
condition|)
block|{
name|timeout
operator|=
literal|600L
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getComponentStatuses
argument_list|()
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
comment|// container is completed but still heart-beating, send terminate signal
name|log
operator|.
name|info
argument_list|(
literal|"Sending terminate signal to completed container (still heartbeating): {}"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTerminateAgent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|List
argument_list|<
name|ComponentStatus
argument_list|>
name|statuses
init|=
name|heartBeat
operator|.
name|getComponentStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
operator|!
name|statuses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"status from agent: "
operator|+
name|statuses
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|ComponentStatus
name|status
range|:
name|statuses
control|)
block|{
name|RoleInstance
name|role
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getIp
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|getIp
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|role
operator|=
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|role
operator|.
name|ip
operator|=
name|status
operator|.
name|getIp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getHostname
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|getHostname
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|role
operator|=
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|role
operator|.
name|hostname
operator|=
name|status
operator|.
name|getHostname
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
comment|// create an updated service record (including hostname and ip) and publish...
name|ServiceRecord
name|record
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|record
operator|.
name|description
operator|=
name|roleName
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_PERSISTENCE
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
expr_stmt|;
comment|// TODO:  switch record attributes to use constants from YarnRegistryAttributes
comment|// when it's been updated.
if|if
condition|(
name|role
operator|.
name|ip
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|set
argument_list|(
literal|"yarn:ip"
argument_list|,
name|role
operator|.
name|ip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|.
name|hostname
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|set
argument_list|(
literal|"yarn:hostname"
argument_list|,
name|role
operator|.
name|hostname
argument_list|)
expr_stmt|;
block|}
name|yarnRegistry
operator|.
name|putComponent
argument_list|(
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchNodeException
name|e
parameter_list|)
block|{
comment|// ignore - there is nothing to do if we don't find a container
name|log
operator|.
name|warn
argument_list|(
literal|"Owned container {} not found - {}"
argument_list|,
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error updating container {} service record in registry"
argument_list|,
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Boolean
name|isMaster
init|=
name|isMaster
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
name|ComponentInstanceState
name|componentStatus
init|=
name|getComponentStatuses
argument_list|()
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|componentStatus
operator|.
name|heartbeat
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doUpgrade
condition|)
block|{
switch|switch
condition|(
name|componentStatus
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|STARTED
case|:
name|componentStatus
operator|.
name|setTargetState
argument_list|(
name|State
operator|.
name|UPGRADED
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPGRADED
case|:
name|componentStatus
operator|.
name|setTargetState
argument_list|(
name|State
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
break|break;
case|case
name|STOPPED
case|:
name|componentStatus
operator|.
name|setTargetState
argument_list|(
name|State
operator|.
name|TERMINATING
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Current state = {} target state {}"
argument_list|,
name|componentStatus
operator|.
name|getState
argument_list|()
argument_list|,
name|componentStatus
operator|.
name|getTargetState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appStopInitiated
operator|&&
operator|!
name|componentStatus
operator|.
name|isStopInitiated
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stop initiated for label {}"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|componentStatus
operator|.
name|setTargetState
argument_list|(
name|State
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|componentStatus
operator|.
name|setStopInitiated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|publishConfigAndExportGroups
argument_list|(
name|heartBeat
argument_list|,
name|componentStatus
argument_list|,
name|roleGroup
argument_list|)
expr_stmt|;
name|CommandResult
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|CommandReport
argument_list|>
name|reports
init|=
name|heartBeat
operator|.
name|getReports
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|reports
argument_list|)
condition|)
block|{
name|CommandReport
name|report
init|=
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ports
init|=
name|report
operator|.
name|getAllocatedPorts
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|ports
argument_list|)
condition|)
block|{
name|processAllocatedPorts
argument_list|(
name|heartBeat
operator|.
name|getFqdn
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|ports
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|CommandResult
operator|.
name|getCommandResult
argument_list|(
name|report
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Command
name|command
init|=
name|Command
operator|.
name|getCommand
argument_list|(
name|report
operator|.
name|getRoleCommand
argument_list|()
argument_list|)
decl_stmt|;
name|componentStatus
operator|.
name|applyCommandResult
argument_list|(
name|result
argument_list|,
name|command
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Component operation. Status: {}; new container state: {};"
operator|+
literal|" new component state: {}"
argument_list|,
name|result
argument_list|,
name|componentStatus
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|componentStatus
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|INSTALL
operator|&&
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|report
operator|.
name|getFolders
argument_list|()
argument_list|)
condition|)
block|{
name|publishFolderPaths
argument_list|(
name|report
operator|.
name|getFolders
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|heartBeat
operator|.
name|getFqdn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|waitForCount
init|=
name|accessor
operator|.
name|getInstanceDefinitionSnapshot
argument_list|()
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getComponentOptInt
argument_list|(
name|roleGroup
argument_list|,
name|AgentKeys
operator|.
name|WAIT_HEARTBEAT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|<
name|waitForCount
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting until heartbeat count {}. Current val: {}"
argument_list|,
name|waitForCount
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|getComponentStatuses
argument_list|()
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|componentStatus
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|Command
name|command
init|=
name|componentStatus
operator|.
name|getNextCommand
argument_list|(
name|doUpgrade
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Command
operator|.
name|NOP
operator|!=
name|command
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"For comp {} pkg {} issuing {}"
argument_list|,
name|roleName
argument_list|,
name|componentStatus
operator|.
name|getNextPkgToInstall
argument_list|()
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|INSTALL
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Installing {} on {}."
argument_list|,
name|roleName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDockerContainer
argument_list|(
name|roleGroup
argument_list|)
operator|||
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|addInstallDockerCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scriptPath
operator|!=
literal|null
condition|)
block|{
name|addInstallCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
name|scriptPath
argument_list|,
literal|null
argument_list|,
name|timeout
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// commands
name|ComponentCommand
name|installCmd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ComponentCommand
name|compCmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|compCmd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"INSTALL"
argument_list|)
condition|)
block|{
name|installCmd
operator|=
name|compCmd
expr_stmt|;
block|}
block|}
name|addInstallCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
name|installCmd
argument_list|,
name|timeout
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|componentStatus
operator|.
name|commandIssued
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|INSTALL_ADDON
condition|)
block|{
name|String
name|nextPkgToInstall
init|=
name|componentStatus
operator|.
name|getNextPkgToInstall
argument_list|()
decl_stmt|;
comment|// retrieve scriptPath or command of that package for the component
for|for
control|(
name|ComponentsInAddonPackage
name|comp
range|:
name|packageMetainfo
operator|.
name|get
argument_list|(
name|nextPkgToInstall
argument_list|)
operator|.
name|getApplicationPackage
argument_list|()
operator|.
name|getComponents
argument_list|()
control|)
block|{
comment|// given nextPkgToInstall and roleName is determined, the if below
comment|// should only execute once per heartbeat
name|log
operator|.
name|debug
argument_list|(
literal|"Addon component: {} pkg: {} script: {}"
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|nextPkgToInstall
argument_list|,
name|comp
operator|.
name|getCommandScript
argument_list|()
operator|.
name|getScript
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleGroup
argument_list|)
operator|||
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AgentKeys
operator|.
name|ADDON_FOR_ALL_COMPONENTS
argument_list|)
condition|)
block|{
name|scriptPath
operator|=
name|comp
operator|.
name|getCommandScript
argument_list|()
operator|.
name|getScript
argument_list|()
expr_stmt|;
if|if
condition|(
name|scriptPath
operator|!=
literal|null
condition|)
block|{
name|addInstallCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
name|scriptPath
argument_list|,
literal|null
argument_list|,
name|timeout
argument_list|,
name|nextPkgToInstall
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ComponentCommand
name|installCmd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ComponentCommand
name|compCmd
range|:
name|comp
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|compCmd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"INSTALL"
argument_list|)
condition|)
block|{
name|installCmd
operator|=
name|compCmd
expr_stmt|;
block|}
block|}
name|addInstallCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
name|installCmd
argument_list|,
name|timeout
argument_list|,
name|nextPkgToInstall
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|componentStatus
operator|.
name|commandIssued
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|START
condition|)
block|{
comment|// check against dependencies
name|boolean
name|canExecute
init|=
name|commandOrder
operator|.
name|canExecute
argument_list|(
name|roleGroup
argument_list|,
name|command
argument_list|,
name|getComponentStatuses
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|canExecute
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting {} on {}."
argument_list|,
name|roleName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDockerContainer
argument_list|(
name|roleGroup
argument_list|)
operator|||
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|addStartDockerCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scriptPath
operator|!=
literal|null
condition|)
block|{
name|addStartCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
name|scriptPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|timeout
argument_list|,
name|isMarkedAutoRestart
argument_list|(
name|roleGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ComponentCommand
name|startCmd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ComponentCommand
name|compCmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|compCmd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"START"
argument_list|)
condition|)
block|{
name|startCmd
operator|=
name|compCmd
expr_stmt|;
block|}
block|}
name|ComponentCommand
name|stopCmd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ComponentCommand
name|compCmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|compCmd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"STOP"
argument_list|)
condition|)
block|{
name|stopCmd
operator|=
name|compCmd
expr_stmt|;
block|}
block|}
name|addStartCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
name|startCmd
argument_list|,
name|stopCmd
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|componentStatus
operator|.
name|commandIssued
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Start of {} on {} delayed as dependencies have not started."
argument_list|,
name|roleName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|UPGRADE
condition|)
block|{
name|addUpgradeCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
name|scriptPath
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|componentStatus
operator|.
name|commandIssued
argument_list|(
name|command
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|STOP
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stop command being sent to container with id {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|addStopCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
name|scriptPath
argument_list|,
name|timeout
argument_list|,
name|doUpgrade
argument_list|)
expr_stmt|;
name|componentStatus
operator|.
name|commandIssued
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|Command
operator|.
name|TERMINATE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"A formal terminate command is being sent to container {}"
operator|+
literal|" in state {}"
argument_list|,
name|label
argument_list|,
name|componentStatus
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTerminateAgent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if there is no outstanding command then retrieve config
if|if
condition|(
name|isMaster
operator|&&
name|componentStatus
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|STARTED
operator|&&
name|command
operator|==
name|Command
operator|.
name|NOP
condition|)
block|{
if|if
condition|(
operator|!
name|componentStatus
operator|.
name|getConfigReported
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Requesting applied config for {} on {}."
argument_list|,
name|roleName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDockerContainer
argument_list|(
name|roleGroup
argument_list|)
operator|||
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|addGetConfigDockerCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addGetConfigCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if restart is required then signal
name|response
operator|.
name|setRestartEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|componentStatus
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|STARTED
operator|&&
name|command
operator|==
name|Command
operator|.
name|NOP
operator|&&
name|isMarkedAutoRestart
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|response
operator|.
name|setRestartEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//If INSTALL_FAILED and no INSTALL is scheduled let the agent fail
if|if
condition|(
name|componentStatus
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|INSTALL_FAILED
operator|&&
name|command
operator|==
name|Command
operator|.
name|NOP
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Sending terminate signal to container that failed installation: {}"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTerminateAgent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Component instance failed operation."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|componentStatus
operator|.
name|applyCommandResult
argument_list|(
name|CommandResult
operator|.
name|FAILED
argument_list|,
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Heartbeat response: "
operator|+
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|isDockerContainer (String roleGroup)
specifier|private
name|boolean
name|isDockerContainer
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|String
name|type
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|SliderUtils
operator|.
name|DOCKER
argument_list|)
operator|||
name|type
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|SliderUtils
operator|.
name|DOCKER_YARN
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isYarnDockerContainer (String roleGroup)
specifier|private
name|boolean
name|isYarnDockerContainer
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|String
name|type
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|SliderUtils
operator|.
name|DOCKER_YARN
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|processAllocatedPorts (String fqdn, String roleName, String roleGroup, String containerId, Map<String, String> ports)
specifier|protected
name|void
name|processAllocatedPorts
parameter_list|(
name|String
name|fqdn
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ports
parameter_list|)
block|{
name|RoleInstance
name|instance
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|getAmState
argument_list|()
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchNodeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to locate instance of container {}"
argument_list|,
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|port
range|:
name|ports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|portname
init|=
name|port
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|portNo
init|=
name|port
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Recording allocated port for {} as {}"
argument_list|,
name|portname
argument_list|,
name|portNo
argument_list|)
expr_stmt|;
comment|// add the allocated ports to the global list as well as per container list
comment|// per container allocation will over-write each other in the global
name|this
operator|.
name|getAllocatedPorts
argument_list|()
operator|.
name|put
argument_list|(
name|portname
argument_list|,
name|portNo
argument_list|)
expr_stmt|;
name|this
operator|.
name|getAllocatedPorts
argument_list|(
name|containerId
argument_list|)
operator|.
name|put
argument_list|(
name|portname
argument_list|,
name|portNo
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// if the returned value is not a single port number then there are no
comment|// meaningful way for Slider to use it during export
comment|// No need to error out as it may not be the responsibility of the component
comment|// to allocate port or the component may need an array of ports
name|instance
operator|.
name|registerPortEndpoint
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|portNo
argument_list|)
argument_list|,
name|portname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse {}"
argument_list|,
name|portNo
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|processAndPublishComponentSpecificData
argument_list|(
name|ports
argument_list|,
name|containerId
argument_list|,
name|fqdn
argument_list|,
name|roleGroup
argument_list|)
expr_stmt|;
name|processAndPublishComponentSpecificExports
argument_list|(
name|ports
argument_list|,
name|containerId
argument_list|,
name|fqdn
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
expr_stmt|;
comment|// and update registration entries
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|queueAccess
operator|.
name|put
argument_list|(
operator|new
name|RegisterComponentInstance
argument_list|(
name|instance
operator|.
name|getId
argument_list|()
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateComponentStatusWithAgentState ( ComponentInstanceState componentStatus, State agentState)
specifier|private
name|void
name|updateComponentStatusWithAgentState
parameter_list|(
name|ComponentInstanceState
name|componentStatus
parameter_list|,
name|State
name|agentState
parameter_list|)
block|{
if|if
condition|(
name|agentState
operator|!=
literal|null
condition|)
block|{
name|componentStatus
operator|.
name|setState
argument_list|(
name|agentState
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|buildMonitorDetails (ClusterDescription clusterDesc)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|buildMonitorDetails
parameter_list|(
name|ClusterDescription
name|clusterDesc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|details
init|=
name|super
operator|.
name|buildMonitorDetails
argument_list|(
name|clusterDesc
argument_list|)
decl_stmt|;
name|buildRoleHostDetails
argument_list|(
name|details
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
annotation|@
name|Override
DECL|method|applyInitialRegistryDefinitions (URL amWebURI, URL agentOpsURI, URL agentStatusURI, ServiceRecord serviceRecord)
specifier|public
name|void
name|applyInitialRegistryDefinitions
parameter_list|(
name|URL
name|amWebURI
parameter_list|,
name|URL
name|agentOpsURI
parameter_list|,
name|URL
name|agentStatusURI
parameter_list|,
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|applyInitialRegistryDefinitions
argument_list|(
name|amWebURI
argument_list|,
name|agentOpsURI
argument_list|,
name|agentStatusURI
argument_list|,
name|serviceRecord
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|restURL
init|=
operator|new
name|URL
argument_list|(
name|agentOpsURI
argument_list|,
name|SLIDER_PATH_AGENTS
argument_list|)
decl_stmt|;
name|URL
name|agentStatusURL
init|=
operator|new
name|URL
argument_list|(
name|agentStatusURI
argument_list|,
name|SLIDER_PATH_AGENTS
argument_list|)
decl_stmt|;
name|serviceRecord
operator|.
name|addInternalEndpoint
argument_list|(
operator|new
name|Endpoint
argument_list|(
name|CustomRegistryConstants
operator|.
name|AGENT_SECURE_REST_API
argument_list|,
name|ProtocolTypes
operator|.
name|PROTOCOL_REST
argument_list|,
name|restURL
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serviceRecord
operator|.
name|addInternalEndpoint
argument_list|(
operator|new
name|Endpoint
argument_list|(
name|CustomRegistryConstants
operator|.
name|AGENT_ONEWAY_REST_API
argument_list|,
name|ProtocolTypes
operator|.
name|PROTOCOL_REST
argument_list|,
name|agentStatusURL
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// identify client component
name|Component
name|client
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|component
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CLIENT"
argument_list|)
condition|)
block|{
name|client
operator|=
name|component
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No client component specified, not publishing client configs"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// register AM-generated client configs
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|MapOperations
name|clientOperations
init|=
name|appConf
operator|.
name|getOrAddComponent
argument_list|(
name|client
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|appConf
operator|.
name|resolve
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clientOperations
operator|.
name|getOptionBool
argument_list|(
name|AgentKeys
operator|.
name|AM_CONFIG_GENERATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"AM config generation is false, not publishing client configs"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// build and localize configuration files
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokens
operator|=
name|getStandardTokenMap
argument_list|(
name|appConf
argument_list|,
name|client
operator|.
name|getName
argument_list|()
argument_list|,
name|client
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|getMetaInfo
argument_list|()
operator|.
name|getComponentConfigFiles
argument_list|(
name|client
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|addNamedConfiguration
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|options
argument_list|,
name|configurations
argument_list|,
name|tokens
argument_list|,
literal|null
argument_list|,
name|client
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|appConf
operator|.
name|getComponent
argument_list|(
name|client
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|addNamedConfiguration
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|appConf
operator|.
name|getComponent
argument_list|(
name|client
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|options
argument_list|,
name|configurations
argument_list|,
name|tokens
argument_list|,
literal|null
argument_list|,
name|client
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//do a final replacement of re-used configs
name|dereferenceAllConfigs
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|getMetaInfo
argument_list|()
operator|.
name|getComponentConfigFiles
argument_list|(
name|client
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|ConfigFormat
name|configFormat
init|=
name|ConfigFormat
operator|.
name|resolve
argument_list|(
name|configFile
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|configurations
operator|.
name|get
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
decl_stmt|;
name|ConfigUtils
operator|.
name|prepConfigForTemplateOutputter
argument_list|(
name|configFormat
argument_list|,
name|config
argument_list|,
name|fileSystem
argument_list|,
name|getClusterName
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|configFile
operator|.
name|getFileName
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PublishedConfiguration
name|publishedConfiguration
init|=
operator|new
name|PublishedConfiguration
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|getAmState
argument_list|()
operator|.
name|getPublishedSliderConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|publishedConfiguration
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Publishing AM configuration {}"
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|notifyContainerCompleted (ContainerId containerId)
specifier|public
name|void
name|notifyContainerCompleted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
comment|// containers get allocated and free'ed without being assigned to any
comment|// component - so many of the data structures may not be initialized
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|String
name|containerIdStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|getComponentInstanceData
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerIdStr
argument_list|)
condition|)
block|{
name|getComponentInstanceData
argument_list|()
operator|.
name|remove
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removing container specific data for {}"
argument_list|,
name|containerIdStr
argument_list|)
expr_stmt|;
name|publishComponentInstanceData
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|allocatedPorts
operator|.
name|containsKey
argument_list|(
name|containerIdStr
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|portsByContainerId
init|=
name|getAllocatedPorts
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|this
operator|.
name|allocatedPorts
operator|.
name|remove
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
comment|// free up the allocations from global as well
comment|// if multiple containers allocate global ports then last one
comment|// wins and similarly first one removes it - its not supported anyway
for|for
control|(
name|String
name|portName
range|:
name|portsByContainerId
operator|.
name|keySet
argument_list|()
control|)
block|{
name|getAllocatedPorts
argument_list|()
operator|.
name|remove
argument_list|(
name|portName
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|componentName
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|componentStatuses
init|)
block|{
for|for
control|(
name|String
name|label
range|:
name|getComponentStatuses
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|containerIdStr
argument_list|)
condition|)
block|{
name|componentName
operator|=
name|getRoleName
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removing component status for label {}"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|getComponentStatuses
argument_list|()
operator|.
name|remove
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|tags
operator|.
name|releaseTag
argument_list|(
name|componentName
argument_list|,
name|containerIdStr
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|containerExportsMap
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|containerExportSets
init|=
name|containerExportsMap
operator|.
name|get
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerExportSets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|containerExportStr
range|:
name|containerExportSets
control|)
block|{
name|String
index|[]
name|parts
init|=
name|containerExportStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|exportGroup
init|=
name|getCurrentExports
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExportEntry
argument_list|>
name|exports
init|=
name|exportGroup
operator|.
name|get
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExportEntry
argument_list|>
name|exportToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ExportEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExportEntry
name|export
range|:
name|exports
control|)
block|{
if|if
condition|(
name|containerIdStr
operator|.
name|equals
argument_list|(
name|export
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|exportToRemove
operator|.
name|add
argument_list|(
name|export
argument_list|)
expr_stmt|;
block|}
block|}
name|exports
operator|.
name|removeAll
argument_list|(
name|exportToRemove
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Removing container exports for {}"
argument_list|,
name|containerIdStr
argument_list|)
expr_stmt|;
name|containerExportsMap
operator|.
name|remove
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Reads and sets the heartbeat monitoring interval. If bad value is provided then log it and set to default.    *    * @param instanceDefinition    */
DECL|method|readAndSetHeartbeatMonitoringInterval (AggregateConf instanceDefinition)
specifier|private
name|void
name|readAndSetHeartbeatMonitoringInterval
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|)
block|{
name|String
name|hbMonitorInterval
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|HEARTBEAT_MONITOR_INTERVAL
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_HEARTBEAT_MONITOR_INTERVAL
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|setHeartbeatMonitorInterval
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hbMonitorInterval
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Bad value {} for {}. Defaulting to "
argument_list|,
name|hbMonitorInterval
argument_list|,
name|HEARTBEAT_MONITOR_INTERVAL
argument_list|,
name|DEFAULT_HEARTBEAT_MONITOR_INTERVAL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads and sets the heartbeat monitoring interval. If bad value is provided then log it and set to default.    *    * @param instanceDefinition    */
DECL|method|initializeAgentDebugCommands (AggregateConf instanceDefinition)
specifier|private
name|void
name|initializeAgentDebugCommands
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|)
block|{
name|String
name|launchParameterStr
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|AgentKeys
operator|.
name|AGENT_INSTANCE_DEBUG_DATA
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|agentLaunchParameter
operator|=
operator|new
name|AgentLaunchParameter
argument_list|(
name|launchParameterStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLogFolderExports ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|getLogFolderExports
parameter_list|()
block|{
return|return
name|logFolderExports
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getWorkFolderExports ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|getWorkFolderExports
parameter_list|()
block|{
return|return
name|workFolderExports
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMetaInfo ()
specifier|protected
name|Metainfo
name|getMetaInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|metaInfo
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getComponentStatuses ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstanceState
argument_list|>
name|getComponentStatuses
parameter_list|()
block|{
return|return
name|componentStatuses
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getApplicationMetainfo (SliderFileSystem fileSystem, String appDef, boolean addonPackage)
specifier|protected
name|Metainfo
name|getApplicationMetainfo
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|appDef
parameter_list|,
name|boolean
name|addonPackage
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
return|return
name|AgentUtils
operator|.
name|getApplicationMetainfo
argument_list|(
name|fileSystem
argument_list|,
name|appDef
argument_list|,
name|addonPackage
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getApplicationMetainfo (SliderFileSystem fileSystem, String appDef)
specifier|protected
name|Metainfo
name|getApplicationMetainfo
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|appDef
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
return|return
name|getApplicationMetainfo
argument_list|(
name|fileSystem
argument_list|,
name|appDef
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setHeartbeatMonitorInterval (int heartbeatMonitorInterval)
specifier|protected
name|void
name|setHeartbeatMonitorInterval
parameter_list|(
name|int
name|heartbeatMonitorInterval
parameter_list|)
block|{
name|this
operator|.
name|heartbeatMonitorInterval
operator|=
name|heartbeatMonitorInterval
expr_stmt|;
block|}
DECL|method|setInUpgradeMode (boolean inUpgradeMode)
specifier|public
name|void
name|setInUpgradeMode
parameter_list|(
name|boolean
name|inUpgradeMode
parameter_list|)
block|{
name|this
operator|.
name|isInUpgradeMode
operator|=
name|inUpgradeMode
expr_stmt|;
block|}
DECL|method|addUpgradeContainers (Set<String> upgradeContainers)
specifier|public
name|void
name|addUpgradeContainers
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|upgradeContainers
parameter_list|)
block|{
name|this
operator|.
name|upgradeContainers
operator|.
name|addAll
argument_list|(
name|upgradeContainers
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppStopInitiated (boolean appStopInitiated)
specifier|public
name|void
name|setAppStopInitiated
parameter_list|(
name|boolean
name|appStopInitiated
parameter_list|)
block|{
name|this
operator|.
name|appStopInitiated
operator|=
name|appStopInitiated
expr_stmt|;
block|}
comment|/**    * Read all default configs    *    * @param fileSystem fs    * @param appDef app default path    * @param metainfo metadata    *    * @return configuration maps    *     * @throws IOException    */
DECL|method|initializeDefaultConfigs (SliderFileSystem fileSystem, String appDef, Metainfo metainfo)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DefaultConfig
argument_list|>
name|initializeDefaultConfigs
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|appDef
parameter_list|,
name|Metainfo
name|metainfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DefaultConfig
argument_list|>
name|defaultConfigMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|metainfo
operator|.
name|getApplication
argument_list|()
operator|.
name|getConfigFiles
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|metainfo
operator|.
name|getApplication
argument_list|()
operator|.
name|getConfigFiles
argument_list|()
control|)
block|{
name|DefaultConfig
name|config
init|=
literal|null
decl_stmt|;
try|try
block|{
name|config
operator|=
name|AgentUtils
operator|.
name|getDefaultConfig
argument_list|(
name|fileSystem
argument_list|,
name|appDef
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Default config file not found. Only the config as input during create will be applied for {}"
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|defaultConfigMap
operator|.
name|put
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|defaultConfigMap
return|;
block|}
DECL|method|getDefaultConfigs ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DefaultConfig
argument_list|>
name|getDefaultConfigs
parameter_list|()
block|{
return|return
name|defaultConfigs
return|;
block|}
DECL|method|getHeartbeatMonitorInterval ()
specifier|private
name|int
name|getHeartbeatMonitorInterval
parameter_list|()
block|{
return|return
name|this
operator|.
name|heartbeatMonitorInterval
return|;
block|}
DECL|method|getClusterName ()
specifier|private
name|String
name|getClusterName
parameter_list|()
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|clusterName
argument_list|)
condition|)
block|{
name|clusterName
operator|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterName
return|;
block|}
comment|/**    * Publish a named property bag that may contain name-value pairs for app configurations such as hbase-site    *    * @param name    * @param description    * @param entries    */
DECL|method|publishApplicationInstanceData (String name, String description, Iterable<Map.Entry<String, String>> entries)
specifier|protected
name|void
name|publishApplicationInstanceData
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|PublishedConfiguration
name|pubconf
init|=
operator|new
name|PublishedConfiguration
argument_list|()
decl_stmt|;
name|pubconf
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|pubconf
operator|.
name|putValues
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"publishing {}"
argument_list|,
name|pubconf
argument_list|)
expr_stmt|;
name|getAmState
argument_list|()
operator|.
name|getPublishedSliderConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pubconf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a list of all hosts for all role/container per role    *    * @return the map of role->node    */
DECL|method|getRoleClusterNodeMapping ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|getRoleClusterNodeMapping
parameter_list|()
block|{
return|return
name|amState
operator|.
name|getRoleClusterNodeMapping
argument_list|()
return|;
block|}
DECL|method|getContainerLabel (Container container, String role, String group)
specifier|private
name|String
name|getContainerLabel
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|role
parameter_list|,
name|String
name|group
parameter_list|)
block|{
if|if
condition|(
name|role
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|LABEL_MAKER
operator|+
name|role
return|;
block|}
else|else
block|{
return|return
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|LABEL_MAKER
operator|+
name|role
operator|+
name|LABEL_MAKER
operator|+
name|group
return|;
block|}
block|}
DECL|method|getClusterInfoPropertyValue (String name)
specifier|protected
name|String
name|getClusterInfoPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StateAccessForProviders
name|accessor
init|=
name|getAmState
argument_list|()
decl_stmt|;
assert|assert
name|accessor
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ClusterDescription
name|description
init|=
name|accessor
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
return|return
name|description
operator|.
name|getInfo
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getClusterOptionPropertyValue (String name)
specifier|protected
name|String
name|getClusterOptionPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|StateAccessForProviders
name|accessor
init|=
name|getAmState
argument_list|()
decl_stmt|;
assert|assert
name|accessor
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ClusterDescription
name|description
init|=
name|accessor
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
return|return
name|description
operator|.
name|getMandatoryOption
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Lost heartbeat from the container - release it and ask for a replacement (async operation)    *    * @param label    * @param containerId    */
DECL|method|lostContainer ( String label, ContainerId containerId)
specifier|protected
name|void
name|lostContainer
parameter_list|(
name|String
name|label
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|getComponentStatuses
argument_list|()
operator|.
name|remove
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|getQueueAccess
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|ProviderReportedContainerLoss
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build the provider status, can be empty    *    * @return the provider status - map of entries to add to the info section    */
DECL|method|buildProviderStatus ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildProviderStatus
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|stats
return|;
block|}
comment|/**    * Format the folder locations and publish in the registry service    *    * @param folders    * @param containerId    * @param hostFqdn    * @param componentName    */
DECL|method|publishFolderPaths ( Map<String, String> folders, String containerId, String componentName, String hostFqdn)
specifier|protected
name|void
name|publishFolderPaths
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|folders
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|componentName
parameter_list|,
name|String
name|hostFqdn
parameter_list|)
block|{
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|folders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ExportEntry
name|exportEntry
init|=
operator|new
name|ExportEntry
argument_list|()
decl_stmt|;
name|exportEntry
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|HOST_FOLDER_FORMAT
argument_list|,
name|hostFqdn
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setLevel
argument_list|(
name|COMPONENT_TAG
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setTag
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setUpdatedTime
argument_list|(
name|now
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"AGENT_LOG_ROOT"
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|logFolderExports
init|)
block|{
name|getLogFolderExports
argument_list|()
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|exportEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|workFolderExports
init|)
block|{
name|getWorkFolderExports
argument_list|()
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|exportEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Updating log and pwd folders for container {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|PublishedExports
name|exports
init|=
operator|new
name|PublishedExports
argument_list|(
name|CONTAINER_LOGS_TAG
argument_list|)
decl_stmt|;
name|exports
operator|.
name|setUpdated
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|logFolderExports
init|)
block|{
name|updateExportsFromList
argument_list|(
name|exports
argument_list|,
name|getLogFolderExports
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getAmState
argument_list|()
operator|.
name|getPublishedExportsSet
argument_list|()
operator|.
name|put
argument_list|(
name|CONTAINER_LOGS_TAG
argument_list|,
name|exports
argument_list|)
expr_stmt|;
name|exports
operator|=
operator|new
name|PublishedExports
argument_list|(
name|CONTAINER_PWDS_TAG
argument_list|)
expr_stmt|;
name|exports
operator|.
name|setUpdated
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|workFolderExports
init|)
block|{
name|updateExportsFromList
argument_list|(
name|exports
argument_list|,
name|getWorkFolderExports
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getAmState
argument_list|()
operator|.
name|getPublishedExportsSet
argument_list|()
operator|.
name|put
argument_list|(
name|CONTAINER_PWDS_TAG
argument_list|,
name|exports
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the export data from the map    * @param exports    * @param folderExports    */
DECL|method|updateExportsFromList (PublishedExports exports, Map<String, ExportEntry> folderExports)
specifier|private
name|void
name|updateExportsFromList
parameter_list|(
name|PublishedExports
name|exports
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|folderExports
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|perComponentList
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|logEntry
range|:
name|folderExports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|componentName
init|=
name|logEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|perComponentList
operator|.
name|containsKey
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
name|perComponentList
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExportEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|perComponentList
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
operator|.
name|add
argument_list|(
name|logEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exports
operator|.
name|putValues
argument_list|(
name|perComponentList
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process return status for component instances    *    * @param heartBeat    * @param componentStatus    */
DECL|method|publishConfigAndExportGroups (HeartBeat heartBeat, ComponentInstanceState componentStatus, String componentGroup)
specifier|protected
name|void
name|publishConfigAndExportGroups
parameter_list|(
name|HeartBeat
name|heartBeat
parameter_list|,
name|ComponentInstanceState
name|componentStatus
parameter_list|,
name|String
name|componentGroup
parameter_list|)
block|{
name|List
argument_list|<
name|ComponentStatus
argument_list|>
name|statuses
init|=
name|heartBeat
operator|.
name|getComponentStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
operator|!
name|statuses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processing {} status reports."
argument_list|,
name|statuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ComponentStatus
name|status
range|:
name|statuses
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Status report: {}"
argument_list|,
name|status
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Application
name|application
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|canAnyMasterPublishConfig
argument_list|()
operator|||
name|canPublishConfig
argument_list|(
name|componentGroup
argument_list|)
operator|)
operator|&&
operator|!
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
operator|.
name|getComponentOptBool
argument_list|(
name|componentGroup
argument_list|,
name|AgentKeys
operator|.
name|AM_CONFIG_GENERATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// If no Master can explicitly publish then publish if its a master
comment|// Otherwise, wait till the master that can publish is ready
name|Set
argument_list|<
name|String
argument_list|>
name|exportedConfigs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|exportedConfigsStr
init|=
name|application
operator|.
name|getExportedConfigs
argument_list|()
decl_stmt|;
name|boolean
name|exportedAllConfigs
init|=
name|exportedConfigsStr
operator|==
literal|null
operator|||
name|exportedConfigsStr
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exportedAllConfigs
condition|)
block|{
for|for
control|(
name|String
name|exportedConfig
range|:
name|exportedConfigsStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|exportedConfig
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|exportedConfigs
operator|.
name|add
argument_list|(
name|exportedConfig
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|status
operator|.
name|getConfigs
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|!
name|exportedAllConfigs
operator|&&
name|exportedConfigs
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|)
operator|||
name|exportedAllConfigs
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configs
init|=
name|status
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|publishApplicationInstanceData
argument_list|(
name|key
argument_list|,
name|key
argument_list|,
name|configs
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|ExportGroup
argument_list|>
name|appExportGroups
init|=
name|application
operator|.
name|getExportGroups
argument_list|()
decl_stmt|;
name|boolean
name|hasExportGroups
init|=
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|appExportGroups
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appExports
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|appExportsStr
init|=
name|getApplicationComponent
argument_list|(
name|componentGroup
argument_list|)
operator|.
name|getAppExports
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|appExportsStr
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|appExport
range|:
name|appExportsStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|appExport
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appExports
operator|.
name|add
argument_list|(
name|appExport
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasExportGroups
operator|&&
operator|!
name|appExports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|configKeyFormat
init|=
literal|"${site.%s.%s}"
decl_stmt|;
name|String
name|hostKeyFormat
init|=
literal|"${%s_HOST}"
decl_stmt|;
comment|// publish export groups if any
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replaceTokens
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|getRoleClusterNodeMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|hostName
init|=
name|getHostsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|replaceTokens
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|hostKeyFormat
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|status
operator|.
name|getConfigs
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configs
init|=
name|status
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configKey
range|:
name|configs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|lookupKey
init|=
name|String
operator|.
name|format
argument_list|(
name|configKeyFormat
argument_list|,
name|key
argument_list|,
name|configKey
argument_list|)
decl_stmt|;
name|replaceTokens
operator|.
name|put
argument_list|(
name|lookupKey
argument_list|,
name|configs
operator|.
name|get
argument_list|(
name|configKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|modifiedGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExportGroup
name|exportGroup
range|:
name|appExportGroups
control|)
block|{
name|List
argument_list|<
name|Export
argument_list|>
name|exports
init|=
name|exportGroup
operator|.
name|getExports
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|exports
argument_list|)
condition|)
block|{
name|String
name|exportGroupName
init|=
name|exportGroup
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|map
init|=
operator|(
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
operator|)
name|getCurrentExports
argument_list|(
name|exportGroupName
argument_list|)
decl_stmt|;
for|for
control|(
name|Export
name|export
range|:
name|exports
control|)
block|{
if|if
condition|(
name|canBeExported
argument_list|(
name|exportGroupName
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|appExports
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|export
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// replace host names
for|for
control|(
name|String
name|token
range|:
name|replaceTokens
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
name|token
argument_list|,
name|replaceTokens
operator|.
name|get
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ExportEntry
name|entry
init|=
operator|new
name|ExportEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setLevel
argument_list|(
name|APPLICATION_TAG
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdatedTime
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// over-write, app exports are singletons
name|map
operator|.
name|put
argument_list|(
name|export
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Preparing to publish. Key {} and Value {}"
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|modifiedGroups
operator|.
name|add
argument_list|(
name|exportGroupName
argument_list|)
expr_stmt|;
block|}
block|}
name|publishModifiedExportGroups
argument_list|(
name|modifiedGroups
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Received and processed config for {}"
argument_list|,
name|heartBeat
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|componentStatus
operator|.
name|setConfigReported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|canBeExported (String exportGroupName, String name, Set<String> appExports)
specifier|private
name|boolean
name|canBeExported
parameter_list|(
name|String
name|exportGroupName
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|appExports
parameter_list|)
block|{
return|return
name|appExports
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s"
argument_list|,
name|exportGroupName
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCurrentExports (String groupName)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|getCurrentExports
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|exportGroups
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|exportGroups
init|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|exportGroups
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|this
operator|.
name|exportGroups
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
operator|.
name|exportGroups
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
return|;
block|}
DECL|method|publishModifiedExportGroups (Set<String> modifiedGroups)
specifier|private
name|void
name|publishModifiedExportGroups
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|modifiedGroups
parameter_list|)
block|{
for|for
control|(
name|String
name|groupName
range|:
name|modifiedGroups
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|entries
init|=
name|this
operator|.
name|exportGroups
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
comment|// Publish in old format for the time being
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|simpleEntries
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ExportEntry
argument_list|>
name|exports
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|exports
argument_list|)
condition|)
block|{
comment|// there is no support for multiple exports per name - so extract only the first one
name|simpleEntries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
operator|.
name|getComponentOptBool
argument_list|(
name|groupName
argument_list|,
name|AgentKeys
operator|.
name|AM_CONFIG_GENERATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|publishApplicationInstanceData
argument_list|(
name|groupName
argument_list|,
name|groupName
argument_list|,
name|simpleEntries
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PublishedExports
name|exports
init|=
operator|new
name|PublishedExports
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|exports
operator|.
name|setUpdated
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|exports
operator|.
name|putValues
argument_list|(
name|entries
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|getAmState
argument_list|()
operator|.
name|getPublishedExportsSet
argument_list|()
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|exports
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Publish component instance specific data if the component demands it */
DECL|method|processAndPublishComponentSpecificData (Map<String, String> ports, String containerId, String hostFqdn, String componentGroup)
specifier|protected
name|void
name|processAndPublishComponentSpecificData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ports
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|hostFqdn
parameter_list|,
name|String
name|componentGroup
parameter_list|)
block|{
name|String
name|portVarFormat
init|=
literal|"${site.%s}"
decl_stmt|;
name|String
name|hostNamePattern
init|=
literal|"${THIS_HOST}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toPublish
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Application
name|application
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|component
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|componentGroup
argument_list|)
condition|)
block|{
if|if
condition|(
name|component
operator|.
name|getComponentExports
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ComponentExport
name|export
range|:
name|component
operator|.
name|getComponentExports
argument_list|()
control|)
block|{
name|String
name|templateToExport
init|=
name|export
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|portName
range|:
name|ports
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|publishData
init|=
literal|false
decl_stmt|;
name|String
name|portValPattern
init|=
name|String
operator|.
name|format
argument_list|(
name|portVarFormat
argument_list|,
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
name|templateToExport
operator|.
name|contains
argument_list|(
name|portValPattern
argument_list|)
condition|)
block|{
name|templateToExport
operator|=
name|templateToExport
operator|.
name|replace
argument_list|(
name|portValPattern
argument_list|,
name|ports
operator|.
name|get
argument_list|(
name|portName
argument_list|)
argument_list|)
expr_stmt|;
name|publishData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|templateToExport
operator|.
name|contains
argument_list|(
name|hostNamePattern
argument_list|)
condition|)
block|{
name|templateToExport
operator|=
name|templateToExport
operator|.
name|replace
argument_list|(
name|hostNamePattern
argument_list|,
name|hostFqdn
argument_list|)
expr_stmt|;
name|publishData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|publishData
condition|)
block|{
name|toPublish
operator|.
name|put
argument_list|(
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|templateToExport
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Publishing {} for name {} and container {}"
argument_list|,
name|templateToExport
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|toPublish
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perContainerData
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|getComponentInstanceData
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|perContainerData
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|perContainerData
operator|=
name|getComponentInstanceData
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
name|perContainerData
operator|.
name|putAll
argument_list|(
name|toPublish
argument_list|)
expr_stmt|;
name|getComponentInstanceData
argument_list|()
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|perContainerData
argument_list|)
expr_stmt|;
name|publishComponentInstanceData
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Publish component instance specific data if the component demands it */
DECL|method|processAndPublishComponentSpecificExports (Map<String, String> ports, String containerId, String hostFqdn, String compName, String compGroup)
specifier|protected
name|void
name|processAndPublishComponentSpecificExports
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ports
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|hostFqdn
parameter_list|,
name|String
name|compName
parameter_list|,
name|String
name|compGroup
parameter_list|)
block|{
name|String
name|portVarFormat
init|=
literal|"${site.%s}"
decl_stmt|;
name|String
name|hostNamePattern
init|=
literal|"${"
operator|+
name|compGroup
operator|+
literal|"_HOST}"
decl_stmt|;
name|List
argument_list|<
name|ExportGroup
argument_list|>
name|appExportGroups
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getExportGroups
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|compGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
operator|&&
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|component
operator|.
name|getCompExports
argument_list|()
argument_list|)
operator|&&
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|appExportGroups
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|compExports
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|compExportsStr
init|=
name|component
operator|.
name|getCompExports
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|compExport
range|:
name|compExportsStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|compExport
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|compExports
operator|.
name|add
argument_list|(
name|compExport
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|modifiedGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExportGroup
name|exportGroup
range|:
name|appExportGroups
control|)
block|{
name|List
argument_list|<
name|Export
argument_list|>
name|exports
init|=
name|exportGroup
operator|.
name|getExports
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|exports
argument_list|)
condition|)
block|{
name|String
name|exportGroupName
init|=
name|exportGroup
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|map
init|=
operator|(
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
operator|)
name|getCurrentExports
argument_list|(
name|exportGroupName
argument_list|)
decl_stmt|;
for|for
control|(
name|Export
name|export
range|:
name|exports
control|)
block|{
if|if
condition|(
name|canBeExported
argument_list|(
name|exportGroupName
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|compExports
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to publish {} of group {} for component type {}"
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|exportGroupName
argument_list|,
name|compName
argument_list|)
expr_stmt|;
name|String
name|templateToExport
init|=
name|export
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|portName
range|:
name|ports
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|publishData
init|=
literal|false
decl_stmt|;
name|String
name|portValPattern
init|=
name|String
operator|.
name|format
argument_list|(
name|portVarFormat
argument_list|,
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
name|templateToExport
operator|.
name|contains
argument_list|(
name|portValPattern
argument_list|)
condition|)
block|{
name|templateToExport
operator|=
name|templateToExport
operator|.
name|replace
argument_list|(
name|portValPattern
argument_list|,
name|ports
operator|.
name|get
argument_list|(
name|portName
argument_list|)
argument_list|)
expr_stmt|;
name|publishData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|templateToExport
operator|.
name|contains
argument_list|(
name|hostNamePattern
argument_list|)
condition|)
block|{
name|templateToExport
operator|=
name|templateToExport
operator|.
name|replace
argument_list|(
name|hostNamePattern
argument_list|,
name|hostFqdn
argument_list|)
expr_stmt|;
name|publishData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|publishData
condition|)
block|{
name|ExportEntry
name|entryToAdd
init|=
operator|new
name|ExportEntry
argument_list|()
decl_stmt|;
name|entryToAdd
operator|.
name|setLevel
argument_list|(
name|COMPONENT_TAG
argument_list|)
expr_stmt|;
name|entryToAdd
operator|.
name|setValue
argument_list|(
name|templateToExport
argument_list|)
expr_stmt|;
name|entryToAdd
operator|.
name|setUpdatedTime
argument_list|(
name|now
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entryToAdd
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|entryToAdd
operator|.
name|setTag
argument_list|(
name|tags
operator|.
name|getTag
argument_list|(
name|compName
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExportEntry
argument_list|>
name|existingList
init|=
name|map
operator|.
name|putIfAbsent
argument_list|(
name|export
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|CopyOnWriteArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entryToAdd
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// in-place edit, no lock needed
if|if
condition|(
name|existingList
operator|!=
literal|null
condition|)
block|{
name|boolean
name|updatedInPlace
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExportEntry
name|entry
range|:
name|existingList
control|)
block|{
if|if
condition|(
name|containerId
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|entryToAdd
operator|.
name|setValue
argument_list|(
name|templateToExport
argument_list|)
expr_stmt|;
name|entryToAdd
operator|.
name|setUpdatedTime
argument_list|(
name|now
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|updatedInPlace
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updatedInPlace
condition|)
block|{
name|existingList
operator|.
name|add
argument_list|(
name|entryToAdd
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Publishing {} for name {} and container {}"
argument_list|,
name|templateToExport
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|modifiedGroups
operator|.
name|add
argument_list|(
name|exportGroupName
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|containerExportsMap
init|)
block|{
if|if
condition|(
operator|!
name|containerExportsMap
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|containerExportsMap
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|containerExportMaps
init|=
name|containerExportsMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|containerExportMaps
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|exportGroupName
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|publishModifiedExportGroups
argument_list|(
name|modifiedGroups
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|publishComponentInstanceData ()
specifier|private
name|void
name|publishComponentInstanceData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dataToPublish
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|container
range|:
name|getComponentInstanceData
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|getComponentInstanceData
argument_list|()
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|dataToPublish
operator|.
name|put
argument_list|(
name|container
operator|+
literal|"."
operator|+
name|prop
argument_list|,
name|getComponentInstanceData
argument_list|()
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|.
name|get
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|publishApplicationInstanceData
argument_list|(
name|COMPONENT_DATA_TAG
argument_list|,
name|COMPONENT_DATA_TAG
argument_list|,
name|dataToPublish
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return Component based on group    *    * @param roleGroup component group    *    * @return the component entry or null for no match    */
DECL|method|getApplicationComponent (String roleGroup)
specifier|protected
name|Component
name|getApplicationComponent
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
return|return
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
return|;
block|}
comment|/**    * Extract script path from the application metainfo    *    * @param roleGroup component group    * @return the script path or null for no match    */
DECL|method|getScriptPathForMasterPackage (String roleGroup)
specifier|protected
name|CommandScript
name|getScriptPathForMasterPackage
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|Component
name|component
init|=
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
return|return
name|component
operator|.
name|getCommandScript
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Is the role of type MASTER    *    * @param roleGroup component group    *    * @return true if the role category is MASTER    */
DECL|method|isMaster (String roleGroup)
specifier|protected
name|boolean
name|isMaster
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|Component
name|component
init|=
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|component
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MASTER"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Can the role publish configuration    *    * @param roleGroup component group    *    * @return true if it can be pubished    */
DECL|method|canPublishConfig (String roleGroup)
specifier|protected
name|boolean
name|canPublishConfig
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|Component
name|component
init|=
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|component
operator|.
name|getPublishConfig
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Checks if the role is marked auto-restart    *    * @param roleGroup component group    *    * @return true if it is auto-restart    */
DECL|method|isMarkedAutoRestart (String roleGroup)
specifier|protected
name|boolean
name|isMarkedAutoRestart
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|Component
name|component
init|=
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
return|return
name|component
operator|.
name|getAutoStartOnFailureBoolean
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Can any master publish config explicitly, if not a random master is used    *    * @return true if the condition holds    */
DECL|method|canAnyMasterPublishConfig ()
specifier|protected
name|boolean
name|canAnyMasterPublishConfig
parameter_list|()
block|{
if|if
condition|(
name|canAnyMasterPublish
operator|==
literal|null
condition|)
block|{
name|Application
name|application
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed app definition: Expect application as root element in the metainfo.xml"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Component
name|component
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|component
operator|.
name|getPublishConfig
argument_list|()
argument_list|)
operator|&&
name|component
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MASTER"
argument_list|)
condition|)
block|{
name|canAnyMasterPublish
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|canAnyMasterPublish
operator|==
literal|null
condition|)
block|{
name|canAnyMasterPublish
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|canAnyMasterPublish
return|;
block|}
DECL|method|getRoleName (String label)
specifier|private
name|String
name|getRoleName
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|int
name|index1
init|=
name|label
operator|.
name|indexOf
argument_list|(
name|LABEL_MAKER
argument_list|)
decl_stmt|;
name|int
name|index2
init|=
name|label
operator|.
name|lastIndexOf
argument_list|(
name|LABEL_MAKER
argument_list|)
decl_stmt|;
if|if
condition|(
name|index1
operator|==
name|index2
condition|)
block|{
return|return
name|label
operator|.
name|substring
argument_list|(
name|index1
operator|+
name|LABEL_MAKER
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|label
operator|.
name|substring
argument_list|(
name|index1
operator|+
name|LABEL_MAKER
operator|.
name|length
argument_list|()
argument_list|,
name|index2
argument_list|)
return|;
block|}
block|}
DECL|method|getRoleGroup (String label)
specifier|private
name|String
name|getRoleGroup
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|label
operator|.
name|substring
argument_list|(
name|label
operator|.
name|lastIndexOf
argument_list|(
name|LABEL_MAKER
argument_list|)
operator|+
name|LABEL_MAKER
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getContainerId (String label)
specifier|private
name|String
name|getContainerId
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|label
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|label
operator|.
name|indexOf
argument_list|(
name|LABEL_MAKER
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Add install command to the heartbeat response    *    * @param roleName    * @param roleGroup    * @param containerId    * @param response    * @param scriptPath    * @param pkg    *          when this field is null, it indicates the command is for the    *          master package; while not null, for the package named by this    *          field    * @throws SliderException    */
annotation|@
name|VisibleForTesting
DECL|method|addInstallCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, String scriptPath, ComponentCommand compCmd, long timeout, String pkg)
specifier|protected
name|void
name|addInstallCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|String
name|scriptPath
parameter_list|,
name|ComponentCommand
name|compCmd
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
name|pkg
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ExecutionCommand
name|cmd
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|prepareExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|String
name|clusterName
init|=
name|getClusterName
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|INSTALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setPkg
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|JAVA_HOME
argument_list|,
name|getJDKDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|PACKAGE_LIST
argument_list|,
name|getPackageList
argument_list|()
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|componentConfigurations
init|=
name|buildComponentConfigurations
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setComponentConfigurations
argument_list|(
name|componentConfigurations
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|scriptPath
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// assume it to be default shell command
name|ComponentCommand
name|effectiveCommand
init|=
name|compCmd
decl_stmt|;
if|if
condition|(
name|effectiveCommand
operator|==
literal|null
condition|)
block|{
name|effectiveCommand
operator|=
name|ComponentCommand
operator|.
name|getDefaultComponentCommand
argument_list|(
literal|"INSTALL"
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|effectiveCommand
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
operator|.
name|put
argument_list|(
literal|"exec_cmd"
argument_list|,
name|effectiveCommand
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|setHostname
argument_list|(
name|getClusterInfoPropertyValue
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"command looks like: {} "
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addInstallDockerCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, ComponentCommand compCmd, long timeout)
specifier|protected
name|void
name|addInstallDockerCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|ComponentCommand
name|compCmd
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ExecutionCommand
name|cmd
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|prepareExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|String
name|clusterName
init|=
name|getClusterName
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|INSTALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|PACKAGE_LIST
argument_list|,
name|getPackageList
argument_list|()
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|componentConfigurations
init|=
name|buildComponentConfigurations
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setComponentConfigurations
argument_list|(
name|componentConfigurations
argument_list|)
expr_stmt|;
name|ComponentCommand
name|effectiveCommand
init|=
name|compCmd
decl_stmt|;
if|if
condition|(
name|compCmd
operator|==
literal|null
condition|)
block|{
name|effectiveCommand
operator|=
operator|new
name|ComponentCommand
argument_list|()
expr_stmt|;
name|effectiveCommand
operator|.
name|setName
argument_list|(
literal|"INSTALL"
argument_list|)
expr_stmt|;
name|effectiveCommand
operator|.
name|setExec
argument_list|(
literal|"DEFAULT"
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|setCommandParameters
argument_list|(
name|effectiveCommand
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
operator|.
name|put
argument_list|(
literal|"exec_cmd"
argument_list|,
name|effectiveCommand
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostname
argument_list|(
name|getClusterInfoPropertyValue
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|addContainerDetails
argument_list|(
name|roleGroup
argument_list|,
name|getMetaInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dockerConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
comment|//put nothing
name|cmd
operator|.
name|setYarnDockerMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.command_path"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"commandPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.image_name"
argument_list|,
name|getConfigFromMetaInfo
argument_list|(
name|roleGroup
argument_list|,
literal|"image"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configurations
operator|.
name|put
argument_list|(
literal|"docker"
argument_list|,
name|dockerConfig
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- command: {}"
argument_list|,
name|cmd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommandParameters (String scriptPath, long timeout, boolean recordConfig)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setCommandParameters
parameter_list|(
name|String
name|scriptPath
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|recordConfig
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cmdParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"service_package_folder"
argument_list|,
literal|"${AGENT_WORK_ROOT}/work/app/definition/package"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"script"
argument_list|,
name|scriptPath
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"schema_version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"command_timeout"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"script_type"
argument_list|,
name|AbstractComponent
operator|.
name|TYPE_PYTHON
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"record_config"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|recordConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cmdParams
return|;
block|}
DECL|method|setCommandParameters (ComponentCommand compCmd, long timeout, boolean recordConfig)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setCommandParameters
parameter_list|(
name|ComponentCommand
name|compCmd
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|recordConfig
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cmdParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"service_package_folder"
argument_list|,
literal|"${AGENT_WORK_ROOT}/work/app/definition/package"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"command"
argument_list|,
name|compCmd
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"schema_version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"command_timeout"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"script_type"
argument_list|,
name|compCmd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"record_config"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|recordConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cmdParams
return|;
block|}
DECL|method|buildComponentConfigurations ( ConfTreeOperations appConf)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|buildComponentConfigurations
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|)
block|{
return|return
name|appConf
operator|.
name|getComponents
argument_list|()
return|;
block|}
DECL|method|getPackageListFromApplication (Application application)
specifier|protected
specifier|static
name|String
name|getPackageListFromApplication
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|String
name|pkgFormatString
init|=
literal|"{\"type\":\"%s\",\"name\":\"%s\"}"
decl_stmt|;
name|String
name|pkgListFormatString
init|=
literal|"[%s]"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|application
operator|.
name|getPackages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// no-op if there are packages that are not OS-specific, as these
comment|// will be localized by AM rather than the Agent
comment|// this should be backwards compatible, as there was previously an
comment|// XML parsing bug that ensured non-OS-specific packages did not exist
block|}
else|else
block|{
name|List
argument_list|<
name|OSSpecific
argument_list|>
name|osSpecifics
init|=
name|application
operator|.
name|getOSSpecifics
argument_list|()
decl_stmt|;
if|if
condition|(
name|osSpecifics
operator|!=
literal|null
operator|&&
name|osSpecifics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|OSSpecific
name|osSpecific
range|:
name|osSpecifics
control|)
block|{
if|if
condition|(
name|osSpecific
operator|.
name|getOsType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"any"
argument_list|)
condition|)
block|{
for|for
control|(
name|OSPackage
name|osPackage
range|:
name|osSpecific
operator|.
name|getPackages
argument_list|()
control|)
block|{
name|packages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|pkgFormatString
argument_list|,
name|osPackage
operator|.
name|getType
argument_list|()
argument_list|,
name|osPackage
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|packages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"["
operator|+
name|SliderUtils
operator|.
name|join
argument_list|(
name|packages
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"[]"
return|;
block|}
block|}
DECL|method|getPackageList ()
specifier|private
name|String
name|getPackageList
parameter_list|()
block|{
return|return
name|getPackageListFromApplication
argument_list|(
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
argument_list|)
return|;
block|}
DECL|method|prepareExecutionCommand (ExecutionCommand cmd)
specifier|private
name|void
name|prepareExecutionCommand
parameter_list|(
name|ExecutionCommand
name|cmd
parameter_list|)
block|{
name|cmd
operator|.
name|setTaskId
argument_list|(
name|taskId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCommandId
argument_list|(
name|cmd
operator|.
name|getTaskId
argument_list|()
operator|+
literal|"-1"
argument_list|)
expr_stmt|;
block|}
DECL|method|commandParametersSet (String scriptPath, long timeout, boolean recordConfig)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commandParametersSet
parameter_list|(
name|String
name|scriptPath
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|recordConfig
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cmdParams
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"service_package_folder"
argument_list|,
literal|"${AGENT_WORK_ROOT}/work/app/definition/package"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"script"
argument_list|,
name|scriptPath
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"schema_version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"command_timeout"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"script_type"
argument_list|,
literal|"PYTHON"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"record_config"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|recordConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cmdParams
return|;
block|}
DECL|method|commandParametersSet (ComponentCommand compCmd, long timeout, boolean recordConfig)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commandParametersSet
parameter_list|(
name|ComponentCommand
name|compCmd
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|recordConfig
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cmdParams
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"service_package_folder"
argument_list|,
literal|"${AGENT_WORK_ROOT}/work/app/definition/package"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"command"
argument_list|,
name|compCmd
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"schema_version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"command_timeout"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"script_type"
argument_list|,
name|compCmd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|cmdParams
operator|.
name|put
argument_list|(
literal|"record_config"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|recordConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cmdParams
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addStatusCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, String scriptPath, long timeout)
specifier|protected
name|void
name|addStatusCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|String
name|scriptPath
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDockerContainer
argument_list|(
name|roleGroup
argument_list|)
operator|||
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|addStatusDockerCommand
argument_list|(
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|,
name|response
argument_list|,
name|scriptPath
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return;
block|}
name|StatusCommand
name|cmd
init|=
operator|new
name|StatusCommand
argument_list|()
decl_stmt|;
name|String
name|clusterName
init|=
name|getClusterName
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCommandType
argument_list|(
name|AgentCommandType
operator|.
name|STATUS_COMMAND
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|StatusCommand
operator|.
name|STATUS_COMMAND
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|JAVA_HOME
argument_list|,
name|getJDKDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|response
operator|.
name|addStatusCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addStatusDockerCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, String scriptPath, long timeout)
specifier|protected
name|void
name|addStatusDockerCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|String
name|scriptPath
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|StatusCommand
name|cmd
init|=
operator|new
name|StatusCommand
argument_list|()
decl_stmt|;
name|String
name|clusterName
init|=
name|getClusterName
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCommandType
argument_list|(
name|AgentCommandType
operator|.
name|STATUS_COMMAND
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|StatusCommand
operator|.
name|STATUS_COMMAND
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getMandatoryOption
argument_list|(
name|JAVA_HOME
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|setCommandParameters
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dockerConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|statusCommand
init|=
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"statusCommand"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusCommand
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
comment|//should complain the required field is null
name|cmd
operator|.
name|setYarnDockerMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statusCommand
operator|=
literal|"docker top "
operator|+
name|containerId
operator|+
literal|" | grep \"\""
expr_stmt|;
comment|// default value
block|}
block|}
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.status_command"
argument_list|,
name|statusCommand
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|put
argument_list|(
literal|"docker"
argument_list|,
name|dockerConfig
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- status {}"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|response
operator|.
name|addStatusCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addGetConfigDockerCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response)
specifier|protected
name|void
name|addGetConfigDockerCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|StatusCommand
name|cmd
init|=
operator|new
name|StatusCommand
argument_list|()
decl_stmt|;
name|String
name|clusterName
init|=
name|getClusterName
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCommandType
argument_list|(
name|AgentCommandType
operator|.
name|STATUS_COMMAND
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|StatusCommand
operator|.
name|GET_CONFIG_COMMAND
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dockerConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|statusCommand
init|=
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"statusCommand"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusCommand
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
comment|//should complain the required field is null
name|cmd
operator|.
name|setYarnDockerMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statusCommand
operator|=
literal|"docker top "
operator|+
name|containerId
operator|+
literal|" | grep \"\""
expr_stmt|;
comment|// default value
block|}
block|}
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.status_command"
argument_list|,
name|statusCommand
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|put
argument_list|(
literal|"docker"
argument_list|,
name|dockerConfig
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- getconfig command {}"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|response
operator|.
name|addStatusCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigFromMetaInfoWithAppConfigOverriding (String roleGroup, String configName)
specifier|private
name|String
name|getConfigFromMetaInfoWithAppConfigOverriding
parameter_list|(
name|String
name|roleGroup
parameter_list|,
name|String
name|configName
parameter_list|)
block|{
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|String
name|containerName
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|getDockerContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|composedConfigName
init|=
literal|null
decl_stmt|;
name|String
name|appConfigValue
init|=
literal|null
decl_stmt|;
comment|//if the configName is about port , mount, inputfile, then check differently
if|if
condition|(
name|configName
operator|.
name|equals
argument_list|(
literal|"containerPort"
argument_list|)
operator|||
name|configName
operator|.
name|equals
argument_list|(
literal|"hostPort"
argument_list|)
condition|)
block|{
name|composedConfigName
operator|=
name|containerName
operator|+
literal|".ports."
operator|+
name|configName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configName
operator|.
name|equals
argument_list|(
literal|"containerMount"
argument_list|)
operator|||
name|configName
operator|.
name|equals
argument_list|(
literal|"hostMount"
argument_list|)
condition|)
block|{
name|composedConfigName
operator|=
name|containerName
operator|+
literal|".mounts."
operator|+
name|configName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configName
operator|.
name|equals
argument_list|(
literal|"containerPath"
argument_list|)
operator|||
name|configName
operator|.
name|equals
argument_list|(
literal|"fileLocalPath"
argument_list|)
condition|)
block|{
name|composedConfigName
operator|=
name|containerName
operator|+
literal|".inputFiles."
operator|+
name|configName
expr_stmt|;
block|}
else|else
block|{
name|composedConfigName
operator|=
name|containerName
operator|+
literal|"."
operator|+
name|configName
expr_stmt|;
block|}
name|appConfigValue
operator|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|composedConfigName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- value from appconfig component: {} configName: {} value: {}"
argument_list|,
name|roleGroup
argument_list|,
name|composedConfigName
argument_list|,
name|appConfigValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|appConfigValue
operator|==
literal|null
condition|)
block|{
name|appConfigValue
operator|=
name|getConfigFromMetaInfo
argument_list|(
name|roleGroup
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- value from metainfo component: {} configName: {} value: {}"
argument_list|,
name|roleGroup
argument_list|,
name|configName
argument_list|,
name|appConfigValue
argument_list|)
expr_stmt|;
block|}
return|return
name|appConfigValue
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addStartDockerCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, ComponentCommand startCommand, long timeout, boolean isMarkedAutoRestart)
specifier|protected
name|void
name|addStartDockerCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|ComponentCommand
name|startCommand
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|isMarkedAutoRestart
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|internalsConf
init|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
decl_stmt|;
name|ExecutionCommand
name|cmd
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|prepareExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|String
name|clusterName
init|=
name|internalsConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|getClusterInfoPropertyValue
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setHostname
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|START
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleParams
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setRoleParams
argument_list|(
name|roleParams
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|getRoleParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"auto_restart"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isMarkedAutoRestart
argument_list|)
argument_list|)
expr_stmt|;
name|startCommand
operator|=
operator|new
name|ComponentCommand
argument_list|()
expr_stmt|;
name|startCommand
operator|.
name|setName
argument_list|(
literal|"START"
argument_list|)
expr_stmt|;
name|startCommand
operator|.
name|setType
argument_list|(
literal|"docker"
argument_list|)
expr_stmt|;
name|startCommand
operator|.
name|setExec
argument_list|(
literal|"exec"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|setCommandParameters
argument_list|(
name|startCommand
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|componentConfigurations
init|=
name|buildComponentConfigurations
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setComponentConfigurations
argument_list|(
name|componentConfigurations
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dockerConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.startCommand"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"start_command"
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setYarnDockerMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.command_path"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"commandPath"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.image_name"
argument_list|,
name|getConfigFromMetaInfo
argument_list|(
name|roleGroup
argument_list|,
literal|"image"
argument_list|)
argument_list|)
expr_stmt|;
comment|// options should always have -d
name|String
name|options
init|=
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"options"
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|=
name|options
operator|+
literal|" -d"
expr_stmt|;
block|}
else|else
block|{
name|options
operator|=
literal|"-d"
expr_stmt|;
block|}
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// options should always have -d
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.containerPort"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"containerPort"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.hostPort"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"hostPort"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.mounting_directory"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"containerMount"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.host_mounting_directory"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"hostMount"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.additional_param"
argument_list|,
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"additionalParam"
argument_list|)
argument_list|)
expr_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.input_file.mount_path"
argument_list|,
name|getConfigFromMetaInfo
argument_list|(
name|roleGroup
argument_list|,
literal|"containerPath"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|lifetime
init|=
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"lifetime"
argument_list|)
decl_stmt|;
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.lifetime"
argument_list|,
name|lifetime
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|put
argument_list|(
literal|"docker"
argument_list|,
name|dockerConfig
argument_list|)
expr_stmt|;
name|String
name|statusCommand
init|=
name|getConfigFromMetaInfoWithAppConfigOverriding
argument_list|(
name|roleGroup
argument_list|,
literal|"statusCommand"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusCommand
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isYarnDockerContainer
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
comment|//should complain the required field is null
block|}
else|else
block|{
name|statusCommand
operator|=
literal|"docker top "
operator|+
name|containerId
operator|+
literal|" | grep \"\""
expr_stmt|;
block|}
block|}
name|dockerConfig
operator|.
name|put
argument_list|(
literal|"docker.status_command"
argument_list|,
name|statusCommand
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
comment|// configurations.get("global").put("exec_cmd", startCommand.getExec());
name|cmd
operator|.
name|addContainerDetails
argument_list|(
name|roleGroup
argument_list|,
name|getMetaInfo
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Docker- command: {}"
argument_list|,
name|cmd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigFromMetaInfo (String roleGroup, String configName)
specifier|private
name|String
name|getConfigFromMetaInfo
parameter_list|(
name|String
name|roleGroup
parameter_list|,
name|String
name|configName
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|DockerContainer
argument_list|>
name|containers
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|getDockerContainers
argument_list|()
decl_stmt|;
comment|// to support multi container per
comment|// component later
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- containers metainfo: {}"
argument_list|,
name|containers
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DockerContainer
name|container
init|=
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|configName
condition|)
block|{
case|case
literal|"start_command"
case|:
name|result
operator|=
name|container
operator|.
name|getStartCommand
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"image"
case|:
name|result
operator|=
name|container
operator|.
name|getImage
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"network"
case|:
if|if
condition|(
name|container
operator|.
name|getNetwork
argument_list|()
operator|==
literal|null
operator|||
name|container
operator|.
name|getNetwork
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
literal|"none"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|container
operator|.
name|getNetwork
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|"useNetworkScript"
case|:
if|if
condition|(
name|container
operator|.
name|getUseNetworkScript
argument_list|()
operator|==
literal|null
operator|||
name|container
operator|.
name|getUseNetworkScript
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
literal|"yes"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|container
operator|.
name|getUseNetworkScript
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|"statusCommand"
case|:
name|result
operator|=
name|container
operator|.
name|getStatusCommand
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"commandPath"
case|:
name|result
operator|=
name|container
operator|.
name|getCommandPath
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"options"
case|:
name|result
operator|=
name|container
operator|.
name|getOptions
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"containerPort"
case|:
name|result
operator|=
name|container
operator|.
name|getPorts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|container
operator|.
name|getPorts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerPort
argument_list|()
else|:
literal|null
expr_stmt|;
comment|// to support
comment|// multi port
comment|// later
break|break;
case|case
literal|"hostPort"
case|:
name|result
operator|=
name|container
operator|.
name|getPorts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|container
operator|.
name|getPorts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostPort
argument_list|()
else|:
literal|null
expr_stmt|;
comment|// to support multi
comment|// port later
break|break;
case|case
literal|"containerMount"
case|:
name|result
operator|=
name|container
operator|.
name|getMounts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|container
operator|.
name|getMounts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerMount
argument_list|()
else|:
literal|null
expr_stmt|;
comment|// to support
comment|// multi port
comment|// later
break|break;
case|case
literal|"hostMount"
case|:
name|result
operator|=
name|container
operator|.
name|getMounts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|container
operator|.
name|getMounts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostMount
argument_list|()
else|:
literal|null
expr_stmt|;
comment|// to support multi
comment|// port later
break|break;
case|case
literal|"additionalParam"
case|:
name|result
operator|=
name|container
operator|.
name|getAdditionalParam
argument_list|()
expr_stmt|;
comment|// to support multi port later
break|break;
case|case
literal|"runPriviledgedContainer"
case|:
if|if
condition|(
name|container
operator|.
name|getRunPrivilegedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|"false"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|container
operator|.
name|getRunPrivilegedContainer
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Docker- component: {} configName: {} value: {}"
argument_list|,
name|roleGroup
argument_list|,
name|configName
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addGetConfigCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response)
specifier|protected
name|void
name|addGetConfigCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|StatusCommand
name|cmd
init|=
operator|new
name|StatusCommand
argument_list|()
decl_stmt|;
name|String
name|clusterName
init|=
name|getClusterName
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCommandType
argument_list|(
name|AgentCommandType
operator|.
name|STATUS_COMMAND
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|StatusCommand
operator|.
name|GET_CONFIG_COMMAND
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|response
operator|.
name|addStatusCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addStartCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, String scriptPath, ComponentCommand startCommand, ComponentCommand stopCommand, long timeout, boolean isMarkedAutoRestart)
specifier|protected
name|void
name|addStartCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|String
name|scriptPath
parameter_list|,
name|ComponentCommand
name|startCommand
parameter_list|,
name|ComponentCommand
name|stopCommand
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|isMarkedAutoRestart
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|internalsConf
init|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
decl_stmt|;
name|ExecutionCommand
name|cmd
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|prepareExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|String
name|clusterName
init|=
name|internalsConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|getClusterInfoPropertyValue
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setHostname
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|START
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|JAVA_HOME
argument_list|,
name|getJDKDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleParams
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setRoleParams
argument_list|(
name|roleParams
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|getRoleParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"auto_restart"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isMarkedAutoRestart
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|componentConfigurations
init|=
name|buildComponentConfigurations
argument_list|(
name|appConf
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setComponentConfigurations
argument_list|(
name|componentConfigurations
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|scriptPath
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|startCommand
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Expected START command not found for component "
operator|+
name|roleName
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|startCommand
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
operator|.
name|put
argument_list|(
literal|"exec_cmd"
argument_list|,
name|startCommand
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"command looks like: {}"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
comment|// With start command, the corresponding command for graceful stop needs to
comment|// be sent. This will be used when a particular container is lost as per RM,
comment|// but then the agent is still running and heart-beating to the Slider AM.
name|ExecutionCommand
name|cmdStop
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|cmdStop
operator|.
name|setTaskId
argument_list|(
name|taskId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setCommandId
argument_list|(
name|cmdStop
operator|.
name|getTaskId
argument_list|()
operator|+
literal|"-1"
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setHostname
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|STOP
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParamsStop
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParamsStop
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|JAVA_HOME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParamsStop
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParamsStop
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleParamsStop
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmdStop
operator|.
name|setRoleParams
argument_list|(
name|roleParamsStop
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|getRoleParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"auto_restart"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isMarkedAutoRestart
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|scriptPath
argument_list|)
condition|)
block|{
name|cmdStop
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|stopCommand
operator|==
literal|null
condition|)
block|{
name|stopCommand
operator|=
name|ComponentCommand
operator|.
name|getDefaultComponentCommand
argument_list|(
literal|"STOP"
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|stopCommand
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
operator|.
name|put
argument_list|(
literal|"exec_cmd"
argument_list|,
name|startCommand
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurationsStop
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmdStop
operator|.
name|setConfigurations
argument_list|(
name|configurationsStop
argument_list|)
expr_stmt|;
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmdStop
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addUpgradeCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, String scriptPath, long timeout)
specifier|protected
name|void
name|addUpgradeCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|String
name|scriptPath
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|internalsConf
init|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
decl_stmt|;
name|ExecutionCommand
name|cmd
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|prepareExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|String
name|clusterName
init|=
name|internalsConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|getClusterInfoPropertyValue
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setHostname
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|UPGRADE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParams
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getMandatoryOption
argument_list|(
name|JAVA_HOME
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParams
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParams
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setConfigurations
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|addStopCommand (String roleName, String roleGroup, String containerId, HeartBeatResponse response, String scriptPath, long timeout, boolean isInUpgradeMode)
specifier|protected
name|void
name|addStopCommand
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|HeartBeatResponse
name|response
parameter_list|,
name|String
name|scriptPath
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|isInUpgradeMode
parameter_list|)
throws|throws
name|SliderException
block|{
assert|assert
name|getAmState
argument_list|()
operator|.
name|isApplicationLive
argument_list|()
assert|;
name|ConfTreeOperations
name|appConf
init|=
name|getAmState
argument_list|()
operator|.
name|getAppConfSnapshot
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|internalsConf
init|=
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
decl_stmt|;
name|ExecutionCommand
name|cmdStop
init|=
operator|new
name|ExecutionCommand
argument_list|(
name|AgentCommandType
operator|.
name|EXECUTION_COMMAND
argument_list|)
decl_stmt|;
name|cmdStop
operator|.
name|setTaskId
argument_list|(
name|taskId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setCommandId
argument_list|(
name|cmdStop
operator|.
name|getTaskId
argument_list|()
operator|+
literal|"-1"
argument_list|)
expr_stmt|;
name|String
name|clusterName
init|=
name|internalsConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|APPLICATION_NAME
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|getClusterInfoPropertyValue
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
decl_stmt|;
name|cmdStop
operator|.
name|setHostname
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
comment|// Upgrade stop is differentiated by passing a transformed role command -
comment|// UPGRADE_STOP
name|cmdStop
operator|.
name|setRoleCommand
argument_list|(
name|Command
operator|.
name|transform
argument_list|(
name|Command
operator|.
name|STOP
argument_list|,
name|isInUpgradeMode
argument_list|)
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setServiceName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setComponentName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostLevelParamsStop
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hostLevelParamsStop
operator|.
name|put
argument_list|(
name|JAVA_HOME
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getMandatoryOption
argument_list|(
name|JAVA_HOME
argument_list|)
argument_list|)
expr_stmt|;
name|hostLevelParamsStop
operator|.
name|put
argument_list|(
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setHostLevelParams
argument_list|(
name|hostLevelParamsStop
argument_list|)
expr_stmt|;
name|cmdStop
operator|.
name|setCommandParams
argument_list|(
name|commandParametersSet
argument_list|(
name|scriptPath
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurationsStop
init|=
name|buildCommandConfigurations
argument_list|(
name|appConf
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|cmdStop
operator|.
name|setConfigurations
argument_list|(
name|configurationsStop
argument_list|)
expr_stmt|;
name|response
operator|.
name|addExecutionCommand
argument_list|(
name|cmdStop
argument_list|)
expr_stmt|;
block|}
DECL|method|getJDKDir ()
specifier|protected
specifier|static
name|String
name|getJDKDir
parameter_list|()
block|{
name|File
name|javaHome
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|jdkDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|javaHome
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jdk"
argument_list|)
condition|)
block|{
name|jdkDirectory
operator|=
name|javaHome
expr_stmt|;
block|}
if|if
condition|(
name|jdkDirectory
operator|!=
literal|null
condition|)
block|{
return|return
name|jdkDirectory
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|getAllocatedPorts ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAllocatedPorts
parameter_list|()
block|{
return|return
name|getAllocatedPorts
argument_list|(
name|SHARED_PORT_TAG
argument_list|)
return|;
block|}
DECL|method|getComponentInstanceData ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getComponentInstanceData
parameter_list|()
block|{
return|return
name|this
operator|.
name|componentInstanceData
return|;
block|}
DECL|method|getAllocatedPorts (String containerId)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAllocatedPorts
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|allocatedPorts
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|allocatedPorts
init|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|allocatedPorts
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|this
operator|.
name|allocatedPorts
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
operator|.
name|allocatedPorts
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
DECL|method|buildCommandConfigurations ( ConfTreeOperations appConf, String containerId, String roleName, String roleGroup)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|buildCommandConfigurations
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|)
throws|throws
name|SliderException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
name|getStandardTokenMap
argument_list|(
name|appConf
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${CONTAINER_ID}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|configs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|getApplicationConfigurationTypes
argument_list|(
name|roleGroup
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|getSystemConfigurationsRequested
argument_list|(
name|appConf
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configType
range|:
name|configs
control|)
block|{
name|addNamedConfiguration
argument_list|(
name|configType
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|options
argument_list|,
name|configurations
argument_list|,
name|tokens
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
if|if
condition|(
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|addNamedConfiguration
argument_list|(
name|configType
argument_list|,
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|options
argument_list|,
name|configurations
argument_list|,
name|tokens
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
block|}
block|}
comment|//do a final replacement of re-used configs
name|dereferenceAllConfigs
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
return|return
name|configurations
return|;
block|}
DECL|method|dereferenceAllConfigs (Map<String, Map<String, String>> configurations)
specifier|protected
name|void
name|dereferenceAllConfigs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allConfigs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|lookupFormat
init|=
literal|"${@//site/%s/%s}"
decl_stmt|;
for|for
control|(
name|String
name|configType
range|:
name|configurations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configBucket
init|=
name|configurations
operator|.
name|get
argument_list|(
name|configType
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configName
range|:
name|configBucket
operator|.
name|keySet
argument_list|()
control|)
block|{
name|allConfigs
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|lookupFormat
argument_list|,
name|configType
argument_list|,
name|configName
argument_list|)
argument_list|,
name|configBucket
operator|.
name|get
argument_list|(
name|configName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|finished
condition|)
block|{
name|finished
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|allConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|configValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lookUpEntry
range|:
name|allConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|lookUpValue
init|=
name|lookUpEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|lookUpValue
operator|.
name|contains
argument_list|(
literal|"${@//site/"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|lookUpKey
init|=
name|lookUpEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|configValue
operator|!=
literal|null
operator|&&
name|configValue
operator|.
name|contains
argument_list|(
name|lookUpKey
argument_list|)
condition|)
block|{
name|configValue
operator|=
name|configValue
operator|.
name|replace
argument_list|(
name|lookUpKey
argument_list|,
name|lookUpValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|configValue
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|finished
operator|=
literal|false
expr_stmt|;
name|allConfigs
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|configValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|configType
range|:
name|configurations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configBucket
init|=
name|configurations
operator|.
name|get
argument_list|(
name|configType
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|configBucket
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|configName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|configValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lookUpEntry
range|:
name|allConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|lookUpValue
init|=
name|lookUpEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|lookUpValue
operator|.
name|contains
argument_list|(
literal|"${@//site/"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|lookUpKey
init|=
name|lookUpEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|configValue
operator|!=
literal|null
operator|&&
name|configValue
operator|.
name|contains
argument_list|(
name|lookUpKey
argument_list|)
condition|)
block|{
name|configValue
operator|=
name|configValue
operator|.
name|replace
argument_list|(
name|lookUpKey
argument_list|,
name|lookUpValue
argument_list|)
expr_stmt|;
block|}
block|}
name|configBucket
operator|.
name|put
argument_list|(
name|configName
argument_list|,
name|configValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getStandardTokenMap (ConfTreeOperations appConf, String componentName, String componentGroup)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStandardTokenMap
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|,
name|String
name|componentName
parameter_list|,
name|String
name|componentGroup
parameter_list|)
throws|throws
name|SliderException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|nnuri
init|=
name|appConf
operator|.
name|get
argument_list|(
literal|"site.fs.defaultFS"
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${NN_URI}"
argument_list|,
name|nnuri
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${NN_HOST}"
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|nnuri
argument_list|)
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${ZK_HOST}"
argument_list|,
name|appConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|ZOOKEEPER_HOSTS
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${DEFAULT_ZK_PATH}"
argument_list|,
name|appConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|ZOOKEEPER_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${DEFAULT_DATA_DIR}"
argument_list|,
name|getAmState
argument_list|()
operator|.
name|getInternalsSnapshot
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getMandatoryOption
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_DATA_DIR_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${JAVA_HOME}"
argument_list|,
name|appConf
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|JAVA_HOME
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_NAME}"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|componentName
operator|.
name|equals
argument_list|(
name|componentGroup
argument_list|)
operator|&&
name|componentName
operator|.
name|startsWith
argument_list|(
name|componentGroup
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_ID}"
argument_list|,
name|componentName
operator|.
name|substring
argument_list|(
name|componentGroup
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getSystemConfigurationsRequested (ConfTreeOperations appConf)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getSystemConfigurationsRequested
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|configList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|configTypes
init|=
name|appConf
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|SYSTEM_CONFIGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|configTypes
operator|!=
literal|null
operator|&&
name|configTypes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|configs
init|=
name|configTypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|config
range|:
name|configs
control|)
block|{
name|configList
operator|.
name|add
argument_list|(
name|config
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|configList
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getApplicationConfigurationTypes (String roleGroup)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getApplicationConfigurationTypes
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|configList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|configList
operator|.
name|add
argument_list|(
name|GLOBAL_CONFIG_TAG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
init|=
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getConfigFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|configFiles
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Expecting config type {}."
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
name|configList
operator|.
name|add
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Component
name|component
range|:
name|getMetaInfo
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|component
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|component
operator|.
name|getDockerContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|DockerContainer
name|container
range|:
name|component
operator|.
name|getDockerContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getConfigFiles
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|container
operator|.
name|getConfigFiles
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Expecting config type {}."
argument_list|,
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
name|configList
operator|.
name|add
argument_list|(
name|configFile
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove duplicates.  mostly worried about 'global' being listed
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|configList
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addNamedConfiguration (String configName, Map<String, String> sourceConfig, Map<String, Map<String, String>> configurations, Map<String, String> tokens, String containerId, String roleName)
specifier|private
name|void
name|addNamedConfiguration
parameter_list|(
name|String
name|configName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sourceConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|roleName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configName
operator|.
name|equals
argument_list|(
name|GLOBAL_CONFIG_TAG
argument_list|)
condition|)
block|{
name|addDefaultGlobalConfig
argument_list|(
name|config
argument_list|,
name|containerId
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
block|}
comment|// add role hosts to tokens
name|addRoleRelatedTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|providerUtils
operator|.
name|propagateSiteOptions
argument_list|(
name|sourceConfig
argument_list|,
name|config
argument_list|,
name|configName
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
comment|//apply any port updates
if|if
condition|(
operator|!
name|this
operator|.
name|getAllocatedPorts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|config
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|lookupKey
init|=
name|configName
operator|+
literal|"."
operator|+
name|key
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|contains
argument_list|(
name|PER_CONTAINER_TAG
argument_list|)
condition|)
block|{
comment|// If the config property is shared then pass on the already allocated value
comment|// from any container
if|if
condition|(
name|this
operator|.
name|getAllocatedPorts
argument_list|()
operator|.
name|containsKey
argument_list|(
name|lookupKey
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|getAllocatedPorts
argument_list|()
operator|.
name|get
argument_list|(
name|lookupKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|getAllocatedPorts
argument_list|(
name|containerId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|lookupKey
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|getAllocatedPorts
argument_list|(
name|containerId
argument_list|)
operator|.
name|get
argument_list|(
name|lookupKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//apply defaults only if the key is not present and value is not empty
if|if
condition|(
name|getDefaultConfigs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|configName
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Adding default configs for type {}."
argument_list|,
name|configName
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyInfo
name|defaultConfigProp
range|:
name|getDefaultConfigs
argument_list|()
operator|.
name|get
argument_list|(
name|configName
argument_list|)
operator|.
name|getPropertyInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
name|defaultConfigProp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|defaultConfigProp
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|defaultConfigProp
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|defaultConfigProp
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|defaultConfigProp
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultConfigProp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|configurations
operator|.
name|put
argument_list|(
name|configName
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|addRoleRelatedTokens (Map<String, String> tokens)
specifier|protected
name|void
name|addRoleRelatedTokens
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|getRoleClusterNodeMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tokenName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|+
literal|"_HOST"
decl_stmt|;
name|String
name|hosts
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|getHostsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${"
operator|+
name|tokenName
operator|+
literal|"}"
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHostsList (Collection<ClusterNode> values, boolean hostOnly)
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getHostsList
parameter_list|(
name|Collection
argument_list|<
name|ClusterNode
argument_list|>
name|values
parameter_list|,
name|boolean
name|hostOnly
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClusterNode
name|cn
range|:
name|values
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|hostOnly
condition|?
name|cn
operator|.
name|host
else|:
name|cn
operator|.
name|host
operator|+
literal|"/"
operator|+
name|cn
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|hosts
return|;
block|}
DECL|method|addDefaultGlobalConfig (Map<String, String> config, String containerId, String roleName)
specifier|private
name|void
name|addDefaultGlobalConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|roleName
parameter_list|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"app_log_dir"
argument_list|,
literal|"${AGENT_LOG_ROOT}"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_pid_dir"
argument_list|,
literal|"${AGENT_WORK_ROOT}/app/run"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_install_dir"
argument_list|,
literal|"${AGENT_WORK_ROOT}/app/install"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_conf_dir"
argument_list|,
literal|"${AGENT_WORK_ROOT}/"
operator|+
name|AgentKeys
operator|.
name|APP_CONF_DIR
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_input_conf_dir"
argument_list|,
literal|"${AGENT_WORK_ROOT}/"
operator|+
name|SliderKeys
operator|.
name|PROPAGATED_CONF_DIR_NAME
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_container_id"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_container_tag"
argument_list|,
name|tags
operator|.
name|getTag
argument_list|(
name|roleName
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// add optional parameters only if they are not already provided
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
literal|"pid_file"
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"pid_file"
argument_list|,
literal|"${AGENT_WORK_ROOT}/app/run/component.pid"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
literal|"app_root"
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"app_root"
argument_list|,
literal|"${AGENT_WORK_ROOT}/app/install"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildRoleHostDetails (Map<String, MonitorDetail> details)
specifier|private
name|void
name|buildRoleHostDetails
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MonitorDetail
argument_list|>
name|details
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|getRoleClusterNodeMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|details
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" Host(s)/Container(s)"
argument_list|,
operator|new
name|MonitorDetail
argument_list|(
name|getHostsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

