begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|YarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionTokensArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|CredentialUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TokensOperation
specifier|public
class|class
name|TokensOperation
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TokensOperation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|E_INSECURE
specifier|public
specifier|static
specifier|final
name|String
name|E_INSECURE
init|=
literal|"Cluster is not secure -tokens cannot be acquired"
decl_stmt|;
DECL|field|E_MISSING_SOURCE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|E_MISSING_SOURCE_FILE
init|=
literal|"Missing source file: "
decl_stmt|;
DECL|field|E_NO_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|E_NO_KEYTAB
init|=
literal|"No keytab: "
decl_stmt|;
DECL|method|actionTokens (ActionTokensArgs args, FileSystem fs, Configuration conf, YarnClientImpl yarnClient)
specifier|public
name|int
name|actionTokens
parameter_list|(
name|ActionTokensArgs
name|args
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|YarnClientImpl
name|yarnClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Credentials
name|credentials
decl_stmt|;
name|String
name|footnote
init|=
literal|""
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|boolean
name|isSecure
init|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|keytab
operator|!=
literal|null
condition|)
block|{
name|File
name|keytab
init|=
name|args
operator|.
name|keytab
decl_stmt|;
if|if
condition|(
operator|!
name|keytab
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|E_NO_KEYTAB
operator|+
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|principal
init|=
name|args
operator|.
name|principal
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Logging in as {} from keytab {}"
argument_list|,
name|principal
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|user
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
argument_list|,
name|keytab
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Credentials
name|userCredentials
init|=
name|user
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|File
name|output
init|=
name|args
operator|.
name|output
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isSecure
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|E_INSECURE
argument_list|)
throw|;
block|}
name|credentials
operator|=
operator|new
name|Credentials
argument_list|(
name|userCredentials
argument_list|)
expr_stmt|;
comment|// filesystem
name|addRMRenewableFSDelegationTokens
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|addRMDelegationToken
argument_list|(
name|yarnClient
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
if|if
condition|(
name|maybeAddTimelineToken
argument_list|(
name|conf
argument_list|,
name|credentials
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Added timeline token"
argument_list|)
expr_stmt|;
block|}
name|saveTokens
argument_list|(
name|output
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|output
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|footnote
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%d tokens saved to %s%n"
operator|+
literal|"To use these in the environment:%n"
operator|+
literal|"export %s=%s"
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|,
name|filename
argument_list|,
name|UserGroupInformation
operator|.
name|HADOOP_TOKEN_FILE_LOCATION
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|source
operator|!=
literal|null
condition|)
block|{
name|File
name|source
init|=
name|args
operator|.
name|source
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reading credentials from file {}"
argument_list|,
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|E_MISSING_SOURCE_FILE
operator|+
name|source
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|credentials
operator|=
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
name|args
operator|.
name|source
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|origin
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|locateEnvCredentials
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|,
name|conf
argument_list|,
name|origin
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Credential Source {}"
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Credential source: logged in user"
argument_list|)
expr_stmt|;
block|}
name|credentials
operator|=
name|userCredentials
expr_stmt|;
block|}
comment|// list the tokens
name|log
operator|.
name|info
argument_list|(
literal|"\n{}"
argument_list|,
name|dumpTokens
argument_list|(
name|credentials
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|footnote
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|footnote
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

