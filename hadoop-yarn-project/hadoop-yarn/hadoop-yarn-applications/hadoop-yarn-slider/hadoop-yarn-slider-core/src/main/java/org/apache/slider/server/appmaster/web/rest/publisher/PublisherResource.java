begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.rest.publisher
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|publisher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigurationOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedExports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedExportsSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|UriMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|AbstractSliderResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|RestPaths
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This publishes configuration sets  */
end_comment

begin_class
DECL|class|PublisherResource
specifier|public
class|class
name|PublisherResource
extends|extends
name|AbstractSliderResource
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PublisherResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXPORTS_NAME
specifier|public
specifier|static
specifier|final
name|String
name|EXPORTS_NAME
init|=
literal|"exports"
decl_stmt|;
DECL|field|EXPORTS_RESOURCES_PATH
specifier|public
specifier|static
specifier|final
name|String
name|EXPORTS_RESOURCES_PATH
init|=
literal|"/"
operator|+
name|EXPORTS_NAME
decl_stmt|;
DECL|field|EXPORT_RESOURCE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_RESOURCE_PATH
init|=
name|EXPORTS_RESOURCES_PATH
operator|+
literal|"/{exportname}"
decl_stmt|;
DECL|field|SET_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SET_NAME
init|=
literal|"{setname: "
operator|+
name|PUBLISHED_CONFIGURATION_SET_REGEXP
operator|+
literal|"}"
decl_stmt|;
DECL|field|SETNAME
specifier|public
specifier|static
specifier|final
name|String
name|SETNAME
init|=
literal|"setname"
decl_stmt|;
DECL|field|CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|CLASSPATH
init|=
literal|"/classpath"
decl_stmt|;
DECL|field|CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG
init|=
literal|"config"
decl_stmt|;
DECL|field|SETNAME_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|SETNAME_PATTERN
init|=
literal|"{"
operator|+
name|SETNAME
operator|+
literal|": "
operator|+
name|PUBLISHED_CONFIGURATION_SET_REGEXP
operator|+
literal|"}"
decl_stmt|;
DECL|field|CONFIG_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PATTERN
init|=
name|SETNAME_PATTERN
operator|+
literal|"/{"
operator|+
name|CONFIG
operator|+
literal|": "
operator|+
name|PUBLISHED_CONFIGURATION_REGEXP
operator|+
literal|"}"
decl_stmt|;
DECL|field|appState
specifier|private
specifier|final
name|StateAccessForProviders
name|appState
decl_stmt|;
DECL|method|PublisherResource (WebAppApi slider)
specifier|public
name|PublisherResource
parameter_list|(
name|WebAppApi
name|slider
parameter_list|)
block|{
name|super
argument_list|(
name|slider
argument_list|)
expr_stmt|;
name|appState
operator|=
name|slider
operator|.
name|getAppState
argument_list|()
expr_stmt|;
block|}
DECL|method|init (HttpServletResponse res, UriInfo uriInfo)
specifier|private
name|void
name|init
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|res
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a named config set     * @param setname name of the config set    * @return the config set    * @throws NotFoundException if there was no matching set    */
DECL|method|getConfigSet (String setname)
specifier|private
name|PublishedConfigSet
name|getConfigSet
parameter_list|(
name|String
name|setname
parameter_list|)
block|{
name|PublishedConfigSet
name|configSet
init|=
name|appState
operator|.
name|getPublishedConfigSet
argument_list|(
name|setname
argument_list|)
decl_stmt|;
if|if
condition|(
name|configSet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Not found: "
operator|+
name|setname
argument_list|)
throw|;
block|}
return|return
name|configSet
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|enumConfigSets ( @ontext UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|UriMap
name|enumConfigSets
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|,
name|uriInfo
argument_list|)
expr_stmt|;
name|String
name|baseURL
init|=
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseURL
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseURL
operator|+=
literal|"/"
expr_stmt|;
block|}
name|UriMap
name|uriMap
init|=
operator|new
name|UriMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|appState
operator|.
name|listConfigSets
argument_list|()
control|)
block|{
name|uriMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|baseURL
operator|+
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"registering config set {} at {}"
argument_list|,
name|name
argument_list|,
name|baseURL
argument_list|)
expr_stmt|;
block|}
name|uriMap
operator|.
name|put
argument_list|(
name|EXPORTS_NAME
argument_list|,
name|baseURL
operator|+
name|EXPORTS_NAME
argument_list|)
expr_stmt|;
return|return
name|uriMap
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|CLASSPATH
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getAMClassPath ()
specifier|public
name|Set
argument_list|<
name|URL
argument_list|>
name|getAMClassPath
parameter_list|()
block|{
name|URL
index|[]
name|urls
init|=
operator|(
operator|(
name|URLClassLoader
operator|)
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|)
operator|.
name|getURLs
argument_list|()
decl_stmt|;
return|return
operator|new
name|LinkedHashSet
argument_list|<
name|URL
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|urls
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|EXPORTS_RESOURCES_PATH
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|gePublishedExports ()
specifier|public
name|PublishedExportsSet
name|gePublishedExports
parameter_list|()
block|{
return|return
name|appState
operator|.
name|getPublishedExportsSet
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|EXPORT_RESOURCE_PATH
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getAMExports2 (@athParamR) String exportname, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|PublishedExports
name|getAMExports2
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"exportname"
argument_list|)
name|String
name|exportname
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|,
name|uriInfo
argument_list|)
expr_stmt|;
name|PublishedExportsSet
name|set
init|=
name|appState
operator|.
name|getPublishedExportsSet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|get
argument_list|(
name|exportname
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
operator|+
name|SETNAME_PATTERN
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getPublishedConfiguration ( @athParamSETNAME) String setname, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|PublishedConfigSet
name|getPublishedConfiguration
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|SETNAME
argument_list|)
name|String
name|setname
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|,
name|uriInfo
argument_list|)
expr_stmt|;
name|logRequest
argument_list|(
name|uriInfo
argument_list|)
expr_stmt|;
name|PublishedConfigSet
name|publishedConfigSet
init|=
name|getConfigSet
argument_list|(
name|setname
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Number of configurations: {}"
argument_list|,
name|publishedConfigSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|publishedConfigSet
operator|.
name|shallowCopy
argument_list|()
return|;
block|}
DECL|method|logRequest (UriInfo uriInfo)
specifier|private
name|void
name|logRequest
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
operator|+
name|CONFIG_PATTERN
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getConfigurationInstance ( @athParamSETNAME) String setname, @PathParam(CONFIG) String config, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|PublishedConfiguration
name|getConfigurationInstance
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|SETNAME
argument_list|)
name|String
name|setname
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|CONFIG
argument_list|)
name|String
name|config
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|,
name|uriInfo
argument_list|)
expr_stmt|;
name|PublishedConfiguration
name|publishedConfig
init|=
name|getPublishedConfiguration
argument_list|(
name|setname
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|publishedConfig
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Configuration {} not found"
argument_list|,
name|config
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Not found: "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|publishedConfig
return|;
block|}
comment|/**    * Get a configuration    * @param setname name of the config set    * @param config config    * @return null if there was a config, but not a set    * @throws NotFoundException if there was no matching set    */
DECL|method|getPublishedConfiguration (String setname, String config)
specifier|public
name|PublishedConfiguration
name|getPublishedConfiguration
parameter_list|(
name|String
name|setname
parameter_list|,
name|String
name|config
parameter_list|)
block|{
return|return
name|getConfigSet
argument_list|(
name|setname
argument_list|)
operator|.
name|get
argument_list|(
name|config
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
operator|+
name|CONFIG_PATTERN
operator|+
literal|".json"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getConfigurationContentJson ( @athParamSETNAME) String setname, @PathParam(CONFIG) String config, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|String
name|getConfigurationContentJson
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|SETNAME
argument_list|)
name|String
name|setname
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|CONFIG
argument_list|)
name|String
name|config
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getStringRepresentation
argument_list|(
name|setname
argument_list|,
name|config
argument_list|,
name|uriInfo
argument_list|,
name|res
argument_list|,
name|ConfigFormat
operator|.
name|JSON
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
operator|+
name|CONFIG_PATTERN
operator|+
literal|".xml"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getConfigurationContentXML ( @athParamSETNAME) String setname, @PathParam(CONFIG) String config, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|String
name|getConfigurationContentXML
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|SETNAME
argument_list|)
name|String
name|setname
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|CONFIG
argument_list|)
name|String
name|config
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getStringRepresentation
argument_list|(
name|setname
argument_list|,
name|config
argument_list|,
name|uriInfo
argument_list|,
name|res
argument_list|,
name|ConfigFormat
operator|.
name|XML
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
operator|+
name|CONFIG_PATTERN
operator|+
literal|".properties"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getConfigurationContentProperties ( @athParamSETNAME) String setname, @PathParam(CONFIG) String config, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|String
name|getConfigurationContentProperties
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|SETNAME
argument_list|)
name|String
name|setname
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|CONFIG
argument_list|)
name|String
name|config
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getStringRepresentation
argument_list|(
name|setname
argument_list|,
name|config
argument_list|,
name|uriInfo
argument_list|,
name|res
argument_list|,
name|ConfigFormat
operator|.
name|PROPERTIES
argument_list|)
return|;
block|}
DECL|method|getStringRepresentation (String setname, String config, UriInfo uriInfo, HttpServletResponse res, ConfigFormat format)
specifier|public
name|String
name|getStringRepresentation
parameter_list|(
name|String
name|setname
parameter_list|,
name|String
name|config
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|ConfigFormat
name|format
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delegate (including init)
name|PublishedConfiguration
name|publishedConfig
init|=
name|getConfigurationInstance
argument_list|(
name|setname
argument_list|,
name|config
argument_list|,
name|uriInfo
argument_list|,
name|res
argument_list|)
decl_stmt|;
name|PublishedConfigurationOutputter
name|outputter
init|=
name|publishedConfig
operator|.
name|createOutputter
argument_list|(
name|format
argument_list|)
decl_stmt|;
return|return
name|outputter
operator|.
name|asString
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
operator|+
name|CONFIG_PATTERN
operator|+
literal|"/{propertyName}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getConfigurationProperty ( @athParamSETNAME) String setname, @PathParam(CONFIG) String config, @PathParam(R) String propertyName, @Context UriInfo uriInfo, @Context HttpServletResponse res)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfigurationProperty
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|SETNAME
argument_list|)
name|String
name|setname
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|CONFIG
argument_list|)
name|String
name|config
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"propertyName"
argument_list|)
name|String
name|propertyName
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|PublishedConfiguration
name|publishedConfig
init|=
name|getConfigurationInstance
argument_list|(
name|setname
argument_list|,
name|config
argument_list|,
name|uriInfo
argument_list|,
name|res
argument_list|)
decl_stmt|;
name|String
name|propVal
init|=
name|publishedConfig
operator|.
name|entries
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propVal
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Configuration property {} not found in configuration {}"
argument_list|,
name|propertyName
argument_list|,
name|config
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Property not found: "
operator|+
name|propertyName
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rtnVal
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rtnVal
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|propVal
argument_list|)
expr_stmt|;
return|return
name|rtnVal
return|;
block|}
block|}
end_class

end_unit

