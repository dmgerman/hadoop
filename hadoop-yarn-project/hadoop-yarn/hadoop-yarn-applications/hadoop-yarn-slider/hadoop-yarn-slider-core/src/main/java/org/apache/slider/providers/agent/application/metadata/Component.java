begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Component defined in master package metainfo.json  */
end_comment

begin_class
DECL|class|Component
specifier|public
class|class
name|Component
extends|extends
name|AbstractComponent
block|{
DECL|field|category
name|String
name|category
init|=
name|CATEGORY_MASTER
decl_stmt|;
DECL|field|publishConfig
name|String
name|publishConfig
init|=
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|minInstanceCount
name|String
name|minInstanceCount
init|=
literal|"0"
decl_stmt|;
DECL|field|maxInstanceCount
name|String
name|maxInstanceCount
decl_stmt|;
DECL|field|autoStartOnFailure
name|String
name|autoStartOnFailure
init|=
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|appExports
name|String
name|appExports
decl_stmt|;
DECL|field|compExports
name|String
name|compExports
decl_stmt|;
DECL|field|type
name|String
name|type
init|=
name|TYPE_STANDARD
decl_stmt|;
DECL|field|componentExports
name|List
argument_list|<
name|ComponentExport
argument_list|>
name|componentExports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|dockerContainers
name|List
argument_list|<
name|DockerContainer
argument_list|>
name|dockerContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|configFiles
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Component ()
specifier|public
name|Component
parameter_list|()
block|{   }
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (String type)
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getCategory ()
specifier|public
name|String
name|getCategory
parameter_list|()
block|{
return|return
name|category
return|;
block|}
DECL|method|setCategory (String category)
specifier|public
name|void
name|setCategory
parameter_list|(
name|String
name|category
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
block|}
DECL|method|getPublishConfig ()
specifier|public
name|String
name|getPublishConfig
parameter_list|()
block|{
return|return
name|publishConfig
return|;
block|}
DECL|method|setPublishConfig (String publishConfig)
specifier|public
name|void
name|setPublishConfig
parameter_list|(
name|String
name|publishConfig
parameter_list|)
block|{
name|this
operator|.
name|publishConfig
operator|=
name|publishConfig
expr_stmt|;
block|}
DECL|method|getAutoStartOnFailure ()
specifier|public
name|String
name|getAutoStartOnFailure
parameter_list|()
block|{
return|return
name|autoStartOnFailure
return|;
block|}
DECL|method|setAutoStartOnFailure (String autoStartOnFailure)
specifier|public
name|void
name|setAutoStartOnFailure
parameter_list|(
name|String
name|autoStartOnFailure
parameter_list|)
block|{
name|this
operator|.
name|autoStartOnFailure
operator|=
name|autoStartOnFailure
expr_stmt|;
block|}
DECL|method|getAppExports ()
specifier|public
name|String
name|getAppExports
parameter_list|()
block|{
return|return
name|appExports
return|;
block|}
DECL|method|setAppExports (String appExports)
specifier|public
name|void
name|setAppExports
parameter_list|(
name|String
name|appExports
parameter_list|)
block|{
name|this
operator|.
name|appExports
operator|=
name|appExports
expr_stmt|;
block|}
DECL|method|getCompExports ()
specifier|public
name|String
name|getCompExports
parameter_list|()
block|{
return|return
name|compExports
return|;
block|}
DECL|method|setCompExports (String compExports)
specifier|public
name|void
name|setCompExports
parameter_list|(
name|String
name|compExports
parameter_list|)
block|{
name|this
operator|.
name|compExports
operator|=
name|compExports
expr_stmt|;
block|}
DECL|method|getMinInstanceCount ()
specifier|public
name|String
name|getMinInstanceCount
parameter_list|()
block|{
return|return
name|minInstanceCount
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"dockerContainers"
argument_list|)
DECL|method|getDockerContainers ()
specifier|public
name|List
argument_list|<
name|DockerContainer
argument_list|>
name|getDockerContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|dockerContainers
return|;
block|}
DECL|method|getAutoStartOnFailureBoolean ()
specifier|public
name|Boolean
name|getAutoStartOnFailureBoolean
parameter_list|()
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|getAutoStartOnFailure
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getAutoStartOnFailure
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getMinInstanceCountInt ()
specifier|public
name|int
name|getMinInstanceCountInt
parameter_list|()
throws|throws
name|BadConfigException
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|minInstanceCount
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|minInstanceCount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
name|nfe
argument_list|,
literal|"Invalid value for minInstanceCount for %s"
argument_list|,
name|name
argument_list|)
throw|;
block|}
block|}
DECL|method|getMaxInstanceCountInt ()
specifier|public
name|int
name|getMaxInstanceCountInt
parameter_list|()
throws|throws
name|BadConfigException
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|maxInstanceCount
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxInstanceCount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
name|nfe
argument_list|,
literal|"Invalid value for maxInstanceCount for %s"
argument_list|,
name|name
argument_list|)
throw|;
block|}
block|}
DECL|method|setMinInstanceCount (String minInstanceCount)
specifier|public
name|void
name|setMinInstanceCount
parameter_list|(
name|String
name|minInstanceCount
parameter_list|)
block|{
name|this
operator|.
name|minInstanceCount
operator|=
name|minInstanceCount
expr_stmt|;
block|}
DECL|method|getMaxInstanceCount ()
specifier|public
name|String
name|getMaxInstanceCount
parameter_list|()
block|{
return|return
name|maxInstanceCount
return|;
block|}
DECL|method|setMaxInstanceCount (String maxInstanceCount)
specifier|public
name|void
name|setMaxInstanceCount
parameter_list|(
name|String
name|maxInstanceCount
parameter_list|)
block|{
name|this
operator|.
name|maxInstanceCount
operator|=
name|maxInstanceCount
expr_stmt|;
block|}
DECL|method|addComponentExport (ComponentExport export)
specifier|public
name|void
name|addComponentExport
parameter_list|(
name|ComponentExport
name|export
parameter_list|)
block|{
name|componentExports
operator|.
name|add
argument_list|(
name|export
argument_list|)
expr_stmt|;
block|}
DECL|method|getComponentExports ()
specifier|public
name|List
argument_list|<
name|ComponentExport
argument_list|>
name|getComponentExports
parameter_list|()
block|{
return|return
name|componentExports
return|;
block|}
DECL|method|getRequiresAutoRestart ()
specifier|public
name|Boolean
name|getRequiresAutoRestart
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|this
operator|.
name|autoStartOnFailure
argument_list|)
return|;
block|}
DECL|method|addConfigFile (ConfigFile configFile)
specifier|public
name|void
name|addConfigFile
parameter_list|(
name|ConfigFile
name|configFile
parameter_list|)
block|{
name|this
operator|.
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"configFiles"
argument_list|)
DECL|method|getConfigFiles ()
specifier|public
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|getConfigFiles
parameter_list|()
block|{
return|return
name|configFiles
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\"name\": "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"category\": "
argument_list|)
operator|.
name|append
argument_list|(
name|category
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"commandScript\" :"
argument_list|)
operator|.
name|append
argument_list|(
name|commandScript
argument_list|)
expr_stmt|;
for|for
control|(
name|DockerContainer
name|dc
range|:
name|dockerContainers
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"container\" :"
argument_list|)
operator|.
name|append
argument_list|(
name|dc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate (String version)
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|version
parameter_list|)
throws|throws
name|SliderException
block|{
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|"name"
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getCategory
argument_list|()
argument_list|,
literal|"category"
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|CATEGORY_MASTER
argument_list|)
operator|&&
operator|!
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|CATEGORY_SLAVE
argument_list|)
operator|&&
operator|!
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|CATEGORY_CLIENT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Invalid category for the component "
operator|+
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getType
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TYPE_DOCKER
argument_list|)
operator|&&
operator|!
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TYPE_STANDARD
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Invalid type for the component "
operator|+
name|getType
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|Metainfo
operator|.
name|VERSION_TWO_ZERO
argument_list|)
condition|)
block|{
if|if
condition|(
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TYPE_DOCKER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|TYPE_DOCKER
operator|+
literal|" is not supported in version "
operator|+
name|Metainfo
operator|.
name|VERSION_TWO_ZERO
argument_list|)
throw|;
block|}
if|if
condition|(
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"commands are not supported in version "
operator|+
name|Metainfo
operator|.
name|VERSION_TWO_ZERO
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|commandScript
operator|!=
literal|null
condition|)
block|{
name|commandScript
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|Metainfo
operator|.
name|VERSION_TWO_ONE
argument_list|)
condition|)
block|{
for|for
control|(
name|ComponentCommand
name|cc
range|:
name|getCommands
argument_list|()
control|)
block|{
name|cc
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

