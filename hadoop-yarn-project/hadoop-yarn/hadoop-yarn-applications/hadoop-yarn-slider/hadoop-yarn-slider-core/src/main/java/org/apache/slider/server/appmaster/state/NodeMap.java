begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Node map map -and methods to work with it.   * Not Synchronized: caller is expected to lock access.  */
end_comment

begin_class
DECL|class|NodeMap
specifier|public
class|class
name|NodeMap
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeInstance
argument_list|>
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * number of roles    */
DECL|field|roleSize
specifier|private
specifier|final
name|int
name|roleSize
decl_stmt|;
comment|/**    * Construct    * @param roleSize number of roles    */
DECL|method|NodeMap (int roleSize)
specifier|public
name|NodeMap
parameter_list|(
name|int
name|roleSize
parameter_list|)
block|{
name|this
operator|.
name|roleSize
operator|=
name|roleSize
expr_stmt|;
block|}
comment|/**    * Get the node instance for the specific node -creating it if needed    * @param hostname node    * @return the instance    */
DECL|method|getOrCreate (String hostname)
specifier|public
name|NodeInstance
name|getOrCreate
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|NodeInstance
name|node
init|=
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|NodeInstance
argument_list|(
name|hostname
argument_list|,
name|roleSize
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|hostname
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|/**    * List the active nodes    * @param role role    * @return a possibly empty sorted list of all nodes that are active    * in that role    */
DECL|method|listActiveNodes (int role)
specifier|public
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|listActiveNodes
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeInstance
name|instance
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|getActiveRoleInstances
argument_list|(
name|role
argument_list|)
operator|>
literal|0
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|NodeInstance
operator|.
name|MoreActiveThan
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
comment|/**    * reset the failed recently counters    */
DECL|method|resetFailedRecently ()
specifier|public
name|void
name|resetFailedRecently
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeInstance
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
name|NodeInstance
name|ni
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ni
operator|.
name|resetFailedRecently
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Update the node state. Return true if the node state changed: either by    * being created, or by changing its internal state as defined    * by {@link NodeInstance#updateNode(NodeReport)}.    *    * @param hostname host name    * @param report latest node report    * @return true if the node state changed enough for a request evaluation.    */
DECL|method|updateNode (String hostname, NodeReport report)
specifier|public
name|boolean
name|updateNode
parameter_list|(
name|String
name|hostname
parameter_list|,
name|NodeReport
name|report
parameter_list|)
block|{
name|boolean
name|nodeExisted
init|=
name|get
argument_list|(
name|hostname
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|updated
init|=
name|getOrCreate
argument_list|(
name|hostname
argument_list|)
operator|.
name|updateNode
argument_list|(
name|report
argument_list|)
decl_stmt|;
return|return
name|updated
operator|||
operator|!
name|nodeExisted
return|;
block|}
comment|/**    * Clone point    * @return a shallow clone    */
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**    * Insert a list of nodes into the map; overwrite any with that name    * This is a bulk operation for testing.    * @param nodes collection of nodes.    */
annotation|@
name|VisibleForTesting
DECL|method|insert (Collection<NodeInstance> nodes)
specifier|public
name|void
name|insert
parameter_list|(
name|Collection
argument_list|<
name|NodeInstance
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|NodeInstance
name|node
range|:
name|nodes
control|)
block|{
name|put
argument_list|(
name|node
operator|.
name|hostname
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test helper: build or update a cluster from a list of node reports    * @param reports the list of reports    * @return true if this has been considered to have changed the cluster    */
annotation|@
name|VisibleForTesting
DECL|method|buildOrUpdate (List<NodeReport> reports)
specifier|public
name|boolean
name|buildOrUpdate
parameter_list|(
name|List
argument_list|<
name|NodeReport
argument_list|>
name|reports
parameter_list|)
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|NodeReport
name|report
range|:
name|reports
control|)
block|{
name|updated
operator||=
name|getOrCreate
argument_list|(
name|report
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|updateNode
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
comment|/**    * Scan the current node map for all nodes capable of hosting an instance    * @param role role ID    * @param label label which must match, or "" for no label checks    * @return a possibly empty list of node instances matching the criteria.    */
DECL|method|findAllNodesForRole (int role, String label)
specifier|public
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|findAllNodesForRole
parameter_list|(
name|int
name|role
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeInstance
name|instance
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|canHost
argument_list|(
name|role
argument_list|,
name|label
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|NodeInstance
operator|.
name|CompareNames
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"NodeMap{"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toFullString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

