begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_class
DECL|class|ApplicationPackage
specifier|public
class|class
name|ApplicationPackage
extends|extends
name|AbstractMetainfoSchema
block|{
DECL|field|components
specifier|private
name|List
argument_list|<
name|ComponentsInAddonPackage
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|ComponentsInAddonPackage
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addComponent (ComponentsInAddonPackage component)
specifier|public
name|void
name|addComponent
parameter_list|(
name|ComponentsInAddonPackage
name|component
parameter_list|)
block|{
name|components
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
comment|// we must override getcomponent() as well. otherwise it is pointing to the
comment|// overriden components of type List<Component>
DECL|method|getComponents ()
specifier|public
name|List
argument_list|<
name|ComponentsInAddonPackage
argument_list|>
name|getComponents
parameter_list|()
block|{
return|return
name|this
operator|.
name|components
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\"name\": "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"comment\": "
argument_list|)
operator|.
name|append
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"version\" :"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"components\" : {"
argument_list|)
expr_stmt|;
for|for
control|(
name|ComponentsInAddonPackage
name|component
range|:
name|components
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n},"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validate (String version)
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|version
parameter_list|)
throws|throws
name|SliderException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Missing name in metainfo.json for add on packages"
argument_list|)
throw|;
block|}
if|if
condition|(
name|components
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Missing components in metainfo.json for add on packages"
argument_list|)
throw|;
block|}
for|for
control|(
name|ComponentsInAddonPackage
name|component
range|:
name|components
control|)
block|{
if|if
condition|(
name|component
operator|.
name|name
operator|==
literal|null
operator|||
name|component
operator|.
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Missing name of components in metainfo.json for add on packages"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

