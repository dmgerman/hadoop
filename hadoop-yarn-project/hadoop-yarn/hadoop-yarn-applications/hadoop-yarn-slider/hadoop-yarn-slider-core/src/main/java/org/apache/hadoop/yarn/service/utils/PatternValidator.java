begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Utility class to validate strings against a predefined pattern.  */
end_comment

begin_class
DECL|class|PatternValidator
specifier|public
class|class
name|PatternValidator
block|{
DECL|field|E_INVALID_NAME
specifier|public
specifier|static
specifier|final
name|String
name|E_INVALID_NAME
init|=
literal|"Invalid name %s does not match the pattern pattern %s "
decl_stmt|;
DECL|field|valid
specifier|private
specifier|final
name|Pattern
name|valid
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
DECL|method|PatternValidator (String pattern)
specifier|public
name|PatternValidator
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|valid
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate the name -restricting it to the set defined in     * @param name name to validate    * @throws IllegalArgumentException if not a valid name    */
DECL|method|validate (String name)
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|matches
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_INVALID_NAME
argument_list|,
name|name
argument_list|,
name|pattern
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Query to see if the pattern matches    * @param name name to validate    * @return true if the string matches the pattern    */
DECL|method|matches (String name)
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|valid
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
end_class

end_unit

