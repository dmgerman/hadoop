begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** This class implements a simple state machine for component instances. */
end_comment

begin_class
DECL|class|ComponentInstanceState
specifier|public
class|class
name|ComponentInstanceState
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ComponentInstanceState
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_FAILURE_TOLERATED
specifier|private
specifier|static
name|int
name|MAX_FAILURE_TOLERATED
init|=
literal|3
decl_stmt|;
DECL|field|INVALID_TRANSITION_ERROR
specifier|private
specifier|static
name|String
name|INVALID_TRANSITION_ERROR
init|=
literal|"Result %s for command %s is not expected for component %s in state %s."
decl_stmt|;
DECL|field|componentName
specifier|private
specifier|final
name|String
name|componentName
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|containerIdAsString
specifier|private
specifier|final
name|String
name|containerIdAsString
decl_stmt|;
DECL|field|applicationId
specifier|private
specifier|final
name|String
name|applicationId
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|INIT
decl_stmt|;
DECL|field|targetState
specifier|private
name|State
name|targetState
init|=
name|State
operator|.
name|STARTED
decl_stmt|;
DECL|field|failuresSeen
specifier|private
name|int
name|failuresSeen
init|=
literal|0
decl_stmt|;
DECL|field|configReported
specifier|private
name|Boolean
name|configReported
init|=
literal|false
decl_stmt|;
DECL|field|lastHeartbeat
specifier|private
name|long
name|lastHeartbeat
init|=
literal|0
decl_stmt|;
DECL|field|ip
specifier|private
name|String
name|ip
decl_stmt|;
DECL|field|hostname
specifier|private
name|String
name|hostname
decl_stmt|;
DECL|field|containerState
specifier|private
name|ContainerState
name|containerState
decl_stmt|;
DECL|field|pkgStatuses
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
name|pkgStatuses
decl_stmt|;
DECL|field|nextPkgToInstall
specifier|private
name|String
name|nextPkgToInstall
decl_stmt|;
DECL|field|stopInitiated
specifier|private
name|boolean
name|stopInitiated
decl_stmt|;
DECL|method|ComponentInstanceState (String componentName, ContainerId containerId, String applicationId)
specifier|public
name|ComponentInstanceState
parameter_list|(
name|String
name|componentName
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|applicationId
parameter_list|)
block|{
name|this
argument_list|(
name|componentName
argument_list|,
name|containerId
argument_list|,
name|applicationId
argument_list|,
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ComponentInstanceState (String componentName, ContainerId containerId, String applicationId, Map<String, State> pkgStatuses)
specifier|public
name|ComponentInstanceState
parameter_list|(
name|String
name|componentName
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|applicationId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
name|pkgStatuses
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|containerIdAsString
operator|=
name|containerId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
name|this
operator|.
name|containerState
operator|=
name|ContainerState
operator|.
name|INIT
expr_stmt|;
name|this
operator|.
name|lastHeartbeat
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|pkgStatuses
operator|=
name|pkgStatuses
expr_stmt|;
block|}
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
DECL|method|getConfigReported ()
specifier|public
name|Boolean
name|getConfigReported
parameter_list|()
block|{
return|return
name|configReported
return|;
block|}
DECL|method|setConfigReported (Boolean configReported)
specifier|public
name|void
name|setConfigReported
parameter_list|(
name|Boolean
name|configReported
parameter_list|)
block|{
name|this
operator|.
name|configReported
operator|=
name|configReported
expr_stmt|;
block|}
DECL|method|getContainerState ()
specifier|public
name|ContainerState
name|getContainerState
parameter_list|()
block|{
return|return
name|containerState
return|;
block|}
DECL|method|setContainerState (ContainerState containerState)
specifier|public
name|void
name|setContainerState
parameter_list|(
name|ContainerState
name|containerState
parameter_list|)
block|{
name|this
operator|.
name|containerState
operator|=
name|containerState
expr_stmt|;
block|}
DECL|method|getLastHeartbeat ()
specifier|public
name|long
name|getLastHeartbeat
parameter_list|()
block|{
return|return
name|lastHeartbeat
return|;
block|}
comment|/**    * Update the heartbeat, and change container state    * to mark as healthy if appropriate    * @param heartbeatTime last time the heartbeat was seen    * @return the current container state    */
DECL|method|heartbeat (long heartbeatTime)
specifier|public
name|ContainerState
name|heartbeat
parameter_list|(
name|long
name|heartbeatTime
parameter_list|)
block|{
name|this
operator|.
name|lastHeartbeat
operator|=
name|heartbeatTime
expr_stmt|;
if|if
condition|(
name|containerState
operator|==
name|ContainerState
operator|.
name|UNHEALTHY
operator|||
name|containerState
operator|==
name|ContainerState
operator|.
name|INIT
condition|)
block|{
name|containerState
operator|=
name|ContainerState
operator|.
name|HEALTHY
expr_stmt|;
block|}
return|return
name|containerState
return|;
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|commandIssued (Command command)
specifier|public
name|void
name|commandIssued
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|commandIssued
argument_list|(
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|commandIssued (Command command, boolean isInUpgradeMode)
specifier|public
name|void
name|commandIssued
parameter_list|(
name|Command
name|command
parameter_list|,
name|boolean
name|isInUpgradeMode
parameter_list|)
block|{
name|Command
name|expected
init|=
name|getNextCommand
argument_list|(
name|isInUpgradeMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
name|command
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Command "
operator|+
name|command
operator|+
literal|" is not allowed in state "
operator|+
name|state
argument_list|)
throw|;
block|}
if|if
condition|(
name|expected
operator|==
name|Command
operator|.
name|INSTALL_ADDON
condition|)
block|{
comment|// for add on packages, the pkg must be nextPkgToInstall
name|State
name|currentState
init|=
name|pkgStatuses
operator|.
name|get
argument_list|(
name|nextPkgToInstall
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Command issued: component: {} is in {}"
argument_list|,
name|componentName
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
name|State
name|nextState
init|=
name|currentState
operator|.
name|getNextState
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|pkgStatuses
operator|.
name|put
argument_list|(
name|nextPkgToInstall
argument_list|,
name|nextState
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Command issued: component: {} is now in {}"
argument_list|,
name|componentName
argument_list|,
name|nextState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for master package
name|state
operator|=
name|state
operator|.
name|getNextState
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyCommandResult (CommandResult result, Command command, String pkg)
specifier|public
name|void
name|applyCommandResult
parameter_list|(
name|CommandResult
name|result
parameter_list|,
name|Command
name|command
parameter_list|,
name|String
name|pkg
parameter_list|)
block|{
comment|// if the heartbeat is for a package
comment|// update that package's state in the component status
comment|// and don't bother with the master pkg
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|pkg
argument_list|)
operator|&&
operator|!
name|Component
operator|.
name|MASTER_PACKAGE_NAME
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"This result is for component: {} pkg: {}"
argument_list|,
name|componentName
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
name|State
name|previousPkgState
init|=
name|pkgStatuses
operator|.
name|get
argument_list|(
name|pkg
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Currently component: {} pkg: {} is in state: {}"
argument_list|,
name|componentName
argument_list|,
name|pkg
argument_list|,
name|previousPkgState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|State
name|nextPkgState
init|=
name|previousPkgState
operator|.
name|getNextState
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|pkgStatuses
operator|.
name|put
argument_list|(
name|pkg
argument_list|,
name|nextPkgState
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Component: {} pkg: {} next state: {}"
argument_list|,
name|componentName
argument_list|,
name|pkg
argument_list|,
name|nextPkgState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"This result is for component: {} master package"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|applyCommandResult
argument_list|(
name|result
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyCommandResult (CommandResult result, Command command)
specifier|public
name|void
name|applyCommandResult
parameter_list|(
name|CommandResult
name|result
parameter_list|,
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|state
operator|.
name|couldHaveIssued
argument_list|(
name|command
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid command "
operator|+
name|command
operator|+
literal|" for state "
operator|+
name|this
operator|.
name|state
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|result
operator|==
name|CommandResult
operator|.
name|FAILED
condition|)
block|{
name|failuresSeen
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|==
name|CommandResult
operator|.
name|COMPLETED
condition|)
block|{
name|failuresSeen
operator|=
literal|0
expr_stmt|;
block|}
name|state
operator|=
name|state
operator|.
name|getNextState
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|INVALID_TRANSITION_ERROR
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|,
name|componentName
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
DECL|method|hasPendingCommand ()
specifier|public
name|boolean
name|hasPendingCommand
parameter_list|()
block|{
if|if
condition|(
name|state
operator|.
name|canIssueCommands
argument_list|()
operator|&&
name|state
operator|!=
name|targetState
operator|&&
name|failuresSeen
operator|<
name|MAX_FAILURE_TOLERATED
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getNextCommand ()
specifier|public
name|Command
name|getNextCommand
parameter_list|()
block|{
return|return
name|getNextCommand
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|getNextCommand (boolean isInUpgradeMode)
specifier|public
name|Command
name|getNextCommand
parameter_list|(
name|boolean
name|isInUpgradeMode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasPendingCommand
argument_list|()
condition|)
block|{
name|nextPkgToInstall
operator|=
literal|null
expr_stmt|;
return|return
name|Command
operator|.
name|NOP
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"In getNextCommand, checking for component: {} "
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
comment|// if the master pkg is just installed, check if any add on pkg need to be
comment|// installed
name|nextPkgToInstall
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|INSTALLED
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
name|pkgStatus
range|:
name|pkgStatuses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pkg
init|=
name|pkgStatus
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|State
name|pkgState
init|=
name|pkgStatus
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"In getNextCommand, pkg: {} is in {}"
argument_list|,
name|pkg
argument_list|,
name|pkgState
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkgState
operator|==
name|State
operator|.
name|INSTALLING
condition|)
block|{
comment|// first check if any pkg is install in progress, if so, wait
comment|// so we don't need to do anything, just return NOP
name|log
operator|.
name|debug
argument_list|(
literal|"In getNextCommand, pkg: {} we are issuing NOP"
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
name|nextPkgToInstall
operator|=
name|pkg
expr_stmt|;
return|return
name|Command
operator|.
name|NOP
return|;
block|}
elseif|else
if|if
condition|(
name|pkgState
operator|==
name|State
operator|.
name|INIT
condition|)
block|{
comment|// temporarily storing pkg here
comment|// in case no pkg in 'installing' state
comment|// will return the package to install
name|nextPkgToInstall
operator|=
name|pkg
expr_stmt|;
block|}
block|}
comment|// when we reach here, no pkg is in 'installing' state
if|if
condition|(
name|nextPkgToInstall
operator|!=
literal|null
condition|)
block|{
comment|// nextPkgToInstall != null means some pkg is in INIT state
comment|// issue 'install' to the pkg we have stored in nextPkgToInstall
name|log
operator|.
name|debug
argument_list|(
literal|"In getNextCommand, pkg: {} we are issuing install addon"
argument_list|,
name|nextPkgToInstall
argument_list|)
expr_stmt|;
return|return
name|Command
operator|.
name|INSTALL_ADDON
return|;
block|}
block|}
return|return
name|this
operator|.
name|state
operator|.
name|getSupportedCommand
argument_list|(
name|isInUpgradeMode
argument_list|,
name|stopInitiated
argument_list|)
return|;
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setState (State state)
specifier|protected
name|void
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|getTargetState ()
specifier|public
name|State
name|getTargetState
parameter_list|()
block|{
return|return
name|targetState
return|;
block|}
DECL|method|setTargetState (State targetState)
specifier|public
name|void
name|setTargetState
parameter_list|(
name|State
name|targetState
parameter_list|)
block|{
name|this
operator|.
name|targetState
operator|=
name|targetState
expr_stmt|;
block|}
DECL|method|getNextPkgToInstall ()
specifier|public
name|String
name|getNextPkgToInstall
parameter_list|()
block|{
return|return
name|nextPkgToInstall
return|;
block|}
DECL|method|isStopInitiated ()
specifier|public
name|boolean
name|isStopInitiated
parameter_list|()
block|{
return|return
name|stopInitiated
return|;
block|}
DECL|method|setStopInitiated (boolean stopInitiated)
specifier|public
name|void
name|setStopInitiated
parameter_list|(
name|boolean
name|stopInitiated
parameter_list|)
block|{
name|this
operator|.
name|stopInitiated
operator|=
name|stopInitiated
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|^
operator|(
name|componentName
operator|!=
literal|null
condition|?
name|componentName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|^
operator|(
name|containerIdAsString
operator|!=
literal|null
condition|?
name|containerIdAsString
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|^
operator|(
name|applicationId
operator|!=
literal|null
condition|?
name|applicationId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ComponentInstanceState
name|that
init|=
operator|(
name|ComponentInstanceState
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|componentName
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|componentName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|componentName
argument_list|)
else|:
name|this
operator|.
name|componentName
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|containerIdAsString
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|containerIdAsString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|containerIdAsString
argument_list|)
else|:
name|this
operator|.
name|containerIdAsString
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|applicationId
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|applicationId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|applicationId
argument_list|)
else|:
name|this
operator|.
name|applicationId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ComponentInstanceState{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"containerIdAsString='"
argument_list|)
operator|.
name|append
argument_list|(
name|containerIdAsString
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", state="
argument_list|)
operator|.
name|append
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failuresSeen="
argument_list|)
operator|.
name|append
argument_list|(
name|failuresSeen
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", lastHeartbeat="
argument_list|)
operator|.
name|append
argument_list|(
name|lastHeartbeat
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", containerState="
argument_list|)
operator|.
name|append
argument_list|(
name|containerState
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", componentName='"
argument_list|)
operator|.
name|append
argument_list|(
name|componentName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ip="
argument_list|)
operator|.
name|append
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", hostname='"
argument_list|)
operator|.
name|append
argument_list|(
name|hostname
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getIp ()
specifier|public
name|String
name|getIp
parameter_list|()
block|{
return|return
name|ip
return|;
block|}
DECL|method|setIp (String ip)
specifier|public
name|void
name|setIp
parameter_list|(
name|String
name|ip
parameter_list|)
block|{
name|this
operator|.
name|ip
operator|=
name|ip
expr_stmt|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
DECL|method|setHostname (String hostname)
specifier|public
name|void
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
block|}
end_class

end_unit

