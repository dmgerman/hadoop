begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.util
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_class
DECL|class|ServiceApiUtil
specifier|public
class|class
name|ServiceApiUtil
block|{
annotation|@
name|VisibleForTesting
DECL|method|validateApplicationPostPayload (Application application)
specifier|public
specifier|static
name|void
name|validateApplicationPostPayload
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_APPLICATION_NAME_INVALID
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isClusternameValid
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_APPLICATION_NAME_INVALID_FORMAT
argument_list|)
throw|;
block|}
comment|// If the application has no components do top-level checks
if|if
condition|(
operator|!
name|hasComponent
argument_list|(
name|application
argument_list|)
condition|)
block|{
comment|// artifact
if|if
condition|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ARTIFACT_INVALID
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ARTIFACT_ID_INVALID
argument_list|)
throw|;
block|}
comment|// If artifact is of type APPLICATION, add a slider specific property
if|if
condition|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
if|if
condition|(
name|application
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// resource
name|validateApplicationResource
argument_list|(
name|application
operator|.
name|getResource
argument_list|()
argument_list|,
literal|null
argument_list|,
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// container size
if|if
condition|(
name|application
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_CONTAINERS_COUNT_INVALID
argument_list|)
throw|;
block|}
comment|// Since it is a simple app with no components, create a default component
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|createDefaultComponent
argument_list|(
name|application
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the application has components, then run checks for each component.
comment|// Let global values take effect if component level values are not
comment|// provided.
name|Artifact
name|globalArtifact
init|=
name|application
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|Resource
name|globalResource
init|=
name|application
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Long
name|globalNumberOfContainers
init|=
name|application
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
comment|// artifact
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setArtifact
argument_list|(
name|globalArtifact
argument_list|)
expr_stmt|;
block|}
comment|// If still null raise validation exception
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ARTIFACT_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ARTIFACT_ID_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// If artifact is of type APPLICATION, add a slider specific property
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|comp
operator|.
name|setName
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// resource
if|if
condition|(
name|comp
operator|.
name|getResource
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setResource
argument_list|(
name|globalResource
argument_list|)
expr_stmt|;
block|}
name|validateApplicationResource
argument_list|(
name|comp
operator|.
name|getResource
argument_list|()
argument_list|,
name|comp
argument_list|,
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// container count
if|if
condition|(
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
name|globalNumberOfContainers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Application lifetime if not specified, is set to unlimited lifetime
if|if
condition|(
name|application
operator|.
name|getLifetime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setLifetime
argument_list|(
name|RestApiConstants
operator|.
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateApplicationResource (Resource resource, Component comp, Artifact.TypeEnum artifactType)
specifier|private
specifier|static
name|void
name|validateApplicationResource
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Component
name|comp
parameter_list|,
name|Artifact
operator|.
name|TypeEnum
name|artifactType
parameter_list|)
block|{
comment|// Only apps/components of type APPLICATION can skip resource requirement
if|if
condition|(
name|resource
operator|==
literal|null
operator|&&
name|artifactType
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// One and only one of profile OR cpus& memory can be specified. Specifying
comment|// both raises validation error.
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
operator|&&
operator|(
name|resource
operator|.
name|getCpus
argument_list|()
operator|!=
literal|null
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_NOT_SUPPORTED
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_FOR_COMP_NOT_SUPPORTED
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Currently resource profile is not supported yet, so we will raise
comment|// validation error if only resource profile is specified
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET
argument_list|)
throw|;
block|}
name|String
name|memory
init|=
name|resource
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|Integer
name|cpus
init|=
name|resource
operator|.
name|getCpus
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|memory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_MEMORY_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_MEMORY_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpus
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_INVALID_RANGE
else|:
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID_RANGE
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|hasComponent (Application application)
specifier|public
specifier|static
name|boolean
name|hasComponent
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
if|if
condition|(
name|application
operator|.
name|getComponents
argument_list|()
operator|==
literal|null
operator|||
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createDefaultComponent (Application app)
specifier|public
specifier|static
name|Component
name|createDefaultComponent
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
name|Component
name|comp
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setName
argument_list|(
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setArtifact
argument_list|(
name|app
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setResource
argument_list|(
name|app
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
name|app
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setLaunchCommand
argument_list|(
name|app
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|comp
return|;
block|}
block|}
end_class

end_unit

