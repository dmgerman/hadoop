begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.servicemonitor
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Various utils to work with the monitor  */
end_comment

begin_class
DECL|class|MonitorUtils
specifier|public
specifier|final
class|class
name|MonitorUtils
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MonitorUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MonitorUtils ()
specifier|private
name|MonitorUtils
parameter_list|()
block|{   }
DECL|method|toPlural (int val)
specifier|public
specifier|static
name|String
name|toPlural
parameter_list|(
name|int
name|val
parameter_list|)
block|{
return|return
name|val
operator|!=
literal|1
condition|?
literal|"s"
else|:
literal|""
return|;
block|}
comment|/**    * Convert the arguments -including dropping any empty strings that creep in    * @param args arguments    * @return a list view with no empty strings    */
DECL|method|prepareArgs (String[] args)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|prepareArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
name|StringBuilder
name|argsStr
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Arguments: ["
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|argsStr
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|arg
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|arg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
name|argsStr
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|argsStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|argsList
return|;
block|}
comment|/**    * Convert milliseconds to human time -the exact format is unspecified    * @param milliseconds a time in milliseconds    * @return a time that is converted to human intervals    */
DECL|method|millisToHumanTime (long milliseconds)
specifier|public
specifier|static
name|String
name|millisToHumanTime
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Send all output to the Appendable object sb
name|Formatter
name|formatter
init|=
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|long
name|s
init|=
name|Math
operator|.
name|abs
argument_list|(
name|milliseconds
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|long
name|m
init|=
name|Math
operator|.
name|abs
argument_list|(
name|milliseconds
operator|%
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|milliseconds
operator|>
literal|0
condition|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"%d.%03ds"
argument_list|,
name|s
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|milliseconds
operator|==
literal|0
condition|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"-%d.%03ds"
argument_list|,
name|s
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getURIAddress (URI uri)
specifier|public
specifier|static
name|InetSocketAddress
name|getURIAddress
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
comment|/**    * Get the localhost -may be null    * @return the localhost if known    */
DECL|method|getLocalHost ()
specifier|public
specifier|static
name|InetAddress
name|getLocalHost
parameter_list|()
block|{
name|InetAddress
name|localHost
decl_stmt|;
try|try
block|{
name|localHost
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|localHost
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|localHost
return|;
block|}
block|}
end_class

end_unit

