begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.exceptions
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathAccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * static methods to convert exceptions into different types, including  * extraction of details and finer-grained conversions.  */
end_comment

begin_class
DECL|class|ExceptionConverter
specifier|public
class|class
name|ExceptionConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExceptionConverter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Uprate error codes 400 and up into faults;     * 404 is converted to a {@link FileNotFoundException},    * 401 to {@link ForbiddenException}    * FileNotFoundException for an unknown resource    * PathAccessDeniedException for access denied    * PathIOException for anything else    * @param verb HTTP Verb used    * @param targetURL URL being targeted     * @param exception original exception    * @return a new exception, the original one nested as a cause    */
DECL|method|convertJerseyException (String verb, String targetURL, UniformInterfaceException exception)
specifier|public
specifier|static
name|IOException
name|convertJerseyException
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|targetURL
parameter_list|,
name|UniformInterfaceException
name|exception
parameter_list|)
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
name|ClientResponse
name|response
init|=
name|exception
operator|.
name|getResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|int
name|status
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|String
name|body
init|=
literal|""
decl_stmt|;
try|try
block|{
if|if
condition|(
name|response
operator|.
name|hasEntity
argument_list|()
condition|)
block|{
name|body
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"{} {} returned status {} and body\n{}"
argument_list|,
name|verb
argument_list|,
name|targetURL
argument_list|,
name|status
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"{} {} returned status {} and empty body"
argument_list|,
name|verb
argument_list|,
name|targetURL
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to extract body from client response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|==
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
operator|||
name|status
operator|==
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
condition|)
block|{
name|ioe
operator|=
operator|new
name|PathAccessDeniedException
argument_list|(
name|targetURL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
operator|||
name|status
operator|==
name|HttpServletResponse
operator|.
name|SC_NOT_ACCEPTABLE
operator|||
name|status
operator|==
name|HttpServletResponse
operator|.
name|SC_UNSUPPORTED_MEDIA_TYPE
condition|)
block|{
comment|// bad request
name|ioe
operator|=
operator|new
name|InvalidRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bad %s request: status code %d against %s"
argument_list|,
name|verb
argument_list|,
name|status
argument_list|,
name|targetURL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|>
literal|400
operator|&&
name|status
operator|<
literal|500
condition|)
block|{
name|ioe
operator|=
operator|new
name|FileNotFoundException
argument_list|(
name|targetURL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioe
operator|==
literal|null
condition|)
block|{
name|ioe
operator|=
operator|new
name|PathIOException
argument_list|(
name|targetURL
argument_list|,
name|verb
operator|+
literal|" "
operator|+
name|targetURL
operator|+
literal|" failed with status code : "
operator|+
name|status
operator|+
literal|":"
operator|+
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ioe
operator|=
operator|new
name|PathIOException
argument_list|(
name|targetURL
argument_list|,
name|verb
operator|+
literal|" "
operator|+
name|targetURL
operator|+
literal|" failed: "
operator|+
name|exception
argument_list|)
expr_stmt|;
block|}
name|ioe
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
name|ioe
return|;
block|}
comment|/**    * Handle a client-side Jersey exception.    *<p>    * If there's an inner IOException, return that.    *<p>    * Otherwise: create a new wrapper IOE including verb and target details    * @param verb HTTP Verb used    * @param targetURL URL being targeted     * @param exception original exception    * @return an exception to throw    */
DECL|method|convertJerseyException (String verb, String targetURL, ClientHandlerException exception)
specifier|public
specifier|static
name|IOException
name|convertJerseyException
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|targetURL
parameter_list|,
name|ClientHandlerException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
return|return
operator|(
name|IOException
operator|)
name|exception
operator|.
name|getCause
argument_list|()
return|;
block|}
else|else
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|verb
operator|+
literal|" "
operator|+
name|targetURL
operator|+
literal|" failed: "
operator|+
name|exception
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
name|ioe
return|;
block|}
block|}
block|}
end_class

end_unit

