begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.docstore
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_enum
DECL|enum|ConfigFormat
specifier|public
enum|enum
name|ConfigFormat
block|{
DECL|enumConstant|JSON
name|JSON
argument_list|(
literal|"json"
argument_list|)
block|,
DECL|enumConstant|PROPERTIES
name|PROPERTIES
argument_list|(
literal|"properties"
argument_list|)
block|,
DECL|enumConstant|XML
name|XML
argument_list|(
literal|"xml"
argument_list|)
block|,
DECL|enumConstant|HADOOP_XML
name|HADOOP_XML
argument_list|(
literal|"hadoop-xml"
argument_list|)
block|,
DECL|enumConstant|ENV
name|ENV
argument_list|(
literal|"env"
argument_list|)
block|,
DECL|enumConstant|TEMPLATE
name|TEMPLATE
argument_list|(
literal|"template"
argument_list|)
block|,
DECL|enumConstant|YAML
name|YAML
argument_list|(
literal|"yaml"
argument_list|)
block|,   ;
DECL|method|ConfigFormat (String suffix)
name|ConfigFormat
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
block|}
DECL|field|suffix
specifier|private
specifier|final
name|String
name|suffix
decl_stmt|;
DECL|method|getSuffix ()
specifier|public
name|String
name|getSuffix
parameter_list|()
block|{
return|return
name|suffix
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|suffix
return|;
block|}
comment|/**    * Get a matching format or null    * @param type    * @return the format    */
DECL|method|resolve (String type)
specifier|public
specifier|static
name|ConfigFormat
name|resolve
parameter_list|(
name|String
name|type
parameter_list|)
block|{
for|for
control|(
name|ConfigFormat
name|format
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|format
operator|.
name|getSuffix
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|format
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_enum

end_unit

