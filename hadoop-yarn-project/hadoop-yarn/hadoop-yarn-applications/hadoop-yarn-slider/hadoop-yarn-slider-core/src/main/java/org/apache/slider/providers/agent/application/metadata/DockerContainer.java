begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a docker container  */
end_comment

begin_class
DECL|class|DockerContainer
specifier|public
class|class
name|DockerContainer
implements|implements
name|Validate
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DockerContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|image
specifier|private
name|String
name|image
decl_stmt|;
DECL|field|network
specifier|private
name|String
name|network
decl_stmt|;
DECL|field|useNetworkScript
specifier|private
name|String
name|useNetworkScript
decl_stmt|;
DECL|field|options
specifier|private
name|String
name|options
decl_stmt|;
DECL|field|mounts
specifier|private
name|List
argument_list|<
name|DockerContainerMount
argument_list|>
name|mounts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|ports
specifier|private
name|List
argument_list|<
name|DockerContainerPort
argument_list|>
name|ports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|statusCommand
specifier|private
name|String
name|statusCommand
decl_stmt|;
DECL|field|startCommand
specifier|private
name|String
name|startCommand
decl_stmt|;
DECL|field|commandPath
specifier|private
name|String
name|commandPath
decl_stmt|;
DECL|field|additionalParam
specifier|private
name|String
name|additionalParam
decl_stmt|;
DECL|field|runPrivilegedContainer
specifier|private
name|String
name|runPrivilegedContainer
decl_stmt|;
DECL|field|inputFiles
specifier|private
name|List
argument_list|<
name|DockerContainerInputFile
argument_list|>
name|inputFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|configFiles
specifier|private
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DockerContainer ()
specifier|public
name|DockerContainer
parameter_list|()
block|{   }
annotation|@
name|JsonProperty
argument_list|(
literal|"mounts"
argument_list|)
DECL|method|getMounts ()
specifier|public
name|List
argument_list|<
name|DockerContainerMount
argument_list|>
name|getMounts
parameter_list|()
block|{
return|return
name|this
operator|.
name|mounts
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"ports"
argument_list|)
DECL|method|getPorts ()
specifier|public
name|List
argument_list|<
name|DockerContainerPort
argument_list|>
name|getPorts
parameter_list|()
block|{
return|return
name|this
operator|.
name|ports
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"inputFiles"
argument_list|)
DECL|method|getInputFiles ()
specifier|public
name|List
argument_list|<
name|DockerContainerInputFile
argument_list|>
name|getInputFiles
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputFiles
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getImage ()
specifier|public
name|String
name|getImage
parameter_list|()
block|{
return|return
name|image
return|;
block|}
DECL|method|setImage (String image)
specifier|public
name|void
name|setImage
parameter_list|(
name|String
name|image
parameter_list|)
block|{
name|this
operator|.
name|image
operator|=
name|image
expr_stmt|;
block|}
DECL|method|getNetwork ()
specifier|public
name|String
name|getNetwork
parameter_list|()
block|{
return|return
name|network
return|;
block|}
DECL|method|setNetwork (String network)
specifier|public
name|void
name|setNetwork
parameter_list|(
name|String
name|network
parameter_list|)
block|{
name|this
operator|.
name|network
operator|=
name|network
expr_stmt|;
block|}
DECL|method|getUseNetworkScript ()
specifier|public
name|String
name|getUseNetworkScript
parameter_list|()
block|{
return|return
name|useNetworkScript
return|;
block|}
DECL|method|setUseNetworkScript (String useNetworkScript)
specifier|public
name|void
name|setUseNetworkScript
parameter_list|(
name|String
name|useNetworkScript
parameter_list|)
block|{
name|this
operator|.
name|useNetworkScript
operator|=
name|useNetworkScript
expr_stmt|;
block|}
DECL|method|getOptions ()
specifier|public
name|String
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|setOptions (String options)
specifier|public
name|void
name|setOptions
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate (String version)
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|version
parameter_list|)
throws|throws
name|SliderException
block|{
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|"name"
argument_list|,
literal|"dockerContainer"
argument_list|)
expr_stmt|;
name|Metainfo
operator|.
name|checkNonNull
argument_list|(
name|getImage
argument_list|()
argument_list|,
literal|"image"
argument_list|,
literal|"dockerContainer"
argument_list|)
expr_stmt|;
for|for
control|(
name|DockerContainerMount
name|dcm
range|:
name|getMounts
argument_list|()
control|)
block|{
name|dcm
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DockerContainerPort
name|dcp
range|:
name|getPorts
argument_list|()
control|)
block|{
name|dcp
operator|.
name|validate
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"statusCommand"
argument_list|)
DECL|method|getStatusCommand ()
specifier|public
name|String
name|getStatusCommand
parameter_list|()
block|{
return|return
name|statusCommand
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"statusCommand"
argument_list|)
DECL|method|setStatusCommand (String statusCommand)
specifier|public
name|void
name|setStatusCommand
parameter_list|(
name|String
name|statusCommand
parameter_list|)
block|{
name|this
operator|.
name|statusCommand
operator|=
name|statusCommand
expr_stmt|;
block|}
DECL|method|getCommandPath ()
specifier|public
name|String
name|getCommandPath
parameter_list|()
block|{
return|return
name|commandPath
return|;
block|}
DECL|method|setCommandPath (String commandPath)
specifier|public
name|void
name|setCommandPath
parameter_list|(
name|String
name|commandPath
parameter_list|)
block|{
name|this
operator|.
name|commandPath
operator|=
name|commandPath
expr_stmt|;
block|}
DECL|method|getAdditionalParam ()
specifier|public
name|String
name|getAdditionalParam
parameter_list|()
block|{
return|return
name|additionalParam
return|;
block|}
DECL|method|setAdditionalParam (String additionalParam)
specifier|public
name|void
name|setAdditionalParam
parameter_list|(
name|String
name|additionalParam
parameter_list|)
block|{
name|this
operator|.
name|additionalParam
operator|=
name|additionalParam
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"startCommand"
argument_list|)
DECL|method|getStartCommand ()
specifier|public
name|String
name|getStartCommand
parameter_list|()
block|{
return|return
name|startCommand
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"startCommand"
argument_list|)
DECL|method|setStartCommand (String startCommand)
specifier|public
name|void
name|setStartCommand
parameter_list|(
name|String
name|startCommand
parameter_list|)
block|{
name|this
operator|.
name|startCommand
operator|=
name|startCommand
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"runPrivilegedContainer"
argument_list|)
DECL|method|getRunPrivilegedContainer ()
specifier|public
name|String
name|getRunPrivilegedContainer
parameter_list|()
block|{
return|return
name|runPrivilegedContainer
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"runPrivilegedContainer"
argument_list|)
DECL|method|setRunPrivilegedContainer (String runPrivilegedContainer)
specifier|public
name|void
name|setRunPrivilegedContainer
parameter_list|(
name|String
name|runPrivilegedContainer
parameter_list|)
block|{
name|this
operator|.
name|runPrivilegedContainer
operator|=
name|runPrivilegedContainer
expr_stmt|;
block|}
DECL|method|getConfigFiles ()
specifier|public
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|getConfigFiles
parameter_list|()
block|{
return|return
name|configFiles
return|;
block|}
DECL|method|setConfigFiles (List<ConfigFile> configFiles)
specifier|public
name|void
name|setConfigFiles
parameter_list|(
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
parameter_list|)
block|{
name|this
operator|.
name|configFiles
operator|=
name|configFiles
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"DockerContainer [name="
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|", image="
argument_list|)
operator|.
name|append
argument_list|(
name|image
argument_list|)
operator|.
name|append
argument_list|(
literal|", options="
argument_list|)
operator|.
name|append
argument_list|(
name|options
argument_list|)
operator|.
name|append
argument_list|(
literal|", mounts="
argument_list|)
operator|.
name|append
argument_list|(
name|mounts
argument_list|)
operator|.
name|append
argument_list|(
literal|", ports="
argument_list|)
operator|.
name|append
argument_list|(
name|ports
argument_list|)
operator|.
name|append
argument_list|(
literal|", statusCommand="
argument_list|)
operator|.
name|append
argument_list|(
name|statusCommand
argument_list|)
operator|.
name|append
argument_list|(
literal|", commandPath="
argument_list|)
operator|.
name|append
argument_list|(
name|commandPath
argument_list|)
operator|.
name|append
argument_list|(
literal|", additionalParam="
argument_list|)
operator|.
name|append
argument_list|(
name|additionalParam
argument_list|)
operator|.
name|append
argument_list|(
literal|", inputFiles="
argument_list|)
operator|.
name|append
argument_list|(
name|inputFiles
argument_list|)
operator|.
name|append
argument_list|(
literal|", startCommand="
argument_list|)
operator|.
name|append
argument_list|(
name|startCommand
argument_list|)
operator|.
name|append
argument_list|(
literal|", runPriviledgedContainer="
argument_list|)
operator|.
name|append
argument_list|(
name|runPrivilegedContainer
argument_list|)
operator|.
name|append
argument_list|(
literal|", configFiles="
argument_list|)
operator|.
name|append
argument_list|(
name|configFiles
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

