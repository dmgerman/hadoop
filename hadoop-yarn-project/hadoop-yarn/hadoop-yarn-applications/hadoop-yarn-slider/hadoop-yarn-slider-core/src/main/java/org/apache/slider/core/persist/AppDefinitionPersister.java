begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.persist
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|AbstractClusterBuildingActionArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|AgentKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Class to prepare and persist app and add-on definitions.  *  * In this case, the app definition and add-on definitions are auto-inferred from the user input rather than explicit  * inclusion of application package in the config.  *  * Processing an app definition involves one or more of the following: - modify appConfig - package definition into a  * temporary folder - upload to HDFS  *  * This class keeps track of all the required operations and allows them to be invoked by build operation  */
end_comment

begin_class
DECL|class|AppDefinitionPersister
specifier|public
class|class
name|AppDefinitionPersister
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AppDefinitionPersister
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sliderFileSystem
specifier|private
specifier|final
name|SliderFileSystem
name|sliderFileSystem
decl_stmt|;
DECL|field|appDefinitions
specifier|private
name|List
argument_list|<
name|AppDefinition
argument_list|>
name|appDefinitions
decl_stmt|;
DECL|method|AppDefinitionPersister (SliderFileSystem sliderFileSystem)
specifier|public
name|AppDefinitionPersister
parameter_list|(
name|SliderFileSystem
name|sliderFileSystem
parameter_list|)
block|{
name|this
operator|.
name|sliderFileSystem
operator|=
name|sliderFileSystem
expr_stmt|;
name|appDefinitions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Process the application package or folder by copying it to the cluster path    *    * @param appDefinition details of application package    *    * @throws BadConfigException    * @throws IOException    */
DECL|method|persistDefinitionPackageOrFolder (AppDefinition appDefinition)
specifier|private
name|void
name|persistDefinitionPackageOrFolder
parameter_list|(
name|AppDefinition
name|appDefinition
parameter_list|)
throws|throws
name|BadConfigException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|appDefinition
operator|.
name|appDefPkgOrFolder
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Pkg/Folder cannot be accessed - "
operator|+
name|appDefinition
operator|.
name|appDefPkgOrFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|src
init|=
name|appDefinition
operator|.
name|appDefPkgOrFolder
decl_stmt|;
name|String
name|targetName
init|=
name|appDefinition
operator|.
name|pkgName
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Package name: "
operator|+
name|targetName
argument_list|)
expr_stmt|;
if|if
condition|(
name|appDefinition
operator|.
name|appDefPkgOrFolder
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processing app package/folder {} for {}"
argument_list|,
name|appDefinition
operator|.
name|appDefPkgOrFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appDefinition
operator|.
name|pkgName
argument_list|)
expr_stmt|;
name|File
name|tmpDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|File
name|zipFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|File
operator|.
name|separator
operator|+
name|appDefinition
operator|.
name|pkgName
argument_list|)
decl_stmt|;
name|SliderUtils
operator|.
name|zipFolder
argument_list|(
name|appDefinition
operator|.
name|appDefPkgOrFolder
argument_list|,
name|zipFile
argument_list|)
expr_stmt|;
name|src
operator|=
name|zipFile
expr_stmt|;
block|}
name|sliderFileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|src
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|appDefinition
operator|.
name|targetFolderInFs
argument_list|,
name|targetName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|persistPackages ()
specifier|public
name|void
name|persistPackages
parameter_list|()
throws|throws
name|BadConfigException
throws|,
name|IOException
block|{
for|for
control|(
name|AppDefinition
name|appDefinition
range|:
name|appDefinitions
control|)
block|{
name|persistDefinitionPackageOrFolder
argument_list|(
name|appDefinition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processSuppliedDefinitions (String clustername, AbstractClusterBuildingActionArgs buildInfo, ConfTreeOperations appConf)
specifier|public
name|void
name|processSuppliedDefinitions
parameter_list|(
name|String
name|clustername
parameter_list|,
name|AbstractClusterBuildingActionArgs
name|buildInfo
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|)
throws|throws
name|BadConfigException
throws|,
name|IOException
throws|,
name|BadCommandArgumentsException
block|{
comment|// if metainfo is provided add to the app instance
if|if
condition|(
name|buildInfo
operator|.
name|appMetaInfo
operator|!=
literal|null
operator|||
name|buildInfo
operator|.
name|appMetaInfoJson
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|buildInfo
operator|.
name|appMetaInfo
operator|!=
literal|null
operator|&&
name|buildInfo
operator|.
name|appMetaInfoJson
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Both %s and %s cannot be specified"
argument_list|,
name|Arguments
operator|.
name|ARG_METAINFO
argument_list|,
name|Arguments
operator|.
name|ARG_METAINFO_JSON
argument_list|)
throw|;
block|}
comment|// Now we know that only one of either file or JSON is used
name|boolean
name|isFileUsed
init|=
name|buildInfo
operator|.
name|appMetaInfo
operator|!=
literal|null
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|String
name|argUsed
init|=
name|isFileUsed
condition|?
name|Arguments
operator|.
name|ARG_METAINFO
else|:
name|Arguments
operator|.
name|ARG_METAINFO_JSON
decl_stmt|;
if|if
condition|(
name|buildInfo
operator|.
name|appDef
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Both %s and %s cannot be specified"
argument_list|,
name|argUsed
argument_list|,
name|Arguments
operator|.
name|ARG_APPDEF
argument_list|)
throw|;
block|}
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"%s cannot not be set if %s is specified in the cmd line "
argument_list|,
name|AgentKeys
operator|.
name|APP_DEF
argument_list|,
name|argUsed
argument_list|)
throw|;
block|}
if|if
condition|(
name|isFileUsed
condition|)
block|{
if|if
condition|(
operator|!
name|buildInfo
operator|.
name|appMetaInfo
operator|.
name|canRead
argument_list|()
operator|||
operator|!
name|buildInfo
operator|.
name|appMetaInfo
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Path specified with %s either cannot be read or is not a file"
argument_list|,
name|Arguments
operator|.
name|ARG_METAINFO
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|buildInfo
operator|.
name|appMetaInfoJson
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Empty string specified with %s"
argument_list|,
name|Arguments
operator|.
name|ARG_METAINFO_JSON
argument_list|)
throw|;
block|}
block|}
name|File
name|tempDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|File
name|pkgSrcDir
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|pkgSrcDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|destMetaInfo
init|=
operator|new
name|File
argument_list|(
name|pkgSrcDir
argument_list|,
literal|"metainfo.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFileUsed
condition|)
block|{
if|if
condition|(
name|buildInfo
operator|.
name|appMetaInfo
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|buildInfo
operator|.
name|appMetaInfo
argument_list|,
operator|new
name|File
argument_list|(
name|pkgSrcDir
argument_list|,
literal|"metainfo.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|copy
argument_list|(
name|buildInfo
operator|.
name|appMetaInfo
argument_list|,
name|destMetaInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Files
operator|.
name|write
argument_list|(
name|buildInfo
operator|.
name|appMetaInfoJson
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|destMetaInfo
argument_list|)
expr_stmt|;
block|}
name|Path
name|appDirPath
init|=
name|sliderFileSystem
operator|.
name|buildAppDefDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using default app def path {}"
argument_list|,
name|appDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|appDefinitions
operator|.
name|add
argument_list|(
operator|new
name|AppDefinition
argument_list|(
name|appDirPath
argument_list|,
name|pkgSrcDir
argument_list|,
name|SliderKeys
operator|.
name|DEFAULT_APP_PKG
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appDefPath
init|=
operator|new
name|Path
argument_list|(
name|appDirPath
argument_list|,
name|SliderKeys
operator|.
name|DEFAULT_APP_PKG
argument_list|)
decl_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|set
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|,
name|appDefPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting app package to {}."
argument_list|,
name|appDefPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buildInfo
operator|.
name|appDef
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"application.def must not be set if --appdef is provided."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|buildInfo
operator|.
name|appDef
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"--appdef is not a valid path."
argument_list|)
throw|;
block|}
name|Path
name|appDirPath
init|=
name|sliderFileSystem
operator|.
name|buildAppDefDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
name|appDefinitions
operator|.
name|add
argument_list|(
operator|new
name|AppDefinition
argument_list|(
name|appDirPath
argument_list|,
name|buildInfo
operator|.
name|appDef
argument_list|,
name|SliderKeys
operator|.
name|DEFAULT_APP_PKG
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appDefPath
init|=
operator|new
name|Path
argument_list|(
name|appDirPath
argument_list|,
name|SliderKeys
operator|.
name|DEFAULT_APP_PKG
argument_list|)
decl_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|set
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|,
name|appDefPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting app package to {}."
argument_list|,
name|appDefPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buildInfo
operator|.
name|addonDelegate
operator|.
name|getAddonMap
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"addon package can only be specified if main app package is specified."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|addons
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addonMap
init|=
name|buildInfo
operator|.
name|addonDelegate
operator|.
name|getAddonMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|addonMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|File
name|defPath
init|=
operator|new
name|File
argument_list|(
name|addonMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|addonMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Invalid path for addon package "
operator|+
name|key
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|defPath
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"addon folder or package path is not valid."
argument_list|)
throw|;
block|}
name|Path
name|addonPath
init|=
name|sliderFileSystem
operator|.
name|buildAddonDirPath
argument_list|(
name|clustername
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|String
name|addonPkgName
init|=
literal|"addon_"
operator|+
name|key
operator|+
literal|".zip"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"addonMap.get(key): {} addonPath: {} defPath: {} addonPkgName: {}"
argument_list|,
name|addonMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|addonPath
argument_list|,
name|defPath
argument_list|,
name|addonPkgName
argument_list|)
expr_stmt|;
name|appDefinitions
operator|.
name|add
argument_list|(
operator|new
name|AppDefinition
argument_list|(
name|addonPath
argument_list|,
name|defPath
argument_list|,
name|addonPkgName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|addOnKey
init|=
name|AgentKeys
operator|.
name|ADDON_PREFIX
operator|+
name|key
decl_stmt|;
name|Path
name|addonPkgPath
init|=
operator|new
name|Path
argument_list|(
name|addonPath
argument_list|,
name|addonPkgName
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting addon package {} to {}."
argument_list|,
name|addOnKey
argument_list|,
name|addonPkgPath
argument_list|)
expr_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|set
argument_list|(
name|addOnKey
argument_list|,
name|addonPkgPath
argument_list|)
expr_stmt|;
name|addons
operator|.
name|add
argument_list|(
name|addOnKey
argument_list|)
expr_stmt|;
block|}
name|String
name|existingList
init|=
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|ADDONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|existingList
argument_list|)
condition|)
block|{
name|existingList
operator|=
literal|""
expr_stmt|;
block|}
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|set
argument_list|(
name|AgentKeys
operator|.
name|ADDONS
argument_list|,
name|existingList
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|addons
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAppDefinitions ()
specifier|public
name|List
argument_list|<
name|AppDefinitionPersister
operator|.
name|AppDefinition
argument_list|>
name|getAppDefinitions
parameter_list|()
block|{
return|return
name|appDefinitions
return|;
block|}
comment|// Helper class to hold details for the app and addon packages
DECL|class|AppDefinition
specifier|public
class|class
name|AppDefinition
block|{
comment|// The target folder where the package will be stored
DECL|field|targetFolderInFs
specifier|public
name|Path
name|targetFolderInFs
decl_stmt|;
comment|// The on disk location of the app def package or folder
DECL|field|appDefPkgOrFolder
specifier|public
name|File
name|appDefPkgOrFolder
decl_stmt|;
comment|// Package name
DECL|field|pkgName
specifier|public
name|String
name|pkgName
decl_stmt|;
DECL|method|AppDefinition (Path targetFolderInFs, File appDefPkgOrFolder, String pkgName)
specifier|public
name|AppDefinition
parameter_list|(
name|Path
name|targetFolderInFs
parameter_list|,
name|File
name|appDefPkgOrFolder
parameter_list|,
name|String
name|pkgName
parameter_list|)
block|{
name|this
operator|.
name|targetFolderInFs
operator|=
name|targetFolderInFs
expr_stmt|;
name|this
operator|.
name|appDefPkgOrFolder
operator|=
name|appDefPkgOrFolder
expr_stmt|;
name|this
operator|.
name|pkgName
operator|=
name|pkgName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"targetFolderInFs"
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|targetFolderInFs
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"appDefPkgOrFolder"
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|appDefPkgOrFolder
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"pkgName"
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|pkgName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

