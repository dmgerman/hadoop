begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.restclient
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|restclient
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|ClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|client
operator|.
name|urlconnection
operator|.
name|HttpURLConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|client
operator|.
name|urlconnection
operator|.
name|URLConnectionClientHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ExceptionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Class to bond to a Jersey client, for UGI integration and SPNEGO.  *<p>  *   Usage: create an instance, then when creating a Jersey<code>Client</code>  *   pass in to the constructor the handler provided by {@link #getHandler()}  *  * see<a href="https://jersey.java.net/apidocs/1.17/jersey/com/sun/jersey/client/urlconnection/HttpURLConnectionFactory.html">Jersey docs</a>  */
end_comment

begin_class
DECL|class|UgiJerseyBinding
specifier|public
class|class
name|UgiJerseyBinding
implements|implements
name|HttpURLConnectionFactory
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UgiJerseyBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|operations
specifier|private
specifier|final
name|UrlConnectionOperations
name|operations
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|URLConnectionClientHandler
name|handler
decl_stmt|;
comment|/**    * Construct an instance    * @param operations operations instance    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThisEscapedInObjectConstruction"
argument_list|)
DECL|method|UgiJerseyBinding (UrlConnectionOperations operations)
specifier|public
name|UgiJerseyBinding
parameter_list|(
name|UrlConnectionOperations
name|operations
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|operations
operator|!=
literal|null
argument_list|,
literal|"Null operations"
argument_list|)
expr_stmt|;
name|this
operator|.
name|operations
operator|=
name|operations
expr_stmt|;
name|handler
operator|=
operator|new
name|URLConnectionClientHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an instance off the configuration. The SPNEGO policy    * is derived from the current UGI settings.    * @param conf config    */
DECL|method|UgiJerseyBinding (Configuration conf)
specifier|public
name|UgiJerseyBinding
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|UrlConnectionOperations
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a URL connection.     * @param url URL to connect to    * @return the connection    * @throws IOException any problem. {@link AuthenticationException}     * errors are wrapped    */
annotation|@
name|Override
DECL|method|getHttpURLConnection (URL url)
specifier|public
name|HttpURLConnection
name|getHttpURLConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// open a connection handling status codes and so redirections
comment|// but as it opens a connection, it's less useful than you think.
return|return
name|operations
operator|.
name|openConnection
argument_list|(
name|url
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getOperations ()
specifier|public
name|UrlConnectionOperations
name|getOperations
parameter_list|()
block|{
return|return
name|operations
return|;
block|}
DECL|method|getHandler ()
specifier|public
name|URLConnectionClientHandler
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
comment|/**    * Get the SPNEGO flag (as found in the operations instance    * @return the spnego policy    */
DECL|method|isUseSpnego ()
specifier|public
name|boolean
name|isUseSpnego
parameter_list|()
block|{
return|return
name|operations
operator|.
name|isUseSpnego
argument_list|()
return|;
block|}
comment|/**    * Uprate error codes 400 and up into faults;     *<p>    * see {@link ExceptionConverter#convertJerseyException(String, String, UniformInterfaceException)}    */
DECL|method|uprateFaults (HttpVerb verb, String url, UniformInterfaceException ex)
specifier|public
specifier|static
name|IOException
name|uprateFaults
parameter_list|(
name|HttpVerb
name|verb
parameter_list|,
name|String
name|url
parameter_list|,
name|UniformInterfaceException
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ExceptionConverter
operator|.
name|convertJerseyException
argument_list|(
name|verb
operator|.
name|getVerb
argument_list|()
argument_list|,
name|url
argument_list|,
name|ex
argument_list|)
return|;
block|}
comment|/**    * Create the standard Jersey client Config    * @return the recommended Jersey Client config    */
DECL|method|createJerseyClientConfig ()
specifier|public
name|ClientConfig
name|createJerseyClientConfig
parameter_list|()
block|{
name|ClientConfig
name|clientConfig
init|=
operator|new
name|DefaultClientConfig
argument_list|()
decl_stmt|;
name|clientConfig
operator|.
name|getFeatures
argument_list|()
operator|.
name|put
argument_list|(
name|JSONConfiguration
operator|.
name|FEATURE_POJO_MAPPING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|clientConfig
return|;
block|}
comment|/**    * Create a jersey client bonded to this handler, using the    * supplied client config    * @param clientConfig client configuratin    * @return a new client instance to use    */
DECL|method|createJerseyClient (ClientConfig clientConfig)
specifier|public
name|Client
name|createJerseyClient
parameter_list|(
name|ClientConfig
name|clientConfig
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|getHandler
argument_list|()
argument_list|,
name|clientConfig
argument_list|)
return|;
block|}
comment|/**    * Create a jersey client bonded to this handler, using the    * client config created with {@link #createJerseyClientConfig()}    * @return a new client instance to use    */
DECL|method|createJerseyClient ()
specifier|public
name|Client
name|createJerseyClient
parameter_list|()
block|{
return|return
name|createJerseyClient
argument_list|(
name|createJerseyClientConfig
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

