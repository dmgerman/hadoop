begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Sort the candidate list by the most recent container first.  */
end_comment

begin_class
DECL|class|MostRecentContainerReleaseSelector
specifier|public
class|class
name|MostRecentContainerReleaseSelector
implements|implements
name|ContainerReleaseSelector
block|{
annotation|@
name|Override
DECL|method|sortCandidates (int roleId, List<RoleInstance> candidates)
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|sortCandidates
parameter_list|(
name|int
name|roleId
parameter_list|,
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|candidates
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|newerThan
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|candidates
return|;
block|}
DECL|class|newerThan
specifier|private
specifier|static
class|class
name|newerThan
implements|implements
name|Comparator
argument_list|<
name|RoleInstance
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|innerComparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Long
argument_list|>
name|innerComparator
init|=
operator|new
name|Comparators
operator|.
name|ComparatorReverser
argument_list|<>
argument_list|(
operator|new
name|Comparators
operator|.
name|LongComparator
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|compare (RoleInstance o1, RoleInstance o2)
specifier|public
name|int
name|compare
parameter_list|(
name|RoleInstance
name|o1
parameter_list|,
name|RoleInstance
name|o2
parameter_list|)
block|{
return|return
name|innerComparator
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|createTime
argument_list|,
name|o2
operator|.
name|createTime
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

