begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * This is a counter whose range can be given a min and a max  */
end_comment

begin_class
DECL|class|RangeLimitedCounter
specifier|public
class|class
name|RangeLimitedCounter
implements|implements
name|Metric
implements|,
name|Counting
block|{
DECL|field|value
specifier|private
specifier|final
name|AtomicLong
name|value
decl_stmt|;
DECL|field|min
DECL|field|max
specifier|private
specifier|final
name|long
name|min
decl_stmt|,
name|max
decl_stmt|;
comment|/**    * Instantiate    * @param val current value    * @param min minimum value    * @param max max value (or 0 for no max)    */
DECL|method|RangeLimitedCounter (long val, long min, long max)
specifier|public
name|RangeLimitedCounter
parameter_list|(
name|long
name|val
parameter_list|,
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
operator|new
name|AtomicLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
comment|/**    * Set to a new value. If below the min, set to the minimum. If the max is non    * zero and the value is above that maximum, set it to the maximum instead.    * @param val value    */
DECL|method|set (long val)
specifier|public
specifier|synchronized
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|<
name|min
condition|)
block|{
name|val
operator|=
name|min
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|max
operator|>
literal|0
operator|&&
name|val
operator|>
name|max
condition|)
block|{
name|val
operator|=
name|max
expr_stmt|;
block|}
name|value
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|inc ()
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|inc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|dec ()
specifier|public
name|void
name|dec
parameter_list|()
block|{
name|dec
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|inc (int delta)
specifier|public
specifier|synchronized
name|void
name|inc
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|set
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
DECL|method|dec (int delta)
specifier|public
specifier|synchronized
name|void
name|dec
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|set
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|-
name|delta
argument_list|)
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|long
name|get
parameter_list|()
block|{
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCount ()
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

