begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.actions
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ExceptionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|TriggerClusterTeardownException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|ExitCodeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|SliderAppMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Trigger an AM exit. This is used to build the exit status message for YARN  */
end_comment

begin_class
DECL|class|ActionStopSlider
specifier|public
class|class
name|ActionStopSlider
extends|extends
name|AsyncAction
block|{
DECL|field|exitCode
specifier|private
name|int
name|exitCode
decl_stmt|;
DECL|field|finalApplicationStatus
specifier|private
name|FinalApplicationStatus
name|finalApplicationStatus
decl_stmt|;
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|field|ex
specifier|private
specifier|final
name|Exception
name|ex
decl_stmt|;
comment|/**    * Simple constructor    * @param name action name    */
DECL|method|ActionStopSlider (String name)
specifier|public
name|ActionStopSlider
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|ex
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Stop slider    * @param name action name    * @param delay execution delay    * @param timeUnit delay time unit    * @param exitCode process exit code    * @param finalApplicationStatus yarn status    * @param message message for AM    */
DECL|method|ActionStopSlider (String name, long delay, TimeUnit timeUnit, int exitCode, FinalApplicationStatus finalApplicationStatus, String message)
specifier|public
name|ActionStopSlider
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|FinalApplicationStatus
name|finalApplicationStatus
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|delay
argument_list|,
name|timeUnit
argument_list|,
name|ATTR_HALTS_APP
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|this
operator|.
name|finalApplicationStatus
operator|=
name|finalApplicationStatus
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|ex
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Stop slider    * @param name action name    * @param exitCode process exit code    * @param finalApplicationStatus yarn status    * @param message message for AM    */
DECL|method|ActionStopSlider (String name, int exitCode, FinalApplicationStatus finalApplicationStatus, String message)
specifier|public
name|ActionStopSlider
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|FinalApplicationStatus
name|finalApplicationStatus
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|this
operator|.
name|finalApplicationStatus
operator|=
name|finalApplicationStatus
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|ex
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Simple constructor    * @param ex teardown exception    */
DECL|method|ActionStopSlider (TriggerClusterTeardownException ex)
specifier|public
name|ActionStopSlider
parameter_list|(
name|TriggerClusterTeardownException
name|ex
parameter_list|)
block|{
name|this
argument_list|(
literal|"stop"
argument_list|,
name|ex
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|ex
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build from an exception.    *<p>    * If the exception implements    * {@link ExitCodeProvider} then the exit code is extracted from that    * @param ex exception.    */
DECL|method|ActionStopSlider (Exception ex)
specifier|public
name|ActionStopSlider
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|super
argument_list|(
literal|"stop"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ExitCodeProvider
condition|)
block|{
name|setExitCode
argument_list|(
operator|(
operator|(
name|ExitCodeProvider
operator|)
name|ex
operator|)
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setExitCode
argument_list|(
name|LauncherExitCodes
operator|.
name|EXIT_EXCEPTION_THROWN
argument_list|)
expr_stmt|;
block|}
name|setFinalApplicationStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|setMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ex
operator|=
name|ex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (SliderAppMaster appMaster, QueueAccess queueService, AppState appState)
specifier|public
name|void
name|execute
parameter_list|(
name|SliderAppMaster
name|appMaster
parameter_list|,
name|QueueAccess
name|queueService
parameter_list|,
name|AppState
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|SliderAppMaster
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"SliderAppMasterApi.stopCluster: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|onAMStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s:  exit code = %d, %s: %s;"
argument_list|,
name|name
argument_list|,
name|exitCode
argument_list|,
name|finalApplicationStatus
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
DECL|method|setExitCode (int exitCode)
specifier|public
name|void
name|setExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
DECL|method|getFinalApplicationStatus ()
specifier|public
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
block|{
return|return
name|finalApplicationStatus
return|;
block|}
DECL|method|setFinalApplicationStatus (FinalApplicationStatus finalApplicationStatus)
specifier|public
name|void
name|setFinalApplicationStatus
parameter_list|(
name|FinalApplicationStatus
name|finalApplicationStatus
parameter_list|)
block|{
name|this
operator|.
name|finalApplicationStatus
operator|=
name|finalApplicationStatus
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
DECL|method|setMessage (String message)
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
DECL|method|getEx ()
specifier|public
name|Exception
name|getEx
parameter_list|()
block|{
return|return
name|ex
return|;
block|}
block|}
end_class

end_unit

