begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_comment
comment|/**  *  Component defined in master package metainfo.json  */
end_comment

begin_class
DECL|class|AbstractComponent
specifier|public
specifier|abstract
class|class
name|AbstractComponent
implements|implements
name|Validate
block|{
DECL|field|TYPE_STANDARD
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_STANDARD
init|=
literal|"STANDARD"
decl_stmt|;
DECL|field|TYPE_DOCKER
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_DOCKER
init|=
literal|"DOCKER"
decl_stmt|;
DECL|field|TYPE_PYTHON
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_PYTHON
init|=
literal|"PYTHON"
decl_stmt|;
DECL|field|CATEGORY_MASTER
specifier|public
specifier|static
specifier|final
name|String
name|CATEGORY_MASTER
init|=
literal|"MASTER"
decl_stmt|;
DECL|field|CATEGORY_SLAVE
specifier|public
specifier|static
specifier|final
name|String
name|CATEGORY_SLAVE
init|=
literal|"SLAVE"
decl_stmt|;
DECL|field|CATEGORY_CLIENT
specifier|public
specifier|static
specifier|final
name|String
name|CATEGORY_CLIENT
init|=
literal|"CLIENT"
decl_stmt|;
DECL|field|MASTER_PACKAGE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_PACKAGE_NAME
init|=
literal|"MASTER"
decl_stmt|;
DECL|field|name
specifier|protected
name|String
name|name
decl_stmt|;
DECL|field|commandScript
specifier|protected
name|CommandScript
name|commandScript
decl_stmt|;
DECL|field|commands
specifier|protected
name|List
argument_list|<
name|ComponentCommand
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AbstractComponent ()
specifier|public
name|AbstractComponent
parameter_list|()
block|{   }
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getCommandScript ()
specifier|public
name|CommandScript
name|getCommandScript
parameter_list|()
block|{
return|return
name|commandScript
return|;
block|}
DECL|method|addCommandScript (CommandScript commandScript)
specifier|public
name|void
name|addCommandScript
parameter_list|(
name|CommandScript
name|commandScript
parameter_list|)
block|{
name|this
operator|.
name|commandScript
operator|=
name|commandScript
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"commands"
argument_list|)
DECL|method|getCommands ()
specifier|public
name|List
argument_list|<
name|ComponentCommand
argument_list|>
name|getCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
DECL|method|setCommands (List<ComponentCommand> commands)
specifier|public
name|void
name|setCommands
parameter_list|(
name|List
argument_list|<
name|ComponentCommand
argument_list|>
name|commands
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|=
name|commands
expr_stmt|;
block|}
DECL|method|addCommand (ComponentCommand command)
specifier|public
name|void
name|addCommand
parameter_list|(
name|ComponentCommand
name|command
parameter_list|)
block|{
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\"name\": "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\n\"commandScript\" :"
argument_list|)
operator|.
name|append
argument_list|(
name|commandScript
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

