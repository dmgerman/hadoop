begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.docstore
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_comment
comment|/**  * JSON-serializable description of a published key-val configuration.  *  * The values themselves are not serialized in the external view; they have to be served up by the far end  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|ExportEntry
specifier|public
class|class
name|ExportEntry
block|{
comment|/**    * The value of the export    */
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
comment|/**    * The container id of the container that is responsible for the export    */
DECL|field|containerId
specifier|private
name|String
name|containerId
decl_stmt|;
comment|/**    * Tag associated with the container - its usually an identifier different than container id    * that allows a soft serial id to all containers of a component - e.g. 1, 2, 3, ...    */
DECL|field|tag
specifier|private
name|String
name|tag
decl_stmt|;
comment|/**    * An export can be at the level of a component or an application    */
DECL|field|level
specifier|private
name|String
name|level
decl_stmt|;
comment|/**    * The time when the export was updated    */
DECL|field|updatedTime
specifier|private
name|String
name|updatedTime
decl_stmt|;
comment|/**    * The time when the export expires    */
DECL|field|validUntil
specifier|private
name|String
name|validUntil
decl_stmt|;
DECL|method|ExportEntry ()
specifier|public
name|ExportEntry
parameter_list|()
block|{   }
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getContainerId ()
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|setContainerId (String containerId)
specifier|public
name|void
name|setContainerId
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
DECL|method|getTag ()
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
DECL|method|setTag (String tag)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|getLevel ()
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
DECL|method|setLevel (String level)
specifier|public
name|void
name|setLevel
parameter_list|(
name|String
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|getUpdatedTime ()
specifier|public
name|String
name|getUpdatedTime
parameter_list|()
block|{
return|return
name|updatedTime
return|;
block|}
DECL|method|setUpdatedTime (String updatedTime)
specifier|public
name|void
name|setUpdatedTime
parameter_list|(
name|String
name|updatedTime
parameter_list|)
block|{
name|this
operator|.
name|updatedTime
operator|=
name|updatedTime
expr_stmt|;
block|}
DECL|method|getValidUntil ()
specifier|public
name|String
name|getValidUntil
parameter_list|()
block|{
return|return
name|validUntil
return|;
block|}
DECL|method|setValidUntil (String validUntil)
specifier|public
name|void
name|setValidUntil
parameter_list|(
name|String
name|validUntil
parameter_list|)
block|{
name|this
operator|.
name|validUntil
operator|=
name|validUntil
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"ExportEntry{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"value='"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"',"
argument_list|)
operator|.
name|append
argument_list|(
literal|"containerId='"
argument_list|)
operator|.
name|append
argument_list|(
name|containerId
argument_list|)
operator|.
name|append
argument_list|(
literal|"',"
argument_list|)
operator|.
name|append
argument_list|(
literal|"tag='"
argument_list|)
operator|.
name|append
argument_list|(
name|tag
argument_list|)
operator|.
name|append
argument_list|(
literal|"',"
argument_list|)
operator|.
name|append
argument_list|(
literal|"level='"
argument_list|)
operator|.
name|append
argument_list|(
name|level
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
operator|.
name|append
argument_list|(
literal|"updatedTime='"
argument_list|)
operator|.
name|append
argument_list|(
name|updatedTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
operator|.
name|append
argument_list|(
literal|"validUntil='"
argument_list|)
operator|.
name|append
argument_list|(
name|validUntil
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

