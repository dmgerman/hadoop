begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.view
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|view
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|DIV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ComponentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApi
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
DECL|class|ContainerStatsBlock
specifier|public
class|class
name|ContainerStatsBlock
extends|extends
name|SliderHamletBlock
block|{
DECL|field|EVEN
DECL|field|ODD
DECL|field|BOLD
DECL|field|SCHEME
DECL|field|PATH
specifier|private
specifier|static
specifier|final
name|String
name|EVEN
init|=
literal|"even"
decl_stmt|,
name|ODD
init|=
literal|"odd"
decl_stmt|,
name|BOLD
init|=
literal|"bold"
decl_stmt|,
name|SCHEME
init|=
literal|"http://"
decl_stmt|,
name|PATH
init|=
literal|"/node/container/"
decl_stmt|;
comment|// Some functions that help transform the data into an object we can use to abstract presentation specifics
DECL|field|stringIntPairFunc
specifier|protected
specifier|static
specifier|final
name|Function
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|stringIntPairFunc
init|=
name|toTableContentFunction
argument_list|()
decl_stmt|;
DECL|field|stringLongPairFunc
specifier|protected
specifier|static
specifier|final
name|Function
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|Long
argument_list|>
argument_list|>
name|stringLongPairFunc
init|=
name|toTableContentFunction
argument_list|()
decl_stmt|;
DECL|field|stringStringPairFunc
specifier|protected
specifier|static
specifier|final
name|Function
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
argument_list|>
name|stringStringPairFunc
init|=
name|toTableContentFunction
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|ContainerStatsBlock (WebAppApi slider)
specifier|public
name|ContainerStatsBlock
parameter_list|(
name|WebAppApi
name|slider
parameter_list|)
block|{
name|super
argument_list|(
name|slider
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sort a collection of ClusterNodes by name    */
DECL|class|ClusterNodeNameComparator
specifier|protected
specifier|static
class|class
name|ClusterNodeNameComparator
implements|implements
name|Comparator
argument_list|<
name|ClusterNode
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (ClusterNode node1, ClusterNode node2)
specifier|public
name|int
name|compare
parameter_list|(
name|ClusterNode
name|node1
parameter_list|,
name|ClusterNode
name|node2
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|node1
operator|&&
literal|null
operator|!=
name|node2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|node1
operator|&&
literal|null
operator|==
name|node2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|node1
condition|)
block|{
return|return
literal|0
return|;
block|}
specifier|final
name|String
name|name1
init|=
name|node1
operator|.
name|name
decl_stmt|,
name|name2
init|=
name|node2
operator|.
name|name
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name1
operator|&&
literal|null
operator|!=
name|name2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|name1
operator|&&
literal|null
operator|==
name|name2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|name1
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|name1
operator|.
name|compareTo
argument_list|(
name|name2
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|containerInstances
init|=
name|getContainerInstances
argument_list|(
name|appState
operator|.
name|cloneOwnedContainerList
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|clusterNodeMap
init|=
name|appState
operator|.
name|getRoleClusterNodeMapping
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInformation
argument_list|>
name|componentInfoMap
init|=
name|appState
operator|.
name|getComponentInfoSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|clusterNodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
name|clusterNodesInRole
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//final RoleStatus roleStatus = entry.getValue();
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|html
operator|.
name|div
argument_list|(
literal|"role-info ui-widget-content ui-corner-all"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClusterNode
argument_list|>
name|nodesInRole
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|clusterNodesInRole
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|div
operator|.
name|h2
argument_list|(
name|BOLD
argument_list|,
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// Generate the details on this role
name|ComponentInformation
name|componentInfo
init|=
name|componentInfoMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentInfo
operator|!=
literal|null
condition|)
block|{
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|stats
init|=
name|componentInfo
operator|.
name|buildStatistics
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|generateRoleDetails
argument_list|(
name|div
argument_list|,
literal|"role-stats-wrap"
argument_list|,
literal|"Specifications"
argument_list|,
name|Iterables
operator|.
name|transform
argument_list|(
name|stats
argument_list|,
name|stringIntPairFunc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Sort the ClusterNodes by their name (containerid)
name|Collections
operator|.
name|sort
argument_list|(
name|nodesInRole
argument_list|,
operator|new
name|ClusterNodeNameComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate the containers running this role
name|generateRoleDetails
argument_list|(
name|div
argument_list|,
literal|"role-stats-containers"
argument_list|,
literal|"Containers"
argument_list|,
name|Iterables
operator|.
name|transform
argument_list|(
name|nodesInRole
argument_list|,
operator|new
name|Function
argument_list|<
name|ClusterNode
argument_list|,
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
name|apply
parameter_list|(
name|ClusterNode
name|input
parameter_list|)
block|{
specifier|final
name|String
name|containerId
init|=
name|input
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|containerInstances
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|RoleInstance
name|roleInst
init|=
name|containerInstances
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleInst
operator|.
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|Maps
operator|.
expr|<
name|TableContent
operator|,
name|String
operator|>
name|immutableEntry
argument_list|(
operator|new
name|TableAnchorContent
argument_list|(
name|containerId
argument_list|,
name|buildNodeUrlForContainer
argument_list|(
name|roleInst
operator|.
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|new
name|TableContent
argument_list|(
name|input
operator|.
name|name
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterDescription
name|desc
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|desc
operator|.
name|getRole
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
argument_list|>
name|tableContent
decl_stmt|;
comment|// Generate the pairs of data in the expected form
if|if
condition|(
literal|null
operator|!=
name|options
condition|)
block|{
name|tableContent
operator|=
name|Iterables
operator|.
name|transform
argument_list|(
name|options
operator|.
name|entrySet
argument_list|()
argument_list|,
name|stringStringPairFunc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Or catch that we have no options and provide "empty"
name|tableContent
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
comment|// Generate the options used by this role
name|generateRoleDetails
argument_list|(
name|div
argument_list|,
literal|"role-options-wrap"
argument_list|,
literal|"Role Options"
argument_list|,
name|tableContent
argument_list|)
expr_stmt|;
comment|// Close the div for this role
name|div
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toTableContentFunction ()
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Function
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|T
argument_list|>
argument_list|>
name|toTableContentFunction
parameter_list|()
block|{
return|return
operator|new
name|Function
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|TableContent
argument_list|,
name|T
argument_list|>
name|apply
parameter_list|(
annotation|@
name|Nonnull
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|new
name|TableContent
argument_list|(
name|input
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|input
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getContainerInstances (List<RoleInstance> roleInstances)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|getContainerInstances
parameter_list|(
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|roleInstances
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|roleInstances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RoleInstance
name|roleInstance
range|:
name|roleInstances
control|)
block|{
comment|// UUID is the containerId
name|map
operator|.
name|put
argument_list|(
name|roleInstance
operator|.
name|id
argument_list|,
name|roleInstance
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Given a div, a name for this data, and some pairs of data, generate a nice HTML table. If contents is empty (of size zero), then a mesage will be printed    * that there were no items instead of an empty table.    *    */
DECL|method|generateRoleDetails (DIV<Hamlet> parent, String divSelector, String detailsName, Iterable<Entry<T1,T2>> contents)
specifier|protected
parameter_list|<
name|T1
extends|extends
name|TableContent
parameter_list|,
name|T2
parameter_list|>
name|void
name|generateRoleDetails
parameter_list|(
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|parent
parameter_list|,
name|String
name|divSelector
parameter_list|,
name|String
name|detailsName
parameter_list|,
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
argument_list|>
name|contents
parameter_list|)
block|{
specifier|final
name|DIV
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|div
init|=
name|parent
operator|.
name|div
argument_list|(
name|divSelector
argument_list|)
operator|.
name|h3
argument_list|(
name|BOLD
argument_list|,
name|detailsName
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|table
init|=
literal|null
decl_stmt|;
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|tbody
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|content
range|:
name|contents
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|table
condition|)
block|{
name|table
operator|=
name|div
operator|.
name|table
argument_list|(
literal|"ui-widget-content ui-corner-bottom"
argument_list|)
expr_stmt|;
name|tbody
operator|=
name|table
operator|.
name|tbody
argument_list|()
expr_stmt|;
block|}
name|TR
argument_list|<
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|row
init|=
name|tbody
operator|.
name|tr
argument_list|(
name|offset
operator|%
literal|2
operator|==
literal|0
condition|?
name|EVEN
else|:
name|ODD
argument_list|)
decl_stmt|;
comment|// Defer to the implementation of the TableContent for what the cell should contain
name|content
operator|.
name|getKey
argument_list|()
operator|.
name|printCell
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// Only add the second column if the element is non-null
comment|// This also lets us avoid making a second method if we're only making a one-column table
if|if
condition|(
literal|null
operator|!=
name|content
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|row
operator|.
name|td
argument_list|(
name|content
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|_
argument_list|()
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
comment|// If we made a table, close it out
if|if
condition|(
literal|null
operator|!=
name|table
condition|)
block|{
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise, throw in a nice "no content" message
name|div
operator|.
name|p
argument_list|(
literal|"no-table-contents"
argument_list|)
operator|.
name|_
argument_list|(
literal|"None"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
comment|// Close out the initial div
name|div
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
comment|/**    * Build a URL from the address:port and container ID directly to the NodeManager service    * @param nodeAddress    * @param containerId    * @return    */
DECL|method|buildNodeUrlForContainer (String nodeAddress, String containerId)
specifier|protected
name|String
name|buildNodeUrlForContainer
parameter_list|(
name|String
name|nodeAddress
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|SCHEME
operator|.
name|length
argument_list|()
operator|+
name|nodeAddress
operator|.
name|length
argument_list|()
operator|+
name|PATH
operator|.
name|length
argument_list|()
operator|+
name|containerId
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SCHEME
argument_list|)
operator|.
name|append
argument_list|(
name|nodeAddress
argument_list|)
operator|.
name|append
argument_list|(
name|PATH
argument_list|)
operator|.
name|append
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Creates a table cell with the provided String as content.    */
DECL|class|TableContent
specifier|protected
specifier|static
class|class
name|TableContent
block|{
DECL|field|cell
specifier|private
name|String
name|cell
decl_stmt|;
DECL|method|TableContent (String cell)
specifier|public
name|TableContent
parameter_list|(
name|String
name|cell
parameter_list|)
block|{
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
block|}
DECL|method|getCell ()
specifier|public
name|String
name|getCell
parameter_list|()
block|{
return|return
name|cell
return|;
block|}
comment|/**      * Adds a td to the given tr. The tr is not closed       * @param tableRow      */
DECL|method|printCell (TR<?> tableRow)
specifier|public
name|void
name|printCell
parameter_list|(
name|TR
argument_list|<
name|?
argument_list|>
name|tableRow
parameter_list|)
block|{
name|tableRow
operator|.
name|td
argument_list|(
name|this
operator|.
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a table cell with an anchor to the given URL with the provided String as content.    */
DECL|class|TableAnchorContent
specifier|protected
specifier|static
class|class
name|TableAnchorContent
extends|extends
name|TableContent
block|{
DECL|field|anchorUrl
specifier|private
name|String
name|anchorUrl
decl_stmt|;
DECL|method|TableAnchorContent (String cell, String anchorUrl)
specifier|public
name|TableAnchorContent
parameter_list|(
name|String
name|cell
parameter_list|,
name|String
name|anchorUrl
parameter_list|)
block|{
name|super
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|this
operator|.
name|anchorUrl
operator|=
name|anchorUrl
expr_stmt|;
block|}
comment|/* (non-javadoc)      * @see org.apache.slider.server.appmaster.web.view.ContainerStatsBlock$TableContent#printCell()      */
annotation|@
name|Override
DECL|method|printCell (TR<?> tableRow)
specifier|public
name|void
name|printCell
parameter_list|(
name|TR
argument_list|<
name|?
argument_list|>
name|tableRow
parameter_list|)
block|{
name|tableRow
operator|.
name|td
argument_list|()
operator|.
name|a
argument_list|(
name|anchorUrl
argument_list|,
name|getCell
argument_list|()
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

