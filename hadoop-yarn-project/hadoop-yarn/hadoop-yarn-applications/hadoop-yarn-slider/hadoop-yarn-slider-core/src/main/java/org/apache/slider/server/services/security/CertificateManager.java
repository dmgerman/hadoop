begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|CertificateManager
specifier|public
class|class
name|CertificateManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CertificateManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GEN_SRVR_KEY
specifier|private
specifier|static
specifier|final
name|String
name|GEN_SRVR_KEY
init|=
literal|"openssl genrsa -des3 "
operator|+
literal|"-passout pass:{0} -out {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2} 4096 "
decl_stmt|;
DECL|field|GEN_SRVR_REQ
specifier|private
specifier|static
specifier|final
name|String
name|GEN_SRVR_REQ
init|=
literal|"openssl req -passin pass:{0} "
operator|+
literal|"-new -key {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2} -out {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{5} -config {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"ca.config "
operator|+
literal|"-subj {6} -batch"
decl_stmt|;
DECL|field|SIGN_SRVR_CRT
specifier|private
specifier|static
specifier|final
name|String
name|SIGN_SRVR_CRT
init|=
literal|"openssl ca -create_serial "
operator|+
literal|"-out {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{3} -days 365 -keyfile {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2} -key {0} -selfsign -extensions jdk7_ca -config {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"ca.config -batch -infiles {1}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{5}"
decl_stmt|;
DECL|field|EXPRT_KSTR
specifier|private
specifier|static
specifier|final
name|String
name|EXPRT_KSTR
init|=
literal|"openssl pkcs12 -export"
operator|+
literal|" -in {2}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{4} -inkey {2}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{3} -certfile {2}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{4} -out {2}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{5} -password pass:{1} -passin pass:{0} \n"
decl_stmt|;
DECL|field|REVOKE_AGENT_CRT
specifier|private
specifier|static
specifier|final
name|String
name|REVOKE_AGENT_CRT
init|=
literal|"openssl ca "
operator|+
literal|"-config {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"ca.config -keyfile {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{4} -revoke {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2} -batch "
operator|+
literal|"-passin pass:{3} -cert {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{5}"
decl_stmt|;
DECL|field|SIGN_AGENT_CRT
specifier|private
specifier|static
specifier|final
name|String
name|SIGN_AGENT_CRT
init|=
literal|"openssl ca -config "
operator|+
literal|"{0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"ca.config -in {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{1} -out {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2} -batch -passin pass:{3} "
operator|+
literal|"-keyfile {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{4} -cert {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{5}"
decl_stmt|;
DECL|field|GEN_AGENT_KEY
specifier|private
specifier|static
specifier|final
name|String
name|GEN_AGENT_KEY
init|=
literal|"openssl req -new -newkey "
operator|+
literal|"rsa:1024 -nodes -keyout {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2}.key -subj {1} -out {0}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"{2}.csr "
operator|+
literal|"-config {3}"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"ca.config "
decl_stmt|;
DECL|field|passphrase
specifier|private
name|String
name|passphrase
decl_stmt|;
DECL|field|applicationName
specifier|private
name|String
name|applicationName
decl_stmt|;
DECL|method|initialize (MapOperations compOperations)
specifier|public
name|void
name|initialize
parameter_list|(
name|MapOperations
name|compOperations
parameter_list|)
throws|throws
name|SliderException
block|{
name|String
name|hostname
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hostname
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|hostname
operator|=
literal|"localhost"
expr_stmt|;
block|}
name|this
operator|.
name|initialize
argument_list|(
name|compOperations
argument_list|,
name|hostname
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Verify that root certificate exists, generate it otherwise.     */
DECL|method|initialize (MapOperations compOperations, String hostname, String containerId, String appName)
specifier|public
name|void
name|initialize
parameter_list|(
name|MapOperations
name|compOperations
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|appName
parameter_list|)
throws|throws
name|SliderException
block|{
name|SecurityUtils
operator|.
name|initializeSecurityParameters
argument_list|(
name|compOperations
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialization of root certificate"
argument_list|)
expr_stmt|;
name|boolean
name|certExists
init|=
name|isCertExists
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Certificate exists:"
operator|+
name|certExists
argument_list|)
expr_stmt|;
name|this
operator|.
name|applicationName
operator|=
name|appName
expr_stmt|;
if|if
condition|(
operator|!
name|certExists
condition|)
block|{
name|generateAMKeystore
argument_list|(
name|hostname
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks root certificate state.    * @return "true" if certificate exists    */
DECL|method|isCertExists ()
specifier|private
name|boolean
name|isCertExists
parameter_list|()
block|{
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|String
name|srvrCrtName
init|=
name|SliderKeys
operator|.
name|CRT_FILE_NAME
decl_stmt|;
name|File
name|certFile
init|=
operator|new
name|File
argument_list|(
name|srvrKstrDir
operator|+
name|File
operator|.
name|separator
operator|+
name|srvrCrtName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"srvrKstrDir = "
operator|+
name|srvrKstrDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"srvrCrtName = "
operator|+
name|srvrCrtName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"certFile = "
operator|+
name|certFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|certFile
operator|.
name|exists
argument_list|()
return|;
block|}
DECL|method|setPassphrase (String passphrase)
specifier|public
name|void
name|setPassphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|this
operator|.
name|passphrase
operator|=
name|passphrase
expr_stmt|;
block|}
DECL|class|StreamConsumer
class|class
name|StreamConsumer
extends|extends
name|Thread
block|{
DECL|field|is
name|InputStream
name|is
decl_stmt|;
DECL|field|logOutput
name|boolean
name|logOutput
decl_stmt|;
DECL|method|StreamConsumer (InputStream is, boolean logOutput)
name|StreamConsumer
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|boolean
name|logOutput
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|logOutput
operator|=
name|logOutput
expr_stmt|;
block|}
DECL|method|StreamConsumer (InputStream is)
name|StreamConsumer
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|this
argument_list|(
name|is
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
if|if
condition|(
name|logOutput
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during processing of process stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Runs os command    *    * @return command execution exit code    */
DECL|method|runCommand (String command)
specifier|private
name|int
name|runCommand
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|SliderException
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|Process
name|process
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|process
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|StreamConsumer
name|outputConsumer
init|=
operator|new
name|StreamConsumer
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StreamConsumer
name|errorConsumer
init|=
operator|new
name|StreamConsumer
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outputConsumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|errorConsumer
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|SecurityUtils
operator|.
name|logOpenSslExitCode
argument_list|(
name|command
argument_list|,
name|process
operator|.
name|exitValue
argument_list|()
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|process
operator|.
name|exitValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|exitCode
argument_list|,
literal|"Error running command %s"
argument_list|,
name|command
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|exitCode
return|;
comment|//some exception occurred
block|}
DECL|method|generateContainerCertificate (String hostname, String identifier)
specifier|public
specifier|synchronized
name|void
name|generateContainerCertificate
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|identifier
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Generation of certificate for {}"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|Object
index|[]
name|scriptArgs
init|=
block|{
name|srvrKstrDir
block|,
name|getSubjectDN
argument_list|(
name|hostname
argument_list|,
name|identifier
argument_list|,
name|this
operator|.
name|applicationName
argument_list|)
block|,
name|identifier
block|,
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|String
name|command
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|GEN_AGENT_KEY
argument_list|,
name|scriptArgs
argument_list|)
decl_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|signAgentCertificate
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error generating the agent certificate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateContainerKeystore (String hostname, String requesterId, String role, String keystorePass)
specifier|public
specifier|synchronized
name|SecurityStore
name|generateContainerKeystore
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|requesterId
parameter_list|,
name|String
name|role
parameter_list|,
name|String
name|keystorePass
parameter_list|)
throws|throws
name|SliderException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Generation of container keystore for container {} on {}"
argument_list|,
name|requesterId
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|generateContainerCertificate
argument_list|(
name|hostname
argument_list|,
name|requesterId
argument_list|)
expr_stmt|;
comment|// come up with correct args to invoke keystore command
name|String
name|srvrCrtPass
init|=
name|SecurityUtils
operator|.
name|getKeystorePass
argument_list|()
decl_stmt|;
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|String
name|containerCrtName
init|=
name|requesterId
operator|+
literal|".crt"
decl_stmt|;
name|String
name|containerKeyName
init|=
name|requesterId
operator|+
literal|".key"
decl_stmt|;
name|String
name|kstrName
init|=
name|getKeystoreFileName
argument_list|(
name|requesterId
argument_list|,
name|role
argument_list|)
decl_stmt|;
name|Object
index|[]
name|scriptArgs
init|=
block|{
name|srvrCrtPass
block|,
name|keystorePass
block|,
name|srvrKstrDir
block|,
name|containerKeyName
block|,
name|containerCrtName
block|,
name|kstrName
block|}
decl_stmt|;
name|String
name|command
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPRT_KSTR
argument_list|,
name|scriptArgs
argument_list|)
decl_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
operator|new
name|SecurityStore
argument_list|(
operator|new
name|File
argument_list|(
name|srvrKstrDir
argument_list|,
name|kstrName
argument_list|)
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|keystore
argument_list|)
return|;
block|}
DECL|method|getKeystoreFileName (String containerId, String role)
specifier|private
specifier|static
name|String
name|getKeystoreFileName
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|role
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"keystore-%s-%s.p12"
argument_list|,
name|containerId
argument_list|,
name|role
operator|!=
literal|null
condition|?
name|role
else|:
literal|""
argument_list|)
return|;
block|}
DECL|method|generateAMKeystore (String hostname, String containerId)
specifier|private
name|void
name|generateAMKeystore
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|containerId
parameter_list|)
throws|throws
name|SliderException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Generation of server certificate"
argument_list|)
expr_stmt|;
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|String
name|srvrCrtName
init|=
name|SliderKeys
operator|.
name|CRT_FILE_NAME
decl_stmt|;
name|String
name|srvrCsrName
init|=
name|SliderKeys
operator|.
name|CSR_FILE_NAME
decl_stmt|;
name|String
name|srvrKeyName
init|=
name|SliderKeys
operator|.
name|KEY_FILE_NAME
decl_stmt|;
name|String
name|kstrName
init|=
name|SliderKeys
operator|.
name|KEYSTORE_FILE_NAME
decl_stmt|;
name|String
name|srvrCrtPass
init|=
name|SecurityUtils
operator|.
name|getKeystorePass
argument_list|()
decl_stmt|;
name|Object
index|[]
name|scriptArgs
init|=
block|{
name|srvrCrtPass
block|,
name|srvrKstrDir
block|,
name|srvrKeyName
block|,
name|srvrCrtName
block|,
name|kstrName
block|,
name|srvrCsrName
block|,
name|getSubjectDN
argument_list|(
name|hostname
argument_list|,
name|containerId
argument_list|,
name|this
operator|.
name|applicationName
argument_list|)
block|}
decl_stmt|;
name|String
name|command
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|GEN_SRVR_KEY
argument_list|,
name|scriptArgs
argument_list|)
decl_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|GEN_SRVR_REQ
argument_list|,
name|scriptArgs
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|SIGN_SRVR_CRT
argument_list|,
name|scriptArgs
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keystoreArgs
init|=
block|{
name|srvrCrtPass
block|,
name|srvrCrtPass
block|,
name|srvrKstrDir
block|,
name|srvrKeyName
block|,
name|srvrCrtName
block|,
name|kstrName
block|,
name|srvrCsrName
block|}
decl_stmt|;
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPRT_KSTR
argument_list|,
name|keystoreArgs
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
DECL|method|generateContainerTruststore (String containerId, String role, String truststorePass)
specifier|public
name|SecurityStore
name|generateContainerTruststore
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|role
parameter_list|,
name|String
name|truststorePass
parameter_list|)
throws|throws
name|SliderException
block|{
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|String
name|srvrCrtName
init|=
name|SliderKeys
operator|.
name|CRT_FILE_NAME
decl_stmt|;
name|String
name|srvrCsrName
init|=
name|SliderKeys
operator|.
name|CSR_FILE_NAME
decl_stmt|;
name|String
name|srvrKeyName
init|=
name|SliderKeys
operator|.
name|KEY_FILE_NAME
decl_stmt|;
name|String
name|kstrName
init|=
name|getTruststoreFileName
argument_list|(
name|role
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|String
name|srvrCrtPass
init|=
name|SecurityUtils
operator|.
name|getKeystorePass
argument_list|()
decl_stmt|;
name|Object
index|[]
name|scriptArgs
init|=
block|{
name|srvrCrtPass
block|,
name|truststorePass
block|,
name|srvrKstrDir
block|,
name|srvrKeyName
block|,
name|srvrCrtName
block|,
name|kstrName
block|,
name|srvrCsrName
block|}
decl_stmt|;
name|String
name|command
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPRT_KSTR
argument_list|,
name|scriptArgs
argument_list|)
decl_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
operator|new
name|SecurityStore
argument_list|(
operator|new
name|File
argument_list|(
name|srvrKstrDir
argument_list|,
name|kstrName
argument_list|)
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|truststore
argument_list|)
return|;
block|}
DECL|method|getTruststoreFileName (String role, String containerId)
specifier|private
specifier|static
name|String
name|getTruststoreFileName
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"truststore-%s-%s.p12"
argument_list|,
name|containerId
argument_list|,
name|role
operator|!=
literal|null
condition|?
name|role
else|:
literal|""
argument_list|)
return|;
block|}
comment|/**    * Returns server certificate content    * @return string with server certificate content    */
DECL|method|getServerCert ()
specifier|public
name|String
name|getServerCert
parameter_list|()
block|{
name|File
name|certFile
init|=
name|getServerCertficateFilePath
argument_list|()
decl_stmt|;
name|String
name|srvrCrtContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srvrCrtContent
operator|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|certFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|srvrCrtContent
return|;
block|}
DECL|method|getServerCertficateFilePath ()
specifier|public
specifier|static
name|File
name|getServerCertficateFilePath
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s%s"
argument_list|,
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
name|File
operator|.
name|separator
argument_list|,
name|SliderKeys
operator|.
name|CRT_FILE_NAME
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAgentCertficateFilePath (String containerId)
specifier|public
specifier|static
name|File
name|getAgentCertficateFilePath
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s%s.crt"
argument_list|,
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
name|File
operator|.
name|separator
argument_list|,
name|containerId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getContainerKeystoreFilePath (String containerId, String role)
specifier|public
specifier|static
name|File
name|getContainerKeystoreFilePath
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|role
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
name|getKeystoreFileName
argument_list|(
name|containerId
argument_list|,
name|role
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getContainerTruststoreFilePath (String role, String containerId)
specifier|public
specifier|static
name|File
name|getContainerTruststoreFilePath
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
name|getTruststoreFileName
argument_list|(
name|role
argument_list|,
name|containerId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAgentKeyFilePath (String containerId)
specifier|public
specifier|static
name|File
name|getAgentKeyFilePath
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s%s.key"
argument_list|,
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
name|File
operator|.
name|separator
argument_list|,
name|containerId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Signs agent certificate    * Adds agent certificate to server keystore    * @return string with agent signed certificate content    */
DECL|method|signAgentCrt (String agentHostname, String agentCrtReqContent, String passphraseAgent)
specifier|public
specifier|synchronized
name|SignCertResponse
name|signAgentCrt
parameter_list|(
name|String
name|agentHostname
parameter_list|,
name|String
name|agentCrtReqContent
parameter_list|,
name|String
name|passphraseAgent
parameter_list|)
block|{
name|SignCertResponse
name|response
init|=
operator|new
name|SignCertResponse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Signing of agent certificate"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying passphrase"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|passphrase
operator|.
name|equals
argument_list|(
name|passphraseAgent
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incorrect passphrase from the agent"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|SignCertResponse
operator|.
name|ERROR_STATUS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMessage
argument_list|(
literal|"Incorrect passphrase from the agent"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|String
name|srvrCrtPass
init|=
name|SecurityUtils
operator|.
name|getKeystorePass
argument_list|()
decl_stmt|;
name|String
name|srvrCrtName
init|=
name|SliderKeys
operator|.
name|CRT_FILE_NAME
decl_stmt|;
name|String
name|srvrKeyName
init|=
name|SliderKeys
operator|.
name|KEY_FILE_NAME
decl_stmt|;
name|String
name|agentCrtReqName
init|=
name|agentHostname
operator|+
literal|".csr"
decl_stmt|;
name|String
name|agentCrtName
init|=
name|agentHostname
operator|+
literal|".crt"
decl_stmt|;
name|Object
index|[]
name|scriptArgs
init|=
block|{
name|srvrKstrDir
block|,
name|agentCrtReqName
block|,
name|agentCrtName
block|,
name|srvrCrtPass
block|,
name|srvrKeyName
block|,
name|srvrCrtName
block|}
decl_stmt|;
comment|//Revoke previous agent certificate if exists
name|File
name|agentCrtFile
init|=
operator|new
name|File
argument_list|(
name|srvrKstrDir
operator|+
name|File
operator|.
name|separator
operator|+
name|agentCrtName
argument_list|)
decl_stmt|;
name|String
name|command
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|agentCrtFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Revoking of "
operator|+
name|agentHostname
operator|+
literal|" certificate."
argument_list|)
expr_stmt|;
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|REVOKE_AGENT_CRT
argument_list|,
name|scriptArgs
argument_list|)
expr_stmt|;
try|try
block|{
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
name|int
name|commandExitCode
init|=
name|e
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|SignCertResponse
operator|.
name|ERROR_STATUS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMessage
argument_list|(
name|SecurityUtils
operator|.
name|getOpenSslCommandResult
argument_list|(
name|command
argument_list|,
name|commandExitCode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
name|File
name|agentCrtReqFile
init|=
operator|new
name|File
argument_list|(
name|srvrKstrDir
operator|+
name|File
operator|.
name|separator
operator|+
name|agentCrtReqName
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|agentCrtReqFile
argument_list|,
name|agentCrtReqContent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|SIGN_AGENT_CRT
argument_list|,
name|scriptArgs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|SecurityUtils
operator|.
name|hideOpenSslPassword
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
name|int
name|commandExitCode
init|=
name|e
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|SignCertResponse
operator|.
name|ERROR_STATUS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMessage
argument_list|(
name|SecurityUtils
operator|.
name|getOpenSslCommandResult
argument_list|(
name|command
argument_list|,
name|commandExitCode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|agentCrtContent
init|=
literal|""
decl_stmt|;
try|try
block|{
name|agentCrtContent
operator|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|agentCrtFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading signed agent certificate"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|SignCertResponse
operator|.
name|ERROR_STATUS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMessage
argument_list|(
literal|"Error reading signed agent certificate"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|response
operator|.
name|setResult
argument_list|(
name|SignCertResponse
operator|.
name|OK_STATUS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setSignedCa
argument_list|(
name|agentCrtContent
argument_list|)
expr_stmt|;
comment|//LOG.info(ShellCommandUtil.getOpenSslCommandResult(command, commandExitCode));
return|return
name|response
return|;
block|}
DECL|method|signAgentCertificate (String containerId)
specifier|private
name|String
name|signAgentCertificate
parameter_list|(
name|String
name|containerId
parameter_list|)
throws|throws
name|SliderException
block|{
name|String
name|srvrKstrDir
init|=
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
decl_stmt|;
name|String
name|srvrCrtPass
init|=
name|SecurityUtils
operator|.
name|getKeystorePass
argument_list|()
decl_stmt|;
name|String
name|srvrCrtName
init|=
name|SliderKeys
operator|.
name|CRT_FILE_NAME
decl_stmt|;
name|String
name|srvrKeyName
init|=
name|SliderKeys
operator|.
name|KEY_FILE_NAME
decl_stmt|;
name|String
name|agentCrtReqName
init|=
name|containerId
operator|+
literal|".csr"
decl_stmt|;
name|String
name|agentCrtName
init|=
name|containerId
operator|+
literal|".crt"
decl_stmt|;
comment|// server certificate must exist already
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|srvrKstrDir
argument_list|,
name|srvrCrtName
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"CA certificate not generated"
argument_list|)
throw|;
block|}
name|Object
index|[]
name|scriptArgs
init|=
block|{
name|srvrKstrDir
block|,
name|agentCrtReqName
block|,
name|agentCrtName
block|,
name|srvrCrtPass
block|,
name|srvrKeyName
block|,
name|srvrCrtName
block|}
decl_stmt|;
comment|//Revoke previous agent certificate if exists
name|File
name|agentCrtFile
init|=
operator|new
name|File
argument_list|(
name|srvrKstrDir
operator|+
name|File
operator|.
name|separator
operator|+
name|agentCrtName
argument_list|)
decl_stmt|;
name|String
name|command
decl_stmt|;
if|if
condition|(
name|agentCrtFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Revoking of "
operator|+
name|containerId
operator|+
literal|" certificate."
argument_list|)
expr_stmt|;
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|REVOKE_AGENT_CRT
argument_list|,
name|scriptArgs
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|command
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|SIGN_AGENT_CRT
argument_list|,
name|scriptArgs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|SecurityUtils
operator|.
name|hideOpenSslPassword
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
name|agentCrtName
return|;
block|}
DECL|method|getSubjectDN (String hostname, String containerId, String appName)
specifier|private
name|String
name|getSubjectDN
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|appName
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"/CN=%s%s%s"
argument_list|,
name|hostname
argument_list|,
name|containerId
operator|!=
literal|null
condition|?
literal|"/OU="
operator|+
name|containerId
else|:
literal|""
argument_list|,
name|appName
operator|!=
literal|null
condition|?
literal|"/OU="
operator|+
name|appName
else|:
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

