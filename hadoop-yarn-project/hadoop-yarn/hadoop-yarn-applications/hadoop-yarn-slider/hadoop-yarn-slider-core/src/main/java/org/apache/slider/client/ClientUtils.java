begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigurationOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|retrieve
operator|.
name|RegistryRetriever
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
operator|.
name|currentUser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
operator|.
name|servicePath
import|;
end_import

begin_class
DECL|class|ClientUtils
specifier|public
class|class
name|ClientUtils
block|{
DECL|method|lookupServiceRecord (RegistryOperations rops, String user, String name)
specifier|public
specifier|static
name|ServiceRecord
name|lookupServiceRecord
parameter_list|(
name|RegistryOperations
name|rops
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
return|return
name|lookupServiceRecord
argument_list|(
name|rops
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|lookupServiceRecord (RegistryOperations rops, String user, String type, String name)
specifier|public
specifier|static
name|ServiceRecord
name|lookupServiceRecord
parameter_list|(
name|RegistryOperations
name|rops
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|user
operator|=
name|currentUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|RegistryPathUtils
operator|.
name|encodeForRegistry
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|SliderKeys
operator|.
name|APP_TYPE
expr_stmt|;
block|}
name|String
name|path
init|=
name|servicePath
argument_list|(
name|user
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|resolve
argument_list|(
name|rops
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|resolve (RegistryOperations rops, String path)
specifier|public
specifier|static
name|ServiceRecord
name|resolve
parameter_list|(
name|RegistryOperations
name|rops
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
try|try
block|{
return|return
name|rops
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
decl||
name|NoRecordException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getConfigFromRegistry ( RegistryOperations rops, Configuration configuration, String configName, String appName, String user, boolean external)
specifier|public
specifier|static
name|PublishedConfiguration
name|getConfigFromRegistry
parameter_list|(
name|RegistryOperations
name|rops
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|String
name|configName
parameter_list|,
name|String
name|appName
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|external
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|ServiceRecord
name|instance
init|=
name|lookupServiceRecord
argument_list|(
name|rops
argument_list|,
name|user
argument_list|,
name|appName
argument_list|)
decl_stmt|;
name|RegistryRetriever
name|retriever
init|=
operator|new
name|RegistryRetriever
argument_list|(
name|configuration
argument_list|,
name|instance
argument_list|)
decl_stmt|;
name|PublishedConfigSet
name|configurations
init|=
name|retriever
operator|.
name|getConfigurations
argument_list|(
name|external
argument_list|)
decl_stmt|;
name|PublishedConfiguration
name|published
init|=
name|retriever
operator|.
name|retrieveConfiguration
argument_list|(
name|configurations
argument_list|,
name|configName
argument_list|,
name|external
argument_list|)
decl_stmt|;
return|return
name|published
return|;
block|}
DECL|method|saveOrReturnConfig (PublishedConfiguration published, String format, File destPath, String fileName)
specifier|public
specifier|static
name|String
name|saveOrReturnConfig
parameter_list|(
name|PublishedConfiguration
name|published
parameter_list|,
name|String
name|format
parameter_list|,
name|File
name|destPath
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|BadCommandArgumentsException
throws|,
name|IOException
block|{
name|ConfigFormat
name|configFormat
init|=
name|ConfigFormat
operator|.
name|resolve
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Unknown/Unsupported format %s "
argument_list|,
name|format
argument_list|)
throw|;
block|}
name|PublishedConfigurationOutputter
name|outputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|configFormat
argument_list|,
name|published
argument_list|)
decl_stmt|;
name|boolean
name|print
init|=
name|destPath
operator|==
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|print
condition|)
block|{
if|if
condition|(
name|destPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// creating it under a directory
name|destPath
operator|=
operator|new
name|File
argument_list|(
name|destPath
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|outputter
operator|.
name|save
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|outputter
operator|.
name|asString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

