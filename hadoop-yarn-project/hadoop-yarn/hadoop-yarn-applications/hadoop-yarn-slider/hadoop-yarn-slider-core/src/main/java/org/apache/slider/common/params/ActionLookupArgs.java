begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|UsageException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
annotation|@
name|Parameters
argument_list|(
name|commandNames
operator|=
block|{
name|SliderActions
operator|.
name|ACTION_LOOKUP
block|}
argument_list|,
name|commandDescription
operator|=
name|SliderActions
operator|.
name|DESCRIBE_ACTION_LOOKUP
argument_list|)
DECL|class|ActionLookupArgs
specifier|public
class|class
name|ActionLookupArgs
extends|extends
name|AbstractActionArgs
block|{
annotation|@
name|Override
DECL|method|getActionName ()
specifier|public
name|String
name|getActionName
parameter_list|()
block|{
return|return
name|SliderActions
operator|.
name|ACTION_LOOKUP
return|;
block|}
DECL|method|getMinParams ()
specifier|public
name|int
name|getMinParams
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getMaxParams ()
specifier|public
name|int
name|getMaxParams
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_ID
block|}
argument_list|,
name|description
operator|=
literal|"ID of the application"
argument_list|)
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_OUTPUT
block|,
name|ARG_OUTPUT_SHORT
block|}
argument_list|,
name|description
operator|=
literal|"output file for any application report"
argument_list|)
DECL|field|outputFile
specifier|public
name|File
name|outputFile
decl_stmt|;
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|BadCommandArgumentsException
throws|,
name|UsageException
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Missing mandatory argument "
operator|+
name|ARG_ID
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|SliderActions
operator|.
name|ACTION_LOOKUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ARG_ID
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputFile
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ARG_OUTPUT
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

