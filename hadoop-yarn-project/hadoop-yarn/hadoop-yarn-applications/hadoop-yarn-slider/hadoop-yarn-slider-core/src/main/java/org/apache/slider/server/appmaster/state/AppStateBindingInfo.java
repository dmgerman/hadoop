begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Binding information for application states; designed to be extensible  * so that tests don't have to be massivley reworked when new arguments  * are added.  */
end_comment

begin_class
DECL|class|AppStateBindingInfo
specifier|public
class|class
name|AppStateBindingInfo
block|{
DECL|field|serviceConfig
specifier|public
name|Configuration
name|serviceConfig
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|application
specifier|public
name|Application
name|application
init|=
literal|null
decl_stmt|;
DECL|field|roles
specifier|public
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fs
specifier|public
name|FileSystem
name|fs
decl_stmt|;
DECL|field|historyPath
specifier|public
name|Path
name|historyPath
decl_stmt|;
DECL|field|liveContainers
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|liveContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|releaseSelector
specifier|public
name|ContainerReleaseSelector
name|releaseSelector
init|=
operator|new
name|SimpleReleaseSelector
argument_list|()
decl_stmt|;
DECL|field|serviceHdfsDir
specifier|public
name|String
name|serviceHdfsDir
init|=
literal|""
decl_stmt|;
comment|/** node reports off the RM. */
DECL|field|nodeReports
specifier|public
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|serviceConfig
operator|!=
literal|null
argument_list|,
literal|"null appmasterConfig"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|releaseSelector
operator|!=
literal|null
argument_list|,
literal|"null releaseSelector"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|roles
operator|!=
literal|null
argument_list|,
literal|"null providerRoles"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|fs
operator|!=
literal|null
argument_list|,
literal|"null fs"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|historyPath
operator|!=
literal|null
argument_list|,
literal|"null historyDir"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nodeReports
operator|!=
literal|null
argument_list|,
literal|"null nodeReports"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|application
operator|!=
literal|null
argument_list|,
literal|"null application"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

