begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|ParametersDelegate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|SliderProviderFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Abstract Action to build things; shares args across build and  * list  */
end_comment

begin_class
DECL|class|AbstractClusterBuildingActionArgs
specifier|public
specifier|abstract
class|class
name|AbstractClusterBuildingActionArgs
extends|extends
name|AbstractActionArgs
block|{
comment|/**    * Declare the image configuration directory to use when creating or    * reconfiguring a slider cluster. The path must be on a filesystem visible    * to all nodes in the YARN cluster. Only one configuration directory can    * be specified.    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_CONFDIR
argument_list|,
name|description
operator|=
literal|"Path to cluster configuration directory in HDFS"
argument_list|,
name|converter
operator|=
name|PathArgumentConverter
operator|.
name|class
argument_list|)
DECL|field|confdir
specifier|public
name|Path
name|confdir
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_ZKPATH
argument_list|,
name|description
operator|=
literal|"Zookeeper path for the application"
argument_list|)
DECL|field|appZKPath
specifier|public
name|String
name|appZKPath
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_ZKHOSTS
argument_list|,
name|description
operator|=
literal|"comma separated list of the Zookeeper hosts"
argument_list|)
DECL|field|zkhosts
specifier|public
name|String
name|zkhosts
decl_stmt|;
comment|/**    * --image path    * the full path to a .tar or .tar.gz path containing an HBase image.    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_IMAGE
argument_list|,
name|description
operator|=
literal|"The full path to a .tar or .tar.gz path containing the application"
argument_list|,
name|converter
operator|=
name|PathArgumentConverter
operator|.
name|class
argument_list|)
DECL|field|image
specifier|public
name|Path
name|image
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_APP_HOME
argument_list|,
name|description
operator|=
literal|"Home directory of a pre-installed application"
argument_list|)
DECL|field|appHomeDir
specifier|public
name|String
name|appHomeDir
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_PROVIDER
argument_list|,
name|description
operator|=
literal|"Provider of the specific cluster application"
argument_list|)
DECL|field|provider
specifier|public
name|String
name|provider
init|=
name|SliderProviderFactory
operator|.
name|DEFAULT_CLUSTER_TYPE
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_PACKAGE
block|}
argument_list|,
name|description
operator|=
literal|"URI to a slider package"
argument_list|)
DECL|field|packageURI
specifier|public
name|String
name|packageURI
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_RESOURCES
block|}
argument_list|,
name|description
operator|=
literal|"File defining the resources of this instance"
argument_list|)
DECL|field|resources
specifier|public
name|File
name|resources
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_TEMPLATE
block|}
argument_list|,
name|description
operator|=
literal|"Template application configuration"
argument_list|)
DECL|field|template
specifier|public
name|File
name|template
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_METAINFO
block|}
argument_list|,
name|description
operator|=
literal|"Application meta info file"
argument_list|)
DECL|field|appMetaInfo
specifier|public
name|File
name|appMetaInfo
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_METAINFO_JSON
block|}
argument_list|,
name|description
operator|=
literal|"Application meta info JSON blob"
argument_list|)
DECL|field|appMetaInfoJson
specifier|public
name|String
name|appMetaInfoJson
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_APPDEF
block|}
argument_list|,
name|description
operator|=
literal|"Application def (folder or a zip package)"
argument_list|)
DECL|field|appDef
specifier|public
name|File
name|appDef
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_QUEUE
block|}
argument_list|,
name|description
operator|=
literal|"Queue to submit the application"
argument_list|)
DECL|field|queue
specifier|public
name|String
name|queue
decl_stmt|;
annotation|@
name|ParametersDelegate
DECL|field|componentDelegate
specifier|public
name|ComponentArgsDelegate
name|componentDelegate
init|=
operator|new
name|ComponentArgsDelegate
argument_list|()
decl_stmt|;
annotation|@
name|ParametersDelegate
DECL|field|addonDelegate
specifier|public
name|AddonArgsDelegate
name|addonDelegate
init|=
operator|new
name|AddonArgsDelegate
argument_list|()
decl_stmt|;
annotation|@
name|ParametersDelegate
DECL|field|optionsDelegate
specifier|public
name|AppAndResouceOptionArgsDelegate
name|optionsDelegate
init|=
operator|new
name|AppAndResouceOptionArgsDelegate
argument_list|()
decl_stmt|;
DECL|method|getOptionsMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOptionsMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|optionsDelegate
operator|.
name|getOptionsMap
argument_list|()
return|;
block|}
comment|/**    * Get the role heap mapping (may be empty, but never null)    * @return role heap mapping    * @throws BadCommandArgumentsException parse problem    */
DECL|method|getCompOptionMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getCompOptionMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|optionsDelegate
operator|.
name|getCompOptionMap
argument_list|()
return|;
block|}
DECL|method|getResourceOptionsMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getResourceOptionsMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|optionsDelegate
operator|.
name|getResourceOptionsMap
argument_list|()
return|;
block|}
comment|/**    * Get the role heap mapping (may be empty, but never null)    * @return role heap mapping    * @throws BadCommandArgumentsException parse problem    */
DECL|method|getResourceCompOptionMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getResourceCompOptionMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|optionsDelegate
operator|.
name|getResourceCompOptionMap
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getComponentTuples ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComponentTuples
parameter_list|()
block|{
return|return
name|componentDelegate
operator|.
name|getComponentTuples
argument_list|()
return|;
block|}
comment|/**    * Get the role mapping (may be empty, but never null)    * @return role mapping    * @throws BadCommandArgumentsException parse problem    */
DECL|method|getComponentMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getComponentMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|componentDelegate
operator|.
name|getComponentMap
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAddonTuples ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAddonTuples
parameter_list|()
block|{
return|return
name|addonDelegate
operator|.
name|getAddonTuples
argument_list|()
return|;
block|}
comment|/**    * Get the list of addons (may be empty, but never null)    */
DECL|method|getAddonMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAddonMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|addonDelegate
operator|.
name|getAddonMap
argument_list|()
return|;
block|}
DECL|method|getConfdir ()
specifier|public
name|Path
name|getConfdir
parameter_list|()
block|{
return|return
name|confdir
return|;
block|}
DECL|method|getAppZKPath ()
specifier|public
name|String
name|getAppZKPath
parameter_list|()
block|{
return|return
name|appZKPath
return|;
block|}
DECL|method|getZKhosts ()
specifier|public
name|String
name|getZKhosts
parameter_list|()
block|{
return|return
name|zkhosts
return|;
block|}
DECL|method|getImage ()
specifier|public
name|Path
name|getImage
parameter_list|()
block|{
return|return
name|image
return|;
block|}
DECL|method|getAppHomeDir ()
specifier|public
name|String
name|getAppHomeDir
parameter_list|()
block|{
return|return
name|appHomeDir
return|;
block|}
DECL|method|getProvider ()
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
DECL|method|buildAppOptionsConfTree ()
specifier|public
name|ConfTree
name|buildAppOptionsConfTree
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|buildConfTree
argument_list|(
name|getOptionsMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildResourceOptionsConfTree ()
specifier|public
name|ConfTree
name|buildResourceOptionsConfTree
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|buildConfTree
argument_list|(
name|getResourceOptionsMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildConfTree (Map<String, String> optionsMap)
specifier|protected
name|ConfTree
name|buildConfTree
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|optionsMap
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
name|ConfTree
name|confTree
init|=
operator|new
name|ConfTree
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|ops
init|=
operator|new
name|ConfTreeOperations
argument_list|(
name|confTree
argument_list|)
decl_stmt|;
name|confTree
operator|.
name|global
operator|.
name|putAll
argument_list|(
name|optionsMap
argument_list|)
expr_stmt|;
return|return
name|confTree
return|;
block|}
block|}
end_class

end_unit

