begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.main
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
package|;
end_package

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|SignalHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class bundles up all the compiler warnings about abuse of sun.misc  * interrupt handling code  * into one place.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UseOfSunClasses"
argument_list|)
DECL|class|IrqHandler
specifier|public
specifier|final
class|class
name|IrqHandler
implements|implements
name|SignalHandler
block|{
DECL|field|CONTROL_C
specifier|public
specifier|static
specifier|final
name|String
name|CONTROL_C
init|=
literal|"INT"
decl_stmt|;
DECL|field|SIGTERM
specifier|public
specifier|static
specifier|final
name|String
name|SIGTERM
init|=
literal|"TERM"
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|Interrupted
name|handler
decl_stmt|;
comment|/**    * Create an IRQ handler bound to the specific interrupt    * @param name signal name    * @param handler handler    * @throws IOException    */
DECL|method|IrqHandler (String name, Interrupted handler)
specifier|public
name|IrqHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|Interrupted
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
try|try
block|{
name|Signal
operator|.
name|handle
argument_list|(
operator|new
name|Signal
argument_list|(
name|name
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not set handler for signal \""
operator|+
name|name
operator|+
literal|"\"."
operator|+
literal|"This can happen if the JVM has the -Xrs set."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IrqHandler for signal "
operator|+
name|name
return|;
block|}
comment|/**    * Handler for the JVM API for signal handling    * @param signal signal raised    */
comment|//  @Override
DECL|method|handle (Signal signal)
specifier|public
name|void
name|handle
parameter_list|(
name|Signal
name|signal
parameter_list|)
block|{
name|InterruptData
name|data
init|=
operator|new
name|InterruptData
argument_list|(
name|signal
operator|.
name|getName
argument_list|()
argument_list|,
name|signal
operator|.
name|getNumber
argument_list|()
argument_list|)
decl_stmt|;
name|handler
operator|.
name|interrupted
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interrupt data to pass on.    */
DECL|class|InterruptData
specifier|public
specifier|static
class|class
name|InterruptData
block|{
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|number
specifier|public
specifier|final
name|int
name|number
decl_stmt|;
DECL|method|InterruptData (String name, int number)
specifier|public
name|InterruptData
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"signal "
operator|+
name|name
operator|+
literal|'('
operator|+
name|number
operator|+
literal|')'
return|;
block|}
block|}
comment|/**    * Callback on interruption    */
DECL|interface|Interrupted
specifier|public
interface|interface
name|Interrupted
block|{
comment|/**      * Handle an interrupt      * @param interruptData data      */
DECL|method|interrupted (InterruptData interruptData)
name|void
name|interrupted
parameter_list|(
name|InterruptData
name|interruptData
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

