begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.actions
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|SliderAppMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * This action executes then reschedules an inner action; a limit  * can specify the number of times to run  */
end_comment

begin_class
DECL|class|RenewingAction
specifier|public
class|class
name|RenewingAction
parameter_list|<
name|A
extends|extends
name|AsyncAction
parameter_list|>
extends|extends
name|AsyncAction
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RenewingAction
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|action
specifier|private
specifier|final
name|A
name|action
decl_stmt|;
DECL|field|interval
specifier|private
name|long
name|interval
decl_stmt|;
DECL|field|timeUnit
specifier|private
name|TimeUnit
name|timeUnit
decl_stmt|;
DECL|field|executionCount
specifier|public
specifier|final
name|AtomicInteger
name|executionCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|intervalLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|intervalLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|intervalReadLock
specifier|private
specifier|final
name|Lock
name|intervalReadLock
init|=
name|intervalLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|intervalWriteLock
specifier|private
specifier|final
name|Lock
name|intervalWriteLock
init|=
name|intervalLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|limit
specifier|public
specifier|final
name|int
name|limit
decl_stmt|;
comment|/**    * Rescheduling action    * @param action action to execute    * @param initialDelay initial delay    * @param interval interval for later delays    * @param timeUnit time unit for all times    * @param limit limit on the no. of executions. If 0 or less: no limit    */
DECL|method|RenewingAction (A action, long initialDelay, long interval, TimeUnit timeUnit, int limit)
specifier|public
name|RenewingAction
parameter_list|(
name|A
name|action
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|interval
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|super
argument_list|(
literal|"renewing "
operator|+
name|action
operator|.
name|name
argument_list|,
name|initialDelay
argument_list|,
name|timeUnit
argument_list|,
name|action
operator|.
name|getAttrs
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|interval
operator|>
literal|0
argument_list|,
literal|"invalid interval: "
operator|+
name|interval
argument_list|)
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
comment|/**    * Execute the inner action then reschedule ourselves    * @param appMaster    * @param queueService    * @param appState    * @throws Exception    */
annotation|@
name|Override
DECL|method|execute (SliderAppMaster appMaster, QueueAccess queueService, AppState appState)
specifier|public
name|void
name|execute
parameter_list|(
name|SliderAppMaster
name|appMaster
parameter_list|,
name|QueueAccess
name|queueService
parameter_list|,
name|AppState
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|exCount
init|=
name|executionCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{}: Executing inner action count # {}"
argument_list|,
name|this
argument_list|,
name|exCount
argument_list|)
expr_stmt|;
name|action
operator|.
name|execute
argument_list|(
name|appMaster
argument_list|,
name|queueService
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|boolean
name|reschedule
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|reschedule
operator|=
name|limit
operator|>
name|exCount
expr_stmt|;
block|}
if|if
condition|(
name|reschedule
condition|)
block|{
name|this
operator|.
name|setNanos
argument_list|(
name|convertAndOffset
argument_list|(
name|getInterval
argument_list|()
argument_list|,
name|getTimeUnit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{}: rescheduling, new offset {} mS "
argument_list|,
name|this
argument_list|,
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|queueService
operator|.
name|schedule
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the action    * @return    */
DECL|method|getAction ()
specifier|public
name|A
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
DECL|method|getInterval ()
specifier|public
name|long
name|getInterval
parameter_list|()
block|{
name|intervalReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|interval
return|;
block|}
finally|finally
block|{
name|intervalReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateInterval (long delay, TimeUnit timeUnit)
specifier|public
name|void
name|updateInterval
parameter_list|(
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|intervalWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|interval
operator|=
name|delay
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
finally|finally
block|{
name|intervalWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTimeUnit ()
specifier|public
name|TimeUnit
name|getTimeUnit
parameter_list|()
block|{
name|intervalReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|timeUnit
return|;
block|}
finally|finally
block|{
name|intervalReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getExecutionCount ()
specifier|public
name|int
name|getExecutionCount
parameter_list|()
block|{
return|return
name|executionCount
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getLimit ()
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
block|}
end_class

end_unit

