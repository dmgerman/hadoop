begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_comment
comment|/**  * Cluster services offered by the YARN infrastructure.  */
end_comment

begin_class
DECL|class|AbstractClusterServices
specifier|public
specifier|abstract
class|class
name|AbstractClusterServices
block|{
specifier|private
specifier|final
name|DefaultResourceCalculator
DECL|field|defaultResourceCalculator
name|defaultResourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
comment|/**    * Create a resource for requests    * @return a resource which can be built up.    */
DECL|method|newResource ()
specifier|public
specifier|abstract
name|Resource
name|newResource
parameter_list|()
function_decl|;
DECL|method|newResource (int memory, int cores)
specifier|public
specifier|abstract
name|Resource
name|newResource
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|cores
parameter_list|)
function_decl|;
comment|/**    * Normalise memory, CPU and other resources according to the YARN AM-supplied    * values and the resource calculator in use (currently hard-coded to the    * {@link DefaultResourceCalculator}.    * Those resources which aren't normalized (currently: CPU) are left    * as is.    * @param resource resource requirements of a role    * @param minR minimum values of this queue    * @param maxR max values of this queue    * @return a normalized value.    */
DECL|method|normalize (Resource resource, Resource minR, Resource maxR)
specifier|public
name|Resource
name|normalize
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Resource
name|minR
parameter_list|,
name|Resource
name|maxR
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|resource
operator|!=
literal|null
argument_list|,
literal|"null resource"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|minR
operator|!=
literal|null
argument_list|,
literal|"null minR"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxR
operator|!=
literal|null
argument_list|,
literal|"null maxR"
argument_list|)
expr_stmt|;
name|Resource
name|normalize
init|=
name|defaultResourceCalculator
operator|.
name|normalize
argument_list|(
name|resource
argument_list|,
name|minR
argument_list|,
name|maxR
argument_list|,
name|minR
argument_list|)
decl_stmt|;
return|return
name|newResource
argument_list|(
name|normalize
operator|.
name|getMemory
argument_list|()
argument_list|,
name|resource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

