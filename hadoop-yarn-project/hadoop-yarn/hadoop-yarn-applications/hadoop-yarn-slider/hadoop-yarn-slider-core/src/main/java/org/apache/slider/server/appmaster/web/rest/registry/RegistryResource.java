begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.rest.registry
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|AuthenticationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoPathPermissionsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|AbstractSliderResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This is the read-only view of the YARN registry.  *   * Model:  *<ol>  *<li>a tree of nodes</li>  *<li>Default view is of children + record</li>  *</ol>  *   */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|RegistryResource
specifier|public
class|class
name|RegistryResource
extends|extends
name|AbstractSliderResource
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegistryResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SERVICE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_PATH
init|=
literal|"/{path:.*}"
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|RegistryOperations
name|registry
decl_stmt|;
comment|/**    * Construct an instance bonded to a registry    * @param slider slider API    */
DECL|method|RegistryResource (WebAppApi slider)
specifier|public
name|RegistryResource
parameter_list|(
name|WebAppApi
name|slider
parameter_list|)
block|{
name|super
argument_list|(
name|slider
argument_list|)
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|slider
operator|.
name|getRegistryOperations
argument_list|()
expr_stmt|;
block|}
comment|/**    * Internal init code, per request    * @param request incoming request     * @param uriInfo URI details    */
DECL|method|init (HttpServletRequest request, UriInfo uriInfo)
specifier|private
name|void
name|init
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getRoot (@ontext HttpServletRequest request, @Context UriInfo uriInfo)
specifier|public
name|PathEntryResource
name|getRoot
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
literal|"/"
argument_list|,
name|request
argument_list|,
name|uriInfo
argument_list|)
return|;
block|}
comment|//   {path:.*}
annotation|@
name|Path
argument_list|(
name|SERVICE_PATH
argument_list|)
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|lookup ( @athParamR) String path, @Context HttpServletRequest request, @Context UriInfo uriInfo)
specifier|public
name|PathEntryResource
name|lookup
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|init
argument_list|(
name|request
argument_list|,
name|uriInfo
argument_list|)
expr_stmt|;
return|return
name|resolvePath
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * Do the actual processing of requests to responses; can be directly    * invoked for testing.    * @param path path to query    * @return the entry    * @throws WebApplicationException on any failure.    */
DECL|method|resolvePath (String path)
specifier|public
name|PathEntryResource
name|resolvePath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|WebApplicationException
block|{
try|try
block|{
name|PathEntryResource
name|pathEntry
init|=
name|fromRegistry
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resolved:\n{}"
argument_list|,
name|pathEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|pathEntry
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|buildException
argument_list|(
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Build from the registry, filling up the children and service records.    * If there is no service record at the end of the path, that entry is     * null    * @param path path to query    * @return the built up record    * @throws IOException problems    *    */
DECL|method|fromRegistry (String path)
specifier|private
name|PathEntryResource
name|fromRegistry
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|PathEntryResource
name|entry
init|=
operator|new
name|PathEntryResource
argument_list|()
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|service
operator|=
name|registry
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoRecordException
name|e
parameter_list|)
block|{
comment|// ignoring
name|log
operator|.
name|debug
argument_list|(
literal|"No record at {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRecordException
name|e
parameter_list|)
block|{
comment|// swallowing this exception, the sign of "no entry present"
comment|// "nothing parseable"
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to resolve {}: {}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|nodes
operator|=
name|registry
operator|.
name|list
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

