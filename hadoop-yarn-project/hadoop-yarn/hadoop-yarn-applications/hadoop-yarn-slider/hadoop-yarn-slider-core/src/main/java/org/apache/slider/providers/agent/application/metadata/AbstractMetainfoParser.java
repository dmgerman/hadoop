begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|digester
operator|.
name|Digester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_comment
comment|/**  * This abstract class provide common functionality to parse metainfo.json for  * either master package or add on packages.  */
end_comment

begin_class
DECL|class|AbstractMetainfoParser
specifier|public
specifier|abstract
class|class
name|AbstractMetainfoParser
block|{
DECL|field|gsonBuilder
specifier|protected
specifier|final
name|GsonBuilder
name|gsonBuilder
init|=
operator|new
name|GsonBuilder
argument_list|()
decl_stmt|;
DECL|field|gson
specifier|protected
specifier|final
name|Gson
name|gson
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractMetainfoParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AbstractMetainfoParser ()
specifier|public
name|AbstractMetainfoParser
parameter_list|()
block|{
name|gson
operator|=
name|gsonBuilder
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|/**    * Convert to a JSON string    *    * @return a JSON string description    *    * @throws IOException Problems mapping/writing the object    */
DECL|method|toJsonString (Metainfo metaInfo)
specifier|public
name|String
name|toJsonString
parameter_list|(
name|Metainfo
name|metaInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|gson
operator|.
name|toJson
argument_list|(
name|metaInfo
argument_list|)
return|;
block|}
comment|/**    * Convert from JSON    *    * @param json input    *    * @return the parsed JSON    *    * @throws IOException IO    */
DECL|method|fromJsonString (String json)
specifier|public
name|Metainfo
name|fromJsonString
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|gson
operator|.
name|fromJson
argument_list|(
name|json
argument_list|,
name|Metainfo
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Parse metainfo from an IOStream    *    * @param is    *    * @return    *    * @throws IOException    */
DECL|method|fromJsonStream (InputStream is)
specifier|public
name|Metainfo
name|fromJsonStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"loading from xml stream"
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
name|fromJsonString
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Parse metainfo from an XML formatted IOStream    *    * @param metainfoStream    *    * @return    *    * @throws IOException    */
DECL|method|fromXmlStream (InputStream metainfoStream)
specifier|public
name|Metainfo
name|fromXmlStream
parameter_list|(
name|InputStream
name|metainfoStream
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"loading from xml stream"
argument_list|)
expr_stmt|;
name|Digester
name|digester
init|=
operator|new
name|Digester
argument_list|()
decl_stmt|;
name|digester
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|composeSchema
argument_list|(
name|digester
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|Metainfo
operator|)
name|digester
operator|.
name|parse
argument_list|(
name|metainfoStream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"IOException in metainfoparser during fromXmlStream: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SAXException in metainfoparser during fromXmlStream: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|metainfoStream
operator|!=
literal|null
condition|)
block|{
name|metainfoStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Compose the schema for the metainfo    *    * @param Digester - The Digester object we passed in to compose the schema    *    * @return    *    * @throws IOException    */
DECL|method|composeSchema (Digester digester)
specifier|abstract
specifier|protected
name|void
name|composeSchema
parameter_list|(
name|Digester
name|digester
parameter_list|)
function_decl|;
block|}
end_class

end_unit

