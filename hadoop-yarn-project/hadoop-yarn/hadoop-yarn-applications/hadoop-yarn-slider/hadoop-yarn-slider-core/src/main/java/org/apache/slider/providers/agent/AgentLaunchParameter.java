begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|AgentLaunchParameter
class|class
name|AgentLaunchParameter
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AgentLaunchParameter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARAMETER
init|=
literal|""
decl_stmt|;
DECL|field|ANY_COMPONENT
specifier|private
specifier|static
specifier|final
name|String
name|ANY_COMPONENT
init|=
literal|"ANY"
decl_stmt|;
DECL|field|NONE_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|NONE_VALUE
init|=
literal|"NONE"
decl_stmt|;
DECL|field|launchParameterTracker
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CommandTracker
argument_list|>
name|launchParameterTracker
decl_stmt|;
DECL|method|AgentLaunchParameter (String parameters)
specifier|public
name|AgentLaunchParameter
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|launchParameterTracker
operator|=
name|parseExpectedLaunchParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get command for the component type    *    * @param componentGroup    *    * @return    */
DECL|method|getNextLaunchParameter (String componentGroup)
specifier|public
name|String
name|getNextLaunchParameter
parameter_list|(
name|String
name|componentGroup
parameter_list|)
block|{
if|if
condition|(
name|launchParameterTracker
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|launchParameterTracker
operator|.
name|containsKey
argument_list|(
name|componentGroup
argument_list|)
operator|||
name|launchParameterTracker
operator|.
name|containsKey
argument_list|(
name|ANY_COMPONENT
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|CommandTracker
name|indexTracker
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|launchParameterTracker
operator|.
name|containsKey
argument_list|(
name|componentGroup
argument_list|)
condition|)
block|{
name|indexTracker
operator|=
name|launchParameterTracker
operator|.
name|get
argument_list|(
name|componentGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexTracker
operator|=
name|launchParameterTracker
operator|.
name|get
argument_list|(
name|ANY_COMPONENT
argument_list|)
expr_stmt|;
block|}
return|return
name|indexTracker
operator|.
name|getNextCommand
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|DEFAULT_PARAMETER
return|;
block|}
comment|/**    * Parse launch parameters of the form ANY:PARAM_FOR_FIRST:PARAM_FOR_SECOND:...:PARAM_FOR_REST|HBASE_MASTER:...    *    * E.g. ANY:DO_NOT_REGISTER:DO_NOT_HEARTBEAT:NONE For any container, first one gets DO_NOT_REGISTER second one gets    * DO_NOT_HEARTBEAT, then all of the rest get nothing    *    * E.g. HBASE_MASTER:FAIL_AFTER_START:NONE For HBASE_MASTER, first one gets FAIL_AFTER_START then "" for all    *    * @param launchParameters    *    * @return    */
DECL|method|parseExpectedLaunchParameters (String launchParameters)
name|Map
argument_list|<
name|String
argument_list|,
name|CommandTracker
argument_list|>
name|parseExpectedLaunchParameters
parameter_list|(
name|String
name|launchParameters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CommandTracker
argument_list|>
name|trackers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|launchParameters
operator|!=
literal|null
operator|&&
name|launchParameters
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|componentSpecificParameters
init|=
name|launchParameters
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|componentSpecificParameter
range|:
name|componentSpecificParameters
control|)
block|{
if|if
condition|(
name|componentSpecificParameter
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
index|[]
name|parameters
init|=
name|componentSpecificParameter
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|":"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|1
operator|&&
name|parameters
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|parameters
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|parameters
index|[
name|index
index|]
operator|.
name|equals
argument_list|(
name|NONE_VALUE
argument_list|)
condition|)
block|{
name|parameters
index|[
name|index
index|]
operator|=
name|DEFAULT_PARAMETER
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trackers
operator|==
literal|null
condition|)
block|{
name|trackers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommandTracker
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|String
name|componentName
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|CommandTracker
name|tracker
init|=
operator|new
name|CommandTracker
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|parameters
argument_list|,
literal|1
argument_list|,
name|parameters
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|trackers
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|trackers
return|;
block|}
DECL|class|CommandTracker
class|class
name|CommandTracker
block|{
DECL|field|maxIndex
specifier|private
specifier|final
name|int
name|maxIndex
decl_stmt|;
DECL|field|launchCommands
specifier|private
specifier|final
name|String
index|[]
name|launchCommands
decl_stmt|;
DECL|field|currentIndex
specifier|private
name|int
name|currentIndex
decl_stmt|;
DECL|method|CommandTracker (String[] launchCommands)
name|CommandTracker
parameter_list|(
name|String
index|[]
name|launchCommands
parameter_list|)
block|{
name|this
operator|.
name|currentIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|maxIndex
operator|=
name|launchCommands
operator|.
name|length
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|launchCommands
operator|=
name|launchCommands
expr_stmt|;
block|}
DECL|method|getNextCommand ()
name|String
name|getNextCommand
parameter_list|()
block|{
name|String
name|retVal
init|=
name|launchCommands
index|[
name|currentIndex
index|]
decl_stmt|;
if|if
condition|(
name|currentIndex
operator|!=
name|maxIndex
condition|)
block|{
name|currentIndex
operator|++
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
block|}
block|}
end_class

end_unit

