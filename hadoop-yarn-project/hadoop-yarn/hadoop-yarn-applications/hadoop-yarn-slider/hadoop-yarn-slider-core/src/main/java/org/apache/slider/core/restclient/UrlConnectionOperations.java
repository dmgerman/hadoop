begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.restclient
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|restclient
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Operations on the JDK UrlConnection class.  *  */
end_comment

begin_class
DECL|class|UrlConnectionOperations
specifier|public
class|class
name|UrlConnectionOperations
extends|extends
name|Configured
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UrlConnectionOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectionFactory
specifier|private
name|SliderURLConnectionFactory
name|connectionFactory
decl_stmt|;
DECL|field|useSpnego
specifier|private
name|boolean
name|useSpnego
init|=
literal|false
decl_stmt|;
comment|/**    * Create an instance off the configuration. The SPNEGO policy    * is derived from the current UGI settings.    * @param conf config    */
DECL|method|UrlConnectionOperations (Configuration conf)
specifier|public
name|UrlConnectionOperations
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
name|SliderURLConnectionFactory
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SPNEGO is enabled"
argument_list|)
expr_stmt|;
name|setUseSpnego
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isUseSpnego ()
specifier|public
name|boolean
name|isUseSpnego
parameter_list|()
block|{
return|return
name|useSpnego
return|;
block|}
DECL|method|setUseSpnego (boolean useSpnego)
specifier|public
name|void
name|setUseSpnego
parameter_list|(
name|boolean
name|useSpnego
parameter_list|)
block|{
name|this
operator|.
name|useSpnego
operator|=
name|useSpnego
expr_stmt|;
block|}
comment|/**    * Opens a url with cache disabled, redirect handled in     * (JDK) implementation.    *    * @param url to open    * @return URLConnection    * @throws IOException    * @throws AuthenticationException authentication failure    */
DECL|method|openConnection (URL url)
specifier|public
name|HttpURLConnection
name|openConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|url
operator|.
name|getPort
argument_list|()
operator|!=
literal|0
argument_list|,
literal|"no port"
argument_list|)
expr_stmt|;
return|return
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|useSpnego
argument_list|)
return|;
block|}
DECL|method|execGet (URL url)
specifier|public
name|HttpOperationResponse
name|execGet
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
name|execHttpOperation
argument_list|(
name|HttpVerb
operator|.
name|GET
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|execHttpOperation (HttpVerb verb, URL url, byte[] payload, String contentType)
specifier|public
name|HttpOperationResponse
name|execHttpOperation
parameter_list|(
name|HttpVerb
name|verb
parameter_list|,
name|URL
name|url
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|HttpOperationResponse
name|outcome
init|=
operator|new
name|HttpOperationResponse
argument_list|()
decl_stmt|;
name|int
name|resultCode
decl_stmt|;
name|byte
index|[]
name|body
init|=
literal|null
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} {} spnego={}"
argument_list|,
name|verb
argument_list|,
name|url
argument_list|,
name|useSpnego
argument_list|)
expr_stmt|;
name|boolean
name|doOutput
init|=
name|verb
operator|.
name|hasUploadBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|doOutput
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|payload
operator|!=
literal|null
argument_list|,
literal|"Null payload on a verb which expects one"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|conn
operator|=
name|openConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|verb
operator|.
name|getVerb
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|doOutput
argument_list|)
expr_stmt|;
if|if
condition|(
name|doOutput
condition|)
block|{
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// now do the connection
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
if|if
condition|(
name|doOutput
condition|)
block|{
name|OutputStream
name|output
init|=
name|conn
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|write
argument_list|(
name|payload
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|resultCode
operator|=
name|conn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|outcome
operator|.
name|lastModified
operator|=
name|conn
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
name|outcome
operator|.
name|contentType
operator|=
name|conn
operator|.
name|getContentType
argument_list|()
expr_stmt|;
name|outcome
operator|.
name|headers
operator|=
name|conn
operator|.
name|getHeaderFields
argument_list|()
expr_stmt|;
name|InputStream
name|stream
init|=
name|conn
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
comment|// read into a buffer.
name|body
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no body:
name|log
operator|.
name|debug
argument_list|(
literal|"No body in response"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SSLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|NetUtils
operator|.
name|wrapException
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"localhost"
argument_list|,
literal|0
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"From "
operator|+
name|url
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
name|uprateFaults
argument_list|(
name|HttpVerb
operator|.
name|GET
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|resultCode
argument_list|,
literal|""
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|outcome
operator|.
name|responseCode
operator|=
name|resultCode
expr_stmt|;
name|outcome
operator|.
name|data
operator|=
name|body
expr_stmt|;
return|return
name|outcome
return|;
block|}
comment|/**    * Uprate error codes 400 and up into faults;     * 404 is converted to a {@link NotFoundException},    * 401 to {@link ForbiddenException}    *    * @param verb HTTP Verb used    * @param url URL as string    * @param resultCode response from the request    * @param bodyAsString    *@param body optional body of the request  @throws IOException if the result was considered a failure    */
DECL|method|uprateFaults (HttpVerb verb, String url, int resultCode, String bodyAsString, byte[] body)
specifier|public
specifier|static
name|void
name|uprateFaults
parameter_list|(
name|HttpVerb
name|verb
parameter_list|,
name|String
name|url
parameter_list|,
name|int
name|resultCode
parameter_list|,
name|String
name|bodyAsString
parameter_list|,
name|byte
index|[]
name|body
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resultCode
operator|<
literal|400
condition|)
block|{
comment|//success
return|return;
block|}
name|String
name|msg
init|=
name|verb
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|url
decl_stmt|;
if|if
condition|(
name|resultCode
operator|==
literal|404
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|resultCode
operator|==
literal|401
condition|)
block|{
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// all other error codes
comment|// get a string respnse
if|if
condition|(
name|bodyAsString
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|body
operator|!=
literal|null
operator|&&
name|body
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|bodyAsString
operator|=
operator|new
name|String
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bodyAsString
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|String
name|message
init|=
name|msg
operator|+
literal|" failed with exit code "
operator|+
name|resultCode
operator|+
literal|", body length "
operator|+
name|bodyAsString
operator|.
name|length
argument_list|()
operator|+
literal|":\n"
operator|+
name|bodyAsString
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

