begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Monitors the container state and heartbeats. */
end_comment

begin_class
DECL|class|HeartbeatMonitor
specifier|public
class|class
name|HeartbeatMonitor
implements|implements
name|Runnable
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HeartbeatMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|threadWakeupInterval
specifier|private
specifier|final
name|int
name|threadWakeupInterval
decl_stmt|;
comment|//1 minute
DECL|field|provider
specifier|private
specifier|final
name|AgentProviderService
name|provider
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|field|monitorThread
specifier|private
name|Thread
name|monitorThread
init|=
literal|null
decl_stmt|;
DECL|method|HeartbeatMonitor (AgentProviderService provider, int threadWakeupInterval)
specifier|public
name|HeartbeatMonitor
parameter_list|(
name|AgentProviderService
name|provider
parameter_list|,
name|int
name|threadWakeupInterval
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|threadWakeupInterval
operator|=
name|threadWakeupInterval
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting heartbeat monitor with interval {}"
argument_list|,
name|threadWakeupInterval
argument_list|)
expr_stmt|;
name|monitorThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|monitorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|join (long millis)
name|void
name|join
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|isAlive
argument_list|()
condition|)
block|{
name|monitorThread
operator|.
name|join
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAlive ()
specifier|public
name|boolean
name|isAlive
parameter_list|()
block|{
return|return
name|monitorThread
operator|!=
literal|null
operator|&&
name|monitorThread
operator|.
name|isAlive
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|shouldRun
condition|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Putting monitor to sleep for "
operator|+
name|threadWakeupInterval
operator|+
literal|" "
operator|+
literal|"milliseconds"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|threadWakeupInterval
argument_list|)
expr_stmt|;
name|doWork
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Scheduler thread is interrupted going to stop"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception received"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ERROR"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Every interval the current state of the container are checked. If the state is INIT or HEALTHY and no HB are    * received in last check interval they are marked as UNHEALTHY. INIT is when the agent is started but it did not    * communicate at all. HEALTHY being the AM has received heartbeats. After an interval as UNHEALTHY the container is    * declared unavailable    * @param now current time in milliseconds ... tests can set this explicitly    */
annotation|@
name|VisibleForTesting
DECL|method|doWork (long now)
specifier|public
name|void
name|doWork
parameter_list|(
name|long
name|now
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstanceState
argument_list|>
name|componentStatuses
init|=
name|provider
operator|.
name|getComponentStatuses
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentStatuses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|containerLabel
range|:
name|componentStatuses
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ComponentInstanceState
name|componentInstanceState
init|=
name|componentStatuses
operator|.
name|get
argument_list|(
name|containerLabel
argument_list|)
decl_stmt|;
name|long
name|timeSinceLastHeartbeat
init|=
name|now
operator|-
name|componentInstanceState
operator|.
name|getLastHeartbeat
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeSinceLastHeartbeat
operator|>
name|threadWakeupInterval
condition|)
block|{
switch|switch
condition|(
name|componentInstanceState
operator|.
name|getContainerState
argument_list|()
condition|)
block|{
case|case
name|INIT
case|:
case|case
name|HEALTHY
case|:
name|componentInstanceState
operator|.
name|setContainerState
argument_list|(
name|ContainerState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Component {} marked UNHEALTHY. Last heartbeat received at {} approx. {} ms. back."
argument_list|,
name|componentInstanceState
argument_list|,
name|componentInstanceState
operator|.
name|getLastHeartbeat
argument_list|()
argument_list|,
name|timeSinceLastHeartbeat
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
if|if
condition|(
name|timeSinceLastHeartbeat
operator|>
name|threadWakeupInterval
operator|*
literal|2
condition|)
block|{
name|componentInstanceState
operator|.
name|setContainerState
argument_list|(
name|ContainerState
operator|.
name|HEARTBEAT_LOST
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Component {} marked HEARTBEAT_LOST. Last heartbeat received at {} approx. {} ms. back."
argument_list|,
name|componentInstanceState
argument_list|,
name|componentInstanceState
operator|.
name|getLastHeartbeat
argument_list|()
argument_list|,
name|timeSinceLastHeartbeat
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|componentInstanceState
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|provider
operator|.
name|lostContainer
argument_list|(
name|containerLabel
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HEARTBEAT_LOST
case|:
comment|// unexpected case
name|log
operator|.
name|warn
argument_list|(
literal|"Heartbeat from lost component: {}"
argument_list|,
name|componentInstanceState
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

