begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A node instance -stores information about a node in the cluster.  *<p>  * Operations on the array/set of roles are synchronized.  */
end_comment

begin_class
DECL|class|NodeInstance
specifier|public
class|class
name|NodeInstance
block|{
DECL|field|hostname
specifier|public
specifier|final
name|String
name|hostname
decl_stmt|;
comment|/**    * last state of node. Starts off as {@link NodeState#RUNNING},    * on the assumption that it is live.    */
DECL|field|nodeState
specifier|private
name|NodeState
name|nodeState
init|=
name|NodeState
operator|.
name|RUNNING
decl_stmt|;
comment|/**    * Last node report. If null: none    */
DECL|field|nodeReport
specifier|private
name|NodeReport
name|nodeReport
init|=
literal|null
decl_stmt|;
comment|/**    * time of state update    */
DECL|field|nodeStateUpdateTime
specifier|private
name|long
name|nodeStateUpdateTime
init|=
literal|0
decl_stmt|;
comment|/**    * Node labels.    *    * IMPORTANT: we assume that there is one label/node, which is the policy    * for Hadoop as of November 2015    */
DECL|field|nodeLabels
specifier|private
name|String
name|nodeLabels
init|=
literal|""
decl_stmt|;
comment|/**    * An unordered list of node entries of specific roles. There's nothing    * indexed so as to support sparser datastructures.    */
DECL|field|nodeEntries
specifier|private
specifier|final
name|List
argument_list|<
name|NodeEntry
argument_list|>
name|nodeEntries
decl_stmt|;
comment|/**    * Create an instance and the (empty) array of nodes    * @param roles role count -the no. of roles    */
DECL|method|NodeInstance (String hostname, int roles)
specifier|public
name|NodeInstance
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|roles
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|nodeEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|roles
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the node status.    * The return code is true if the node state changed enough to    * trigger a re-evaluation of pending requests. That is, either a node    * became available when it was previously not, or the label changed    * on an available node.    *    * Transitions of a node from live to dead aren't treated as significant,    * nor label changes on a dead node.    *    * @param report latest node report    * @return true if the node state changed enough for a request evaluation.    */
DECL|method|updateNode (NodeReport report)
specifier|public
specifier|synchronized
name|boolean
name|updateNode
parameter_list|(
name|NodeReport
name|report
parameter_list|)
block|{
name|nodeStateUpdateTime
operator|=
name|report
operator|.
name|getLastHealthReportTime
argument_list|()
expr_stmt|;
name|nodeReport
operator|=
name|report
expr_stmt|;
name|NodeState
name|oldState
init|=
name|nodeState
decl_stmt|;
name|boolean
name|oldStateUnusable
init|=
name|oldState
operator|.
name|isUnusable
argument_list|()
decl_stmt|;
name|nodeState
operator|=
name|report
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|boolean
name|newUsable
init|=
operator|!
name|nodeState
operator|.
name|isUnusable
argument_list|()
decl_stmt|;
name|boolean
name|nodeNowAvailable
init|=
name|oldStateUnusable
operator|&&
name|newUsable
decl_stmt|;
name|String
name|labels
init|=
name|this
operator|.
name|nodeLabels
decl_stmt|;
name|nodeLabels
operator|=
name|SliderUtils
operator|.
name|extractNodeLabel
argument_list|(
name|report
argument_list|)
expr_stmt|;
return|return
name|nodeNowAvailable
operator|||
name|newUsable
operator|&&
operator|!
name|this
operator|.
name|nodeLabels
operator|.
name|equals
argument_list|(
name|labels
argument_list|)
return|;
block|}
DECL|method|getNodeLabels ()
specifier|public
name|String
name|getNodeLabels
parameter_list|()
block|{
return|return
name|nodeLabels
return|;
block|}
comment|/**    * Get the entry for a role -if present    * @param role role index    * @return the entry    * null if the role is out of range    */
DECL|method|get (int role)
specifier|public
specifier|synchronized
name|NodeEntry
name|get
parameter_list|(
name|int
name|role
parameter_list|)
block|{
for|for
control|(
name|NodeEntry
name|nodeEntry
range|:
name|nodeEntries
control|)
block|{
if|if
condition|(
name|nodeEntry
operator|.
name|rolePriority
operator|==
name|role
condition|)
block|{
return|return
name|nodeEntry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the entry for a role -if present    * @param role role index    * @return the entry    * @throws ArrayIndexOutOfBoundsException if the role is out of range    */
DECL|method|getOrCreate (int role)
specifier|public
specifier|synchronized
name|NodeEntry
name|getOrCreate
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|NodeEntry
name|entry
init|=
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|NodeEntry
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|nodeEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
comment|/**    * Get the node entry matching a container on this node    * @param container container    * @return matching node instance for the role    */
DECL|method|getOrCreate (Container container)
specifier|public
name|NodeEntry
name|getOrCreate
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|getOrCreate
argument_list|(
name|ContainerPriority
operator|.
name|extractRole
argument_list|(
name|container
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Count the number of active role instances on this node    * @param role role index    * @return 0 if there are none, otherwise the #of nodes that are running and    * not being released already.    */
DECL|method|getActiveRoleInstances (int role)
specifier|public
name|int
name|getActiveRoleInstances
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|NodeEntry
name|nodeEntry
init|=
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodeEntry
operator|!=
literal|null
operator|)
condition|?
name|nodeEntry
operator|.
name|getActive
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * Count the number of live role instances on this node    * @param role role index    * @return 0 if there are none, otherwise the #of nodes that are running     */
DECL|method|getLiveRoleInstances (int role)
specifier|public
name|int
name|getLiveRoleInstances
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|NodeEntry
name|nodeEntry
init|=
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodeEntry
operator|!=
literal|null
operator|)
condition|?
name|nodeEntry
operator|.
name|getLive
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * Is the node considered online    * @return the node    */
DECL|method|isOnline ()
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
operator|!
name|nodeState
operator|.
name|isUnusable
argument_list|()
return|;
block|}
comment|/**    * Query for a node being considered unreliable    * @param role role key    * @param threshold threshold above which a node is considered unreliable    * @return true if the node is considered unreliable    */
DECL|method|isConsideredUnreliable (int role, int threshold)
specifier|public
name|boolean
name|isConsideredUnreliable
parameter_list|(
name|int
name|role
parameter_list|,
name|int
name|threshold
parameter_list|)
block|{
name|NodeEntry
name|entry
init|=
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getFailedRecently
argument_list|()
operator|>
name|threshold
return|;
block|}
comment|/**    * Get the entry for a role -and remove it if present    * @param role the role index    * @return the entry that WAS there    */
DECL|method|remove (int role)
specifier|public
specifier|synchronized
name|NodeEntry
name|remove
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|NodeEntry
name|nodeEntry
init|=
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEntry
operator|!=
literal|null
condition|)
block|{
name|nodeEntries
operator|.
name|remove
argument_list|(
name|nodeEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeEntry
return|;
block|}
DECL|method|set (int role, NodeEntry nodeEntry)
specifier|public
specifier|synchronized
name|void
name|set
parameter_list|(
name|int
name|role
parameter_list|,
name|NodeEntry
name|nodeEntry
parameter_list|)
block|{
name|remove
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|nodeEntries
operator|.
name|add
argument_list|(
name|nodeEntry
argument_list|)
expr_stmt|;
block|}
comment|/**    * run through each entry; gc'ing& removing old ones that don't have    * a recent failure count (we care about those)    * @param absoluteTime age in millis    * @return true if there are still entries left    */
DECL|method|purgeUnusedEntries (long absoluteTime)
specifier|public
specifier|synchronized
name|boolean
name|purgeUnusedEntries
parameter_list|(
name|long
name|absoluteTime
parameter_list|)
block|{
name|boolean
name|active
init|=
literal|false
decl_stmt|;
name|ListIterator
argument_list|<
name|NodeEntry
argument_list|>
name|entries
init|=
name|nodeEntries
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeEntry
name|entry
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|notUsedSince
argument_list|(
name|absoluteTime
argument_list|)
operator|&&
name|entry
operator|.
name|getFailedRecently
argument_list|()
operator|==
literal|0
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|active
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|active
return|;
block|}
comment|/**    * run through each entry resetting the failure count    */
DECL|method|resetFailedRecently ()
specifier|public
specifier|synchronized
name|void
name|resetFailedRecently
parameter_list|()
block|{
for|for
control|(
name|NodeEntry
name|entry
range|:
name|nodeEntries
control|)
block|{
name|entry
operator|.
name|resetFailedRecently
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**    * Full dump of entry including children    * @return a multi-line description fo the node    */
DECL|method|toFullString ()
specifier|public
name|String
name|toFullString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeEntry
name|entry
range|:
name|nodeEntries
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n  [%02d]  "
argument_list|,
name|entry
operator|.
name|rolePriority
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Equality test is purely on the hostname of the node address    * @param o other    * @return true if the hostnames are equal    */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeInstance
name|that
init|=
operator|(
name|NodeInstance
operator|)
name|o
decl_stmt|;
return|return
name|hostname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|hostname
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hostname
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Predicate to query if the number of recent failures of a role    * on this node exceeds that role's failure threshold.    * If there is no record of a deployment of that role on this    * node, the failure count is taken as "0".    * @param role role to look up    * @return true if the failure rate is above the threshold.    */
DECL|method|exceedsFailureThreshold (RoleStatus role)
specifier|public
name|boolean
name|exceedsFailureThreshold
parameter_list|(
name|RoleStatus
name|role
parameter_list|)
block|{
name|NodeEntry
name|entry
init|=
name|get
argument_list|(
name|role
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numFailuresOnLastHost
init|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getFailedRecently
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|failureThreshold
init|=
name|role
operator|.
name|getNodeFailureThreshold
argument_list|()
decl_stmt|;
return|return
name|failureThreshold
argument_list|<
literal|0
operator|||
name|numFailuresOnLastHost
argument_list|>
name|failureThreshold
return|;
block|}
comment|/**    * Produced a serialized form which can be served up as JSON    * @param naming map of priority -> value for naming entries    * @return a summary of the current role status.    */
DECL|method|serialize (Map<Integer, String> naming)
specifier|public
specifier|synchronized
name|NodeInformation
name|serialize
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|naming
parameter_list|)
block|{
name|NodeInformation
name|info
init|=
operator|new
name|NodeInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
comment|// null-handling state constructor
name|info
operator|.
name|state
operator|=
literal|""
operator|+
name|nodeState
expr_stmt|;
name|info
operator|.
name|lastUpdated
operator|=
name|nodeStateUpdateTime
expr_stmt|;
name|info
operator|.
name|labels
operator|=
name|nodeLabels
expr_stmt|;
if|if
condition|(
name|nodeReport
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|httpAddress
operator|=
name|nodeReport
operator|.
name|getHttpAddress
argument_list|()
expr_stmt|;
name|info
operator|.
name|rackName
operator|=
name|nodeReport
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|info
operator|.
name|healthReport
operator|=
name|nodeReport
operator|.
name|getHealthReport
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|entries
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nodeEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeEntry
name|nodeEntry
range|:
name|nodeEntries
control|)
block|{
name|String
name|name
init|=
name|naming
operator|.
name|get
argument_list|(
name|nodeEntry
operator|.
name|rolePriority
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|nodeEntry
operator|.
name|rolePriority
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|entries
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|nodeEntry
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
comment|/**    * Is this node instance a suitable candidate for the specific role?    * @param role role ID    * @param label label which must match, or "" for no label checks    * @return true if the node has space for this role, is running and the labels    * match.    */
DECL|method|canHost (int role, String label)
specifier|public
name|boolean
name|canHost
parameter_list|(
name|int
name|role
parameter_list|,
name|String
name|label
parameter_list|)
block|{
return|return
name|isOnline
argument_list|()
operator|&&
operator|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|label
argument_list|)
operator|||
name|label
operator|.
name|equals
argument_list|(
name|nodeLabels
argument_list|)
operator|)
comment|// label match
operator|&&
name|getOrCreate
argument_list|(
name|role
argument_list|)
operator|.
name|isAvailable
argument_list|()
return|;
comment|// no live role
block|}
comment|/**    * A comparator for sorting entries where the node is preferred over another.    *    * The exact algorithm may change: current policy is "most recent first", so sorted    * on the lastUsed    *    * the comparision is a positive int if left is preferred to right;    * negative if right over left, 0 for equal    */
DECL|class|Preferred
specifier|public
specifier|static
class|class
name|Preferred
implements|implements
name|Comparator
argument_list|<
name|NodeInstance
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|comparator
specifier|private
specifier|static
specifier|final
name|Comparators
operator|.
name|InvertedLongComparator
name|comparator
init|=
operator|new
name|Comparators
operator|.
name|InvertedLongComparator
argument_list|()
decl_stmt|;
DECL|field|role
specifier|private
specifier|final
name|int
name|role
decl_stmt|;
DECL|method|Preferred (int role)
specifier|public
name|Preferred
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (NodeInstance o1, NodeInstance o2)
specifier|public
name|int
name|compare
parameter_list|(
name|NodeInstance
name|o1
parameter_list|,
name|NodeInstance
name|o2
parameter_list|)
block|{
name|NodeEntry
name|left
init|=
name|o1
operator|.
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|NodeEntry
name|right
init|=
name|o2
operator|.
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|long
name|ageL
init|=
name|left
operator|!=
literal|null
condition|?
name|left
operator|.
name|getLastUsed
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|long
name|ageR
init|=
name|right
operator|!=
literal|null
condition|?
name|right
operator|.
name|getLastUsed
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|ageL
argument_list|,
name|ageR
argument_list|)
return|;
block|}
block|}
comment|/**    * A comparator for sorting entries where the role is newer than    * the other.     * This sort only compares the lastUsed field, not whether the    * node is in use or not    */
DECL|class|MoreActiveThan
specifier|public
specifier|static
class|class
name|MoreActiveThan
implements|implements
name|Comparator
argument_list|<
name|NodeInstance
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|role
specifier|private
specifier|final
name|int
name|role
decl_stmt|;
DECL|method|MoreActiveThan (int role)
specifier|public
name|MoreActiveThan
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (NodeInstance left, NodeInstance right)
specifier|public
name|int
name|compare
parameter_list|(
name|NodeInstance
name|left
parameter_list|,
name|NodeInstance
name|right
parameter_list|)
block|{
name|int
name|activeLeft
init|=
name|left
operator|.
name|getActiveRoleInstances
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|int
name|activeRight
init|=
name|right
operator|.
name|getActiveRoleInstances
argument_list|(
name|role
argument_list|)
decl_stmt|;
return|return
name|activeRight
operator|-
name|activeLeft
return|;
block|}
block|}
comment|/**    * A comparator for sorting entries alphabetically    */
DECL|class|CompareNames
specifier|public
specifier|static
class|class
name|CompareNames
implements|implements
name|Comparator
argument_list|<
name|NodeInstance
argument_list|>
implements|,
name|Serializable
block|{
DECL|method|CompareNames ()
specifier|public
name|CompareNames
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|compare (NodeInstance left, NodeInstance right)
specifier|public
name|int
name|compare
parameter_list|(
name|NodeInstance
name|left
parameter_list|,
name|NodeInstance
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|hostname
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|hostname
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

