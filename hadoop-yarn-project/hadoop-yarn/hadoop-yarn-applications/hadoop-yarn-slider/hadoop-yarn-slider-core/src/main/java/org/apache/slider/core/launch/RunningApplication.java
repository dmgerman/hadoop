begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.launch
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|SliderClusterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderYarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|rpc
operator|.
name|RpcBinder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|Constants
operator|.
name|CONNECT_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|Constants
operator|.
name|RPC_TIMEOUT
import|;
end_import

begin_comment
comment|/**  * A running application built from an app report. This one  * can be talked to  */
end_comment

begin_class
DECL|class|RunningApplication
specifier|public
class|class
name|RunningApplication
extends|extends
name|LaunchedApplication
block|{
DECL|field|applicationReport
specifier|private
specifier|final
name|ApplicationReport
name|applicationReport
decl_stmt|;
DECL|method|RunningApplication (SliderYarnClientImpl yarnClient, ApplicationReport applicationReport)
specifier|public
name|RunningApplication
parameter_list|(
name|SliderYarnClientImpl
name|yarnClient
parameter_list|,
name|ApplicationReport
name|applicationReport
parameter_list|)
block|{
name|super
argument_list|(
name|yarnClient
argument_list|,
name|applicationReport
argument_list|)
expr_stmt|;
name|this
operator|.
name|applicationReport
operator|=
name|applicationReport
expr_stmt|;
block|}
DECL|method|getApplicationReport ()
specifier|public
name|ApplicationReport
name|getApplicationReport
parameter_list|()
block|{
return|return
name|applicationReport
return|;
block|}
comment|/**    * Connect to a Slider AM    * @param app application report providing the details on the application    * @return an instance    * @throws YarnException    * @throws IOException    */
DECL|method|connect (ApplicationReport app)
specifier|public
name|SliderClusterProtocol
name|connect
parameter_list|(
name|ApplicationReport
name|app
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|RpcBinder
operator|.
name|getProxy
argument_list|(
name|yarnClient
operator|.
name|getConfig
argument_list|()
argument_list|,
name|yarnClient
operator|.
name|getRmClient
argument_list|()
argument_list|,
name|app
argument_list|,
name|CONNECT_TIMEOUT
argument_list|,
name|RPC_TIMEOUT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_TIMED_OUT
argument_list|,
name|e
argument_list|,
literal|"Interrupted waiting for communications with the Application Master"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

