begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Delegate for application and resource options  */
end_comment

begin_class
DECL|class|AppAndResouceOptionArgsDelegate
specifier|public
class|class
name|AppAndResouceOptionArgsDelegate
extends|extends
name|AbstractArgsDelegate
block|{
comment|/**    * Options key value    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_OPTION
block|,
name|ARG_OPTION_SHORT
block|}
argument_list|,
name|arity
operator|=
literal|2
argument_list|,
name|description
operator|=
name|ARG_OPTION
operator|+
literal|"<name><value>"
argument_list|,
name|splitter
operator|=
name|DontSplitArguments
operator|.
name|class
argument_list|)
DECL|field|optionTuples
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|optionTuples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * All the app component option triples    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_COMP_OPT
block|,
name|ARG_COMP_OPT_SHORT
block|,
name|ARG_ROLEOPT
block|}
argument_list|,
name|arity
operator|=
literal|3
argument_list|,
name|description
operator|=
literal|"Component option "
operator|+
name|ARG_COMP_OPT
operator|+
literal|"<component><name><option>"
argument_list|,
name|splitter
operator|=
name|DontSplitArguments
operator|.
name|class
argument_list|)
DECL|field|compOptTriples
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|compOptTriples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Resource Options    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_RESOURCE_OPT
block|,
name|ARG_RESOURCE_OPT_SHORT
block|}
argument_list|,
name|arity
operator|=
literal|2
argument_list|,
name|description
operator|=
literal|"Resource option "
operator|+
name|ARG_RESOURCE_OPT
operator|+
literal|"<name><value>"
argument_list|,
name|splitter
operator|=
name|DontSplitArguments
operator|.
name|class
argument_list|)
DECL|field|resOptionTuples
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resOptionTuples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * All the resource component option triples    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_RES_COMP_OPT
block|,
name|ARG_RES_COMP_OPT_SHORT
block|,
block|}
argument_list|,
name|arity
operator|=
literal|3
argument_list|,
name|description
operator|=
literal|"Component resource option "
operator|+
name|ARG_RES_COMP_OPT
operator|+
literal|"<component><name><option>"
argument_list|,
name|splitter
operator|=
name|DontSplitArguments
operator|.
name|class
argument_list|)
DECL|field|resCompOptTriples
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resCompOptTriples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|getOptionsMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOptionsMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|convertTupleListToMap
argument_list|(
name|ARG_OPTION
argument_list|,
name|optionTuples
argument_list|)
return|;
block|}
comment|/**    * Get the role heap mapping (may be empty, but never null)    * @return role heap mapping    * @throws BadCommandArgumentsException parse problem    */
DECL|method|getCompOptionMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getCompOptionMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|convertTripleListToMaps
argument_list|(
name|ARG_COMP_OPT
argument_list|,
name|compOptTriples
argument_list|)
return|;
block|}
DECL|method|getResourceOptionsMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getResourceOptionsMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|convertTupleListToMap
argument_list|(
name|ARG_RESOURCE_OPT
argument_list|,
name|resOptionTuples
argument_list|)
return|;
block|}
comment|/**    * Get the role heap mapping (may be empty, but never null)    * @return role heap mapping    * @throws BadCommandArgumentsException parse problem    */
DECL|method|getResourceCompOptionMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getResourceCompOptionMap
parameter_list|()
throws|throws
name|BadCommandArgumentsException
block|{
return|return
name|convertTripleListToMaps
argument_list|(
name|ARG_RES_COMP_OPT
argument_list|,
name|resCompOptTriples
argument_list|)
return|;
block|}
DECL|method|setOption (String key, String value)
specifier|public
name|void
name|setOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|optionTuples
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|optionTuples
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setResourceOption (String key, String value)
specifier|public
name|void
name|setResourceOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|resOptionTuples
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|resOptionTuples
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

