begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.utility
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|utility
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Wait for a service to stop.  *   * WARNING: the notification may come in as soon as the service enters  * the stopped state: it may take some time for the actual stop operation  * to complete.  */
end_comment

begin_class
DECL|class|EndOfServiceWaiter
specifier|public
class|class
name|EndOfServiceWaiter
implements|implements
name|ServiceStateChangeListener
block|{
DECL|field|finished
specifier|private
specifier|final
name|AtomicBoolean
name|finished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|service
specifier|private
name|Service
name|service
decl_stmt|;
comment|/**    * Wait for a service; use the service name as this instance's name    * @param service service    */
DECL|method|EndOfServiceWaiter (Service service)
specifier|public
name|EndOfServiceWaiter
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|this
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for a service    * @param name name for messages    * @param service service    */
DECL|method|EndOfServiceWaiter (String name, Service service)
specifier|public
name|EndOfServiceWaiter
parameter_list|(
name|String
name|name
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForServiceToStop (long timeout)
specifier|public
specifier|synchronized
name|void
name|waitForServiceToStop
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|service
operator|.
name|waitForServiceToStop
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
operator|.
name|get
argument_list|()
condition|)
block|{
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
name|name
operator|+
literal|" did not finish after "
operator|+
name|timeout
operator|+
literal|" milliseconds"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Wait for service state change callbacks; notify self if the service has    * now stopped    * @param service service    */
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
specifier|synchronized
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|isInState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
condition|)
block|{
name|finished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

