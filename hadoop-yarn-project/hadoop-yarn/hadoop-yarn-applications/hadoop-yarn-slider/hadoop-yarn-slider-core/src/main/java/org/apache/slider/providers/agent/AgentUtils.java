begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|AbstractMetainfoParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|AddonPackageMetainfoParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|DefaultConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|DefaultConfigParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|Metainfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
operator|.
name|MetainfoParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
operator|.
name|ROLE_PREFIX
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AgentUtils
specifier|public
class|class
name|AgentUtils
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AgentUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getApplicationMetainfoFromSummaryFile ( SliderFileSystem fileSystem, String metainfoPath, boolean metainfoForAddon)
specifier|public
specifier|static
name|Metainfo
name|getApplicationMetainfoFromSummaryFile
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|metainfoPath
parameter_list|,
name|boolean
name|metainfoForAddon
parameter_list|)
block|{
name|FileSystem
name|fs
init|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|appPathXML
init|=
operator|new
name|Path
argument_list|(
name|metainfoPath
operator|+
literal|".metainfo.xml"
argument_list|)
decl_stmt|;
name|Path
name|appPathJson
init|=
operator|new
name|Path
argument_list|(
name|metainfoPath
operator|+
literal|".metainfo.json"
argument_list|)
decl_stmt|;
name|Path
name|appPathUsed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FSDataInputStream
name|appStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appPathXML
argument_list|)
condition|)
block|{
name|appPathUsed
operator|=
name|appPathXML
expr_stmt|;
name|appStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|appPathXML
argument_list|)
expr_stmt|;
return|return
name|parseMetainfo
argument_list|(
name|appStream
argument_list|,
name|metainfoForAddon
argument_list|,
literal|"xml"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appPathJson
argument_list|)
condition|)
block|{
name|appPathUsed
operator|=
name|appPathJson
expr_stmt|;
name|appStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|appPathJson
argument_list|)
expr_stmt|;
return|return
name|parseMetainfo
argument_list|(
name|appStream
argument_list|,
name|metainfoForAddon
argument_list|,
literal|"json"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to get metainfo from summary file {} - {}"
argument_list|,
name|appPathUsed
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to get metainfo"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getApplicationMetainfo (SliderFileSystem fileSystem, String metainfoPath, boolean metainfoForAddon)
specifier|public
specifier|static
name|Metainfo
name|getApplicationMetainfo
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|metainfoPath
parameter_list|,
name|boolean
name|metainfoForAddon
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reading metainfo at {}"
argument_list|,
name|metainfoPath
argument_list|)
expr_stmt|;
name|Metainfo
name|metainfo
init|=
name|getApplicationMetainfoFromSummaryFile
argument_list|(
name|fileSystem
argument_list|,
name|metainfoPath
argument_list|,
name|metainfoForAddon
argument_list|)
decl_stmt|;
if|if
condition|(
name|metainfo
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Got metainfo from summary file"
argument_list|)
expr_stmt|;
return|return
name|metainfo
return|;
block|}
name|FileSystem
name|fs
init|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|appPath
init|=
operator|new
name|Path
argument_list|(
name|metainfoPath
argument_list|)
decl_stmt|;
name|InputStream
name|metainfoJsonStream
init|=
name|SliderUtils
operator|.
name|getApplicationResourceInputStream
argument_list|(
name|fs
argument_list|,
name|appPath
argument_list|,
literal|"metainfo.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metainfoJsonStream
operator|==
literal|null
condition|)
block|{
name|InputStream
name|metainfoXMLStream
init|=
name|SliderUtils
operator|.
name|getApplicationResourceInputStream
argument_list|(
name|fs
argument_list|,
name|appPath
argument_list|,
literal|"metainfo.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metainfoXMLStream
operator|!=
literal|null
condition|)
block|{
name|metainfo
operator|=
name|parseMetainfo
argument_list|(
name|metainfoXMLStream
argument_list|,
name|metainfoForAddon
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|metainfo
operator|=
name|parseMetainfo
argument_list|(
name|metainfoJsonStream
argument_list|,
name|metainfoForAddon
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metainfo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"metainfo is unavailable at {}."
argument_list|,
name|metainfoPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"metainfo.xml/json is required in app package. "
operator|+
name|appPath
argument_list|)
throw|;
block|}
return|return
name|metainfo
return|;
block|}
DECL|method|parseMetainfo (InputStream stream, boolean metainfoForAddon, String type)
specifier|private
specifier|static
name|Metainfo
name|parseMetainfo
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|boolean
name|metainfoForAddon
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractMetainfoParser
name|metainfoParser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|metainfoForAddon
condition|)
block|{
name|metainfoParser
operator|=
operator|new
name|AddonPackageMetainfoParser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|metainfoParser
operator|=
operator|new
name|MetainfoParser
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
return|return
name|metainfoParser
operator|.
name|fromXmlStream
argument_list|(
name|stream
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"json"
argument_list|)
condition|)
block|{
return|return
name|metainfoParser
operator|.
name|fromJsonStream
argument_list|(
name|stream
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getDefaultConfig (SliderFileSystem fileSystem, String appDef, String configFileName)
specifier|static
name|DefaultConfig
name|getDefaultConfig
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|appDef
parameter_list|,
name|String
name|configFileName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this is the path inside the zip file
name|String
name|fileToRead
init|=
literal|"configuration/"
operator|+
name|configFileName
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reading default config file {} at {}"
argument_list|,
name|fileToRead
argument_list|,
name|appDef
argument_list|)
expr_stmt|;
name|InputStream
name|configStream
init|=
name|SliderUtils
operator|.
name|getApplicationResourceInputStream
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|appDef
argument_list|)
argument_list|,
name|fileToRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|configStream
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"{} is unavailable at {}."
argument_list|,
name|fileToRead
argument_list|,
name|appDef
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected config file "
operator|+
name|fileToRead
operator|+
literal|" is not available."
argument_list|)
throw|;
block|}
return|return
operator|new
name|DefaultConfigParser
argument_list|()
operator|.
name|parse
argument_list|(
name|configStream
argument_list|)
return|;
block|}
DECL|method|getMetainfoComponentName (String roleGroup, ConfTreeOperations appConf)
specifier|static
name|String
name|getMetainfoComponentName
parameter_list|(
name|String
name|roleGroup
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|String
name|prefix
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|ROLE_PREFIX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
name|roleGroup
return|;
block|}
if|if
condition|(
operator|!
name|roleGroup
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Component "
operator|+
name|roleGroup
operator|+
literal|" doesn't start"
operator|+
literal|" with prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
return|return
name|roleGroup
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

