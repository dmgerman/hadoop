begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/** A simple tag provider that attempts to associate tags from 1-N to all container of a component */
end_comment

begin_class
DECL|class|ComponentTagProvider
specifier|public
class|class
name|ComponentTagProvider
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ComponentTagProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FREE
specifier|private
specifier|static
name|String
name|FREE
init|=
literal|"free"
decl_stmt|;
DECL|field|allTags
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|allTags
decl_stmt|;
DECL|method|ComponentTagProvider ()
specifier|public
name|ComponentTagProvider
parameter_list|()
block|{
name|allTags
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Record an assigned tag to a container    *    * @param component    * @param containerId    * @param tag    */
DECL|method|recordAssignedTag (String component, String containerId, String tag)
specifier|public
name|void
name|recordAssignedTag
parameter_list|(
name|String
name|component
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|component
argument_list|)
operator|&&
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|Integer
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|key
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|>
literal|0
condition|)
block|{
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compTags
init|=
name|getComponentSpecificTags
argument_list|(
name|component
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|compTags
init|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|key
operator|.
name|intValue
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|String
name|tempKey
init|=
operator|new
name|Integer
argument_list|(
name|index
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compTags
operator|.
name|containsKey
argument_list|(
name|tempKey
argument_list|)
condition|)
block|{
name|compTags
operator|.
name|put
argument_list|(
name|tempKey
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
block|}
block|}
name|compTags
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Get a tag for container    *    * @param component    * @param containerId    *    * @return    */
DECL|method|getTag (String component, String containerId)
specifier|public
name|String
name|getTag
parameter_list|(
name|String
name|component
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|component
argument_list|)
operator|&&
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compTags
init|=
name|getComponentSpecificTags
argument_list|(
name|component
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|compTags
init|)
block|{
for|for
control|(
name|String
name|key
range|:
name|compTags
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|compTags
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|compTags
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|compTags
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|FREE
argument_list|)
condition|)
block|{
name|compTags
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
name|String
name|newKey
init|=
operator|new
name|Integer
argument_list|(
name|compTags
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|compTags
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
return|return
name|newKey
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Release a tag associated with a container    *    * @param component    * @param containerId    */
DECL|method|releaseTag (String component, String containerId)
specifier|public
name|void
name|releaseTag
parameter_list|(
name|String
name|component
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|component
argument_list|)
operator|&&
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compTags
init|=
name|allTags
operator|.
name|get
argument_list|(
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|compTags
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|compTags
init|)
block|{
for|for
control|(
name|String
name|key
range|:
name|compTags
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|compTags
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|compTags
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|FREE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|getComponentSpecificTags (String component)
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getComponentSpecificTags
parameter_list|(
name|String
name|component
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allTags
operator|.
name|containsKey
argument_list|(
name|component
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|allTags
init|)
block|{
if|if
condition|(
operator|!
name|allTags
operator|.
name|containsKey
argument_list|(
name|component
argument_list|)
condition|)
block|{
name|allTags
operator|.
name|put
argument_list|(
name|component
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|allTags
operator|.
name|get
argument_list|(
name|component
argument_list|)
return|;
block|}
block|}
end_class

end_unit

