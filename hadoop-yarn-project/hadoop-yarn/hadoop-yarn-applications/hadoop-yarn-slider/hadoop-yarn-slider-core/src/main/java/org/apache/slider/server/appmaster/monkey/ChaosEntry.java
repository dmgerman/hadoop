begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.monkey
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|monkey
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Entry in the chaos list  */
end_comment

begin_class
DECL|class|ChaosEntry
specifier|public
class|class
name|ChaosEntry
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChaosEntry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|target
specifier|public
specifier|final
name|ChaosTarget
name|target
decl_stmt|;
DECL|field|probability
specifier|public
specifier|final
name|long
name|probability
decl_stmt|;
DECL|field|invocationCounter
specifier|private
specifier|final
name|Counter
name|invocationCounter
decl_stmt|;
comment|/**    * Constructor -includes validation of all arguments    * @param name entry name    * @param target target    * @param probability probability of occurring    */
DECL|method|ChaosEntry (String name, ChaosTarget target, long probability, MetricRegistry metrics)
specifier|public
name|ChaosEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|ChaosTarget
name|target
parameter_list|,
name|long
name|probability
parameter_list|,
name|MetricRegistry
name|metrics
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
argument_list|,
literal|"missing name"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|target
operator|!=
literal|null
argument_list|,
literal|"null target"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|probability
operator|>
literal|0
argument_list|,
literal|"negative probability"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|probability
operator|<=
name|InternalKeys
operator|.
name|PROBABILITY_PERCENT_100
argument_list|,
literal|"probability over 100%: "
operator|+
name|probability
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|probability
operator|=
name|probability
expr_stmt|;
name|invocationCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|ChaosEntry
operator|.
name|class
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trigger the chaos action    */
DECL|method|invokeChaos ()
specifier|public
name|void
name|invokeChaos
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Invoking {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|invocationCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
name|target
operator|.
name|chaosAction
argument_list|()
expr_stmt|;
block|}
comment|/**    * Invoke Chaos if the trigger value is in range of the probability    * @param value trigger value, 0-10K    * @return true if the chaos method was invoked    */
DECL|method|maybeInvokeChaos (long value)
specifier|public
name|boolean
name|maybeInvokeChaos
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Probability {} trigger={}"
argument_list|,
name|probability
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|<
name|probability
condition|)
block|{
name|invokeChaos
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

