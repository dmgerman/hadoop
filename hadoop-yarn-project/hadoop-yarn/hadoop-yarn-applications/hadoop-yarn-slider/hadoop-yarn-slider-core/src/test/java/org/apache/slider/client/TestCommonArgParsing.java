begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|AbstractClusterBuildingActionArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionBuildArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionCreateArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionDestroyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionExistsArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionFlexArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionFreezeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionListArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionStatusArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionThawArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionUpdateArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ArgOps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ClientArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|SliderActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test handling of common arguments, specifically how things get split up.  */
end_comment

begin_class
DECL|class|TestCommonArgParsing
specifier|public
class|class
name|TestCommonArgParsing
implements|implements
name|SliderActions
implements|,
name|Arguments
block|{
DECL|field|CLUSTERNAME
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTERNAME
init|=
literal|"clustername"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateActionArgs ()
specifier|public
name|void
name|testCreateActionArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"cluster1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cluster1"
argument_list|,
name|clientArgs
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFailsNoClustername ()
specifier|public
name|void
name|testCreateFailsNoClustername
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertParseFails
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFailsTwoClusternames ()
specifier|public
name|void
name|testCreateFailsTwoClusternames
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertParseFails
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHelp ()
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_HELP
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|clientArgs
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSliderBasePath ()
specifier|public
name|void
name|testSliderBasePath
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_LIST
argument_list|,
name|ARG_BASE_PATH
argument_list|,
literal|"/projects/slider/clusters"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/projects/slider/clusters"
argument_list|)
argument_list|,
name|clientArgs
operator|.
name|getBasePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoSliderBasePath ()
specifier|public
name|void
name|testNoSliderBasePath
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|clientArgs
operator|.
name|getBasePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListNoClusternames ()
specifier|public
name|void
name|testListNoClusternames
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|clientArgs
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListNoClusternamesDefinition ()
specifier|public
name|void
name|testListNoClusternamesDefinition
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_LIST
argument_list|,
name|ARG_DEFINE
argument_list|,
literal|"fs.default.FS=file://localhost"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|clientArgs
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList1Clustername ()
specifier|public
name|void
name|testList1Clustername
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_LIST
argument_list|,
literal|"cluster1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cluster1"
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionListArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListFailsTwoClusternames ()
specifier|public
name|void
name|testListFailsTwoClusternames
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertParseFails
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_LIST
argument_list|,
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefinitions ()
specifier|public
name|void
name|testDefinitions
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
name|CLUSTERNAME
argument_list|,
literal|"-D"
argument_list|,
literal|"yarn.resourcemanager.principal=yarn/server@LOCAL"
argument_list|,
literal|"-D"
argument_list|,
literal|"dfs.datanode.kerberos.principal=hdfs/server@LOCAL"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ca
operator|.
name|applyDefinitions
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_SLIDER_BASE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|SliderUtils
operator|.
name|verifyPrincipalSet
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|)
expr_stmt|;
name|SliderUtils
operator|.
name|verifyPrincipalSet
argument_list|(
name|conf
argument_list|,
name|SliderXmlConfKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefinitionsSettingBaseSliderDir ()
specifier|public
name|void
name|testDefinitionsSettingBaseSliderDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
name|CLUSTERNAME
argument_list|,
literal|"--basepath"
argument_list|,
literal|"/projects/slider/clusters"
argument_list|,
literal|"-D"
argument_list|,
literal|"yarn.resourcemanager.principal=yarn/server@LOCAL"
argument_list|,
literal|"-D"
argument_list|,
literal|"dfs.datanode.kerberos.principal=hdfs/server@LOCAL"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ca
operator|.
name|applyDefinitions
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/projects/slider/clusters"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_SLIDER_BASE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|SliderUtils
operator|.
name|verifyPrincipalSet
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|)
expr_stmt|;
name|SliderUtils
operator|.
name|verifyPrincipalSet
argument_list|(
name|conf
argument_list|,
name|SliderXmlConfKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a start command.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testComplexThaw ()
specifier|public
name|void
name|testComplexThaw
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_START
argument_list|,
literal|"--manager"
argument_list|,
literal|"rhel:8032"
argument_list|,
literal|"--filesystem"
argument_list|,
literal|"hdfs://rhel:9090"
argument_list|,
literal|"-S"
argument_list|,
literal|"java.security.krb5.realm=LOCAL"
argument_list|,
literal|"-S"
argument_list|,
literal|"java.security.krb5.kdc=rhel"
argument_list|,
literal|"-D"
argument_list|,
literal|"yarn.resourcemanager.principal=yarn/rhel@LOCAL"
argument_list|,
literal|"-D"
argument_list|,
literal|"namenode.resourcemanager.principal=hdfs/rhel@LOCAL"
argument_list|,
literal|"cl1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cl1"
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionThawArgs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a force kill command where the app comes at the end of the line.    * @throws Throwable    *    */
annotation|@
name|Test
DECL|method|testStatusSplit ()
specifier|public
name|void
name|testStatusSplit
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|appId
init|=
literal|"application_1381252124398_0013"
decl_stmt|;
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_STATUS
argument_list|,
literal|"--manager"
argument_list|,
literal|"rhel:8032"
argument_list|,
literal|"--filesystem"
argument_list|,
literal|"hdfs://rhel:9090"
argument_list|,
literal|"-S"
argument_list|,
literal|"java.security.krb5.realm=LOCAL"
argument_list|,
literal|"-S"
argument_list|,
literal|"java.security.krb5.kdc=rhel"
argument_list|,
literal|"-D"
argument_list|,
literal|"yarn.resourcemanager.principal=yarn/rhel@LOCAL"
argument_list|,
literal|"-D"
argument_list|,
literal|"namenode.resourcemanager.principal=hdfs/rhel@LOCAL"
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|appId
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFreezeFailsNoArg ()
specifier|public
name|void
name|testFreezeFailsNoArg
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertParseFails
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_STOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFreezeWorks1Arg ()
specifier|public
name|void
name|testFreezeWorks1Arg
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_STOP
argument_list|,
name|CLUSTERNAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionFreezeArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFreezeFails2Arg ()
specifier|public
name|void
name|testFreezeFails2Arg
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertParseFails
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_STOP
argument_list|,
literal|"cluster"
argument_list|,
literal|"cluster2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFreezeForceWaitAndMessage ()
specifier|public
name|void
name|testFreezeForceWaitAndMessage
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_STOP
argument_list|,
name|CLUSTERNAME
argument_list|,
name|ARG_FORCE
argument_list|,
name|ARG_WAIT
argument_list|,
literal|"0"
argument_list|,
name|ARG_MESSAGE
argument_list|,
literal|"explanation"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionFreezeArgs
argument_list|)
expr_stmt|;
name|ActionFreezeArgs
name|freezeArgs
init|=
operator|(
name|ActionFreezeArgs
operator|)
name|ca
operator|.
name|getCoreAction
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"explanation"
argument_list|,
name|freezeArgs
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|freezeArgs
operator|.
name|force
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStatusWorks1Arg ()
specifier|public
name|void
name|testGetStatusWorks1Arg
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_STATUS
argument_list|,
name|CLUSTERNAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionStatusArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExistsWorks1Arg ()
specifier|public
name|void
name|testExistsWorks1Arg
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_EXISTS
argument_list|,
name|CLUSTERNAME
argument_list|,
name|ARG_LIVE
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionExistsArgs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getActionExistsArgs
argument_list|()
operator|.
name|live
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroy1Arg ()
specifier|public
name|void
name|testDestroy1Arg
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_DESTROY
argument_list|,
name|CLUSTERNAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTERNAME
argument_list|,
name|ca
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionDestroyArgs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a pass fails with a BadCommandArgumentsException.    * @param argsList    */
DECL|method|assertParseFails (List argsList)
specifier|private
name|void
name|assertParseFails
parameter_list|(
name|List
name|argsList
parameter_list|)
throws|throws
name|SliderException
block|{
try|try
block|{
name|ClientArgs
name|clientArgs
init|=
name|createClientArgs
argument_list|(
name|argsList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"exected an exception, got "
operator|+
name|clientArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|ignored
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**    * Build and parse client args, after adding the base args list.    * @param argsList    */
DECL|method|createClientArgs (List<String> argsList)
specifier|public
name|ClientArgs
name|createClientArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|argsList
parameter_list|)
throws|throws
name|SliderException
block|{
name|ClientArgs
name|serviceArgs
init|=
operator|new
name|ClientArgs
argument_list|(
name|argsList
argument_list|)
decl_stmt|;
name|serviceArgs
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|serviceArgs
return|;
block|}
DECL|method|createAction (List<String> argsList)
specifier|public
name|ActionCreateArgs
name|createAction
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|argsList
parameter_list|)
throws|throws
name|SliderException
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|argsList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ACTION_CREATE
argument_list|,
name|ca
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|ActionCreateArgs
name|args
init|=
name|ca
operator|.
name|getActionCreateArgs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|args
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleRoleArg ()
specifier|public
name|void
name|testSingleRoleArg
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
name|createArgs
operator|.
name|getComponentTuples
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|ArgOps
operator|.
name|convertTupleListToMap
argument_list|(
literal|"roles"
argument_list|,
name|tuples
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|roleMap
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoRoleArg ()
specifier|public
name|void
name|testNoRoleArg
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"cluster1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
name|createArgs
operator|.
name|getComponentTuples
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|ArgOps
operator|.
name|convertTupleListToMap
argument_list|(
literal|"roles"
argument_list|,
name|tuples
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|roleMap
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiRoleArgBuild ()
specifier|public
name|void
name|testMultiRoleArgBuild
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_BUILD
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"worker"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ACTION_BUILD
argument_list|,
name|ca
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionBuildArgs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getBuildingActionArgs
argument_list|()
operator|instanceof
name|ActionBuildArgs
argument_list|)
expr_stmt|;
name|AbstractClusterBuildingActionArgs
name|args
init|=
name|ca
operator|.
name|getActionBuildArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
name|args
operator|.
name|getComponentTuples
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|ArgOps
operator|.
name|convertTupleListToMap
argument_list|(
literal|"roles"
argument_list|,
name|tuples
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|roleMap
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|roleMap
operator|.
name|get
argument_list|(
literal|"worker"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArgUpdate ()
specifier|public
name|void
name|testArgUpdate
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_UPDATE
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_APPDEF
argument_list|,
literal|"app.json"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ACTION_UPDATE
argument_list|,
name|ca
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionUpdateArgs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getActionUpdateArgs
argument_list|()
operator|instanceof
name|ActionUpdateArgs
argument_list|)
expr_stmt|;
name|AbstractClusterBuildingActionArgs
name|args
init|=
name|ca
operator|.
name|getActionUpdateArgs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|args
operator|.
name|appDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlexArgs ()
specifier|public
name|void
name|testFlexArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClientArgs
name|ca
init|=
name|createClientArgs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_FLEX
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"worker"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ca
operator|.
name|getCoreAction
argument_list|()
operator|instanceof
name|ActionFlexArgs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
name|ca
operator|.
name|getActionFlexArgs
argument_list|()
operator|.
name|getComponentTuples
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|ArgOps
operator|.
name|convertTupleListToMap
argument_list|(
literal|"roles"
argument_list|,
name|tuples
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|roleMap
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|roleMap
operator|.
name|get
argument_list|(
literal|"worker"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicateRole ()
specifier|public
name|void
name|testDuplicateRole
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
name|createArgs
operator|.
name|getComponentTuples
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|ArgOps
operator|.
name|convertTupleListToMap
argument_list|(
literal|"roles"
argument_list|,
name|tuples
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"got a role map $roleMap not a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_DUPLICATE_ENTRY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOddRoleCount ()
specifier|public
name|void
name|testOddRoleCount
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
name|createArgs
operator|.
name|getComponentTuples
argument_list|()
decl_stmt|;
name|tuples
operator|.
name|add
argument_list|(
literal|"loggers"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roleMap
init|=
name|ArgOps
operator|.
name|convertTupleListToMap
argument_list|(
literal|"roles"
argument_list|,
name|tuples
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"got a role map "
operator|+
name|roleMap
operator|+
literal|" not a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_PARSE_FAILURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create some role-opt client args, so that multiple tests can use it.    * @return the args    */
DECL|method|createRoleOptClientArgs ()
specifier|public
name|ActionCreateArgs
name|createRoleOptClientArgs
parameter_list|()
throws|throws
name|SliderException
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createAction
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACTION_CREATE
argument_list|,
literal|"cluster1"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"master"
argument_list|,
literal|"1"
argument_list|,
name|ARG_COMP_OPT
argument_list|,
literal|"master"
argument_list|,
literal|"cheese"
argument_list|,
literal|"swiss"
argument_list|,
name|ARG_COMP_OPT
argument_list|,
literal|"master"
argument_list|,
literal|"env.CHEESE"
argument_list|,
literal|"cheddar"
argument_list|,
name|ARG_COMP_OPT
argument_list|,
literal|"master"
argument_list|,
name|ResourceKeys
operator|.
name|YARN_CORES
argument_list|,
literal|"3"
argument_list|,
name|ARG_COMPONENT
argument_list|,
literal|"worker"
argument_list|,
literal|"2"
argument_list|,
name|ARG_COMP_OPT
argument_list|,
literal|"worker"
argument_list|,
name|ResourceKeys
operator|.
name|YARN_CORES
argument_list|,
literal|"2"
argument_list|,
name|ARG_COMP_OPT
argument_list|,
literal|"worker"
argument_list|,
name|RoleKeys
operator|.
name|JVM_HEAP
argument_list|,
literal|"65536"
argument_list|,
name|ARG_COMP_OPT
argument_list|,
literal|"worker"
argument_list|,
literal|"env.CHEESE"
argument_list|,
literal|"stilton"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createArgs
return|;
block|}
annotation|@
name|Test
DECL|method|testRoleOptionParse ()
specifier|public
name|void
name|testRoleOptionParse
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createRoleOptClientArgs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tripleMaps
init|=
name|createArgs
operator|.
name|getCompOptionMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|workerOpts
init|=
name|tripleMaps
operator|.
name|get
argument_list|(
literal|"worker"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|workerOpts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|workerOpts
operator|.
name|get
argument_list|(
name|ResourceKeys
operator|.
name|YARN_CORES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"65536"
argument_list|,
name|workerOpts
operator|.
name|get
argument_list|(
name|RoleKeys
operator|.
name|JVM_HEAP
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|masterOpts
init|=
name|tripleMaps
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|masterOpts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|masterOpts
operator|.
name|get
argument_list|(
name|ResourceKeys
operator|.
name|YARN_CORES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoleOptionsMerge ()
specifier|public
name|void
name|testRoleOptionsMerge
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createRoleOptClientArgs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|roleOpts
init|=
name|createArgs
operator|.
name|getCompOptionMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|clusterRoleMap
init|=
name|createEnvMap
argument_list|()
decl_stmt|;
name|SliderUtils
operator|.
name|applyCommandLineRoleOptsToRoleMap
argument_list|(
name|clusterRoleMap
argument_list|,
name|roleOpts
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|masterOpts
init|=
name|clusterRoleMap
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"swiss"
argument_list|,
name|masterOpts
operator|.
name|get
argument_list|(
literal|"cheese"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|workerOpts
init|=
name|clusterRoleMap
operator|.
name|get
argument_list|(
literal|"worker"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"stilton"
argument_list|,
name|workerOpts
operator|.
name|get
argument_list|(
literal|"env.CHEESE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnvVariableApply ()
specifier|public
name|void
name|testEnvVariableApply
parameter_list|()
throws|throws
name|Throwable
block|{
name|ActionCreateArgs
name|createArgs
init|=
name|createRoleOptClientArgs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|roleOpts
init|=
name|createArgs
operator|.
name|getCompOptionMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|clusterRoleMap
init|=
name|createEnvMap
argument_list|()
decl_stmt|;
name|SliderUtils
operator|.
name|applyCommandLineRoleOptsToRoleMap
argument_list|(
name|clusterRoleMap
argument_list|,
name|roleOpts
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|workerOpts
init|=
name|clusterRoleMap
operator|.
name|get
argument_list|(
literal|"worker"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"stilton"
argument_list|,
name|workerOpts
operator|.
name|get
argument_list|(
literal|"env.CHEESE"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envmap
init|=
name|SliderUtils
operator|.
name|buildEnvMap
argument_list|(
name|workerOpts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"stilton"
argument_list|,
name|envmap
operator|.
name|get
argument_list|(
literal|"CHEESE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Static compiler complaining about matching LinkedHashMap with Map,    * so some explicit creation here.    * @return a map of maps    */
DECL|method|createEnvMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|createEnvMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cheese
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|cheese
operator|.
name|put
argument_list|(
literal|"cheese"
argument_list|,
literal|"french"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envCheese
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|envCheese
operator|.
name|put
argument_list|(
literal|"env.CHEESE"
argument_list|,
literal|"french"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|envMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|envMap
operator|.
name|put
argument_list|(
literal|"master"
argument_list|,
name|cheese
argument_list|)
expr_stmt|;
name|envMap
operator|.
name|put
argument_list|(
literal|"worker"
argument_list|,
name|envCheese
argument_list|)
expr_stmt|;
return|return
name|envMap
return|;
block|}
block|}
end_class

end_unit

