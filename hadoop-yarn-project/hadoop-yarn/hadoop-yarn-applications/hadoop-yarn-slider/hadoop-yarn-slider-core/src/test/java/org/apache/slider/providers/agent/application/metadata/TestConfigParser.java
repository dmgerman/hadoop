begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestConfigParser
specifier|public
class|class
name|TestConfigParser
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestConfigParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config_1_str
specifier|private
specifier|static
specifier|final
name|String
name|config_1_str
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>security.client.protocol.acl</name>\n"
operator|+
literal|"<value>*</value>\n"
operator|+
literal|"<description>ACL for HRegionInterface protocol implementations (ie. \n"
operator|+
literal|"    clients talking to HRegionServers)\n"
operator|+
literal|"    The ACL is a comma-separated list of user and group names. The user and \n"
operator|+
literal|"    group list is separated by a blank. For e.g. \"alice,bob users,wheel\". \n"
operator|+
literal|"    A special value of \"*\" means all users are allowed.</description>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>security.admin.protocol.acl</name>\n"
operator|+
literal|"<value>*</value>\n"
operator|+
literal|"<description>ACL for HMasterInterface protocol implementation (ie. \n"
operator|+
literal|"    clients talking to HMaster for admin operations).\n"
operator|+
literal|"    The ACL is a comma-separated list of user and group names. The user and \n"
operator|+
literal|"    group list is separated by a blank. For e.g. \"alice,bob users,wheel\". \n"
operator|+
literal|"    A special value of \"*\" means all users are allowed.</description>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>security.masterregion.protocol.acl</name>\n"
operator|+
literal|"<value>*</value>\n"
operator|+
literal|"<description>ACL for HMasterRegionInterface protocol implementations\n"
operator|+
literal|"    (for HRegionServers communicating with HMaster)\n"
operator|+
literal|"    The ACL is a comma-separated list of user and group names. The user and \n"
operator|+
literal|"    group list is separated by a blank. For e.g. \"alice,bob users,wheel\". \n"
operator|+
literal|"    A special value of \"*\" means all users are allowed.</description>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>emptyVal</name>\n"
operator|+
literal|"<value></value>\n"
operator|+
literal|"<description>non-empty-desc</description>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>emptyDesc</name>\n"
operator|+
literal|"<value></value>\n"
operator|+
literal|"<description></description>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>noDesc</name>\n"
operator|+
literal|"<value></value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testParse ()
specifier|public
name|void
name|testParse
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|config_1
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|config_1_str
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|DefaultConfig
name|config
init|=
operator|new
name|DefaultConfigParser
argument_list|()
operator|.
name|parse
argument_list|(
name|config_1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|config
operator|.
name|getPropertyInfos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|config
operator|.
name|getPropertyInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyInfo
name|pInfo
range|:
name|config
operator|.
name|getPropertyInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|pInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"security.client.protocol.acl"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|pInfo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pInfo
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"ACL for HRegionInterface "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"emptyVal"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pInfo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"non-empty-desc"
argument_list|,
name|pInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"emptyDesc"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pInfo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"noDesc"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pInfo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|pInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

