begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|ClientArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|ServiceLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Test a keytab installation.  */
end_comment

begin_class
DECL|class|TestKeytabCommandOptions
specifier|public
class|class
name|TestKeytabCommandOptions
extends|extends
name|SliderTestBase
block|{
DECL|field|testFileSystem
specifier|private
specifier|static
name|SliderFileSystem
name|testFileSystem
decl_stmt|;
DECL|field|testFolderDir
specifier|private
name|File
name|testFolderDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setupFilesystem ()
specifier|public
name|void
name|setupFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
name|fileSystem
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|configuration
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|fileSystem
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|testFileSystem
operator|=
operator|new
name|SliderFileSystem
argument_list|(
name|fileSystem
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|testFolderDir
operator|=
operator|new
name|File
argument_list|(
name|testFileSystem
operator|.
name|buildKeytabInstallationDirPath
argument_list|(
literal|""
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testFolderDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testFolderDir
operator|!=
literal|null
operator|&&
name|testFolderDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testFolderDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testInstallKeytab ()
specifier|public
name|void
name|testInstallKeytab
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|installedPath
init|=
operator|new
name|Path
argument_list|(
name|testFileSystem
operator|.
name|buildKeytabInstallationDirPath
argument_list|(
literal|"testFolder"
argument_list|)
argument_list|,
name|localKeytab
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|installedKeytab
init|=
operator|new
name|File
argument_list|(
name|installedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|installedKeytab
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|localKeytab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testInstallThenDeleteKeytab ()
specifier|public
name|void
name|testInstallThenDeleteKeytab
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|installedPath
init|=
operator|new
name|Path
argument_list|(
name|testFileSystem
operator|.
name|buildKeytabInstallationDirPath
argument_list|(
literal|"testFolder"
argument_list|)
argument_list|,
name|localKeytab
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|installedKeytab
init|=
operator|new
name|File
argument_list|(
name|installedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|installedKeytab
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|localKeytab
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABDELETE
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getName
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testInstallThenListKeytab ()
specifier|public
name|void
name|testInstallThenListKeytab
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|installedPath
init|=
operator|new
name|Path
argument_list|(
name|testFileSystem
operator|.
name|buildKeytabInstallationDirPath
argument_list|(
literal|"testFolder"
argument_list|)
argument_list|,
name|localKeytab
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|installedKeytab
init|=
operator|new
name|File
argument_list|(
name|installedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|installedKeytab
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|localKeytab
argument_list|)
argument_list|)
expr_stmt|;
comment|// install an additional copy into another folder to test listing
name|launcher
operator|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder2"
argument_list|)
argument_list|)
expr_stmt|;
name|TestAppender
name|testAppender
init|=
operator|new
name|TestAppender
argument_list|()
decl_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|)
operator|.
name|addAppender
argument_list|(
name|testAppender
argument_list|)
expr_stmt|;
try|try
block|{
name|launcher
operator|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABLIST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|testAppender
operator|.
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
operator|(
name|String
operator|)
name|testAppender
operator|.
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|contains
argument_list|(
literal|"/.slider/keytabs/testFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|endsWith
argument_list|(
name|installedKeytab
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|String
operator|)
name|testAppender
operator|.
name|events
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|contains
argument_list|(
literal|"/.slider/keytabs/testFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|endsWith
argument_list|(
name|installedKeytab
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|)
operator|.
name|removeAppender
argument_list|(
name|testAppender
argument_list|)
expr_stmt|;
block|}
comment|// now listing while specifying the folder name
name|testAppender
operator|=
operator|new
name|TestAppender
argument_list|()
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|)
operator|.
name|addAppender
argument_list|(
name|testAppender
argument_list|)
expr_stmt|;
try|try
block|{
name|launcher
operator|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABLIST
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testAppender
operator|.
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
operator|(
name|String
operator|)
name|testAppender
operator|.
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|contains
argument_list|(
literal|"/.slider/keytabs/testFolder/"
operator|+
name|installedKeytab
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|)
operator|.
name|removeAppender
argument_list|(
name|testAppender
argument_list|)
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testDeleteNonExistentKeytab ()
specifier|public
name|void
name|testDeleteNonExistentKeytab
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABDELETE
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
literal|"HeyIDontExist.keytab"
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected BadCommandArgumentsException from launch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|//@Test
DECL|method|testInstallKeytabWithNoFolder ()
specifier|public
name|void
name|testInstallKeytabWithNoFolder
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected BadCommandArgumentsException from launch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|//@Test
DECL|method|testInstallKeytabWithNoKeytab ()
specifier|public
name|void
name|testInstallKeytabWithNoKeytab
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected BadCommandArgumentsException from launch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|//@Test
DECL|method|testInstallKeytabAllowingOverwrite ()
specifier|public
name|void
name|testInstallKeytabAllowingOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|installedPath
init|=
operator|new
name|Path
argument_list|(
name|testFileSystem
operator|.
name|buildKeytabInstallationDirPath
argument_list|(
literal|"testFolder"
argument_list|)
argument_list|,
name|localKeytab
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|installedKeytab
init|=
operator|new
name|File
argument_list|(
name|installedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|installedKeytab
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|localKeytab
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|,
name|Arguments
operator|.
name|ARG_OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|installedKeytab
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|localKeytab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testInstallKeytabNotAllowingOverwrite ()
specifier|public
name|void
name|testInstallKeytabNotAllowingOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|File
name|localKeytab
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|getTempLocation
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|localKeytab
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|installedPath
init|=
operator|new
name|Path
argument_list|(
name|testFileSystem
operator|.
name|buildKeytabInstallationDirPath
argument_list|(
literal|"testFolder"
argument_list|)
argument_list|,
name|localKeytab
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|installedKeytab
init|=
operator|new
name|File
argument_list|(
name|installedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|installedKeytab
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|installedKeytab
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|localKeytab
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|launcher
operator|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
name|localKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected BadCommandArgumentsException from launch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|//@Test
DECL|method|testInstallKeytabWithMissingKeytab ()
specifier|public
name|void
name|testInstallKeytabWithMissingKeytab
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create a mock keytab file
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|ServiceLauncher
name|launcher
init|=
name|launch
argument_list|(
name|TestSliderClient
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ClientArgs
operator|.
name|ACTION_KEYTAB
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTABINSTALL
argument_list|,
name|ClientArgs
operator|.
name|ARG_KEYTAB
argument_list|,
literal|"HeyIDontExist.keytab"
argument_list|,
name|Arguments
operator|.
name|ARG_FOLDER
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected BadCommandArgumentsException from launch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandArgumentsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|getTempLocation ()
specifier|private
name|File
name|getTempLocation
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/target"
argument_list|)
return|;
block|}
comment|/**    * Test SliderClient with overridden filesystem.    */
DECL|class|TestSliderClient
specifier|public
specifier|static
class|class
name|TestSliderClient
extends|extends
name|SliderClient
block|{
DECL|method|TestSliderClient ()
specifier|public
name|TestSliderClient
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initHadoopBinding ()
specifier|protected
name|void
name|initHadoopBinding
parameter_list|()
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|sliderFileSystem
operator|=
name|testFileSystem
expr_stmt|;
block|}
block|}
comment|/**    * Appender that captures logging events.    */
DECL|class|TestAppender
specifier|public
specifier|static
class|class
name|TestAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|events
specifier|private
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{}
DECL|method|requiresLayout ()
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|append (LoggingEvent event)
specifier|protected
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

