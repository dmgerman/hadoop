begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRMOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|CancelSingleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerReleaseOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
operator|.
name|buildPriority
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
operator|.
name|extractRole
import|;
end_import

begin_comment
comment|/**  * Test app state RM operations.  */
end_comment

begin_class
DECL|class|TestMockAppStateRMOperations
specifier|public
class|class
name|TestMockAppStateRMOperations
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseMockAppStateTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateRMOperations"
return|;
block|}
annotation|@
name|Test
DECL|method|testPriorityOnly ()
specifier|public
name|void
name|testPriorityOnly
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|extractRole
argument_list|(
name|buildPriority
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriorityRoundTrip ()
specifier|public
name|void
name|testPriorityRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|extractRole
argument_list|(
name|buildPriority
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriorityRoundTripWithRequest ()
specifier|public
name|void
name|testPriorityRoundTripWithRequest
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|priority
init|=
name|buildPriority
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|extractRole
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMockAddOp ()
specifier|public
name|void
name|testMockAddOp
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|operation
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
name|operation
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|extractRole
argument_list|(
name|priority
argument_list|)
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|MockRMOperationHandler
name|handler
init|=
operator|new
name|MockRMOperationHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|op
init|=
name|handler
operator|.
name|getFirstOp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|ContainerRequestOperation
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of a flex up and down op which verifies that outstanding    * requests are cancelled first.    *<ol>    *<li>request 5 nodes, assert 5 request made</li>    *<li>allocate 1 of them</li>    *<li>flex cluster size to 3</li>    *<li>assert this generates 2 cancel requests</li>    *</ol>    */
annotation|@
name|Test
DECL|method|testRequestThenCancelOps ()
specifier|public
name|void
name|testRequestThenCancelOps
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// now 5 outstanding requests.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
comment|// allocate one
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|processed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|processed
operator|.
name|add
argument_list|(
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppState
operator|.
name|NodeCompletionResult
argument_list|>
name|completionResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|submitOperations
argument_list|(
name|processed
argument_list|,
name|released
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndSubmitNodes
argument_list|(
name|released
argument_list|)
decl_stmt|;
name|processSubmissionOperations
argument_list|(
name|instances
argument_list|,
name|completionResults
argument_list|,
name|released
argument_list|)
expr_stmt|;
comment|// four outstanding
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
comment|// flex cluster to 3
name|role0
operator|.
name|setDesired
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
comment|// expect two cancel operation from review
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|ops
control|)
block|{
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
block|}
name|MockRMOperationHandler
name|handler
init|=
operator|new
name|MockRMOperationHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setAvailableToCancel
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|handler
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler
operator|.
name|getAvailableToCancel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
comment|// flex down one more
name|role0
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|ops
control|)
block|{
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getAvailableToCancel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelNoActualContainers ()
specifier|public
name|void
name|testCancelNoActualContainers
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// now 5 outstanding requests.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlexDownOutstandingRequests ()
specifier|public
name|void
name|testFlexDownOutstandingRequests
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// engine only has two nodes, so> 2 will be outstanding
name|engine
operator|=
operator|new
name|MockYarnEngine
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
decl_stmt|;
comment|// role: desired = 2, requested = 1, actual=1
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|createAndSubmitNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|role0
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// there are now two outstanding, two actual
comment|// Release 3 and verify that the two
comment|// cancellations were combined with a release
name|role0
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|role0
operator|.
name|getDelta
argument_list|()
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|numCancel
init|=
literal|0
decl_stmt|;
name|int
name|numRelease
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|ops
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|CancelSingleRequest
condition|)
block|{
name|numCancel
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|instanceof
name|ContainerReleaseOperation
condition|)
block|{
name|numRelease
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numCancel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numRelease
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO releasing?
comment|//    assertEquals(1, role0.getReleasing());
block|}
annotation|@
name|Test
DECL|method|testCancelAllOutstandingRequests ()
specifier|public
name|void
name|testCancelAllOutstandingRequests
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// role: desired = 2, requested = 1, actual=1
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
decl_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|ops
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|ContainerRequestOperation
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// there are now two outstanding, two actual
comment|// Release 3 and verify that the two
comment|// cancellations were combined with a release
name|role0
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|ops
control|)
block|{
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFlexUpOutstandingRequests ()
specifier|public
name|void
name|testFlexUpOutstandingRequests
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
decl_stmt|;
comment|// role: desired = 2, requested = 1, actual=1
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|appState
operator|.
name|incRunningContainers
argument_list|(
name|role0
argument_list|)
expr_stmt|;
name|appState
operator|.
name|incRequestedContainers
argument_list|(
name|role0
argument_list|)
expr_stmt|;
comment|// flex up 2 nodes, yet expect only one node to be requested,
comment|// as the  outstanding request is taken into account
name|role0
operator|.
name|setDesired
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|appState
operator|.
name|incRequestedContainers
argument_list|(
name|role0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|role0
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|role0
operator|.
name|getActualAndRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|role0
operator|.
name|getDelta
argument_list|()
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ContainerRequestOperation
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlexUpNoSpace ()
specifier|public
name|void
name|testFlexUpNoSpace
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// engine only has two nodes, so> 2 will be outstanding
name|engine
operator|=
operator|new
name|MockYarnEngine
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// role: desired = 2, requested = 1, actual=1
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|createAndSubmitNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|role0
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|role0
operator|.
name|getDelta
argument_list|()
argument_list|)
expr_stmt|;
name|createAndSubmitNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateReleaseOp ()
specifier|public
name|void
name|testAllocateReleaseOp
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|ContainerRequestOperation
name|operation
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|operation
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Container
name|cont
init|=
name|engine
operator|.
name|allocateContainer
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allocated
operator|.
name|add
argument_list|(
name|cont
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocated
argument_list|,
name|assignments
argument_list|,
name|operations
argument_list|)
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertListLength
argument_list|(
name|assignments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerAssignment
name|assigned
init|=
name|assignments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|assertEquals
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|,
name|cont
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|roleId
init|=
name|assigned
operator|.
name|role
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|roleId
argument_list|,
name|extractRole
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|role
operator|.
name|getName
argument_list|()
argument_list|,
name|ROLE0
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
comment|//tell the app it arrived
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|target
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|appState
operator|.
name|innerOnNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//now release it by changing the role status
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ContainerReleaseOperation
argument_list|)
expr_stmt|;
name|ContainerReleaseOperation
name|release
init|=
operator|(
name|ContainerReleaseOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|release
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|cont
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComplexAllocation ()
specifier|public
name|void
name|testComplexAllocation
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getRole1Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocations
init|=
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|releases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocations
argument_list|,
name|assignments
argument_list|,
name|releases
argument_list|)
expr_stmt|;
comment|// we expect four release requests here for all the allocated containers
name|assertListLength
argument_list|(
name|releases
argument_list|,
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|releases
control|)
block|{
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
block|}
name|assertListLength
argument_list|(
name|assignments
argument_list|,
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerAssignment
name|assigned
range|:
name|assignments
control|)
block|{
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|target
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
comment|//insert some async operation here
for|for
control|(
name|ContainerAssignment
name|assigned
range|:
name|assignments
control|)
block|{
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|appState
operator|.
name|innerOnNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|engine
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|getRole1Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|allocations
operator|=
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocations
argument_list|,
name|assignments
argument_list|,
name|releases
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assignments
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|releases
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleNodeManagerStartEvent ()
specifier|public
name|void
name|testDoubleNodeManagerStartEvent
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocations
init|=
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|releases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocations
argument_list|,
name|assignments
argument_list|,
name|releases
argument_list|)
expr_stmt|;
name|assertListLength
argument_list|(
name|assignments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerAssignment
name|assigned
init|=
name|assignments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|target
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri2
init|=
name|appState
operator|.
name|innerOnNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ri2
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|//try a second time, expect an error
try|try
block|{
name|appState
operator|.
name|innerOnNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
comment|//and non-faulter should not downgrade to a null
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignore any exception/stack trace that appears below"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"==============================================================="
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri3
init|=
name|appState
operator|.
name|onNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"==============================================================="
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignore any exception/stack trace that appeared above"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ri3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleAllocate ()
specifier|public
name|void
name|testDoubleAllocate
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|ContainerRequestOperation
name|operation
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|operation
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Container
name|cont
init|=
name|engine
operator|.
name|allocateContainer
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allocated
operator|.
name|add
argument_list|(
name|cont
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocated
argument_list|,
name|assignments
argument_list|,
name|operations
argument_list|)
expr_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertListLength
argument_list|(
name|assignments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerAssignment
name|assigned
init|=
name|assignments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|assertEquals
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|,
name|cont
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|roleId
init|=
name|assigned
operator|.
name|role
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|roleId
argument_list|,
name|extractRole
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|role
operator|.
name|getName
argument_list|()
argument_list|,
name|ROLE0
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
comment|//tell the app it arrived
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|target
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|appState
operator|.
name|innerOnNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
comment|// now get an extra allocation that should be released
name|cont
operator|=
name|engine
operator|.
name|allocateContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|allocated
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|allocated
operator|.
name|add
argument_list|(
name|cont
argument_list|)
expr_stmt|;
name|assignments
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|operations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocated
argument_list|,
name|assignments
argument_list|,
name|operations
argument_list|)
expr_stmt|;
name|assertListLength
argument_list|(
name|operations
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|operations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ContainerReleaseOperation
argument_list|)
expr_stmt|;
name|ContainerReleaseOperation
name|release
init|=
operator|(
name|ContainerReleaseOperation
operator|)
name|operations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|release
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|cont
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

