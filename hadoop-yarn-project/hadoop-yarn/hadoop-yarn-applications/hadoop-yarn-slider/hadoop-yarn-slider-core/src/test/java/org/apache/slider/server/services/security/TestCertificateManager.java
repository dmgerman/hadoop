begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|Slider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestCertificateManager
specifier|public
class|class
name|TestCertificateManager
block|{
annotation|@
name|Rule
DECL|field|workDir
specifier|public
name|TemporaryFolder
name|workDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|secDir
specifier|private
name|File
name|secDir
decl_stmt|;
DECL|field|certMan
specifier|private
name|CertificateManager
name|certMan
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|certMan
operator|=
operator|new
name|CertificateManager
argument_list|()
expr_stmt|;
name|MapOperations
name|compOperations
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|secDir
operator|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|SECURITY_DIR
argument_list|)
expr_stmt|;
name|File
name|keystoreFile
init|=
operator|new
name|File
argument_list|(
name|secDir
argument_list|,
name|SliderKeys
operator|.
name|KEYSTORE_FILE_NAME
argument_list|)
decl_stmt|;
name|compOperations
operator|.
name|put
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_KEYSTORE_LOCATION
argument_list|,
name|keystoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|certMan
operator|.
name|initialize
argument_list|(
name|compOperations
argument_list|,
literal|"cahost"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServerCertificateGenerated ()
specifier|public
name|void
name|testServerCertificateGenerated
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|serverCrt
init|=
operator|new
name|File
argument_list|(
name|secDir
argument_list|,
name|SliderKeys
operator|.
name|CRT_FILE_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Server CRD does not exist:"
operator|+
name|serverCrt
argument_list|,
name|serverCrt
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMKeystoreGenerated ()
specifier|public
name|void
name|testAMKeystoreGenerated
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|keystoreFile
init|=
operator|new
name|File
argument_list|(
name|secDir
argument_list|,
name|SliderKeys
operator|.
name|KEYSTORE_FILE_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Keystore does not exist: "
operator|+
name|keystoreFile
argument_list|,
name|keystoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|keystoreFile
argument_list|)
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"pkcs12"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|SecurityUtils
operator|.
name|getKeystorePass
argument_list|()
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|is
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|Certificate
name|certificate
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
name|keystore
operator|.
name|aliases
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
if|if
condition|(
name|certificate
operator|instanceof
name|X509Certificate
condition|)
block|{
name|X509Certificate
name|x509cert
init|=
operator|(
name|X509Certificate
operator|)
name|certificate
decl_stmt|;
comment|// Get subject
name|Principal
name|principal
init|=
name|x509cert
operator|.
name|getSubjectDN
argument_list|()
decl_stmt|;
name|String
name|subjectDn
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong DN"
argument_list|,
literal|"CN=cahost"
argument_list|,
name|subjectDn
argument_list|)
expr_stmt|;
comment|// Get issuer
name|principal
operator|=
name|x509cert
operator|.
name|getIssuerDN
argument_list|()
expr_stmt|;
name|String
name|issuerDn
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong Issuer DN"
argument_list|,
literal|"CN=cahost"
argument_list|,
name|issuerDn
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|is
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerCertificateGeneration ()
specifier|public
name|void
name|testContainerCertificateGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|certMan
operator|.
name|generateContainerCertificate
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container certificate not generated"
argument_list|,
operator|new
name|File
argument_list|(
name|secDir
argument_list|,
literal|"container1.crt"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerKeystoreGeneration ()
specifier|public
name|void
name|testContainerKeystoreGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityStore
name|keystoreFile
init|=
name|certMan
operator|.
name|generateContainerKeystore
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|validateKeystore
argument_list|(
name|keystoreFile
operator|.
name|getFile
argument_list|()
argument_list|,
literal|"testhost"
argument_list|,
literal|"cahost"
argument_list|)
expr_stmt|;
block|}
DECL|method|validateKeystore (File keystoreFile, String certHostname, String issuerHostname)
specifier|private
name|void
name|validateKeystore
parameter_list|(
name|File
name|keystoreFile
parameter_list|,
name|String
name|certHostname
parameter_list|,
name|String
name|issuerHostname
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|CertificateException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container keystore not generated"
argument_list|,
name|keystoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|keystoreFile
argument_list|)
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"pkcs12"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
literal|"password"
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|is
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|Certificate
name|certificate
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
name|keystore
operator|.
name|aliases
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
if|if
condition|(
name|certificate
operator|instanceof
name|X509Certificate
condition|)
block|{
name|X509Certificate
name|x509cert
init|=
operator|(
name|X509Certificate
operator|)
name|certificate
decl_stmt|;
comment|// Get subject
name|Principal
name|principal
init|=
name|x509cert
operator|.
name|getSubjectDN
argument_list|()
decl_stmt|;
name|String
name|subjectDn
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong DN"
argument_list|,
literal|"CN="
operator|+
name|certHostname
operator|+
literal|", OU=container1"
argument_list|,
name|subjectDn
argument_list|)
expr_stmt|;
comment|// Get issuer
name|principal
operator|=
name|x509cert
operator|.
name|getIssuerDN
argument_list|()
expr_stmt|;
name|String
name|issuerDn
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong Issuer DN"
argument_list|,
literal|"CN="
operator|+
name|issuerHostname
argument_list|,
name|issuerDn
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|is
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerKeystoreGenerationViaStoresGenerator ()
specifier|public
name|void
name|testContainerKeystoreGenerationViaStoresGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|components
operator|.
name|put
argument_list|(
literal|"component1"
argument_list|,
name|compOps
argument_list|)
expr_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_PROPERTY_KEY
argument_list|,
literal|"app1.component1.password.property"
argument_list|)
expr_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|global
operator|.
name|put
argument_list|(
literal|"app1.component1.password.property"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|resolve
argument_list|()
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|validateKeystore
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getFile
argument_list|()
argument_list|,
literal|"testhost"
argument_list|,
literal|"cahost"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerKeystoreGenerationViaStoresGeneratorUsingGlobalProps ()
specifier|public
name|void
name|testContainerKeystoreGenerationViaStoresGeneratorUsingGlobalProps
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|components
operator|.
name|put
argument_list|(
literal|"component1"
argument_list|,
name|compOps
argument_list|)
expr_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_PROPERTY_KEY
argument_list|,
literal|"app1.component1.password.property"
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|global
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|compOps
operator|.
name|put
argument_list|(
literal|"app1.component1.password.property"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|resolve
argument_list|()
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|validateKeystore
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getFile
argument_list|()
argument_list|,
literal|"testhost"
argument_list|,
literal|"cahost"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerKeystoreGenerationViaStoresGeneratorOverrideGlobalSetting ()
specifier|public
name|void
name|testContainerKeystoreGenerationViaStoresGeneratorOverrideGlobalSetting
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
name|setupComponentOptions
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
literal|"app1.component1.password.property"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|components
operator|.
name|put
argument_list|(
literal|"component1"
argument_list|,
name|compOps
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|global
operator|.
name|put
argument_list|(
literal|"app1.component1.password.property"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|global
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|resolve
argument_list|()
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|validateKeystore
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getFile
argument_list|()
argument_list|,
literal|"testhost"
argument_list|,
literal|"cahost"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerTrusttoreGeneration ()
specifier|public
name|void
name|testContainerTrusttoreGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityStore
name|keystoreFile
init|=
name|certMan
operator|.
name|generateContainerKeystore
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
literal|"keypass"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container keystore not generated"
argument_list|,
name|keystoreFile
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityStore
name|truststoreFile
init|=
name|certMan
operator|.
name|generateContainerTruststore
argument_list|(
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
literal|"trustpass"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container truststore not generated"
argument_list|,
name|truststoreFile
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|validateTruststore
argument_list|(
name|keystoreFile
operator|.
name|getFile
argument_list|()
argument_list|,
name|truststoreFile
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerGenerationUsingStoresGeneratorNoTruststore ()
specifier|public
name|void
name|testContainerGenerationUsingStoresGeneratorNoTruststore
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_ALIAS_KEY
argument_list|,
literal|"test.keystore.password"
argument_list|)
expr_stmt|;
name|setupCredentials
argument_list|(
name|instanceDefinition
argument_list|,
literal|"test.keystore.password"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|File
name|keystoreFile
init|=
name|CertificateManager
operator|.
name|getContainerKeystoreFilePath
argument_list|(
literal|"container1"
argument_list|,
literal|"component1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container keystore not generated"
argument_list|,
name|keystoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"keystore not in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|keystoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|keystore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|truststoreFile
init|=
name|CertificateManager
operator|.
name|getContainerTruststoreFilePath
argument_list|(
literal|"component1"
argument_list|,
literal|"container1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"container truststore generated"
argument_list|,
name|truststoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"truststore in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|truststoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|truststore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerGenerationUsingStoresGeneratorJustTruststoreWithDefaultAlias ()
specifier|public
name|void
name|testContainerGenerationUsingStoresGeneratorJustTruststoreWithDefaultAlias
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
name|setupComponentOptions
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|setupCredentials
argument_list|(
name|instanceDefinition
argument_list|,
literal|null
argument_list|,
name|SliderKeys
operator|.
name|COMP_TRUSTSTORE_PASSWORD_ALIAS_DEFAULT
argument_list|)
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|File
name|keystoreFile
init|=
name|CertificateManager
operator|.
name|getContainerKeystoreFilePath
argument_list|(
literal|"container1"
argument_list|,
literal|"component1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"container keystore generated"
argument_list|,
name|keystoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"keystore in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
name|keystoreFile
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|truststoreFile
init|=
name|CertificateManager
operator|.
name|getContainerTruststoreFilePath
argument_list|(
literal|"component1"
argument_list|,
literal|"container1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container truststore not generated"
argument_list|,
name|truststoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"truststore not in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|truststoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|truststore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerTrusttoreGenerationUsingStoresGenerator ()
specifier|public
name|void
name|testContainerTrusttoreGenerationUsingStoresGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
name|setupComponentOptions
argument_list|(
literal|true
argument_list|,
literal|"test.keystore.password"
argument_list|,
literal|null
argument_list|,
literal|"test.truststore.password"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|setupCredentials
argument_list|(
name|instanceDefinition
argument_list|,
literal|"test.keystore.password"
argument_list|,
literal|"test.truststore.password"
argument_list|)
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|2
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|File
name|keystoreFile
init|=
name|CertificateManager
operator|.
name|getContainerKeystoreFilePath
argument_list|(
literal|"container1"
argument_list|,
literal|"component1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container keystore not generated"
argument_list|,
name|keystoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"keystore not in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|keystoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|keystore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|truststoreFile
init|=
name|CertificateManager
operator|.
name|getContainerTruststoreFilePath
argument_list|(
literal|"component1"
argument_list|,
literal|"container1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container truststore not generated"
argument_list|,
name|truststoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"truststore not in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|truststoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|truststore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|validateTruststore
argument_list|(
name|keystoreFile
argument_list|,
name|truststoreFile
argument_list|)
expr_stmt|;
block|}
DECL|method|setupCredentials (AggregateConf instanceDefinition, String keyAlias, String trustAlias)
specifier|private
name|void
name|setupCredentials
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|String
name|keyAlias
parameter_list|,
name|String
name|trustAlias
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ourUrl
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|credentials
operator|.
name|put
argument_list|(
name|ourUrl
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// create new aliases
try|try
block|{
if|if
condition|(
name|keyAlias
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|storepass
init|=
block|{
literal|'k'
block|,
literal|'e'
block|,
literal|'y'
block|,
literal|'p'
block|,
literal|'a'
block|,
literal|'s'
block|,
literal|'s'
block|}
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|keyAlias
argument_list|,
name|storepass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trustAlias
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|trustpass
init|=
block|{
literal|'t'
block|,
literal|'r'
block|,
literal|'u'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'p'
block|,
literal|'a'
block|,
literal|'s'
block|,
literal|'s'
block|}
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|trustAlias
argument_list|,
name|trustpass
argument_list|)
expr_stmt|;
block|}
comment|// write out so that it can be found in checks
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|setupComponentOptions (boolean storesRequired)
specifier|private
name|MapOperations
name|setupComponentOptions
parameter_list|(
name|boolean
name|storesRequired
parameter_list|)
block|{
return|return
name|this
operator|.
name|setupComponentOptions
argument_list|(
name|storesRequired
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|setupComponentOptions (boolean storesRequired, String keyAlias, String keyPwd, String trustAlias, String trustPwd)
specifier|private
name|MapOperations
name|setupComponentOptions
parameter_list|(
name|boolean
name|storesRequired
parameter_list|,
name|String
name|keyAlias
parameter_list|,
name|String
name|keyPwd
parameter_list|,
name|String
name|trustAlias
parameter_list|,
name|String
name|trustPwd
parameter_list|)
block|{
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|storesRequired
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyAlias
operator|!=
literal|null
condition|)
block|{
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_ALIAS_KEY
argument_list|,
literal|"test.keystore.password"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trustAlias
operator|!=
literal|null
condition|)
block|{
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_TRUSTSTORE_PASSWORD_ALIAS_KEY
argument_list|,
literal|"test.truststore.password"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyPwd
operator|!=
literal|null
condition|)
block|{
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_PROPERTY_KEY
argument_list|,
name|keyPwd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trustPwd
operator|!=
literal|null
condition|)
block|{
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_TRUSTSTORE_PASSWORD_PROPERTY_KEY
argument_list|,
name|trustPwd
argument_list|)
expr_stmt|;
block|}
return|return
name|compOps
return|;
block|}
annotation|@
name|Test
DECL|method|testContainerStoresGenerationKeystoreOnly ()
specifier|public
name|void
name|testContainerStoresGenerationKeystoreOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setupCredentials
argument_list|(
name|instanceDefinition
argument_list|,
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_ALIAS_DEFAULT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SecurityStore
index|[]
name|files
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of stores"
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|File
name|keystoreFile
init|=
name|CertificateManager
operator|.
name|getContainerKeystoreFilePath
argument_list|(
literal|"container1"
argument_list|,
literal|"component1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"container keystore not generated"
argument_list|,
name|keystoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"keystore not in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|keystoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|keystore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|truststoreFile
init|=
name|CertificateManager
operator|.
name|getContainerTruststoreFilePath
argument_list|(
literal|"component1"
argument_list|,
literal|"container1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"container truststore generated"
argument_list|,
name|truststoreFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"truststore in returned list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|SecurityStore
argument_list|(
name|truststoreFile
argument_list|,
name|SecurityStore
operator|.
name|StoreType
operator|.
name|truststore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerStoresGenerationMisconfiguration ()
specifier|public
name|void
name|testContainerStoresGenerationMisconfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setupCredentials
argument_list|(
name|instanceDefinition
argument_list|,
literal|"cant.be.found"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container1"
argument_list|,
literal|"component1"
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SliderException should have been generated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
comment|// ignore - should be thrown
block|}
block|}
DECL|method|validateTruststore (File keystoreFile, File truststoreFile)
specifier|private
name|void
name|validateTruststore
parameter_list|(
name|File
name|keystoreFile
parameter_list|,
name|File
name|truststoreFile
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|CertificateException
block|{
name|InputStream
name|keyis
init|=
literal|null
decl_stmt|;
name|InputStream
name|trustis
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create keystore
name|keyis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|keystoreFile
argument_list|)
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"pkcs12"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
literal|"keypass"
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|keyis
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// obtain server cert
name|Certificate
name|certificate
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
name|keystore
operator|.
name|aliases
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
comment|// create trust store from generated trust store file
name|trustis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|truststoreFile
argument_list|)
expr_stmt|;
name|KeyStore
name|truststore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"pkcs12"
argument_list|)
decl_stmt|;
name|password
operator|=
literal|"trustpass"
expr_stmt|;
name|truststore
operator|.
name|load
argument_list|(
name|trustis
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate keystore cert using trust store
name|TrustManagerFactory
name|trustManagerFactory
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|trustManagerFactory
operator|.
name|init
argument_list|(
name|truststore
argument_list|)
expr_stmt|;
for|for
control|(
name|TrustManager
name|trustManager
range|:
name|trustManagerFactory
operator|.
name|getTrustManagers
argument_list|()
control|)
block|{
if|if
condition|(
name|trustManager
operator|instanceof
name|X509TrustManager
condition|)
block|{
name|X509TrustManager
name|x509TrustManager
init|=
operator|(
name|X509TrustManager
operator|)
name|trustManager
decl_stmt|;
name|x509TrustManager
operator|.
name|checkServerTrusted
argument_list|(
operator|new
name|X509Certificate
index|[]
block|{
operator|(
name|X509Certificate
operator|)
name|certificate
block|}
argument_list|,
literal|"RSA_EXPORT"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|keyis
condition|)
block|{
name|keyis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|trustis
condition|)
block|{
name|trustis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

