begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.mock
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|CancelSingleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerReleaseOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * This is an evolving engine to mock YARN operations.  */
end_comment

begin_class
DECL|class|MockYarnEngine
specifier|public
class|class
name|MockYarnEngine
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockYarnEngine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MockYarnCluster
name|cluster
decl_stmt|;
DECL|field|allocator
specifier|private
name|Allocator
name|allocator
decl_stmt|;
DECL|field|pending
specifier|private
name|List
argument_list|<
name|ContainerRequestOperation
argument_list|>
name|pending
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
init|=
operator|new
name|MockApplicationId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|attemptId
specifier|private
name|ApplicationAttemptId
name|attemptId
init|=
operator|new
name|MockApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MockYarnEngine "
operator|+
name|cluster
operator|+
literal|" + pending="
operator|+
name|pending
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|containerCount ()
specifier|public
name|int
name|containerCount
parameter_list|()
block|{
return|return
name|cluster
operator|.
name|containersInUse
argument_list|()
return|;
block|}
DECL|method|MockYarnEngine (int clusterSize, int containersPerNode)
specifier|public
name|MockYarnEngine
parameter_list|(
name|int
name|clusterSize
parameter_list|,
name|int
name|containersPerNode
parameter_list|)
block|{
name|cluster
operator|=
operator|new
name|MockYarnCluster
argument_list|(
name|clusterSize
argument_list|,
name|containersPerNode
argument_list|)
expr_stmt|;
name|allocator
operator|=
operator|new
name|Allocator
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
DECL|method|getCluster ()
specifier|public
name|MockYarnCluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
DECL|method|getAllocator ()
specifier|public
name|Allocator
name|getAllocator
parameter_list|()
block|{
return|return
name|allocator
return|;
block|}
comment|/**    * Allocate a container from a request. The containerID will be    * unique, nodeId and other fields chosen internally with    * no such guarantees; resource and priority copied over    * @param request request    * @return container    */
DECL|method|allocateContainer (AMRMClient.ContainerRequest request)
specifier|public
name|Container
name|allocateContainer
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
name|MockContainer
name|allocated
init|=
name|allocator
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocated
operator|!=
literal|null
condition|)
block|{
name|MockContainerId
name|id
init|=
operator|(
name|MockContainerId
operator|)
name|allocated
operator|.
name|getId
argument_list|()
decl_stmt|;
name|id
operator|.
name|setApplicationAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
return|return
name|allocated
return|;
block|}
DECL|method|releaseContainer (ContainerId containerId)
name|MockYarnCluster
operator|.
name|MockYarnClusterContainer
name|releaseContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|release
argument_list|(
name|containerId
argument_list|)
return|;
block|}
comment|/**    * Process a list of operations -release containers to be released,    * allocate those for which there is space (but don't rescan the list after    * the scan).    * @param ops    * @return    */
DECL|method|execute (List<AbstractRMOperation> ops)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|execute
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|ops
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Process a list of operations -release containers to be released,    * allocate those for which there is space (but don't rescan the list after    * the scan). Unsatisifed entries are appended to the "pending" list    * @param ops operations    * @return the list of all satisfied operations    */
DECL|method|execute (List<AbstractRMOperation> ops, List<ContainerId> released)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|execute
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
parameter_list|)
block|{
name|validateRequests
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocation
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|ops
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|ContainerReleaseOperation
condition|)
block|{
name|ContainerReleaseOperation
name|cro
init|=
operator|(
name|ContainerReleaseOperation
operator|)
name|op
decl_stmt|;
name|ContainerId
name|cid
init|=
name|cro
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|releaseContainer
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
name|released
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|instanceof
name|CancelSingleRequest
condition|)
block|{
comment|// no-op
name|LOG
operator|.
name|debug
argument_list|(
literal|"cancel request {}"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|instanceof
name|ContainerRequestOperation
condition|)
block|{
name|ContainerRequestOperation
name|req
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|op
decl_stmt|;
name|Container
name|container
init|=
name|allocateContainer
argument_list|(
name|req
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"allocated container {} for {}"
argument_list|,
name|container
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|allocation
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unsatisfied allocation {}"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported operation {}"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allocation
return|;
block|}
comment|/**    * Try and mimic some of the logic of<code>AMRMClientImpl    * .checkLocalityRelaxationConflict</code>.    * @param ops operations list    */
DECL|method|validateRequests (List<AbstractRMOperation> ops)
name|void
name|validateRequests
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|)
block|{
comment|// run through the requests and verify that they are all consistent.
name|List
argument_list|<
name|ContainerRequestOperation
argument_list|>
name|outstandingRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractRMOperation
name|operation
range|:
name|ops
control|)
block|{
if|if
condition|(
name|operation
operator|instanceof
name|ContainerRequestOperation
condition|)
block|{
name|ContainerRequestOperation
name|containerRequest
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|operation
decl_stmt|;
name|ContainerRequest
name|amRequest
init|=
name|containerRequest
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Priority
name|priority
init|=
name|amRequest
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|boolean
name|relax
init|=
name|amRequest
operator|.
name|getRelaxLocality
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerRequestOperation
name|req
range|:
name|outstandingRequests
control|)
block|{
if|if
condition|(
name|req
operator|.
name|getPriority
argument_list|()
operator|==
name|priority
operator|&&
name|req
operator|.
name|getRelaxLocality
argument_list|()
operator|!=
name|relax
condition|)
block|{
comment|// mismatch in values
name|Assert
operator|.
name|fail
argument_list|(
literal|"operation "
operator|+
name|operation
operator|+
literal|" has incompatible request"
operator|+
literal|" priority from outsanding request"
argument_list|)
expr_stmt|;
block|}
name|outstandingRequests
operator|.
name|add
argument_list|(
name|containerRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Get the list of node reports. These are not cloned; updates will persist    * in the nodemap.    * @return current node report list    */
DECL|method|getNodeReports ()
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|()
block|{
return|return
name|cluster
operator|.
name|getNodeReports
argument_list|()
return|;
block|}
block|}
end_class

end_unit

