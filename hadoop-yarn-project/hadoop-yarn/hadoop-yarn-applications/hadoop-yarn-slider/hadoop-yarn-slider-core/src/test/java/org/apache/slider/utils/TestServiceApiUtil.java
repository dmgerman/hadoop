begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.utils
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|JsonSerDeser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiErrorMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiConstants
operator|.
name|DEFAULT_UNLIMITED_LIFETIME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiErrorMessages
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiErrorMessages
operator|.
name|ERROR_CONTAINERS_COUNT_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createNiceMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Test for ServiceApiUtil helper methods.  */
end_comment

begin_class
DECL|class|TestServiceApiUtil
specifier|public
class|class
name|TestServiceApiUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestServiceApiUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXCEPTION_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_PREFIX
init|=
literal|"Should have thrown "
operator|+
literal|"exception: "
decl_stmt|;
DECL|field|NO_EXCEPTION_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NO_EXCEPTION_PREFIX
init|=
literal|"Should not have thrown "
operator|+
literal|"exception: "
decl_stmt|;
DECL|field|LEN_64_STR
specifier|private
specifier|static
specifier|final
name|String
name|LEN_64_STR
init|=
literal|"abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01"
decl_stmt|;
DECL|field|CONF_DEFAULT_DNS
specifier|private
specifier|static
specifier|final
name|YarnConfiguration
name|CONF_DEFAULT_DNS
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|CONF_DNS_ENABLED
specifier|private
specifier|static
specifier|final
name|YarnConfiguration
name|CONF_DNS_ENABLED
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|CONF_DNS_ENABLED
operator|.
name|setBoolean
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testResourceValidation ()
specifier|public
name|void
name|testResourceValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RegistryConstants
operator|.
name|MAX_FQDN_LABEL_LENGTH
operator|+
literal|1
argument_list|,
name|LEN_64_STR
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
comment|// no name
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR_APPLICATION_NAME_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// bad format name
name|String
index|[]
name|badNames
init|=
block|{
literal|"4finance"
block|,
literal|"Finance"
block|,
literal|"finance@home"
block|,
name|LEN_64_STR
block|}
decl_stmt|;
for|for
control|(
name|String
name|badName
range|:
name|badNames
control|)
block|{
name|app
operator|.
name|setName
argument_list|(
name|badName
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with bad name "
operator|+
name|badName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ERROR_APPLICATION_NAME_INVALID_FORMAT
argument_list|,
name|badName
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// launch command not specified
name|app
operator|.
name|setName
argument_list|(
name|LEN_64_STR
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DEFAULT_DNS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no launch command"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ABSENT_LAUNCH_COMMAND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// launch command not specified
name|app
operator|.
name|setName
argument_list|(
name|LEN_64_STR
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|RegistryConstants
operator|.
name|MAX_FQDN_LABEL_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no launch command"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_ABSENT_LAUNCH_COMMAND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// resource not specified
name|app
operator|.
name|setLaunchCommand
argument_list|(
literal|"sleep 3600"
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no resource"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_FOR_COMP_INVALID
argument_list|,
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// memory not specified
name|Resource
name|res
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|app
operator|.
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no memory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_MEMORY_FOR_COMP_INVALID
argument_list|,
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// invalid no of cpus
name|res
operator|.
name|setMemory
argument_list|(
literal|"100mb"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCpus
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with invalid no of cpus"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID_RANGE
argument_list|,
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// number of containers not specified
name|res
operator|.
name|setCpus
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no container count"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ERROR_CONTAINERS_COUNT_INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// specifying profile along with cpus/memory raises exception
name|res
operator|.
name|setProfile
argument_list|(
literal|"hbase_finance_large"
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with resource profile along with cpus/memory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_FOR_COMP_NOT_SUPPORTED
argument_list|,
name|RestApiConstants
operator|.
name|DEFAULT_COMPONENT_NAME
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// currently resource profile alone is not supported.
comment|// TODO: remove the next test once resource profile alone is supported.
name|res
operator|.
name|setCpus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|res
operator|.
name|setMemory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with resource profile only"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// unset profile here and add cpus/memory back
name|res
operator|.
name|setProfile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCpus
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|res
operator|.
name|setMemory
argument_list|(
literal|"2gb"
argument_list|)
expr_stmt|;
comment|// null number of containers
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"null number of containers"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ERROR_CONTAINERS_COUNT_INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// negative number of containers
name|app
operator|.
name|setNumberOfContainers
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"negative number of containers"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ERROR_CONTAINERS_COUNT_INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// everything valid here
name|app
operator|.
name|setNumberOfContainers
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"application attributes specified should be valid here"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testArtifacts ()
specifier|public
name|void
name|testArtifacts
parameter_list|()
throws|throws
name|IOException
block|{
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
name|app
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|app
operator|.
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|setMemory
argument_list|(
literal|"512M"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setNumberOfContainers
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
comment|// no artifact id fails with default type
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
name|app
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no artifact id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR_ARTIFACT_ID_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// no artifact id fails with APPLICATION type
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no artifact id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR_ARTIFACT_ID_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// no artifact id fails with TARBALL type
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|TARBALL
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no artifact id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR_ARTIFACT_ID_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// everything valid here
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|DOCKER
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"docker.io/centos:centos7"
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"application attributes specified should be valid here"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// defaults assigned
name|assertEquals
argument_list|(
name|app
operator|.
name|getComponents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|DEFAULT_COMPONENT_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app
operator|.
name|getLifetime
argument_list|()
argument_list|,
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
block|}
DECL|method|createValidResource ()
specifier|private
specifier|static
name|Resource
name|createValidResource
parameter_list|()
block|{
name|Resource
name|res
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|res
operator|.
name|setMemory
argument_list|(
literal|"512M"
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|createValidComponent (String compName)
specifier|private
specifier|static
name|Component
name|createValidComponent
parameter_list|(
name|String
name|compName
parameter_list|)
block|{
name|Component
name|comp
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setName
argument_list|(
name|compName
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setResource
argument_list|(
name|createValidResource
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
return|return
name|comp
return|;
block|}
DECL|method|createValidApplication (String compName)
specifier|private
specifier|static
name|Application
name|createValidApplication
parameter_list|(
name|String
name|compName
parameter_list|)
block|{
name|Application
name|app
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
name|app
operator|.
name|setLaunchCommand
argument_list|(
literal|"sleep 3600"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setResource
argument_list|(
name|createValidResource
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|setNumberOfContainers
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|compName
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|addComponent
argument_list|(
name|createValidComponent
argument_list|(
name|compName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|app
return|;
block|}
DECL|method|initMock (Application ext)
specifier|private
specifier|static
name|SliderFileSystem
name|initMock
parameter_list|(
name|Application
name|ext
parameter_list|)
throws|throws
name|IOException
block|{
name|SliderFileSystem
name|sfs
init|=
name|createNiceMock
argument_list|(
name|SliderFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|createNiceMock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonSerDeser
argument_list|<
name|Application
argument_list|>
name|jsonSerDeser
init|=
name|createNiceMock
argument_list|(
name|JsonSerDeser
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockFs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|buildClusterDirPath
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"cluster_dir_path"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|expect
argument_list|(
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ext
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|replay
argument_list|(
name|sfs
argument_list|,
name|mockFs
argument_list|,
name|jsonSerDeser
argument_list|)
expr_stmt|;
name|ServiceApiUtil
operator|.
name|setJsonSerDeser
argument_list|(
name|jsonSerDeser
argument_list|)
expr_stmt|;
return|return
name|sfs
return|;
block|}
annotation|@
name|Test
DECL|method|testExternalApplication ()
specifier|public
name|void
name|testExternalApplication
parameter_list|()
throws|throws
name|IOException
block|{
name|Application
name|ext
init|=
name|createValidApplication
argument_list|(
literal|"comp1"
argument_list|)
decl_stmt|;
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|createValidApplication
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
operator|.
name|getComponent
argument_list|(
literal|"comp1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicateComponents ()
specifier|public
name|void
name|testDuplicateComponents
parameter_list|()
throws|throws
name|IOException
block|{
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|compName
init|=
literal|"comp1"
decl_stmt|;
name|Application
name|app
init|=
name|createValidApplication
argument_list|(
name|compName
argument_list|)
decl_stmt|;
name|app
operator|.
name|addComponent
argument_list|(
name|createValidComponent
argument_list|(
name|compName
argument_list|)
argument_list|)
expr_stmt|;
comment|// duplicate component name fails
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with component collision"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Component name collision: "
operator|+
name|compName
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalDuplicateComponent ()
specifier|public
name|void
name|testExternalDuplicateComponent
parameter_list|()
throws|throws
name|IOException
block|{
name|Application
name|ext
init|=
name|createValidApplication
argument_list|(
literal|"comp1"
argument_list|)
decl_stmt|;
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|createValidApplication
argument_list|(
literal|"comp1"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|app
operator|.
name|getComponent
argument_list|(
literal|"comp1"
argument_list|)
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
comment|// duplicate component name okay in the case of APPLICATION component
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalComponent ()
specifier|public
name|void
name|testExternalComponent
parameter_list|()
throws|throws
name|IOException
block|{
name|Application
name|ext
init|=
name|createValidApplication
argument_list|(
literal|"comp1"
argument_list|)
decl_stmt|;
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|createValidApplication
argument_list|(
literal|"comp2"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// artifact ID not inherited from global
name|assertNotNull
argument_list|(
name|app
operator|.
name|getComponent
argument_list|(
literal|"comp2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set APPLICATION artifact id on component
name|app
operator|.
name|getComponent
argument_list|(
literal|"comp2"
argument_list|)
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// original component replaced by external component
name|assertNotNull
argument_list|(
name|app
operator|.
name|getComponent
argument_list|(
literal|"comp1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDependencySorting (List<Component> components, Component... expectedSorting)
specifier|public
specifier|static
name|void
name|verifyDependencySorting
parameter_list|(
name|List
argument_list|<
name|Component
argument_list|>
name|components
parameter_list|,
name|Component
modifier|...
name|expectedSorting
parameter_list|)
block|{
name|Collection
argument_list|<
name|Component
argument_list|>
name|actualSorting
init|=
name|ServiceApiUtil
operator|.
name|sortByDependencies
argument_list|(
name|components
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSorting
operator|.
name|length
argument_list|,
name|actualSorting
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|actualSorting
control|)
block|{
name|assertEquals
argument_list|(
name|expectedSorting
index|[
name|i
operator|++
index|]
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDependencySorting ()
specifier|public
name|void
name|testDependencySorting
parameter_list|()
throws|throws
name|IOException
block|{
name|Component
name|a
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Component
name|b
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Component
name|c
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|Component
name|d
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"d"
argument_list|)
operator|.
name|dependencies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|Component
name|e
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"e"
argument_list|)
operator|.
name|dependencies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
decl_stmt|;
name|verifyDependencySorting
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|verifyDependencySorting
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|c
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|verifyDependencySorting
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|verifyDependencySorting
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|e
argument_list|,
name|d
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|.
name|setDependencies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|verifyDependencySorting
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"components with dependency cycle"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_DEPENDENCY_CYCLE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Application
name|application
init|=
name|createValidApplication
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|application
operator|.
name|setComponents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|application
argument_list|,
name|sfs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"components with bad dependencies"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_DEPENDENCY_INVALID
argument_list|,
literal|"b"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidComponent ()
specifier|public
name|void
name|testInvalidComponent
parameter_list|()
throws|throws
name|IOException
block|{
name|SliderFileSystem
name|sfs
init|=
name|initMock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|testComponent
argument_list|(
name|sfs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testComponent
argument_list|(
name|sfs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testComponent (SliderFileSystem sfs, boolean unique)
specifier|private
specifier|static
name|void
name|testComponent
parameter_list|(
name|SliderFileSystem
name|sfs
parameter_list|,
name|boolean
name|unique
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxLen
init|=
name|RegistryConstants
operator|.
name|MAX_FQDN_LABEL_LENGTH
decl_stmt|;
if|if
condition|(
name|unique
condition|)
block|{
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|maxLen
operator|=
name|maxLen
operator|-
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|String
name|compName
init|=
name|LEN_64_STR
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLen
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|createValidApplication
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|app
operator|.
name|addComponent
argument_list|(
name|createValidComponent
argument_list|(
name|compName
argument_list|)
operator|.
name|uniqueComponentSupport
argument_list|(
name|unique
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid component name fails if dns is enabled
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with invalid component name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RestApiErrorMessages
operator|.
name|ERROR_COMPONENT_NAME_INVALID
argument_list|,
name|maxLen
argument_list|,
name|compName
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// does not fail if dns is disabled
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DEFAULT_DNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compName
operator|=
name|LEN_64_STR
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLen
argument_list|)
expr_stmt|;
name|app
operator|=
name|createValidApplication
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|app
operator|.
name|addComponent
argument_list|(
name|createValidComponent
argument_list|(
name|compName
argument_list|)
operator|.
name|uniqueComponentSupport
argument_list|(
name|unique
argument_list|)
argument_list|)
expr_stmt|;
comment|// does not fail
try|try
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|app
argument_list|,
name|sfs
argument_list|,
name|CONF_DNS_ENABLED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

