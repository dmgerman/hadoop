begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|TriggerClusterTeardownException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|ResetFailureWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRMOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test that if you have>1 role, the right roles are chosen for release.  */
end_comment

begin_class
DECL|class|TestMockAppStateContainerFailure
specifier|public
class|class
name|TestMockAppStateContainerFailure
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMockAppStateContainerFailure
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|operationHandler
specifier|private
name|MockRMOperationHandler
name|operationHandler
init|=
operator|new
name|MockRMOperationHandler
argument_list|()
decl_stmt|;
DECL|field|mockAM
specifier|private
name|MockAM
name|mockAM
init|=
operator|new
name|MockAM
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateContainerFailure"
return|;
block|}
comment|/**    * Small cluster with multiple containers per node,    * to guarantee many container allocations on each node.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|4
argument_list|,
literal|8000
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildApplication ()
specifier|public
name|Application
name|buildApplication
parameter_list|()
block|{
name|Application
name|application
init|=
name|super
operator|.
name|buildApplication
argument_list|()
decl_stmt|;
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|CONTAINER_FAILURE_THRESHOLD
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
comment|//@Test
DECL|method|testShortLivedFail ()
specifier|public
name|void
name|testShortLivedFail
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndStartNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|instance
init|=
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|created
init|=
name|instance
operator|.
name|createTime
decl_stmt|;
name|long
name|started
init|=
name|instance
operator|.
name|startTime
decl_stmt|;
name|assertTrue
argument_list|(
name|created
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|started
operator|>=
name|created
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appState
operator|.
name|isShortLived
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|roleInstance
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|//    assertEquals(1, status.getStartFailed());
comment|//view the world
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|queue
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|cloneRecentNodeList
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testLongLivedFail ()
specifier|public
name|void
name|testLongLivedFail
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndStartNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|instance
init|=
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|instance
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
name|assertFalse
argument_list|(
name|appState
operator|.
name|isShortLived
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|roleInstance
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|//    assertEquals(0, status.getStartFailed());
comment|//view the world
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|queue
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|cloneRecentNodeList
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeStartFailure ()
specifier|public
name|void
name|testNodeStartFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndSubmitNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|instance
init|=
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|appState
operator|.
name|onNodeManagerContainerStartFailed
argument_list|(
name|cid
argument_list|,
operator|new
name|SliderException
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|//    assertEquals(1, status.getStartFailed());
name|RoleHistory
name|history
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
decl_stmt|;
name|history
operator|.
name|dump
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|queue
init|=
name|history
operator|.
name|cloneRecentNodeList
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeInstance
name|ni
init|=
name|history
operator|.
name|getOrCreateNodeInstance
argument_list|(
name|instance
operator|.
name|container
argument_list|)
decl_stmt|;
name|NodeEntry
name|re
init|=
name|ni
operator|.
name|get
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|re
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|re
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRecurrentStartupFailure ()
specifier|public
name|void
name|testRecurrentStartupFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndSubmitNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} instance {} {}"
argument_list|,
name|i
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|appState
operator|.
name|onNodeManagerContainerStartFailed
argument_list|(
name|cid
argument_list|,
operator|new
name|SliderException
argument_list|(
literal|"failure #"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Cluster did not fail from too many startup failures"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TriggerClusterTeardownException
name|teardown
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception {} : {}"
argument_list|,
name|teardown
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|teardown
argument_list|)
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testRecurrentStartupFailureWithUnlimitedFailures ()
specifier|public
name|void
name|testRecurrentStartupFailureWithUnlimitedFailures
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Update instance definition to allow containers to fail any number of
comment|// times
name|AppStateBindingInfo
name|bindingInfo
init|=
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|bindingInfo
operator|.
name|application
operator|.
name|getComponent
argument_list|(
name|ROLE0
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|CONTAINER_FAILURE_THRESHOLD
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|appState
operator|=
operator|new
name|MockAppState
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndSubmitNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} instance {} {}"
argument_list|,
name|i
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|appState
operator|.
name|onNodeManagerContainerStartFailed
argument_list|(
name|cid
argument_list|,
operator|new
name|SliderException
argument_list|(
literal|"failure #"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TriggerClusterTeardownException
name|teardown
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception {} : {}"
argument_list|,
name|teardown
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|teardown
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cluster failed despite "
operator|+
name|ResourceKeys
operator|.
name|CONTAINER_FAILURE_THRESHOLD
operator|+
literal|" = 0"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testRoleStatusFailureWindow ()
specifier|public
name|void
name|testRoleStatusFailureWindow
parameter_list|()
throws|throws
name|Throwable
block|{
name|ResetFailureWindow
name|resetter
init|=
operator|new
name|ResetFailureWindow
argument_list|(
name|operationHandler
argument_list|)
decl_stmt|;
comment|// initial reset
name|resetter
operator|.
name|execute
argument_list|(
name|mockAM
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|resetter
operator|.
name|execute
argument_list|(
name|mockAM
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndSubmitNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} instance {} {}"
argument_list|,
name|i
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|appState
operator|.
name|onNodeManagerContainerStartFailed
argument_list|(
name|cid
argument_list|,
operator|new
name|SliderException
argument_list|(
literal|"failure #"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testRoleStatusFailed ()
specifier|public
name|void
name|testRoleStatusFailed
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
comment|// limits exceeded
name|appState
operator|.
name|incFailedContainers
argument_list|(
name|status
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getLimitsExceeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getDiskFailed
argument_list|()
argument_list|)
expr_stmt|;
name|ResetFailureWindow
name|resetter
init|=
operator|new
name|ResetFailureWindow
argument_list|(
name|operationHandler
argument_list|)
decl_stmt|;
name|resetter
operator|.
name|execute
argument_list|(
name|mockAM
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRoleStatusFailedLimitsExceeded ()
specifier|public
name|void
name|testRoleStatusFailedLimitsExceeded
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
comment|// limits exceeded
name|appState
operator|.
name|incFailedContainers
argument_list|(
name|status
argument_list|,
name|ContainerOutcome
operator|.
name|Failed_limits_exceeded
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getLimitsExceeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getDiskFailed
argument_list|()
argument_list|)
expr_stmt|;
name|ResetFailureWindow
name|resetter
init|=
operator|new
name|ResetFailureWindow
argument_list|(
name|operationHandler
argument_list|)
decl_stmt|;
name|resetter
operator|.
name|execute
argument_list|(
name|mockAM
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getLimitsExceeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRoleStatusFailedPrempted ()
specifier|public
name|void
name|testRoleStatusFailedPrempted
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
comment|// limits exceeded
name|appState
operator|.
name|incFailedContainers
argument_list|(
name|status
argument_list|,
name|ContainerOutcome
operator|.
name|Preempted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getDiskFailed
argument_list|()
argument_list|)
expr_stmt|;
name|ResetFailureWindow
name|resetter
init|=
operator|new
name|ResetFailureWindow
argument_list|(
name|operationHandler
argument_list|)
decl_stmt|;
name|resetter
operator|.
name|execute
argument_list|(
name|mockAM
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRoleStatusFailedNode ()
specifier|public
name|void
name|testRoleStatusFailedNode
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
comment|// limits exceeded
name|appState
operator|.
name|incFailedContainers
argument_list|(
name|status
argument_list|,
name|ContainerOutcome
operator|.
name|Disk_failure
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getLimitsExceeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|status
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|status
operator|.
name|getDiskFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeEntryCompleted ()
specifier|public
name|void
name|testNodeEntryCompleted
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeEntry
name|nodeEntry
init|=
operator|new
name|NodeEntry
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeEntry
operator|.
name|containerCompleted
argument_list|(
literal|true
argument_list|,
name|ContainerOutcome
operator|.
name|Completed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeEntryFailed ()
specifier|public
name|void
name|testNodeEntryFailed
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeEntry
name|nodeEntry
init|=
operator|new
name|NodeEntry
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeEntry
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeEntry
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|nodeEntry
operator|.
name|resetFailedRecently
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeEntryLimitsExceeded ()
specifier|public
name|void
name|testNodeEntryLimitsExceeded
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeEntry
name|nodeEntry
init|=
operator|new
name|NodeEntry
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeEntry
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed_limits_exceeded
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeEntryPreempted ()
specifier|public
name|void
name|testNodeEntryPreempted
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeEntry
name|nodeEntry
init|=
operator|new
name|NodeEntry
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeEntry
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Preempted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeEntry
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeEntryNodeFailure ()
specifier|public
name|void
name|testNodeEntryNodeFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeEntry
name|nodeEntry
init|=
operator|new
name|NodeEntry
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeEntry
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Disk_failure
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeEntry
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeEntry
operator|.
name|getPreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

