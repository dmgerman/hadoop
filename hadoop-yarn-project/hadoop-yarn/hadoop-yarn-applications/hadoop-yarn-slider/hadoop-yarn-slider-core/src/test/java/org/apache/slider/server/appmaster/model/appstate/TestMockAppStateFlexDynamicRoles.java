begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderInternalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|TriggerClusterTeardownException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|MostRecentContainerReleaseSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|avro
operator|.
name|LoadedRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|avro
operator|.
name|RoleHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Test that if you have more than one role, the right roles are chosen for  * release.  */
end_comment

begin_class
DECL|class|TestMockAppStateFlexDynamicRoles
specifier|public
class|class
name|TestMockAppStateFlexDynamicRoles
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMockAppStateFlexDynamicRoles
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateFlexDynamicRoles"
return|;
block|}
comment|/**    * Small cluster with multiple containers per node,    * to guarantee many container allocations on each node.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildBindingInfo ()
specifier|public
name|AppStateBindingInfo
name|buildBindingInfo
parameter_list|()
block|{
name|AppStateBindingInfo
name|bindingInfo
init|=
name|super
operator|.
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|bindingInfo
operator|.
name|releaseSelector
operator|=
operator|new
name|MostRecentContainerReleaseSelector
argument_list|()
expr_stmt|;
return|return
name|bindingInfo
return|;
block|}
annotation|@
name|Override
DECL|method|buildApplication ()
specifier|public
name|Application
name|buildApplication
parameter_list|()
block|{
name|Application
name|application
init|=
name|super
operator|.
name|buildApplication
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"dynamic-6"
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|TriggerClusterTeardownException
throws|,
name|SliderInternalStateException
block|{
name|createAndStartNodes
argument_list|()
expr_stmt|;
block|}
comment|// TODO does not support adding new components dynamically
DECL|method|testDynamicFlexAddRole ()
specifier|public
name|void
name|testDynamicFlexAddRole
parameter_list|()
throws|throws
name|Throwable
block|{
name|Application
name|application
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"dynamicAdd7"
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
literal|"dynamicAdd7"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamicFlexDropRole ()
specifier|public
name|void
name|testDynamicFlexDropRole
parameter_list|()
throws|throws
name|Throwable
block|{
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"dynamic-6"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|//status is retained for future
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
literal|"dynamic-6"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistorySaveFlexLoad ()
specifier|public
name|void
name|testHistorySaveFlexLoad
parameter_list|()
throws|throws
name|Throwable
block|{
name|Application
name|application
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|RoleHistory
name|roleHistory
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
decl_stmt|;
name|Path
name|history
init|=
name|roleHistory
operator|.
name|saveHistory
argument_list|(
literal|0x0001
argument_list|)
decl_stmt|;
name|RoleHistoryWriter
name|historyWriter
init|=
operator|new
name|RoleHistoryWriter
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"HistorySaveFlexLoad"
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|LoadedRoleHistory
name|loadedRoleHistory
init|=
name|historyWriter
operator|.
name|read
argument_list|(
name|fs
argument_list|,
name|history
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|rebuild
argument_list|(
name|loadedRoleHistory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryFlexSaveResetLoad ()
specifier|public
name|void
name|testHistoryFlexSaveResetLoad
parameter_list|()
throws|throws
name|Throwable
block|{
name|Application
name|application
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"HistoryFlexSaveLoad"
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|RoleHistoryWriter
name|historyWriter
init|=
operator|new
name|RoleHistoryWriter
argument_list|()
decl_stmt|;
name|RoleHistory
name|roleHistory
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
decl_stmt|;
name|Path
name|history
init|=
name|roleHistory
operator|.
name|saveHistory
argument_list|(
literal|0x0002
argument_list|)
decl_stmt|;
comment|//now reset the app state
name|File
name|historyWorkDir2
init|=
operator|new
name|File
argument_list|(
literal|"target/history"
operator|+
name|getTestName
argument_list|()
operator|+
literal|"-0002"
argument_list|)
decl_stmt|;
name|Path
name|historyPath2
init|=
operator|new
name|Path
argument_list|(
name|historyWorkDir2
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|appState
operator|=
operator|new
name|MockAppState
argument_list|()
expr_stmt|;
name|AppStateBindingInfo
name|binding2
init|=
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|binding2
operator|.
name|application
operator|=
name|factory
operator|.
name|newApplication
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|name
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|binding2
operator|.
name|historyPath
operator|=
name|historyPath2
expr_stmt|;
name|appState
operator|.
name|buildInstance
argument_list|(
name|binding2
argument_list|)
expr_stmt|;
comment|// on this read there won't be the right number of roles
name|LoadedRoleHistory
name|loadedRoleHistory
init|=
name|historyWriter
operator|.
name|read
argument_list|(
name|fs
argument_list|,
name|history
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|rebuild
argument_list|(
name|loadedRoleHistory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

