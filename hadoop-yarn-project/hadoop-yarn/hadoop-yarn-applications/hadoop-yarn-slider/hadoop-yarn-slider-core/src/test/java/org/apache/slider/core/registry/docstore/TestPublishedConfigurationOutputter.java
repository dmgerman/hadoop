begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.docstore
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|easymock
operator|.
name|PowerMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|Yaml
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|easymock
operator|.
name|PowerMock
operator|.
name|createNiceMock
import|;
end_import

begin_class
DECL|class|TestPublishedConfigurationOutputter
specifier|public
class|class
name|TestPublishedConfigurationOutputter
block|{
DECL|field|config
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|tmpDir
specifier|public
name|TemporaryFolder
name|tmpDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|config
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJson ()
specifier|public
name|void
name|testJson
parameter_list|()
throws|throws
name|IOException
block|{
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|JSON
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"( |\\r|\\n)"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
literal|"{\"key1\":\"val1\"}"
operator|.
name|equals
argument_list|(
name|output
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|read
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|file
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
literal|1
operator|==
name|read
operator|.
name|size
argument_list|()
assert|;
assert|assert
literal|"val1"
operator|.
name|equals
argument_list|(
name|read
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testXml ()
specifier|public
name|void
name|testXml
parameter_list|()
throws|throws
name|IOException
block|{
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|XML
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"( |\\r|\\n)"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
name|output
operator|.
name|contains
argument_list|(
literal|"<configuration><property><name>key1</name><value>val1</value><source/></property></configuration>"
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
assert|assert
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"( |\\r|\\n)"
argument_list|,
literal|""
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<configuration><property><name>key1</name><value>val1</value><source/></property></configuration>"
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testHadoopXml ()
specifier|public
name|void
name|testHadoopXml
parameter_list|()
throws|throws
name|IOException
block|{
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|HADOOP_XML
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"( |\\r|\\n)"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
name|output
operator|.
name|contains
argument_list|(
literal|"<configuration><property><name>key1</name><value>val1</value><source/></property></configuration>"
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
assert|assert
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"( |\\r|\\n)"
argument_list|,
literal|""
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<configuration><property><name>key1</name><value>val1</value><source/></property></configuration>"
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testProperties ()
specifier|public
name|void
name|testProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|PROPERTIES
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
decl_stmt|;
assert|assert
name|output
operator|.
name|contains
argument_list|(
literal|"key1=val1"
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
literal|1
operator|==
name|properties
operator|.
name|size
argument_list|()
assert|;
assert|assert
literal|"val1"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testYaml ()
specifier|public
name|void
name|testYaml
parameter_list|()
throws|throws
name|IOException
block|{
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|YAML
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"(\\r|\\n)"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
literal|"key1: val1"
operator|.
name|equals
argument_list|(
name|output
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Yaml
name|yaml
init|=
operator|new
name|Yaml
argument_list|()
decl_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|read
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|read
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|yaml
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
literal|1
operator|==
name|read
operator|.
name|size
argument_list|()
assert|;
assert|assert
literal|"val1"
operator|.
name|equals
argument_list|(
name|read
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testEnv ()
specifier|public
name|void
name|testEnv
parameter_list|()
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|envConfig
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"content {{key1}} "
argument_list|)
expr_stmt|;
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|ENV
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|envConfig
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
decl_stmt|;
assert|assert
literal|"content val1 "
operator|.
name|equals
argument_list|(
name|output
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
assert|assert
literal|"content val1 "
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testTemplate1 ()
specifier|public
name|void
name|testTemplate1
parameter_list|()
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|templateConfig
operator|.
name|put
argument_list|(
name|ConfigUtils
operator|.
name|TEMPLATE_FILE
argument_list|,
literal|"templateFileName"
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|fileSystem
init|=
name|createNiceMock
argument_list|(
name|SliderFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"path"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|anyObject
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|fileSystem
operator|.
name|cat
argument_list|(
name|anyObject
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"content {{key1}}\n more ${key1} content"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|PowerMock
operator|.
name|replay
argument_list|(
name|fileSystem
argument_list|)
expr_stmt|;
name|ConfigUtils
operator|.
name|prepConfigForTemplateOutputter
argument_list|(
name|ConfigFormat
operator|.
name|TEMPLATE
argument_list|,
name|templateConfig
argument_list|,
name|fileSystem
argument_list|,
literal|"clusterName"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|ConfigFormat
operator|.
name|TEMPLATE
argument_list|,
operator|new
name|PublishedConfiguration
argument_list|(
literal|"description"
argument_list|,
name|templateConfig
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|configurationOutputter
operator|.
name|asString
argument_list|()
decl_stmt|;
assert|assert
literal|"content val1\n more val1 content"
operator|.
name|equals
argument_list|(
name|output
argument_list|)
assert|;
name|File
name|file
init|=
name|tmpDir
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|verify
argument_list|(
name|fileSystem
argument_list|)
expr_stmt|;
assert|assert
literal|"content val1\n more val1 content"
operator|.
name|equals
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
assert|;
block|}
block|}
end_class

end_unit

