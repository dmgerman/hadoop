begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
operator|.
name|NodeUpdatedOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test Anti-affine placement.  */
end_comment

begin_class
DECL|class|TestMockLabelledAAPlacement
specifier|public
class|class
name|TestMockLabelledAAPlacement
extends|extends
name|BaseMockAppStateAATest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMockLabelledAAPlacement
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NODES
specifier|private
specifier|static
specifier|final
name|int
name|NODES
init|=
literal|3
decl_stmt|;
DECL|field|GPU_NODES
specifier|private
specifier|static
specifier|final
name|int
name|GPU_NODES
init|=
literal|2
decl_stmt|;
DECL|field|HOST0
specifier|private
specifier|static
specifier|final
name|String
name|HOST0
init|=
literal|"00000000"
decl_stmt|;
DECL|field|HOST1
specifier|private
specifier|static
specifier|final
name|String
name|HOST1
init|=
literal|"00000001"
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|updateNodes
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
name|HOST0
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|LABEL_GPU
argument_list|)
argument_list|)
expr_stmt|;
name|updateNodes
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
name|HOST1
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|LABEL_GPU
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
name|NODES
argument_list|,
literal|8
argument_list|)
return|;
block|}
DECL|method|assertAllContainersAA ()
name|void
name|assertAllContainersAA
parameter_list|()
block|{
name|assertAllContainersAA
argument_list|(
name|getGpuRole
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testAskForTooMany ()
specifier|public
name|void
name|testAskForTooMany
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|gpuRole
init|=
name|getGpuRole
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Ask for 1 more than the no of available nodes;"
operator|+
literal|" expect the final request to be unsatisfied until the cluster "
operator|+
literal|"changes size"
argument_list|)
expr_stmt|;
comment|//more than expected
name|int
name|size
init|=
name|GPU_NODES
decl_stmt|;
name|gpuRole
operator|.
name|setDesired
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|gpuRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gpuRole
operator|.
name|getAAPending
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|iter
init|=
literal|"Iteration "
operator|+
name|i
operator|+
literal|" role = "
operator|+
name|getAaRole
argument_list|()
decl_stmt|;
name|describe
argument_list|(
name|iter
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsOut
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|roleInstances
init|=
name|submitOperations
argument_list|(
name|operations
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|operationsOut
argument_list|)
decl_stmt|;
comment|// one instance per request
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appState
operator|.
name|onNodeManagerContainerStarted
argument_list|(
name|roleInstances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
comment|// there should be none left
name|LOG
operator|.
name|debug
argument_list|(
name|nodeInformationSnapshotAsString
argument_list|()
argument_list|)
expr_stmt|;
name|operations
operator|=
name|operationsOut
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|size
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// expect an outstanding AA request to be unsatisfied
name|assertTrue
argument_list|(
name|gpuRole
operator|.
name|getRunning
argument_list|()
operator|<
name|gpuRole
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gpuRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gpuRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|engine
operator|.
name|execute
argument_list|(
name|operations
argument_list|,
name|EMPTY_ID_LIST
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// in a review now, no more requests can be generated, as there is no
comment|// space for AA placements, even though there is cluster capacity
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// switch node 2 into being labelled
name|NodeUpdatedOutcome
name|outcome
init|=
name|updateNodes
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
literal|"00000002"
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|"gpu"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NODES
argument_list|,
name|cloneNodemap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outcome
operator|.
name|clusterChanged
argument_list|)
expr_stmt|;
comment|// no active calls to empty
name|assertTrue
argument_list|(
name|outcome
operator|.
name|operations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addNewNode ()
specifier|protected
name|AppState
operator|.
name|NodeUpdatedOutcome
name|addNewNode
parameter_list|()
block|{
return|return
name|updateNodes
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
literal|"00000004"
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|"gpu"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testClusterSizeChangesDuringRequestSequence ()
specifier|public
name|void
name|testClusterSizeChangesDuringRequestSequence
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|gpuRole
init|=
name|getGpuRole
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Change the cluster size where the cluster size changes during "
operator|+
literal|"a test sequence."
argument_list|)
expr_stmt|;
name|gpuRole
operator|.
name|setDesired
argument_list|(
name|GPU_NODES
operator|+
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|gpuRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GPU_NODES
argument_list|,
name|gpuRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUpdatedOutcome
name|outcome
init|=
name|addNewNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|outcome
operator|.
name|clusterChanged
argument_list|)
expr_stmt|;
comment|// one call to cancel
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outcome
operator|.
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// and on a review, one more to rebuild
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

