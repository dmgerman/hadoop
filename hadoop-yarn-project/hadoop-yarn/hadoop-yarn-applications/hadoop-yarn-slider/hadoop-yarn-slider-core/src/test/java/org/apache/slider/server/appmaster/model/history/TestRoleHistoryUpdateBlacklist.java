begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|ResetFailureWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRMOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|UpdateBlacklistOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test updating blacklist.  */
end_comment

begin_class
DECL|class|TestRoleHistoryUpdateBlacklist
specifier|public
class|class
name|TestRoleHistoryUpdateBlacklist
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|roleHistory
specifier|private
name|RoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
name|MockFactory
operator|.
name|ROLES
argument_list|)
decl_stmt|;
DECL|field|roleStatuses
specifier|private
name|Collection
argument_list|<
name|RoleStatus
argument_list|>
name|roleStatuses
decl_stmt|;
DECL|field|roleStatus
specifier|private
name|RoleStatus
name|roleStatus
decl_stmt|;
DECL|field|ni
specifier|private
name|NodeInstance
name|ni
decl_stmt|;
DECL|method|TestRoleHistoryUpdateBlacklist ()
specifier|public
name|TestRoleHistoryUpdateBlacklist
parameter_list|()
throws|throws
name|BadConfigException
block|{   }
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestUpdateBlacklist"
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|ni
operator|=
name|nodeInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|insert
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ni
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|buildRecentNodeLists
argument_list|()
expr_stmt|;
name|appState
operator|.
name|setRoleHistory
argument_list|(
name|roleHistory
argument_list|)
expr_stmt|;
name|roleStatus
operator|=
name|getRole0Status
argument_list|()
expr_stmt|;
name|roleStatuses
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|roleStatus
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testUpdateBlacklist ()
specifier|public
name|void
name|testUpdateBlacklist
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
comment|// at threshold, blacklist is unmodified
name|recordAsFailed
argument_list|(
name|ni
argument_list|,
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
name|MockFactory
operator|.
name|NODE_FAILURE_THRESHOLD
argument_list|)
expr_stmt|;
name|UpdateBlacklistOperation
name|op
init|=
name|roleHistory
operator|.
name|updateBlacklist
argument_list|(
name|roleStatuses
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
comment|// threshold is reached, node goes on blacklist
name|recordAsFailed
argument_list|(
name|ni
argument_list|,
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|op
operator|=
name|roleHistory
operator|.
name|updateBlacklist
argument_list|(
name|roleStatuses
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
comment|// blacklist remains unmodified
name|op
operator|=
name|roleHistory
operator|.
name|updateBlacklist
argument_list|(
name|roleStatuses
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
comment|// failure threshold reset, node goes off blacklist
name|ni
operator|.
name|resetFailedRecently
argument_list|()
expr_stmt|;
name|op
operator|=
name|roleHistory
operator|.
name|updateBlacklist
argument_list|(
name|roleStatuses
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testBlacklistOperations ()
specifier|public
name|void
name|testBlacklistOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|recordAsFailed
argument_list|(
name|ni
argument_list|,
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
name|MockFactory
operator|.
name|NODE_FAILURE_THRESHOLD
operator|+
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertListLength
argument_list|(
name|ops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|UpdateBlacklistOperation
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
name|MockRMOperationHandler
name|handler
init|=
operator|new
name|MockRMOperationHandler
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
name|ResetFailureWindow
name|resetter
init|=
operator|new
name|ResetFailureWindow
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|resetter
operator|.
name|execute
argument_list|(
operator|new
name|MockAM
argument_list|()
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ni
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

