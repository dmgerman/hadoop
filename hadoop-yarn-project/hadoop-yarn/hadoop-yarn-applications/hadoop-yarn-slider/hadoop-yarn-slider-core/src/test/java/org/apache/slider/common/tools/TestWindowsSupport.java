begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|YarnMiniClusterTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Test windows support.  */
end_comment

begin_class
DECL|class|TestWindowsSupport
specifier|public
class|class
name|TestWindowsSupport
extends|extends
name|YarnMiniClusterTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWindowsSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HAS_DRIVE_LETTER_SPECIFIER
specifier|private
specifier|static
specifier|final
name|Pattern
name|HAS_DRIVE_LETTER_SPECIFIER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^/?[a-zA-Z]:"
argument_list|)
decl_stmt|;
DECL|field|WINDOWS_FILE
specifier|public
specifier|static
specifier|final
name|String
name|WINDOWS_FILE
init|=
literal|"C:\\Users\\Administrator\\AppData\\Local\\Temp"
operator|+
literal|"\\junit3180177850133852404\\testpkg\\appdef_1.zip"
decl_stmt|;
DECL|method|hasWindowsDrive (String path)
specifier|private
specifier|static
name|boolean
name|hasWindowsDrive
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|HAS_DRIVE_LETTER_SPECIFIER
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
DECL|method|startPositionWithoutWindowsDrive (String path)
specifier|private
specifier|static
name|int
name|startPositionWithoutWindowsDrive
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|hasWindowsDrive
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|?
literal|3
else|:
literal|2
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHasWindowsDrive ()
specifier|public
name|void
name|testHasWindowsDrive
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
name|hasWindowsDrive
argument_list|(
name|WINDOWS_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartPosition ()
specifier|public
name|void
name|testStartPosition
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|startPositionWithoutWindowsDrive
argument_list|(
name|WINDOWS_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPathHandling ()
specifier|public
name|void
name|testPathHandling
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|WINDOWS_FILE
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
comment|//    assert "file" == uri.scheme
name|assertNull
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localfs
operator|instanceof
name|ChecksumFileSystem
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
name|stat
init|=
name|localfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected an exception, got "
operator|+
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|FSDataInputStream
name|appStream
init|=
name|localfs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testExecNonexistentBinary ()
specifier|public
name|void
name|testExecNonexistentBinary
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"undefined-application"
argument_list|,
literal|"--version"
argument_list|)
decl_stmt|;
try|try
block|{
name|exec
argument_list|(
literal|0
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testExecNonexistentBinary2 ()
specifier|public
name|void
name|testExecNonexistentBinary2
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|doesAppExist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"undefined-application"
argument_list|,
literal|"--version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmitKillCommand ()
specifier|public
name|void
name|testEmitKillCommand
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|result
init|=
name|killJavaProcesses
argument_list|(
literal|"regionserver"
argument_list|,
literal|9
argument_list|)
decl_stmt|;
comment|// we know the exit code if there is no supported kill operation
name|assertTrue
argument_list|(
name|getKillSupported
argument_list|()
operator|||
name|result
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHadoopHomeDefined ()
specifier|public
name|void
name|testHadoopHomeDefined
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|String
name|hadoopHome
init|=
name|Shell
operator|.
name|getHadoopHome
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HADOOP_HOME={}"
argument_list|,
name|hadoopHome
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasWinutils ()
specifier|public
name|void
name|testHasWinutils
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|SliderUtils
operator|.
name|maybeVerifyWinUtilsValid
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecWinutils ()
specifier|public
name|void
name|testExecWinutils
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|String
name|winUtilsPath
init|=
name|Shell
operator|.
name|getWinUtilsPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|winUtilsPath
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|winUtils
init|=
operator|new
name|File
argument_list|(
name|winUtilsPath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Winutils is at {}"
argument_list|,
name|winUtils
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|winUtilsPath
argument_list|,
literal|"systeminfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPath ()
specifier|public
name|void
name|testPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
name|extractPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Path value = {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindJavac ()
specifier|public
name|void
name|testFindJavac
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|name
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"javac.exe"
else|:
literal|"javac"
decl_stmt|;
name|assertNotNull
argument_list|(
name|locateExecutable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHadoopDLL ()
specifier|public
name|void
name|testHadoopDLL
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
comment|// split the path
name|File
name|exepath
init|=
name|locateExecutable
argument_list|(
literal|"HADOOP.DLL"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exepath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Hadoop DLL at: {}"
argument_list|,
name|exepath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

