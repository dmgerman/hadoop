begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TestWorkflowClosingService
specifier|public
class|class
name|TestWorkflowClosingService
extends|extends
name|WorkflowServiceTestBase
block|{
annotation|@
name|Test
DECL|method|testSimpleClose ()
specifier|public
name|void
name|testSimpleClose
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
name|svc
init|=
name|instance
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|OpenClose
name|openClose
init|=
name|svc
operator|.
name|getCloseable
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|openClose
operator|.
name|closed
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|openClose
operator|.
name|closed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullClose ()
specifier|public
name|void
name|testNullClose
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
name|svc
init|=
operator|new
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|svc
operator|.
name|getCloseable
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailingClose ()
specifier|public
name|void
name|testFailingClose
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
name|svc
init|=
name|instance
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|OpenClose
name|openClose
init|=
name|svc
operator|.
name|getCloseable
argument_list|()
decl_stmt|;
name|openClose
operator|.
name|raiseExceptionOnClose
operator|=
literal|true
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|openClose
operator|.
name|closed
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|svc
operator|.
name|getFailureCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cause
argument_list|)
expr_stmt|;
comment|//retry should be a no-op
name|svc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleClose ()
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
name|svc
init|=
name|instance
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|OpenClose
name|openClose
init|=
name|svc
operator|.
name|getCloseable
argument_list|()
decl_stmt|;
name|openClose
operator|.
name|raiseExceptionOnClose
operator|=
literal|true
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|openClose
operator|.
name|closed
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|svc
operator|.
name|getFailureCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|openClose
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|svc
operator|.
name|getFailureCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This does not recurse forever, as the service has already entered the    * STOPPED state before the inner close tries to stop it -that operation    * is a no-op    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testCloseSelf ()
specifier|public
name|void
name|testCloseSelf
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClosingService
argument_list|<
name|ClosingService
argument_list|>
name|svc
init|=
operator|new
name|ClosingService
argument_list|<
name|ClosingService
argument_list|>
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|svc
operator|.
name|setCloseable
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|instance (boolean raiseExceptionOnClose)
specifier|private
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
name|instance
parameter_list|(
name|boolean
name|raiseExceptionOnClose
parameter_list|)
block|{
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
name|svc
init|=
operator|new
name|ClosingService
argument_list|<
name|OpenClose
argument_list|>
argument_list|(
operator|new
name|OpenClose
argument_list|(
name|raiseExceptionOnClose
argument_list|)
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|svc
return|;
block|}
DECL|class|OpenClose
specifier|private
specifier|static
class|class
name|OpenClose
implements|implements
name|Closeable
block|{
DECL|field|closed
specifier|public
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|raiseExceptionOnClose
specifier|public
name|boolean
name|raiseExceptionOnClose
decl_stmt|;
DECL|method|OpenClose (boolean raiseExceptionOnClose)
specifier|private
name|OpenClose
parameter_list|(
name|boolean
name|raiseExceptionOnClose
parameter_list|)
block|{
name|this
operator|.
name|raiseExceptionOnClose
operator|=
name|raiseExceptionOnClose
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|raiseExceptionOnClose
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OpenClose"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

