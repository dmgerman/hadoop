begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|CancelSingleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAllocationOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAllocationResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|OutstandingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|OutstandingRequestTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test outstanding request tracker.  */
end_comment

begin_class
DECL|class|TestRoleHistoryOutstandingRequestTracker
specifier|public
class|class
name|TestRoleHistoryOutstandingRequestTracker
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRoleHistoryOutstandingRequestTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WORKERS_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|WORKERS_LABEL
init|=
literal|"workers"
decl_stmt|;
DECL|field|host1
specifier|private
name|NodeInstance
name|host1
init|=
operator|new
name|NodeInstance
argument_list|(
literal|"host1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|host2
specifier|private
name|NodeInstance
name|host2
init|=
operator|new
name|NodeInstance
argument_list|(
literal|"host2"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|resource
specifier|private
name|MockResource
name|resource
init|=
name|factory
operator|.
name|newResource
argument_list|(
literal|48
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|tracker
specifier|private
name|OutstandingRequestTracker
name|tracker
init|=
operator|new
name|OutstandingRequestTracker
argument_list|()
decl_stmt|;
DECL|field|WORKER
specifier|public
specifier|static
specifier|final
name|String
name|WORKER
init|=
literal|"worker"
decl_stmt|;
annotation|@
name|Override
DECL|method|buildApplication ()
specifier|public
name|Application
name|buildApplication
parameter_list|()
block|{
name|Application
name|application
init|=
name|super
operator|.
name|buildApplication
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"worker"
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|YARN_LABEL_EXPRESSION
argument_list|,
name|WORKERS_LABEL
argument_list|)
expr_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
annotation|@
name|Test
DECL|method|testAddRetrieveEntry ()
specifier|public
name|void
name|testAddRetrieveEntry
parameter_list|()
throws|throws
name|Throwable
block|{
name|OutstandingRequest
name|request
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tracker
operator|.
name|lookupPlacedRequest
argument_list|(
literal|0
argument_list|,
literal|"host1"
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tracker
operator|.
name|removePlacedRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tracker
operator|.
name|lookupPlacedRequest
argument_list|(
literal|0
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddCompleteEntry ()
specifier|public
name|void
name|testAddCompleteEntry
parameter_list|()
throws|throws
name|Throwable
block|{
name|OutstandingRequest
name|req1
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|req1
operator|.
name|buildContainerRequest
argument_list|(
name|resource
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|newRequest
argument_list|(
name|host2
argument_list|,
literal|0
argument_list|)
operator|.
name|buildContainerRequest
argument_list|(
name|resource
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
literal|1
argument_list|)
operator|.
name|buildContainerRequest
argument_list|(
name|resource
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContainerAllocationResults
name|allocation
init|=
name|tracker
operator|.
name|onContainerAllocated
argument_list|(
literal|1
argument_list|,
literal|"host1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|allocation
operator|.
name|outcome
argument_list|,
name|ContainerAllocationOutcome
operator|.
name|Placed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocation
operator|.
name|operations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tracker
operator|.
name|lookupPlacedRequest
argument_list|(
literal|1
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tracker
operator|.
name|lookupPlacedRequest
argument_list|(
literal|0
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetOpenRequests ()
specifier|public
name|void
name|testResetOpenRequests
parameter_list|()
throws|throws
name|Throwable
block|{
name|OutstandingRequest
name|req1
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|req1
operator|.
name|isLocated
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OutstandingRequest
argument_list|>
name|openRequests
init|=
name|tracker
operator|.
name|listOpenRequests
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|openRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|resetOutstandingRequests
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|listOpenRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|listPlacedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveOpenRequestUnissued ()
specifier|public
name|void
name|testRemoveOpenRequestUnissued
parameter_list|()
throws|throws
name|Throwable
block|{
name|OutstandingRequest
name|req1
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|req1
operator|.
name|buildContainerRequest
argument_list|(
name|resource
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|listOpenRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockContainer
name|c1
init|=
name|factory
operator|.
name|newContainer
argument_list|(
literal|null
argument_list|,
operator|new
name|MockPriority
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|c1
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|ContainerAllocationResults
name|allocation
init|=
name|tracker
operator|.
name|onContainerAllocated
argument_list|(
literal|0
argument_list|,
literal|"host1"
argument_list|,
name|c1
argument_list|)
decl_stmt|;
name|ContainerAllocationOutcome
name|outcome
init|=
name|allocation
operator|.
name|outcome
decl_stmt|;
name|assertEquals
argument_list|(
name|outcome
argument_list|,
name|ContainerAllocationOutcome
operator|.
name|Unallocated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocation
operator|.
name|operations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|listOpenRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIssuedOpenRequest ()
specifier|public
name|void
name|testIssuedOpenRequest
parameter_list|()
throws|throws
name|Throwable
block|{
name|OutstandingRequest
name|req1
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|req1
operator|.
name|buildContainerRequest
argument_list|(
name|resource
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|listOpenRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|pri
init|=
name|ContainerPriority
operator|.
name|buildPriority
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pri
operator|>
literal|0
argument_list|)
expr_stmt|;
name|MockNodeId
name|nodeId
init|=
name|factory
operator|.
name|newNodeId
argument_list|(
literal|"hostname-1"
argument_list|)
decl_stmt|;
name|MockContainer
name|c1
init|=
name|factory
operator|.
name|newContainer
argument_list|(
name|nodeId
argument_list|,
operator|new
name|MockPriority
argument_list|(
name|pri
argument_list|)
argument_list|)
decl_stmt|;
name|c1
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|ContainerRequest
name|issued
init|=
name|req1
operator|.
name|getIssuedRequest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|issued
operator|.
name|getCapability
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|issued
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|c1
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|req1
operator|.
name|resourceRequirementsMatch
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerAllocationResults
name|allocation
init|=
name|tracker
operator|.
name|onContainerAllocated
argument_list|(
literal|0
argument_list|,
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|c1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tracker
operator|.
name|listOpenRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocation
operator|.
name|operations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocation
operator|.
name|outcome
argument_list|,
name|ContainerAllocationOutcome
operator|.
name|Open
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocation
operator|.
name|origin
argument_list|,
name|req1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetEntries ()
specifier|public
name|void
name|testResetEntries
parameter_list|()
throws|throws
name|Throwable
block|{
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|newRequest
argument_list|(
name|host2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|canceled
init|=
name|tracker
operator|.
name|resetOutstandingRequests
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|canceled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canceled
operator|.
name|contains
argument_list|(
name|host1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canceled
operator|.
name|contains
argument_list|(
name|host2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tracker
operator|.
name|lookupPlacedRequest
argument_list|(
literal|1
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tracker
operator|.
name|lookupPlacedRequest
argument_list|(
literal|0
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|canceled
operator|=
name|tracker
operator|.
name|resetOutstandingRequests
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|canceled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|resetOutstandingRequests
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEscalation ()
specifier|public
name|void
name|testEscalation
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// first request: default placement
name|assertEquals
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|,
name|PlacementPolicy
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Resource
name|res0
init|=
name|newResource
argument_list|(
name|getRole0Status
argument_list|()
argument_list|)
decl_stmt|;
name|OutstandingRequest
name|outstanding0
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerRequest
name|initialRequest
init|=
name|outstanding0
operator|.
name|buildContainerRequest
argument_list|(
name|res0
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outstanding0
operator|.
name|getIssuedRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outstanding0
operator|.
name|isLocated
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outstanding0
operator|.
name|isEscalated
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|initialRequest
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracker
operator|.
name|listPlacedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// second. This one doesn't get launched. This is to verify that the
comment|// escalation process skips entries which are in the list but have not
comment|// been issued, which can be a race condition between request issuance&
comment|// escalation.
comment|// (not one observed outside test authoring, but retained for completeness)
name|Resource
name|res2
init|=
name|newResource
argument_list|(
name|getRole2Status
argument_list|()
argument_list|)
decl_stmt|;
name|OutstandingRequest
name|outstanding2
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
name|getRole2Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// simulate some time escalation of role 1 MUST now be triggered
name|long
name|interval
init|=
name|getRole0Status
argument_list|()
operator|.
name|getPlacementTimeoutSeconds
argument_list|()
operator|*
literal|1000
operator|+
literal|500
decl_stmt|;
name|long
name|now
init|=
name|interval
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|escalations
init|=
name|tracker
operator|.
name|escalateOutstandingRequests
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outstanding0
operator|.
name|isEscalated
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outstanding2
operator|.
name|isEscalated
argument_list|()
argument_list|)
expr_stmt|;
comment|// two entries
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|escalations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|e1
init|=
name|escalations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e1
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
specifier|final
name|CancelSingleRequest
name|cancel
init|=
operator|(
name|CancelSingleRequest
operator|)
name|e1
decl_stmt|;
name|assertEquals
argument_list|(
name|initialRequest
argument_list|,
name|cancel
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|e2
init|=
name|escalations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e2
operator|instanceof
name|ContainerRequestOperation
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|escRequest
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|e2
decl_stmt|;
name|assertTrue
argument_list|(
name|escRequest
operator|.
name|getRequest
argument_list|()
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
comment|// build that second request from an anti-affine entry
comment|// these get placed as well
name|now
operator|+=
name|interval
expr_stmt|;
name|ContainerRequest
name|containerReq2
init|=
name|outstanding2
operator|.
name|buildContainerRequest
argument_list|(
name|res2
argument_list|,
name|getRole2Status
argument_list|()
argument_list|,
name|now
argument_list|)
decl_stmt|;
comment|// escalate a little bit more
specifier|final
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|escalations2
init|=
name|tracker
operator|.
name|escalateOutstandingRequests
argument_list|(
name|now
argument_list|)
decl_stmt|;
comment|// and expect no new entries
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|escalations2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// go past the role2 timeout
name|now
operator|+=
name|getRole2Status
argument_list|()
operator|.
name|getPlacementTimeoutSeconds
argument_list|()
operator|*
literal|1000
operator|+
literal|500
expr_stmt|;
comment|// escalate a little bit more
specifier|final
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|escalations3
init|=
name|tracker
operator|.
name|escalateOutstandingRequests
argument_list|(
name|now
argument_list|)
decl_stmt|;
comment|// and expect another escalation
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|escalations3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outstanding2
operator|.
name|isEscalated
argument_list|()
argument_list|)
expr_stmt|;
comment|// finally add a strict entry to the mix
name|Resource
name|res3
init|=
name|newResource
argument_list|(
name|getRole1Status
argument_list|()
argument_list|)
decl_stmt|;
name|OutstandingRequest
name|outstanding3
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|host1
argument_list|,
name|getRole1Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ProviderRole
name|providerRole1
init|=
name|getRole1Status
argument_list|()
operator|.
name|getProviderRole
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|providerRole1
operator|.
name|placementPolicy
argument_list|,
name|PlacementPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|now
operator|+=
name|interval
expr_stmt|;
name|assertFalse
argument_list|(
name|outstanding3
operator|.
name|mayEscalate
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|escalations4
init|=
name|tracker
operator|.
name|escalateOutstandingRequests
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|escalations4
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the placement does include a label, the initial request must    *<i>not</i> include it.    * The escalation request will contain the label, while    * leaving out the node list.    * retains the node list, but sets relaxLocality==true    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testRequestLabelledPlacement ()
specifier|public
name|void
name|testRequestLabelledPlacement
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
name|ni
init|=
operator|new
name|NodeInstance
argument_list|(
literal|"host1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|OutstandingRequest
name|req1
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|ni
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|res0
init|=
name|factory
operator|.
name|newResource
argument_list|(
literal|48
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RoleStatus
name|workerRole
init|=
name|lookupRole
argument_list|(
name|WORKER
argument_list|)
decl_stmt|;
comment|// initial request
name|ContainerRequest
name|yarnRequest
init|=
name|req1
operator|.
name|buildContainerRequest
argument_list|(
name|res0
argument_list|,
name|workerRole
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|req1
operator|.
name|label
argument_list|,
name|WORKERS_LABEL
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|yarnRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|yarnRequest
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
comment|// escalation
name|ContainerRequest
name|yarnRequest2
init|=
name|req1
operator|.
name|escalate
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|yarnRequest2
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|yarnRequest2
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|yarnRequest2
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|WORKERS_LABEL
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the placement doesnt include a label, then the escalation request    * retains the node list, but sets relaxLocality==true.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testRequestUnlabelledPlacement ()
specifier|public
name|void
name|testRequestUnlabelledPlacement
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
name|ni
init|=
operator|new
name|NodeInstance
argument_list|(
literal|"host1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|OutstandingRequest
name|req1
init|=
name|tracker
operator|.
name|newRequest
argument_list|(
name|ni
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|res0
init|=
name|factory
operator|.
name|newResource
argument_list|(
literal|48
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// initial request
name|ContainerRequest
name|yarnRequest
init|=
name|req1
operator|.
name|buildContainerRequest
argument_list|(
name|res0
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|yarnRequest
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|yarnRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|yarnRequest
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequest
name|yarnRequest2
init|=
name|req1
operator|.
name|escalate
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|yarnRequest2
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|yarnRequest2
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testAARequestNoNodes ()
specifier|public
name|void
name|testAARequestNoNodes
parameter_list|()
throws|throws
name|Throwable
block|{
name|tracker
operator|.
name|newAARequest
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAARequest ()
specifier|public
name|void
name|testAARequest
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|role0
init|=
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OutstandingRequest
name|request
init|=
name|tracker
operator|.
name|newAARequest
argument_list|(
name|role0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|host1
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|host1
operator|.
name|hostname
argument_list|,
name|request
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isLocated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAARequestPair ()
specifier|public
name|void
name|testAARequestPair
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|role0
init|=
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OutstandingRequest
name|request
init|=
name|tracker
operator|.
name|newAARequest
argument_list|(
name|role0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|host1
argument_list|,
name|host2
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|host1
operator|.
name|hostname
argument_list|,
name|request
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isLocated
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequest
name|yarnRequest
init|=
name|request
operator|.
name|buildContainerRequest
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|copyResourceRequirements
argument_list|(
operator|new
name|MockResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|getRole0Status
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|yarnRequest
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|mayEscalate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|yarnRequest
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildResourceRequirements ()
specifier|public
name|void
name|testBuildResourceRequirements
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Store original values
name|Application
name|application
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Component
name|role0
init|=
name|application
operator|.
name|getComponent
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|origMem
init|=
name|role0
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|Integer
name|origVcores
init|=
name|role0
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
decl_stmt|;
comment|// Resource values to be used for this test
name|int
name|testMem
init|=
literal|32768
decl_stmt|;
name|int
name|testVcores
init|=
literal|2
decl_stmt|;
name|role0
operator|.
name|resource
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Resource
argument_list|()
operator|.
name|memory
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testMem
argument_list|)
argument_list|)
operator|.
name|cpus
argument_list|(
name|testVcores
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test normalization disabled
name|LOG
operator|.
name|info
argument_list|(
literal|"Test normalization: disabled"
argument_list|)
expr_stmt|;
name|role0
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|YARN_RESOURCE_NORMALIZATION_ENABLED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|MockResource
name|requestedRes
init|=
operator|new
name|MockResource
argument_list|(
name|testMem
argument_list|,
name|testVcores
argument_list|)
decl_stmt|;
name|MockResource
name|expectedRes
init|=
operator|new
name|MockResource
argument_list|(
name|testMem
argument_list|,
name|testVcores
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource requested: {}"
argument_list|,
name|requestedRes
argument_list|)
expr_stmt|;
name|Resource
name|resFinal
init|=
name|appState
operator|.
name|buildResourceRequirements
argument_list|(
name|getRole0Status
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource actual: {}"
argument_list|,
name|resFinal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|expectedRes
argument_list|,
name|resFinal
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test normalization enabled
name|LOG
operator|.
name|info
argument_list|(
literal|"Test normalization: enabled"
argument_list|)
expr_stmt|;
name|role0
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|YARN_RESOURCE_NORMALIZATION_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|expectedRes
operator|=
operator|new
name|MockResource
argument_list|(
name|MockAppState
operator|.
name|RM_MAX_RAM
argument_list|,
name|testVcores
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource requested: {}"
argument_list|,
name|requestedRes
argument_list|)
expr_stmt|;
name|resFinal
operator|=
name|appState
operator|.
name|buildResourceRequirements
argument_list|(
name|getRole0Status
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource actual: {}"
argument_list|,
name|resFinal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|expectedRes
argument_list|,
name|resFinal
argument_list|)
argument_list|)
expr_stmt|;
comment|// revert resource configuration to original value
name|role0
operator|.
name|resource
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Resource
argument_list|()
operator|.
name|memory
argument_list|(
name|origMem
argument_list|)
operator|.
name|cpus
argument_list|(
name|origVcores
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newResource (RoleStatus r)
specifier|public
name|Resource
name|newResource
parameter_list|(
name|RoleStatus
name|r
parameter_list|)
block|{
return|return
name|appState
operator|.
name|buildResourceRequirements
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
end_class

end_unit

