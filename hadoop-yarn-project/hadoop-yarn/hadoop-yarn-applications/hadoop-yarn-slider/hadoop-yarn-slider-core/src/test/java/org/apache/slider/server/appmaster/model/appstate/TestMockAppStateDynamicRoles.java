begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
operator|.
name|NodeCompletionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
operator|.
name|NODE_FAILURE_THRESHOLD
import|;
end_import

begin_comment
comment|/**  * Test that if you have>1 role, the right roles are chosen for release.  */
end_comment

begin_class
DECL|class|TestMockAppStateDynamicRoles
specifier|public
class|class
name|TestMockAppStateDynamicRoles
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMockAppStateDynamicRoles
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROLE4
specifier|private
specifier|static
specifier|final
name|String
name|ROLE4
init|=
literal|"4"
decl_stmt|;
DECL|field|ROLE5
specifier|private
specifier|static
specifier|final
name|String
name|ROLE5
init|=
literal|"5"
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateDynamicRoles"
return|;
block|}
comment|/**    * Small cluster with multiple containers per node,    * to guarantee many container allocations on each node.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildApplication ()
specifier|public
name|Application
name|buildApplication
parameter_list|()
block|{
name|Application
name|application
init|=
name|super
operator|.
name|buildApplication
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
name|ROLE4
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|NODE_FAILURE_THRESHOLD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|component
operator|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
name|ROLE5
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_PLACEMENT_POLICY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PlacementPolicy
operator|.
name|STRICT
argument_list|)
argument_list|)
expr_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
annotation|@
name|Test
DECL|method|testAllocateReleaseRealloc ()
specifier|public
name|void
name|testAllocateReleaseRealloc
parameter_list|()
throws|throws
name|Throwable
block|{
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
comment|/**    * Find all allocations for a specific role.    * @param role role Id/priority    * @param actions source list    * @return found list    */
DECL|method|findAllocationsForRole (int role, List<AbstractRMOperation> actions)
name|List
argument_list|<
name|ContainerRequestOperation
argument_list|>
name|findAllocationsForRole
parameter_list|(
name|int
name|role
parameter_list|,
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|actions
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerRequestOperation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractRMOperation
name|op
range|:
name|actions
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|ContainerRequestOperation
operator|&&
name|role
operator|==
name|ContainerPriority
operator|.
name|extractRole
argument_list|(
operator|(
operator|(
name|ContainerRequestOperation
operator|)
name|op
operator|)
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
condition|)
block|{
name|ops
operator|.
name|add
argument_list|(
operator|(
name|ContainerRequestOperation
operator|)
name|op
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ops
return|;
block|}
annotation|@
name|Test
DECL|method|testStrictPlacementInitialRequest ()
specifier|public
name|void
name|testStrictPlacementInitialRequest
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial engine state = {}"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|actions
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// neither have locality at this point
name|assertRelaxLocalityFlag
argument_list|(
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|assertRelaxLocalityFlag
argument_list|(
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE5
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPolicyPropagation ()
specifier|public
name|void
name|testPolicyPropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
operator|.
name|getPlacementPolicy
argument_list|()
operator|&
name|PlacementPolicy
operator|.
name|STRICT
operator|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE5
argument_list|)
operator|.
name|getPlacementPolicy
argument_list|()
operator|&
name|PlacementPolicy
operator|.
name|STRICT
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeFailureThresholdPropagation ()
specifier|public
name|void
name|testNodeFailureThresholdPropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
operator|.
name|getNodeFailureThreshold
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODE_FAILURE_THRESHOLD
argument_list|,
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE5
argument_list|)
operator|.
name|getNodeFailureThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaxPlacementSecondRequestRole4 ()
specifier|public
name|void
name|testLaxPlacementSecondRequestRole4
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial engine state = {}"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|RoleStatus
name|role4
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
decl_stmt|;
name|RoleStatus
name|role5
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE5
argument_list|)
decl_stmt|;
name|role4
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|role5
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createStartAndStopNodes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RoleInstance
name|instanceA
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoleInstance
name|instance
range|:
name|instances
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|roleId
operator|==
name|id
condition|)
block|{
name|instanceA
operator|=
name|instance
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|instanceA
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|RoleHistoryUtils
operator|.
name|hostnameOf
argument_list|(
name|instanceA
operator|.
name|container
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated engine state = {}"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|role4
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// shrinking cluster
name|role4
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeCompletionResult
argument_list|>
name|completionResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|createStartAndStopNodes
argument_list|(
name|completionResults
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|completionResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// expanding: expect hostnames  now
name|role4
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|actions
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|cro
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|cro
operator|.
name|getRequest
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrictPlacementSecondRequestRole5 ()
specifier|public
name|void
name|testStrictPlacementSecondRequestRole5
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial engine state = {}"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|RoleStatus
name|role4
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE4
argument_list|)
decl_stmt|;
name|RoleStatus
name|role5
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE5
argument_list|)
decl_stmt|;
name|role4
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|role5
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createStartAndStopNodes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|ROLE5
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RoleInstance
name|instanceA
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoleInstance
name|instance
range|:
name|instances
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|roleId
operator|==
name|id
condition|)
block|{
name|instanceA
operator|=
name|instance
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|instanceA
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|RoleHistoryUtils
operator|.
name|hostnameOf
argument_list|(
name|instanceA
operator|.
name|container
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated engine state = {}"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|role5
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// shrinking cluster
name|role5
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeCompletionResult
argument_list|>
name|completionResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|createStartAndStopNodes
argument_list|(
name|completionResults
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|completionResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|role5
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|role5
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|actions
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertRelaxLocalityFlag
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|cro
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|cro
operator|.
name|getRequest
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRelaxLocalityFlag ( int role, String expectedHost, boolean expectedRelaxFlag, List<AbstractRMOperation> actions)
specifier|public
name|void
name|assertRelaxLocalityFlag
parameter_list|(
name|int
name|role
parameter_list|,
name|String
name|expectedHost
parameter_list|,
name|boolean
name|expectedRelaxFlag
parameter_list|,
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|actions
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerRequestOperation
argument_list|>
name|requests
init|=
name|findAllocationsForRole
argument_list|(
name|role
argument_list|,
name|actions
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|req
init|=
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRelaxFlag
argument_list|,
name|req
operator|.
name|getRequest
argument_list|()
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

