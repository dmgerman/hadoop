begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.mock
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
operator|.
name|MetricsAndMonitoring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AbstractClusterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Extended app state that makes more things public.  */
end_comment

begin_class
DECL|class|MockAppState
specifier|public
class|class
name|MockAppState
extends|extends
name|AppState
block|{
DECL|field|RM_MAX_RAM
specifier|public
specifier|static
specifier|final
name|int
name|RM_MAX_RAM
init|=
literal|4096
decl_stmt|;
DECL|field|RM_MAX_CORES
specifier|public
specifier|static
specifier|final
name|int
name|RM_MAX_CORES
init|=
literal|64
decl_stmt|;
DECL|field|time
specifier|private
name|long
name|time
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MockAppState (AbstractClusterServices recordFactory)
specifier|public
name|MockAppState
parameter_list|(
name|AbstractClusterServices
name|recordFactory
parameter_list|)
block|{
name|super
argument_list|(
name|recordFactory
argument_list|,
operator|new
name|MetricsAndMonitoring
argument_list|()
argument_list|)
expr_stmt|;
name|setContainerLimits
argument_list|(
literal|1
argument_list|,
name|RM_MAX_RAM
argument_list|,
literal|1
argument_list|,
name|RM_MAX_CORES
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instance with a mock record factory.    */
DECL|method|MockAppState ()
specifier|public
name|MockAppState
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|MockClusterServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MockAppState (AppStateBindingInfo bindingInfo)
specifier|public
name|MockAppState
parameter_list|(
name|AppStateBindingInfo
name|bindingInfo
parameter_list|)
throws|throws
name|BadClusterStateException
throws|,
name|IOException
throws|,
name|BadConfigException
block|{
name|this
argument_list|()
expr_stmt|;
name|buildInstance
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|getRoleMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ProviderRole
argument_list|>
name|getRoleMap
parameter_list|()
block|{
return|return
name|super
operator|.
name|getRoleMap
argument_list|()
return|;
block|}
comment|/**    * Current time. if the<code>time</code> field    * is set, that value is returned    * @return the current time.    */
DECL|method|now ()
specifier|protected
name|long
name|now
parameter_list|()
block|{
if|if
condition|(
name|time
operator|>
literal|0
condition|)
block|{
return|return
name|time
return|;
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
DECL|method|setTime (long newTime)
specifier|public
name|void
name|setTime
parameter_list|(
name|long
name|newTime
parameter_list|)
block|{
name|this
operator|.
name|time
operator|=
name|newTime
expr_stmt|;
block|}
DECL|method|incTime (long inc)
specifier|public
name|void
name|incTime
parameter_list|(
name|long
name|inc
parameter_list|)
block|{
name|this
operator|.
name|time
operator|=
name|this
operator|.
name|time
operator|+
name|inc
expr_stmt|;
block|}
block|}
end_class

end_unit

