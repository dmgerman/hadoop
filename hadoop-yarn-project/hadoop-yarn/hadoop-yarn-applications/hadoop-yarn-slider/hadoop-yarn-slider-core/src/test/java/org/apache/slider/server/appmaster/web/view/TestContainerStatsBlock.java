begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.view
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|view
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|DIV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|HamletImpl
operator|.
name|EImp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ProviderAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApiImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|view
operator|.
name|ContainerStatsBlock
operator|.
name|ClusterNodeNameComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|view
operator|.
name|ContainerStatsBlock
operator|.
name|TableAnchorContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|view
operator|.
name|ContainerStatsBlock
operator|.
name|TableContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test container stats block.  */
end_comment

begin_class
DECL|class|TestContainerStatsBlock
specifier|public
class|class
name|TestContainerStatsBlock
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|statsBlock
specifier|private
name|ContainerStatsBlock
name|statsBlock
decl_stmt|;
DECL|field|cont1
DECL|field|cont2
specifier|private
name|Container
name|cont1
decl_stmt|,
name|cont2
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|ProviderAppState
name|providerAppState
init|=
operator|new
name|ProviderAppState
argument_list|(
literal|"undefined"
argument_list|,
name|appState
argument_list|)
decl_stmt|;
name|WebAppApiImpl
name|inst
init|=
operator|new
name|WebAppApiImpl
argument_list|(
name|providerAppState
argument_list|,
literal|null
argument_list|,
name|METRICS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebappModule
argument_list|(
name|inst
argument_list|)
argument_list|)
decl_stmt|;
name|statsBlock
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ContainerStatsBlock
operator|.
name|class
argument_list|)
expr_stmt|;
name|cont1
operator|=
operator|new
name|MockContainer
argument_list|()
expr_stmt|;
name|cont1
operator|.
name|setId
argument_list|(
name|mockContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cont1
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|cont1
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cont1
operator|.
name|setResource
argument_list|(
operator|new
name|MockResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cont2
operator|=
operator|new
name|MockContainer
argument_list|()
expr_stmt|;
name|cont2
operator|.
name|setId
argument_list|(
name|mockContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cont2
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|cont2
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cont2
operator|.
name|setResource
argument_list|(
operator|new
name|MockResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|WebappModule
specifier|private
specifier|static
class|class
name|WebappModule
extends|extends
name|AbstractModule
block|{
DECL|field|instance
specifier|private
specifier|final
name|WebAppApiImpl
name|instance
decl_stmt|;
DECL|method|WebappModule (WebAppApiImpl instance)
name|WebappModule
parameter_list|(
name|WebAppApiImpl
name|instance
parameter_list|)
block|{
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|WebAppApi
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mockContainerId (int count)
specifier|public
name|MockContainerId
name|mockContainerId
parameter_list|(
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|MockContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
name|count
argument_list|)
return|;
block|}
comment|//@Test
DECL|method|testGetContainerInstances ()
specifier|public
name|void
name|testGetContainerInstances
parameter_list|()
block|{
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|roles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|RoleInstance
argument_list|(
name|cont1
argument_list|)
argument_list|,
operator|new
name|RoleInstance
argument_list|(
name|cont2
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|map
init|=
name|statsBlock
operator|.
name|getContainerInstances
argument_list|(
name|roles
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"mockcontainer_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"mockcontainer_0"
argument_list|)
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"mockcontainer_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"mockcontainer_1"
argument_list|)
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testGenerateRoleDetailsWithTwoColumns ()
specifier|public
name|void
name|testGenerateRoleDetailsWithTwoColumns
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|Hamlet
name|hamlet
init|=
operator|new
name|Hamlet
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Make a div to put the content into
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|hamlet
operator|.
name|div
argument_list|()
decl_stmt|;
name|String
name|detailsName
init|=
literal|"testing"
decl_stmt|;
name|String
name|selector
init|=
literal|"selector"
decl_stmt|;
name|Map
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
operator|new
name|ContainerStatsBlock
operator|.
name|TableContent
argument_list|(
literal|"Foo"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|int
name|levelPrior
init|=
name|hamlet
operator|.
name|nestLevel
argument_list|()
decl_stmt|;
name|statsBlock
operator|.
name|generateRoleDetails
argument_list|(
name|div
argument_list|,
name|selector
argument_list|,
name|detailsName
argument_list|,
name|data
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close out the div we made
comment|// DIV<Hamlet>._() will actually invoke the wrong method (creating<p>),
comment|// explicit cast to make sure we're closing out the<div>
operator|(
operator|(
name|EImp
operator|)
name|div
operator|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|levelPrior
argument_list|,
name|hamlet
operator|.
name|nestLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testGenerateRoleDetailsWithOneColumn ()
specifier|public
name|void
name|testGenerateRoleDetailsWithOneColumn
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|Hamlet
name|hamlet
init|=
operator|new
name|Hamlet
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|hamlet
operator|.
name|div
argument_list|()
decl_stmt|;
name|String
name|detailsName
init|=
literal|"testing"
decl_stmt|;
name|String
name|selector
init|=
literal|"selector"
decl_stmt|;
name|Map
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
operator|new
name|ContainerStatsBlock
operator|.
name|TableContent
argument_list|(
literal|"Bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|levelPrior
init|=
name|hamlet
operator|.
name|nestLevel
argument_list|()
decl_stmt|;
name|statsBlock
operator|.
name|generateRoleDetails
argument_list|(
name|div
argument_list|,
name|selector
argument_list|,
name|detailsName
argument_list|,
name|data
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close out the div we made
comment|// DIV<Hamlet>._() will actually invoke the wrong method (creating<p>),
comment|// explicit cast to make sure we're closing out the<div>
operator|(
operator|(
name|EImp
operator|)
name|div
operator|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|levelPrior
argument_list|,
name|hamlet
operator|.
name|nestLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testGenerateRoleDetailsWithNoData ()
specifier|public
name|void
name|testGenerateRoleDetailsWithNoData
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|Hamlet
name|hamlet
init|=
operator|new
name|Hamlet
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|hamlet
operator|.
name|div
argument_list|()
decl_stmt|;
name|String
name|detailsName
init|=
literal|"testing"
decl_stmt|;
name|String
name|selector
init|=
literal|"selector"
decl_stmt|;
name|Map
argument_list|<
name|TableContent
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|levelPrior
init|=
name|hamlet
operator|.
name|nestLevel
argument_list|()
decl_stmt|;
name|statsBlock
operator|.
name|generateRoleDetails
argument_list|(
name|div
argument_list|,
name|selector
argument_list|,
name|detailsName
argument_list|,
name|data
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close out the div we made
comment|// DIV<Hamlet>._() will actually invoke the wrong method (creating<p>),
comment|// explicit cast to make sure we're closing out the<div>
operator|(
operator|(
name|EImp
operator|)
name|div
operator|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|levelPrior
argument_list|,
name|hamlet
operator|.
name|nestLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testClusterNodeNameComparator ()
specifier|public
name|void
name|testClusterNodeNameComparator
parameter_list|()
block|{
name|ClusterNode
name|n1
init|=
operator|new
name|ClusterNode
argument_list|(
name|mockContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|,
name|n2
init|=
operator|new
name|ClusterNode
argument_list|(
name|mockContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|,
name|n3
init|=
operator|new
name|ClusterNode
argument_list|(
name|mockContainerId
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClusterNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|ClusterNode
argument_list|>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|n2
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|n3
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|ClusterNodeNameComparator
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|prevName
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ClusterNode
name|node
range|:
name|nodes
control|)
block|{
name|assertTrue
argument_list|(
name|prevName
operator|.
name|compareTo
argument_list|(
name|node
operator|.
name|name
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|prevName
operator|=
name|node
operator|.
name|name
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testTableContent ()
specifier|public
name|void
name|testTableContent
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|TableContent
name|tc
init|=
operator|new
name|TableContent
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Hamlet
name|hamlet
init|=
operator|new
name|Hamlet
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TR
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tr
init|=
name|hamlet
operator|.
name|table
argument_list|()
operator|.
name|tr
argument_list|()
decl_stmt|;
name|int
name|prevLevel
init|=
name|hamlet
operator|.
name|nestLevel
argument_list|()
decl_stmt|;
comment|// printCell should not end the tr
name|tc
operator|.
name|printCell
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|_
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|prevLevel
argument_list|,
name|hamlet
operator|.
name|nestLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testTableAnchorContent ()
specifier|public
name|void
name|testTableAnchorContent
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|TableContent
name|tc
init|=
operator|new
name|TableAnchorContent
argument_list|(
literal|"foo"
argument_list|,
literal|"http://bar.com"
argument_list|)
decl_stmt|;
name|Hamlet
name|hamlet
init|=
operator|new
name|Hamlet
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TR
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tr
init|=
name|hamlet
operator|.
name|table
argument_list|()
operator|.
name|tr
argument_list|()
decl_stmt|;
name|int
name|prevLevel
init|=
name|hamlet
operator|.
name|nestLevel
argument_list|()
decl_stmt|;
comment|// printCell should not end the tr
name|tc
operator|.
name|printCell
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|_
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|prevLevel
argument_list|,
name|hamlet
operator|.
name|nestLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

