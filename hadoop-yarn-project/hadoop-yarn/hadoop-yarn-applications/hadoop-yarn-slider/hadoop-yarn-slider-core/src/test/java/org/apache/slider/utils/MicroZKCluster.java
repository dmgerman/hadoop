begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.utils
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryOperationsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|MicroZookeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test ZK cluster.  */
end_comment

begin_class
DECL|class|MicroZKCluster
specifier|public
class|class
name|MicroZKCluster
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MicroZKCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HOSTS
specifier|public
specifier|static
specifier|final
name|String
name|HOSTS
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|zkService
specifier|private
name|MicroZookeeperService
name|zkService
decl_stmt|;
DECL|field|zkBindingString
specifier|private
name|String
name|zkBindingString
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|registryOperations
specifier|private
name|RegistryOperations
name|registryOperations
decl_stmt|;
DECL|method|MicroZKCluster ()
name|MicroZKCluster
parameter_list|()
block|{
name|this
argument_list|(
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MicroZKCluster (Configuration conf)
name|MicroZKCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getZkBindingString ()
name|String
name|getZkBindingString
parameter_list|()
block|{
return|return
name|zkBindingString
return|;
block|}
DECL|method|createCluster (String name)
name|void
name|createCluster
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|zkService
operator|=
operator|new
name|MicroZookeeperService
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|zkService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|zkService
operator|.
name|start
argument_list|()
expr_stmt|;
name|zkBindingString
operator|=
name|zkService
operator|.
name|getConnectionString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|registryOperations
operator|=
operator|new
name|RegistryOperationsService
argument_list|(
literal|"registry"
argument_list|,
name|zkService
argument_list|)
expr_stmt|;
name|registryOperations
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registryOperations
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|registryOperations
operator|!=
literal|null
condition|)
block|{
name|registryOperations
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zkService
operator|!=
literal|null
condition|)
block|{
name|zkService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Micro ZK cluster as "
operator|+
name|zkBindingString
return|;
block|}
block|}
end_class

end_unit

