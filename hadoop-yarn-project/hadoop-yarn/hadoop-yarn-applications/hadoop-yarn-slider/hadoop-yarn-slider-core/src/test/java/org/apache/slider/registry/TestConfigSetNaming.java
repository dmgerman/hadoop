begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.registry
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Test config set name validation.  */
end_comment

begin_class
DECL|class|TestConfigSetNaming
specifier|public
class|class
name|TestConfigSetNaming
block|{
DECL|method|assertValid (String name)
name|void
name|assertValid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PublishedConfigSet
operator|.
name|validateName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalid (String name)
name|void
name|assertInvalid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|PublishedConfigSet
operator|.
name|validateName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid name was unexpectedly parsed: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|//@Test
DECL|method|testLowerCase ()
specifier|public
name|void
name|testLowerCase
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertValid
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testUpperCaseInvalid ()
specifier|public
name|void
name|testUpperCaseInvalid
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertInvalid
argument_list|(
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNumbers ()
specifier|public
name|void
name|testNumbers
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertValid
argument_list|(
literal|"01234567890"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testChars ()
specifier|public
name|void
name|testChars
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertValid
argument_list|(
literal|"a-_+"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testInvalids ()
specifier|public
name|void
name|testInvalids
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|String
name|s
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|" "
argument_list|,
literal|"*"
argument_list|,
literal|"a/b"
argument_list|,
literal|"b\\a"
argument_list|,
literal|"\""
argument_list|,
literal|"'"
argument_list|,
literal|"\u0000"
argument_list|,
literal|"\u0f00"
argument_list|,
literal|"key.value"
argument_list|,
literal|"-"
argument_list|,
literal|"+"
argument_list|,
literal|"_"
argument_list|,
literal|"?"
argument_list|)
control|)
block|{
name|assertInvalid
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

