begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.security
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestMultiThreadedStoreGeneration
specifier|public
class|class
name|TestMultiThreadedStoreGeneration
block|{
DECL|field|NUM_THREADS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|30
decl_stmt|;
annotation|@
name|Rule
DECL|field|workDir
specifier|public
name|TemporaryFolder
name|workDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
empty_stmt|;
DECL|method|setupCredentials (AggregateConf instanceDefinition, String keyAlias, String trustAlias)
specifier|private
name|void
name|setupCredentials
parameter_list|(
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|String
name|keyAlias
parameter_list|,
name|String
name|trustAlias
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ourUrl
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|SecurityUtils
operator|.
name|getSecurityDir
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|credentials
operator|.
name|put
argument_list|(
name|ourUrl
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// create new aliases
try|try
block|{
if|if
condition|(
name|keyAlias
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|storepass
init|=
block|{
literal|'k'
block|,
literal|'e'
block|,
literal|'y'
block|,
literal|'p'
block|,
literal|'a'
block|,
literal|'s'
block|,
literal|'s'
block|}
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|keyAlias
argument_list|,
name|storepass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trustAlias
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|trustpass
init|=
block|{
literal|'t'
block|,
literal|'r'
block|,
literal|'u'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'p'
block|,
literal|'a'
block|,
literal|'s'
block|,
literal|'s'
block|}
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|trustAlias
argument_list|,
name|trustpass
argument_list|)
expr_stmt|;
block|}
comment|// write out so that it can be found in checks
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiThreadedStoreGeneration ()
specifier|public
name|void
name|testMultiThreadedStoreGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|CertificateManager
name|certMan
init|=
operator|new
name|CertificateManager
argument_list|()
decl_stmt|;
name|MapOperations
name|compOperations
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|File
name|secDir
init|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|SECURITY_DIR
argument_list|)
decl_stmt|;
name|File
name|keystoreFile
init|=
operator|new
name|File
argument_list|(
name|secDir
argument_list|,
name|SliderKeys
operator|.
name|KEYSTORE_FILE_NAME
argument_list|)
decl_stmt|;
name|compOperations
operator|.
name|put
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_KEYSTORE_LOCATION
argument_list|,
name|keystoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|certMan
operator|.
name|initialize
argument_list|(
name|compOperations
argument_list|,
literal|"cahost"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SecurityStore
argument_list|>
name|stores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
name|setupCredentials
argument_list|(
name|instanceDefinition
argument_list|,
name|SliderKeys
operator|.
name|COMP_KEYSTORE_PASSWORD_ALIAS_DEFAULT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|MapOperations
name|compOps
init|=
operator|new
name|MapOperations
argument_list|()
decl_stmt|;
name|compOps
operator|.
name|put
argument_list|(
name|SliderKeys
operator|.
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|Runnable
name|runner
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----> In run"
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|SecurityStore
index|[]
name|stores1
init|=
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
literal|"testhost"
argument_list|,
literal|"container"
operator|+
name|finalI
argument_list|,
literal|"component"
operator|+
name|finalI
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----> stores1"
operator|+
name|stores1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityStore
argument_list|>
name|securityStores
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|stores1
argument_list|)
decl_stmt|;
name|stores
operator|.
name|addAll
argument_list|(
name|securityStores
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runner
argument_list|,
literal|"TestThread"
operator|+
name|i
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"keystore "
operator|+
name|i
operator|+
literal|" not generated"
argument_list|,
name|stores
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

