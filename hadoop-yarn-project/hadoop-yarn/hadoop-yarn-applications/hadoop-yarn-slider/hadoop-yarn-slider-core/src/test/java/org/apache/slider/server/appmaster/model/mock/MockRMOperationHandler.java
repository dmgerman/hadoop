begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.mock
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerReleaseOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|RMOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Mock RM operation handler.  */
end_comment

begin_class
DECL|class|MockRMOperationHandler
specifier|public
class|class
name|MockRMOperationHandler
extends|extends
name|RMOperationHandler
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockRMOperationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|operations
specifier|private
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requests
specifier|private
name|int
name|requests
decl_stmt|;
DECL|field|releases
specifier|private
name|int
name|releases
decl_stmt|;
comment|// number available to cancel
DECL|field|availableToCancel
specifier|private
name|int
name|availableToCancel
init|=
literal|0
decl_stmt|;
comment|// count of cancelled values. This must be explicitly set
DECL|field|cancelled
specifier|private
name|int
name|cancelled
decl_stmt|;
comment|// number blacklisted
DECL|field|blacklisted
specifier|private
name|int
name|blacklisted
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|releaseAssignedContainer (ContainerId containerId)
specifier|public
name|void
name|releaseAssignedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|operations
operator|.
name|add
argument_list|(
operator|new
name|ContainerReleaseOperation
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Releasing container ID "
operator|+
name|containerId
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|releases
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addContainerRequest (AMRMClient.ContainerRequest req)
specifier|public
name|void
name|addContainerRequest
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|req
parameter_list|)
block|{
name|operations
operator|.
name|add
argument_list|(
operator|new
name|ContainerRequestOperation
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting container role #"
operator|+
name|req
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelContainerRequests ( Priority priority1, Priority priority2, int count)
specifier|public
name|int
name|cancelContainerRequests
parameter_list|(
name|Priority
name|priority1
parameter_list|,
name|Priority
name|priority2
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|int
name|releaseable
init|=
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|availableToCancel
argument_list|)
decl_stmt|;
name|availableToCancel
operator|-=
name|releaseable
expr_stmt|;
name|cancelled
operator|+=
name|releaseable
expr_stmt|;
return|return
name|releaseable
return|;
block|}
annotation|@
name|Override
DECL|method|cancelSingleRequest (AMRMClient.ContainerRequest request)
specifier|public
name|void
name|cancelSingleRequest
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
comment|// here assume that there is a copy of this request in the list
if|if
condition|(
name|availableToCancel
operator|>
literal|0
condition|)
block|{
name|availableToCancel
operator|--
expr_stmt|;
name|cancelled
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateBlacklist (List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updateBlacklist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|blacklisted
operator|+=
name|blacklistAdditions
operator|.
name|size
argument_list|()
expr_stmt|;
name|blacklisted
operator|-=
name|blacklistRemovals
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|/**    * Clear the history.    */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|operations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|releases
operator|=
literal|0
expr_stmt|;
name|requests
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getFirstOp ()
specifier|public
name|AbstractRMOperation
name|getFirstOp
parameter_list|()
block|{
return|return
name|operations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getNumReleases ()
specifier|public
name|int
name|getNumReleases
parameter_list|()
block|{
return|return
name|releases
return|;
block|}
DECL|method|setAvailableToCancel (int num)
specifier|public
name|void
name|setAvailableToCancel
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|availableToCancel
operator|=
name|num
expr_stmt|;
block|}
DECL|method|getAvailableToCancel ()
specifier|public
name|int
name|getAvailableToCancel
parameter_list|()
block|{
return|return
name|availableToCancel
return|;
block|}
DECL|method|getBlacklisted ()
specifier|public
name|int
name|getBlacklisted
parameter_list|()
block|{
return|return
name|blacklisted
return|;
block|}
block|}
end_class

end_unit

