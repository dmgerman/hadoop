begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|OutstandingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test outstanding request validation.  */
end_comment

begin_class
DECL|class|TestOutstandingRequestValidation
specifier|public
class|class
name|TestOutstandingRequestValidation
extends|extends
name|SliderTestBase
block|{
DECL|field|H1
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|H1
init|=
name|hosts
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
comment|//@Test
DECL|method|testRelaxedNohostsOrLabels ()
specifier|public
name|void
name|testRelaxedNohostsOrLabels
parameter_list|()
throws|throws
name|Throwable
block|{
name|createAndValidate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRelaxedLabels ()
specifier|public
name|void
name|testRelaxedLabels
parameter_list|()
throws|throws
name|Throwable
block|{
name|createAndValidate
argument_list|(
literal|null
argument_list|,
literal|"gpu"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNonRelaxedLabels ()
specifier|public
name|void
name|testNonRelaxedLabels
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectCreationFailure
argument_list|(
literal|null
argument_list|,
literal|"gpu"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRelaxedHostNoLabel ()
specifier|public
name|void
name|testRelaxedHostNoLabel
parameter_list|()
throws|throws
name|Throwable
block|{
name|createAndValidate
argument_list|(
name|H1
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use varargs for simple list to array conversion.    * @param hostnames host names    * @return    */
DECL|method|hosts (String...hostnames)
specifier|public
specifier|static
name|String
index|[]
name|hosts
parameter_list|(
name|String
modifier|...
name|hostnames
parameter_list|)
block|{
return|return
name|hostnames
return|;
block|}
DECL|method|expectCreationFailure ( String[] hosts, String labels, boolean relaxLocality)
name|void
name|expectCreationFailure
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|,
name|String
name|labels
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|)
block|{
try|try
block|{
name|ContainerRequest
name|result
init|=
name|createAndValidate
argument_list|(
name|hosts
argument_list|,
name|labels
argument_list|,
name|relaxLocality
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can't turn off locality relaxation on a request with no "
operator|+
literal|"location constraints"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createAndValidate ( String[] hosts, String labels, boolean relaxLocality)
name|AMRMClient
operator|.
name|ContainerRequest
name|createAndValidate
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|,
name|String
name|labels
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|)
block|{
name|int
name|cores
init|=
literal|1
decl_stmt|;
name|int
name|memory
init|=
literal|64
decl_stmt|;
name|int
name|p
init|=
literal|1
decl_stmt|;
name|Priority
name|pri
init|=
name|ContainerPriority
operator|.
name|createPriority
argument_list|(
name|p
argument_list|,
operator|!
name|relaxLocality
argument_list|)
decl_stmt|;
name|ContainerRequest
name|issuedRequest
init|=
name|newRequest
argument_list|(
name|pri
argument_list|,
name|hosts
argument_list|,
name|labels
argument_list|,
name|relaxLocality
argument_list|)
decl_stmt|;
name|OutstandingRequest
operator|.
name|validateContainerRequest
argument_list|(
name|issuedRequest
argument_list|,
name|p
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|issuedRequest
return|;
block|}
DECL|method|newRequest ( Priority pri, String[] hosts, String labels, boolean relaxLocality)
name|AMRMClient
operator|.
name|ContainerRequest
name|newRequest
parameter_list|(
name|Priority
name|pri
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
name|labels
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|)
block|{
name|int
name|cores
init|=
literal|1
decl_stmt|;
name|int
name|memory
init|=
literal|64
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|cores
argument_list|)
decl_stmt|;
return|return
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|resource
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|pri
argument_list|,
name|relaxLocality
argument_list|,
name|labels
argument_list|)
return|;
block|}
block|}
end_class

end_unit

