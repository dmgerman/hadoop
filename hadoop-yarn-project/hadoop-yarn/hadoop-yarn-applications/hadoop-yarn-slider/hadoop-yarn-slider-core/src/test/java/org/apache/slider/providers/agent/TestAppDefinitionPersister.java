begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionCreateArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|AddonArgsDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|AppDefinitionPersister
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestAppDefinitionPersister
specifier|public
class|class
name|TestAppDefinitionPersister
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAppDefinitionPersister
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
comment|/**    * @BeforeClass public static void initialize() { BasicConfigurator.resetConfiguration();    * BasicConfigurator.configure(); }*    */
annotation|@
name|Test
DECL|method|testAppDefinitionPersister ()
specifier|public
name|void
name|testAppDefinitionPersister
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"fs working dir is {}"
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|sliderFileSystem
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|AppDefinitionPersister
name|adp
init|=
operator|new
name|AppDefinitionPersister
argument_list|(
name|sliderFileSystem
argument_list|)
decl_stmt|;
name|String
name|clustername
init|=
literal|"c1"
decl_stmt|;
name|ActionCreateArgs
name|buildInfo
init|=
operator|new
name|ActionCreateArgs
argument_list|()
decl_stmt|;
name|buildInfo
operator|.
name|appMetaInfo
operator|=
literal|null
expr_stmt|;
name|buildInfo
operator|.
name|appDef
operator|=
literal|null
expr_stmt|;
name|buildInfo
operator|.
name|addonDelegate
operator|=
operator|new
name|AddonArgsDelegate
argument_list|()
expr_stmt|;
comment|// nothing to do
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adp
operator|.
name|persistPackages
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AppDefinitionPersister
operator|.
name|AppDefinition
argument_list|>
name|appDefinitions
init|=
name|adp
operator|.
name|getAppDefinitions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ConfTree
name|ct
init|=
operator|new
name|ConfTree
argument_list|()
decl_stmt|;
name|ConfTreeOperations
name|appConf
init|=
operator|new
name|ConfTreeOperations
argument_list|(
name|ct
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tempDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|File
name|metainfo
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"metainfo.json"
argument_list|)
decl_stmt|;
comment|// unreadable metainfo
name|buildInfo
operator|.
name|appMetaInfo
operator|=
name|metainfo
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Path specified with "
operator|+
literal|"--metainfo either cannot be read or is not a file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|metainfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
name|buildInfo
operator|.
name|appDef
operator|=
name|metainfo
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Both --metainfo and --appdef cannot be specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// both --metainfojson and --appdef cannot be specified
name|buildInfo
operator|.
name|appMetaInfo
operator|=
literal|null
expr_stmt|;
name|buildInfo
operator|.
name|appMetaInfoJson
operator|=
literal|"{}"
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Both --metainfojson and --appdef cannot be specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buildInfo
operator|.
name|appDef
operator|=
literal|null
expr_stmt|;
name|buildInfo
operator|.
name|appMetaInfoJson
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Empty string specified with --metainfojson"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buildInfo
operator|.
name|appMetaInfo
operator|=
name|metainfo
expr_stmt|;
comment|// both --metainfo and --metainfojson cannot be specified
name|buildInfo
operator|.
name|appMetaInfoJson
operator|=
literal|"{}"
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Both --metainfo and --metainfojson cannot be specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buildInfo
operator|.
name|appMetaInfoJson
operator|=
literal|null
expr_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|set
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|,
name|metainfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"application.def cannot "
operator|+
literal|"not be set if --metainfo is specified in the cmd line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|remove
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
expr_stmt|;
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
name|appDefinitions
operator|=
name|adp
operator|.
name|getAppDefinitions
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"appdef/appPkg.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|appDefPkgOrFolder
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|targetFolderInFs
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cluster/c1/appdef"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"appPkg.zip"
argument_list|,
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|pkgName
argument_list|)
expr_stmt|;
name|buildInfo
operator|.
name|appDef
operator|=
name|tempDir
expr_stmt|;
name|buildInfo
operator|.
name|appMetaInfo
operator|=
literal|null
expr_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|set
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|,
name|metainfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"application.def must not be set if --appdef is provided"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|adp
operator|.
name|getAppDefinitions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|remove
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
expr_stmt|;
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
name|appDefinitions
operator|=
name|adp
operator|.
name|getAppDefinitions
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"appdef/appPkg.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|appDefPkgOrFolder
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|targetFolderInFs
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cluster/c1/appdef"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"appPkg.zip"
argument_list|,
name|appDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|pkgName
argument_list|)
expr_stmt|;
name|adp
operator|.
name|getAppDefinitions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buildInfo
operator|.
name|appDef
operator|=
literal|null
expr_stmt|;
name|buildInfo
operator|.
name|appMetaInfo
operator|=
literal|null
expr_stmt|;
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|remove
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"addon1"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"addon2"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|metainfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|buildInfo
operator|.
name|addonDelegate
operator|.
name|addonTuples
operator|=
name|list
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"addon package can only be specified if main app package is specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buildInfo
operator|.
name|appMetaInfo
operator|=
name|metainfo
expr_stmt|;
try|try
block|{
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|bce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path for addon package addon1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|remove
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"addon1"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"addon2"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|metainfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|buildInfo
operator|.
name|addonDelegate
operator|.
name|addonTuples
operator|=
name|list
expr_stmt|;
name|adp
operator|.
name|getAppDefinitions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|adp
operator|.
name|processSuppliedDefinitions
argument_list|(
name|clustername
argument_list|,
name|buildInfo
argument_list|,
name|appConf
argument_list|)
expr_stmt|;
name|appDefinitions
operator|=
name|adp
operator|.
name|getAppDefinitions
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appDefinitions
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|AgentKeys
operator|.
name|APP_DEF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"appdef/appPkg.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"application.addon.addon1"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"addons/addon1/addon_addon1.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"application.addon.addon2"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"addons/addon2/addon_addon2.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"application.addons"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"application.addons"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"application.addon.addon2,application.addon.addon1"
argument_list|)
operator|||
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"application.addons"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"application.addon.addon1,application.addon.addon2"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|seen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AppDefinitionPersister
operator|.
name|AppDefinition
name|adp_ad
range|:
name|appDefinitions
control|)
block|{
if|if
condition|(
name|adp_ad
operator|.
name|pkgName
operator|.
name|equals
argument_list|(
literal|"appPkg.zip"
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|adp_ad
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|adp_ad
operator|.
name|appDefPkgOrFolder
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|adp_ad
operator|.
name|targetFolderInFs
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cluster/c1/appdef"
argument_list|)
argument_list|)
expr_stmt|;
name|seen
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|adp_ad
operator|.
name|pkgName
operator|.
name|equals
argument_list|(
literal|"addon_addon1.zip"
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|adp_ad
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|adp_ad
operator|.
name|appDefPkgOrFolder
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|adp_ad
operator|.
name|targetFolderInFs
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"addons/addon1"
argument_list|)
argument_list|)
expr_stmt|;
name|seen
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|adp_ad
operator|.
name|pkgName
operator|.
name|equals
argument_list|(
literal|"addon_addon2.zip"
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|adp_ad
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|adp_ad
operator|.
name|appDefPkgOrFolder
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"metainfo.json"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|adp_ad
operator|.
name|targetFolderInFs
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"addons/addon2"
argument_list|)
argument_list|)
expr_stmt|;
name|seen
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|seen
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

