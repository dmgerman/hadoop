begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test that app state is rebuilt on a restart.  */
end_comment

begin_class
DECL|class|TestMockAppStateRebuildOnAMRestart
specifier|public
class|class
name|TestMockAppStateRebuildOnAMRestart
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateRebuildOnAMRestart"
return|;
block|}
annotation|@
name|Test
DECL|method|testRebuild ()
specifier|public
name|void
name|testRebuild
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|r0
init|=
literal|1
decl_stmt|;
name|int
name|r1
init|=
literal|2
decl_stmt|;
name|int
name|r2
init|=
literal|3
decl_stmt|;
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
name|r0
argument_list|)
expr_stmt|;
name|getRole1Status
argument_list|()
operator|.
name|setDesired
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|getRole2Status
argument_list|()
operator|.
name|setDesired
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndStartNodes
argument_list|()
decl_stmt|;
name|int
name|clusterSize
init|=
name|r0
operator|+
name|r1
operator|+
name|r2
decl_stmt|;
name|assertEquals
argument_list|(
name|instances
operator|.
name|size
argument_list|()
argument_list|,
name|clusterSize
argument_list|)
expr_stmt|;
comment|//clone the list
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoleInstance
name|ri
range|:
name|instances
control|)
block|{
name|containers
operator|.
name|add
argument_list|(
name|ri
operator|.
name|container
argument_list|)
expr_stmt|;
block|}
name|NodeMap
name|nodemap
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
comment|//and rebuild
name|AppStateBindingInfo
name|bindingInfo
init|=
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|bindingInfo
operator|.
name|application
operator|=
name|factory
operator|.
name|newApplication
argument_list|(
name|r0
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
operator|.
name|name
argument_list|(
name|getValidTestName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingInfo
operator|.
name|liveContainers
operator|=
name|containers
expr_stmt|;
name|appState
operator|=
operator|new
name|MockAppState
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appState
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|clusterSize
argument_list|)
expr_stmt|;
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
comment|//check that the app state direct structures match
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|r0live
init|=
name|appState
operator|.
name|enumLiveNodesInRole
argument_list|(
name|ROLE0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|r1live
init|=
name|appState
operator|.
name|enumLiveNodesInRole
argument_list|(
name|ROLE1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|r2live
init|=
name|appState
operator|.
name|enumLiveNodesInRole
argument_list|(
name|ROLE2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r0
argument_list|,
name|r0live
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|r1live
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|r2live
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//now examine the role history
name|NodeMap
name|newNodemap
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeInstance
name|nodeInstance
range|:
name|newNodemap
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|hostname
init|=
name|nodeInstance
operator|.
name|hostname
decl_stmt|;
name|NodeInstance
name|orig
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null entry in original nodemap for "
operator|+
name|hostname
argument_list|,
name|orig
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|getRole1Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|getRole2Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|nodeInstance
operator|.
name|getActiveRoleInstances
argument_list|(
name|i
argument_list|)
argument_list|,
name|orig
operator|.
name|getActiveRoleInstances
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|NodeEntry
name|origRE
init|=
name|orig
operator|.
name|getOrCreate
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeEntry
name|newRE
init|=
name|nodeInstance
operator|.
name|getOrCreate
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|origRE
operator|.
name|getLive
argument_list|()
argument_list|,
name|newRE
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newRE
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Application
name|application
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
comment|// verify the AM restart container count was set
name|Long
name|restarted
init|=
name|application
operator|.
name|getNumberOfRunningContainers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|restarted
argument_list|)
expr_stmt|;
comment|//and that the count == 1 master + the region servers
name|assertEquals
argument_list|(
name|restarted
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

