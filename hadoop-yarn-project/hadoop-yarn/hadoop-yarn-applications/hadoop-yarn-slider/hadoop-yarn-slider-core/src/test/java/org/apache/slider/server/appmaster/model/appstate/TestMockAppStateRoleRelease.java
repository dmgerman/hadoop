begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test that if you have>1 role, the right roles are chosen for release.  */
end_comment

begin_class
DECL|class|TestMockAppStateRoleRelease
specifier|public
class|class
name|TestMockAppStateRoleRelease
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateRoleRelease"
return|;
block|}
comment|/**    * Small cluster with multiple containers per node,    * to guarantee many container allocations on each node.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
return|;
block|}
comment|//@Test
DECL|method|testAllocateReleaseRealloc ()
specifier|public
name|void
name|testAllocateReleaseRealloc
parameter_list|()
throws|throws
name|Throwable
block|{
comment|/**      * Allocate to all nodes      */
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|getRole1Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|getRole2Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndStartNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|instances
operator|.
name|size
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|//now it is surplus
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|,
name|released
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
name|extractContainerIds
argument_list|(
name|instances
argument_list|,
name|ROLE0
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerId
name|cid
range|:
name|released
control|)
block|{
name|assertNotNull
argument_list|(
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|)
argument_list|)
operator|.
name|roleInstance
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//view the world
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

