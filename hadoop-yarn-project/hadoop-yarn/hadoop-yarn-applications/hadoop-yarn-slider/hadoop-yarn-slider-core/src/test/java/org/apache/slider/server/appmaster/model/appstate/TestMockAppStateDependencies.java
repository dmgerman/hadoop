begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ApplicationLivenessInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
operator|.
name|ProbeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test for postponing container requests until dependencies are ready.  */
end_comment

begin_class
DECL|class|TestMockAppStateDependencies
specifier|public
class|class
name|TestMockAppStateDependencies
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
DECL|field|successProbe
specifier|private
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
operator|.
name|Probe
name|successProbe
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
operator|.
name|Probe
argument_list|(
literal|"success"
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ProbeStatus
name|ping
parameter_list|(
name|RoleInstance
name|roleInstance
parameter_list|)
block|{
name|ProbeStatus
name|status
init|=
operator|new
name|ProbeStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|succeed
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
block|}
decl_stmt|;
DECL|field|failureProbe
specifier|private
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
operator|.
name|Probe
name|failureProbe
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|servicemonitor
operator|.
name|Probe
argument_list|(
literal|"failure"
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ProbeStatus
name|ping
parameter_list|(
name|RoleInstance
name|roleInstance
parameter_list|)
block|{
name|ProbeStatus
name|status
init|=
operator|new
name|ProbeStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|fail
argument_list|(
name|this
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateDependencies"
return|;
block|}
annotation|@
name|Test
DECL|method|testDependencies ()
specifier|public
name|void
name|testDependencies
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|role0Status
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|RoleStatus
name|role1Status
init|=
name|getRole1Status
argument_list|()
decl_stmt|;
comment|// set desired instances for role0 to 1
name|role0Status
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set probe for role0 to use a ping that will always succeed
name|role0Status
operator|.
name|getProviderRole
argument_list|()
operator|.
name|probe
operator|=
name|successProbe
expr_stmt|;
comment|// set desired instances for role1 to 1
name|role1Status
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set role0 as a dependency of role1
name|role1Status
operator|.
name|getProviderRole
argument_list|()
operator|.
name|component
operator|.
name|setDependencies
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ROLE0
argument_list|)
argument_list|)
expr_stmt|;
comment|// role0 has no dependencies, so its dependencies are ready
name|assertTrue
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role0Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// role1 dependency (role0) is not ready yet
name|assertFalse
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// start the single requested instance for role0
name|review
argument_list|(
name|ROLE0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// role0 is still not ready because a ping has not been issued
name|assertFalse
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// issue pings
name|appState
operator|.
name|monitorComponentInstances
argument_list|()
expr_stmt|;
comment|// now role0 is ready
name|assertTrue
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// increase the desired containers for role0
name|role0Status
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// role0 is no longer ready
name|assertFalse
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// start a second instance for role0
name|review
argument_list|(
name|ROLE0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// role0 is not ready because ping has not been issued for the new instance
name|assertFalse
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// issue pings
name|appState
operator|.
name|monitorComponentInstances
argument_list|()
expr_stmt|;
comment|// role0 is ready
name|assertTrue
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// set probe for role0 to use a ping that will always fail
name|role0Status
operator|.
name|getProviderRole
argument_list|()
operator|.
name|probe
operator|=
name|failureProbe
expr_stmt|;
comment|// issue pings
name|appState
operator|.
name|monitorComponentInstances
argument_list|()
expr_stmt|;
comment|// role0 is not ready (failure probe works)
name|assertFalse
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// set probe for role0 to use a ping that will always succeed
name|role0Status
operator|.
name|getProviderRole
argument_list|()
operator|.
name|probe
operator|=
name|successProbe
expr_stmt|;
comment|// issue pings
name|appState
operator|.
name|monitorComponentInstances
argument_list|()
expr_stmt|;
comment|// role0 is ready
name|assertTrue
argument_list|(
name|appState
operator|.
name|areDependenciesReady
argument_list|(
name|role1Status
argument_list|)
argument_list|)
expr_stmt|;
comment|// now role1 instances can be started
name|review
argument_list|(
name|ROLE1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|review (String expectedRole, int outstanding)
specifier|public
name|void
name|review
parameter_list|(
name|String
name|expectedRole
parameter_list|,
name|int
name|outstanding
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
comment|// expect one request in the list
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// and in a liveness check, expected outstanding
name|ApplicationLivenessInformation
name|liveness
init|=
name|appState
operator|.
name|getApplicationLivenessInformation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|outstanding
argument_list|,
name|liveness
operator|.
name|requestsOutstanding
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|liveness
operator|.
name|allRequestsSatisfied
argument_list|)
expr_stmt|;
comment|// record container allocated and verify it has the expected role
name|List
argument_list|<
name|Container
argument_list|>
name|allocations
init|=
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|releases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocations
argument_list|,
name|assignments
argument_list|,
name|releases
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerAssignment
name|assigned
init|=
name|assignments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRole
argument_list|,
name|ri
operator|.
name|role
argument_list|)
expr_stmt|;
comment|// one fewer request outstanding
name|liveness
operator|=
name|appState
operator|.
name|getApplicationLivenessInformation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|outstanding
operator|-
literal|1
argument_list|,
name|liveness
operator|.
name|requestsOutstanding
argument_list|)
expr_stmt|;
comment|// record container start submitted
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|target
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|// additional review results in no additional requests
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ops
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// record container start
name|appState
operator|.
name|innerOnNodeManagerContainerStarted
argument_list|(
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

