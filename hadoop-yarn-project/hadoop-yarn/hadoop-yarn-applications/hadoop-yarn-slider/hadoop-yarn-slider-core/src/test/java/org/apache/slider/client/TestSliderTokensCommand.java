begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionTokensArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|SliderActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Test the argument parsing/validation logic.  */
end_comment

begin_class
DECL|class|TestSliderTokensCommand
specifier|public
class|class
name|TestSliderTokensCommand
extends|extends
name|SliderTestBase
block|{
DECL|field|config
specifier|private
specifier|static
name|YarnConfiguration
name|config
init|=
name|createTestConfig
argument_list|()
decl_stmt|;
DECL|method|createTestConfig ()
specifier|public
specifier|static
name|YarnConfiguration
name|createTestConfig
parameter_list|()
block|{
name|YarnConfiguration
name|configuration
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"127.0.0.1:8032"
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
annotation|@
name|Test
DECL|method|testBadSourceArgs ()
specifier|public
name|void
name|testBadSourceArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|launchExpectingException
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|,
name|config
argument_list|,
name|ActionTokensArgs
operator|.
name|DUPLICATE_ARGS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|,
name|Arguments
operator|.
name|ARG_SOURCE
argument_list|,
literal|"target/tokens.bin"
argument_list|,
name|Arguments
operator|.
name|ARG_OUTPUT
argument_list|,
literal|"target/tokens.bin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKTNoPrincipal ()
specifier|public
name|void
name|testKTNoPrincipal
parameter_list|()
throws|throws
name|Throwable
block|{
name|launchExpectingException
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|,
name|config
argument_list|,
name|ActionTokensArgs
operator|.
name|MISSING_KT_PROVIDER
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|,
name|Arguments
operator|.
name|ARG_KEYTAB
argument_list|,
literal|"target/keytab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrincipalNoKT ()
specifier|public
name|void
name|testPrincipalNoKT
parameter_list|()
throws|throws
name|Throwable
block|{
name|launchExpectingException
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|,
name|config
argument_list|,
name|ActionTokensArgs
operator|.
name|MISSING_KT_PROVIDER
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|,
name|Arguments
operator|.
name|ARG_PRINCIPAL
argument_list|,
literal|"bob@REALM"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A missing keytab is an error.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testMissingKT ()
specifier|public
name|void
name|testMissingKT
parameter_list|()
throws|throws
name|Throwable
block|{
name|Throwable
name|ex
init|=
name|launchExpectingException
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|,
name|config
argument_list|,
name|TokensOperation
operator|.
name|E_NO_KEYTAB
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|,
name|Arguments
operator|.
name|ARG_PRINCIPAL
argument_list|,
literal|"bob@REALM"
argument_list|,
name|Arguments
operator|.
name|ARG_KEYTAB
argument_list|,
literal|"target/keytab"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|NotFoundException
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingSourceFile ()
specifier|public
name|void
name|testMissingSourceFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Throwable
name|ex
init|=
name|launchExpectingException
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|,
name|config
argument_list|,
name|TokensOperation
operator|.
name|E_MISSING_SOURCE_FILE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|,
name|Arguments
operator|.
name|ARG_SOURCE
argument_list|,
literal|"target/tokens.bin"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|NotFoundException
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListHarmlessWhenInsecure ()
specifier|public
name|void
name|testListHarmlessWhenInsecure
parameter_list|()
throws|throws
name|Throwable
block|{
name|execSliderCommand
argument_list|(
literal|0
argument_list|,
name|config
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFailsWhenInsecure ()
specifier|public
name|void
name|testCreateFailsWhenInsecure
parameter_list|()
throws|throws
name|Throwable
block|{
name|Throwable
name|ex
init|=
name|launchExpectingException
argument_list|(
name|SliderClient
operator|.
name|class
argument_list|,
name|config
argument_list|,
name|TokensOperation
operator|.
name|E_INSECURE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SliderActions
operator|.
name|ACTION_TOKENS
argument_list|,
name|Arguments
operator|.
name|ARG_OUTPUT
argument_list|,
literal|"target/tokens.bin"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|BadClusterStateException
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
end_class

end_unit

