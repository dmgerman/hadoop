begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.mock
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderInternalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|TriggerClusterTeardownException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|CancelSingleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerReleaseOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ProviderAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Base for app state tests.  */
end_comment

begin_class
DECL|class|BaseMockAppStateTest
specifier|public
specifier|abstract
class|class
name|BaseMockAppStateTest
extends|extends
name|SliderTestBase
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseMockAppStateTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY_ID_LIST
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|ContainerId
argument_list|>
name|EMPTY_ID_LIST
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|factory
specifier|protected
specifier|final
name|MockFactory
name|factory
init|=
name|MockFactory
operator|.
name|INSTANCE
decl_stmt|;
DECL|field|appState
specifier|protected
name|MockAppState
name|appState
decl_stmt|;
DECL|field|engine
specifier|protected
name|MockYarnEngine
name|engine
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|sliderFileSystem
specifier|protected
name|SliderFileSystem
name|sliderFileSystem
decl_stmt|;
DECL|field|historyWorkDir
specifier|protected
name|File
name|historyWorkDir
decl_stmt|;
DECL|field|historyPath
specifier|protected
name|Path
name|historyPath
decl_stmt|;
DECL|field|applicationId
specifier|protected
name|MockApplicationId
name|applicationId
decl_stmt|;
DECL|field|applicationAttemptId
specifier|protected
name|MockApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|stateAccess
specifier|protected
name|StateAccessForProviders
name|stateAccess
decl_stmt|;
comment|/**    * Override point: called in setup() to create the YARN engine; can    * be changed for different sizes and options.    * @return    */
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"file:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sliderFileSystem
operator|=
operator|new
name|SliderFileSystem
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|engine
operator|=
name|createYarnEngine
argument_list|()
expr_stmt|;
name|initApp
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize the application.    * This uses the binding information supplied by {@link #buildBindingInfo()}.    */
DECL|method|initApp ()
specifier|protected
name|void
name|initApp
parameter_list|()
throws|throws
name|IOException
throws|,
name|BadConfigException
throws|,
name|BadClusterStateException
block|{
name|String
name|historyDirName
init|=
name|getTestName
argument_list|()
decl_stmt|;
name|applicationId
operator|=
operator|new
name|MockApplicationId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|applicationAttemptId
operator|=
operator|new
name|MockApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|historyWorkDir
operator|=
operator|new
name|File
argument_list|(
literal|"target/history"
argument_list|,
name|historyDirName
argument_list|)
expr_stmt|;
name|historyPath
operator|=
operator|new
name|Path
argument_list|(
name|historyWorkDir
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|historyPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appState
operator|=
operator|new
name|MockAppState
argument_list|(
name|buildBindingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|stateAccess
operator|=
operator|new
name|ProviderAppState
argument_list|(
name|getValidTestName
argument_list|()
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build the binding info from the default constructor values,    * the roles from {@link #factory}, and an instance definition.    * from {@link #buildApplication()} ()}    * @return    */
DECL|method|buildBindingInfo ()
specifier|protected
name|AppStateBindingInfo
name|buildBindingInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|AppStateBindingInfo
name|binding
init|=
operator|new
name|AppStateBindingInfo
argument_list|()
decl_stmt|;
name|binding
operator|.
name|application
operator|=
name|buildApplication
argument_list|()
expr_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|binding
operator|.
name|application
argument_list|,
name|sliderFileSystem
argument_list|,
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|//binding.roles = new ArrayList<>(factory.ROLES);
name|binding
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|binding
operator|.
name|historyPath
operator|=
name|historyPath
expr_stmt|;
name|binding
operator|.
name|nodeReports
operator|=
name|engine
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
return|return
name|binding
return|;
block|}
comment|/**    * Override point, define the instance definition.    * @return the instance definition    */
DECL|method|buildApplication ()
specifier|public
name|Application
name|buildApplication
parameter_list|()
block|{
return|return
name|factory
operator|.
name|newApplication
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|name
argument_list|(
name|getValidTestName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the test name ... defaults to method name    * @return the method name    */
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
name|methodName
operator|.
name|getMethodName
argument_list|()
return|;
block|}
DECL|method|getValidTestName ()
specifier|public
name|String
name|getValidTestName
parameter_list|()
block|{
return|return
name|getTestName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
return|;
block|}
DECL|method|getRole0Status ()
specifier|public
name|RoleStatus
name|getRole0Status
parameter_list|()
block|{
return|return
name|lookupRole
argument_list|(
name|ROLE0
argument_list|)
return|;
block|}
DECL|method|lookupRole (String role)
specifier|public
name|RoleStatus
name|lookupRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
name|role
argument_list|)
return|;
block|}
DECL|method|getRole1Status ()
specifier|public
name|RoleStatus
name|getRole1Status
parameter_list|()
block|{
return|return
name|lookupRole
argument_list|(
name|ROLE1
argument_list|)
return|;
block|}
DECL|method|getRole2Status ()
specifier|public
name|RoleStatus
name|getRole2Status
parameter_list|()
block|{
return|return
name|lookupRole
argument_list|(
name|ROLE2
argument_list|)
return|;
block|}
comment|/**    * Build a role instance from a container assignment.    * @param assigned    * @return the instance    */
DECL|method|roleInstance (ContainerAssignment assigned)
specifier|public
name|RoleInstance
name|roleInstance
parameter_list|(
name|ContainerAssignment
name|assigned
parameter_list|)
block|{
name|Container
name|target
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|RoleInstance
name|failedInstance
init|=
name|assigned
operator|.
name|role
operator|.
name|getProviderRole
argument_list|()
operator|.
name|failedInstances
operator|.
name|poll
argument_list|()
decl_stmt|;
name|RoleInstance
name|ri
decl_stmt|;
if|if
condition|(
name|failedInstance
operator|!=
literal|null
condition|)
block|{
name|ri
operator|=
operator|new
name|RoleInstance
argument_list|(
name|target
argument_list|,
name|failedInstance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ri
operator|=
operator|new
name|RoleInstance
argument_list|(
name|target
argument_list|,
name|assigned
operator|.
name|role
operator|.
name|getProviderRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ri
operator|.
name|roleId
operator|=
name|assigned
operator|.
name|role
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|ri
operator|.
name|role
operator|=
name|assigned
operator|.
name|role
operator|.
name|getName
argument_list|()
expr_stmt|;
return|return
name|ri
return|;
block|}
DECL|method|nodeInstance (long age, int live0, int live1, int live2)
specifier|public
name|NodeInstance
name|nodeInstance
parameter_list|(
name|long
name|age
parameter_list|,
name|int
name|live0
parameter_list|,
name|int
name|live1
parameter_list|,
name|int
name|live2
parameter_list|)
block|{
name|NodeInstance
name|ni
init|=
operator|new
name|NodeInstance
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"age%d-[%d,%d,%d]"
argument_list|,
name|age
argument_list|,
name|live0
argument_list|,
name|live1
argument_list|,
name|live2
argument_list|)
argument_list|,
name|MockFactory
operator|.
name|ROLE_COUNT
argument_list|)
decl_stmt|;
name|ni
operator|.
name|getOrCreate
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLastUsed
argument_list|(
name|age
argument_list|)
expr_stmt|;
name|ni
operator|.
name|getOrCreate
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLive
argument_list|(
name|live0
argument_list|)
expr_stmt|;
if|if
condition|(
name|live1
operator|>
literal|0
condition|)
block|{
name|ni
operator|.
name|getOrCreate
argument_list|(
name|getRole1Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLive
argument_list|(
name|live1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|live2
operator|>
literal|0
condition|)
block|{
name|ni
operator|.
name|getOrCreate
argument_list|(
name|getRole2Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLive
argument_list|(
name|live2
argument_list|)
expr_stmt|;
block|}
return|return
name|ni
return|;
block|}
comment|/**    * Create a container status event.    * @param c container    * @return a status    */
DECL|method|containerStatus (Container c)
name|ContainerStatus
name|containerStatus
parameter_list|(
name|Container
name|c
parameter_list|)
block|{
return|return
name|containerStatus
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a container status instance for the given ID, declaring    * that it was shut down by the application itself.    * @param cid container Id    * @return the instance    */
DECL|method|containerStatus (ContainerId cid)
specifier|public
name|ContainerStatus
name|containerStatus
parameter_list|(
name|ContainerId
name|cid
parameter_list|)
block|{
name|ContainerStatus
name|status
init|=
name|containerStatus
argument_list|(
name|cid
argument_list|,
name|LauncherExitCodes
operator|.
name|EXIT_CLIENT_INITIATED_SHUTDOWN
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
DECL|method|containerStatus (ContainerId cid, int exitCode)
specifier|public
name|ContainerStatus
name|containerStatus
parameter_list|(
name|ContainerId
name|cid
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
name|ContainerStatus
name|status
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|cid
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|exitCode
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * Create nodes and bring them to the started state.    * @return a list of roles    */
DECL|method|createAndStartNodes ()
specifier|protected
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|createAndStartNodes
parameter_list|()
throws|throws
name|TriggerClusterTeardownException
throws|,
name|SliderInternalStateException
block|{
return|return
name|createStartAndStopNodes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create, Start and stop nodes.    * @param completionResults List filled in with the status on all completed    *                          nodes    * @return the nodes    */
DECL|method|createStartAndStopNodes ( List<AppState.NodeCompletionResult> completionResults)
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|createStartAndStopNodes
parameter_list|(
name|List
argument_list|<
name|AppState
operator|.
name|NodeCompletionResult
argument_list|>
name|completionResults
parameter_list|)
throws|throws
name|TriggerClusterTeardownException
throws|,
name|SliderInternalStateException
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndSubmitNodes
argument_list|(
name|released
argument_list|)
decl_stmt|;
name|processSubmissionOperations
argument_list|(
name|instances
argument_list|,
name|completionResults
argument_list|,
name|released
argument_list|)
expr_stmt|;
return|return
name|instances
return|;
block|}
comment|/**    * Process the start/stop operations.    * @param instances    * @param completionResults    * @param released    */
DECL|method|processSubmissionOperations ( List<RoleInstance> instances, List<AppState.NodeCompletionResult> completionResults, List<ContainerId> released)
specifier|public
name|void
name|processSubmissionOperations
parameter_list|(
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
parameter_list|,
name|List
argument_list|<
name|AppState
operator|.
name|NodeCompletionResult
argument_list|>
name|completionResults
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
parameter_list|)
block|{
for|for
control|(
name|RoleInstance
name|instance
range|:
name|instances
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started {} on {}"
argument_list|,
name|instance
operator|.
name|role
argument_list|,
name|instance
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appState
operator|.
name|onNodeManagerContainerStarted
argument_list|(
name|instance
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|releaseContainers
argument_list|(
name|completionResults
argument_list|,
name|released
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"released"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Release a list of containers, updating the completion results.    * @param completionResults    * @param containerIds    * @param containerState    * @param exitText    * @param containerExitCode    * @return    */
DECL|method|releaseContainers ( List<AppState.NodeCompletionResult> completionResults, List<ContainerId> containerIds, ContainerState containerState, String exitText, int containerExitCode)
specifier|public
name|void
name|releaseContainers
parameter_list|(
name|List
argument_list|<
name|AppState
operator|.
name|NodeCompletionResult
argument_list|>
name|completionResults
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|,
name|ContainerState
name|containerState
parameter_list|,
name|String
name|exitText
parameter_list|,
name|int
name|containerExitCode
parameter_list|)
block|{
for|for
control|(
name|ContainerId
name|id
range|:
name|containerIds
control|)
block|{
name|ContainerStatus
name|status
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|id
argument_list|,
name|containerState
argument_list|,
name|exitText
argument_list|,
name|containerExitCode
argument_list|)
decl_stmt|;
name|completionResults
operator|.
name|add
argument_list|(
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create nodes and submit them.    * @return a list of roles    */
DECL|method|createAndSubmitNodes ()
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|createAndSubmitNodes
parameter_list|()
throws|throws
name|TriggerClusterTeardownException
throws|,
name|SliderInternalStateException
block|{
return|return
name|createAndSubmitNodes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create nodes and submit them.    * @return a list of roles    */
DECL|method|createAndSubmitNodes (List<ContainerId> containerIds)
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|createAndSubmitNodes
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|)
throws|throws
name|TriggerClusterTeardownException
throws|,
name|SliderInternalStateException
block|{
return|return
name|createAndSubmitNodes
argument_list|(
name|containerIds
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create nodes and submit them.    * @return a list of roles allocated    */
DECL|method|createAndSubmitNodes ( List<ContainerId> containerIds, List<AbstractRMOperation> operationsOut)
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|createAndSubmitNodes
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|,
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsOut
parameter_list|)
throws|throws
name|TriggerClusterTeardownException
throws|,
name|SliderInternalStateException
block|{
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
return|return
name|submitOperations
argument_list|(
name|ops
argument_list|,
name|containerIds
argument_list|,
name|operationsOut
argument_list|)
return|;
block|}
DECL|method|submitOperations ( List<AbstractRMOperation> operationsIn, List<ContainerId> released)
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|submitOperations
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsIn
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
parameter_list|)
block|{
return|return
name|submitOperations
argument_list|(
name|operationsIn
argument_list|,
name|released
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Process the RM operations and send<code>onContainersAllocated</code>    * events to the app state.    * @param operationsIn list of incoming ops    * @param released released containers    * @return list of outbound operations    */
DECL|method|submitOperations ( List<AbstractRMOperation> operationsIn, List<ContainerId> released, List<AbstractRMOperation> operationsOut)
specifier|public
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|submitOperations
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsIn
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
parameter_list|,
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsOut
parameter_list|)
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|engine
operator|.
name|execute
argument_list|(
name|operationsIn
argument_list|,
name|released
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|allocatedContainers
argument_list|,
name|assignments
argument_list|,
name|operationsOut
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerAssignment
name|assigned
range|:
name|assignments
control|)
block|{
name|Container
name|container
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
comment|//tell the app it arrived
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start submitted {} on ${}"
argument_list|,
name|ri
operator|.
name|role
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|roles
operator|.
name|add
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
comment|/**    * Add the AM to the app state.    */
DECL|method|addAppMastertoAppState ()
specifier|protected
name|void
name|addAppMastertoAppState
parameter_list|()
block|{
comment|//    appState.buildAppMasterNode(
comment|//        new MockContainerId(applicationAttemptId, 999999L),
comment|//        "appmaster",
comment|//        0,
comment|//        null);
block|}
comment|/**    * Extract the list of container IDs from the list of role instances.    * @param instances instance list    * @param role role to look up    * @return the list of CIDs    */
DECL|method|extractContainerIds ( List<RoleInstance> instances, String role)
specifier|public
name|List
argument_list|<
name|ContainerId
argument_list|>
name|extractContainerIds
parameter_list|(
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoleInstance
name|ri
range|:
name|instances
control|)
block|{
if|if
condition|(
name|ri
operator|.
name|role
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|ri
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
comment|/**    * Record a node as failing.    * @param node    * @param id    * @param count    * @return the entry    */
DECL|method|recordAsFailed (NodeInstance node, int id, int count)
specifier|public
name|NodeEntry
name|recordAsFailed
parameter_list|(
name|NodeInstance
name|node
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|NodeEntry
name|entry
init|=
name|node
operator|.
name|getOrCreate
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|count
condition|;
name|i
operator|++
control|)
block|{
name|entry
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
DECL|method|recordAllFailed (int id, int count, List<NodeInstance> nodes)
specifier|protected
name|void
name|recordAllFailed
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|count
parameter_list|,
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|NodeInstance
name|node
range|:
name|nodes
control|)
block|{
name|recordAsFailed
argument_list|(
name|node
argument_list|,
name|id
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the container request of an indexed entry. Includes some assertions    * for better diagnostics    * @param ops operation list    * @param index index in the list    * @return the request.    */
DECL|method|getRequest (List<AbstractRMOperation> ops, int index)
specifier|public
name|AMRMClient
operator|.
name|ContainerRequest
name|getRequest
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|index
operator|<
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|ContainerRequestOperation
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ContainerRequestOperation
operator|)
name|op
operator|)
operator|.
name|getRequest
argument_list|()
return|;
block|}
comment|/**    * Get the cancel request of an indexed entry. Includes some assertions for    * better diagnostics    * @param ops operation list    * @param index index in the list    * @return the request.    */
DECL|method|getCancel (List<AbstractRMOperation> ops, int index)
specifier|public
name|AMRMClient
operator|.
name|ContainerRequest
name|getCancel
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|index
operator|<
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|CancelSingleRequest
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|CancelSingleRequest
operator|)
name|op
operator|)
operator|.
name|getRequest
argument_list|()
return|;
block|}
comment|/**    * Get the single request of a list of operations; includes the check for    * the size.    * @param ops operations list of size 1    * @return the request within the first ContainerRequestOperation    */
DECL|method|getSingleRequest ( List<AbstractRMOperation> ops)
specifier|public
name|AMRMClient
operator|.
name|ContainerRequest
name|getSingleRequest
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRequest
argument_list|(
name|ops
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get the single request of a list of operations; includes the check for    * the size.    * @param ops operations list of size 1    * @return the request within the first operation    */
DECL|method|getSingleCancel ( List<AbstractRMOperation> ops)
specifier|public
name|AMRMClient
operator|.
name|ContainerRequest
name|getSingleCancel
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getCancel
argument_list|(
name|ops
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get the single release of a list of operations; includes the check for    * the size.    * @param ops operations list of size 1    * @return the request within the first operation    */
DECL|method|getSingleRelease ( List<AbstractRMOperation> ops)
specifier|public
name|ContainerReleaseOperation
name|getSingleRelease
parameter_list|(
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractRMOperation
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|op
operator|instanceof
name|ContainerReleaseOperation
argument_list|)
expr_stmt|;
return|return
operator|(
name|ContainerReleaseOperation
operator|)
name|op
return|;
block|}
comment|/**    * Get the node information as a large JSON String.    * @return    */
DECL|method|nodeInformationSnapshotAsString ()
specifier|protected
name|String
name|nodeInformationSnapshotAsString
parameter_list|()
throws|throws
name|UnsupportedEncodingException
throws|,
name|JsonProcessingException
block|{
return|return
name|prettyPrintAsJson
argument_list|(
name|stateAccess
operator|.
name|getNodeInformationSnapshot
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Scan through all containers and assert that the assignment is AA.    * @param index role index    */
DECL|method|assertAllContainersAA (int index)
specifier|protected
name|void
name|assertAllContainersAA
parameter_list|(
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeInstance
argument_list|>
name|nodeMapEntry
range|:
name|cloneNodemap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|nodeMapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeInstance
name|ni
init|=
name|nodeMapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeEntry
name|nodeEntry
init|=
name|ni
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"too many instances on node "
operator|+
name|name
argument_list|,
name|nodeEntry
operator|==
literal|null
operator|||
name|nodeEntry
operator|.
name|isAntiAffinityConstraintHeld
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a snapshot of the nodemap of the application state.    * @return a cloned nodemap    */
DECL|method|cloneNodemap ()
specifier|protected
name|NodeMap
name|cloneNodemap
parameter_list|()
block|{
return|return
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|cloneNodemap
argument_list|()
return|;
block|}
comment|/**    * Issue a nodes updated event.    * @param report report to notify    * @return response of AM    */
DECL|method|updateNodes (NodeReport report)
specifier|protected
name|AppState
operator|.
name|NodeUpdatedOutcome
name|updateNodes
parameter_list|(
name|NodeReport
name|report
parameter_list|)
block|{
return|return
name|appState
operator|.
name|onNodesUpdated
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|report
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

