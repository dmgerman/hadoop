begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Testing finding nodes for new instances.  *  * This stresses the non-AA codepath  */
end_comment

begin_class
DECL|class|TestRoleHistoryFindNodesForNewInstances
specifier|public
class|class
name|TestRoleHistoryFindNodesForNewInstances
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRoleHistoryFindNodesForNewInstances
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestRoleHistoryFindNodesForNewInstances ()
specifier|public
name|TestRoleHistoryFindNodesForNewInstances
parameter_list|()
throws|throws
name|BadConfigException
block|{   }
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestFindNodesForNewInstances"
return|;
block|}
DECL|field|age1Active4
specifier|private
name|NodeInstance
name|age1Active4
decl_stmt|;
DECL|field|age2Active2
specifier|private
name|NodeInstance
name|age2Active2
decl_stmt|;
DECL|field|age3Active0
specifier|private
name|NodeInstance
name|age3Active0
decl_stmt|;
DECL|field|age4Active1
specifier|private
name|NodeInstance
name|age4Active1
decl_stmt|;
DECL|field|age2Active0
specifier|private
name|NodeInstance
name|age2Active0
decl_stmt|;
DECL|field|roleHistory
specifier|private
name|RoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
name|MockFactory
operator|.
name|ROLES
argument_list|)
decl_stmt|;
DECL|field|roleStat
specifier|private
name|RoleStatus
name|roleStat
decl_stmt|;
DECL|field|roleStat2
specifier|private
name|RoleStatus
name|roleStat2
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|age1Active4
operator|=
name|nodeInstance
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age2Active2
operator|=
name|nodeInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|age3Active0
operator|=
name|nodeInstance
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age4Active1
operator|=
name|nodeInstance
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age2Active0
operator|=
name|nodeInstance
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|insert
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active2
argument_list|,
name|age2Active0
argument_list|,
name|age4Active1
argument_list|,
name|age1Active4
argument_list|,
name|age3Active0
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|buildRecentNodeLists
argument_list|()
expr_stmt|;
name|roleStat
operator|=
name|getRole0Status
argument_list|()
expr_stmt|;
name|roleStat2
operator|=
name|getRole2Status
argument_list|()
expr_stmt|;
block|}
DECL|method|findNodes (int count)
specifier|public
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|findNodes
parameter_list|(
name|int
name|count
parameter_list|)
block|{
return|return
name|findNodes
argument_list|(
name|count
argument_list|,
name|roleStat
argument_list|)
return|;
block|}
DECL|method|findNodes (int count, RoleStatus roleStatus)
specifier|public
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|findNodes
parameter_list|(
name|int
name|count
parameter_list|,
name|RoleStatus
name|roleStatus
parameter_list|)
block|{
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|found
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|NodeInstance
name|f
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|found
return|;
block|}
comment|//@Test
DECL|method|testFind1NodeR0 ()
specifier|public
name|void
name|testFind1NodeR0
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
name|found
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStat
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"found: {}"
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age3Active0
argument_list|)
operator|.
name|contains
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFind2NodeR0 ()
specifier|public
name|void
name|testFind2NodeR0
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
name|found
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStat
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"found: {}"
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active0
argument_list|,
name|age3Active0
argument_list|)
operator|.
name|contains
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|NodeInstance
name|found2
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStat
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"found: {}"
argument_list|,
name|found2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active0
argument_list|,
name|age3Active0
argument_list|)
operator|.
name|contains
argument_list|(
name|found2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|found
argument_list|,
name|found2
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFind3NodeR0ReturnsNull ()
specifier|public
name|void
name|testFind3NodeR0ReturnsNull
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|findNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeInstance
name|found
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStat
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNodesOneEntry ()
specifier|public
name|void
name|testFindNodesOneEntry
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|foundNodes
init|=
name|findNodes
argument_list|(
literal|4
argument_list|,
name|roleStat2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foundNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNodesIndependent ()
specifier|public
name|void
name|testFindNodesIndependent
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|findNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|dump
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|findNodes
argument_list|(
literal|3
argument_list|,
name|roleStat2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNodesFallsBackWhenUsed ()
specifier|public
name|void
name|testFindNodesFallsBackWhenUsed
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// mark age2 and active 0 as busy, expect a null back
name|age2Active0
operator|.
name|get
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|onStartCompleted
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|age2Active0
operator|.
name|getActiveRoleInstances
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|age3Active0
operator|.
name|get
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|onStartCompleted
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|age3Active0
operator|.
name|getActiveRoleInstances
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NodeInstance
name|found
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStat
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|found
operator|.
name|toFullString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNodesSkipsFailingNode ()
specifier|public
name|void
name|testFindNodesSkipsFailingNode
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// mark age2 and active 0 as busy, expect a null back
name|NodeEntry
name|entry0
init|=
name|age2Active0
operator|.
name|get
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|entry0
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry0
operator|.
name|getFailed
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry0
operator|.
name|getFailedRecently
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|entry0
operator|.
name|containerCompleted
argument_list|(
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|age2Active0
operator|.
name|exceedsFailureThreshold
argument_list|(
name|roleStat
argument_list|)
argument_list|)
expr_stmt|;
comment|// set failure to 1
name|roleStat
operator|.
name|getProviderRole
argument_list|()
operator|.
name|nodeFailureThreshold
operator|=
literal|1
expr_stmt|;
comment|// threshold is now exceeded
name|assertTrue
argument_list|(
name|age2Active0
operator|.
name|exceedsFailureThreshold
argument_list|(
name|roleStat
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the role& expect age3 to be picked up, even though it is older
name|NodeInstance
name|found
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStat
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|age3Active0
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

