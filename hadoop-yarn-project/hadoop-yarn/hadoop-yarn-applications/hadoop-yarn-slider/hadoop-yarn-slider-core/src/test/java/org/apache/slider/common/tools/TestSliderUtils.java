begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationReportPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|tools
operator|.
name|TestUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Test slider util methods. */
end_comment

begin_class
DECL|class|TestSliderUtils
specifier|public
class|class
name|TestSliderUtils
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSliderUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetMetaInfoStreamFromZip ()
specifier|public
name|void
name|testGetMetaInfoStreamFromZip
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zipFileName
init|=
name|TestUtility
operator|.
name|createAppPackage
argument_list|(
name|folder
argument_list|,
literal|"testpkg"
argument_list|,
literal|"test.zip"
argument_list|,
literal|"target/test-classes/org/apache/slider/common/tools/test"
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"fs working dir is {}"
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|sliderFileSystem
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|SliderUtils
operator|.
name|getApplicationResourceInputStream
argument_list|(
name|sliderFileSystem
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|zipFileName
argument_list|)
argument_list|,
literal|"metainfo.xml"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|.
name|available
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncate ()
specifier|public
name|void
name|testTruncate
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"323"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|"323"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"3232"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"3232"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"1234567890"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"1234567890"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"123456789012345"
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"123456789012345"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"123456789012345"
argument_list|,
literal|14
argument_list|)
argument_list|,
literal|"12345678901..."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"1234567890"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|"1234567890"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"1234567890"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SliderUtils
operator|.
name|truncate
argument_list|(
literal|""
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationReportComparison ()
specifier|public
name|void
name|testApplicationReportComparison
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
name|getApplicationReports
argument_list|()
decl_stmt|;
name|SliderUtils
operator|.
name|sortApplicationsByMostRecent
argument_list|(
name|instances
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|instances
operator|=
name|getApplicationReports
argument_list|()
expr_stmt|;
name|SliderUtils
operator|.
name|sortApplicationReport
argument_list|(
name|instances
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|||
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|instances
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|||
name|instances
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|instances
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|||
name|instances
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|instances
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplicationReports ()
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplicationReports
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|instances
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|1000
argument_list|,
literal|0
argument_list|,
literal|"app1"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|900
argument_list|,
literal|998
argument_list|,
literal|"app1"
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|900
argument_list|,
literal|998
argument_list|,
literal|"app2"
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|1000
argument_list|,
literal|0
argument_list|,
literal|"app2"
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|800
argument_list|,
literal|837
argument_list|,
literal|"app3"
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|1000
argument_list|,
literal|0
argument_list|,
literal|"app3"
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|900
argument_list|,
literal|998
argument_list|,
literal|"app3"
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|800
argument_list|,
literal|837
argument_list|,
literal|"app4"
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|1000
argument_list|,
literal|1050
argument_list|,
literal|"app4"
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|getApplicationReport
argument_list|(
literal|900
argument_list|,
literal|998
argument_list|,
literal|"app4"
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app1"
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app1"
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app2"
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app2"
argument_list|,
name|instances
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|instances
return|;
block|}
DECL|method|getApplicationReport (long startTime, long finishTime, String name, YarnApplicationState state)
specifier|private
name|ApplicationReportPBImpl
name|getApplicationReport
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|String
name|name
parameter_list|,
name|YarnApplicationState
name|state
parameter_list|)
block|{
name|ApplicationReportPBImpl
name|ar
init|=
operator|new
name|ApplicationReportPBImpl
argument_list|()
decl_stmt|;
name|ar
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|ar
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|ar
operator|.
name|setApplicationType
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ar
operator|.
name|setYarnApplicationState
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|ar
return|;
block|}
annotation|@
name|Test
DECL|method|testGetHdpVersion ()
specifier|public
name|void
name|testGetHdpVersion
parameter_list|()
block|{
name|String
name|hdpVersion
init|=
literal|"2.3.2.0-2766"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Version should be empty"
argument_list|,
literal|null
argument_list|,
name|SliderUtils
operator|.
name|getHdpVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsHdp ()
specifier|public
name|void
name|testIsHdp
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Should be false"
argument_list|,
name|SliderUtils
operator|.
name|isHdp
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrite ()
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|testWriteFile
init|=
name|folder
operator|.
name|newFile
argument_list|(
literal|"testWrite"
argument_list|)
decl_stmt|;
name|SliderUtils
operator|.
name|write
argument_list|(
name|testWriteFile
argument_list|,
literal|"test"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|testWriteFile
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

