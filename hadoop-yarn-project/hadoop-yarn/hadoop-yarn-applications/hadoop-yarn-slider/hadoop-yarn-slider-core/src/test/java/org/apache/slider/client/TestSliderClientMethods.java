begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.client
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|easymock
operator|.
name|PowerMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|PrepareForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|modules
operator|.
name|junit4
operator|.
name|PowerMockRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test slider client methods.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|PowerMockRunner
operator|.
name|class
argument_list|)
annotation|@
name|PrepareForTest
argument_list|(
name|SliderUtils
operator|.
name|class
argument_list|)
DECL|class|TestSliderClientMethods
specifier|public
class|class
name|TestSliderClientMethods
extends|extends
name|SliderTestBase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSliderClientMethods
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AM_ENV
specifier|static
specifier|final
name|String
name|AM_ENV
init|=
literal|"LD_LIBRARY_PATH"
decl_stmt|;
DECL|field|PLACEHOLDER_KEY
specifier|static
specifier|final
name|String
name|PLACEHOLDER_KEY
init|=
literal|"${distro.version}"
decl_stmt|;
DECL|field|PLACEHOLDER_SYSTEM_KEY
specifier|static
specifier|final
name|String
name|PLACEHOLDER_SYSTEM_KEY
init|=
literal|"DISTRO_VERSION"
decl_stmt|;
DECL|field|PLACEHOLDER_VALUE
specifier|static
specifier|final
name|String
name|PLACEHOLDER_VALUE
init|=
literal|"1.0.0"
decl_stmt|;
DECL|field|AM_ENV_2
specifier|static
specifier|final
name|String
name|AM_ENV_2
init|=
literal|"PATH"
decl_stmt|;
DECL|field|PLACEHOLDER_KEY_2
specifier|static
specifier|final
name|String
name|PLACEHOLDER_KEY_2
init|=
literal|"${native.version}"
decl_stmt|;
DECL|field|PLACEHOLDER_SYSTEM_KEY_2
specifier|static
specifier|final
name|String
name|PLACEHOLDER_SYSTEM_KEY_2
init|=
literal|"NATIVE_VERSION"
decl_stmt|;
DECL|field|PLACEHOLDER_VALUE_2
specifier|static
specifier|final
name|String
name|PLACEHOLDER_VALUE_2
init|=
literal|"2.0.0"
decl_stmt|;
annotation|@
name|Test
DECL|method|testGeneratePlaceholderKeyValueMap ()
specifier|public
name|void
name|testGeneratePlaceholderKeyValueMap
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestSliderClient
name|testSliderClient
init|=
operator|new
name|TestSliderClient
argument_list|()
decl_stmt|;
name|PowerMock
operator|.
name|mockStatic
argument_list|(
name|System
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|SliderUtils
operator|.
name|getSystemEnv
argument_list|(
name|PLACEHOLDER_SYSTEM_KEY
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|PLACEHOLDER_VALUE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|PowerMock
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|placeholders
init|=
name|testSliderClient
operator|.
name|generatePlaceholderKeyValueMap
argument_list|(
name|AM_ENV
operator|+
literal|"=/usr/lib/"
operator|+
name|PLACEHOLDER_KEY
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|placeholders
operator|.
name|containsKey
argument_list|(
name|PLACEHOLDER_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be equal"
argument_list|,
name|PLACEHOLDER_VALUE
argument_list|,
name|placeholders
operator|.
name|get
argument_list|(
name|PLACEHOLDER_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Placeholders = {}"
argument_list|,
name|placeholders
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAmLaunchEnv ()
specifier|public
name|void
name|testSetAmLaunchEnv
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestSliderClient
name|testSliderClient
init|=
operator|new
name|TestSliderClient
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LAUNCH_ENV
argument_list|,
name|AM_ENV
operator|+
literal|"=/usr/lib/"
operator|+
name|PLACEHOLDER_KEY
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|mockStatic
argument_list|(
name|System
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|SliderUtils
operator|.
name|getSystemEnv
argument_list|(
name|PLACEHOLDER_SYSTEM_KEY
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|PLACEHOLDER_VALUE
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|amLaunchEnv
init|=
name|testSliderClient
operator|.
name|getAmLaunchEnv
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amLaunchEnv
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amLaunchEnv
operator|.
name|get
argument_list|(
name|AM_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be equal"
argument_list|,
name|amLaunchEnv
operator|.
name|get
argument_list|(
name|AM_ENV
argument_list|)
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"%"
operator|+
name|AM_ENV
operator|+
literal|"%;"
else|:
literal|"$"
operator|+
name|AM_ENV
operator|+
literal|":"
operator|)
operator|+
literal|"/usr/lib/"
operator|+
name|PLACEHOLDER_VALUE
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"amLaunchEnv = {}"
argument_list|,
name|amLaunchEnv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAmLaunchEnvMulti ()
specifier|public
name|void
name|testSetAmLaunchEnvMulti
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestSliderClient
name|testSliderClient
init|=
operator|new
name|TestSliderClient
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|SliderUtils
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LAUNCH_ENV
argument_list|,
name|AM_ENV
operator|+
literal|"=/usr/lib/"
operator|+
name|PLACEHOLDER_KEY
operator|+
literal|","
operator|+
name|AM_ENV_2
operator|+
literal|"=/usr/bin/"
operator|+
name|PLACEHOLDER_KEY_2
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|mockStatic
argument_list|(
name|System
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|SliderUtils
operator|.
name|getSystemEnv
argument_list|(
name|PLACEHOLDER_SYSTEM_KEY
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|PLACEHOLDER_VALUE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|SliderUtils
operator|.
name|getSystemEnv
argument_list|(
name|PLACEHOLDER_SYSTEM_KEY_2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|PLACEHOLDER_VALUE_2
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|amLaunchEnv
init|=
name|testSliderClient
operator|.
name|getAmLaunchEnv
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amLaunchEnv
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should have 2 envs"
argument_list|,
name|amLaunchEnv
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amLaunchEnv
operator|.
name|get
argument_list|(
name|AM_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be equal"
argument_list|,
name|amLaunchEnv
operator|.
name|get
argument_list|(
name|AM_ENV
argument_list|)
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"%"
operator|+
name|AM_ENV
operator|+
literal|"%;"
else|:
literal|"$"
operator|+
name|AM_ENV
operator|+
literal|":"
operator|)
operator|+
literal|"/usr/lib/"
operator|+
name|PLACEHOLDER_VALUE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amLaunchEnv
operator|.
name|get
argument_list|(
name|AM_ENV_2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be equal"
argument_list|,
name|amLaunchEnv
operator|.
name|get
argument_list|(
name|AM_ENV_2
argument_list|)
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"%"
operator|+
name|AM_ENV_2
operator|+
literal|"%;"
else|:
literal|"$"
operator|+
name|AM_ENV_2
operator|+
literal|":"
operator|)
operator|+
literal|"/usr/bin/"
operator|+
name|PLACEHOLDER_VALUE_2
argument_list|)
expr_stmt|;
name|PowerMock
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"amLaunchEnv = "
operator|+
name|amLaunchEnv
argument_list|)
expr_stmt|;
block|}
DECL|class|TestSliderClient
specifier|static
class|class
name|TestSliderClient
extends|extends
name|SliderClient
block|{
annotation|@
name|Override
DECL|method|submitApplication (ApplicationSubmissionContext context)
specifier|public
name|ApplicationId
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContext
name|context
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
operator|new
name|MockApplicationId
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

