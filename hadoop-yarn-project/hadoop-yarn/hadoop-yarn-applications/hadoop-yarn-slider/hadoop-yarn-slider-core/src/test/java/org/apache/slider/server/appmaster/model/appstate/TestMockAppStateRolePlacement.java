begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|CancelSingleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerReleaseOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
operator|.
name|extractRole
import|;
end_import

begin_comment
comment|/**  * Test that the app state lets you ask for nodes, get a specific host,  * release it and then get that one back again.  */
end_comment

begin_class
DECL|class|TestMockAppStateRolePlacement
specifier|public
class|class
name|TestMockAppStateRolePlacement
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateRolePlacement"
return|;
block|}
comment|//@Test
DECL|method|testAllocateReleaseRealloc ()
specifier|public
name|void
name|testAllocateReleaseRealloc
parameter_list|()
throws|throws
name|Throwable
block|{
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|ContainerRequestOperation
name|operation
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|operation
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getRacks
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|allocated
init|=
name|engine
operator|.
name|allocateContainer
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|releaseOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Container
operator|)
name|allocated
argument_list|)
argument_list|,
name|assignments
argument_list|,
name|releaseOperations
argument_list|)
expr_stmt|;
comment|// verify the release matches the allocation
name|assertEquals
argument_list|(
name|releaseOperations
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CancelSingleRequest
name|cancelOp
init|=
operator|(
name|CancelSingleRequest
operator|)
name|releaseOperations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cancelOp
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cancelOp
operator|.
name|getRequest
argument_list|()
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cancelOp
operator|.
name|getRequest
argument_list|()
operator|.
name|getCapability
argument_list|()
argument_list|,
name|allocated
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// now the assignment
name|assertEquals
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerAssignment
name|assigned
init|=
name|assignments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|allocated
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|roleId
init|=
name|assigned
operator|.
name|role
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|roleId
argument_list|,
name|extractRole
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|role
operator|.
name|getName
argument_list|()
argument_list|,
name|ROLE0
argument_list|)
expr_stmt|;
name|String
name|containerHostname
init|=
name|RoleHistoryUtils
operator|.
name|hostnameOf
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
comment|//tell the app it arrived
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appState
operator|.
name|onNodeManagerContainerStarted
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getRunning
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//now it is surplus
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|ContainerReleaseOperation
name|release
init|=
operator|(
name|ContainerReleaseOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|release
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|roleInstance
argument_list|)
expr_stmt|;
comment|//view the world
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
comment|//now ask for a new one
name|getRole0Status
argument_list|()
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|operation
operator|=
operator|(
name|ContainerRequestOperation
operator|)
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request2
init|=
name|operation
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request2
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|containerHostname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request2
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|execute
argument_list|(
name|ops
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

