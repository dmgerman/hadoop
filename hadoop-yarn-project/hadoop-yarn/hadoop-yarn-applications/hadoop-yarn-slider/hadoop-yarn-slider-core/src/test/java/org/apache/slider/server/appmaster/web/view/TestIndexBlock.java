begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.web.view
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|view
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
operator|.
name|BaseMockAppStateAATest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|OutstandingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ProviderAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|WebAppApiImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_comment
comment|/**  * Test index block.  */
end_comment

begin_class
DECL|class|TestIndexBlock
specifier|public
class|class
name|TestIndexBlock
extends|extends
name|BaseMockAppStateAATest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestIndexBlock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|indexBlock
specifier|private
name|IndexBlock
name|indexBlock
decl_stmt|;
DECL|field|cont1
DECL|field|cont2
specifier|private
name|Container
name|cont1
decl_stmt|,
name|cont2
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|ProviderService
name|providerService
init|=
operator|new
name|MockProviderService
argument_list|()
decl_stmt|;
name|ProviderAppState
name|providerAppState
init|=
operator|new
name|ProviderAppState
argument_list|(
literal|"undefined"
argument_list|,
name|appState
argument_list|)
decl_stmt|;
name|WebAppApiImpl
name|inst
init|=
operator|new
name|WebAppApiImpl
argument_list|(
name|providerAppState
argument_list|,
name|providerService
argument_list|,
literal|null
argument_list|,
name|METRICS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|WebAppApi
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|inst
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|indexBlock
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|IndexBlock
operator|.
name|class
argument_list|)
expr_stmt|;
name|cont1
operator|=
operator|new
name|MockContainer
argument_list|()
expr_stmt|;
name|cont1
operator|.
name|setId
argument_list|(
operator|new
name|MockContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cont1
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|cont1
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cont1
operator|.
name|setResource
argument_list|(
operator|new
name|MockResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cont2
operator|=
operator|new
name|MockContainer
argument_list|()
expr_stmt|;
name|cont2
operator|.
name|setId
argument_list|(
operator|new
name|MockContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cont2
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|cont2
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cont2
operator|.
name|setResource
argument_list|(
operator|new
name|MockResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndex ()
specifier|public
name|void
name|testIndex
parameter_list|()
block|{
name|RoleStatus
name|role0
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|RoleStatus
name|role1
init|=
name|getRole1Status
argument_list|()
decl_stmt|;
name|RoleStatus
name|role2
init|=
name|getRole2Status
argument_list|()
decl_stmt|;
name|int
name|role0Desired
init|=
literal|8
decl_stmt|;
name|role0
operator|.
name|setDesired
argument_list|(
name|role0Desired
argument_list|)
expr_stmt|;
name|int
name|role0Actual
init|=
literal|5
decl_stmt|;
name|int
name|role0Requested
init|=
name|role0Desired
operator|-
name|role0Actual
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|role0Actual
condition|;
name|i
operator|++
control|)
block|{
name|appState
operator|.
name|incRunningContainers
argument_list|(
name|role0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|role0
operator|.
name|getRunning
argument_list|()
argument_list|,
name|role0Actual
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|role0Requested
condition|;
name|i
operator|++
control|)
block|{
name|appState
operator|.
name|incRequestedContainers
argument_list|(
name|role0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|role0
operator|.
name|getRequested
argument_list|()
argument_list|,
name|role0Requested
argument_list|)
expr_stmt|;
name|int
name|role0Failures
init|=
literal|2
decl_stmt|;
name|appState
operator|.
name|incFailedContainers
argument_list|(
name|role0
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|appState
operator|.
name|incFailedContainers
argument_list|(
name|role0
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
comment|// all aa roles fields are in the
name|int
name|aaroleDesired
init|=
literal|200
decl_stmt|;
name|aaRole
operator|.
name|setDesired
argument_list|(
name|aaroleDesired
argument_list|)
expr_stmt|;
name|int
name|aaroleActual
init|=
literal|90
decl_stmt|;
name|int
name|aaroleActive
init|=
literal|1
decl_stmt|;
name|int
name|aaroleRequested
init|=
name|aaroleDesired
operator|-
name|aaroleActual
decl_stmt|;
name|int
name|aarolePending
init|=
name|aaroleRequested
operator|-
literal|1
decl_stmt|;
name|int
name|aaroleFailures
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aaroleActual
condition|;
name|i
operator|++
control|)
block|{
name|appState
operator|.
name|incRunningContainers
argument_list|(
name|aaRole
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|aaRole
operator|.
name|getRunning
argument_list|()
argument_list|,
name|aaroleActual
argument_list|)
expr_stmt|;
name|aaRole
operator|.
name|setOutstandingAArequest
argument_list|(
operator|new
name|OutstandingRequest
argument_list|(
literal|2
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a requested
name|appState
operator|.
name|incRequestedContainers
argument_list|(
name|aaRole
argument_list|)
expr_stmt|;
name|aaRole
operator|.
name|getComponentMetrics
argument_list|()
operator|.
name|pendingAAContainers
operator|.
name|set
argument_list|(
name|aarolePending
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|,
name|aarolePending
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aaRole
operator|.
name|getActualAndRequested
argument_list|()
argument_list|,
name|aaroleActual
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|Hamlet
name|hamlet
init|=
operator|new
name|Hamlet
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|indexBlock
operator|.
name|doIndex
argument_list|(
name|hamlet
argument_list|,
literal|"accumulo"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|body
argument_list|)
expr_stmt|;
comment|// verify role data came out
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
literal|"role0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|role0Desired
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|role0Actual
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|role0Requested
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|role0Failures
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
literal|"role2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|aaroleDesired
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|aaroleActual
argument_list|,
name|body
argument_list|)
expr_stmt|;
comment|//    assertContains(aaroleRequested, body)
name|assertContains
argument_list|(
name|aaroleFailures
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|indexBlock
operator|.
name|buildAADetails
argument_list|(
literal|true
argument_list|,
name|aarolePending
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the sorting took place
name|assertTrue
argument_list|(
name|body
operator|.
name|indexOf
argument_list|(
literal|"role0"
argument_list|)
operator|<
name|body
operator|.
name|indexOf
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|indexOf
argument_list|(
literal|"role1"
argument_list|)
operator|<
name|body
operator|.
name|indexOf
argument_list|(
literal|"role2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|IndexBlock
operator|.
name|ALL_CONTAINERS_ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// role
block|}
DECL|method|assertContains (int ex, String html)
name|void
name|assertContains
parameter_list|(
name|int
name|ex
parameter_list|,
name|String
name|html
parameter_list|)
block|{
name|assertStringContains
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|ex
argument_list|)
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

