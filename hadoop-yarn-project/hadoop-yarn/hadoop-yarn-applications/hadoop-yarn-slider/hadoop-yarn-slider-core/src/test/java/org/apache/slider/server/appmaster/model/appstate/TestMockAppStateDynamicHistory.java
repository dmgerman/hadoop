begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|ContainerRequestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test that if you have>1 role, the right roles are chosen for release.  */
end_comment

begin_class
DECL|class|TestMockAppStateDynamicHistory
specifier|public
class|class
name|TestMockAppStateDynamicHistory
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMockAppStateDynamicHistory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Small cluster with multiple containers per node,    * to guarantee many container allocations on each node.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDynamicRoleHistory ()
specifier|public
name|void
name|testDynamicRoleHistory
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dynamic
init|=
literal|"dynamicRole"
decl_stmt|;
name|long
name|desired
init|=
literal|1
decl_stmt|;
name|int
name|placementPolicy
init|=
name|PlacementPolicy
operator|.
name|DEFAULT
decl_stmt|;
comment|// snapshot and patch existing spec
name|Application
name|application
init|=
name|appState
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
name|dynamic
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
name|desired
argument_list|)
decl_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_PLACEMENT_POLICY
argument_list|,
literal|""
operator|+
name|placementPolicy
argument_list|)
expr_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
comment|// write the definitions
name|List
argument_list|<
name|ProviderRole
argument_list|>
name|updates
init|=
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|dynamic
argument_list|,
name|desired
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ProviderRole
name|updatedRole
init|=
name|updates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|updatedRole
operator|.
name|placementPolicy
argument_list|,
name|placementPolicy
argument_list|)
expr_stmt|;
comment|// now look at the role map
name|assertNotNull
argument_list|(
name|appState
operator|.
name|getRoleMap
argument_list|()
operator|.
name|get
argument_list|(
name|dynamic
argument_list|)
argument_list|)
expr_stmt|;
name|ProviderRole
name|mappedRole
init|=
name|appState
operator|.
name|getRoleMap
argument_list|()
operator|.
name|get
argument_list|(
name|dynamic
argument_list|)
decl_stmt|;
name|int
name|rolePriority
init|=
name|mappedRole
operator|.
name|id
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ProviderRole
argument_list|>
name|priorityMap
init|=
name|appState
operator|.
name|getRolePriorityMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|priorityMap
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ProviderRole
name|dynamicProviderRole
init|=
name|priorityMap
operator|.
name|get
argument_list|(
name|rolePriority
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dynamicProviderRole
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dynamicProviderRole
operator|.
name|id
argument_list|,
name|rolePriority
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appState
operator|.
name|getRoleStatusMap
argument_list|()
operator|.
name|get
argument_list|(
name|rolePriority
argument_list|)
argument_list|)
expr_stmt|;
name|RoleStatus
name|dynamicRoleStatus
init|=
name|appState
operator|.
name|getRoleStatusMap
argument_list|()
operator|.
name|get
argument_list|(
name|rolePriority
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dynamicRoleStatus
operator|.
name|getDesired
argument_list|()
argument_list|,
name|desired
argument_list|)
expr_stmt|;
comment|// before allocating the nodes, fill up the capacity of some of the
comment|// hosts
name|engine
operator|.
name|getAllocator
argument_list|()
operator|.
name|nextIndex
argument_list|()
expr_stmt|;
name|int
name|targetNode
init|=
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
name|targetNode
argument_list|,
name|engine
operator|.
name|getAllocator
argument_list|()
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetHostname
init|=
name|engine
operator|.
name|getCluster
argument_list|()
operator|.
name|nodeAt
argument_list|(
name|targetNode
argument_list|)
operator|.
name|getHostname
argument_list|()
decl_stmt|;
comment|// clock is set to a small value
name|appState
operator|.
name|setTime
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
comment|// allocate the nodes
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|actions
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|action0
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerRequest
name|request
init|=
name|action0
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|request
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|released
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|allocations
init|=
name|submitOperations
argument_list|(
name|actions
argument_list|,
name|released
argument_list|)
decl_stmt|;
name|processSubmissionOperations
argument_list|(
name|allocations
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|released
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
name|allocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ri
operator|.
name|role
argument_list|,
name|dynamic
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ri
operator|.
name|roleId
argument_list|,
name|rolePriority
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ri
operator|.
name|host
argument_list|,
name|targetHostname
argument_list|)
expr_stmt|;
comment|// now look at the role history
name|RoleHistory
name|roleHistory
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|activeNodes
init|=
name|roleHistory
operator|.
name|listActiveNodes
argument_list|(
name|rolePriority
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|activeNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|NodeInstance
name|activeNode
init|=
name|activeNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|activeNode
operator|.
name|get
argument_list|(
name|rolePriority
argument_list|)
argument_list|)
expr_stmt|;
name|NodeEntry
name|entry8
init|=
name|activeNode
operator|.
name|get
argument_list|(
name|rolePriority
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entry8
operator|.
name|getActive
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|activeNode
operator|.
name|hostname
argument_list|,
name|targetHostname
argument_list|)
expr_stmt|;
name|NodeInstance
name|activeNodeInstance
init|=
name|roleHistory
operator|.
name|getOrCreateNodeInstance
argument_list|(
name|ri
operator|.
name|container
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|activeNode
argument_list|,
name|activeNodeInstance
argument_list|)
expr_stmt|;
name|NodeEntry
name|entry
init|=
name|activeNodeInstance
operator|.
name|get
argument_list|(
name|rolePriority
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getActive
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getLive
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// now trigger a termination event on that role
comment|// increment time for a long-lived failure event
name|appState
operator|.
name|incTime
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Triggering failure"
argument_list|)
expr_stmt|;
name|ContainerId
name|cid
init|=
name|ri
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|roleInstance
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|dump
argument_list|()
expr_stmt|;
comment|// values should have changed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodesForRoleId
init|=
name|roleHistory
operator|.
name|getRecentNodesForRoleId
argument_list|(
name|rolePriority
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodesForRoleId
argument_list|)
expr_stmt|;
comment|// make sure new nodes will default to a different host in the engine
name|assertTrue
argument_list|(
name|targetNode
operator|<
name|engine
operator|.
name|getAllocator
argument_list|()
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequestOperation
name|action1
init|=
operator|(
name|ContainerRequestOperation
operator|)
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerRequest
name|request1
init|=
name|action1
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|request1
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadConfigException
operator|.
name|class
argument_list|)
DECL|method|testRoleHistoryRoleAdditions ()
specifier|public
name|void
name|testRoleHistoryRoleAdditions
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|roleHistory
operator|.
name|addNewRole
argument_list|(
operator|new
name|RoleStatus
argument_list|(
operator|new
name|ProviderRole
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|addNewRole
argument_list|(
operator|new
name|RoleStatus
argument_list|(
operator|new
name|ProviderRole
argument_list|(
literal|"two"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadConfigException
operator|.
name|class
argument_list|)
DECL|method|testRoleHistoryRoleStartupConflict ()
specifier|public
name|void
name|testRoleHistoryRoleStartupConflict
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ProviderRole
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ProviderRole
argument_list|(
literal|"two"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|roleHistory
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

