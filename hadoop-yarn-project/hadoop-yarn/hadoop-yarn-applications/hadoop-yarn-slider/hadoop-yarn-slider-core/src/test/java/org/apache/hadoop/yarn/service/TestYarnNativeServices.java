begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|LinuxResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
operator|.
name|FINISHED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|AM_RESOURCE_MEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|YARN_SERVICE_BASE_PATH
import|;
end_import

begin_comment
comment|/**  * End to end tests to test deploying services with MiniYarnCluster and a in-JVM  * ZK testing cluster.  */
end_comment

begin_class
DECL|class|TestYarnNativeServices
specifier|public
class|class
name|TestYarnNativeServices
extends|extends
name|ServiceTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestYarnNativeServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|yarnCluster
specifier|private
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
DECL|field|hdfsCluster
specifier|private
name|MiniDFSCluster
name|hdfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|NUM_NMS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NMS
init|=
literal|1
decl_stmt|;
DECL|field|basedir
specifier|private
name|File
name|basedir
decl_stmt|;
annotation|@
name|Rule
DECL|field|tmpFolder
specifier|public
name|TemporaryFolder
name|tmpFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
block|}
DECL|method|setupInternal (int numNodeManager)
specifier|private
name|void
name|setupInternal
parameter_list|(
name|int
name|numNodeManager
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting up YARN cluster"
argument_list|)
expr_stmt|;
comment|//    Logger rootLogger = LogManager.getRootLogger();
comment|//    rootLogger.setLevel(Level.DEBUG);
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|128
argument_list|)
expr_stmt|;
comment|// reduce the teardown waiting time
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|DISPATCHER_DRAIN_EVENTS_TIMEOUT
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.log.dir"
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
comment|// mark if we need to launch the v1 timeline server
comment|// disable aux-service based timeline aggregators
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
comment|// Enable ContainersMonitorImpl
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MON_RESOURCE_CALCULATOR
argument_list|,
name|LinuxResourceCalculatorPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MON_PROCESS_TREE
argument_list|,
name|ProcfsBasedProcessTree
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DEBUG_NM_DELETE_DELAY_SEC
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|AM_RESOURCE_MEM
argument_list|,
literal|526
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnServiceConf
operator|.
name|READINESS_CHECK_INTERVAL
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Disable vmem check to disallow NM killing the container
name|conf
operator|.
name|setBoolean
argument_list|(
name|NM_VMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|NM_PMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// setup zk cluster
name|TestingCluster
name|zkCluster
decl_stmt|;
name|zkCluster
operator|=
operator|new
name|TestingCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|zkCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZK cluster: "
operator|+
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
if|if
condition|(
name|basedir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|basedir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|basedir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|yarnCluster
operator|==
literal|null
condition|)
block|{
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestYarnNativeServices
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numNodeManager
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForNMsToRegister
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"yarn-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find 'yarn-site.xml' dummy file in classpath"
argument_list|)
throw|;
block|}
name|Configuration
name|yarnClusterConfig
init|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|yarnClusterConfig
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APPLICATION_CLASSPATH
argument_list|,
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|//write the document to a buffer (not directly to the file, as that
comment|//can cause the file being written to get read -which will then fail.
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|yarnClusterConfig
operator|.
name|writeXml
argument_list|(
name|bytesOut
argument_list|)
expr_stmt|;
name|bytesOut
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//write the bytes to the file in the classpath
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Write yarn-site.xml configs to: "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfsCluster
operator|==
literal|null
condition|)
block|{
name|HdfsConfiguration
name|hdfsConfig
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|hdfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|hdfsConfig
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setup thread sleep interrupted. message="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForNMsToRegister ()
specifier|private
name|void
name|waitForNMsToRegister
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sec
init|=
literal|60
decl_stmt|;
while|while
condition|(
name|sec
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|NUM_NMS
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|sec
operator|--
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|yarnCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hdfsCluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hdfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hdfsCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|basedir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
name|SliderFileSystem
name|sfs
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
name|sfs
operator|.
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
name|sfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|appDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// End-to-end test to use ServiceClient to deploy a service.
comment|// 1. Create a service with 2 components, each of which has 2 containers
comment|// 2. Flex up each component to 3 containers and check the component instance names
comment|// 3. Flex down each component to 1 container and check the component instance names
comment|// 4. Flex up each component to 2 containers and check the component instance names
comment|// 5. Stop the service
comment|// 6. Destroy the service
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testCreateFlexStopDestroyService ()
specifier|public
name|void
name|testCreateFlexStopDestroyService
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceClient
name|client
init|=
name|createClient
argument_list|()
decl_stmt|;
name|Application
name|exampleApp
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|fileSystem
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
name|fileSystem
operator|.
name|buildClusterDirPath
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// check app.json is persisted.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|exampleApp
operator|.
name|getName
argument_list|()
operator|+
literal|".json"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// Flex two components, each from 2 container to 3 containers.
name|flexComponents
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
comment|// wait for flex to be completed, increase from 2 to 3 containers.
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// check all instances name for each component are in sequential order.
name|checkCompInstancesInOrder
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// flex down to 1
name|flexComponents
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|checkCompInstancesInOrder
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// check component dir and registry are cleaned up.
comment|// flex up again to 2
name|flexComponents
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|checkCompInstancesInOrder
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// stop the service
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop the service"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ApplicationReport
name|report
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|exampleApp
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// AM unregisters with RM successfully
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FINISHED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|ENDED
argument_list|,
name|report
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroy the service"
argument_list|)
expr_stmt|;
comment|//destroy the service and check the app dir is deleted from fs.
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the application dir on hdfs (in this case, local fs) are deleted.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|appDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create compa with 2 containers
comment|// Create compb with 2 containers which depends on compa
comment|// Check containers for compa started before containers for compb
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testComponentStartOrder ()
specifier|public
name|void
name|testComponentStartOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceClient
name|client
init|=
name|createClient
argument_list|()
decl_stmt|;
name|Application
name|exampleApp
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"teststartorder"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compa"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
name|Component
name|compb
init|=
name|createComponent
argument_list|(
literal|"compb"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|)
decl_stmt|;
comment|// Let compb depedends on compa;
name|compb
operator|.
name|setDependencies
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|compb
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// check that containers for compa are launched before containers for compb
name|checkContainerLaunchDependencies
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|"compa"
argument_list|,
literal|"compb"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check containers launched are in dependency order
comment|// Get all containers into a list and sort based on container launch time e.g.
comment|// compa-c1, compa-c2, compb-c1, compb-c2;
comment|// check that the container's launch time are align with the dependencies.
DECL|method|checkContainerLaunchDependencies (ServiceClient client, Application exampleApp, String... compOrder)
specifier|private
name|void
name|checkContainerLaunchDependencies
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Application
name|exampleApp
parameter_list|,
name|String
modifier|...
name|compOrder
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Application
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|retrievedApp
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|containerList
operator|.
name|addAll
argument_list|(
name|component
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort based on launchTime
name|containerList
operator|.
name|sort
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getLaunchTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"containerList: "
operator|+
name|containerList
argument_list|)
expr_stmt|;
comment|// check the containers are in the dependency order.
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|comp
range|:
name|compOrder
control|)
block|{
name|long
name|num
init|=
name|retrievedApp
operator|.
name|getComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|compInstanceName
init|=
name|containerList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getComponentName
argument_list|()
decl_stmt|;
name|String
name|compName
init|=
name|compInstanceName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|compInstanceName
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|compName
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|flexComponents (ServiceClient client, Application exampleApp, long count)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|flexComponents
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Application
name|exampleApp
parameter_list|,
name|long
name|count
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compb"
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// flex will update the persisted conf to reflect latest number of containers.
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compb"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
return|return
name|compCounts
return|;
block|}
comment|// Check each component's comp instances name are in sequential order.
comment|// E.g. If there are two instances compA-1 and compA-2
comment|// When flex up to 4 instances, it should be compA-1 , compA-2, compA-3, compA-4
comment|// When flex down to 3 instances,  it should be compA-1 , compA-2, compA-3.
DECL|method|checkCompInstancesInOrder (ServiceClient client, Application exampleApp)
specifier|private
name|void
name|checkCompInstancesInOrder
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Application
name|exampleApp
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Application
name|application
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|checkEachCompInstancesInOrder
argument_list|(
name|comp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkRegistryAndCompDirDeleted ()
specifier|private
name|void
name|checkRegistryAndCompDirDeleted
parameter_list|()
block|{    }
DECL|method|checkEachCompInstancesInOrder (Component component)
specifier|private
name|void
name|checkEachCompInstancesInOrder
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|long
name|expectedNumInstances
init|=
name|component
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumInstances
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|instances
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|instances
operator|.
name|add
argument_list|(
name|container
operator|.
name|getComponentName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|instances
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|waitForOneCompToBeReady (ServiceClient client, Application exampleApp, String readyComp)
specifier|private
name|void
name|waitForOneCompToBeReady
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Application
name|exampleApp
parameter_list|,
name|String
name|readyComp
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|long
name|numExpectedContainers
init|=
name|exampleApp
operator|.
name|getComponent
argument_list|(
name|readyComp
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Application
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Component
name|retrievedComp
init|=
name|retrievedApp
operator|.
name|getComponent
argument_list|(
name|readyComp
argument_list|)
decl_stmt|;
if|if
condition|(
name|retrievedComp
operator|.
name|getContainers
argument_list|()
operator|!=
literal|null
operator|&&
name|retrievedComp
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numExpectedContainers
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|readyComp
operator|+
literal|" found "
operator|+
name|numExpectedContainers
operator|+
literal|" containers running"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" Waiting for "
operator|+
name|readyComp
operator|+
literal|"'s containers to be running"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
block|}
comment|// wait until all the containers for all components become ready state
DECL|method|waitForAllCompToBeReady (ServiceClient client, Application exampleApp)
specifier|private
name|void
name|waitForAllCompToBeReady
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Application
name|exampleApp
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|int
name|expectedTotalContainers
init|=
name|countTotalContainers
argument_list|(
name|exampleApp
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Application
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|totalReadyContainers
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num Components "
operator|+
name|retrievedApp
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|retrievedApp
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"looking for  "
operator|+
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|component
argument_list|)
expr_stmt|;
if|if
condition|(
name|component
operator|.
name|getContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|exampleApp
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
condition|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container state "
operator|+
name|container
operator|.
name|getState
argument_list|()
operator|+
literal|", component "
operator|+
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|READY
condition|)
block|{
name|totalReadyContainers
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found 1 ready container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|" Expected number of containers "
operator|+
name|exampleApp
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
operator|+
literal|", current = "
operator|+
name|component
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Exit loop, totalReadyContainers= "
operator|+
name|totalReadyContainers
operator|+
literal|" expected = "
operator|+
name|expectedTotalContainers
argument_list|)
expr_stmt|;
return|return
name|totalReadyContainers
operator|==
name|expectedTotalContainers
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|createClient ()
specifier|private
name|ServiceClient
name|createClient
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceClient
name|client
init|=
operator|new
name|ServiceClient
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Path
name|addJarResource
parameter_list|(
name|String
name|appName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
comment|// do nothing, the Unit test will use local jars
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|countTotalContainers (Application application)
specifier|private
name|int
name|countTotalContainers
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|int
name|totalContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|totalContainers
operator|+=
name|component
operator|.
name|getNumberOfContainers
argument_list|()
expr_stmt|;
block|}
return|return
name|totalContainers
return|;
block|}
block|}
end_class

end_unit

