begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|MostRecentContainerReleaseSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Test that if you have more than one role, the right roles are chosen for  * release.  */
end_comment

begin_class
DECL|class|TestMockAppStateUniqueNames
specifier|public
class|class
name|TestMockAppStateUniqueNames
extends|extends
name|BaseMockAppStateTest
implements|implements
name|MockRoles
block|{
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestMockAppStateUniqueNames"
return|;
block|}
comment|/**    * Small cluster with multiple containers per node,    * to guarantee many container allocations on each node.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildBindingInfo ()
specifier|public
name|AppStateBindingInfo
name|buildBindingInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|AppStateBindingInfo
name|bindingInfo
init|=
name|super
operator|.
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|bindingInfo
operator|.
name|releaseSelector
operator|=
operator|new
name|MostRecentContainerReleaseSelector
argument_list|()
expr_stmt|;
return|return
name|bindingInfo
return|;
block|}
annotation|@
name|Override
DECL|method|buildApplication ()
specifier|public
name|Application
name|buildApplication
parameter_list|()
block|{
name|Application
name|application
init|=
name|super
operator|.
name|buildApplication
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
operator|.
name|name
argument_list|(
literal|"group1"
argument_list|)
operator|.
name|numberOfContainers
argument_list|(
literal|2L
argument_list|)
operator|.
name|resource
argument_list|(
operator|new
name|Resource
argument_list|()
operator|.
name|memory
argument_list|(
literal|"1024"
argument_list|)
operator|.
name|cpus
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|uniqueComponentSupport
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|organize (List<RoleInstance> instances)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|organize
parameter_list|(
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoleInstance
name|instance
range|:
name|instances
control|)
block|{
name|assertFalse
argument_list|(
literal|"Multiple role instances for unique name "
operator|+
name|instance
operator|.
name|compInstanceName
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
name|instance
operator|.
name|compInstanceName
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding to map "
operator|+
name|instance
operator|.
name|compInstanceName
operator|+
literal|" for"
operator|+
name|instance
operator|.
name|role
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|instance
operator|.
name|compInstanceName
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|verifyInstances (List<RoleInstance> instances, String group, String... roles)
specifier|public
specifier|static
name|void
name|verifyInstances
parameter_list|(
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
parameter_list|,
name|String
name|group
parameter_list|,
name|String
modifier|...
name|roles
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|roles
operator|.
name|length
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|map
init|=
name|organize
argument_list|(
name|instances
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|RoleInstance
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|roles
index|[
name|i
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|instance
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|roles
index|[
name|i
index|]
argument_list|,
name|instance
operator|.
name|compInstanceName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|instance
operator|.
name|componentId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|instance
operator|.
name|role
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|instance
operator|.
name|providerRole
operator|.
name|name
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|//@Test
DECL|method|testDynamicFlexDown ()
specifier|public
name|void
name|testDynamicFlexDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|appState
operator|.
name|cloneOwnedContainerList
argument_list|()
decl_stmt|;
name|verifyInstances
argument_list|(
name|instances
argument_list|,
literal|"group1"
argument_list|,
literal|"group10"
argument_list|,
literal|"group11"
argument_list|)
expr_stmt|;
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"group1"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|instances
operator|=
name|appState
operator|.
name|cloneOwnedContainerList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoleStatus
name|roleStatus
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
literal|"group1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleStatus
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024L
argument_list|,
name|roleStatus
operator|.
name|getResourceRequirements
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roleStatus
operator|.
name|getResourceRequirements
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// now flex back up
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"group1"
argument_list|,
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|instances
operator|=
name|appState
operator|.
name|cloneOwnedContainerList
argument_list|()
expr_stmt|;
name|verifyInstances
argument_list|(
name|instances
argument_list|,
literal|"group1"
argument_list|,
literal|"group10"
argument_list|,
literal|"group11"
argument_list|,
literal|"group12"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testDynamicFlexUp ()
specifier|public
name|void
name|testDynamicFlexUp
parameter_list|()
throws|throws
name|Throwable
block|{
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|appState
operator|.
name|cloneOwnedContainerList
argument_list|()
decl_stmt|;
name|verifyInstances
argument_list|(
name|instances
argument_list|,
literal|"group1"
argument_list|,
literal|"group10"
argument_list|,
literal|"group11"
argument_list|)
expr_stmt|;
name|appState
operator|.
name|updateComponents
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"group1"
argument_list|,
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|createAndStartNodes
argument_list|()
expr_stmt|;
name|instances
operator|=
name|appState
operator|.
name|cloneOwnedContainerList
argument_list|()
expr_stmt|;
name|verifyInstances
argument_list|(
name|instances
argument_list|,
literal|"group1"
argument_list|,
literal|"group10"
argument_list|,
literal|"group11"
argument_list|,
literal|"group12"
argument_list|)
expr_stmt|;
name|RoleStatus
name|group1
init|=
name|appState
operator|.
name|lookupRoleStatus
argument_list|(
literal|"group1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|group1
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024L
argument_list|,
name|group1
operator|.
name|getResourceRequirements
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

