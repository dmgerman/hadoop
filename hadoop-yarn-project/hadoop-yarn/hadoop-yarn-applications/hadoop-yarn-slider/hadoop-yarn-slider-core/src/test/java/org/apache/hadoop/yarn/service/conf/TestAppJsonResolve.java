begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ConfigFile
operator|.
name|TypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|persist
operator|.
name|JsonSerDeser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
operator|.
name|CHAOS_MONKEY_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
operator|.
name|DEFAULT_CHAOS_MONKEY_INTERVAL_DAYS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
operator|.
name|DEFAULT_CHAOS_MONKEY_INTERVAL_HOURS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
operator|.
name|DEFAULT_CHAOS_MONKEY_INTERVAL_MINUTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|ExampleAppJson
operator|.
name|APP_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|ExampleAppJson
operator|.
name|EXTERNAL_JSON_1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|ExampleAppJson
operator|.
name|OVERRIDE_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createNiceMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|reset
import|;
end_import

begin_comment
comment|/**  * Test global configuration resolution.  */
end_comment

begin_class
DECL|class|TestAppJsonResolve
specifier|public
class|class
name|TestAppJsonResolve
extends|extends
name|Assert
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAppJsonResolve
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testOverride ()
specifier|public
name|void
name|testOverride
parameter_list|()
throws|throws
name|Throwable
block|{
name|Application
name|orig
init|=
name|ExampleAppJson
operator|.
name|loadResource
argument_list|(
name|OVERRIDE_JSON
argument_list|)
decl_stmt|;
name|Configuration
name|global
init|=
name|orig
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|global
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|global
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|global
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|simple
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|simple
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|simple
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|master
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"m"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overridden"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|master
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|worker
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"worker"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"worker = {}"
argument_list|,
name|worker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|worker
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|worker
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"worker"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overridden-by-worker"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|worker
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"timeout"
argument_list|)
argument_list|)
expr_stmt|;
comment|// here is the resolution
name|SliderFileSystem
name|sfs
init|=
name|createNiceMock
argument_list|(
name|SliderFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|createNiceMock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockFs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|buildClusterDirPath
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"cluster_dir_path"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|sfs
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|orig
argument_list|,
name|sfs
argument_list|,
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|global
operator|=
name|orig
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"global = {}"
argument_list|,
name|global
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|global
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|global
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|global
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|simple
operator|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|simple
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|simple
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|simple
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|simple
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"k1"
argument_list|,
literal|"overridden"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"k2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|ConfigFile
argument_list|()
operator|.
name|destFile
argument_list|(
literal|"file1"
argument_list|)
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|PROPERTIES
argument_list|)
operator|.
name|props
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|ConfigFile
argument_list|()
operator|.
name|destFile
argument_list|(
literal|"file2"
argument_list|)
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|XML
argument_list|)
operator|.
name|props
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"k3"
argument_list|,
literal|"v3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
name|simple
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
name|simple
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"master = {}"
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|master
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"m"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overridden"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|master
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|ConfigFile
argument_list|()
operator|.
name|destFile
argument_list|(
literal|"file1"
argument_list|)
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|PROPERTIES
argument_list|)
operator|.
name|props
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|ConfigFile
argument_list|()
operator|.
name|destFile
argument_list|(
literal|"file2"
argument_list|)
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|XML
argument_list|)
operator|.
name|props
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"k3"
argument_list|,
literal|"v3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
name|master
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
name|master
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|worker
operator|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"worker"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"worker = {}"
argument_list|,
name|worker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|worker
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"worker"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overridden-by-worker"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"timeout"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|worker
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
name|worker
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
name|worker
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverrideExternalConfiguration ()
specifier|public
name|void
name|testOverrideExternalConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|Application
name|orig
init|=
name|ExampleAppJson
operator|.
name|loadResource
argument_list|(
name|EXTERNAL_JSON_1
argument_list|)
decl_stmt|;
name|Configuration
name|global
init|=
name|orig
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|global
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|orig
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|simple
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|simple
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|master
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|master
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"is-overridden"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g3"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|other
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"other"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|other
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// load the external application
name|SliderFileSystem
name|sfs
init|=
name|createNiceMock
argument_list|(
name|SliderFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|createNiceMock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockFs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|buildClusterDirPath
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"cluster_dir_path"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|sfs
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Application
name|ext
init|=
name|ExampleAppJson
operator|.
name|loadResource
argument_list|(
name|APP_JSON
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|ext
argument_list|,
name|sfs
argument_list|,
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|sfs
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
comment|// perform the resolution on original application
name|JsonSerDeser
argument_list|<
name|Application
argument_list|>
name|jsonSerDeser
init|=
name|createNiceMock
argument_list|(
name|JsonSerDeser
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockFs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|sfs
operator|.
name|buildClusterDirPath
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"cluster_dir_path"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ext
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|sfs
argument_list|,
name|mockFs
argument_list|,
name|jsonSerDeser
argument_list|)
expr_stmt|;
name|ServiceApiUtil
operator|.
name|setJsonSerDeser
argument_list|(
name|jsonSerDeser
argument_list|)
expr_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveApplication
argument_list|(
name|orig
argument_list|,
name|sfs
argument_list|,
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|global
operator|=
name|orig
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|global
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|orig
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|simple
operator|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|simple
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|simple
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|simple
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"60"
argument_list|,
name|simple
operator|.
name|getProperty
argument_list|(
literal|"internal.chaos.monkey.interval.seconds"
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|master
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"512M"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"jvm.heapsize"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overridden"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"is-overridden"
argument_list|,
name|master
operator|.
name|getProperty
argument_list|(
literal|"g3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"60"
argument_list|,
name|simple
operator|.
name|getProperty
argument_list|(
literal|"internal.chaos.monkey.interval.seconds"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|worker
init|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"worker"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"worker = {}"
argument_list|,
name|worker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|worker
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"512M"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"jvm.heapsize"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overridden-by-worker"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"g2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"60"
argument_list|,
name|worker
operator|.
name|getProperty
argument_list|(
literal|"internal.chaos.monkey.interval.seconds"
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|=
name|orig
operator|.
name|getComponent
argument_list|(
literal|"other"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|other
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeIntervalLoading ()
specifier|public
name|void
name|testTimeIntervalLoading
parameter_list|()
throws|throws
name|Throwable
block|{
name|Application
name|orig
init|=
name|ExampleAppJson
operator|.
name|loadResource
argument_list|(
name|APP_JSON
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|orig
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|long
name|s
init|=
name|conf
operator|.
name|getPropertyLong
argument_list|(
name|CHAOS_MONKEY_INTERVAL
operator|+
name|SliderUtils
operator|.
name|SECONDS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|long
name|monkeyInterval
init|=
name|SliderUtils
operator|.
name|getTimeRange
argument_list|(
name|conf
argument_list|,
name|CHAOS_MONKEY_INTERVAL
argument_list|,
name|DEFAULT_CHAOS_MONKEY_INTERVAL_DAYS
argument_list|,
name|DEFAULT_CHAOS_MONKEY_INTERVAL_HOURS
argument_list|,
name|DEFAULT_CHAOS_MONKEY_INTERVAL_MINUTES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|60L
argument_list|,
name|monkeyInterval
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

