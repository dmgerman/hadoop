begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A source of commands, with the goal being to allow for adding different  * implementations for different platforms  */
end_comment

begin_class
DECL|class|ProcessCommandFactory
specifier|public
class|class
name|ProcessCommandFactory
block|{
DECL|method|ProcessCommandFactory ()
specifier|protected
name|ProcessCommandFactory
parameter_list|()
block|{   }
comment|/**    * The command to list a directory    * @param dir directory    * @return commands    */
DECL|method|ls (File dir)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|ls
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commands
decl_stmt|;
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|commands
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ls"
argument_list|,
literal|"-1"
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commands
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cmd"
argument_list|,
literal|"/c"
argument_list|,
literal|"dir"
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
comment|/**    * Echo some text to stdout    * @param text text    * @return commands    */
DECL|method|echo (String text)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|echo
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|commands
return|;
block|}
comment|/**    * print env variables    * @return commands    */
DECL|method|env ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|env
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commands
decl_stmt|;
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|commands
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"env"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commands
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cmd"
argument_list|,
literal|"/c"
argument_list|,
literal|"set"
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
comment|/**    * execute a command that returns with an error code that will    * be converted into a number    * @return commands    */
DECL|method|exitFalse ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|exitFalse
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|commands
return|;
block|}
comment|/**    * Create a process command factory for this OS    * @return    */
DECL|method|createProcessCommandFactory ()
specifier|public
specifier|static
name|ProcessCommandFactory
name|createProcessCommandFactory
parameter_list|()
block|{
return|return
operator|new
name|ProcessCommandFactory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

