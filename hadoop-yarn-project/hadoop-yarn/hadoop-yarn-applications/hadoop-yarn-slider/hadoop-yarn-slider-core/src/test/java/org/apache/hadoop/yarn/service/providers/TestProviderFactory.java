begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.providers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|defaultImpl
operator|.
name|DefaultClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|defaultImpl
operator|.
name|DefaultProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|defaultImpl
operator|.
name|DefaultProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|docker
operator|.
name|DockerClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|docker
operator|.
name|DockerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|docker
operator|.
name|DockerProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|tarball
operator|.
name|TarballClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|tarball
operator|.
name|TarballProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|tarball
operator|.
name|TarballProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Artifact
operator|.
name|TypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test provider factories.  */
end_comment

begin_class
DECL|class|TestProviderFactory
specifier|public
class|class
name|TestProviderFactory
block|{
annotation|@
name|Test
DECL|method|testDockerFactory ()
specifier|public
name|void
name|testDockerFactory
parameter_list|()
throws|throws
name|Throwable
block|{
name|ProviderFactory
name|factory
init|=
name|ProviderFactory
operator|.
name|createSliderProviderFactory
argument_list|(
operator|new
name|Artifact
argument_list|()
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|DOCKER
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|DockerProviderFactory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|.
name|createClientProvider
argument_list|()
operator|instanceof
name|DockerClientProvider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|.
name|createServerProvider
argument_list|()
operator|instanceof
name|DockerProviderService
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ProviderFactory
operator|.
name|getProviderService
argument_list|(
operator|new
name|Artifact
argument_list|()
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|DOCKER
argument_list|)
argument_list|)
operator|instanceof
name|DockerProviderService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTarballFactory ()
specifier|public
name|void
name|testTarballFactory
parameter_list|()
throws|throws
name|Throwable
block|{
name|ProviderFactory
name|factory
init|=
name|ProviderFactory
operator|.
name|createSliderProviderFactory
argument_list|(
operator|new
name|Artifact
argument_list|()
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|TARBALL
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|TarballProviderFactory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|.
name|createClientProvider
argument_list|()
operator|instanceof
name|TarballClientProvider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|.
name|createServerProvider
argument_list|()
operator|instanceof
name|TarballProviderService
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ProviderFactory
operator|.
name|getProviderService
argument_list|(
operator|new
name|Artifact
argument_list|()
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|TARBALL
argument_list|)
argument_list|)
operator|instanceof
name|TarballProviderService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultFactory ()
specifier|public
name|void
name|testDefaultFactory
parameter_list|()
throws|throws
name|Throwable
block|{
name|ProviderFactory
name|factory
init|=
name|ProviderFactory
operator|.
name|createSliderProviderFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|DefaultProviderFactory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|.
name|createClientProvider
argument_list|()
operator|instanceof
name|DefaultClientProvider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|.
name|createServerProvider
argument_list|()
operator|instanceof
name|DefaultProviderService
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ProviderFactory
operator|.
name|getProviderService
argument_list|(
literal|null
argument_list|)
operator|instanceof
name|DefaultProviderService
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

