begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.mock
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Models the cluster itself: a set of mock cluster nodes.  *  * nodes retain the slot model with a limit of 2^8 slots/host -this  * lets us use 24 bits of the container ID for hosts, and so simulate  * larger hosts.  *  * upper 32: index into nodes in the cluster  * NodeID hostname is the index in hex format; this is parsed down to the index  * to resolve the host  *  * Important: container IDs will be reused as containers get recycled. This  * is not an attempt to realistically mimic a real YARN cluster, just  * simulate it enough for Slider to explore node re-use and its handling  * of successful and unsuccessful allocations.  *  * There is little or no checking of valid parameters in here -this is for  * test use, not production.  */
end_comment

begin_class
DECL|class|MockYarnCluster
specifier|public
class|class
name|MockYarnCluster
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockYarnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clusterSize
specifier|private
specifier|final
name|int
name|clusterSize
decl_stmt|;
DECL|field|containersPerNode
specifier|private
specifier|final
name|int
name|containersPerNode
decl_stmt|;
DECL|field|nodes
specifier|private
name|MockYarnClusterNode
index|[]
name|nodes
decl_stmt|;
DECL|method|MockYarnCluster (int clusterSize, int containersPerNode)
name|MockYarnCluster
parameter_list|(
name|int
name|clusterSize
parameter_list|,
name|int
name|containersPerNode
parameter_list|)
block|{
name|this
operator|.
name|clusterSize
operator|=
name|clusterSize
expr_stmt|;
name|this
operator|.
name|containersPerNode
operator|=
name|containersPerNode
expr_stmt|;
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getClusterSize ()
specifier|public
name|int
name|getClusterSize
parameter_list|()
block|{
return|return
name|clusterSize
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MockYarnCluster size="
operator|+
name|clusterSize
operator|+
literal|", capacity="
operator|+
name|totalClusterCapacity
argument_list|()
operator|+
literal|", in use="
operator|+
name|containersInUse
argument_list|()
return|;
block|}
comment|/**    * Build the cluster.    */
DECL|method|build ()
specifier|private
name|void
name|build
parameter_list|()
block|{
name|nodes
operator|=
operator|new
name|MockYarnClusterNode
index|[
name|clusterSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterSize
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
operator|new
name|MockYarnClusterNode
argument_list|(
name|i
argument_list|,
name|containersPerNode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|nodeAt (int index)
specifier|public
name|MockYarnClusterNode
name|nodeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|nodes
index|[
name|index
index|]
return|;
block|}
DECL|method|lookup (String hostname)
name|MockYarnClusterNode
name|lookup
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|hostname
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
name|nodeAt
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|lookup (NodeId nodeId)
name|MockYarnClusterNode
name|lookup
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
DECL|method|lookupOwner (ContainerId cid)
name|MockYarnClusterNode
name|lookupOwner
parameter_list|(
name|ContainerId
name|cid
parameter_list|)
block|{
return|return
name|nodeAt
argument_list|(
name|extractHost
argument_list|(
name|cid
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Release a container: return true if it was actually in use.    * @param cid container ID    * @return the container released    */
DECL|method|release (ContainerId cid)
name|MockYarnClusterContainer
name|release
parameter_list|(
name|ContainerId
name|cid
parameter_list|)
block|{
name|int
name|host
init|=
name|extractHost
argument_list|(
name|cid
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|MockYarnClusterContainer
name|inUse
init|=
name|nodeAt
argument_list|(
name|host
argument_list|)
operator|.
name|release
argument_list|(
name|cid
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Released {} inuse={}"
argument_list|,
name|cid
argument_list|,
name|inUse
argument_list|)
expr_stmt|;
return|return
name|inUse
return|;
block|}
DECL|method|containersInUse ()
name|int
name|containersInUse
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MockYarnClusterNode
name|it
range|:
name|nodes
control|)
block|{
name|count
operator|+=
name|it
operator|.
name|containersInUse
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Containers free.    * @return    */
DECL|method|containersFree ()
name|int
name|containersFree
parameter_list|()
block|{
return|return
name|totalClusterCapacity
argument_list|()
operator|-
name|containersInUse
argument_list|()
return|;
block|}
DECL|method|totalClusterCapacity ()
name|int
name|totalClusterCapacity
parameter_list|()
block|{
return|return
name|clusterSize
operator|*
name|containersPerNode
return|;
block|}
comment|/**    * Reset all the containers.    */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|MockYarnClusterNode
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Bulk allocate the specific number of containers on a range of the cluster.    * @param startNode start of the range    * @param endNode end of the range    * @param count count    * @return the number actually allocated -it will be less the count supplied    * if the node was full    */
DECL|method|bulkAllocate (int startNode, int endNode, int count)
specifier|public
name|int
name|bulkAllocate
parameter_list|(
name|int
name|startNode
parameter_list|,
name|int
name|endNode
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startNode
init|;
name|i
operator|<=
name|endNode
condition|;
name|i
operator|++
control|)
block|{
name|total
operator|+=
name|nodeAt
argument_list|(
name|i
argument_list|)
operator|.
name|bulkAllocate
argument_list|(
name|count
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Get the list of node reports. These are not cloned; updates will persist    * in the nodemap    * @return current node report list    */
DECL|method|getNodeReports ()
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|()
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MockYarnClusterNode
name|n
range|:
name|nodes
control|)
block|{
name|reports
operator|.
name|add
argument_list|(
name|n
operator|.
name|nodeReport
argument_list|)
expr_stmt|;
block|}
return|return
name|reports
return|;
block|}
comment|/**    * Model cluster nodes on the simpler "slot" model than the YARN-era    * resource allocation model. Why? Easier to implement scheduling.    * Of course, if someone does want to implement the full process...    *    */
DECL|class|MockYarnClusterNode
specifier|public
specifier|static
class|class
name|MockYarnClusterNode
block|{
DECL|field|nodeIndex
specifier|private
specifier|final
name|int
name|nodeIndex
decl_stmt|;
DECL|field|hostname
specifier|private
specifier|final
name|String
name|hostname
decl_stmt|;
DECL|field|labels
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|MockNodeId
name|nodeId
decl_stmt|;
DECL|field|containers
specifier|private
specifier|final
name|MockYarnClusterContainer
index|[]
name|containers
decl_stmt|;
DECL|field|offline
specifier|private
name|boolean
name|offline
decl_stmt|;
DECL|field|nodeReport
specifier|private
name|NodeReport
name|nodeReport
decl_stmt|;
DECL|method|MockYarnClusterNode (int index, int size)
specifier|public
name|MockYarnClusterNode
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|nodeIndex
operator|=
name|index
expr_stmt|;
name|hostname
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"%08x"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|nodeId
operator|=
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|containers
operator|=
operator|new
name|MockYarnClusterContainer
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cid
init|=
name|makeCid
argument_list|(
name|index
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|MockContainerId
name|mci
init|=
operator|new
name|MockContainerId
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|containers
index|[
name|i
index|]
operator|=
operator|new
name|MockYarnClusterContainer
argument_list|(
name|mci
argument_list|)
expr_stmt|;
block|}
name|nodeReport
operator|=
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
name|hostname
argument_list|,
name|nodeId
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
comment|/**      * Look up a container.      * @param containerId      * @return      */
DECL|method|lookup (int containerId)
specifier|public
name|MockYarnClusterContainer
name|lookup
parameter_list|(
name|int
name|containerId
parameter_list|)
block|{
return|return
name|containers
index|[
name|extractContainer
argument_list|(
name|containerId
argument_list|)
index|]
return|;
block|}
comment|/**      * Go offline; release all containers.      */
DECL|method|goOffline ()
specifier|public
name|void
name|goOffline
parameter_list|()
block|{
if|if
condition|(
operator|!
name|offline
condition|)
block|{
name|offline
operator|=
literal|true
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|goOnline ()
specifier|public
name|void
name|goOnline
parameter_list|()
block|{
name|offline
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Allocate a container -if one is available.      * @return the container or null for none free      * -or the cluster node is offline      */
DECL|method|allocate ()
specifier|public
name|MockYarnClusterContainer
name|allocate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|offline
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MockYarnClusterContainer
name|c
init|=
name|containers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|busy
condition|)
block|{
name|c
operator|.
name|busy
operator|=
literal|true
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Bulk allocate the specific number of containers.      * @param count count      * @return the list actually allocated -it will be less the count supplied      * if the node was full      */
DECL|method|bulkAllocate (int count)
specifier|public
name|List
argument_list|<
name|MockYarnClusterContainer
argument_list|>
name|bulkAllocate
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|List
argument_list|<
name|MockYarnClusterContainer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|MockYarnClusterContainer
name|allocation
init|=
name|allocate
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocation
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|result
operator|.
name|add
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Release a container.      * @param cid container ID      * @return the container if the container was busy before the release      */
DECL|method|release (long cid)
specifier|public
name|MockYarnClusterContainer
name|release
parameter_list|(
name|long
name|cid
parameter_list|)
block|{
name|MockYarnClusterContainer
name|container
init|=
name|containers
index|[
name|extractContainer
argument_list|(
name|cid
argument_list|)
index|]
decl_stmt|;
name|boolean
name|b
init|=
name|container
operator|.
name|busy
decl_stmt|;
name|container
operator|.
name|busy
operator|=
literal|false
expr_stmt|;
return|return
name|b
condition|?
name|container
else|:
literal|null
return|;
block|}
DECL|method|httpAddress ()
specifier|public
name|String
name|httpAddress
parameter_list|()
block|{
return|return
literal|"http://$hostname/"
return|;
block|}
comment|/**      * Reset all the containers.      */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|MockYarnClusterContainer
name|cont
range|:
name|containers
control|)
block|{
name|cont
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|containersInUse ()
specifier|public
name|int
name|containersInUse
parameter_list|()
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MockYarnClusterContainer
name|cont
range|:
name|containers
control|)
block|{
name|c
operator|+=
name|cont
operator|.
name|busy
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
DECL|method|containersFree ()
specifier|public
name|int
name|containersFree
parameter_list|()
block|{
return|return
name|containers
operator|.
name|length
operator|-
name|containersInUse
argument_list|()
return|;
block|}
block|}
comment|/**    * Cluster container.    */
DECL|class|MockYarnClusterContainer
specifier|public
specifier|static
class|class
name|MockYarnClusterContainer
block|{
DECL|field|cid
specifier|private
name|MockContainerId
name|cid
decl_stmt|;
DECL|field|busy
specifier|private
name|boolean
name|busy
decl_stmt|;
DECL|method|MockYarnClusterContainer (MockContainerId cid)
name|MockYarnClusterContainer
parameter_list|(
name|MockContainerId
name|cid
parameter_list|)
block|{
name|this
operator|.
name|cid
operator|=
name|cid
expr_stmt|;
block|}
DECL|method|getCid ()
specifier|public
name|MockContainerId
name|getCid
parameter_list|()
block|{
return|return
name|cid
return|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|busy
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|makeCid (int hostIndex, int containerIndex)
specifier|public
specifier|static
name|int
name|makeCid
parameter_list|(
name|int
name|hostIndex
parameter_list|,
name|int
name|containerIndex
parameter_list|)
block|{
return|return
operator|(
name|hostIndex
operator|<<
literal|8
operator|)
operator||
name|containerIndex
operator|&
literal|0xff
return|;
block|}
DECL|method|extractHost (long cid)
specifier|public
specifier|static
specifier|final
name|int
name|extractHost
parameter_list|(
name|long
name|cid
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|cid
operator|>>>
literal|8
operator|)
operator|&
literal|0xffff
argument_list|)
return|;
block|}
DECL|method|extractContainer (long cid)
specifier|public
specifier|static
specifier|final
name|int
name|extractContainer
parameter_list|(
name|long
name|cid
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|cid
operator|&
literal|0xff
argument_list|)
return|;
block|}
block|}
end_class

end_unit

