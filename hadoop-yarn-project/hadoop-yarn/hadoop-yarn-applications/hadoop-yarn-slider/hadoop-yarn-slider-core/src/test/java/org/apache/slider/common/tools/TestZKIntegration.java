begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|MicroZookeeperServiceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|zk
operator|.
name|ZKIntegration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|KeysForTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|YarnZKMiniClusterTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test ZK integration.  */
end_comment

begin_class
DECL|class|TestZKIntegration
specifier|public
class|class
name|TestZKIntegration
extends|extends
name|YarnZKMiniClusterTestBase
implements|implements
name|KeysForTests
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestZKIntegration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|USER
specifier|public
specifier|static
specifier|final
name|String
name|USER
init|=
name|KeysForTests
operator|.
name|USERNAME
decl_stmt|;
DECL|field|CONNECT_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|CONNECT_TIMEOUT
init|=
literal|5000
decl_stmt|;
DECL|field|zki
specifier|private
name|ZKIntegration
name|zki
decl_stmt|;
annotation|@
name|Before
DECL|method|createCluster ()
specifier|public
name|void
name|createCluster
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|methodName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|File
name|zkdir
init|=
operator|new
name|File
argument_list|(
literal|"target/zk/${name}"
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|zkdir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MicroZookeeperServiceKeys
operator|.
name|KEY_ZKSERVICE_DIR
argument_list|,
name|zkdir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|createMicroZKCluster
argument_list|(
literal|"-"
operator|+
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|closeZKI ()
specifier|public
name|void
name|closeZKI
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|zki
operator|!=
literal|null
condition|)
block|{
name|zki
operator|.
name|close
argument_list|()
expr_stmt|;
name|zki
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|initZKI ()
specifier|public
name|ZKIntegration
name|initZKI
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|zki
operator|=
name|createZKIntegrationInstance
argument_list|(
name|getZKBinding
argument_list|()
argument_list|,
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|zki
return|;
block|}
comment|//@Test
DECL|method|testListUserClustersWithoutAnyClusters ()
specifier|public
name|void
name|testListUserClustersWithoutAnyClusters
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertHasZKCluster
argument_list|()
expr_stmt|;
name|initZKI
argument_list|()
expr_stmt|;
name|String
name|userPath
init|=
name|ZKIntegration
operator|.
name|mkSliderUserPath
argument_list|(
name|USER
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|this
operator|.
name|zki
operator|.
name|getClusters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|clusters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testListUserClustersWithOneCluster ()
specifier|public
name|void
name|testListUserClustersWithOneCluster
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertHasZKCluster
argument_list|()
expr_stmt|;
name|initZKI
argument_list|()
expr_stmt|;
name|String
name|userPath
init|=
name|ZKIntegration
operator|.
name|mkSliderUserPath
argument_list|(
name|USER
argument_list|)
decl_stmt|;
name|String
name|fullPath
init|=
name|zki
operator|.
name|createPath
argument_list|(
name|userPath
argument_list|,
literal|"/cluster-"
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ephemeral path {}"
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|zki
operator|.
name|getClusters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clusters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|endsWith
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testListUserClustersWithTwoCluster ()
specifier|public
name|void
name|testListUserClustersWithTwoCluster
parameter_list|()
throws|throws
name|Throwable
block|{
name|initZKI
argument_list|()
expr_stmt|;
name|String
name|userPath
init|=
name|ZKIntegration
operator|.
name|mkSliderUserPath
argument_list|(
name|USER
argument_list|)
decl_stmt|;
name|String
name|c1
init|=
name|createEphemeralChild
argument_list|(
name|zki
argument_list|,
name|userPath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ephemeral path $c1"
argument_list|)
expr_stmt|;
name|String
name|c2
init|=
name|createEphemeralChild
argument_list|(
name|zki
argument_list|,
name|userPath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ephemeral path $c2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|zki
operator|.
name|getClusters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clusters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|c1
operator|.
name|endsWith
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|c2
operator|.
name|endsWith
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|c1
operator|.
name|endsWith
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|c2
operator|.
name|endsWith
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testCreateAndDeleteDefaultZKPath ()
specifier|public
name|void
name|testCreateAndDeleteDefaultZKPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockSliderClient
name|client
init|=
operator|new
name|MockSliderClient
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|client
operator|.
name|createZookeeperNodeInner
argument_list|(
literal|"cl1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|zki
operator|=
name|client
operator|.
name|getLastZKIntegration
argument_list|()
expr_stmt|;
name|String
name|zkPath
init|=
name|ZKIntegration
operator|.
name|mkClusterPath
argument_list|(
name|USER
argument_list|,
literal|"cl1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"zkPath must be as expected"
argument_list|,
name|zkPath
argument_list|,
literal|"/services/slider/users/"
operator|+
name|USER
operator|+
literal|"/cl1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|zkPath
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"ZKIntegration should be null."
argument_list|,
name|zki
argument_list|)
expr_stmt|;
name|zki
operator|=
name|createZKIntegrationInstance
argument_list|(
name|getZKBinding
argument_list|()
argument_list|,
literal|"cl1"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zki
operator|.
name|exists
argument_list|(
name|zkPath
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|client
operator|.
name|createZookeeperNodeInner
argument_list|(
literal|"cl1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|zki
operator|=
name|client
operator|.
name|getLastZKIntegration
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|zki
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zkPath must be as expected"
argument_list|,
name|zkPath
argument_list|,
literal|"/services/slider/users/"
operator|+
name|USER
operator|+
literal|"/cl1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|zkPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zki
operator|.
name|exists
argument_list|(
name|zkPath
argument_list|)
argument_list|)
expr_stmt|;
name|zki
operator|.
name|createPath
argument_list|(
name|zkPath
argument_list|,
literal|"/cn"
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zki
operator|.
name|exists
argument_list|(
name|zkPath
operator|+
literal|"/cn"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|deleteZookeeperNode
argument_list|(
literal|"cl1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zki
operator|.
name|exists
argument_list|(
name|zkPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createEphemeralChild (ZKIntegration zki, String userPath)
specifier|public
specifier|static
name|String
name|createEphemeralChild
parameter_list|(
name|ZKIntegration
name|zki
parameter_list|,
name|String
name|userPath
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zki
operator|.
name|createPath
argument_list|(
name|userPath
argument_list|,
literal|"/cluster-"
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
return|;
block|}
comment|/**    * Test slider client that overriddes ZK client.    */
DECL|class|MockSliderClient
specifier|public
class|class
name|MockSliderClient
extends|extends
name|SliderClient
block|{
DECL|field|zki
specifier|private
name|ZKIntegration
name|zki
decl_stmt|;
annotation|@
name|Override
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|USER
return|;
block|}
annotation|@
name|Override
DECL|method|getZkClient (String clusterName, String user)
specifier|protected
name|ZKIntegration
name|getZkClient
parameter_list|(
name|String
name|clusterName
parameter_list|,
name|String
name|user
parameter_list|)
block|{
try|try
block|{
name|zki
operator|=
name|createZKIntegrationInstance
argument_list|(
name|getZKBinding
argument_list|()
argument_list|,
name|clusterName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"creating ZKIntergration threw an exception"
argument_list|)
expr_stmt|;
block|}
return|return
name|zki
return|;
block|}
annotation|@
name|Override
DECL|method|getConfig ()
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
DECL|method|getLastZKIntegration ()
specifier|public
name|ZKIntegration
name|getLastZKIntegration
parameter_list|()
block|{
return|return
name|zki
return|;
block|}
block|}
block|}
end_class

end_unit

