begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|avro
operator|.
name|NewerFilesFirst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|avro
operator|.
name|RoleHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Test role history rw ordering.  */
end_comment

begin_class
DECL|class|TestRoleHistoryRWOrdering
specifier|public
class|class
name|TestRoleHistoryRWOrdering
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRoleHistoryRWOrdering
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|paths
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|pathlist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hdfs://localhost/history-0406c.json"
argument_list|,
literal|"hdfs://localhost/history-5fffa.json"
argument_list|,
literal|"hdfs://localhost/history-0001a.json"
argument_list|,
literal|"hdfs://localhost/history-0001f.json"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|h0406c
specifier|private
name|Path
name|h0406c
init|=
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|h5fffa
specifier|private
name|Path
name|h5fffa
init|=
name|paths
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|h0001a
specifier|private
name|Path
name|h0001a
init|=
name|paths
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
DECL|method|TestRoleHistoryRWOrdering ()
specifier|public
name|TestRoleHistoryRWOrdering
parameter_list|()
throws|throws
name|URISyntaxException
block|{   }
DECL|method|pathlist (List<String> pathnames)
name|List
argument_list|<
name|Path
argument_list|>
name|pathlist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|pathnames
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|pathnames
control|)
block|{
name|pathList
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pathList
return|;
block|}
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestHistoryRWOrdering"
return|;
block|}
comment|/**    * This tests regexp pattern matching. It uses the current time so isn't    * repeatable -but it does test a wider range of values in the process    * @throws Throwable    */
comment|//@Test
DECL|method|testPatternRoundTrip ()
specifier|public
name|void
name|testPatternRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"test pattern matching of names"
argument_list|)
expr_stmt|;
name|long
name|value
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|String
operator|.
name|format
argument_list|(
name|SliderKeys
operator|.
name|HISTORY_FILENAME_CREATION_PATTERN
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|String
name|matchpattern
init|=
name|SliderKeys
operator|.
name|HISTORY_FILENAME_MATCH_PATTERN
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|matchpattern
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No match for pattern $matchpattern in $name"
argument_list|)
throw|;
block|}
block|}
comment|//@Test
DECL|method|testWriteSequenceReadData ()
specifier|public
name|void
name|testWriteSequenceReadData
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"test that if multiple entries are written, the newest is picked"
operator|+
literal|" up"
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
name|MockFactory
operator|.
name|ROLES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|roleHistory
operator|.
name|onStart
argument_list|(
name|fs
argument_list|,
name|historyPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
literal|"localhost"
decl_stmt|;
name|NodeInstance
name|instance
init|=
name|roleHistory
operator|.
name|getOrCreateNodeInstance
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|NodeEntry
name|ne1
init|=
name|instance
operator|.
name|getOrCreate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ne1
operator|.
name|setLastUsed
argument_list|(
literal|0xf00d
argument_list|)
expr_stmt|;
name|Path
name|history1
init|=
name|roleHistory
operator|.
name|saveHistory
argument_list|(
name|time
operator|++
argument_list|)
decl_stmt|;
name|Path
name|history2
init|=
name|roleHistory
operator|.
name|saveHistory
argument_list|(
name|time
operator|++
argument_list|)
decl_stmt|;
name|Path
name|history3
init|=
name|roleHistory
operator|.
name|saveHistory
argument_list|(
name|time
argument_list|)
decl_stmt|;
comment|//inject a later file with a different name
name|sliderFileSystem
operator|.
name|cat
argument_list|(
operator|new
name|Path
argument_list|(
name|historyPath
argument_list|,
literal|"file.json"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"hello,"
operator|+
literal|" world"
argument_list|)
expr_stmt|;
name|RoleHistoryWriter
name|historyWriter
init|=
operator|new
name|RoleHistoryWriter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|entries
init|=
name|historyWriter
operator|.
name|findAllHistoryEntries
argument_list|(
name|fs
argument_list|,
name|historyPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|history3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|history2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|history1
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testPathStructure ()
specifier|public
name|void
name|testPathStructure
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
name|h5fffa
operator|.
name|getName
argument_list|()
argument_list|,
literal|"history-5fffa.json"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testPathnameComparator ()
specifier|public
name|void
name|testPathnameComparator
parameter_list|()
throws|throws
name|Throwable
block|{
name|NewerFilesFirst
name|newerName
init|=
operator|new
name|NewerFilesFirst
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} name is {}"
argument_list|,
name|h5fffa
argument_list|,
name|h5fffa
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} name is {}"
argument_list|,
name|h0406c
argument_list|,
name|h0406c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newerName
operator|.
name|compare
argument_list|(
name|h5fffa
argument_list|,
name|h5fffa
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newerName
operator|.
name|compare
argument_list|(
name|h5fffa
argument_list|,
name|h0406c
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newerName
operator|.
name|compare
argument_list|(
name|h5fffa
argument_list|,
name|h0001a
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newerName
operator|.
name|compare
argument_list|(
name|h0001a
argument_list|,
name|h5fffa
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testPathSort ()
specifier|public
name|void
name|testPathSort
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|paths
argument_list|)
decl_stmt|;
name|RoleHistoryWriter
operator|.
name|sortHistoryPaths
argument_list|(
name|paths2
argument_list|)
expr_stmt|;
name|assertListEquals
argument_list|(
name|paths2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paths
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|paths
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|paths
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

