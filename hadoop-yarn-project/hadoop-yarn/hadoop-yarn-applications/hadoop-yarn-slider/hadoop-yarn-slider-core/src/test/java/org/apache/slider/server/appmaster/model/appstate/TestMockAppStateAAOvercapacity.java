begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test Anti-affine placement with a cluster of size 1.  */
end_comment

begin_class
DECL|class|TestMockAppStateAAOvercapacity
specifier|public
class|class
name|TestMockAppStateAAOvercapacity
extends|extends
name|BaseMockAppStateAATest
implements|implements
name|MockRoles
block|{
DECL|field|NODES
specifier|private
specifier|static
specifier|final
name|int
name|NODES
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
name|NODES
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|assertAllContainersAA ()
name|void
name|assertAllContainersAA
parameter_list|()
block|{
name|assertAllContainersAA
argument_list|(
name|getAaRole
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @throws Throwable    */
comment|//@Test
DECL|method|testOvercapacityRecovery ()
specifier|public
name|void
name|testOvercapacityRecovery
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Ask for 1 more than the no of available nodes;"
operator|+
literal|"verify the state. kill the allocated container and review"
argument_list|)
expr_stmt|;
comment|//more than expected
name|int
name|desired
init|=
literal|3
decl_stmt|;
name|aaRole
operator|.
name|setDesired
argument_list|(
name|desired
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|canPlaceAANodes
argument_list|()
argument_list|)
expr_stmt|;
comment|//first request
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|desired
operator|-
literal|1
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsOut
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// allocate and re-submit
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|submitOperations
argument_list|(
name|operations
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|operationsOut
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
comment|// expect an outstanding AA request to be unsatisfied
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|getRunning
argument_list|()
operator|<
name|aaRole
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|desired
operator|-
literal|1
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|engine
operator|.
name|execute
argument_list|(
name|operations
argument_list|,
name|EMPTY_ID_LIST
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets trigger a failure
name|NodeMap
name|nodemap
init|=
name|cloneNodemap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodemap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|instance
init|=
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|instance
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|AppState
operator|.
name|NodeCompletionResult
name|result
init|=
name|appState
operator|.
name|onCompletedContainer
argument_list|(
name|containerStatus
argument_list|(
name|cid
argument_list|,
name|LauncherExitCodes
operator|.
name|EXIT_TASK_LAUNCH_FAILURE
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containerFailed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|availablePlacements
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|findNodeForNewAAInstance
argument_list|(
name|aaRole
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|availablePlacements
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"expecting a successful review with available placements of "
operator|+
name|availablePlacements
argument_list|)
expr_stmt|;
name|operations
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

