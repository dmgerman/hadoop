begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|JsonSerDeser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|PropertyNamingStrategy
import|;
end_import

begin_class
DECL|class|ServiceTestUtils
specifier|public
class|class
name|ServiceTestUtils
block|{
DECL|field|JSON_SER_DESER
specifier|public
specifier|static
specifier|final
name|JsonSerDeser
argument_list|<
name|Application
argument_list|>
name|JSON_SER_DESER
init|=
operator|new
name|JsonSerDeser
argument_list|<>
argument_list|(
name|Application
operator|.
name|class
argument_list|,
name|PropertyNamingStrategy
operator|.
name|CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES
argument_list|)
decl_stmt|;
comment|// Example service definition
comment|// 2 components, each of which has 2 containers.
DECL|method|createExampleApplication ()
specifier|protected
name|Application
name|createExampleApplication
parameter_list|()
block|{
name|Application
name|exampleApp
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"example-app"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compb"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exampleApp
return|;
block|}
DECL|method|createComponent (String name)
specifier|protected
name|Component
name|createComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|createComponent
argument_list|(
name|name
argument_list|,
literal|2L
argument_list|,
literal|"sleep 1000"
argument_list|)
return|;
block|}
DECL|method|createComponent (String name, long numContainers, String command)
specifier|protected
name|Component
name|createComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|numContainers
parameter_list|,
name|String
name|command
parameter_list|)
block|{
name|Component
name|comp1
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|comp1
operator|.
name|setNumberOfContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|comp1
operator|.
name|setLaunchCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|comp1
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|comp1
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
literal|"128"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setCpus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|comp1
return|;
block|}
block|}
end_class

end_unit

