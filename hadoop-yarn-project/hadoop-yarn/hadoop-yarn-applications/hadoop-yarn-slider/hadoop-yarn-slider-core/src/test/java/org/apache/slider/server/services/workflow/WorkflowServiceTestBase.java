begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Test base for workflow service tests.  */
end_comment

begin_class
DECL|class|WorkflowServiceTestBase
specifier|public
specifier|abstract
class|class
name|WorkflowServiceTestBase
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkflowServiceTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set the timeout for every test    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|15000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|name
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|nameThread ()
specifier|public
name|void
name|nameThread
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"JUnit"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInState (Service service, Service.STATE expected)
specifier|protected
name|void
name|assertInState
parameter_list|(
name|Service
name|service
parameter_list|,
name|Service
operator|.
name|STATE
name|expected
parameter_list|)
block|{
name|Service
operator|.
name|STATE
name|actual
init|=
name|service
operator|.
name|getServiceState
argument_list|()
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|expected
condition|)
block|{
name|fail
argument_list|(
literal|"Service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" in state "
operator|+
name|actual
operator|+
literal|" -expected "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertStopped (Service service)
specifier|protected
name|void
name|assertStopped
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|assertInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
block|}
DECL|method|logState (ServiceParent p)
specifier|protected
name|void
name|logState
parameter_list|(
name|ServiceParent
name|p
parameter_list|)
block|{
name|logService
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|p
operator|.
name|getServices
argument_list|()
control|)
block|{
name|logService
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logService (Service s)
specifier|protected
name|void
name|logService
parameter_list|(
name|Service
name|s
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|failureCause
init|=
name|s
operator|.
name|getFailureCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|failureCause
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed in state {} with {}"
argument_list|,
name|s
operator|.
name|getFailureState
argument_list|()
argument_list|,
name|failureCause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Init and start a service    * @param svc the service    * @return the service    */
DECL|method|run (S svc)
specifier|protected
parameter_list|<
name|S
extends|extends
name|Service
parameter_list|>
name|S
name|run
parameter_list|(
name|S
name|svc
parameter_list|)
block|{
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|svc
return|;
block|}
comment|/**    * Handler for callable events    */
DECL|class|CallableHandler
specifier|public
specifier|static
class|class
name|CallableHandler
implements|implements
name|Callable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|notified
specifier|public
specifier|volatile
name|boolean
name|notified
init|=
literal|false
decl_stmt|;
DECL|field|result
specifier|public
specifier|final
name|String
name|result
decl_stmt|;
DECL|method|CallableHandler (String result)
specifier|public
name|CallableHandler
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"CallableHandler::call"
argument_list|)
expr_stmt|;
name|notified
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * Assert that a string is in an output list. Fails fast if the output    * list is empty    * @param text text to scan for    * @param output list of output lines.    */
DECL|method|assertStringInOutput (String text, List<String> output)
specifier|public
name|void
name|assertStringInOutput
parameter_list|(
name|String
name|text
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|output
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Empty output list"
argument_list|,
operator|!
name|output
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|output
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|String
name|message
init|=
literal|"Text \""
operator|+
name|text
operator|+
literal|"\" not found in "
operator|+
name|output
operator|.
name|size
argument_list|()
operator|+
literal|" lines\n"
decl_stmt|;
name|fail
argument_list|(
name|message
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

