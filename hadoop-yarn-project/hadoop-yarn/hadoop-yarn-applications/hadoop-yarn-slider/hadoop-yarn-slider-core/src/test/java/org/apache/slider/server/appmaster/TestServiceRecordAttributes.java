begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestServiceRecordAttributes
specifier|public
class|class
name|TestServiceRecordAttributes
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testAppConfigProvidedServiceRecordAttributes ()
specifier|public
name|void
name|testAppConfigProvidedServiceRecordAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"slider.some.arbitrary.option"
argument_list|,
literal|"arbitrary value"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"service.record.attribute.one_attribute"
argument_list|,
literal|"one_attribute_value"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"service.record.attribute.second_attribute"
argument_list|,
literal|"second_attribute_value"
argument_list|)
expr_stmt|;
name|MapOperations
name|serviceProps
init|=
operator|new
name|MapOperations
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_AM
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|options
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"some.component.attribute"
argument_list|,
literal|"component_attribute_value"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"service.record.attribute.component_attribute"
argument_list|,
literal|"component_attribute_value"
argument_list|)
expr_stmt|;
name|MapOperations
name|compProps
init|=
operator|new
name|MapOperations
argument_list|(
literal|"TEST_COMP"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|SliderAppMaster
name|appMaster
init|=
operator|new
name|SliderAppMaster
argument_list|()
decl_stmt|;
name|ServiceRecord
name|appServiceRecord
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|appMaster
operator|.
name|setProvidedServiceRecordAttributes
argument_list|(
name|serviceProps
argument_list|,
name|appServiceRecord
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"property should not be attribute"
argument_list|,
name|appServiceRecord
operator|.
name|get
argument_list|(
literal|"slider.some.arbitrary.option"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong value"
argument_list|,
literal|"one_attribute_value"
argument_list|,
name|appServiceRecord
operator|.
name|get
argument_list|(
literal|"one_attribute"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong value"
argument_list|,
literal|"second_attribute_value"
argument_list|,
name|appServiceRecord
operator|.
name|get
argument_list|(
literal|"second_attribute"
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceRecord
name|compServiceRecord
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|appMaster
operator|.
name|setProvidedServiceRecordAttributes
argument_list|(
name|compProps
argument_list|,
name|compServiceRecord
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"should not be attribute"
argument_list|,
name|compServiceRecord
operator|.
name|get
argument_list|(
literal|"some.component.attribute"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong value"
argument_list|,
literal|"component_attribute_value"
argument_list|,
name|compServiceRecord
operator|.
name|get
argument_list|(
literal|"component_attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

