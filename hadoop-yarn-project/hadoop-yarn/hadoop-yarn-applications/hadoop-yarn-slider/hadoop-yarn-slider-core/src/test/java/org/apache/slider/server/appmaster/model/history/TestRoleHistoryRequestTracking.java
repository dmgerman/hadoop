begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAllocationOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|OutstandingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test the RH availability list and request tracking: that hosts  * get removed and added.  */
end_comment

begin_class
DECL|class|TestRoleHistoryRequestTracking
specifier|public
class|class
name|TestRoleHistoryRequestTracking
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRoleHistoryRequestTracking
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|roleName
specifier|private
name|String
name|roleName
init|=
literal|"test"
decl_stmt|;
DECL|field|age1Active4
specifier|private
name|NodeInstance
name|age1Active4
decl_stmt|;
DECL|field|age2Active2
specifier|private
name|NodeInstance
name|age2Active2
decl_stmt|;
DECL|field|age2Active0
specifier|private
name|NodeInstance
name|age2Active0
decl_stmt|;
DECL|field|age3Active0
specifier|private
name|NodeInstance
name|age3Active0
decl_stmt|;
DECL|field|age4Active1
specifier|private
name|NodeInstance
name|age4Active1
decl_stmt|;
DECL|field|roleHistory
specifier|private
name|RoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
name|MockFactory
operator|.
name|ROLES
argument_list|)
decl_stmt|;
comment|// 1MB, 1 vcore
DECL|field|resource
specifier|private
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|roleStatus
specifier|private
name|RoleStatus
name|roleStatus
decl_stmt|;
DECL|method|TestRoleHistoryRequestTracking ()
specifier|public
name|TestRoleHistoryRequestTracking
parameter_list|()
throws|throws
name|BadConfigException
block|{   }
DECL|method|requestContainer (RoleStatus rs)
name|AMRMClient
operator|.
name|ContainerRequest
name|requestContainer
parameter_list|(
name|RoleStatus
name|rs
parameter_list|)
block|{
return|return
name|roleHistory
operator|.
name|requestContainerForRole
argument_list|(
name|rs
argument_list|)
operator|.
name|getIssuedRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestRoleHistoryAvailableList"
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|age1Active4
operator|=
name|nodeInstance
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age2Active2
operator|=
name|nodeInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|age2Active0
operator|=
name|nodeInstance
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age3Active0
operator|=
name|nodeInstance
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age4Active1
operator|=
name|nodeInstance
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|insert
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active2
argument_list|,
name|age2Active0
argument_list|,
name|age4Active1
argument_list|,
name|age1Active4
argument_list|,
name|age3Active0
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|buildRecentNodeLists
argument_list|()
expr_stmt|;
name|roleStatus
operator|=
name|getRole0Status
argument_list|()
expr_stmt|;
name|roleStatus
operator|.
name|setResourceRequirements
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testAvailableListBuiltForRoles ()
specifier|public
name|void
name|testAvailableListBuiltForRoles
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|available0
init|=
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertListEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age3Active0
argument_list|,
name|age2Active0
argument_list|)
argument_list|,
name|available0
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRequestedNodeOffList ()
specifier|public
name|void
name|testRequestedNodeOffList
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
name|ni
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|age3Active0
argument_list|,
name|ni
argument_list|)
expr_stmt|;
name|assertListEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active0
argument_list|)
argument_list|,
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|requestInstanceOnNode
argument_list|(
name|ni
argument_list|,
name|roleStatus
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRequestedNodeOffListWithFailures ()
specifier|public
name|void
name|testRequestedNodeOffListWithFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFalse
argument_list|(
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|NodeEntry
name|age3role0
init|=
name|recordAsFailed
argument_list|(
name|age3Active0
argument_list|,
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|age3Active0
operator|.
name|isConsideredUnreliable
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
name|roleStatus
operator|.
name|getNodeFailureThreshold
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|recordAsFailed
argument_list|(
name|age2Active0
argument_list|,
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|age2Active0
operator|.
name|isConsideredUnreliable
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
name|roleStatus
operator|.
name|getNodeFailureThreshold
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// expect to get a null node back
name|NodeInstance
name|ni
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ni
argument_list|)
expr_stmt|;
comment|// which is translated to a no-location request
name|AMRMClient
operator|.
name|ContainerRequest
name|req
init|=
name|roleHistory
operator|.
name|requestInstanceOnNode
argument_list|(
name|ni
argument_list|,
name|roleStatus
argument_list|,
name|resource
argument_list|)
operator|.
name|getIssuedRequest
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|req
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"resetting failure count"
argument_list|)
expr_stmt|;
name|age3role0
operator|.
name|resetFailedRecently
argument_list|()
expr_stmt|;
name|roleHistory
operator|.
name|dump
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|age3role0
operator|.
name|getFailedRecently
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|age3Active0
operator|.
name|isConsideredUnreliable
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|,
name|roleStatus
operator|.
name|getNodeFailureThreshold
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// looking for a node should now find one
name|ni
operator|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|roleStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ni
argument_list|,
name|age3Active0
argument_list|)
expr_stmt|;
name|req
operator|=
name|roleHistory
operator|.
name|requestInstanceOnNode
argument_list|(
name|ni
argument_list|,
name|roleStatus
argument_list|,
name|resource
argument_list|)
operator|.
name|getIssuedRequest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that strict placement policies generate requests for nodes    * irrespective of their failed status.    * @throws Throwable    */
comment|//@Test
DECL|method|testStrictPlacementIgnoresFailures ()
specifier|public
name|void
name|testStrictPlacementIgnoresFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|targetRole
init|=
name|getRole1Status
argument_list|()
decl_stmt|;
specifier|final
name|ProviderRole
name|providerRole1
init|=
name|targetRole
operator|.
name|getProviderRole
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|providerRole1
operator|.
name|placementPolicy
argument_list|,
name|PlacementPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|int
name|key1
init|=
name|targetRole
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|key0
init|=
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodes0
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|age1Active4
argument_list|,
name|age2Active0
argument_list|,
name|age2Active2
argument_list|,
name|age3Active0
argument_list|,
name|age4Active1
argument_list|)
decl_stmt|;
name|recordAllFailed
argument_list|(
name|key0
argument_list|,
literal|4
argument_list|,
name|nodes0
argument_list|)
expr_stmt|;
name|recordAllFailed
argument_list|(
name|key1
argument_list|,
literal|4
argument_list|,
name|nodes0
argument_list|)
expr_stmt|;
comment|// trigger a list rebuild
name|roleHistory
operator|.
name|buildRecentNodeLists
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|recentRole0
init|=
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|key0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|recentRole0
operator|.
name|indexOf
argument_list|(
name|age3Active0
argument_list|)
operator|<
name|recentRole0
operator|.
name|indexOf
argument_list|(
name|age2Active0
argument_list|)
argument_list|)
expr_stmt|;
comment|// the non-strict role has no suitable nodes
name|assertNull
argument_list|(
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|getRole0Status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NodeInstance
name|ni
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|targetRole
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ni
argument_list|)
expr_stmt|;
name|NodeInstance
name|ni2
init|=
name|roleHistory
operator|.
name|findRecentNodeForNewInstance
argument_list|(
name|targetRole
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ni2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ni
argument_list|,
name|ni2
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindAndRequestNode ()
specifier|public
name|void
name|testFindAndRequestNode
parameter_list|()
throws|throws
name|Throwable
block|{
name|AMRMClient
operator|.
name|ContainerRequest
name|req
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|age3Active0
operator|.
name|hostname
argument_list|,
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|a2
init|=
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertListEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active0
argument_list|)
argument_list|,
name|a2
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRequestedNodeIntoReqList ()
specifier|public
name|void
name|testRequestedNodeIntoReqList
parameter_list|()
throws|throws
name|Throwable
block|{
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OutstandingRequest
argument_list|>
name|requests
init|=
name|roleHistory
operator|.
name|listPlacedRequests
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|age3Active0
operator|.
name|hostname
argument_list|,
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hostname
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testCompletedRequestDropsNode ()
specifier|public
name|void
name|testCompletedRequestDropsNode
parameter_list|()
throws|throws
name|Throwable
block|{
name|AMRMClient
operator|.
name|ContainerRequest
name|req
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OutstandingRequest
argument_list|>
name|requests
init|=
name|roleHistory
operator|.
name|listPlacedRequests
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hostname
decl_stmt|;
name|assertEquals
argument_list|(
name|age3Active0
operator|.
name|hostname
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req
argument_list|,
name|hostname
argument_list|)
decl_stmt|;
name|assertOnContainerAllocated
argument_list|(
name|container
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoOutstandingPlacedRequests
argument_list|()
expr_stmt|;
block|}
DECL|method|assertOnContainerAllocated (Container c1, int p1, int p2)
specifier|public
name|void
name|assertOnContainerAllocated
parameter_list|(
name|Container
name|c1
parameter_list|,
name|int
name|p1
parameter_list|,
name|int
name|p2
parameter_list|)
block|{
name|assertNotEquals
argument_list|(
name|ContainerAllocationOutcome
operator|.
name|Open
argument_list|,
name|roleHistory
operator|.
name|onContainerAllocated
argument_list|(
name|c1
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
operator|.
name|outcome
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOnContainerAllocationOpen (Container c1, int p1, int p2)
specifier|public
name|void
name|assertOnContainerAllocationOpen
parameter_list|(
name|Container
name|c1
parameter_list|,
name|int
name|p1
parameter_list|,
name|int
name|p2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ContainerAllocationOutcome
operator|.
name|Open
argument_list|,
name|roleHistory
operator|.
name|onContainerAllocated
argument_list|(
name|c1
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
operator|.
name|outcome
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoOutstandingPlacedRequests ()
name|void
name|assertNoOutstandingPlacedRequests
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|roleHistory
operator|.
name|listPlacedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOutstandingPlacedRequests (int i)
specifier|public
name|void
name|assertOutstandingPlacedRequests
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|roleHistory
operator|.
name|listPlacedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testTwoRequests ()
specifier|public
name|void
name|testTwoRequests
parameter_list|()
throws|throws
name|Throwable
block|{
name|AMRMClient
operator|.
name|ContainerRequest
name|req
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|req2
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OutstandingRequest
argument_list|>
name|requests
init|=
name|roleHistory
operator|.
name|listPlacedRequests
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req
argument_list|,
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertOnContainerAllocated
argument_list|(
name|container
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOutstandingPlacedRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container
operator|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req2
argument_list|,
name|req2
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertOnContainerAllocated
argument_list|(
name|container
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNoOutstandingPlacedRequests
argument_list|()
expr_stmt|;
block|}
comment|//@Test
DECL|method|testThreeRequestsOneUnsatisified ()
specifier|public
name|void
name|testThreeRequestsOneUnsatisified
parameter_list|()
throws|throws
name|Throwable
block|{
name|AMRMClient
operator|.
name|ContainerRequest
name|req
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|req2
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|req3
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OutstandingRequest
argument_list|>
name|requests
init|=
name|roleHistory
operator|.
name|listPlacedRequests
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req
argument_list|,
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertOnContainerAllocated
argument_list|(
name|container
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOutstandingPlacedRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container
operator|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|assertOnContainerAllocationOpen
argument_list|(
name|container
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertOutstandingPlacedRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// the final allocation will trigger a cleanup
name|container
operator|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req2
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
comment|// no node dropped
name|assertEquals
argument_list|(
name|ContainerAllocationOutcome
operator|.
name|Unallocated
argument_list|,
name|roleHistory
operator|.
name|onContainerAllocated
argument_list|(
name|container
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|outcome
argument_list|)
expr_stmt|;
comment|// yet the list is now empty
name|assertNoOutstandingPlacedRequests
argument_list|()
expr_stmt|;
name|roleHistory
operator|.
name|listOpenRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// and the remainder goes onto the available list
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|a2
init|=
name|roleHistory
operator|.
name|cloneRecentNodeList
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertListEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active0
argument_list|)
argument_list|,
name|a2
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testThreeRequests ()
specifier|public
name|void
name|testThreeRequests
parameter_list|()
throws|throws
name|Throwable
block|{
name|AMRMClient
operator|.
name|ContainerRequest
name|req
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|req2
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|req3
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|assertOutstandingPlacedRequests
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|req3
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req
argument_list|,
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertOnContainerAllocated
argument_list|(
name|container
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertOutstandingPlacedRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container
operator|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req2
argument_list|,
name|req2
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertOnContainerAllocated
argument_list|(
name|container
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNoOutstandingPlacedRequests
argument_list|()
expr_stmt|;
name|container
operator|=
name|factory
operator|.
name|newContainer
argument_list|(
name|req3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|assertOnContainerAllocationOpen
argument_list|(
name|container
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNoOutstandingPlacedRequests
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

