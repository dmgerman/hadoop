begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.other
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|other
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|TestUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This test exists to diagnose local FS permissions.  */
end_comment

begin_class
DECL|class|TestLocalDirStatus
specifier|public
class|class
name|TestLocalDirStatus
extends|extends
name|SliderTestUtils
block|{
DECL|field|SIZE
specifier|public
specifier|static
specifier|final
name|int
name|SIZE
init|=
literal|0x200000
decl_stmt|;
annotation|@
name|Test
DECL|method|testTempDir ()
specifier|public
name|void
name|testTempDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tmpf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpf
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"testl"
argument_list|,
literal|".bin"
argument_list|)
expr_stmt|;
name|createAndReadFile
argument_list|(
name|tmpf
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
name|tmpf
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|tmpf
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpf
operator|!=
literal|null
condition|)
block|{
name|tmpf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTargetDir ()
specifier|public
name|void
name|testTargetDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|target
init|=
name|target
argument_list|()
decl_stmt|;
name|File
name|tmpf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpf
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"testl"
argument_list|,
literal|".bin"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|createAndReadFile
argument_list|(
name|tmpf
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
name|tmpf
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|tmpf
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpf
operator|!=
literal|null
condition|)
block|{
name|tmpf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|target ()
specifier|public
name|File
name|target
parameter_list|()
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
annotation|@
name|Test
DECL|method|testRenameInTargetDir ()
specifier|public
name|void
name|testRenameInTargetDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|target
init|=
name|target
argument_list|()
decl_stmt|;
name|File
name|tmpf
init|=
literal|null
decl_stmt|;
name|File
name|dst
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpf
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"testl"
argument_list|,
literal|".bin"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|dst
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test-dest"
argument_list|,
literal|".bin"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|createRenameAndReadFile
argument_list|(
name|tmpf
argument_list|,
name|dst
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmpf
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpf
operator|!=
literal|null
condition|)
block|{
name|tmpf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dst
operator|!=
literal|null
condition|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameInTmpDir ()
specifier|public
name|void
name|testRenameInTmpDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tmpf
init|=
literal|null
decl_stmt|;
name|File
name|dst
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpf
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"testl"
argument_list|,
literal|".bin"
argument_list|)
expr_stmt|;
name|dst
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test-dest"
argument_list|,
literal|".bin"
argument_list|)
expr_stmt|;
name|createRenameAndReadFile
argument_list|(
name|tmpf
argument_list|,
name|dst
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmpf
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpf
operator|!=
literal|null
condition|)
block|{
name|tmpf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dst
operator|!=
literal|null
condition|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAndReadFile (File path, int len)
specifier|protected
name|void
name|createAndReadFile
parameter_list|(
name|File
name|path
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|dataset
init|=
name|TestUtility
operator|.
name|dataset
argument_list|(
name|len
argument_list|,
literal|32
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|path
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|persisted
init|=
name|readFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TestUtility
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|persisted
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|createRenameAndReadFile (File src, File dst, int len)
specifier|protected
name|void
name|createRenameAndReadFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|dataset
init|=
name|TestUtility
operator|.
name|dataset
argument_list|(
name|len
argument_list|,
literal|32
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|src
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|src
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|src
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|dst
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|src
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|dst
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|persisted
init|=
name|readFile
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|TestUtility
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|persisted
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (File path, byte[] dataset)
specifier|protected
name|void
name|writeFile
parameter_list|(
name|File
name|path
parameter_list|,
name|byte
index|[]
name|dataset
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readFile (File path)
specifier|protected
name|byte
index|[]
name|readFile
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|len
init|=
operator|(
name|int
operator|)
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataset
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FileInputStream
name|ins
init|=
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|ins
operator|.
name|read
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|dataset
return|;
block|}
block|}
end_class

end_unit

