begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.mock
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_comment
comment|/**  * Provides allocation services to a cluster -both random and placed.  *  * Important: container allocations need an app attempt ID put into the  * container ID  */
end_comment

begin_class
DECL|class|Allocator
specifier|public
class|class
name|Allocator
block|{
DECL|field|cluster
specifier|private
specifier|final
name|MockYarnCluster
name|cluster
decl_stmt|;
comment|/**    * Rolling index into the cluster used for the next "random" assignment.    */
DECL|field|rollingIndex
specifier|private
name|int
name|rollingIndex
init|=
literal|0
decl_stmt|;
DECL|method|Allocator (MockYarnCluster cluster)
name|Allocator
parameter_list|(
name|MockYarnCluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
comment|/**    * Allocate a node using the list of nodes in the container as the    * hints.    * @param request request    * @return the allocated container -or null for none    */
DECL|method|allocate (AMRMClient.ContainerRequest request)
name|MockContainer
name|allocate
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
name|MockYarnCluster
operator|.
name|MockYarnClusterNode
name|node
init|=
literal|null
decl_stmt|;
name|MockYarnCluster
operator|.
name|MockYarnClusterContainer
name|allocated
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getNodes
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|host
range|:
name|request
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|node
operator|=
name|cluster
operator|.
name|lookup
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|node
operator|.
name|allocate
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocated
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|allocated
operator|!=
literal|null
condition|)
block|{
return|return
name|createContainerRecord
argument_list|(
name|request
argument_list|,
name|allocated
argument_list|,
name|node
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|getRelaxLocality
argument_list|()
operator|||
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// fallback to anywhere
return|return
name|allocateRandom
argument_list|(
name|request
argument_list|)
return|;
block|}
else|else
block|{
comment|//no match and locality can't be requested
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**    * Allocate a node without any positioning -use whatever policy this allocator    * chooses.    * @param request request    * @return the allocated container -or null for none    */
DECL|method|allocateRandom (AMRMClient.ContainerRequest request)
name|MockContainer
name|allocateRandom
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
name|int
name|start
init|=
name|rollingIndex
decl_stmt|;
name|MockYarnCluster
operator|.
name|MockYarnClusterNode
name|node
init|=
name|cluster
operator|.
name|nodeAt
argument_list|(
name|rollingIndex
argument_list|)
decl_stmt|;
name|MockYarnCluster
operator|.
name|MockYarnClusterContainer
name|allocated
init|=
name|node
operator|.
name|allocate
argument_list|()
decl_stmt|;
comment|// if there is no space, try again -but stop when all the nodes
comment|// have failed
while|while
condition|(
name|allocated
operator|==
literal|null
operator|&&
name|start
operator|!=
name|nextIndex
argument_list|()
condition|)
block|{
name|node
operator|=
name|cluster
operator|.
name|nodeAt
argument_list|(
name|rollingIndex
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|node
operator|.
name|allocate
argument_list|()
expr_stmt|;
block|}
comment|//here the allocation is set, so create the response
return|return
name|createContainerRecord
argument_list|(
name|request
argument_list|,
name|allocated
argument_list|,
name|node
argument_list|)
return|;
block|}
comment|/**    * Create a container record -if one was allocated.    * @param allocated allocation -may be null    * @param node node with the container    * @return a container record, or null if there was no allocation    */
DECL|method|createContainerRecord ( AMRMClient.ContainerRequest request, MockYarnCluster.MockYarnClusterContainer allocated, MockYarnCluster.MockYarnClusterNode node)
specifier|public
name|MockContainer
name|createContainerRecord
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|,
name|MockYarnCluster
operator|.
name|MockYarnClusterContainer
name|allocated
parameter_list|,
name|MockYarnCluster
operator|.
name|MockYarnClusterNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|allocated
operator|==
literal|null
condition|)
block|{
comment|// no space
return|return
literal|null
return|;
block|}
name|MockContainer
name|container
init|=
operator|new
name|MockContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
operator|new
name|MockContainerId
argument_list|(
name|allocated
operator|.
name|getCid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeHttpAddress
argument_list|(
name|node
operator|.
name|httpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setResource
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|nextIndex ()
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
name|rollingIndex
operator|=
operator|(
name|rollingIndex
operator|+
literal|1
operator|)
operator|%
name|cluster
operator|.
name|getClusterSize
argument_list|()
expr_stmt|;
return|return
name|rollingIndex
return|;
block|}
block|}
end_class

end_unit

