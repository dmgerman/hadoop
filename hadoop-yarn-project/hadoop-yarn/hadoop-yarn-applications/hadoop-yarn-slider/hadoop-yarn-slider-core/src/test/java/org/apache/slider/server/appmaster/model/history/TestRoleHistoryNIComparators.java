begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit test to verify the comparators sort as expected.  */
end_comment

begin_class
DECL|class|TestRoleHistoryNIComparators
specifier|public
class|class
name|TestRoleHistoryNIComparators
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|age1Active4
specifier|private
name|NodeInstance
name|age1Active4
decl_stmt|;
DECL|field|age2Active2
specifier|private
name|NodeInstance
name|age2Active2
decl_stmt|;
DECL|field|age3Active0
specifier|private
name|NodeInstance
name|age3Active0
decl_stmt|;
DECL|field|age4Active1
specifier|private
name|NodeInstance
name|age4Active1
decl_stmt|;
DECL|field|empty
specifier|private
name|NodeInstance
name|empty
init|=
operator|new
name|NodeInstance
argument_list|(
literal|"empty"
argument_list|,
name|MockFactory
operator|.
name|ROLE_COUNT
argument_list|)
decl_stmt|;
DECL|field|age6failing
specifier|private
name|NodeInstance
name|age6failing
decl_stmt|;
DECL|field|age1failing
specifier|private
name|NodeInstance
name|age1failing
decl_stmt|;
DECL|field|nodes
specifier|private
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodes
decl_stmt|;
DECL|field|nodesPlusEmpty
specifier|private
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|nodesPlusEmpty
decl_stmt|;
DECL|field|allnodes
specifier|private
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|allnodes
decl_stmt|;
DECL|field|role0Status
specifier|private
name|RoleStatus
name|role0Status
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|role0Status
operator|=
name|getRole0Status
argument_list|()
expr_stmt|;
name|age1Active4
operator|=
name|nodeInstance
argument_list|(
literal|1001
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age2Active2
operator|=
name|nodeInstance
argument_list|(
literal|1002
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age3Active0
operator|=
name|nodeInstance
argument_list|(
literal|1003
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age4Active1
operator|=
name|nodeInstance
argument_list|(
literal|1004
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age6failing
operator|=
name|nodeInstance
argument_list|(
literal|1006
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age1failing
operator|=
name|nodeInstance
argument_list|(
literal|1001
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age6failing
operator|.
name|get
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setFailedRecently
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|age1failing
operator|.
name|get
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setFailedRecently
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active2
argument_list|,
name|age4Active1
argument_list|,
name|age1Active4
argument_list|,
name|age3Active0
argument_list|)
expr_stmt|;
name|nodesPlusEmpty
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active2
argument_list|,
name|age4Active1
argument_list|,
name|age1Active4
argument_list|,
name|age3Active0
argument_list|,
name|empty
argument_list|)
expr_stmt|;
name|allnodes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|age6failing
argument_list|,
name|age2Active2
argument_list|,
name|age4Active1
argument_list|,
name|age1Active4
argument_list|,
name|age3Active0
argument_list|,
name|age1failing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestNIComparators"
return|;
block|}
annotation|@
name|Test
DECL|method|testPreferred ()
specifier|public
name|void
name|testPreferred
parameter_list|()
throws|throws
name|Throwable
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|NodeInstance
operator|.
name|Preferred
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertListEquals
argument_list|(
name|nodes
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|age4Active1
argument_list|,
name|age3Active0
argument_list|,
name|age2Active2
argument_list|,
name|age1Active4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The preferred sort still includes failures; up to next phase in process    * to handle that.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testPreferredWithFailures ()
specifier|public
name|void
name|testPreferredWithFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|allnodes
argument_list|,
operator|new
name|NodeInstance
operator|.
name|Preferred
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allnodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|age6failing
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allnodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|age4Active1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreferredComparatorDowngradesFailures ()
specifier|public
name|void
name|testPreferredComparatorDowngradesFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
operator|.
name|Preferred
name|preferred
init|=
operator|new
name|NodeInstance
operator|.
name|Preferred
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|preferred
operator|.
name|compare
argument_list|(
name|age6failing
argument_list|,
name|age1failing
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preferred
operator|.
name|compare
argument_list|(
name|age1failing
argument_list|,
name|age6failing
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewerThanNoRole ()
specifier|public
name|void
name|testNewerThanNoRole
parameter_list|()
throws|throws
name|Throwable
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nodesPlusEmpty
argument_list|,
operator|new
name|NodeInstance
operator|.
name|Preferred
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertListEquals
argument_list|(
name|nodesPlusEmpty
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|age4Active1
argument_list|,
name|age3Active0
argument_list|,
name|age2Active2
argument_list|,
name|age1Active4
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreActiveThan ()
specifier|public
name|void
name|testMoreActiveThan
parameter_list|()
throws|throws
name|Throwable
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|NodeInstance
operator|.
name|MoreActiveThan
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertListEquals
argument_list|(
name|nodes
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|age1Active4
argument_list|,
name|age2Active2
argument_list|,
name|age4Active1
argument_list|,
name|age3Active0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreActiveThanEmpty ()
specifier|public
name|void
name|testMoreActiveThanEmpty
parameter_list|()
throws|throws
name|Throwable
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nodesPlusEmpty
argument_list|,
operator|new
name|NodeInstance
operator|.
name|MoreActiveThan
argument_list|(
name|role0Status
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertListEquals
argument_list|(
name|nodesPlusEmpty
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|age1Active4
argument_list|,
name|age2Active2
argument_list|,
name|age4Active1
argument_list|,
name|age3Active0
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

