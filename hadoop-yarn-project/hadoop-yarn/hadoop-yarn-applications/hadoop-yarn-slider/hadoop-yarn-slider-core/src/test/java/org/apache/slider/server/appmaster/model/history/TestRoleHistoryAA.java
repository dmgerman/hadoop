begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|proto
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformationList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|RestTypeMarshalling
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|SliderTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test anti-affine placement.  */
end_comment

begin_class
DECL|class|TestRoleHistoryAA
specifier|public
class|class
name|TestRoleHistoryAA
extends|extends
name|SliderTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRoleHistoryAA
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hostnames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|hostnames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
DECL|field|nodeMap
DECL|field|gpuNodeMap
specifier|private
name|NodeMap
name|nodeMap
decl_stmt|,
name|gpuNodeMap
decl_stmt|;
DECL|field|roleHistory
specifier|private
name|RoleHistory
name|roleHistory
init|=
operator|new
name|MockRoleHistory
argument_list|(
name|MockFactory
operator|.
name|ROLES
argument_list|)
decl_stmt|;
DECL|method|TestRoleHistoryAA ()
specifier|public
name|TestRoleHistoryAA
parameter_list|()
throws|throws
name|BadConfigException
block|{   }
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|nodeMap
operator|=
name|createNodeMap
argument_list|(
name|hostnames
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|gpuNodeMap
operator|=
name|createNodeMap
argument_list|(
name|hostnames
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|"GPU"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNodesInFullCluster ()
specifier|public
name|void
name|testFindNodesInFullCluster
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
name|verifyResultSize
argument_list|(
literal|3
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNodesInUnhealthyCluster ()
specifier|public
name|void
name|testFindNodesInUnhealthyCluster
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
name|markNodeOneUnhealthy
argument_list|()
expr_stmt|;
name|verifyResultSize
argument_list|(
literal|2
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|markNodeOneUnhealthy ()
specifier|public
name|boolean
name|markNodeOneUnhealthy
parameter_list|()
block|{
return|return
name|setNodeState
argument_list|(
name|nodeMap
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
return|;
block|}
DECL|method|setNodeState (NodeInstance node, NodeState state)
specifier|protected
name|boolean
name|setNodeState
parameter_list|(
name|NodeInstance
name|node
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
return|return
name|node
operator|.
name|updateNode
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
name|node
operator|.
name|hostname
argument_list|,
name|state
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
comment|//@Test
DECL|method|testFindNoNodesWrongLabel ()
specifier|public
name|void
name|testFindNoNodesWrongLabel
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
name|verifyResultSize
argument_list|(
literal|0
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|"GPU"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindSomeNodesSomeLabel ()
specifier|public
name|void
name|testFindSomeNodesSomeLabel
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
name|update
argument_list|(
name|nodeMap
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
literal|"1"
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|"GPU"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|gpuNodes
init|=
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|"GPU"
argument_list|)
decl_stmt|;
name|verifyResultSize
argument_list|(
literal|1
argument_list|,
name|gpuNodes
argument_list|)
expr_stmt|;
name|NodeInstance
name|instance
init|=
name|gpuNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|instance
operator|.
name|getOrCreate
argument_list|(
literal|1
argument_list|)
operator|.
name|onStarting
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|canHost
argument_list|(
literal|1
argument_list|,
literal|"GPU"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|canHost
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResultSize
argument_list|(
literal|0
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|"GPU"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNoNodesRightLabel ()
specifier|public
name|void
name|testFindNoNodesRightLabel
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
name|verifyResultSize
argument_list|(
literal|3
argument_list|,
name|gpuNodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|"GPU"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNoNodesNoLabel ()
specifier|public
name|void
name|testFindNoNodesNoLabel
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
name|verifyResultSize
argument_list|(
literal|3
argument_list|,
name|gpuNodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNoNodesClusterRequested ()
specifier|public
name|void
name|testFindNoNodesClusterRequested
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
for|for
control|(
name|NodeInstance
name|ni
range|:
name|nodeMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ni
operator|.
name|getOrCreate
argument_list|(
literal|1
argument_list|)
operator|.
name|request
argument_list|()
expr_stmt|;
block|}
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindNoNodesClusterBusy ()
specifier|public
name|void
name|testFindNoNodesClusterBusy
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
for|for
control|(
name|NodeInstance
name|ni
range|:
name|nodeMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ni
operator|.
name|getOrCreate
argument_list|(
literal|1
argument_list|)
operator|.
name|request
argument_list|()
expr_stmt|;
block|}
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tag all nodes as starting, then walk one through a bit    * more of its lifecycle.    */
comment|//@Test
DECL|method|testFindNoNodesLifecycle ()
specifier|public
name|void
name|testFindNoNodesLifecycle
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// all three will surface at first
for|for
control|(
name|NodeInstance
name|ni
range|:
name|nodeMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ni
operator|.
name|getOrCreate
argument_list|(
literal|1
argument_list|)
operator|.
name|onStarting
argument_list|()
expr_stmt|;
block|}
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// walk one of the nodes through the lifecycle
name|NodeInstance
name|node1
init|=
name|nodeMap
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|node1
operator|.
name|canHost
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|node1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|onStartCompleted
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|node1
operator|.
name|canHost
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|node1
operator|.
name|canHost
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|list2
init|=
name|verifyResultSize
argument_list|(
literal|1
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hostname
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// now tag that node as unhealthy and expect it to go away
name|markNodeOneUnhealthy
argument_list|()
expr_stmt|;
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testRolesIndependent ()
specifier|public
name|void
name|testRolesIndependent
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeInstance
name|node1
init|=
name|nodeMap
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|NodeEntry
name|role1
init|=
name|node1
operator|.
name|getOrCreate
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NodeEntry
name|role2
init|=
name|node1
operator|.
name|getOrCreate
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeInstance
name|ni
range|:
name|nodeMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ni
operator|.
name|updateNode
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
literal|"0"
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNoAvailableNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setNodeState
argument_list|(
name|node1
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
comment|// tag role 1 as busy
name|role1
operator|.
name|onStarting
argument_list|()
expr_stmt|;
name|assertNoAvailableNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verifyResultSize
argument_list|(
literal|1
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
literal|2
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node1
operator|.
name|canHost
argument_list|(
literal|2
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeEntryAvailablity ()
specifier|public
name|void
name|testNodeEntryAvailablity
parameter_list|()
throws|throws
name|Throwable
block|{
name|NodeEntry
name|entry
init|=
operator|new
name|NodeEntry
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|onStarting
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|onStartCompleted
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|onStarting
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|onStartFailed
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeInstanceSerialization ()
specifier|public
name|void
name|testNodeInstanceSerialization
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRoleHistory
name|rh2
init|=
operator|new
name|MockRoleHistory
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|rh2
operator|.
name|getOrCreateNodeInstance
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|NodeInstance
name|instance
init|=
name|rh2
operator|.
name|getOrCreateNodeInstance
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|instance
operator|.
name|getOrCreate
argument_list|(
literal|1
argument_list|)
operator|.
name|onStartCompleted
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|naming
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|1
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|NodeInformation
name|ni
init|=
name|instance
operator|.
name|serialize
argument_list|(
name|naming
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ni
operator|.
name|entries
operator|.
name|get
argument_list|(
literal|"manager"
argument_list|)
operator|.
name|live
argument_list|)
expr_stmt|;
name|NodeInformation
name|ni2
init|=
name|rh2
operator|.
name|getNodeInformation
argument_list|(
literal|"localhost"
argument_list|,
name|naming
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ni2
operator|.
name|entries
operator|.
name|get
argument_list|(
literal|"manager"
argument_list|)
operator|.
name|live
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeInformation
argument_list|>
name|info
init|=
name|rh2
operator|.
name|getNodeInformationSnapshot
argument_list|(
name|naming
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|entries
operator|.
name|get
argument_list|(
literal|"manager"
argument_list|)
operator|.
name|live
argument_list|)
expr_stmt|;
name|NodeInformationList
name|nil
init|=
operator|new
name|NodeInformationList
argument_list|(
name|info
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nil
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|entries
operator|.
name|get
argument_list|(
literal|"manager"
argument_list|)
operator|.
name|live
argument_list|)
expr_stmt|;
name|Messages
operator|.
name|NodeInformationProto
name|nodeInformationProto
init|=
name|RestTypeMarshalling
operator|.
name|marshall
argument_list|(
name|ni
argument_list|)
decl_stmt|;
name|Messages
operator|.
name|NodeEntryInformationProto
name|entryProto
init|=
name|nodeInformationProto
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entryProto
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entryProto
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|NodeInformation
name|unmarshalled
init|=
name|RestTypeMarshalling
operator|.
name|unmarshall
argument_list|(
name|nodeInformationProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unmarshalled
operator|.
name|hostname
argument_list|,
name|ni
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|unmarshalled
operator|.
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ni
operator|.
name|entries
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testBuildRolenames ()
specifier|public
name|void
name|testBuildRolenames
parameter_list|()
throws|throws
name|Throwable
block|{    }
DECL|method|assertNoAvailableNodes (int role)
specifier|public
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|assertNoAvailableNodes
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|String
name|label
init|=
literal|""
decl_stmt|;
return|return
name|verifyResultSize
argument_list|(
literal|0
argument_list|,
name|nodeMap
operator|.
name|findAllNodesForRole
argument_list|(
name|role
argument_list|,
name|label
argument_list|)
argument_list|)
return|;
block|}
DECL|method|verifyResultSize (int size, List<NodeInstance> list)
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|verifyResultSize
parameter_list|(
name|int
name|size
parameter_list|,
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|size
condition|)
block|{
for|for
control|(
name|NodeInstance
name|ni
range|:
name|list
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ni
operator|.
name|toFullString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|size
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|method|createNodeMap (List<NodeReport> nodeReports)
name|NodeMap
name|createNodeMap
parameter_list|(
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|NodeMap
name|newNodeMap
init|=
operator|new
name|NodeMap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|newNodeMap
argument_list|,
name|nodeReports
argument_list|)
expr_stmt|;
return|return
name|newNodeMap
return|;
block|}
DECL|method|update (NodeMap nm, List<NodeReport> nodeReports)
specifier|protected
name|boolean
name|update
parameter_list|(
name|NodeMap
name|nm
parameter_list|,
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
parameter_list|)
block|{
return|return
name|nm
operator|.
name|buildOrUpdate
argument_list|(
name|nodeReports
argument_list|)
return|;
block|}
DECL|method|createNodeMap (List<String> hosts, NodeState state, String label)
name|NodeMap
name|createNodeMap
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hosts
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
name|label
parameter_list|)
throws|throws
name|BadConfigException
block|{
return|return
name|createNodeMap
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|createNodeReports
argument_list|(
name|hosts
argument_list|,
name|state
argument_list|,
name|label
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

