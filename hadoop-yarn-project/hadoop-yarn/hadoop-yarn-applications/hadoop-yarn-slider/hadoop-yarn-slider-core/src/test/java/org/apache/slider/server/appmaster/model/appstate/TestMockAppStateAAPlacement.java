begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.appstate
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|appstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|NodeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockRoles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockYarnEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|AbstractRMOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
operator|.
name|NodeUpdatedOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppStateBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
operator|.
name|COMPONENT_PLACEMENT_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockFactory
operator|.
name|AAROLE_2
import|;
end_import

begin_comment
comment|/**  * Test Anti-affine placement.  */
end_comment

begin_class
DECL|class|TestMockAppStateAAPlacement
specifier|public
class|class
name|TestMockAppStateAAPlacement
extends|extends
name|BaseMockAppStateAATest
implements|implements
name|MockRoles
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMockAppStateAAPlacement
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NODES
specifier|private
specifier|static
specifier|final
name|int
name|NODES
init|=
literal|3
decl_stmt|;
comment|/**    * The YARN engine has a cluster with very few nodes (3) and lots of    * containers, so if AA placement isn't working, there will be affine    * placements surfacing.    * @return    */
annotation|@
name|Override
DECL|method|createYarnEngine ()
specifier|public
name|MockYarnEngine
name|createYarnEngine
parameter_list|()
block|{
return|return
operator|new
name|MockYarnEngine
argument_list|(
name|NODES
argument_list|,
literal|8
argument_list|)
return|;
block|}
comment|/**    * This is the simplest AA allocation: no labels, so allocate anywhere.    * @throws Throwable    */
comment|//@Test
DECL|method|testAllocateAANoLabel ()
specifier|public
name|void
name|testAllocateAANoLabel
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cloneNodemap
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// want multiple instances, so there will be iterations
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|getSingleRequest
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|engine
operator|.
name|getCluster
argument_list|()
operator|.
name|getClusterSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getRacks
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|allocated
init|=
name|engine
operator|.
name|allocateContainer
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// notify the container ane expect
name|List
argument_list|<
name|ContainerAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appState
operator|.
name|onContainersAllocated
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|allocated
argument_list|)
argument_list|,
name|assignments
argument_list|,
name|operations
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|allocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|NodeInstance
name|hostInstance
init|=
name|cloneNodemap
argument_list|()
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hostInstance
operator|.
name|get
argument_list|(
name|aaRole
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hostInstance
operator|.
name|canHost
argument_list|(
name|aaRole
operator|.
name|getKey
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hostInstance
operator|.
name|canHost
argument_list|(
name|aaRole
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// assignment
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the release matches the allocation
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getCancel
argument_list|(
name|operations
argument_list|,
literal|0
argument_list|)
operator|.
name|getCapability
argument_list|()
operator|.
name|equals
argument_list|(
name|allocated
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// we also expect a new allocation request to have been issued
name|ContainerRequest
name|req2
init|=
name|getRequest
argument_list|(
name|operations
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|req2
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|engine
operator|.
name|getCluster
argument_list|()
operator|.
name|getClusterSize
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|req2
operator|.
name|getNodes
argument_list|()
operator|.
name|contains
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the pending couner is down
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|allocated2
init|=
name|engine
operator|.
name|allocateContainer
argument_list|(
name|req2
argument_list|)
decl_stmt|;
comment|// placement must be on a different host
name|assertNotEquals
argument_list|(
name|allocated2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|allocated
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerAssignment
name|assigned
init|=
name|assignments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|assigned
operator|.
name|container
decl_stmt|;
name|RoleInstance
name|ri
init|=
name|roleInstance
argument_list|(
name|assigned
argument_list|)
decl_stmt|;
comment|//tell the app it arrived
name|appState
operator|.
name|containerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appState
operator|.
name|onNodeManagerContainerStarted
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
comment|// identify those hosts with an aa role on
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|naming
init|=
name|appState
operator|.
name|buildNamingMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|naming
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|aaRole
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|naming
operator|.
name|get
argument_list|(
name|aaRole
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeInformation
argument_list|>
name|info
init|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
operator|.
name|getNodeInformationSnapshot
argument_list|(
name|naming
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|NodeInformation
name|nodeInformation
init|=
name|info
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodeInformation
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|nodeInformation
operator|.
name|entries
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodeInformation
operator|.
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeInformation
operator|.
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|live
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testAllocateFlexUp ()
specifier|public
name|void
name|testAllocateFlexUp
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
comment|// want multiple instances, so there will be iterations
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|getSingleRequest
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aaRole
operator|.
name|getActualAndRequested
argument_list|()
operator|+
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|,
name|aaRole
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
comment|// now trigger that flex up
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// expect: no new reqests, pending count ++
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops2
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ops2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aaRole
operator|.
name|getRunning
argument_list|()
operator|+
name|aaRole
operator|.
name|getAAPending
argument_list|()
operator|+
name|aaRole
operator|.
name|getOutstandingAARequestCount
argument_list|()
argument_list|,
name|aaRole
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 outstanding
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
comment|// and one AA
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
comment|// next iter
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|submitOperations
argument_list|(
name|ops
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|ops2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ops2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now trigger the next execution cycle
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|submitOperations
argument_list|(
name|ops2
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|ops3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ops3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
block|}
comment|//@Test
DECL|method|testAllocateFlexDownDecrementsPending ()
specifier|public
name|void
name|testAllocateFlexDownDecrementsPending
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
comment|// want multiple instances, so there will be iterations
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|getSingleRequest
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
comment|// flex down so that the next request should be cancelled
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// expect: no new requests, pending count --
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops2
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ops2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
comment|// next iter
name|submitOperations
argument_list|(
name|ops
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|ops2
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAllContainersAA
argument_list|()
expr_stmt|;
block|}
comment|/**    * Here flex down while there is only one outstanding request.    * The outstanding flex should be cancelled    * @throws Throwable    */
comment|//@Test
DECL|method|testAllocateFlexDownForcesCancel ()
specifier|public
name|void
name|testAllocateFlexDownForcesCancel
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
comment|// want multiple instances, so there will be iterations
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|getSingleRequest
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aaRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
comment|// flex down so that the next request should be cancelled
name|aaRole
operator|.
name|setDesired
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// expect: no new requests, pending count --
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|ops2
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|getSingleCancel
argument_list|(
name|ops2
argument_list|)
expr_stmt|;
comment|// next iter
name|submitOperations
argument_list|(
name|ops
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|ops2
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|getSingleRelease
argument_list|(
name|ops2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAllContainersAA ()
name|void
name|assertAllContainersAA
parameter_list|()
block|{
name|assertAllContainersAA
argument_list|(
name|getAaRole
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @throws Throwable    */
comment|//@Test
DECL|method|testAskForTooMany ()
specifier|public
name|void
name|testAskForTooMany
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Ask for 1 more than the no of available nodes;"
operator|+
literal|" expect the final request to be unsatisfied until the cluster "
operator|+
literal|"changes size"
argument_list|)
expr_stmt|;
comment|//more than expected
name|aaRole
operator|.
name|setDesired
argument_list|(
name|NODES
operator|+
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operations
init|=
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODES
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|iter
init|=
literal|"Iteration "
operator|+
name|i
operator|+
literal|" role = "
operator|+
name|aaRole
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|iter
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractRMOperation
argument_list|>
name|operationsOut
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|submitOperations
argument_list|(
name|operations
argument_list|,
name|EMPTY_ID_LIST
argument_list|,
name|operationsOut
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|operations
operator|=
name|operationsOut
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|NODES
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertAllContainersAA
argument_list|()
expr_stmt|;
block|}
comment|// expect an outstanding AA request to be unsatisfied
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|getRunning
argument_list|()
operator|<
name|aaRole
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aaRole
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|engine
operator|.
name|execute
argument_list|(
name|operations
argument_list|,
name|EMPTY_ID_LIST
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// in a review now, no more requests can be generated, as there is no
comment|// space for AA placements, even though there is cluster capacity
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now do a node update (this doesn't touch the YARN engine; the node
comment|// isn't really there)
name|NodeUpdatedOutcome
name|outcome
init|=
name|addNewNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cloneNodemap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|NODES
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outcome
operator|.
name|clusterChanged
argument_list|)
expr_stmt|;
comment|// no active calls to empty
name|assertTrue
argument_list|(
name|outcome
operator|.
name|operations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addNewNode ()
specifier|protected
name|AppState
operator|.
name|NodeUpdatedOutcome
name|addNewNode
parameter_list|()
block|{
return|return
name|updateNodes
argument_list|(
name|MockFactory
operator|.
name|INSTANCE
operator|.
name|newNodeReport
argument_list|(
literal|"4"
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|"gpu"
argument_list|)
argument_list|)
return|;
block|}
comment|//@Test
DECL|method|testClusterSizeChangesDuringRequestSequence ()
specifier|public
name|void
name|testClusterSizeChangesDuringRequestSequence
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|aaRole
init|=
name|getAaRole
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Change the cluster size where the cluster size changes during "
operator|+
literal|"a test sequence."
argument_list|)
expr_stmt|;
name|aaRole
operator|.
name|setDesired
argument_list|(
name|NODES
operator|+
literal|1
argument_list|)
expr_stmt|;
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODES
argument_list|,
name|aaRole
operator|.
name|getAAPending
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUpdatedOutcome
name|outcome
init|=
name|addNewNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|outcome
operator|.
name|clusterChanged
argument_list|)
expr_stmt|;
comment|// one call to cancel
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outcome
operator|.
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// and on a review, one more to rebuild
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testBindingInfoMustHaveNodeMap ()
specifier|public
name|void
name|testBindingInfoMustHaveNodeMap
parameter_list|()
throws|throws
name|Throwable
block|{
name|AppStateBindingInfo
name|bindingInfo
init|=
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|bindingInfo
operator|.
name|nodeReports
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|MockAppState
name|state
init|=
operator|new
name|MockAppState
argument_list|(
name|bindingInfo
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
comment|//@Test
DECL|method|testAMRestart ()
specifier|public
name|void
name|testAMRestart
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|desiredAA
init|=
literal|3
decl_stmt|;
name|getAaRole
argument_list|()
operator|.
name|setDesired
argument_list|(
name|desiredAA
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|instances
init|=
name|createAndStartNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoleInstance
name|instance
range|:
name|instances
control|)
block|{
name|containers
operator|.
name|add
argument_list|(
name|instance
operator|.
name|container
argument_list|)
expr_stmt|;
block|}
comment|// now destroy the app state
name|AppStateBindingInfo
name|bindingInfo
init|=
name|buildBindingInfo
argument_list|()
decl_stmt|;
name|bindingInfo
operator|.
name|application
operator|=
name|factory
operator|.
name|newApplication
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|desiredAA
argument_list|)
operator|.
name|name
argument_list|(
name|getValidTestName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingInfo
operator|.
name|application
operator|.
name|getComponent
argument_list|(
name|ROLE2
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|COMPONENT_PLACEMENT_POLICY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PlacementPolicy
operator|.
name|ANTI_AFFINITY_REQUIRED
argument_list|)
argument_list|)
expr_stmt|;
name|bindingInfo
operator|.
name|liveContainers
operator|=
name|containers
expr_stmt|;
name|appState
operator|=
operator|new
name|MockAppState
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|RoleStatus
name|aaRole
init|=
name|lookupRole
argument_list|(
name|AAROLE_2
operator|.
name|name
argument_list|)
decl_stmt|;
name|RoleStatus
name|gpuRole
init|=
name|lookupRole
argument_list|(
name|MockFactory
operator|.
name|AAROLE_1_GPU
operator|.
name|name
argument_list|)
decl_stmt|;
name|appState
operator|.
name|reviewRequestAndReleaseNodes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAntiAffinePlacement
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aaRole
operator|.
name|isAARequestOutstanding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

