begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.other
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|other
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|YarnMiniClusterTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This test class exists to look at permissions of the filesystem, especially  * that created by Mini YARN clusters. On some windows jenkins machines,  * YARN actions were failing as the directories had the wrong permissions  * (i.e. too lax)  */
end_comment

begin_class
DECL|class|TestFilesystemPermissions
specifier|public
class|class
name|TestFilesystemPermissions
extends|extends
name|YarnMiniClusterTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFilesystemPermissions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|filesToDelete
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|filesToDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|deleteFiles ()
specifier|public
name|void
name|deleteFiles
parameter_list|()
block|{
for|for
control|(
name|File
name|f
range|:
name|filesToDelete
control|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJavaFSOperations ()
specifier|public
name|void
name|testJavaFSOperations
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertNativeLibrariesPresent
argument_list|()
expr_stmt|;
name|File
name|subdir
init|=
name|testDir
argument_list|()
decl_stmt|;
name|subdir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|subdir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|canRead
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|canWrite
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiskCheckerOperations ()
specifier|public
name|void
name|testDiskCheckerOperations
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertNativeLibrariesPresent
argument_list|()
expr_stmt|;
name|File
name|subdir
init|=
name|testDir
argument_list|()
decl_stmt|;
name|subdir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|DiskChecker
name|checker
init|=
operator|new
name|DiskChecker
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkDir
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiskCheckerMkdir ()
specifier|public
name|void
name|testDiskCheckerMkdir
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertNativeLibrariesPresent
argument_list|()
expr_stmt|;
name|File
name|subdir
init|=
name|testDir
argument_list|()
decl_stmt|;
name|subdir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|DiskChecker
name|checker
init|=
operator|new
name|DiskChecker
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkDir
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a test dir for this method; one that will be deleted on teardown.    * @return a filename unique to this test method    */
DECL|method|testDir ()
name|File
name|testDir
parameter_list|()
block|{
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
literal|"target/testfspermissions"
argument_list|)
decl_stmt|;
name|parent
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|testdir
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|filesToDelete
operator|.
name|add
argument_list|(
name|testdir
argument_list|)
expr_stmt|;
return|return
name|testdir
return|;
block|}
annotation|@
name|Test
DECL|method|testPermsMap ()
specifier|public
name|void
name|testPermsMap
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|dir
init|=
name|testDir
argument_list|()
decl_stmt|;
name|String
name|diruri
init|=
name|dir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileContext
name|lfs
init|=
name|createLocalFS
argument_list|(
name|dir
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|getLocalDirsPathPermissionsMap
argument_list|(
name|lfs
argument_list|,
name|diruri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitLocaldir ()
specifier|public
name|void
name|testInitLocaldir
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|dir
init|=
name|testDir
argument_list|()
decl_stmt|;
name|String
name|diruri
init|=
name|dir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileContext
name|lfs
init|=
name|createLocalFS
argument_list|(
name|dir
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|initializeLocalDir
argument_list|(
name|lfs
argument_list|,
name|diruri
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|getInitializedLocalDirs
argument_list|(
name|lfs
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|diruri
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateMiniclusterPerms ()
specifier|public
name|void
name|testValidateMiniclusterPerms
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|numLocal
init|=
literal|1
decl_stmt|;
name|String
name|cluster
init|=
name|createMiniCluster
argument_list|(
literal|""
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numLocal
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|workDir
init|=
name|getMiniCluster
argument_list|()
operator|.
name|getTestWorkDir
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|localdirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|workDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-local"
argument_list|)
condition|)
block|{
comment|// local dir
name|localdirs
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numLocal
argument_list|,
name|localdirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
name|lfs
init|=
name|createLocalFS
argument_list|(
name|workDir
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|localdirs
control|)
block|{
name|checkLocalDir
argument_list|(
name|lfs
argument_list|,
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createLocalFS (File dir, Configuration conf)
name|FileContext
name|createLocalFS
parameter_list|(
name|File
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|UnsupportedFileSystemException
block|{
return|return
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|dir
operator|.
name|toURI
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Extracted from ResourceLocalizationService.    * @param lfs    * @param localDir    * @return perms map    * @see ResourceLocalizationService    */
DECL|method|getLocalDirsPathPermissionsMap ( FileContext lfs, String localDir)
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|getLocalDirsPathPermissionsMap
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|String
name|localDir
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|localDirPathFsPermissionsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|FsPermission
name|defaultPermission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
name|FsPermission
name|nmPrivatePermission
init|=
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_PERM
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|fileDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|localDirPathFsPermissionsMap
operator|.
name|put
argument_list|(
name|userDir
argument_list|,
name|defaultPermission
argument_list|)
expr_stmt|;
name|localDirPathFsPermissionsMap
operator|.
name|put
argument_list|(
name|fileDir
argument_list|,
name|defaultPermission
argument_list|)
expr_stmt|;
name|localDirPathFsPermissionsMap
operator|.
name|put
argument_list|(
name|sysDir
argument_list|,
name|nmPrivatePermission
argument_list|)
expr_stmt|;
return|return
name|localDirPathFsPermissionsMap
return|;
block|}
DECL|method|checkLocalDir (FileContext lfs, String localDir)
specifier|private
name|boolean
name|checkLocalDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|String
name|localDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|pathPermissionMap
init|=
name|getLocalDirsPathPermissionsMap
argument_list|(
name|lfs
argument_list|,
name|localDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|entry
range|:
name|pathPermissionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FileStatus
name|status
decl_stmt|;
name|status
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Permissions incorrectly set for dir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", should be "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|", actual value = "
operator|+
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|initializeLocalDir (FileContext lfs, String localDir)
specifier|private
name|void
name|initializeLocalDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|String
name|localDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|pathPermissionMap
init|=
name|getLocalDirsPathPermissionsMap
argument_list|(
name|lfs
argument_list|,
name|localDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|entry
range|:
name|pathPermissionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fs
parameter_list|)
block|{
name|status
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|lfs
operator|.
name|mkdir
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|status
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FsPermission
name|perms
init|=
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|perms
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|setPermission
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getInitializedLocalDirs (FileContext lfs, List<String> dirs)
specifier|synchronized
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getInitializedLocalDirs
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|checkFailedDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
try|try
block|{
name|checkLocalDir
argument_list|(
name|lfs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|checkFailedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|dir
range|:
name|checkFailedDirs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to initialize "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|initializeLocalDir
argument_list|(
name|lfs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|checkLocalDir
argument_list|(
name|lfs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
name|dirs
return|;
block|}
DECL|method|createDir (FileContext localFs, Path dir, FsPermission perm)
specifier|private
name|void
name|createDir
parameter_list|(
name|FileContext
name|localFs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|createDir
argument_list|(
name|localFs
argument_list|,
name|dir
operator|.
name|getParent
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdir
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|equals
argument_list|(
name|perm
operator|.
name|applyUMask
argument_list|(
name|localFs
operator|.
name|getUMask
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|localFs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

