begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.utils
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|zk
operator|.
name|BlockingZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|zk
operator|.
name|ZKIntegration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|utils
operator|.
name|KeysForTests
operator|.
name|USERNAME
import|;
end_import

begin_comment
comment|/**  * Base class for mini cluster tests that use Zookeeper.  */
end_comment

begin_class
DECL|class|YarnZKMiniClusterTestBase
specifier|public
specifier|abstract
class|class
name|YarnZKMiniClusterTestBase
extends|extends
name|YarnMiniClusterTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnZKMiniClusterTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|microZKCluster
specifier|private
name|MicroZKCluster
name|microZKCluster
decl_stmt|;
DECL|method|stopMiniCluster ()
specifier|public
name|void
name|stopMiniCluster
parameter_list|()
block|{
name|super
operator|.
name|stopMiniCluster
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|microZKCluster
argument_list|)
expr_stmt|;
block|}
DECL|method|createZKIntegrationInstance (String zkQuorum, String clusterName, boolean createClusterPath, boolean canBeReadOnly, int timeout)
specifier|public
name|ZKIntegration
name|createZKIntegrationInstance
parameter_list|(
name|String
name|zkQuorum
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|boolean
name|createClusterPath
parameter_list|,
name|boolean
name|canBeReadOnly
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|sessionTimeout
init|=
name|ZKIntegration
operator|.
name|SESSION_TIMEOUT
decl_stmt|;
name|BlockingZKWatcher
name|watcher
init|=
operator|new
name|BlockingZKWatcher
argument_list|()
decl_stmt|;
name|ZKIntegration
name|zki
init|=
name|ZKIntegration
operator|.
name|newInstance
argument_list|(
name|zkQuorum
argument_list|,
name|USERNAME
argument_list|,
name|clusterName
argument_list|,
name|createClusterPath
argument_list|,
name|canBeReadOnly
argument_list|,
name|watcher
argument_list|,
name|sessionTimeout
argument_list|)
decl_stmt|;
name|boolean
name|fromCache
init|=
name|zki
operator|.
name|init
argument_list|()
decl_stmt|;
comment|//here the callback may or may not have occurred.
comment|//optionally wait for it
if|if
condition|(
name|timeout
operator|>
literal|0
operator|&&
operator|!
name|fromCache
condition|)
block|{
name|watcher
operator|.
name|waitForZKConnection
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|//if we get here, the binding worked
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected: {}"
argument_list|,
name|zki
argument_list|)
expr_stmt|;
return|return
name|zki
return|;
block|}
comment|/**    * Wait for a flag to go true.    * @param connectedFlag    */
DECL|method|waitForZKConnection (AtomicBoolean connectedFlag, int timeout)
specifier|public
name|void
name|waitForZKConnection
parameter_list|(
name|AtomicBoolean
name|connectedFlag
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|connectedFlag
init|)
block|{
if|if
condition|(
operator|!
name|connectedFlag
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for ZK event"
argument_list|)
expr_stmt|;
comment|//wait a bit
name|connectedFlag
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|connectedFlag
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create and start a minicluster with ZK.    * @param name cluster/test name    * @param conf configuration to use    * @param noOfNodeManagers #of NMs    * @param numLocalDirs #of local dirs    * @param numLogDirs #of log dirs    * @param startZK create a ZK micro cluster *THIS IS IGNORED*    * @param startHDFS create an HDFS mini cluster    */
DECL|method|createMiniCluster (String name, YarnConfiguration conf, int noOfNodeManagers, int numLocalDirs, int numLogDirs, boolean startZK, boolean startHDFS)
specifier|protected
name|String
name|createMiniCluster
parameter_list|(
name|String
name|name
parameter_list|,
name|YarnConfiguration
name|conf
parameter_list|,
name|int
name|noOfNodeManagers
parameter_list|,
name|int
name|numLocalDirs
parameter_list|,
name|int
name|numLogDirs
parameter_list|,
name|boolean
name|startZK
parameter_list|,
name|boolean
name|startHDFS
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|buildClustername
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|createMicroZKCluster
argument_list|(
literal|"-"
operator|+
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|getZKBinding
argument_list|()
argument_list|)
expr_stmt|;
comment|//now create the cluster
name|name
operator|=
name|super
operator|.
name|createMiniCluster
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
name|noOfNodeManagers
argument_list|,
name|numLocalDirs
argument_list|,
name|numLogDirs
argument_list|,
name|startHDFS
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
comment|/**    * Create and start a minicluster.    * @param name cluster/test name    * @param conf configuration to use    * @param noOfNodeManagers #of NMs    * @param startZK create a ZK micro cluster    */
DECL|method|createMiniCluster (String name, YarnConfiguration conf, int noOfNodeManagers, boolean startZK)
specifier|protected
name|String
name|createMiniCluster
parameter_list|(
name|String
name|name
parameter_list|,
name|YarnConfiguration
name|conf
parameter_list|,
name|int
name|noOfNodeManagers
parameter_list|,
name|boolean
name|startZK
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMiniCluster
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
name|noOfNodeManagers
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|startZK
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create and start a minicluster with the name from the test method.    * @param conf configuration to use    * @param noOfNodeManagers #of NMs    * @param startZK create a ZK micro cluster    */
DECL|method|createMiniCluster (YarnConfiguration conf, int noOfNodeManagers, boolean startZK)
specifier|protected
name|String
name|createMiniCluster
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
name|int
name|noOfNodeManagers
parameter_list|,
name|boolean
name|startZK
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMiniCluster
argument_list|(
literal|""
argument_list|,
name|conf
argument_list|,
name|noOfNodeManagers
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|startZK
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createMicroZKCluster (String name, Configuration conf)
specifier|public
name|void
name|createMicroZKCluster
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|microZKCluster
operator|=
operator|new
name|MicroZKCluster
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|microZKCluster
operator|.
name|createCluster
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHasZKCluster ()
specifier|public
name|void
name|assertHasZKCluster
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|microZKCluster
argument_list|)
expr_stmt|;
block|}
DECL|method|getZKBinding ()
specifier|public
name|String
name|getZKBinding
parameter_list|()
block|{
if|if
condition|(
name|microZKCluster
operator|==
literal|null
condition|)
block|{
return|return
literal|"localhost:1"
return|;
block|}
else|else
block|{
return|return
name|microZKCluster
operator|.
name|getZkBindingString
argument_list|()
return|;
block|}
block|}
comment|/**    * CLI args include all the ZK bindings needed.    * @return    */
DECL|method|getExtraCLIArgs ()
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getExtraCLIArgs
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-D"
argument_list|,
name|define
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|getZKBinding
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

