begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|AgentProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestMetainfoParser
specifier|public
class|class
name|TestMetainfoParser
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMetainfoParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|METAINFO_XML
specifier|public
specifier|static
specifier|final
name|String
name|METAINFO_XML
init|=
literal|"/org/apache/slider/providers/agent/application/metadata/metainfo.xml"
decl_stmt|;
annotation|@
name|Test
DECL|method|testParse ()
specifier|public
name|void
name|testParse
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|resStream
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|METAINFO_XML
argument_list|)
decl_stmt|;
name|MetainfoParser
name|parser
init|=
operator|new
name|MetainfoParser
argument_list|()
decl_stmt|;
name|Metainfo
name|metainfo
init|=
name|parser
operator|.
name|fromXmlStream
argument_list|(
name|resStream
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|metainfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|metainfo
operator|.
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
name|Application
name|application
init|=
name|metainfo
operator|.
name|getApplication
argument_list|()
decl_stmt|;
assert|assert
literal|"STORM"
operator|.
name|equals
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
assert|;
assert|assert
literal|6
operator|==
name|application
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
assert|;
name|OSPackage
name|pkg
init|=
name|application
operator|.
name|getOSSpecifics
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPackages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
literal|"tarball"
operator|.
name|equals
argument_list|(
name|pkg
operator|.
name|getType
argument_list|()
argument_list|)
assert|;
assert|assert
literal|"files/apache-storm-0.9.1.2.1.1.0-237.tar.gz"
operator|.
name|equals
argument_list|(
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
assert|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|comp
operator|!=
literal|null
operator|&&
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NIMBUS"
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|getComponentExports
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|!=
literal|null
operator|&&
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SUPERVISOR"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|getComponentExports
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|!=
literal|null
operator|&&
name|comp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ANOTHER_COMPONENT"
argument_list|)
condition|)
block|{
assert|assert
literal|2
operator|==
name|comp
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
assert|;
assert|assert
literal|"start command"
operator|.
name|equals
argument_list|(
name|comp
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExec
argument_list|()
argument_list|)
assert|;
assert|assert
literal|"START"
operator|.
name|equals
argument_list|(
name|comp
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
assert|;
assert|assert
literal|"stop command"
operator|.
name|equals
argument_list|(
name|comp
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getExec
argument_list|()
argument_list|)
assert|;
assert|assert
literal|"STOP"
operator|.
name|equals
argument_list|(
name|comp
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
assert|;
block|}
block|}
assert|assert
name|found
assert|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getConfigFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
literal|1
operator|==
name|application
operator|.
name|getPackages
argument_list|()
operator|.
name|size
argument_list|()
assert|;
name|Package
name|p
init|=
name|application
operator|.
name|getPackages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
literal|"tarball"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|)
assert|;
assert|assert
literal|"test-tarball-name.tgz"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testJsonParse ()
specifier|public
name|void
name|testJsonParse
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|metaInfo1_json
init|=
literal|"{\n"
operator|+
literal|"\"schemaVersion\":\"2.2\",\n"
operator|+
literal|"\"application\":{\n"
operator|+
literal|"\"name\": \"MEMCACHED\","
operator|+
literal|"\"exportGroups\": ["
operator|+
literal|"{"
operator|+
literal|"\"name\": \"Servers\","
operator|+
literal|"\"exports\": ["
operator|+
literal|"{"
operator|+
literal|"\"name\": \"host_port\","
operator|+
literal|"\"value\": \"${MEMCACHED_HOST}:${site.global.port}\""
operator|+
literal|"}"
operator|+
literal|"]"
operator|+
literal|"}"
operator|+
literal|"],"
operator|+
literal|"\"components\": ["
operator|+
literal|"{"
operator|+
literal|"\"name\": \"MEMCACHED\","
operator|+
literal|"\"compExports\": \"Servers-host_port\","
operator|+
literal|"\"commands\": ["
operator|+
literal|"{"
operator|+
literal|"\"exec\": \"java -classpath /usr/myapps/memcached/*:/usr/lib/hadoop/lib/* com.thimbleware.jmemcached.Main\""
operator|+
literal|"}"
operator|+
literal|"]"
operator|+
literal|"},"
operator|+
literal|"{"
operator|+
literal|"\"name\": \"MEMCACHED2\","
operator|+
literal|"\"commands\": ["
operator|+
literal|"{"
operator|+
literal|"\"exec\": \"scripts/config.py\","
operator|+
literal|"\"type\": \"PYTHON\","
operator|+
literal|"\"name\": \"CONFIGURE\""
operator|+
literal|"}"
operator|+
literal|"],"
operator|+
literal|"\"dockerContainers\": ["
operator|+
literal|"{"
operator|+
literal|"\"name\": \"redis\","
operator|+
literal|"\"image\": \"dockerhub/redis\","
operator|+
literal|"\"options\": \"-net=bridge\","
operator|+
literal|"\"mounts\": ["
operator|+
literal|"{"
operator|+
literal|"\"containerMount\": \"/tmp/conf\","
operator|+
literal|"\"hostMount\": \"{$conf:@//site/global/app_root}/conf\""
operator|+
literal|"}"
operator|+
literal|"]"
operator|+
literal|"}"
operator|+
literal|"]"
operator|+
literal|"}"
operator|+
literal|"]"
operator|+
literal|"}"
operator|+
literal|"}"
decl_stmt|;
name|MetainfoParser
name|parser
init|=
operator|new
name|MetainfoParser
argument_list|()
decl_stmt|;
name|Metainfo
name|mInfo
init|=
name|parser
operator|.
name|fromJsonString
argument_list|(
name|metaInfo1_json
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.2"
argument_list|,
name|mInfo
operator|.
name|getSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|mInfo
operator|.
name|getApplication
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MEMCACHED"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExportGroup
argument_list|>
name|egs
init|=
name|app
operator|.
name|getExportGroups
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|egs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExportGroup
name|eg
init|=
name|egs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Servers"
argument_list|,
name|eg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Export
argument_list|>
name|exports
init|=
name|eg
operator|.
name|getExports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Export
name|export
init|=
name|exports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host_port"
argument_list|,
name|export
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"${MEMCACHED_HOST}:${site.global.port}"
argument_list|,
name|export
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Component
argument_list|>
name|components
init|=
name|app
operator|.
name|getComponents
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|components
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|c1
init|=
name|mInfo
operator|.
name|getApplicationComponent
argument_list|(
literal|"MEMCACHED"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MEMCACHED"
argument_list|,
name|c1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Servers-host_port"
argument_list|,
name|c1
operator|.
name|getCompExports
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ComponentCommand
name|cmd
init|=
name|c1
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"START"
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"SHELL"
argument_list|,
name|cmd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"java -classpath /usr/myapps/memcached/*:/usr/lib/hadoop/lib/* com.thimbleware.jmemcached.Main"
argument_list|,
name|cmd
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|c2
init|=
name|mInfo
operator|.
name|getApplicationComponent
argument_list|(
literal|"MEMCACHED2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MEMCACHED2"
argument_list|,
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c2
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|=
name|c2
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CONFIGURE"
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"PYTHON"
argument_list|,
name|cmd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"scripts/config.py"
argument_list|,
name|cmd
operator|.
name|getExec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

