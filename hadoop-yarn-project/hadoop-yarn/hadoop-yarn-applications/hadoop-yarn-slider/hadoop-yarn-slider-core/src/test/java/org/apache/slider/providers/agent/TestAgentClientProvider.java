begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|tools
operator|.
name|TestUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestAgentClientProvider
specifier|public
class|class
name|TestAgentClientProvider
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAgentClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetApplicationTags ()
specifier|public
name|void
name|testGetApplicationTags
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|SliderFileSystem
name|sliderFileSystem
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|AgentClientProvider
name|provider
init|=
operator|new
name|AgentClientProvider
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|zipFileName
init|=
name|TestUtility
operator|.
name|createAppPackage
argument_list|(
name|folder
argument_list|,
literal|"testpkg"
argument_list|,
literal|"test.zip"
argument_list|,
literal|"target/test-classes/org/apache/slider/common/tools/test"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|provider
operator|.
name|getApplicationTags
argument_list|(
name|sliderFileSystem
argument_list|,
name|zipFileName
argument_list|)
decl_stmt|;
assert|assert
name|tags
operator|!=
literal|null
assert|;
assert|assert
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
assert|;
assert|assert
name|tags
operator|.
name|contains
argument_list|(
literal|"Name: STORM"
argument_list|)
assert|;
assert|assert
name|tags
operator|.
name|contains
argument_list|(
literal|"Description: Apache Hadoop Stream processing framework"
argument_list|)
assert|;
assert|assert
name|tags
operator|.
name|contains
argument_list|(
literal|"Version: 0.9.1.2.1"
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testValidateInstanceDefinition ()
specifier|public
name|void
name|testValidateInstanceDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|AgentClientProvider
name|provider
init|=
operator|new
name|AgentClientProvider
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|AggregateConf
name|instanceDefinition
init|=
operator|new
name|AggregateConf
argument_list|()
decl_stmt|;
try|try
block|{
name|provider
operator|.
name|validateInstanceDefinition
argument_list|(
name|instanceDefinition
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Should fail with BadConfigException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadConfigException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Application definition must be provided"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

