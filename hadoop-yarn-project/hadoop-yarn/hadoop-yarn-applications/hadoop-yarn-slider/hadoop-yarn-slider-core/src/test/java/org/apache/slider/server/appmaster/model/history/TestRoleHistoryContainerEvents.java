begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.model.history
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|BaseMockAppStateTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|model
operator|.
name|mock
operator|.
name|MockNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|ContainerPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test container events at the role history level -one below  * the App State.  */
end_comment

begin_class
DECL|class|TestRoleHistoryContainerEvents
specifier|public
class|class
name|TestRoleHistoryContainerEvents
extends|extends
name|BaseMockAppStateTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRoleHistoryContainerEvents
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"TestRoleHistoryContainerEvents"
return|;
block|}
DECL|field|age1Active4
specifier|private
name|NodeInstance
name|age1Active4
decl_stmt|;
DECL|field|age2Active2
specifier|private
name|NodeInstance
name|age2Active2
decl_stmt|;
DECL|field|age3Active0
specifier|private
name|NodeInstance
name|age3Active0
decl_stmt|;
DECL|field|age4Active1
specifier|private
name|NodeInstance
name|age4Active1
decl_stmt|;
DECL|field|age2Active0
specifier|private
name|NodeInstance
name|age2Active0
decl_stmt|;
DECL|field|roleHistory
specifier|private
name|RoleHistory
name|roleHistory
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|method|requestContainer (RoleStatus roleStatus)
name|AMRMClient
operator|.
name|ContainerRequest
name|requestContainer
parameter_list|(
name|RoleStatus
name|roleStatus
parameter_list|)
block|{
return|return
name|roleHistory
operator|.
name|requestContainerForRole
argument_list|(
name|roleStatus
argument_list|)
operator|.
name|getIssuedRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|age1Active4
operator|=
name|nodeInstance
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age2Active2
operator|=
name|nodeInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|age3Active0
operator|=
name|nodeInstance
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age4Active1
operator|=
name|nodeInstance
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|age2Active0
operator|=
name|nodeInstance
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|roleHistory
operator|=
name|appState
operator|.
name|getRoleHistory
argument_list|()
expr_stmt|;
name|roleHistory
operator|.
name|insert
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|age2Active2
argument_list|,
name|age2Active0
argument_list|,
name|age4Active1
argument_list|,
name|age1Active4
argument_list|,
name|age3Active0
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|buildRecentNodeLists
argument_list|()
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|ResourceKeys
operator|.
name|DEF_YARN_CORES
argument_list|,
name|ResourceKeys
operator|.
name|DEF_YARN_MEMORY
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testFindAndCreate ()
specifier|public
name|void
name|testFindAndCreate
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|requestNodes
init|=
name|request
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|requestNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|requestNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onContainerAssigned
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
operator|new
name|RoleInstance
argument_list|(
name|container
argument_list|)
decl_stmt|;
comment|//start it
name|roleHistory
operator|.
name|onContainerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|//later, declare that it started
name|roleHistory
operator|.
name|onContainerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testCreateAndRelease ()
specifier|public
name|void
name|testCreateAndRelease
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|roleStatus
init|=
name|getRole1Status
argument_list|()
decl_stmt|;
comment|//verify it is empty
name|assertTrue
argument_list|(
name|roleHistory
operator|.
name|listActiveNodes
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|//pick an idle host
name|String
name|hostname
init|=
name|age3Active0
operator|.
name|hostname
decl_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
name|roleHistory
operator|.
name|onContainerAssigned
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
operator|new
name|RoleInstance
argument_list|(
name|container
argument_list|)
decl_stmt|;
comment|//start it
name|roleHistory
operator|.
name|onContainerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|//later, declare that it started
name|roleHistory
operator|.
name|onContainerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
comment|// now pick that instance to destroy
name|List
argument_list|<
name|NodeInstance
argument_list|>
name|activeNodes
init|=
name|roleHistory
operator|.
name|listActiveNodes
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|activeNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeInstance
name|target
init|=
name|activeNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|target
argument_list|,
name|allocated
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onContainerReleaseSubmitted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getReleasing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// release completed
name|roleHistory
operator|.
name|onReleaseCompleted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getReleasing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify it is empty
name|assertTrue
argument_list|(
name|roleHistory
operator|.
name|listActiveNodes
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// ask for a container and expect to get the recently released one
name|AMRMClient
operator|.
name|ContainerRequest
name|request2
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes2
init|=
name|request2
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodes2
argument_list|)
expr_stmt|;
name|String
name|hostname2
init|=
name|nodes2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//pick an idle host
name|assertEquals
argument_list|(
name|hostname2
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testStartWithoutWarning ()
specifier|public
name|void
name|testStartWithoutWarning
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//pick an idle host
name|String
name|hostname
init|=
name|age3Active0
operator|.
name|hostname
decl_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ContainerPriority
operator|.
name|createPriority
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|//tell RH that it started
name|roleHistory
operator|.
name|onContainerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testStartFailed ()
specifier|public
name|void
name|testStartFailed
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"req {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|request
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
name|roleHistory
operator|.
name|onContainerAssigned
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
operator|new
name|RoleInstance
argument_list|(
name|container
argument_list|)
decl_stmt|;
comment|//start it
name|roleHistory
operator|.
name|onContainerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|//later, declare that it failed on startup
name|assertFalse
argument_list|(
name|roleHistory
operator|.
name|onNodeManagerContainerStartFailed
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testStartFailedWithoutWarning ()
specifier|public
name|void
name|testStartFailedWithoutWarning
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|roleHistory
operator|.
name|onNodeManagerContainerStartFailed
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStartFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testContainerFailed ()
specifier|public
name|void
name|testContainerFailed
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"fail a container without declaring it as starting"
argument_list|)
expr_stmt|;
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onContainerAssigned
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
operator|new
name|RoleInstance
argument_list|(
name|container
argument_list|)
decl_stmt|;
comment|//start it
name|roleHistory
operator|.
name|onContainerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onContainerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
comment|//later, declare that it failed
name|roleHistory
operator|.
name|onFailedContainer
argument_list|(
name|container
argument_list|,
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testContainerFailedWithoutWarning ()
specifier|public
name|void
name|testContainerFailedWithoutWarning
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"fail a container without declaring it as starting"
argument_list|)
expr_stmt|;
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
comment|//build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onFailedContainer
argument_list|(
name|container
argument_list|,
literal|false
argument_list|,
name|ContainerOutcome
operator|.
name|Failed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roleEntry
operator|.
name|getLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testAllocationListPrep ()
specifier|public
name|void
name|testAllocationListPrep
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"test prepareAllocationList"
argument_list|)
expr_stmt|;
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|requestContainer
argument_list|(
name|roleStatus
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname
argument_list|,
name|age3Active0
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|MockContainer
name|container1
init|=
name|factory
operator|.
name|newContainer
argument_list|()
decl_stmt|;
name|container1
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MockContainer
name|container2
init|=
name|factory
operator|.
name|newContainer
argument_list|()
decl_stmt|;
name|container2
operator|.
name|setNodeId
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|getRole1Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// put containers in List with role == 1 first
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Container
operator|)
name|container2
argument_list|,
operator|(
name|Container
operator|)
name|container1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|sortedContainers
init|=
name|roleHistory
operator|.
name|prepareAllocationList
argument_list|(
name|containers
argument_list|)
decl_stmt|;
comment|// verify that the first container has role == 0 after sorting
name|MockContainer
name|c1
init|=
operator|(
name|MockContainer
operator|)
name|sortedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRole0Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|c1
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|MockContainer
name|c2
init|=
operator|(
name|MockContainer
operator|)
name|sortedContainers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRole1Status
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|c2
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testNodeUpdated ()
specifier|public
name|void
name|testNodeUpdated
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"fail a node"
argument_list|)
expr_stmt|;
name|RoleStatus
name|roleStatus
init|=
name|getRole0Status
argument_list|()
decl_stmt|;
name|AMRMClient
operator|.
name|ContainerRequest
name|request
init|=
name|roleHistory
operator|.
name|requestContainerForRole
argument_list|(
name|roleStatus
argument_list|)
operator|.
name|getIssuedRequest
argument_list|()
decl_stmt|;
name|String
name|hostname
init|=
name|request
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|age3Active0
operator|.
name|hostname
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
comment|// build a container
name|MockContainer
name|container
init|=
name|factory
operator|.
name|newContainer
argument_list|(
operator|new
name|MockNodeId
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
name|roleHistory
operator|.
name|onContainerAssigned
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|NodeInstance
name|allocated
init|=
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|NodeEntry
name|roleEntry
init|=
name|allocated
operator|.
name|get
argument_list|(
name|roleStatus
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roleEntry
operator|.
name|getStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|roleEntry
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RoleInstance
name|ri
init|=
operator|new
name|RoleInstance
argument_list|(
name|container
argument_list|)
decl_stmt|;
comment|// start it
name|roleHistory
operator|.
name|onContainerStartSubmitted
argument_list|(
name|container
argument_list|,
name|ri
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onContainerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|int
name|startSize
init|=
name|nodemap
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// now send a list of updated (failed) nodes event
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodesUpdated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeReport
name|nodeReport
init|=
name|NodeReport
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nodesUpdated
operator|.
name|add
argument_list|(
name|nodeReport
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onNodesUpdated
argument_list|(
name|nodesUpdated
argument_list|)
expr_stmt|;
name|nodemap
operator|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
expr_stmt|;
name|int
name|endSize
init|=
name|nodemap
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// as even unused nodes are added to the list, we expect the map size to
comment|// be>1
name|assertTrue
argument_list|(
name|startSize
operator|<=
name|endSize
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodemap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
operator|.
name|isOnline
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a failure of a node we've never head of
name|String
name|newhost
init|=
literal|"newhost"
decl_stmt|;
name|nodesUpdated
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeReport
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
name|newhost
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|roleHistory
operator|.
name|onNodesUpdated
argument_list|(
name|nodesUpdated
argument_list|)
expr_stmt|;
name|NodeMap
name|nodemap2
init|=
name|roleHistory
operator|.
name|cloneNodemap
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodemap2
operator|.
name|get
argument_list|(
name|newhost
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodemap2
operator|.
name|get
argument_list|(
name|newhost
argument_list|)
operator|.
name|isOnline
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

