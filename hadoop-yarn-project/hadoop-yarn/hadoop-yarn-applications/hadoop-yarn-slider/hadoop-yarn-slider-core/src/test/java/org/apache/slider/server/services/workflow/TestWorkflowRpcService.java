begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_class
DECL|class|TestWorkflowRpcService
specifier|public
class|class
name|TestWorkflowRpcService
extends|extends
name|WorkflowServiceTestBase
block|{
annotation|@
name|Test
DECL|method|testCreateMockRPCService ()
specifier|public
name|void
name|testCreateMockRPCService
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRPC
name|rpc
init|=
operator|new
name|MockRPC
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|started
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
name|rpc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|stopped
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLifecycle ()
specifier|public
name|void
name|testLifecycle
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRPC
name|rpc
init|=
operator|new
name|MockRPC
argument_list|()
decl_stmt|;
name|WorkflowRpcService
name|svc
init|=
operator|new
name|WorkflowRpcService
argument_list|(
literal|"test"
argument_list|,
name|rpc
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|started
argument_list|)
expr_stmt|;
name|svc
operator|.
name|getConnectAddress
argument_list|()
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|stopped
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartFailure ()
specifier|public
name|void
name|testStartFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRPC
name|rpc
init|=
operator|new
name|MockRPC
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|failOnStart
operator|=
literal|true
expr_stmt|;
name|WorkflowRpcService
name|svc
init|=
operator|new
name|WorkflowRpcService
argument_list|(
literal|"test"
argument_list|,
name|rpc
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"failOnStart"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|stopped
argument_list|)
expr_stmt|;
block|}
DECL|class|MockRPC
specifier|private
specifier|static
class|class
name|MockRPC
extends|extends
name|Server
block|{
DECL|field|stopped
specifier|public
name|boolean
name|stopped
decl_stmt|;
DECL|field|started
specifier|public
name|boolean
name|started
decl_stmt|;
DECL|field|failOnStart
specifier|public
name|boolean
name|failOnStart
decl_stmt|;
DECL|method|MockRPC ()
specifier|private
name|MockRPC
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|failOnStart
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failOnStart"
argument_list|)
throw|;
block|}
name|started
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getListenerAddress ()
specifier|public
specifier|synchronized
name|InetSocketAddress
name|getListenerAddress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getListenerAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|call (RPC.RpcKind rpcKind, String protocol, Writable param, long receiveTime)
specifier|public
name|Writable
name|call
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|,
name|Writable
name|param
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

