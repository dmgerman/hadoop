begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.tools
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test finding a port in a range.  */
end_comment

begin_class
DECL|class|TestPortScan
specifier|public
class|class
name|TestPortScan
block|{
annotation|@
name|Test
DECL|method|testScanPorts ()
specifier|public
name|void
name|testScanPorts
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServerSocket
name|server
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|serverPort
init|=
name|server
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|SliderUtils
operator|.
name|isPortAvailable
argument_list|(
name|serverPort
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|SliderUtils
operator|.
name|findFreePort
argument_list|(
name|serverPort
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|port
operator|>
literal|0
operator|&&
name|serverPort
operator|<
name|port
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRequestedPortsLogic ()
specifier|public
name|void
name|testRequestedPortsLogic
parameter_list|()
throws|throws
name|Throwable
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|"5,6,8-10, 11,14 ,20 - 22"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|portScanner
operator|.
name|getRemainingPortsToCheck
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedPorts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|14
argument_list|,
literal|20
argument_list|,
literal|21
argument_list|,
literal|22
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPorts
argument_list|,
name|ports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestedPortsOutOfOrder ()
specifier|public
name|void
name|testRequestedPortsOutOfOrder
parameter_list|()
throws|throws
name|Throwable
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|"8-10,5,6, 11,20 - 22, 14 "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|portScanner
operator|.
name|getRemainingPortsToCheck
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedPorts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|14
argument_list|,
literal|20
argument_list|,
literal|21
argument_list|,
literal|22
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPorts
argument_list|,
name|ports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindAvailablePortInRange ()
specifier|public
name|void
name|testFindAvailablePortInRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServerSocket
name|server
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|serverPort
init|=
name|server
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|""
operator|+
operator|(
name|serverPort
operator|-
literal|1
operator|)
operator|+
literal|"-"
operator|+
operator|(
name|serverPort
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|portScanner
operator|.
name|getAvailablePort
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|port
argument_list|,
name|serverPort
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|port
operator|>=
name|serverPort
operator|-
literal|1
operator|&&
name|port
operator|<=
name|serverPort
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFindAvailablePortInList ()
specifier|public
name|void
name|testFindAvailablePortInList
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServerSocket
name|server
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|serverPort
init|=
name|server
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|""
operator|+
operator|(
name|serverPort
operator|-
literal|1
operator|)
operator|+
literal|", "
operator|+
operator|(
name|serverPort
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|portScanner
operator|.
name|getAvailablePort
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|port
argument_list|,
name|serverPort
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|port
operator|==
name|serverPort
operator|-
literal|1
operator|||
name|port
operator|==
name|serverPort
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoAvailablePorts ()
specifier|public
name|void
name|testNoAvailablePorts
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServerSocket
name|server1
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ServerSocket
name|server2
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|serverPort1
init|=
name|server1
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|int
name|serverPort2
init|=
name|server2
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|""
operator|+
name|serverPort1
operator|+
literal|", "
operator|+
name|serverPort2
argument_list|)
expr_stmt|;
try|try
block|{
name|portScanner
operator|.
name|getAvailablePort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected SliderException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
finally|finally
block|{
name|server1
operator|.
name|close
argument_list|()
expr_stmt|;
name|server2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPortRemovedFromRange ()
specifier|public
name|void
name|testPortRemovedFromRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServerSocket
name|server
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|serverPort
init|=
name|server
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|""
operator|+
operator|(
name|serverPort
operator|-
literal|1
operator|)
operator|+
literal|"-"
operator|+
operator|(
name|serverPort
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|portScanner
operator|.
name|getAvailablePort
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|port
argument_list|,
name|serverPort
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|port
operator|>=
name|serverPort
operator|-
literal|1
operator|&&
name|port
operator|<=
name|serverPort
operator|+
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|portScanner
operator|.
name|getRemainingPortsToCheck
argument_list|()
operator|.
name|contains
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadConfigException
operator|.
name|class
argument_list|)
DECL|method|testBadRange ()
specifier|public
name|void
name|testBadRange
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
comment|// note the em dash
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|"2000â2010"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadConfigException
operator|.
name|class
argument_list|)
DECL|method|testEndBeforeStart ()
specifier|public
name|void
name|testEndBeforeStart
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|"2001-2000"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadConfigException
operator|.
name|class
argument_list|)
DECL|method|testEmptyRange ()
specifier|public
name|void
name|testEmptyRange
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadConfigException
operator|.
name|class
argument_list|)
DECL|method|testBlankRange ()
specifier|public
name|void
name|testBlankRange
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExtraComma ()
specifier|public
name|void
name|testExtraComma
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|"2000-2001, "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|portScanner
operator|.
name|getRemainingPortsToCheck
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedPorts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|2000
argument_list|,
literal|2001
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPorts
argument_list|,
name|ports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExtraCommas ()
specifier|public
name|void
name|testExtraCommas
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|PortScanner
name|portScanner
init|=
operator|new
name|PortScanner
argument_list|()
decl_stmt|;
name|portScanner
operator|.
name|setPortRange
argument_list|(
literal|"2000-2001,, ,2003,"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|portScanner
operator|.
name|getRemainingPortsToCheck
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedPorts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|2000
argument_list|,
literal|2001
argument_list|,
literal|2003
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPorts
argument_list|,
name|ports
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

