begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|RunJobCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|StorageKeyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|SubmarineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|YarnServiceJobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|YarnServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestYarnServiceRunJobCli
specifier|public
class|class
name|TestYarnServiceRunJobCli
block|{
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|SubmarineLogs
operator|.
name|verboseOff
argument_list|()
expr_stmt|;
name|AppAdminClient
name|serviceClient
init|=
name|mock
argument_list|(
name|AppAdminClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|serviceClient
operator|.
name|actionLaunch
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EXIT_SUCCESS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|serviceClient
operator|.
name|getStatusString
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"{\"id\": \"application_1234_1\"}"
argument_list|)
expr_stmt|;
name|YarnServiceUtils
operator|.
name|setStubServiceClient
argument_list|(
name|serviceClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrintHelp ()
specifier|public
name|void
name|testPrintHelp
parameter_list|()
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|runJobCli
operator|.
name|printUsages
argument_list|()
expr_stmt|;
block|}
DECL|method|getServiceSpecFromJobSubmitter (JobSubmitter jobSubmitter)
specifier|private
name|Service
name|getServiceSpecFromJobSubmitter
parameter_list|(
name|JobSubmitter
name|jobSubmitter
parameter_list|)
block|{
return|return
operator|(
operator|(
name|YarnServiceJobSubmitter
operator|)
name|jobSubmitter
operator|)
operator|.
name|getServiceSpec
argument_list|()
return|;
block|}
DECL|method|commonVerifyDistributedTrainingSpec (Service serviceSpec)
specifier|private
name|void
name|commonVerifyDistributedTrainingSpec
parameter_list|(
name|Service
name|serviceSpec
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|PS
operator|.
name|getComponentName
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Component
name|primaryWorkerComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|workerComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|workerComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|workerComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|psComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|PS
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|psComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|psComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"worker.image"
argument_list|,
name|workerComp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ps.image"
argument_list|,
name|psComp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQuicklink (Service serviceSpec, Map<String, String> expectedQuicklinks)
specifier|private
name|void
name|verifyQuicklink
parameter_list|(
name|Service
name|serviceSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedQuicklinks
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actualQuicklinks
init|=
name|serviceSpec
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualQuicklinks
operator|==
literal|null
operator|||
name|actualQuicklinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedQuicklinks
operator|==
literal|null
operator|||
name|expectedQuicklinks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedQuicklinks
operator|.
name|size
argument_list|()
argument_list|,
name|actualQuicklinks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedEntry
range|:
name|expectedQuicklinks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actualQuicklinks
operator|.
name|containsKey
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// $USER could be changed in different environment. so replace $USER by
comment|// "user"
name|String
name|expectedValue
init|=
name|expectedEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|actualValue
init|=
name|actualQuicklinks
operator|.
name|get
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|actualValue
operator|=
name|actualValue
operator|.
name|replaceAll
argument_list|(
name|userName
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForDistributedTraining ()
specifier|public
name|void
name|testBasicRunJobForDistributedTraining
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForDistributedTrainingWithTensorboard ()
specifier|public
name|void
name|testBasicRunJobForDistributedTrainingWithTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--tensorboard"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceSpec
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|YarnServiceJobSubmitter
operator|.
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
literal|"http://tensorboard-0.my-job.username.null:6006"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTraining ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTraining
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonTestSingleNodeTraining
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTensorboardOnlyService ()
specifier|public
name|void
name|testTensorboardOnlyService
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"0"
block|,
literal|"--tensorboard"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceSpec
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTensorboardOnlyServiceWithCustomizedDockerImageAndResourceCkptPath ()
specifier|public
name|void
name|testTensorboardOnlyServiceWithCustomizedDockerImageAndResourceCkptPath
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"0"
block|,
literal|"--tensorboard"
block|,
literal|"--verbose"
block|,
literal|"--tensorboard_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--tensorboard_docker_image"
block|,
literal|"tb_docker_image:001"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceSpec
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTensorboardOnlyServiceWithCustomizedDockerImageAndResource ()
specifier|public
name|void
name|testTensorboardOnlyServiceWithCustomizedDockerImageAndResource
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--num_workers"
block|,
literal|"0"
block|,
literal|"--tensorboard"
block|,
literal|"--verbose"
block|,
literal|"--tensorboard_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--tensorboard_docker_image"
block|,
literal|"tb_docker_image:001"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceSpec
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|YarnServiceJobSubmitter
operator|.
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
literal|"http://tensorboard-0.my-job.username.null:6006"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|commonTestSingleNodeTraining (Service serviceSpec)
specifier|private
name|void
name|commonTestSingleNodeTraining
parameter_list|(
name|Service
name|serviceSpec
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Component
name|primaryWorkerComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTensorboardComponent (RunJobCli runJobCli, Service serviceSpec, Resource resource)
specifier|private
name|void
name|verifyTensorboardComponent
parameter_list|(
name|RunJobCli
name|runJobCli
parameter_list|,
name|Service
name|serviceSpec
parameter_list|,
name|Resource
name|resource
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|TENSORBOARD
operator|.
name|getComponentName
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Component
name|tensorboardComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TaskType
operator|.
name|TENSORBOARD
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tensorboardComp
operator|.
name|getNumberOfContainers
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|tensorboardComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|tensorboardComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"./run-TENSORBOARD.sh"
argument_list|,
name|tensorboardComp
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check docker image
if|if
condition|(
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
operator|.
name|getTensorboardDockerImage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
operator|.
name|getTensorboardDockerImage
argument_list|()
argument_list|,
name|tensorboardComp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|tensorboardComp
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|YarnServiceJobSubmitter
name|yarnServiceJobSubmitter
init|=
operator|(
name|YarnServiceJobSubmitter
operator|)
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
decl_stmt|;
name|String
name|expectedLaunchScript
init|=
literal|"#!/bin/bash\n"
operator|+
literal|"echo \"CLASSPATH:$CLASSPATH\"\n"
operator|+
literal|"echo \"HADOOP_CONF_DIR:$HADOOP_CONF_DIR\"\n"
operator|+
literal|"echo \"HADOOP_TOKEN_FILE_LOCATION:$HADOOP_TOKEN_FILE_LOCATION\"\n"
operator|+
literal|"echo \"JAVA_HOME:$JAVA_HOME\"\n"
operator|+
literal|"echo \"LD_LIBRARY_PATH:$LD_LIBRARY_PATH\"\n"
operator|+
literal|"echo \"HADOOP_HDFS_HOME:$HADOOP_HDFS_HOME\"\n"
operator|+
literal|"export LC_ALL=C&& tensorboard --logdir="
operator|+
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
operator|.
name|getCheckpointPath
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|verifyLaunchScriptForComponet
argument_list|(
name|yarnServiceJobSubmitter
argument_list|,
name|serviceSpec
argument_list|,
name|TaskType
operator|.
name|TENSORBOARD
argument_list|,
name|expectedLaunchScript
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLaunchScriptForComponet ( YarnServiceJobSubmitter yarnServiceJobSubmitter, Service serviceSpec, TaskType taskType, String expectedLaunchScriptContent)
specifier|private
name|void
name|verifyLaunchScriptForComponet
parameter_list|(
name|YarnServiceJobSubmitter
name|yarnServiceJobSubmitter
parameter_list|,
name|Service
name|serviceSpec
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|expectedLaunchScriptContent
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentToLocalLaunchScriptMap
init|=
name|yarnServiceJobSubmitter
operator|.
name|getComponentToLocalLaunchScriptPath
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|componentToLocalLaunchScriptMap
operator|.
name|get
argument_list|(
name|taskType
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|scriptContent
init|=
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedLaunchScriptContent
argument_list|,
name|scriptContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTrainingWithTensorboard ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTrainingWithTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonTestSingleNodeTraining
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceSpec
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTrainingWithGeneratedCheckpoint ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTrainingWithGeneratedCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonTestSingleNodeTraining
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceSpec
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterStorageForTrainingJob ()
specifier|public
name|void
name|testParameterStorageForTrainingJob
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|SubmarineStorage
name|storage
init|=
name|mockClientContext
operator|.
name|getRuntimeFactory
argument_list|()
operator|.
name|getSubmarineStorage
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
init|=
name|storage
operator|.
name|getJobInfoByName
argument_list|(
literal|"my-job"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jobInfo
operator|.
name|get
argument_list|(
name|StorageKeyConstants
operator|.
name|INPUT_PATH
argument_list|)
argument_list|,
literal|"s3://input"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddQuicklinksWithoutTensorboard ()
specifier|public
name|void
name|testAddQuicklinksWithoutTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--quicklink"
block|,
literal|"AAA=http://master-0:8321"
block|,
literal|"--quicklink"
block|,
literal|"BBB=http://worker-0:1234"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"AAA"
argument_list|,
literal|"http://master-0.my-job.username.null:8321"
argument_list|,
literal|"BBB"
argument_list|,
literal|"http://worker-0.my-job.username.null:1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddQuicklinksWithTensorboard ()
specifier|public
name|void
name|testAddQuicklinksWithTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--quicklink"
block|,
literal|"AAA=http://master-0:8321"
block|,
literal|"--quicklink"
block|,
literal|"BBB=http://worker-0:1234"
block|,
literal|"--tensorboard"
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"AAA"
argument_list|,
literal|"http://master-0.my-job.username.null:8321"
argument_list|,
literal|"BBB"
argument_list|,
literal|"http://worker-0.my-job.username.null:1234"
argument_list|,
name|YarnServiceJobSubmitter
operator|.
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
literal|"http://tensorboard-0.my-job.username.null:6006"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Basic test.    * In one hand, create local temp file/dir for hdfs URI in    * local staging dir.    * In the other hand, use MockRemoteDirectoryManager mock    * implementation when check FileStatus or exists of HDFS file/dir    * --localization hdfs:///user/yarn/script1.py:.    * --localization /temp/script2.py:./    * --localization /temp/script2.py:/opt/script.py    */
annotation|@
name|Test
DECL|method|testRunJobWithBasicLocalization ()
specifier|public
name|void
name|testRunJobWithBasicLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUrl
init|=
literal|"hdfs:///user/yarn/script1.py"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|localUrl
init|=
literal|"/temp/script2.py"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"./"
decl_stmt|;
name|String
name|containerLocal3
init|=
literal|"/opt/script.py"
decl_stmt|;
name|String
name|fakeLocalDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
comment|// create local file, we need to put it under local temp dir
name|File
name|localFile1
init|=
operator|new
name|File
argument_list|(
name|fakeLocalDir
argument_list|,
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|localFile1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteDirectoryManager
name|spyRdm
init|=
name|spy
argument_list|(
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|mockClientContext
operator|.
name|setRemoteDirectoryMgr
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
comment|// create remote file in local staging dir to simulate HDFS
name|Path
name|stagingDir
init|=
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
literal|"my-job"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|remoteFile1
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteFile1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localFile1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteFile1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|remoteUrl
operator|+
literal|":"
operator|+
name|containerLocal1
block|,
literal|"--localization"
block|,
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal2
block|,
literal|"--localization"
block|,
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal3
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// No remote dir and hdfs file exists. Ensure download 0 times
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure local original files are not deleted
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localFile1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedSrcLocalization
init|=
name|remoteUrl
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedDstFileName
init|=
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure env value is correct
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|containerLocal3
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal3
operator|+
literal|":rw"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
name|remoteFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|localFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Non HDFS remote URI test.    * --localization https://a/b/1.patch:.    * --localization s3a://a/dir:/opt/mys3dir    */
annotation|@
name|Test
DECL|method|testRunJobWithNonHDFSRemoteLocalization ()
specifier|public
name|void
name|testRunJobWithNonHDFSRemoteLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUri1
init|=
literal|"https://a/b/1.patch"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|remoteUri2
init|=
literal|"s3a://a/s3dir"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"/opt/mys3dir"
decl_stmt|;
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteDirectoryManager
name|spyRdm
init|=
name|spy
argument_list|(
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|mockClientContext
operator|.
name|setRemoteDirectoryMgr
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
comment|// create remote file in local staging dir to simulate HDFS
name|Path
name|stagingDir
init|=
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
literal|"my-job"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|remoteFile1
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteFile1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|remoteDir1
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|remoteDir1File1
init|=
operator|new
name|File
argument_list|(
name|remoteDir1
argument_list|,
literal|"afile"
argument_list|)
decl_stmt|;
name|remoteDir1File1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteFile1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteDir1File1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|remoteDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getRemoteFileSize
argument_list|(
name|remoteUri2
argument_list|)
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|remoteUri1
operator|+
literal|":"
operator|+
name|containerLocal1
block|,
literal|"--localization"
block|,
name|remoteUri2
operator|+
literal|":"
operator|+
name|containerLocal2
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure download remote dir 2 times
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure downloaded temp files are deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure zip file are deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|suffix1
operator|+
literal|".zip"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedSrcLocalization
init|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri1
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedDstFileName
init|=
operator|new
name|Path
argument_list|(
name|remoteUri1
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix1
operator|+
literal|".zip"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|containerLocal2
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure env value is correct
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal2
operator|+
literal|":rw"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
name|remoteDir1File1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteDir1
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test HDFS dir localization.    * --localization hdfs:///user/yarn/mydir:./mydir1    * --localization hdfs:///user/yarn/mydir2:/opt/dir2:rw    * --localization hdfs:///user/yarn/mydir:.    * --localization hdfs:///user/yarn/mydir2:./    */
annotation|@
name|Test
DECL|method|testRunJobWithHdfsDirLocalization ()
specifier|public
name|void
name|testRunJobWithHdfsDirLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUrl
init|=
literal|"hdfs:///user/yarn/mydir"
decl_stmt|;
name|String
name|containerPath
init|=
literal|"./mydir1"
decl_stmt|;
name|String
name|remoteUrl2
init|=
literal|"hdfs:///user/yarn/mydir2"
decl_stmt|;
name|String
name|containPath2
init|=
literal|"/opt/dir2"
decl_stmt|;
name|String
name|containerPath3
init|=
literal|"."
decl_stmt|;
name|String
name|containerPath4
init|=
literal|"./"
decl_stmt|;
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteDirectoryManager
name|spyRdm
init|=
name|spy
argument_list|(
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|mockClientContext
operator|.
name|setRemoteDirectoryMgr
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
comment|// create remote file in local staging dir to simulate HDFS
name|Path
name|stagingDir
init|=
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
literal|"my-job"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|remoteDir1
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|remoteFile1
init|=
operator|new
name|File
argument_list|(
name|remoteDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/1.py"
argument_list|)
decl_stmt|;
name|File
name|remoteFile2
init|=
operator|new
name|File
argument_list|(
name|remoteDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/2.py"
argument_list|)
decl_stmt|;
name|remoteFile1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|remoteFile2
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|remoteDir2
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteDir2
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|remoteFile3
init|=
operator|new
name|File
argument_list|(
name|remoteDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/3.py"
argument_list|)
decl_stmt|;
name|File
name|remoteFile4
init|=
operator|new
name|File
argument_list|(
name|remoteDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/4.py"
argument_list|)
decl_stmt|;
name|remoteFile3
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|remoteFile4
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteDir2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|remoteDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getRemoteFileSize
argument_list|(
name|remoteUrl
argument_list|)
decl_stmt|;
name|String
name|suffix2
init|=
literal|"_"
operator|+
name|remoteDir2
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getRemoteFileSize
argument_list|(
name|remoteUrl2
argument_list|)
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|remoteUrl
operator|+
literal|":"
operator|+
name|containerPath
block|,
literal|"--localization"
block|,
name|remoteUrl2
operator|+
literal|":"
operator|+
name|containPath2
operator|+
literal|":rw"
block|,
literal|"--localization"
block|,
name|remoteUrl
operator|+
literal|":"
operator|+
name|containerPath3
block|,
literal|"--localization"
block|,
name|remoteUrl2
operator|+
literal|":"
operator|+
name|containerPath4
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure download remote dir 4 times
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure downloaded temp files are deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure zip file are deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix1
operator|+
literal|".zip"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix2
operator|+
literal|".zip"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure files will be localized
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The hdfs dir should be download and compress and let YARN to uncompress
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedSrcLocalization
init|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix1
operator|+
literal|".zip"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Relative path in container, but not "." or "./". Use its own name
name|String
name|expectedDstFileName
init|=
operator|new
name|Path
argument_list|(
name|containerPath
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix2
operator|+
literal|".zip"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|containPath2
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix1
operator|+
literal|".zip"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Relative path in container ".", use remote path name
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix2
operator|+
literal|".zip"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Relative path in container "./", use remote path name
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure mounts env value is correct. Add one mount string
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|containPath2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containPath2
operator|+
literal|":rw"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
name|remoteFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteFile3
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteFile4
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteDir1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteDir2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test if file/dir to be localized whose size exceeds limit.    * Max 10MB in configuration, mock remote will    * always return file size 100MB.    * This configuration will fail the job which has remoteUri    * But don't impact local dir/file    *    * --localization https://a/b/1.patch:.    * --localization s3a://a/dir:/opt/mys3dir    * --localization /temp/script2.py:./    */
annotation|@
name|Test
DECL|method|testRunJobRemoteUriExceedLocalizationSize ()
specifier|public
name|void
name|testRunJobRemoteUriExceedLocalizationSize
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUri1
init|=
literal|"https://a/b/1.patch"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|remoteUri2
init|=
literal|"s3a://a/s3dir"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"/opt/mys3dir"
decl_stmt|;
name|String
name|localUri1
init|=
literal|"/temp/script2"
decl_stmt|;
name|String
name|containerLocal3
init|=
literal|"./"
decl_stmt|;
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|SubmarineConfiguration
name|submarineConf
init|=
operator|new
name|SubmarineConfiguration
argument_list|()
decl_stmt|;
name|RemoteDirectoryManager
name|spyRdm
init|=
name|spy
argument_list|(
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|mockClientContext
operator|.
name|setRemoteDirectoryMgr
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
comment|/**      * Max 10MB, mock remote will always return file size 100MB.      * */
name|submarineConf
operator|.
name|set
argument_list|(
name|SubmarineConfiguration
operator|.
name|LOCALIZATION_MAX_ALLOWED_FILE_SIZE_MB
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|mockClientContext
operator|.
name|setSubmarineConfig
argument_list|(
name|submarineConf
argument_list|)
expr_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
comment|// create remote file in local staging dir to simulate
name|Path
name|stagingDir
init|=
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
literal|"my-job"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|remoteFile1
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteFile1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|remoteDir1
init|=
operator|new
name|File
argument_list|(
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|remoteDir1File1
init|=
operator|new
name|File
argument_list|(
name|remoteDir1
argument_list|,
literal|"afile"
argument_list|)
decl_stmt|;
name|remoteDir1File1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|String
name|fakeLocalDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
comment|// create local file, we need to put it under local temp dir
name|File
name|localFile1
init|=
operator|new
name|File
argument_list|(
name|fakeLocalDir
argument_list|,
operator|new
name|Path
argument_list|(
name|localUri1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|localFile1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteFile1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|remoteDir1File1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|remoteDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|remoteDir1
operator|.
name|length
argument_list|()
decl_stmt|;
try|try
block|{
name|runJobCli
operator|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|remoteUri1
operator|+
literal|":"
operator|+
name|containerLocal1
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Shouldn't have exception because it's within file size limit
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// we should download because fail fast
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// reset
name|reset
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
name|runJobCli
operator|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|remoteUri1
operator|+
literal|":"
operator|+
name|containerLocal1
block|,
literal|"--localization"
block|,
name|remoteUri2
operator|+
literal|":"
operator|+
name|containerLocal2
block|,
literal|"--localization"
block|,
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal3
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"104857600 exceeds configured max size:10485760"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we shouldn't do any download because fail fast
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|runJobCli
operator|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal3
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"104857600 exceeds configured max size:10485760"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we shouldn't do any download because fail fast
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|localFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteDir1File1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|remoteDir1
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test remote Uri doesn't exist.    * */
annotation|@
name|Test
DECL|method|testRunJobWithNonExistRemoteUri ()
specifier|public
name|void
name|testRunJobWithNonExistRemoteUri
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUri1
init|=
literal|"hdfs:///a/b/1.patch"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|localUri1
init|=
literal|"/a/b/c"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"./"
decl_stmt|;
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|remoteUri1
operator|+
literal|":"
operator|+
name|containerLocal1
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"doesn't exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|runJobCli
operator|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|localUri1
operator|+
literal|":"
operator|+
name|containerLocal2
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"doesn't exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test local dir    * --localization /user/yarn/mydir:./mydir1    * --localization /user/yarn/mydir2:/opt/dir2:rw    * --localization /user/yarn/mydir2:.    */
annotation|@
name|Test
DECL|method|testRunJobWithLocalDirLocalization ()
specifier|public
name|void
name|testRunJobWithLocalDirLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fakeLocalDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
name|String
name|localUrl
init|=
literal|"/user/yarn/mydir"
decl_stmt|;
name|String
name|containerPath
init|=
literal|"./mydir1"
decl_stmt|;
name|String
name|localUrl2
init|=
literal|"/user/yarn/mydir2"
decl_stmt|;
name|String
name|containPath2
init|=
literal|"/opt/dir2"
decl_stmt|;
name|String
name|containerPath3
init|=
literal|"."
decl_stmt|;
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteDirectoryManager
name|spyRdm
init|=
name|spy
argument_list|(
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|mockClientContext
operator|.
name|setRemoteDirectoryMgr
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
comment|// create local file
name|File
name|localDir1
init|=
operator|new
name|File
argument_list|(
name|fakeLocalDir
argument_list|,
name|localUrl
argument_list|)
decl_stmt|;
name|localDir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|temp1
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/1.py"
argument_list|)
decl_stmt|;
name|File
name|temp2
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/2.py"
argument_list|)
decl_stmt|;
name|temp1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|temp2
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|localDir2
init|=
operator|new
name|File
argument_list|(
name|fakeLocalDir
argument_list|,
name|localUrl2
argument_list|)
decl_stmt|;
name|localDir2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|temp3
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/3.py"
argument_list|)
decl_stmt|;
name|File
name|temp4
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/4.py"
argument_list|)
decl_stmt|;
name|temp3
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|temp4
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localDir2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|localDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|localDir1
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|suffix2
init|=
literal|"_"
operator|+
name|localDir2
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|localDir2
operator|.
name|length
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"s3://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"s3://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4096M,vcores=4"
block|,
literal|"--ps_docker_image"
block|,
literal|"ps.image"
block|,
literal|"--worker_docker_image"
block|,
literal|"worker.image"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--verbose"
block|,
literal|"--localization"
block|,
name|fakeLocalDir
operator|+
name|localUrl
operator|+
literal|":"
operator|+
name|containerPath
block|,
literal|"--localization"
block|,
name|fakeLocalDir
operator|+
name|localUrl2
operator|+
literal|":"
operator|+
name|containPath2
operator|+
literal|":rw"
block|,
literal|"--localization"
block|,
name|fakeLocalDir
operator|+
name|localUrl2
operator|+
literal|":"
operator|+
name|containerPath3
block|}
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// we shouldn't do any download
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure local original files are not deleted
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localDir2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure zip file are deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix1
operator|+
literal|".zip"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix2
operator|+
literal|".zip"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure dirs will be zipped and localized
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigFile
name|file
init|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|stagingDir
init|=
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
literal|"my-job"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedSrcLocalization
init|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix1
operator|+
literal|".zip"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedDstFileName
init|=
operator|new
name|Path
argument_list|(
name|containerPath
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix2
operator|+
literal|".zip"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|containPath2
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSrcLocalization
operator|=
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix2
operator|+
literal|".zip"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSrcLocalization
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDstFileName
operator|=
operator|new
name|Path
argument_list|(
name|localUrl2
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDstFileName
argument_list|,
name|file
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure mounts env value is correct
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|containPath2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containPath2
operator|+
literal|":rw"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
name|temp1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|temp2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|temp3
operator|.
name|delete
argument_list|()
expr_stmt|;
name|temp4
operator|.
name|delete
argument_list|()
expr_stmt|;
name|localDir2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|localDir1
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test zip function.    * A dir "/user/yarn/mydir" has two files and one subdir    * */
annotation|@
name|Test
DECL|method|testYarnServiceSubmitterZipFunction ()
specifier|public
name|void
name|testYarnServiceSubmitterZipFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|YarnServiceJobSubmitter
name|submitter
init|=
operator|(
name|YarnServiceJobSubmitter
operator|)
name|mockClientContext
operator|.
name|getRuntimeFactory
argument_list|()
operator|.
name|getJobSubmitterInstance
argument_list|()
decl_stmt|;
name|String
name|fakeLocalDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
name|String
name|localUrl
init|=
literal|"/user/yarn/mydir"
decl_stmt|;
name|String
name|localSubDirName
init|=
literal|"subdir1"
decl_stmt|;
comment|// create local file
name|File
name|localDir1
init|=
operator|new
name|File
argument_list|(
name|fakeLocalDir
argument_list|,
name|localUrl
argument_list|)
decl_stmt|;
name|localDir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|temp1
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/1.py"
argument_list|)
decl_stmt|;
name|File
name|temp2
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/2.py"
argument_list|)
decl_stmt|;
name|temp1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|temp2
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|localSubDir
init|=
operator|new
name|File
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|localSubDirName
argument_list|)
decl_stmt|;
name|localSubDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|temp3
init|=
operator|new
name|File
argument_list|(
name|localSubDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"3.py"
argument_list|)
decl_stmt|;
name|temp3
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|String
name|zipFilePath
init|=
name|submitter
operator|.
name|zipDir
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|fakeLocalDir
operator|+
literal|"/user/yarn/mydir.zip"
argument_list|)
decl_stmt|;
name|File
name|zipFile
init|=
operator|new
name|File
argument_list|(
name|zipFilePath
argument_list|)
decl_stmt|;
name|File
name|unzipTargetDir
init|=
operator|new
name|File
argument_list|(
name|fakeLocalDir
argument_list|,
literal|"unzipDir"
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|unZip
argument_list|(
name|zipFile
argument_list|,
name|unzipTargetDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|fakeLocalDir
operator|+
literal|"/unzipDir/1.py"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|fakeLocalDir
operator|+
literal|"/unzipDir/2.py"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|fakeLocalDir
operator|+
literal|"/unzipDir/subdir1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|fakeLocalDir
operator|+
literal|"/unzipDir/subdir1/3.py"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|zipFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|unzipTargetDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|temp1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|temp2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|temp3
operator|.
name|delete
argument_list|()
expr_stmt|;
name|localSubDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|localDir1
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

