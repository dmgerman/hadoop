begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.common.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MockRemoteDirectoryManager
specifier|public
class|class
name|MockRemoteDirectoryManager
implements|implements
name|RemoteDirectoryManager
block|{
DECL|field|jobsParentDir
specifier|private
name|File
name|jobsParentDir
init|=
literal|null
decl_stmt|;
DECL|field|modelParentDir
specifier|private
name|File
name|modelParentDir
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|getJobStagingArea (String jobName, boolean create)
specifier|public
name|Path
name|getJobStagingArea
parameter_list|(
name|String
name|jobName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jobsParentDir
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|jobsParentDir
operator|=
operator|new
name|File
argument_list|(
literal|"target/_staging_area_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jobsParentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for"
operator|+
name|jobsParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|File
name|jobDir
init|=
operator|new
name|File
argument_list|(
name|jobsParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|jobName
argument_list|)
decl_stmt|;
if|if
condition|(
name|create
operator|&&
operator|!
name|jobDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|jobDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Path
argument_list|(
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobCheckpointDir (String jobName, boolean create)
specifier|public
name|Path
name|getJobCheckpointDir
parameter_list|(
name|String
name|jobName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getModelDir (String modelName, boolean create)
specifier|public
name|Path
name|getModelDir
parameter_list|(
name|String
name|modelName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|modelParentDir
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|modelParentDir
operator|=
operator|new
name|File
argument_list|(
literal|"target/_models_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|modelParentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|modelParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|File
name|modelDir
init|=
operator|new
name|File
argument_list|(
name|modelParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|modelName
argument_list|)
decl_stmt|;
if|if
condition|(
name|create
condition|)
block|{
if|if
condition|(
operator|!
name|modelDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|modelDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|modelDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Path
argument_list|(
name|modelDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

