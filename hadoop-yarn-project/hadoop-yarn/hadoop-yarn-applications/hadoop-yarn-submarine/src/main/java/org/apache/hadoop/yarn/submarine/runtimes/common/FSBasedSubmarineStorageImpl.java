begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A super naive FS-based storage.  */
end_comment

begin_class
DECL|class|FSBasedSubmarineStorageImpl
specifier|public
class|class
name|FSBasedSubmarineStorageImpl
extends|extends
name|SubmarineStorage
block|{
DECL|field|rdm
name|RemoteDirectoryManager
name|rdm
decl_stmt|;
DECL|method|FSBasedSubmarineStorageImpl (ClientContext clientContext)
specifier|public
name|FSBasedSubmarineStorageImpl
parameter_list|(
name|ClientContext
name|clientContext
parameter_list|)
block|{
name|rdm
operator|=
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addNewJob (String jobName, Map<String, String> jobInfo)
specifier|public
name|void
name|addNewJob
parameter_list|(
name|String
name|jobName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|jobInfoPath
init|=
name|getJobInfoPath
argument_list|(
name|jobName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fos
init|=
name|rdm
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|jobInfoPath
argument_list|)
decl_stmt|;
name|serializeMap
argument_list|(
name|fos
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJobInfoByName (String jobName)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getJobInfoByName
parameter_list|(
name|String
name|jobName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|jobInfoPath
init|=
name|getJobInfoPath
argument_list|(
name|jobName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
name|rdm
operator|.
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|jobInfoPath
argument_list|)
decl_stmt|;
return|return
name|deserializeMap
argument_list|(
name|fis
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addNewModel (String modelName, String version, Map<String, String> modelInfo)
specifier|public
name|void
name|addNewModel
parameter_list|(
name|String
name|modelName
parameter_list|,
name|String
name|version
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|modelInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|modelInfoPath
init|=
name|getModelInfoPath
argument_list|(
name|modelName
argument_list|,
name|version
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fos
init|=
name|rdm
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|modelInfoPath
argument_list|)
decl_stmt|;
name|serializeMap
argument_list|(
name|fos
argument_list|,
name|modelInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getModelInfoByName (String modelName, String version)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getModelInfoByName
parameter_list|(
name|String
name|modelName
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|modelInfoPath
init|=
name|getModelInfoPath
argument_list|(
name|modelName
argument_list|,
name|version
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
name|rdm
operator|.
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|modelInfoPath
argument_list|)
decl_stmt|;
return|return
name|deserializeMap
argument_list|(
name|fis
argument_list|)
return|;
block|}
DECL|method|getModelInfoPath (String modelName, String version, boolean create)
specifier|private
name|Path
name|getModelInfoPath
parameter_list|(
name|String
name|modelName
parameter_list|,
name|String
name|version
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|modelDir
init|=
name|rdm
operator|.
name|getModelDir
argument_list|(
name|modelName
argument_list|,
name|create
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|modelDir
argument_list|,
name|version
operator|+
literal|".info"
argument_list|)
return|;
block|}
DECL|method|serializeMap (FSDataOutputStream fos, Map<String, String> map)
specifier|private
name|void
name|serializeMap
parameter_list|(
name|FSDataOutputStream
name|fos
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectOutput
name|oo
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|oo
operator|.
name|writeObject
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|oo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|deserializeMap (FSDataInputStream fis)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|deserializeMap
parameter_list|(
name|FSDataInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInput
name|oi
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newMap
decl_stmt|;
try|try
block|{
name|newMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|oi
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|newMap
return|;
block|}
DECL|method|getJobInfoPath (String jobName, boolean create)
specifier|private
name|Path
name|getJobInfoPath
parameter_list|(
name|String
name|jobName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|rdm
operator|.
name|getJobStagingArea
argument_list|(
name|jobName
argument_list|,
name|create
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"job.info"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

