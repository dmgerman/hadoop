begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.param
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_comment
comment|/**  * A class represents quick links to a web page.  */
end_comment

begin_class
DECL|class|Quicklink
specifier|public
class|class
name|Quicklink
block|{
DECL|field|label
specifier|private
name|String
name|label
decl_stmt|;
DECL|field|componentInstanceName
specifier|private
name|String
name|componentInstanceName
decl_stmt|;
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|parse (String quicklinkStr)
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|quicklinkStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|quicklinkStr
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Should be<label>=<link> format for quicklink"
argument_list|)
throw|;
block|}
name|int
name|index
init|=
name|quicklinkStr
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|label
operator|=
name|quicklinkStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|quicklinkStr
operator|=
name|quicklinkStr
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|quicklinkStr
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
block|{
name|protocol
operator|=
literal|"http://"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|quicklinkStr
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
condition|)
block|{
name|protocol
operator|=
literal|"https://"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Quicklink should start with http or https"
argument_list|)
throw|;
block|}
name|quicklinkStr
operator|=
name|quicklinkStr
operator|.
name|substring
argument_list|(
name|protocol
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
name|quicklinkStr
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Quicklink should be componet-id:port form"
argument_list|)
throw|;
block|}
name|componentInstanceName
operator|=
name|quicklinkStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|quicklinkStr
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
DECL|method|getComponentInstanceName ()
specifier|public
name|String
name|getComponentInstanceName
parameter_list|()
block|{
return|return
name|componentInstanceName
return|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
block|}
end_class

end_unit

