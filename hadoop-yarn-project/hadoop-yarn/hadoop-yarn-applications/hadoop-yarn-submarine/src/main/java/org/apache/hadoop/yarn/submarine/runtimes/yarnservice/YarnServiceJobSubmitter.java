begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|ServiceApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|Quicklink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|Envs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|jsonSerDeser
import|;
end_import

begin_comment
comment|/**  * Submit a job to cluster  */
end_comment

begin_class
DECL|class|YarnServiceJobSubmitter
specifier|public
class|class
name|YarnServiceJobSubmitter
implements|implements
name|JobSubmitter
block|{
DECL|field|TENSORBOARD_QUICKLINK_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|TENSORBOARD_QUICKLINK_LABEL
init|=
literal|"Tensorboard"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnServiceJobSubmitter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clientContext
name|ClientContext
name|clientContext
decl_stmt|;
DECL|field|serviceSpec
name|Service
name|serviceSpec
decl_stmt|;
DECL|field|uploadedFiles
specifier|private
name|Set
argument_list|<
name|Path
argument_list|>
name|uploadedFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Used by testing
DECL|field|componentToLocalLaunchScriptPath
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentToLocalLaunchScriptPath
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|YarnServiceJobSubmitter (ClientContext clientContext)
specifier|public
name|YarnServiceJobSubmitter
parameter_list|(
name|ClientContext
name|clientContext
parameter_list|)
block|{
name|this
operator|.
name|clientContext
operator|=
name|clientContext
expr_stmt|;
block|}
DECL|method|getServiceResourceFromYarnResource ( org.apache.hadoop.yarn.api.records.Resource yarnResource)
specifier|private
name|Resource
name|getServiceResourceFromYarnResource
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
name|yarnResource
parameter_list|)
block|{
name|Resource
name|serviceResource
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|serviceResource
operator|.
name|setCpus
argument_list|(
name|yarnResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|serviceResource
operator|.
name|setMemory
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|yarnResource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|riMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
name|ri
range|:
name|yarnResource
operator|.
name|getAllResourcesListCopy
argument_list|()
control|)
block|{
name|ResourceInformation
name|serviceRi
init|=
operator|new
name|ResourceInformation
argument_list|()
decl_stmt|;
name|serviceRi
operator|.
name|setValue
argument_list|(
name|ri
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|serviceRi
operator|.
name|setUnit
argument_list|(
name|ri
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|ri
operator|.
name|getName
argument_list|()
argument_list|,
name|serviceRi
argument_list|)
expr_stmt|;
block|}
name|serviceResource
operator|.
name|setResourceInformations
argument_list|(
name|riMap
argument_list|)
expr_stmt|;
return|return
name|serviceResource
return|;
block|}
DECL|method|getValueOfEnvionment (String envar)
specifier|private
name|String
name|getValueOfEnvionment
parameter_list|(
name|String
name|envar
parameter_list|)
block|{
comment|// extract value from "key=value" form
if|if
condition|(
name|envar
operator|==
literal|null
operator|||
operator|!
name|envar
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|envar
operator|.
name|substring
argument_list|(
name|envar
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|method|needHdfs (String content)
specifier|private
name|boolean
name|needHdfs
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|content
operator|!=
literal|null
operator|&&
name|content
operator|.
name|contains
argument_list|(
literal|"hdfs://"
argument_list|)
return|;
block|}
DECL|method|addHdfsClassPathIfNeeded (RunJobParameters parameters, PrintWriter fw, Component comp)
specifier|private
name|void
name|addHdfsClassPathIfNeeded
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|,
name|PrintWriter
name|fw
parameter_list|,
name|Component
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find envs to use HDFS
name|String
name|hdfsHome
init|=
literal|null
decl_stmt|;
name|String
name|javaHome
init|=
literal|null
decl_stmt|;
name|boolean
name|hadoopEnv
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|envar
range|:
name|parameters
operator|.
name|getEnvars
argument_list|()
control|)
block|{
if|if
condition|(
name|envar
operator|.
name|startsWith
argument_list|(
literal|"DOCKER_HADOOP_HDFS_HOME="
argument_list|)
condition|)
block|{
name|hdfsHome
operator|=
name|getValueOfEnvionment
argument_list|(
name|envar
argument_list|)
expr_stmt|;
name|hadoopEnv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|envar
operator|.
name|startsWith
argument_list|(
literal|"DOCKER_JAVA_HOME="
argument_list|)
condition|)
block|{
name|javaHome
operator|=
name|getValueOfEnvionment
argument_list|(
name|envar
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|lackingEnvs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|needHdfs
argument_list|(
name|parameters
operator|.
name|getInputPath
argument_list|()
argument_list|)
operator|||
name|needHdfs
argument_list|(
name|parameters
operator|.
name|getPSLaunchCmd
argument_list|()
argument_list|)
operator|||
name|needHdfs
argument_list|(
name|parameters
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|)
operator|||
name|hadoopEnv
condition|)
block|{
comment|// HDFS is asked either in input or output, set LD_LIBRARY_PATH
comment|// and classpath
if|if
condition|(
name|hdfsHome
operator|!=
literal|null
condition|)
block|{
comment|// Unset HADOOP_HOME/HADOOP_YARN_HOME to make sure host machine's envs
comment|// won't pollute docker's env.
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_HOME=\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_YARN_HOME=\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_HDFS_HOME="
operator|+
name|hdfsHome
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_COMMON_HOME="
operator|+
name|hdfsHome
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lackingEnvs
operator|=
literal|true
expr_stmt|;
block|}
comment|// hadoop confs will be uploaded to HDFS and localized to container's
comment|// local folder, so here set $HADOOP_CONF_DIR to $WORK_DIR.
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_CONF_DIR=$WORK_DIR\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaHome
operator|!=
literal|null
condition|)
block|{
name|fw
operator|.
name|append
argument_list|(
literal|"export JAVA_HOME="
operator|+
name|javaHome
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"
operator|+
literal|"$JAVA_HOME/lib/amd64/server\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lackingEnvs
operator|=
literal|true
expr_stmt|;
block|}
name|fw
operator|.
name|append
argument_list|(
literal|"export CLASSPATH=`$HADOOP_HDFS_HOME/bin/hadoop classpath --glob`\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lackingEnvs
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"When hdfs is being used to read/write models/data. Following"
operator|+
literal|"envs are required: 1) DOCKER_HADOOP_HDFS_HOME=<HDFS_HOME inside"
operator|+
literal|"docker container> 2) DOCKER_JAVA_HOME=<JAVA_HOME inside docker"
operator|+
literal|"container>. You can use --env to pass these envars."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to detect HDFS-related environments."
argument_list|)
throw|;
block|}
comment|// Trying to upload core-site.xml and hdfs-site.xml
name|Path
name|stagingDir
init|=
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|coreSite
init|=
name|findFileOnClassPath
argument_list|(
literal|"core-site.xml"
argument_list|)
decl_stmt|;
name|File
name|hdfsSite
init|=
name|findFileOnClassPath
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreSite
operator|==
literal|null
operator|||
name|hdfsSite
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"hdfs is being used, however we couldn't locate core-site.xml/"
operator|+
literal|"hdfs-site.xml from classpath, please double check you classpath"
operator|+
literal|"setting and make sure they're included."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to locate core-site.xml / hdfs-site.xml from class path"
argument_list|)
throw|;
block|}
name|uploadToRemoteFileAndLocalizeToContainerWorkDir
argument_list|(
name|stagingDir
argument_list|,
name|coreSite
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"core-site.xml"
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|uploadToRemoteFileAndLocalizeToContainerWorkDir
argument_list|(
name|stagingDir
argument_list|,
name|hdfsSite
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"hdfs-site.xml"
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|// DEBUG
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"CLASSPATH:$CLASSPATH\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"HADOOP_CONF_DIR:$HADOOP_CONF_DIR\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"HADOOP_TOKEN_FILE_LOCATION:$HADOOP_TOKEN_FILE_LOCATION\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"JAVA_HOME:$JAVA_HOME\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"LD_LIBRARY_PATH:$LD_LIBRARY_PATH\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"HADOOP_HDFS_HOME:$HADOOP_HDFS_HOME\"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCommonEnvironments (Component component, TaskType taskType)
specifier|private
name|void
name|addCommonEnvironments
parameter_list|(
name|Component
name|component
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
init|=
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
decl_stmt|;
name|envs
operator|.
name|put
argument_list|(
name|Envs
operator|.
name|TASK_INDEX_ENV
argument_list|,
name|ServiceApiConstants
operator|.
name|COMPONENT_ID
argument_list|)
expr_stmt|;
name|envs
operator|.
name|put
argument_list|(
name|Envs
operator|.
name|TASK_TYPE_ENV
argument_list|,
name|taskType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUserName ()
specifier|protected
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
DECL|method|getDNSDomain ()
specifier|private
name|String
name|getDNSDomain
parameter_list|()
block|{
return|return
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.registry.dns.domain-name"
argument_list|)
return|;
block|}
comment|/*    * Generate a command launch script on local disk, returns patch to the script    */
DECL|method|generateCommandLaunchScript (RunJobParameters parameters, TaskType taskType, Component comp)
specifier|private
name|String
name|generateCommandLaunchScript
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|Component
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|taskType
operator|.
name|name
argument_list|()
operator|+
literal|"-launch-script"
argument_list|,
literal|".sh"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
decl_stmt|;
try|try
block|{
name|pw
operator|.
name|append
argument_list|(
literal|"#!/bin/bash\n"
argument_list|)
expr_stmt|;
name|addHdfsClassPathIfNeeded
argument_list|(
name|parameters
argument_list|,
name|pw
argument_list|,
name|comp
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|TENSORBOARD
argument_list|)
condition|)
block|{
name|String
name|tbCommand
init|=
literal|"export LC_ALL=C&& tensorboard --logdir="
operator|+
name|parameters
operator|.
name|getCheckpointPath
argument_list|()
decl_stmt|;
name|pw
operator|.
name|append
argument_list|(
name|tbCommand
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Tensorboard command="
operator|+
name|tbCommand
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When distributed training is required
if|if
condition|(
name|parameters
operator|.
name|isDistributed
argument_list|()
condition|)
block|{
comment|// Generated TF_CONFIG
name|String
name|tfConfigEnv
init|=
name|YarnServiceUtils
operator|.
name|getTFConfigEnv
argument_list|(
name|taskType
operator|.
name|getComponentName
argument_list|()
argument_list|,
name|parameters
operator|.
name|getNumWorkers
argument_list|()
argument_list|,
name|parameters
operator|.
name|getNumPS
argument_list|()
argument_list|,
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
name|getUserName
argument_list|()
argument_list|,
name|getDNSDomain
argument_list|()
argument_list|)
decl_stmt|;
name|pw
operator|.
name|append
argument_list|(
literal|"export TF_CONFIG=\""
operator|+
name|tfConfigEnv
operator|+
literal|"\"\n"
argument_list|)
expr_stmt|;
block|}
comment|// Print launch command
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|WORKER
argument_list|)
operator|||
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
argument_list|)
condition|)
block|{
name|pw
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|getWorkerLaunchCmd
argument_list|()
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Worker command =["
operator|+
name|parameters
operator|.
name|getWorkerLaunchCmd
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|PS
argument_list|)
condition|)
block|{
name|pw
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|getPSLaunchCmd
argument_list|()
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"PS command =["
operator|+
name|parameters
operator|.
name|getPSLaunchCmd
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|file
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|getScriptFileName (TaskType taskType)
specifier|private
name|String
name|getScriptFileName
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
return|return
literal|"run-"
operator|+
name|taskType
operator|.
name|name
argument_list|()
operator|+
literal|".sh"
return|;
block|}
DECL|method|findFileOnClassPath (final String fileName)
specifier|private
name|File
name|findFileOnClassPath
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
block|{
specifier|final
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pathSeparator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
decl_stmt|;
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|classpath
argument_list|,
name|pathSeparator
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
specifier|final
name|String
name|pathElement
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|File
name|directoryOrJar
init|=
operator|new
name|File
argument_list|(
name|pathElement
argument_list|)
decl_stmt|;
specifier|final
name|File
name|absoluteDirectoryOrJar
init|=
name|directoryOrJar
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|absoluteDirectoryOrJar
operator|.
name|isFile
argument_list|()
condition|)
block|{
specifier|final
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|absoluteDirectoryOrJar
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
else|else
block|{
specifier|final
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|directoryOrJar
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|uploadToRemoteFileAndLocalizeToContainerWorkDir (Path stagingDir, String fileToUpload, String destFilename, Component comp)
specifier|private
name|void
name|uploadToRemoteFileAndLocalizeToContainerWorkDir
parameter_list|(
name|Path
name|stagingDir
parameter_list|,
name|String
name|fileToUpload
parameter_list|,
name|String
name|destFilename
parameter_list|,
name|Component
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|uploadedFilePath
init|=
name|uploadToRemoteFile
argument_list|(
name|stagingDir
argument_list|,
name|fileToUpload
argument_list|)
decl_stmt|;
name|locateRemoteFileToContainerWorkDir
argument_list|(
name|destFilename
argument_list|,
name|comp
argument_list|,
name|uploadedFilePath
argument_list|)
expr_stmt|;
block|}
DECL|method|locateRemoteFileToContainerWorkDir (String destFilename, Component comp, Path uploadedFilePath)
specifier|private
name|void
name|locateRemoteFileToContainerWorkDir
parameter_list|(
name|String
name|destFilename
parameter_list|,
name|Component
name|comp
parameter_list|,
name|Path
name|uploadedFilePath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|uploadedFilePath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploaded file path = "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set it to component's files list
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ConfigFile
argument_list|()
operator|.
name|srcFile
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|destFile
argument_list|(
name|destFilename
argument_list|)
operator|.
name|type
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadToRemoteFile (Path stagingDir, String fileToUpload)
specifier|private
name|Path
name|uploadToRemoteFile
parameter_list|(
name|Path
name|stagingDir
parameter_list|,
name|String
name|fileToUpload
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// Upload to remote FS under staging area
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|fileToUpload
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Trying to upload file="
operator|+
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" to remote, but couldn't find local file."
argument_list|)
throw|;
block|}
name|String
name|filename
init|=
operator|new
name|File
argument_list|(
name|fileToUpload
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|uploadedFilePath
init|=
operator|new
name|Path
argument_list|(
name|stagingDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uploadedFiles
operator|.
name|contains
argument_list|(
name|uploadedFilePath
argument_list|)
condition|)
block|{
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying local file="
operator|+
name|fileToUpload
operator|+
literal|" to remote="
operator|+
name|uploadedFilePath
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|fileToUpload
argument_list|)
argument_list|,
name|uploadedFilePath
argument_list|)
expr_stmt|;
name|uploadedFiles
operator|.
name|add
argument_list|(
name|uploadedFilePath
argument_list|)
expr_stmt|;
block|}
return|return
name|uploadedFilePath
return|;
block|}
DECL|method|setPermission (Path destPath, FsPermission permission)
specifier|private
name|void
name|setPermission
parameter_list|(
name|Path
name|destPath
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|destPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|handleLaunchCommand (RunJobParameters parameters, TaskType taskType, Component component)
specifier|private
name|void
name|handleLaunchCommand
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|Component
name|component
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get staging area directory
name|Path
name|stagingDir
init|=
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Generate script file in the local disk
name|String
name|localScriptFile
init|=
name|generateCommandLaunchScript
argument_list|(
name|parameters
argument_list|,
name|taskType
argument_list|,
name|component
argument_list|)
decl_stmt|;
name|String
name|destScriptFileName
init|=
name|getScriptFileName
argument_list|(
name|taskType
argument_list|)
decl_stmt|;
name|uploadToRemoteFileAndLocalizeToContainerWorkDir
argument_list|(
name|stagingDir
argument_list|,
name|localScriptFile
argument_list|,
name|destScriptFileName
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLaunchCommand
argument_list|(
literal|"./"
operator|+
name|destScriptFileName
argument_list|)
expr_stmt|;
name|componentToLocalLaunchScriptPath
operator|.
name|put
argument_list|(
name|taskType
operator|.
name|getComponentName
argument_list|()
argument_list|,
name|localScriptFile
argument_list|)
expr_stmt|;
block|}
DECL|method|addWorkerComponent (Service service, RunJobParameters parameters, TaskType taskType)
specifier|private
name|void
name|addWorkerComponent
parameter_list|(
name|Service
name|service
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|IOException
block|{
name|Component
name|workerComponent
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|addCommonEnvironments
argument_list|(
name|workerComponent
argument_list|,
name|taskType
argument_list|)
expr_stmt|;
name|workerComponent
operator|.
name|setName
argument_list|(
name|taskType
operator|.
name|getComponentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
argument_list|)
condition|)
block|{
name|workerComponent
operator|.
name|setNumberOfContainers
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workerComponent
operator|.
name|setNumberOfContainers
argument_list|(
operator|(
name|long
operator|)
name|parameters
operator|.
name|getNumWorkers
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
operator|.
name|getWorkerDockerImage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|workerComponent
operator|.
name|setArtifact
argument_list|(
name|getDockerArtifact
argument_list|(
name|parameters
operator|.
name|getWorkerDockerImage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|workerComponent
operator|.
name|setResource
argument_list|(
name|getServiceResourceFromYarnResource
argument_list|(
name|parameters
operator|.
name|getWorkerResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handleLaunchCommand
argument_list|(
name|parameters
argument_list|,
name|taskType
argument_list|,
name|workerComponent
argument_list|)
expr_stmt|;
name|workerComponent
operator|.
name|setRestartPolicy
argument_list|(
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|service
operator|.
name|addComponent
argument_list|(
name|workerComponent
argument_list|)
expr_stmt|;
block|}
comment|// Handle worker and primary_worker.
DECL|method|addWorkerComponents (Service service, RunJobParameters parameters)
specifier|private
name|void
name|addWorkerComponents
parameter_list|(
name|Service
name|service
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|addWorkerComponent
argument_list|(
name|service
argument_list|,
name|parameters
argument_list|,
name|TaskType
operator|.
name|PRIMARY_WORKER
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|getNumWorkers
argument_list|()
operator|>
literal|1
condition|)
block|{
name|addWorkerComponent
argument_list|(
name|service
argument_list|,
name|parameters
argument_list|,
name|TaskType
operator|.
name|WORKER
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendToEnv (Service service, String key, String value, String delim)
specifier|private
name|void
name|appendToEnv
parameter_list|(
name|Service
name|service
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|existingValue
init|=
name|env
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existingValue
operator|.
name|endsWith
argument_list|(
name|delim
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|existingValue
operator|+
name|delim
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|existingValue
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|handleServiceEnvs (Service service, RunJobParameters parameters)
specifier|private
name|void
name|handleServiceEnvs
parameter_list|(
name|Service
name|service
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|parameters
operator|.
name|getEnvars
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|envarPair
range|:
name|parameters
operator|.
name|getEnvars
argument_list|()
control|)
block|{
name|String
name|key
decl_stmt|,
name|value
decl_stmt|;
if|if
condition|(
name|envarPair
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|envarPair
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
name|key
operator|=
name|envarPair
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|value
operator|=
name|envarPair
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No "=" found so use the whole key
name|key
operator|=
name|envarPair
expr_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|appendToEnv
argument_list|(
name|service
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Append other configs like /etc/passwd, /etc/krb5.conf
name|appendToEnv
argument_list|(
name|service
argument_list|,
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|,
literal|"/etc/passwd:/etc/passwd:ro"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|String
name|authenication
init|=
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|authenication
operator|!=
literal|null
operator|&&
name|authenication
operator|.
name|equals
argument_list|(
literal|"kerberos"
argument_list|)
condition|)
block|{
name|appendToEnv
argument_list|(
name|service
argument_list|,
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|,
literal|"/etc/krb5.conf:/etc/krb5.conf:ro"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDockerArtifact (String dockerImageName)
specifier|private
name|Artifact
name|getDockerArtifact
parameter_list|(
name|String
name|dockerImageName
parameter_list|)
block|{
return|return
operator|new
name|Artifact
argument_list|()
operator|.
name|type
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|DOCKER
argument_list|)
operator|.
name|id
argument_list|(
name|dockerImageName
argument_list|)
return|;
block|}
DECL|method|handleQuicklinks (RunJobParameters runJobParameters)
specifier|private
name|void
name|handleQuicklinks
parameter_list|(
name|RunJobParameters
name|runJobParameters
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Quicklink
argument_list|>
name|quicklinks
init|=
name|runJobParameters
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|quicklinks
operator|&&
operator|!
name|quicklinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Quicklink
name|ql
range|:
name|quicklinks
control|)
block|{
comment|// Make sure it is a valid instance name
name|String
name|instanceName
init|=
name|ql
operator|.
name|getComponentInstanceName
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|serviceSpec
operator|.
name|getComponents
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|possibleInstanceName
init|=
name|comp
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|possibleInstanceName
operator|.
name|equals
argument_list|(
name|instanceName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't find a component instance = "
operator|+
name|instanceName
operator|+
literal|" while adding quicklink"
argument_list|)
throw|;
block|}
name|String
name|link
init|=
name|ql
operator|.
name|getProtocol
argument_list|()
operator|+
name|YarnServiceUtils
operator|.
name|getDNSName
argument_list|(
name|serviceSpec
operator|.
name|getName
argument_list|()
argument_list|,
name|instanceName
argument_list|,
name|getUserName
argument_list|()
argument_list|,
name|getDNSDomain
argument_list|()
argument_list|,
name|ql
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|YarnServiceUtils
operator|.
name|addQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ql
operator|.
name|getLabel
argument_list|()
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createServiceByParameters (RunJobParameters parameters)
specifier|private
name|Service
name|createServiceByParameters
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|componentToLocalLaunchScriptPath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serviceSpec
operator|=
operator|new
name|Service
argument_list|()
expr_stmt|;
name|serviceSpec
operator|.
name|setName
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setVersion
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setArtifact
argument_list|(
name|getDockerArtifact
argument_list|(
name|parameters
operator|.
name|getDockerImageName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handleKerberosPrincipal
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|handleServiceEnvs
argument_list|(
name|serviceSpec
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|getNumWorkers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addWorkerComponents
argument_list|(
name|serviceSpec
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
operator|.
name|getNumPS
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Component
name|psComponent
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|psComponent
operator|.
name|setName
argument_list|(
name|TaskType
operator|.
name|PS
operator|.
name|getComponentName
argument_list|()
argument_list|)
expr_stmt|;
name|addCommonEnvironments
argument_list|(
name|psComponent
argument_list|,
name|TaskType
operator|.
name|PS
argument_list|)
expr_stmt|;
name|psComponent
operator|.
name|setNumberOfContainers
argument_list|(
operator|(
name|long
operator|)
name|parameters
operator|.
name|getNumPS
argument_list|()
argument_list|)
expr_stmt|;
name|psComponent
operator|.
name|setRestartPolicy
argument_list|(
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|psComponent
operator|.
name|setResource
argument_list|(
name|getServiceResourceFromYarnResource
argument_list|(
name|parameters
operator|.
name|getPsResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Override global docker image if needed.
if|if
condition|(
name|parameters
operator|.
name|getPsDockerImage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|psComponent
operator|.
name|setArtifact
argument_list|(
name|getDockerArtifact
argument_list|(
name|parameters
operator|.
name|getPsDockerImage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handleLaunchCommand
argument_list|(
name|parameters
argument_list|,
name|TaskType
operator|.
name|PS
argument_list|,
name|psComponent
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|addComponent
argument_list|(
name|psComponent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
operator|.
name|isTensorboardEnabled
argument_list|()
condition|)
block|{
name|Component
name|tbComponent
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|tbComponent
operator|.
name|setName
argument_list|(
name|TaskType
operator|.
name|TENSORBOARD
operator|.
name|getComponentName
argument_list|()
argument_list|)
expr_stmt|;
name|addCommonEnvironments
argument_list|(
name|tbComponent
argument_list|,
name|TaskType
operator|.
name|TENSORBOARD
argument_list|)
expr_stmt|;
name|tbComponent
operator|.
name|setNumberOfContainers
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|tbComponent
operator|.
name|setRestartPolicy
argument_list|(
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|tbComponent
operator|.
name|setResource
argument_list|(
name|getServiceResourceFromYarnResource
argument_list|(
name|parameters
operator|.
name|getTensorboardResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|getTensorboardDockerImage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbComponent
operator|.
name|setArtifact
argument_list|(
name|getDockerArtifact
argument_list|(
name|parameters
operator|.
name|getTensorboardDockerImage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handleLaunchCommand
argument_list|(
name|parameters
argument_list|,
name|TaskType
operator|.
name|TENSORBOARD
argument_list|,
name|tbComponent
argument_list|)
expr_stmt|;
comment|// Add tensorboard to quicklink
name|String
name|tensorboardLink
init|=
literal|"http://"
operator|+
name|YarnServiceUtils
operator|.
name|getDNSName
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
name|TaskType
operator|.
name|TENSORBOARD
operator|.
name|getComponentName
argument_list|()
operator|+
literal|"-"
operator|+
literal|0
argument_list|,
name|getUserName
argument_list|()
argument_list|,
name|getDNSDomain
argument_list|()
argument_list|,
literal|6006
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Link to tensorboard:"
operator|+
name|tensorboardLink
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|addComponent
argument_list|(
name|tbComponent
argument_list|)
expr_stmt|;
name|YarnServiceUtils
operator|.
name|addQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
name|tensorboardLink
argument_list|)
expr_stmt|;
block|}
comment|// After all components added, handle quicklinks
name|handleQuicklinks
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|serviceSpec
return|;
block|}
DECL|method|generateServiceSpecFile (Service service)
specifier|private
name|String
name|generateServiceSpecFile
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|serviceSpecFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|serviceSpecFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
decl_stmt|;
try|try
block|{
name|pw
operator|.
name|append
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|serviceSpecFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|handleKerberosPrincipal (RunJobParameters parameters)
specifier|private
name|void
name|handleKerberosPrincipal
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|keytab
init|=
name|parameters
operator|.
name|getKeytab
argument_list|()
decl_stmt|;
name|String
name|principal
init|=
name|parameters
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|isDistributeKeytab
argument_list|()
condition|)
block|{
name|Path
name|stagingDir
init|=
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Path
name|remoteKeytabPath
init|=
name|uploadToRemoteFile
argument_list|(
name|stagingDir
argument_list|,
name|keytab
argument_list|)
decl_stmt|;
comment|//only the owner has read access
name|setPermission
argument_list|(
name|remoteKeytabPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"400"
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setKerberosPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|()
operator|.
name|keytab
argument_list|(
name|remoteKeytabPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|principalName
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|keytab
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|keytab
operator|=
literal|"file://"
operator|+
name|keytab
expr_stmt|;
block|}
name|serviceSpec
operator|.
name|setKerberosPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|()
operator|.
name|keytab
argument_list|(
name|keytab
argument_list|)
operator|.
name|principalName
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|submitJob (RunJobParameters parameters)
specifier|public
name|ApplicationId
name|submitJob
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|createServiceByParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|String
name|serviceSpecFile
init|=
name|generateServiceSpecFile
argument_list|(
name|serviceSpec
argument_list|)
decl_stmt|;
name|AppAdminClient
name|appAdminClient
init|=
name|YarnServiceUtils
operator|.
name|createServiceClient
argument_list|(
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|appAdminClient
operator|.
name|actionLaunch
argument_list|(
name|serviceSpecFile
argument_list|,
name|serviceSpec
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|!=
name|EXIT_SUCCESS
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Fail to launch application with exit code:"
operator|+
name|code
argument_list|)
throw|;
block|}
name|String
name|appStatus
init|=
name|appAdminClient
operator|.
name|getStatusString
argument_list|(
name|serviceSpec
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|app
init|=
name|ServiceApiUtil
operator|.
name|jsonSerDeser
operator|.
name|fromJson
argument_list|(
name|appStatus
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Can't get application id for Service "
operator|+
name|serviceSpec
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|ApplicationId
name|appid
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|app
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|appAdminClient
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|appid
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServiceSpec ()
specifier|public
name|Service
name|getServiceSpec
parameter_list|()
block|{
return|return
name|serviceSpec
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getComponentToLocalLaunchScriptPath ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getComponentToLocalLaunchScriptPath
parameter_list|()
block|{
return|return
name|componentToLocalLaunchScriptPath
return|;
block|}
block|}
end_class

end_unit

