begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.param
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Parameters used to run a job  */
end_comment

begin_class
DECL|class|RunJobParameters
specifier|public
class|class
name|RunJobParameters
extends|extends
name|RunParameters
block|{
DECL|field|input
specifier|private
name|String
name|input
decl_stmt|;
DECL|field|checkpointPath
specifier|private
name|String
name|checkpointPath
decl_stmt|;
DECL|field|numWorkers
specifier|private
name|int
name|numWorkers
decl_stmt|;
DECL|field|numPS
specifier|private
name|int
name|numPS
decl_stmt|;
DECL|field|workerResource
specifier|private
name|Resource
name|workerResource
decl_stmt|;
DECL|field|psResource
specifier|private
name|Resource
name|psResource
decl_stmt|;
DECL|field|tensorboardEnabled
specifier|private
name|boolean
name|tensorboardEnabled
decl_stmt|;
DECL|field|tensorboardResource
specifier|private
name|Resource
name|tensorboardResource
decl_stmt|;
DECL|field|tensorboardDockerImage
specifier|private
name|String
name|tensorboardDockerImage
decl_stmt|;
DECL|field|workerLaunchCmd
specifier|private
name|String
name|workerLaunchCmd
decl_stmt|;
DECL|field|psLaunchCmd
specifier|private
name|String
name|psLaunchCmd
decl_stmt|;
DECL|field|psDockerImage
specifier|private
name|String
name|psDockerImage
init|=
literal|null
decl_stmt|;
DECL|field|workerDockerImage
specifier|private
name|String
name|workerDockerImage
init|=
literal|null
decl_stmt|;
DECL|field|waitJobFinish
specifier|private
name|boolean
name|waitJobFinish
init|=
literal|false
decl_stmt|;
DECL|field|distributed
specifier|private
name|boolean
name|distributed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|updateParametersByParsedCommandline (CommandLine parsedCommandLine, Options options, ClientContext clientContext)
specifier|public
name|void
name|updateParametersByParsedCommandline
parameter_list|(
name|CommandLine
name|parsedCommandLine
parameter_list|,
name|Options
name|options
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|YarnException
block|{
name|String
name|input
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|INPUT_PATH
argument_list|)
decl_stmt|;
name|String
name|jobDir
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|CHECKPOINT_PATH
argument_list|)
decl_stmt|;
name|int
name|nWorkers
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|N_WORKERS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|nWorkers
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|N_WORKERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nPS
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|N_PS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|nPS
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|N_PS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check #workers and #ps.
comment|// When distributed training is required
if|if
condition|(
name|nWorkers
operator|>=
literal|2
operator|&&
name|nPS
operator|>
literal|0
condition|)
block|{
name|distributed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nWorkers
operator|<=
literal|1
operator|&&
name|nPS
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Only specified one worker but non-zero PS, "
operator|+
literal|"please double check."
argument_list|)
throw|;
block|}
name|workerResource
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|nWorkers
operator|>
literal|0
condition|)
block|{
name|String
name|workerResourceStr
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|WORKER_RES
argument_list|)
decl_stmt|;
if|if
condition|(
name|workerResourceStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"--"
operator|+
name|CliConstants
operator|.
name|WORKER_RES
operator|+
literal|" is absent."
argument_list|)
throw|;
block|}
name|workerResource
operator|=
name|CliUtils
operator|.
name|createResourceFromString
argument_list|(
name|workerResourceStr
argument_list|,
name|clientContext
operator|.
name|getOrCreateYarnClient
argument_list|()
operator|.
name|getResourceTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Resource
name|psResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nPS
operator|>
literal|0
condition|)
block|{
name|String
name|psResourceStr
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|PS_RES
argument_list|)
decl_stmt|;
if|if
condition|(
name|psResourceStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"--"
operator|+
name|CliConstants
operator|.
name|PS_RES
operator|+
literal|" is absent."
argument_list|)
throw|;
block|}
name|psResource
operator|=
name|CliUtils
operator|.
name|createResourceFromString
argument_list|(
name|psResourceStr
argument_list|,
name|clientContext
operator|.
name|getOrCreateYarnClient
argument_list|()
operator|.
name|getResourceTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|tensorboard
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parsedCommandLine
operator|.
name|hasOption
argument_list|(
name|CliConstants
operator|.
name|TENSORBOARD
argument_list|)
condition|)
block|{
name|tensorboard
operator|=
literal|true
expr_stmt|;
name|String
name|tensorboardResourceStr
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|TENSORBOARD_RESOURCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|tensorboardResourceStr
operator|==
literal|null
operator|||
name|tensorboardResourceStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tensorboardResourceStr
operator|=
name|CliConstants
operator|.
name|TENSORBOARD_DEFAULT_RESOURCES
expr_stmt|;
block|}
name|tensorboardResource
operator|=
name|CliUtils
operator|.
name|createResourceFromString
argument_list|(
name|tensorboardResourceStr
argument_list|,
name|clientContext
operator|.
name|getOrCreateYarnClient
argument_list|()
operator|.
name|getResourceTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|tensorboardDockerImage
operator|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|TENSORBOARD_DOCKER_IMAGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTensorboardResource
argument_list|(
name|tensorboardResource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parsedCommandLine
operator|.
name|hasOption
argument_list|(
name|CliConstants
operator|.
name|WAIT_JOB_FINISH
argument_list|)
condition|)
block|{
name|this
operator|.
name|waitJobFinish
operator|=
literal|true
expr_stmt|;
block|}
name|psDockerImage
operator|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|PS_DOCKER_IMAGE
argument_list|)
expr_stmt|;
name|workerDockerImage
operator|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|WORKER_DOCKER_IMAGE
argument_list|)
expr_stmt|;
name|String
name|workerLaunchCmd
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|WORKER_LAUNCH_CMD
argument_list|)
decl_stmt|;
name|String
name|psLaunchCommand
init|=
name|parsedCommandLine
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|PS_LAUNCH_CMD
argument_list|)
decl_stmt|;
name|this
operator|.
name|setInputPath
argument_list|(
name|input
argument_list|)
operator|.
name|setCheckpointPath
argument_list|(
name|jobDir
argument_list|)
operator|.
name|setNumPS
argument_list|(
name|nPS
argument_list|)
operator|.
name|setNumWorkers
argument_list|(
name|nWorkers
argument_list|)
operator|.
name|setPSLaunchCmd
argument_list|(
name|psLaunchCommand
argument_list|)
operator|.
name|setWorkerLaunchCmd
argument_list|(
name|workerLaunchCmd
argument_list|)
operator|.
name|setPsResource
argument_list|(
name|psResource
argument_list|)
operator|.
name|setTensorboardEnabled
argument_list|(
name|tensorboard
argument_list|)
expr_stmt|;
name|super
operator|.
name|updateParametersByParsedCommandline
argument_list|(
name|parsedCommandLine
argument_list|,
name|options
argument_list|,
name|clientContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputPath ()
specifier|public
name|String
name|getInputPath
parameter_list|()
block|{
return|return
name|input
return|;
block|}
DECL|method|setInputPath (String input)
specifier|public
name|RunJobParameters
name|setInputPath
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCheckpointPath ()
specifier|public
name|String
name|getCheckpointPath
parameter_list|()
block|{
return|return
name|checkpointPath
return|;
block|}
DECL|method|setCheckpointPath (String checkpointPath)
specifier|public
name|RunJobParameters
name|setCheckpointPath
parameter_list|(
name|String
name|checkpointPath
parameter_list|)
block|{
name|this
operator|.
name|checkpointPath
operator|=
name|checkpointPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getNumWorkers ()
specifier|public
name|int
name|getNumWorkers
parameter_list|()
block|{
return|return
name|numWorkers
return|;
block|}
DECL|method|setNumWorkers (int numWorkers)
specifier|public
name|RunJobParameters
name|setNumWorkers
parameter_list|(
name|int
name|numWorkers
parameter_list|)
block|{
name|this
operator|.
name|numWorkers
operator|=
name|numWorkers
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getNumPS ()
specifier|public
name|int
name|getNumPS
parameter_list|()
block|{
return|return
name|numPS
return|;
block|}
DECL|method|setNumPS (int numPS)
specifier|public
name|RunJobParameters
name|setNumPS
parameter_list|(
name|int
name|numPS
parameter_list|)
block|{
name|this
operator|.
name|numPS
operator|=
name|numPS
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getWorkerResource ()
specifier|public
name|Resource
name|getWorkerResource
parameter_list|()
block|{
return|return
name|workerResource
return|;
block|}
DECL|method|setWorkerResource (Resource workerResource)
specifier|public
name|RunJobParameters
name|setWorkerResource
parameter_list|(
name|Resource
name|workerResource
parameter_list|)
block|{
name|this
operator|.
name|workerResource
operator|=
name|workerResource
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPsResource ()
specifier|public
name|Resource
name|getPsResource
parameter_list|()
block|{
return|return
name|psResource
return|;
block|}
DECL|method|setPsResource (Resource psResource)
specifier|public
name|RunJobParameters
name|setPsResource
parameter_list|(
name|Resource
name|psResource
parameter_list|)
block|{
name|this
operator|.
name|psResource
operator|=
name|psResource
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isTensorboardEnabled ()
specifier|public
name|boolean
name|isTensorboardEnabled
parameter_list|()
block|{
return|return
name|tensorboardEnabled
return|;
block|}
DECL|method|setTensorboardEnabled (boolean tensorboardEnabled)
specifier|public
name|RunJobParameters
name|setTensorboardEnabled
parameter_list|(
name|boolean
name|tensorboardEnabled
parameter_list|)
block|{
name|this
operator|.
name|tensorboardEnabled
operator|=
name|tensorboardEnabled
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getWorkerLaunchCmd ()
specifier|public
name|String
name|getWorkerLaunchCmd
parameter_list|()
block|{
return|return
name|workerLaunchCmd
return|;
block|}
DECL|method|setWorkerLaunchCmd (String workerLaunchCmd)
specifier|public
name|RunJobParameters
name|setWorkerLaunchCmd
parameter_list|(
name|String
name|workerLaunchCmd
parameter_list|)
block|{
name|this
operator|.
name|workerLaunchCmd
operator|=
name|workerLaunchCmd
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPSLaunchCmd ()
specifier|public
name|String
name|getPSLaunchCmd
parameter_list|()
block|{
return|return
name|psLaunchCmd
return|;
block|}
DECL|method|setPSLaunchCmd (String psLaunchCmd)
specifier|public
name|RunJobParameters
name|setPSLaunchCmd
parameter_list|(
name|String
name|psLaunchCmd
parameter_list|)
block|{
name|this
operator|.
name|psLaunchCmd
operator|=
name|psLaunchCmd
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isWaitJobFinish ()
specifier|public
name|boolean
name|isWaitJobFinish
parameter_list|()
block|{
return|return
name|waitJobFinish
return|;
block|}
DECL|method|getPsDockerImage ()
specifier|public
name|String
name|getPsDockerImage
parameter_list|()
block|{
return|return
name|psDockerImage
return|;
block|}
DECL|method|getWorkerDockerImage ()
specifier|public
name|String
name|getWorkerDockerImage
parameter_list|()
block|{
return|return
name|workerDockerImage
return|;
block|}
DECL|method|isDistributed ()
specifier|public
name|boolean
name|isDistributed
parameter_list|()
block|{
return|return
name|distributed
return|;
block|}
DECL|method|getTensorboardResource ()
specifier|public
name|Resource
name|getTensorboardResource
parameter_list|()
block|{
return|return
name|tensorboardResource
return|;
block|}
DECL|method|setTensorboardResource (Resource tensorboardResource)
specifier|public
name|void
name|setTensorboardResource
parameter_list|(
name|Resource
name|tensorboardResource
parameter_list|)
block|{
name|this
operator|.
name|tensorboardResource
operator|=
name|tensorboardResource
expr_stmt|;
block|}
DECL|method|getTensorboardDockerImage ()
specifier|public
name|String
name|getTensorboardDockerImage
parameter_list|()
block|{
return|return
name|tensorboardDockerImage
return|;
block|}
block|}
end_class

end_unit

