begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|CliUtils
specifier|public
class|class
name|CliUtils
block|{
DECL|field|RES_PATTERN
specifier|private
specifier|final
specifier|static
name|String
name|RES_PATTERN
init|=
literal|"^[^=]+=\\d+\\s?\\w*$"
decl_stmt|;
comment|/**    * Replace patterns inside cli    *    * @return launch command after pattern replace    */
DECL|method|replacePatternsInLaunchCommand (String specifiedCli, RunJobParameters jobRunParameters, RemoteDirectoryManager directoryManager)
specifier|public
specifier|static
name|String
name|replacePatternsInLaunchCommand
parameter_list|(
name|String
name|specifiedCli
parameter_list|,
name|RunJobParameters
name|jobRunParameters
parameter_list|,
name|RemoteDirectoryManager
name|directoryManager
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|input
init|=
name|jobRunParameters
operator|.
name|getInputPath
argument_list|()
decl_stmt|;
name|String
name|jobDir
init|=
name|jobRunParameters
operator|.
name|getCheckpointPath
argument_list|()
decl_stmt|;
name|String
name|savedModelDir
init|=
name|jobRunParameters
operator|.
name|getSavedModelPath
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacePattern
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobDir
operator|!=
literal|null
condition|)
block|{
name|replacePattern
operator|.
name|put
argument_list|(
literal|"%"
operator|+
name|CliConstants
operator|.
name|CHECKPOINT_PATH
operator|+
literal|"%"
argument_list|,
name|jobDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|replacePattern
operator|.
name|put
argument_list|(
literal|"%"
operator|+
name|CliConstants
operator|.
name|INPUT_PATH
operator|+
literal|"%"
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|savedModelDir
operator|!=
literal|null
condition|)
block|{
name|replacePattern
operator|.
name|put
argument_list|(
literal|"%"
operator|+
name|CliConstants
operator|.
name|SAVED_MODEL_PATH
operator|+
literal|"%"
argument_list|,
name|savedModelDir
argument_list|)
expr_stmt|;
block|}
name|String
name|newCli
init|=
name|specifiedCli
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replace
range|:
name|replacePattern
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newCli
operator|=
name|newCli
operator|.
name|replace
argument_list|(
name|replace
operator|.
name|getKey
argument_list|()
argument_list|,
name|replace
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newCli
return|;
block|}
comment|// TODO, this duplicated to Client of distributed shell, should cleanup
DECL|method|parseResourcesString (String resourcesStr)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|parseResourcesString
parameter_list|(
name|String
name|resourcesStr
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Ignore the grouping "[]"
if|if
condition|(
name|resourcesStr
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
name|resourcesStr
operator|=
name|resourcesStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourcesStr
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
name|resourcesStr
operator|=
name|resourcesStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|resourcesStr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|resource
range|:
name|resourcesStr
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|resource
operator|=
name|resource
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|matches
argument_list|(
name|RES_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"\""
operator|+
name|resource
operator|+
literal|"\" is not a "
operator|+
literal|"valid resource type/amount pair. "
operator|+
literal|"Please provide key=amount pairs separated by commas."
argument_list|)
throw|;
block|}
name|String
index|[]
name|splits
init|=
name|resource
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|,
name|value
init|=
name|splits
index|[
literal|1
index|]
decl_stmt|;
name|String
name|units
init|=
name|ResourceUtils
operator|.
name|getUnits
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
name|valueWithoutUnit
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|units
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Long
name|resourceValue
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|valueWithoutUnit
argument_list|)
decl_stmt|;
comment|// Convert commandline unit to standard YARN unit.
if|if
condition|(
name|units
operator|.
name|equals
argument_list|(
literal|"M"
argument_list|)
operator|||
name|units
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|units
operator|=
literal|"Mi"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|units
operator|.
name|equals
argument_list|(
literal|"G"
argument_list|)
operator|||
name|units
operator|.
name|equals
argument_list|(
literal|"g"
argument_list|)
condition|)
block|{
name|units
operator|=
literal|"Gi"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|units
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// do nothing;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Acceptable units are M/G or empty"
argument_list|)
throw|;
block|}
comment|// special handle memory-mb and memory
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|units
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resourceValue
operator|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|units
argument_list|,
literal|"Mi"
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"memory"
argument_list|)
condition|)
block|{
name|key
operator|=
name|ResourceInformation
operator|.
name|MEMORY_URI
expr_stmt|;
name|resourceValue
operator|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|units
argument_list|,
literal|"Mi"
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
comment|// special handle gpu
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"gpu"
argument_list|)
condition|)
block|{
name|key
operator|=
name|ResourceInformation
operator|.
name|GPU_URI
expr_stmt|;
block|}
comment|// special handle fpga
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"fpga"
argument_list|)
condition|)
block|{
name|key
operator|=
name|ResourceInformation
operator|.
name|FPGA_URI
expr_stmt|;
block|}
name|resources
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
DECL|method|validateResourceTypes (Iterable<String> resourceNames, List<ResourceTypeInfo> resourceTypes)
specifier|private
specifier|static
name|void
name|validateResourceTypes
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|resourceNames
parameter_list|,
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|resourceTypes
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
for|for
control|(
name|String
name|resourceName
range|:
name|resourceNames
control|)
block|{
if|if
condition|(
operator|!
name|resourceTypes
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|resourceName
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
argument_list|new
name|ResourceNotFoundException
argument_list|(
literal|"Unknown resource: "
operator|+
name|resourceName
argument_list|)
block|;       }
block|}
block|}
DECL|method|createResourceFromString (String resourceStr, List<ResourceTypeInfo> resourceTypes)
specifier|public
specifier|static
name|Resource
name|createResourceFromString
parameter_list|(
name|String
name|resourceStr
parameter_list|,
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|resourceTypes
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|typeToValue
init|=
name|parseResourcesString
argument_list|(
name|resourceStr
argument_list|)
decl_stmt|;
name|validateResourceTypes
argument_list|(
name|typeToValue
operator|.
name|keySet
argument_list|()
argument_list|,
name|resourceTypes
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|typeToValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resource
operator|.
name|setResourceValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
comment|// Is it for help?
DECL|method|argsForHelp (String[] args)
specifier|public
specifier|static
name|boolean
name|argsForHelp
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

