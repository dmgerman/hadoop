begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.services.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModelProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonPropertyOrder
import|;
end_import

begin_comment
comment|/**  * An Application resource has the following attributes.  **/
end_comment

begin_class
annotation|@
name|ApiModel
argument_list|(
name|description
operator|=
literal|"An Application resource has the following attributes."
argument_list|)
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"class io.swagger.codegen.languages.JavaClientCodegen"
argument_list|,
name|date
operator|=
literal|"2016-06-02T08:15:05.615-07:00"
argument_list|)
annotation|@
name|XmlRootElement
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
annotation|@
name|JsonPropertyOrder
argument_list|(
block|{
literal|"name"
block|,
literal|"state"
block|,
literal|"resource"
block|,
literal|"number_of_containers"
block|,
literal|"lifetime"
block|,
literal|"containers"
block|}
argument_list|)
DECL|class|Application
specifier|public
class|class
name|Application
extends|extends
name|BaseResource
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4491694636566094885L
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
init|=
literal|null
decl_stmt|;
DECL|field|artifact
specifier|private
name|Artifact
name|artifact
init|=
literal|null
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
DECL|field|launchCommand
specifier|private
name|String
name|launchCommand
init|=
literal|null
decl_stmt|;
DECL|field|launchTime
specifier|private
name|Date
name|launchTime
init|=
literal|null
decl_stmt|;
DECL|field|numberOfContainers
specifier|private
name|Long
name|numberOfContainers
init|=
literal|null
decl_stmt|;
DECL|field|numberOfRunningContainers
specifier|private
name|Long
name|numberOfRunningContainers
init|=
literal|null
decl_stmt|;
DECL|field|lifetime
specifier|private
name|Long
name|lifetime
init|=
literal|null
decl_stmt|;
DECL|field|placementPolicy
specifier|private
name|PlacementPolicy
name|placementPolicy
init|=
literal|null
decl_stmt|;
DECL|field|components
specifier|private
name|List
argument_list|<
name|Component
argument_list|>
name|components
init|=
literal|null
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
init|=
literal|null
decl_stmt|;
DECL|field|containers
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
name|ApplicationState
name|state
init|=
literal|null
decl_stmt|;
DECL|field|quicklinks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|quicklinks
init|=
literal|null
decl_stmt|;
DECL|field|queue
specifier|private
name|String
name|queue
init|=
literal|null
decl_stmt|;
comment|/**    * A unique application name.    **/
DECL|method|name (String name)
specifier|public
name|Application
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|value
operator|=
literal|"A unique application name."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**    * A unique application id.    **/
DECL|method|id (String id)
specifier|public
name|Application
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"A unique application id."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"id"
argument_list|)
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String id)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * Artifact of single-component applications. Mandatory if components    * attribute is not specified.    **/
DECL|method|artifact (Artifact artifact)
specifier|public
name|Application
name|artifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Artifact of single-component applications. Mandatory if components attribute is not specified."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"artifact"
argument_list|)
DECL|method|getArtifact ()
specifier|public
name|Artifact
name|getArtifact
parameter_list|()
block|{
return|return
name|artifact
return|;
block|}
DECL|method|setArtifact (Artifact artifact)
specifier|public
name|void
name|setArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
comment|/**    * Resource of single-component applications or the global default for    * multi-component applications. Mandatory if it is a single-component    * application and if cpus and memory are not specified at the Application    * level.    **/
DECL|method|resource (Resource resource)
specifier|public
name|Application
name|resource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Resource of single-component applications or the global default for multi-component applications. Mandatory if it is a single-component application and if cpus and memory are not specified at the Application level."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"resource"
argument_list|)
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|setResource (Resource resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
comment|/**    * The custom launch command of an application component (optional). If not    * specified for applications with docker images say, it will default to the    * default start command of the image. If there is a single component in this    * application, you can specify this without the need to have a 'components'    * section.    **/
DECL|method|launchCommand (String launchCommand)
specifier|public
name|Application
name|launchCommand
parameter_list|(
name|String
name|launchCommand
parameter_list|)
block|{
name|this
operator|.
name|launchCommand
operator|=
name|launchCommand
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"The custom launch command of an application component (optional). If not specified for applications with docker images say, it will default to the default start command of the image. If there is a single component in this application, you can specify this without the need to have a 'components' section."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"launch_command"
argument_list|)
DECL|method|getLaunchCommand ()
specifier|public
name|String
name|getLaunchCommand
parameter_list|()
block|{
return|return
name|launchCommand
return|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"launch_command"
argument_list|)
DECL|method|setLaunchCommand (String launchCommand)
specifier|public
name|void
name|setLaunchCommand
parameter_list|(
name|String
name|launchCommand
parameter_list|)
block|{
name|this
operator|.
name|launchCommand
operator|=
name|launchCommand
expr_stmt|;
block|}
comment|/**    * The time when the application was created, e.g. 2016-03-16T01:01:49.000Z.    **/
DECL|method|launchTime (Date launchTime)
specifier|public
name|Application
name|launchTime
parameter_list|(
name|Date
name|launchTime
parameter_list|)
block|{
name|this
operator|.
name|launchTime
operator|=
name|launchTime
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Date
operator|)
name|launchTime
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"The time when the application was created, e.g. 2016-03-16T01:01:49.000Z."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"launch_time"
argument_list|)
DECL|method|getLaunchTime ()
specifier|public
name|Date
name|getLaunchTime
parameter_list|()
block|{
return|return
name|launchTime
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Date
operator|)
name|launchTime
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"launch_time"
argument_list|)
DECL|method|setLaunchTime (Date launchTime)
specifier|public
name|void
name|setLaunchTime
parameter_list|(
name|Date
name|launchTime
parameter_list|)
block|{
name|this
operator|.
name|launchTime
operator|=
name|launchTime
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Date
operator|)
name|launchTime
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|/**    * Number of containers for each app-component in the application. Each    * app-component can further override this app-level global default.    **/
DECL|method|numberOfContainers (Long numberOfContainers)
specifier|public
name|Application
name|numberOfContainers
parameter_list|(
name|Long
name|numberOfContainers
parameter_list|)
block|{
name|this
operator|.
name|numberOfContainers
operator|=
name|numberOfContainers
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Number of containers for each app-component in the application. Each app-component can further override this app-level global default."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"number_of_containers"
argument_list|)
DECL|method|getNumberOfContainers ()
specifier|public
name|Long
name|getNumberOfContainers
parameter_list|()
block|{
return|return
name|numberOfContainers
return|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"number_of_containers"
argument_list|)
DECL|method|setNumberOfContainers (Long numberOfContainers)
specifier|public
name|void
name|setNumberOfContainers
parameter_list|(
name|Long
name|numberOfContainers
parameter_list|)
block|{
name|this
operator|.
name|numberOfContainers
operator|=
name|numberOfContainers
expr_stmt|;
block|}
comment|/**    * In get response this provides the total number of running containers for    * this application (across all components) at the time of request. Note, a    * subsequent request can return a different number as and when more    * containers get allocated until it reaches the total number of containers or    * if a flex request has been made between the two requests.    **/
DECL|method|numberOfRunningContainers (Long numberOfRunningContainers)
specifier|public
name|Application
name|numberOfRunningContainers
parameter_list|(
name|Long
name|numberOfRunningContainers
parameter_list|)
block|{
name|this
operator|.
name|numberOfRunningContainers
operator|=
name|numberOfRunningContainers
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"In get response this provides the total number of running containers for this application (across all components) at the time of request. Note, a subsequent request can return a different number as and when more containers get allocated until it reaches the total number of containers or if a flex request has been made between the two requests."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"number_of_running_containers"
argument_list|)
DECL|method|getNumberOfRunningContainers ()
specifier|public
name|Long
name|getNumberOfRunningContainers
parameter_list|()
block|{
return|return
name|numberOfRunningContainers
return|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"number_of_running_containers"
argument_list|)
DECL|method|setNumberOfRunningContainers (Long numberOfRunningContainers)
specifier|public
name|void
name|setNumberOfRunningContainers
parameter_list|(
name|Long
name|numberOfRunningContainers
parameter_list|)
block|{
name|this
operator|.
name|numberOfRunningContainers
operator|=
name|numberOfRunningContainers
expr_stmt|;
block|}
comment|/**    * Life time (in seconds) of the application from the time it reaches the    * STARTED state (after which it is automatically destroyed by YARN). For    * unlimited lifetime do not set a lifetime value.    **/
DECL|method|lifetime (Long lifetime)
specifier|public
name|Application
name|lifetime
parameter_list|(
name|Long
name|lifetime
parameter_list|)
block|{
name|this
operator|.
name|lifetime
operator|=
name|lifetime
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Life time (in seconds) of the application from the time it reaches the STARTED state (after which it is automatically destroyed by YARN). For unlimited lifetime do not set a lifetime value."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"lifetime"
argument_list|)
DECL|method|getLifetime ()
specifier|public
name|Long
name|getLifetime
parameter_list|()
block|{
return|return
name|lifetime
return|;
block|}
DECL|method|setLifetime (Long lifetime)
specifier|public
name|void
name|setLifetime
parameter_list|(
name|Long
name|lifetime
parameter_list|)
block|{
name|this
operator|.
name|lifetime
operator|=
name|lifetime
expr_stmt|;
block|}
comment|/**    * Advanced scheduling and placement policies (optional). If not specified, it    * defaults to the default placement policy of the app owner. The design of    * placement policies are in the works. It is not very clear at this point,    * how policies in conjunction with labels be exposed to application owners.    * This is a placeholder for now. The advanced structure of this attribute    * will be determined by YARN-4902.    **/
DECL|method|placementPolicy (PlacementPolicy placementPolicy)
specifier|public
name|Application
name|placementPolicy
parameter_list|(
name|PlacementPolicy
name|placementPolicy
parameter_list|)
block|{
name|this
operator|.
name|placementPolicy
operator|=
name|placementPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Advanced scheduling and placement policies (optional). If not specified, it defaults to the default placement policy of the app owner. The design of placement policies are in the works. It is not very clear at this point, how policies in conjunction with labels be exposed to application owners. This is a placeholder for now. The advanced structure of this attribute will be determined by YARN-4902."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"placement_policy"
argument_list|)
DECL|method|getPlacementPolicy ()
specifier|public
name|PlacementPolicy
name|getPlacementPolicy
parameter_list|()
block|{
return|return
name|placementPolicy
return|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"placement_policy"
argument_list|)
DECL|method|setPlacementPolicy (PlacementPolicy placementPolicy)
specifier|public
name|void
name|setPlacementPolicy
parameter_list|(
name|PlacementPolicy
name|placementPolicy
parameter_list|)
block|{
name|this
operator|.
name|placementPolicy
operator|=
name|placementPolicy
expr_stmt|;
block|}
comment|/**    * Components of an application.    **/
DECL|method|components (List<Component> components)
specifier|public
name|Application
name|components
parameter_list|(
name|List
argument_list|<
name|Component
argument_list|>
name|components
parameter_list|)
block|{
name|this
operator|.
name|components
operator|=
name|components
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Components of an application."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"components"
argument_list|)
DECL|method|getComponents ()
specifier|public
name|List
argument_list|<
name|Component
argument_list|>
name|getComponents
parameter_list|()
block|{
return|return
name|components
return|;
block|}
DECL|method|setComponents (List<Component> components)
specifier|public
name|void
name|setComponents
parameter_list|(
name|List
argument_list|<
name|Component
argument_list|>
name|components
parameter_list|)
block|{
name|this
operator|.
name|components
operator|=
name|components
expr_stmt|;
block|}
comment|/**    * Config properties of an application. Configurations provided at the    * application/global level are available to all the components. Specific    * properties can be overridden at the component level.    **/
DECL|method|configuration (Configuration configuration)
specifier|public
name|Application
name|configuration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Config properties of an application. Configurations provided at the application/global level are available to all the components. Specific properties can be overridden at the component level."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"configuration"
argument_list|)
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (Configuration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**    * Containers of a started application. Specifying a value for this attribute    * for the POST payload raises a validation error. This blob is available only    * in the GET response of a started application.    **/
DECL|method|containers (List<Container> containers)
specifier|public
name|Application
name|containers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
block|{
name|this
operator|.
name|containers
operator|=
name|containers
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Containers of a started application. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started application."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"containers"
argument_list|)
DECL|method|getContainers ()
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getContainers
parameter_list|()
block|{
return|return
name|containers
return|;
block|}
DECL|method|setContainers (List<Container> containers)
specifier|public
name|void
name|setContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
block|{
name|this
operator|.
name|containers
operator|=
name|containers
expr_stmt|;
block|}
DECL|method|addContainer (Container container)
specifier|public
name|void
name|addContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|this
operator|.
name|containers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|/**    * State of the application. Specifying a value for this attribute for the    * POST payload raises a validation error. This attribute is available only in    * the GET response of a started application.    **/
DECL|method|state (ApplicationState state)
specifier|public
name|Application
name|state
parameter_list|(
name|ApplicationState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"State of the application. Specifying a value for this attribute for the POST payload raises a validation error. This attribute is available only in the GET response of a started application."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"state"
argument_list|)
DECL|method|getState ()
specifier|public
name|ApplicationState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (ApplicationState state)
specifier|public
name|void
name|setState
parameter_list|(
name|ApplicationState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * A blob of key-value pairs of quicklinks to be exported for an application.    **/
DECL|method|quicklinks (Map<String, String> quicklinks)
specifier|public
name|Application
name|quicklinks
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|quicklinks
parameter_list|)
block|{
name|this
operator|.
name|quicklinks
operator|=
name|quicklinks
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"A blob of key-value pairs of quicklinks to be exported for an application."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"quicklinks"
argument_list|)
DECL|method|getQuicklinks ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQuicklinks
parameter_list|()
block|{
return|return
name|quicklinks
return|;
block|}
DECL|method|setQuicklinks (Map<String, String> quicklinks)
specifier|public
name|void
name|setQuicklinks
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|quicklinks
parameter_list|)
block|{
name|this
operator|.
name|quicklinks
operator|=
name|quicklinks
expr_stmt|;
block|}
comment|/**    * The YARN queue that this application should be submitted to.    **/
DECL|method|queue (String queue)
specifier|public
name|Application
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"The YARN queue that this application should be submitted to."
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"queue"
argument_list|)
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Application
name|application
init|=
operator|(
name|Application
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|application
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"class Application {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    name: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    id: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    artifact: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|artifact
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    resource: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|resource
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    launchCommand: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|launchCommand
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    launchTime: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|launchTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    numberOfContainers: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|numberOfContainers
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    numberOfRunningContainers: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|numberOfRunningContainers
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    lifetime: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|lifetime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    placementPolicy: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|placementPolicy
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    components: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|components
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    configuration: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|configuration
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    containers: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|containers
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    state: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|state
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    quicklinks: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|quicklinks
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    queue: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|queue
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */
DECL|method|toIndentedString (java.lang.Object o)
specifier|private
name|String
name|toIndentedString
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
return|;
block|}
block|}
end_class

end_unit

