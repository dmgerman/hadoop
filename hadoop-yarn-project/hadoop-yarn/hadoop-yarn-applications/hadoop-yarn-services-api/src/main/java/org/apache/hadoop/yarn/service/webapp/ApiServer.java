begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|RestApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
operator|.
name|ACCEPTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|RestApiConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The rest API endpoints for users to manage services on YARN.  */
end_comment

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
name|CONTEXT_ROOT
argument_list|)
DECL|class|ApiServer
specifier|public
class|class
name|ApiServer
block|{
DECL|method|ApiServer ()
specifier|public
name|ApiServer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|ApiServer (Configuration conf)
specifier|public
name|ApiServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApiServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|YARN_CONFIG
specifier|private
specifier|static
name|Configuration
name|YARN_CONFIG
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|serviceClientUnitTest
specifier|private
name|ServiceClient
name|serviceClientUnitTest
decl_stmt|;
DECL|field|unitTest
specifier|private
name|boolean
name|unitTest
init|=
literal|false
decl_stmt|;
static|static
block|{
name|init
argument_list|()
expr_stmt|;
block|}
comment|// initialize all the common resources - order is important
DECL|method|init ()
specifier|private
specifier|static
name|void
name|init
parameter_list|()
block|{   }
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|VERSION
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|";charset=utf-8"
block|}
argument_list|)
DECL|method|getVersion ()
specifier|public
name|Response
name|getVersion
parameter_list|()
block|{
name|String
name|version
init|=
name|VersionInfo
operator|.
name|getBuildVersion
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"{ \"hadoop_version\": \""
operator|+
name|version
operator|+
literal|"\"}"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|SERVICE_ROOT_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|";charset=utf-8"
block|}
argument_list|)
DECL|method|createService (@ontext HttpServletRequest request, Service service)
specifier|public
name|Response
name|createService
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
name|ServiceStatus
name|serviceStatus
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"POST: createService = {} user = {}"
argument_list|,
name|service
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|STOPPED
condition|)
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceClient
name|sc
init|=
name|getServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|sc
operator|.
name|actionBuild
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" version "
operator|+
name|service
operator|.
name|getVersion
argument_list|()
operator|+
literal|" saved."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ApplicationId
name|applicationId
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationId
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ServiceClient
name|sc
init|=
name|getServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|sc
operator|.
name|actionCreate
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|applicationId
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Application ID: "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
name|serviceStatus
operator|.
name|setState
argument_list|(
name|ACCEPTED
argument_list|)
expr_stmt|;
name|serviceStatus
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|SERVICE_ROOT_PATH
operator|+
literal|"/"
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|serviceStatus
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to create service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|": {}"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to create service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|": {}"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|SERVICE_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|";charset=utf-8"
block|}
argument_list|)
DECL|method|getService (@ontext HttpServletRequest request, @PathParam(SERVICE_NAME) String appName)
specifier|public
name|Response
name|getService
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|SERVICE_NAME
argument_list|)
name|String
name|appName
parameter_list|)
block|{
name|ServiceStatus
name|serviceStatus
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|appName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service name can not be null."
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"GET: getService for appName = {} user = {}"
argument_list|,
name|appName
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|Service
name|app
init|=
name|getServiceFromClient
argument_list|(
name|ugi
argument_list|,
name|appName
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|app
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|serviceStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_NAME_INVALID
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|serviceStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get service failed: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get service failed: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
name|SERVICE_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|";charset=utf-8"
block|}
argument_list|)
DECL|method|deleteService (@ontext HttpServletRequest request, @PathParam(SERVICE_NAME) String appName)
specifier|public
name|Response
name|deleteService
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|SERVICE_NAME
argument_list|)
name|String
name|appName
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|appName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service name can not be null."
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DELETE: deleteService for appName = {} user = {}"
argument_list|,
name|appName
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
return|return
name|stopService
argument_list|(
name|appName
argument_list|,
literal|true
argument_list|,
name|ugi
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to stop service: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to stop service: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|stopService (String appName, boolean destroy, final UserGroupInformation ugi)
specifier|private
name|Response
name|stopService
parameter_list|(
name|String
name|appName
parameter_list|,
name|boolean
name|destroy
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|ServiceClient
name|sc
init|=
name|getServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|Exception
name|stopException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|sc
operator|.
name|actionStop
argument_list|(
name|appName
argument_list|,
name|destroy
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully stopped service {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception stopping service"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stopException
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|destroy
condition|)
block|{
name|result
operator|=
name|sc
operator|.
name|actionDestroy
argument_list|(
name|appName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully deleted service {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|stopException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|stopException
throw|;
block|}
block|}
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ServiceStatus
name|serviceStatus
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|destroy
condition|)
block|{
if|if
condition|(
name|result
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Successfully destroyed service "
operator|+
name|appName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|result
operator|==
name|EXIT_NOT_FOUND
condition|)
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Service "
operator|+
name|appName
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|serviceStatus
argument_list|)
return|;
block|}
else|else
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Service "
operator|+
name|appName
operator|+
literal|" error cleaning up "
operator|+
literal|"registry"
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|serviceStatus
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|==
name|EXIT_COMMAND_ARGUMENT_ERROR
condition|)
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Service "
operator|+
name|appName
operator|+
literal|" is already stopped"
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|serviceStatus
argument_list|)
return|;
block|}
else|else
block|{
name|serviceStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Successfully stopped service "
operator|+
name|appName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|serviceStatus
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|COMPONENT_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|";charset=utf-8"
block|,
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
DECL|method|updateComponent (@ontext HttpServletRequest request, @PathParam(SERVICE_NAME) String appName, @PathParam(COMPONENT_NAME) String componentName, Component component)
specifier|public
name|Response
name|updateComponent
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|SERVICE_NAME
argument_list|)
name|String
name|appName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|COMPONENT_NAME
argument_list|)
name|String
name|componentName
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No component data provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|component
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|component
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Component name in the request object ("
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|") does not match that in the URI path ("
operator|+
name|componentName
operator|+
literal|")"
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|component
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No container count provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|component
operator|.
name|getNumberOfContainers
argument_list|()
operator|<
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid number of containers specified "
operator|+
name|component
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|original
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|run
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceClient
name|sc
init|=
operator|new
name|ServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|original
init|=
name|sc
operator|.
name|flexByRestService
argument_list|(
name|appName
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|componentName
argument_list|,
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|original
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ServiceStatus
name|status
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|"Updating component ("
operator|+
name|componentName
operator|+
literal|") size from "
operator|+
name|original
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
operator|+
literal|" to "
operator|+
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|status
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|SERVICE_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|";charset=utf-8"
block|}
argument_list|)
DECL|method|updateService (@ontext HttpServletRequest request, @PathParam(SERVICE_NAME) String appName, Service updateServiceData)
specifier|public
name|Response
name|updateService
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|SERVICE_NAME
argument_list|)
name|String
name|appName
parameter_list|,
name|Service
name|updateServiceData
parameter_list|)
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PUT: updateService for app = {} with data = {} user = {}"
argument_list|,
name|appName
argument_list|,
name|updateServiceData
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
comment|// Ignore the app name provided in updateServiceData and always use
comment|// appName path param
name|updateServiceData
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|FLEX
condition|)
block|{
return|return
name|flexService
argument_list|(
name|updateServiceData
argument_list|,
name|ugi
argument_list|)
return|;
block|}
comment|// For STOP the app should be running. If already stopped then this
comment|// operation will be a no-op. For START it should be in stopped state.
comment|// If already running then this operation will be a no-op.
if|if
condition|(
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|STOPPED
condition|)
block|{
return|return
name|stopService
argument_list|(
name|appName
argument_list|,
literal|false
argument_list|,
name|ugi
argument_list|)
return|;
block|}
comment|// If a START is requested
if|if
condition|(
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|STARTED
condition|)
block|{
return|return
name|startService
argument_list|(
name|appName
argument_list|,
name|ugi
argument_list|)
return|;
block|}
comment|// If an UPGRADE is requested
if|if
condition|(
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|UPGRADING
operator|||
name|updateServiceData
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
operator|)
condition|)
block|{
return|return
name|upgradeService
argument_list|(
name|updateServiceData
argument_list|,
name|ugi
argument_list|)
return|;
block|}
comment|// If new lifetime value specified then update it
if|if
condition|(
name|updateServiceData
operator|.
name|getLifetime
argument_list|()
operator|!=
literal|null
operator|&&
name|updateServiceData
operator|.
name|getLifetime
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|updateLifetime
argument_list|(
name|appName
argument_list|,
name|updateServiceData
argument_list|,
name|ugi
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Application is not found app: "
operator|+
name|appName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Service is not found in hdfs: "
operator|+
name|appName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Error while performing operation for app: "
operator|+
name|appName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
comment|// If nothing happens consider it a no-op
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|COMP_INSTANCE_LONG_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|RestApiConstants
operator|.
name|MEDIA_TYPE_JSON_UTF8
block|,
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
DECL|method|updateComponentInstance (@ontext HttpServletRequest request, @PathParam(SERVICE_NAME) String serviceName, @PathParam(COMPONENT_NAME) String componentName, @PathParam(COMP_INSTANCE_NAME) String compInstanceName, Container reqContainer)
specifier|public
name|Response
name|updateComponentInstance
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|SERVICE_NAME
argument_list|)
name|String
name|serviceName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|COMPONENT_NAME
argument_list|)
name|String
name|componentName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|COMP_INSTANCE_NAME
argument_list|)
name|String
name|compInstanceName
parameter_list|,
name|Container
name|reqContainer
parameter_list|)
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PUT: update component instance {} for component = {}"
operator|+
literal|" service = {} user = {}"
argument_list|,
name|compInstanceName
argument_list|,
name|componentName
argument_list|,
name|serviceName
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqContainer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No container data provided."
argument_list|)
throw|;
block|}
name|Service
name|service
init|=
name|getServiceFromClient
argument_list|(
name|ugi
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|service
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The component name in the URI path (%s) is invalid."
argument_list|,
name|componentName
argument_list|)
argument_list|)
throw|;
block|}
name|Container
name|liveContainer
init|=
name|component
operator|.
name|getComponentInstance
argument_list|(
name|compInstanceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|liveContainer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The component (%s) does not have a component instance (%s)."
argument_list|,
name|componentName
argument_list|,
name|compInstanceName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|reqContainer
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|reqContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
return|return
name|processContainerUpgrade
argument_list|(
name|ugi
argument_list|,
name|service
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|liveContainer
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|COMP_INSTANCES_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|RestApiConstants
operator|.
name|MEDIA_TYPE_JSON_UTF8
block|,
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
DECL|method|updateComponentInstances (@ontext HttpServletRequest request, @PathParam(SERVICE_NAME) String serviceName, List<Container> requestContainers)
specifier|public
name|Response
name|updateComponentInstances
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|SERVICE_NAME
argument_list|)
name|String
name|serviceName
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|requestContainers
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|requestContainers
operator|==
literal|null
operator|||
name|requestContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No containers provided."
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getProxyUser
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toUpgrade
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|reqContainer
range|:
name|requestContainers
control|)
block|{
if|if
condition|(
name|reqContainer
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|reqContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
name|toUpgrade
operator|.
name|add
argument_list|(
name|reqContainer
operator|.
name|getComponentInstanceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|toUpgrade
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Service
name|service
init|=
name|getServiceFromClient
argument_list|(
name|ugi
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PUT: upgrade component instances {} for service = {} "
operator|+
literal|"user = {}"
argument_list|,
name|toUpgrade
argument_list|,
name|serviceName
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|liveContainers
init|=
name|ServiceApiUtil
operator|.
name|getLiveContainers
argument_list|(
name|service
argument_list|,
name|toUpgrade
argument_list|)
decl_stmt|;
return|return
name|processContainerUpgrade
argument_list|(
name|ugi
argument_list|,
name|service
argument_list|,
name|liveContainers
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|flexService (Service service, UserGroupInformation ugi)
specifier|private
name|Response
name|flexService
parameter_list|(
name|Service
name|service
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|appName
init|=
name|service
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Response
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentCountStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|c
range|:
name|service
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|componentCountStrings
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getNumberOfContainers
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Integer
name|result
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|ServiceClient
name|sc
init|=
operator|new
name|ServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|result
operator|=
name|sc
operator|.
name|actionFlex
argument_list|(
name|appName
argument_list|,
name|componentCountStrings
argument_list|)
expr_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|String
name|message
init|=
literal|"Service "
operator|+
name|appName
operator|+
literal|" is successfully flexed."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ServiceStatus
name|status
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|status
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|response
operator|=
name|formatResponse
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|updateLifetime (String appName, Service updateAppData, final UserGroupInformation ugi)
specifier|private
name|Response
name|updateLifetime
parameter_list|(
name|String
name|appName
parameter_list|,
name|Service
name|updateAppData
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|newLifeTime
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceClient
name|sc
init|=
name|getServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|newLifeTime
init|=
name|sc
operator|.
name|updateLifetime
argument_list|(
name|appName
argument_list|,
name|updateAppData
operator|.
name|getLifetime
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newLifeTime
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ServiceStatus
name|status
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|"Service ("
operator|+
name|appName
operator|+
literal|")'s lifeTime is updated to "
operator|+
name|newLifeTime
operator|+
literal|", "
operator|+
name|updateAppData
operator|.
name|getLifetime
argument_list|()
operator|+
literal|" seconds remaining"
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|startService (String appName, final UserGroupInformation ugi)
specifier|private
name|Response
name|startService
parameter_list|(
name|String
name|appName
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceClient
name|sc
init|=
name|getServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|sc
operator|.
name|actionStart
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully started service "
operator|+
name|appName
argument_list|)
expr_stmt|;
name|ServiceStatus
name|status
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|"Service "
operator|+
name|appName
operator|+
literal|" is successfully started."
argument_list|)
expr_stmt|;
name|status
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|upgradeService (Service service, final UserGroupInformation ugi)
specifier|private
name|Response
name|upgradeService
parameter_list|(
name|Service
name|service
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ServiceStatus
name|status
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|ServiceClient
name|sc
operator|=
name|getServiceClient
argument_list|()
block|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
block|;
name|sc
operator|.
name|start
argument_list|()
block|;
name|sc
operator|.
name|initiateUpgrade
argument_list|(
name|service
argument_list|)
block|;
name|sc
operator|.
name|close
argument_list|()
block|;
return|return
literal|null
return|;
block|}
block|)
function|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service {} version {} upgrade initialized"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|"Service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" version "
operator|+
name|service
operator|.
name|getVersion
argument_list|()
operator|+
literal|" saved."
argument_list|)
expr_stmt|;
name|status
operator|.
name|setState
parameter_list|(
name|ServiceState
operator|.
name|ACCEPTED
parameter_list|)
constructor_decl|;
return|return
name|formatResponse
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|status
argument_list|)
return|;
block|}
end_class

begin_function
DECL|method|processContainerUpgrade (UserGroupInformation ugi, Service service, List<Container> containers)
specifier|private
name|Response
name|processContainerUpgrade
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Service
name|service
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|service
operator|.
name|getState
argument_list|()
operator|!=
name|ServiceState
operator|.
name|UPGRADING
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The upgrade of service %s has not been initiated."
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Container
name|liveContainer
range|:
name|containers
control|)
block|{
if|if
condition|(
name|liveContainer
operator|.
name|getState
argument_list|()
operator|!=
name|ContainerState
operator|.
name|NEEDS_UPGRADE
condition|)
block|{
comment|// Nothing to upgrade
throw|throw
operator|new
name|YarnException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The component instance (%s) does not need an upgrade."
argument_list|,
name|liveContainer
operator|.
name|getComponentInstanceName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|Integer
name|result
init|=
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|int
name|result1
block|;
name|ServiceClient
name|sc
operator|=
name|getServiceClient
argument_list|()
block|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
block|;
name|sc
operator|.
name|start
argument_list|()
block|;
name|result1
operator|=
name|sc
operator|.
name|actionUpgrade
argument_list|(
name|service
argument_list|,
name|containers
argument_list|)
block|;
name|sc
operator|.
name|close
argument_list|()
block|;
return|return
name|result1
return|;
block|}
block|)
function|;
end_function

begin_if
if|if
condition|(
name|result
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|ServiceStatus
name|status
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|"Upgrading component instances "
operator|+
name|containers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Container
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|status
argument_list|)
return|;
block|}
end_if

begin_comment
comment|// If result is not a success, consider it a no-op
end_comment

begin_return
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
end_return

begin_function
unit|}    private
DECL|method|getServiceFromClient (UserGroupInformation ugi, String serviceName)
name|Service
name|getServiceFromClient
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|serviceName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Service
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|ServiceClient
name|sc
operator|=
name|getServiceClient
argument_list|()
block|;
name|sc
operator|.
name|init
argument_list|(
name|YARN_CONFIG
argument_list|)
block|;
name|sc
operator|.
name|start
argument_list|()
block|;
name|Service
name|app1
operator|=
name|sc
operator|.
name|getStatus
argument_list|(
name|serviceName
argument_list|)
block|;
name|sc
operator|.
name|close
argument_list|()
block|;
return|return
name|app1
return|;
block|}
block|)
function|;
end_function

begin_comment
unit|}
comment|/**    * Used by negative test case.    *    * @param mockServerClient - A mocked version of ServiceClient    */
end_comment

begin_function
DECL|method|setServiceClient (ServiceClient mockServerClient)
unit|public
name|void
name|setServiceClient
parameter_list|(
name|ServiceClient
name|mockServerClient
parameter_list|)
block|{
name|serviceClientUnitTest
operator|=
name|mockServerClient
expr_stmt|;
name|unitTest
operator|=
literal|true
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getServiceClient ()
specifier|private
name|ServiceClient
name|getServiceClient
parameter_list|()
block|{
if|if
condition|(
name|unitTest
condition|)
block|{
return|return
name|serviceClientUnitTest
return|;
block|}
else|else
block|{
return|return
operator|new
name|ServiceClient
argument_list|()
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Configure impersonation callback.    *    * @param request - web request    * @return - configured UGI class for proxy callback    * @throws IOException - if user is not login.    */
end_comment

begin_function
DECL|method|getProxyUser (HttpServletRequest request)
specifier|private
name|UserGroupInformation
name|getProxyUser
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|UserGroupInformation
name|proxyUser
decl_stmt|;
name|UserGroupInformation
name|ugi
decl_stmt|;
name|String
name|remoteUser
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|proxyUser
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|remoteUser
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|ugi
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Format HTTP response.    *    * @param status - HTTP Code    * @param message - Diagnostic message    * @return - HTTP response    */
end_comment

begin_function
DECL|method|formatResponse (Status status, String message)
specifier|private
name|Response
name|formatResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|ServiceStatus
name|entity
init|=
operator|new
name|ServiceStatus
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setDiagnostics
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|formatResponse
argument_list|(
name|status
argument_list|,
name|entity
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Format HTTP response.    *    * @param status - HTTP Code    * @param entity - ServiceStatus object    * @return - HTTP response    */
end_comment

begin_function
DECL|method|formatResponse (Status status, ServiceStatus entity)
specifier|private
name|Response
name|formatResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|ServiceStatus
name|entity
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|status
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

