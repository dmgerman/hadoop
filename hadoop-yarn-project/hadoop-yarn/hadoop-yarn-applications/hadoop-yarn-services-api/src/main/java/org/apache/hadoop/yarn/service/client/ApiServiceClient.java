begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|jsonSerDeser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RMHAUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|ClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The rest API client for users to manage services on YARN.  */
end_comment

begin_class
DECL|class|ApiServiceClient
specifier|public
class|class
name|ApiServiceClient
extends|extends
name|AppAdminClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApiServiceClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|yarnClient
specifier|protected
name|YarnClient
name|yarnClient
decl_stmt|;
DECL|method|serviceInit (Configuration configuration)
annotation|@
name|Override
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|yarnClient
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculate Resource Manager address base on working REST API.    */
DECL|method|getRMWebAddress ()
specifier|private
name|String
name|getRMWebAddress
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
literal|"http://"
decl_stmt|;
name|String
name|path
init|=
literal|"/app/v1/services/version"
decl_stmt|;
name|String
name|rmAddress
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.webapp.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hadoop.ssl.enabled"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|scheme
operator|=
literal|"https://"
expr_stmt|;
name|rmAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.webapp.https.address"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rmServers
init|=
name|RMHAUtils
operator|.
name|getRMHAWebappAddresses
argument_list|(
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|rmServers
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|webResource
init|=
name|client
operator|.
name|resource
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|test
init|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|contains
argument_list|(
literal|"hadoop_version"
argument_list|)
condition|)
block|{
name|rmAddress
operator|=
name|host
expr_stmt|;
break|break;
block|}
block|}
return|return
name|scheme
operator|+
name|rmAddress
return|;
block|}
comment|/**    * Compute active resource manager API service location.    *    * @param appName - YARN service name    * @return URI to API Service    * @throws IOException    */
DECL|method|getApiUrl (String appName)
specifier|private
name|String
name|getApiUrl
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
name|getRMWebAddress
argument_list|()
decl_stmt|;
name|StringBuilder
name|api
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|api
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|api
operator|.
name|append
argument_list|(
literal|"/app/v1/services"
argument_list|)
expr_stmt|;
if|if
condition|(
name|appName
operator|!=
literal|null
condition|)
block|{
name|api
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|api
operator|.
name|append
argument_list|(
name|appName
argument_list|)
expr_stmt|;
block|}
return|return
name|api
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getApiClient ()
specifier|private
name|Builder
name|getApiClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApiClient
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Setup API service web request.    *    * @param appName    * @return    * @throws IOException    */
DECL|method|getApiClient (String appName)
specifier|private
name|Builder
name|getApiClient
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
name|Client
name|client
init|=
name|Client
operator|.
name|create
argument_list|(
name|getClientConfig
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|client
operator|.
name|setChunkedEncodingSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Builder
name|builder
init|=
name|client
operator|.
name|resource
argument_list|(
name|getApiUrl
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.security.authentication"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"kerberos"
argument_list|)
condition|)
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|builder
operator|.
name|header
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|accept
argument_list|(
literal|"application/json;charset=utf-8"
argument_list|)
return|;
block|}
DECL|method|getClientConfig ()
specifier|private
name|ClientConfig
name|getClientConfig
parameter_list|()
block|{
name|ClientConfig
name|config
init|=
operator|new
name|DefaultClientConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientConfig
operator|.
name|PROPERTY_CHUNKED_ENCODING_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientConfig
operator|.
name|PROPERTY_BUFFER_RESPONSE_ENTITY_ON_EXCEPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|processResponse (ClientResponse response)
specifier|private
name|int
name|processResponse
parameter_list|(
name|ClientResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|bufferEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|>=
literal|299
condition|)
block|{
name|String
name|error
init|=
literal|""
decl_stmt|;
try|try
block|{
name|ServiceStatus
name|ss
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|ServiceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|error
operator|=
name|ss
operator|.
name|getDiagnostics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EXIT_EXCEPTION_THROWN
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|response
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
comment|/**    * Utility method to load Service json from disk or from    * YARN examples.    *    * @param fileName - path to yarnfile    * @param serviceName - YARN Service Name    * @param lifetime - application lifetime    * @param queue - Queue to submit application    * @return    * @throws IOException    * @throws YarnException    */
DECL|method|loadAppJsonFromLocalFS (String fileName, String serviceName, Long lifetime, String queue)
specifier|public
name|Service
name|loadAppJsonFromLocalFS
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|fileName
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|examplesDirStr
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"YARN_SERVICE_EXAMPLES_DIR"
argument_list|)
decl_stmt|;
name|String
index|[]
name|examplesDirs
decl_stmt|;
if|if
condition|(
name|examplesDirStr
operator|==
literal|null
condition|)
block|{
name|String
name|yarnHome
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|examplesDirs
operator|=
operator|new
name|String
index|[]
block|{
name|yarnHome
operator|+
literal|"/share/hadoop/yarn/yarn-service-examples"
block|,
name|yarnHome
operator|+
literal|"/yarn-service-examples"
block|}
expr_stmt|;
block|}
else|else
block|{
name|examplesDirs
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|examplesDirStr
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|examplesDirs
control|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}/{1}/{2}.json"
argument_list|,
name|dir
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Then look for secondary location.
name|file
operator|=
operator|new
name|File
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}/{1}.json"
argument_list|,
name|dir
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"File or example could not be found: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading service definition from local FS: "
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|service
operator|.
name|setName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lifetime
operator|!=
literal|null
operator|&&
name|lifetime
operator|>
literal|0
condition|)
block|{
name|service
operator|.
name|setLifetime
argument_list|(
name|lifetime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|service
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
comment|/**    * Launch YARN service application.    *    * @param fileName - path to yarnfile    * @param appName - YARN Service Name    * @param lifetime - application lifetime    * @param queue - Queue to submit application    */
annotation|@
name|Override
DECL|method|actionLaunch (String fileName, String appName, Long lifetime, String queue)
specifier|public
name|int
name|actionLaunch
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|appName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|appName
argument_list|,
name|lifetime
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|()
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to launch application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Stop YARN service application.    *    * @param appName - YARN Service Name    */
annotation|@
name|Override
DECL|method|actionStop (String appName)
specifier|public
name|int
name|actionStop
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|appName
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to stop application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Start YARN service application.    *    * @param appName - YARN Service Name    */
annotation|@
name|Override
DECL|method|actionStart (String appName)
specifier|public
name|int
name|actionStart
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|appName
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to start application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Save Service configuration.    *    * @param fileName - path to Yarnfile    * @param appName - YARN Service Name    * @param lifetime - container life time    * @param queue - Queue to submit the application    */
annotation|@
name|Override
DECL|method|actionSave (String fileName, String appName, Long lifetime, String queue)
specifier|public
name|int
name|actionSave
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|appName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|appName
argument_list|,
name|lifetime
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|()
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to save application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Decommission a YARN service.    *    * @param appName - YARN Service Name    */
annotation|@
name|Override
DECL|method|actionDestroy (String appName)
specifier|public
name|int
name|actionDestroy
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|appName
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to destroy application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Change number of containers associated with a service.    *    * @param appName - YARN Service Name    * @param cmponentCounts - list of components and desired container count    */
annotation|@
name|Override
DECL|method|actionFlex (String appName, Map<String, String> componentCounts)
specifier|public
name|int
name|actionFlex
parameter_list|(
name|String
name|appName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentCounts
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|FLEX
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|componentCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|component
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|numberOfContainers
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|setNumberOfContainers
argument_list|(
name|numberOfContainers
argument_list|)
expr_stmt|;
name|service
operator|.
name|addComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|appName
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to flex application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|enableFastLaunch ()
specifier|public
name|int
name|enableFastLaunch
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ServiceClient
name|sc
init|=
operator|new
name|ServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|sc
operator|.
name|enableFastLaunch
argument_list|()
decl_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Retrieve Service Status through REST API.    *    * @param applicationId - YARN application ID    * @return Status output    */
annotation|@
name|Override
DECL|method|getStatusString (String applicationId)
specifier|public
name|String
name|getStatusString
parameter_list|(
name|String
name|applicationId
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|String
name|output
init|=
literal|""
decl_stmt|;
try|try
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|applicationId
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|appName
init|=
name|appReport
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|appName
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|200
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Failed : HTTP error code : "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|output
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to check application status: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
block|}
end_class

end_unit

