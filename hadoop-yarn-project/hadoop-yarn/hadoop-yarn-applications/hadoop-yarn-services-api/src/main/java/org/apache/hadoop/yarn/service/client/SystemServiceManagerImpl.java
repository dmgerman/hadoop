begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|service
operator|.
name|SystemServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|jsonSerDeser
import|;
end_import

begin_comment
comment|/**  * SystemServiceManager implementation.  * Scan for configure system service path.  *  * The service path structure is as follows:  * SYSTEM_SERVICE_DIR_PATH  * |---- sync  * |     |--- user1  * |     |    |---- service1.yarnfile  * |     |    |---- service2.yarnfile  * |     |--- user2  * |     |    |---- service1.yarnfile  * |     |    ....  * |     |  * |---- async  * |     |--- user3  * |     |    |---- service1.yarnfile  * |     |    |---- service2.yarnfile  * |     |--- user4  * |     |    |---- service1.yarnfile  * |     |    ....  * |     |  *  * sync: These services are launched at the time of service start synchronously.  *       It is a blocking service start.  * async: These services are launched in separate thread without any delay after  *       service start. Non-blocking service start.  */
end_comment

begin_class
DECL|class|SystemServiceManagerImpl
specifier|public
class|class
name|SystemServiceManagerImpl
extends|extends
name|AbstractService
implements|implements
name|SystemServiceManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SystemServiceManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|YARN_FILE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|YARN_FILE_SUFFIX
init|=
literal|".yarnfile"
decl_stmt|;
DECL|field|SYNC
specifier|private
specifier|static
specifier|final
name|String
name|SYNC
init|=
literal|"sync"
decl_stmt|;
DECL|field|ASYNC
specifier|private
specifier|static
specifier|final
name|String
name|ASYNC
init|=
literal|"async"
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|systemServiceDir
specifier|private
name|Path
name|systemServiceDir
decl_stmt|;
DECL|field|stopExecutors
specifier|private
name|AtomicBoolean
name|stopExecutors
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|syncUserServices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|syncUserServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|asyncUserServices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|asyncUserServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|loginUGI
specifier|private
name|UserGroupInformation
name|loginUGI
decl_stmt|;
DECL|field|serviceLaucher
specifier|private
name|Thread
name|serviceLaucher
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|skipCounter
specifier|private
name|int
name|skipCounter
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|ignoredUserServices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|ignoredUserServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SystemServiceManagerImpl ()
specifier|public
name|SystemServiceManagerImpl
parameter_list|()
block|{
name|super
argument_list|(
name|SystemServiceManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dirPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnServiceConf
operator|.
name|YARN_SERVICES_SYSTEM_SERVICE_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirPath
operator|!=
literal|null
condition|)
block|{
name|systemServiceDir
operator|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"System Service Directory is configured to {}"
argument_list|,
name|systemServiceDir
argument_list|)
expr_stmt|;
name|fs
operator|=
name|systemServiceDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|loginUGI
operator|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|?
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
else|:
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"UserGroupInformation initialized to {}"
argument_list|,
name|loginUGI
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|scanForUserServices
argument_list|()
expr_stmt|;
name|launchUserService
argument_list|(
name|syncUserServices
argument_list|)
expr_stmt|;
comment|// Create a thread and submit services in background otherwise it
comment|// block RM switch time.
name|serviceLaucher
operator|=
operator|new
name|Thread
argument_list|(
name|createRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|serviceLaucher
operator|.
name|setName
argument_list|(
literal|"System service launcher"
argument_list|)
expr_stmt|;
name|serviceLaucher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping {}"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stopExecutors
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceLaucher
operator|!=
literal|null
condition|)
block|{
name|serviceLaucher
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|serviceLaucher
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted Exception while stopping"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createRunnable ()
specifier|private
name|Runnable
name|createRunnable
parameter_list|()
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|launchUserService
argument_list|(
name|asyncUserServices
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|launchUserService (Map<String, Set<Service>> userServices)
name|void
name|launchUserService
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|userServices
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|entry
range|:
name|userServices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ServiceClient
name|serviceClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|userUgi
init|=
name|getProxyUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|serviceClient
operator|=
name|createServiceClient
argument_list|(
name|userUgi
argument_list|)
expr_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"POST: createService = {} user = {}"
argument_list|,
name|service
argument_list|,
name|userUgi
argument_list|)
expr_stmt|;
try|try
block|{
name|launchServices
argument_list|(
name|userUgi
argument_list|,
name|serviceClient
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Failed to create service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"System service launcher thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while submitting services for user "
operator|+
name|user
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|serviceClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|serviceClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing serviceClient for user {}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|createServiceClient (UserGroupInformation userUgi)
specifier|private
name|ServiceClient
name|createServiceClient
parameter_list|(
name|UserGroupInformation
name|userUgi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ServiceClient
name|serviceClient
init|=
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ServiceClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServiceClient
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ServiceClient
name|sc
init|=
name|getServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|sc
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|serviceClient
return|;
block|}
DECL|method|launchServices (UserGroupInformation userUgi, ServiceClient serviceClient, Service service)
specifier|private
name|void
name|launchServices
parameter_list|(
name|UserGroupInformation
name|userUgi
parameter_list|,
name|ServiceClient
name|serviceClient
parameter_list|,
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|service
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|STOPPED
condition|)
block|{
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|serviceClient
operator|.
name|actionBuild
argument_list|(
name|service
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service {} version {} saved."
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ApplicationId
name|applicationId
init|=
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationId
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ApplicationId
name|applicationId
init|=
name|serviceClient
operator|.
name|actionCreate
argument_list|(
name|service
argument_list|)
decl_stmt|;
return|return
name|applicationId
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service {} submitted with Application ID: {}"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getServiceClient ()
name|ServiceClient
name|getServiceClient
parameter_list|()
block|{
return|return
operator|new
name|ServiceClient
argument_list|()
return|;
block|}
DECL|method|getProxyUser (String user)
specifier|private
name|UserGroupInformation
name|getProxyUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|UserGroupInformation
name|ugi
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|user
argument_list|,
name|loginUGI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|ugi
return|;
block|}
comment|// scan for both launch service types i.e sync and async
DECL|method|scanForUserServices ()
name|void
name|scanForUserServices
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|systemServiceDir
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan for launch type on {}"
argument_list|,
name|systemServiceDir
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|iterLaunchType
init|=
name|list
argument_list|(
name|systemServiceDir
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterLaunchType
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|launchType
init|=
name|iterLaunchType
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|launchType
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanner skips for unknown file {}"
argument_list|,
name|launchType
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|launchType
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|SYNC
argument_list|)
condition|)
block|{
name|scanForUserServiceDefinition
argument_list|(
name|launchType
operator|.
name|getPath
argument_list|()
argument_list|,
name|syncUserServices
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|launchType
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ASYNC
argument_list|)
condition|)
block|{
name|scanForUserServiceDefinition
argument_list|(
name|launchType
operator|.
name|getPath
argument_list|()
argument_list|,
name|asyncUserServices
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanner skips for unknown dir {}."
argument_list|,
name|launchType
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"System service directory {} doesn't not exist."
argument_list|,
name|systemServiceDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Files are under systemServiceDir/<users>. Scan for 2 levels
comment|// 1st level for users
comment|// 2nd level for service definitions under user
DECL|method|scanForUserServiceDefinition (Path userDirPath, Map<String, Set<Service>> userServices)
specifier|private
name|void
name|scanForUserServiceDefinition
parameter_list|(
name|Path
name|userDirPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|userServices
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan for users on {}"
argument_list|,
name|userDirPath
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|iterUsers
init|=
name|list
argument_list|(
name|userDirPath
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterUsers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|userDir
init|=
name|iterUsers
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if 1st level is not user directory then skip it.
if|if
condition|(
operator|!
name|userDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service definition {} doesn't belong to any user. Ignoring.. "
argument_list|,
name|userDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|userName
init|=
name|userDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanning service definitions for user {}."
argument_list|,
name|userName
argument_list|)
expr_stmt|;
comment|//2nd level scan
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|iterServices
init|=
name|list
argument_list|(
name|userDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterServices
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|serviceCache
init|=
name|iterServices
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|serviceCache
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|serviceCache
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner skips for unknown dir {}"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|filename
operator|.
name|endsWith
argument_list|(
name|YARN_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner skips for unknown file extension, filename = {}"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|skipCounter
operator|++
expr_stmt|;
continue|continue;
block|}
name|Service
name|service
init|=
name|getServiceDefinition
argument_list|(
name|serviceCache
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|userServices
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|==
literal|null
condition|)
block|{
name|services
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|userServices
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|services
operator|.
name|add
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|int
name|count
init|=
name|ignoredUserServices
operator|.
name|containsKey
argument_list|(
name|userName
argument_list|)
condition|?
name|ignoredUserServices
operator|.
name|get
argument_list|(
name|userName
argument_list|)
else|:
literal|0
decl_stmt|;
name|ignoredUserServices
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring service {} for the user {} as it is already present,"
operator|+
literal|" filename = {}"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Added service {} for the user {}, filename = {}"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getServiceDefinition (Path filePath)
specifier|private
name|Service
name|getServiceDefinition
parameter_list|(
name|Path
name|filePath
parameter_list|)
block|{
name|Service
name|service
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading service definition from FS: "
operator|+
name|filePath
argument_list|)
expr_stmt|;
block|}
name|service
operator|=
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error while loading service definition from FS: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
DECL|method|list (Path path)
specifier|private
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|list
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StoppableRemoteIterator
argument_list|(
name|fs
operator|.
name|listStatusIterator
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getIgnoredUserServices ()
annotation|@
name|VisibleForTesting
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getIgnoredUserServices
parameter_list|()
block|{
return|return
name|ignoredUserServices
return|;
block|}
DECL|class|StoppableRemoteIterator
specifier|private
class|class
name|StoppableRemoteIterator
implements|implements
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
block|{
DECL|field|remote
specifier|private
specifier|final
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|remote
decl_stmt|;
DECL|method|StoppableRemoteIterator (RemoteIterator<FileStatus> remote)
name|StoppableRemoteIterator
parameter_list|(
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|remote
parameter_list|)
block|{
name|this
operator|.
name|remote
operator|=
name|remote
expr_stmt|;
block|}
DECL|method|hasNext ()
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|!
name|stopExecutors
operator|.
name|get
argument_list|()
operator|&&
name|remote
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next ()
annotation|@
name|Override
specifier|public
name|FileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|remote
operator|.
name|next
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getSyncUserServices ()
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|getSyncUserServices
parameter_list|()
block|{
return|return
name|syncUserServices
return|;
block|}
DECL|method|getSkipCounter ()
annotation|@
name|VisibleForTesting
name|int
name|getSkipCounter
parameter_list|()
block|{
return|return
name|skipCounter
return|;
block|}
block|}
end_class

end_unit

