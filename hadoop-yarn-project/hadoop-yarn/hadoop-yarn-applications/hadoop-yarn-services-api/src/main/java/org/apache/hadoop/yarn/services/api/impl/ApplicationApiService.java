begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.services.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|utils
operator|.
name|RestApiConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|utils
operator|.
name|RestApiErrorMessages
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SerializationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|api
operator|.
name|ApplicationApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|ApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|OptionKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|StateValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionCreateArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionFlexArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionFreezeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionListArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionRegistryArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionStatusArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionThawArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ComponentArgsDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|buildutils
operator|.
name|BuildHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|UnknownApplicationInstanceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|docker
operator|.
name|DockerKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParser
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
name|APPLICATIONS_API_RESOURCE_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|class|ApplicationApiService
specifier|public
class|class
name|ApplicationApiService
implements|implements
name|ApplicationApi
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApplicationApiService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SLIDER_CONFIG
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|SLIDER_CONFIG
decl_stmt|;
DECL|field|SLIDER_USER
specifier|private
specifier|static
name|UserGroupInformation
name|SLIDER_USER
decl_stmt|;
DECL|field|SLIDER_CLIENT
specifier|private
specifier|static
name|SliderClient
name|SLIDER_CLIENT
decl_stmt|;
static|static
block|{
name|init
argument_list|()
expr_stmt|;
block|}
comment|// initialize all the common resources - order is important
DECL|method|init ()
specifier|protected
specifier|static
name|void
name|init
parameter_list|()
block|{
name|SLIDER_CONFIG
operator|=
name|getSliderClientConfiguration
argument_list|()
expr_stmt|;
name|SLIDER_USER
operator|=
name|getSliderUser
argument_list|()
expr_stmt|;
name|SLIDER_CLIENT
operator|=
name|createSliderClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/slider-version"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getSliderVersion ()
specifier|public
name|Response
name|getSliderVersion
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"GET: getSliderVersion"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BuildHelper
operator|.
name|addBuildMetadata
argument_list|(
name|metadata
argument_list|,
literal|"org.apache.hadoop.yarn.services"
argument_list|)
expr_stmt|;
name|String
name|sliderVersion
init|=
name|metadata
operator|.
name|toString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Slider version = {}"
argument_list|,
name|sliderVersion
argument_list|)
expr_stmt|;
name|String
name|hadoopVersion
init|=
name|SliderVersionInfo
operator|.
name|getHadoopVersionString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Hadoop version = {}"
argument_list|,
name|hadoopVersion
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"{ \"slider_version\": \""
operator|+
name|sliderVersion
operator|+
literal|"\", \"hadoop_version\": \""
operator|+
name|hadoopVersion
operator|+
literal|"\"}"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|createApplication (Application application)
specifier|public
name|Response
name|createApplication
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"POST: createApplication for app = {}"
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compNameArtifactIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// post payload validation
try|try
block|{
name|validateApplicationPostPayload
argument_list|(
name|application
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
name|applicationId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|applicationId
operator|=
name|createSliderApp
argument_list|(
name|application
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|se
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Create application failed"
argument_list|,
name|se
argument_list|)
expr_stmt|;
if|if
condition|(
name|se
operator|.
name|getExitCode
argument_list|()
operator|==
name|SliderExitCodes
operator|.
name|EXIT_APPLICATION_IN_USE
condition|)
block|{
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|ERROR_APPLICATION_IN_USE
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Create application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
name|applicationStatus
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|APPLICATIONS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|application
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// 202 = ACCEPTED
return|return
name|Response
operator|.
name|status
argument_list|(
name|HTTP_STATUS_CODE_ACCEPTED
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|validateApplicationPostPayload (Application application, Map<String, String> compNameArtifactIdMap)
specifier|protected
name|void
name|validateApplicationPostPayload
parameter_list|(
name|Application
name|application
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compNameArtifactIdMap
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_APPLICATION_NAME_INVALID
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isClusternameValid
argument_list|(
name|application
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_APPLICATION_NAME_INVALID_FORMAT
argument_list|)
throw|;
block|}
comment|// If the application has no components do top-level checks
if|if
condition|(
name|application
operator|.
name|getComponents
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// artifact
if|if
condition|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_ARTIFACT_INVALID
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_ARTIFACT_ID_INVALID
argument_list|)
throw|;
block|}
comment|// If artifact is of type APPLICATION, add a slider specific property
if|if
condition|(
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
if|if
condition|(
name|application
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addPropertyToConfiguration
argument_list|(
name|application
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_KEY
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_EXTERNAL_APP
argument_list|)
expr_stmt|;
block|}
comment|// resource
name|validateApplicationResource
argument_list|(
name|application
operator|.
name|getResource
argument_list|()
argument_list|,
literal|null
argument_list|,
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// container size
if|if
condition|(
name|application
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_CONTAINERS_COUNT_INVALID
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If the application has components, then run checks for each component.
comment|// Let global values take effect if component level values are not
comment|// provided.
name|Artifact
name|globalArtifact
init|=
name|application
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|Resource
name|globalResource
init|=
name|application
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Long
name|globalNumberOfContainers
init|=
name|application
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
comment|// artifact
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setArtifact
argument_list|(
name|globalArtifact
argument_list|)
expr_stmt|;
block|}
comment|// If still null raise validation exception
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ERROR_ARTIFACT_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ERROR_ARTIFACT_ID_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// If artifact is of type APPLICATION, add a slider specific property
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addPropertyToConfiguration
argument_list|(
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_KEY
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_EXTERNAL_APP
argument_list|)
expr_stmt|;
name|compNameArtifactIdMap
operator|.
name|put
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setName
argument_list|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// resource
if|if
condition|(
name|comp
operator|.
name|getResource
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setResource
argument_list|(
name|globalResource
argument_list|)
expr_stmt|;
block|}
name|validateApplicationResource
argument_list|(
name|comp
operator|.
name|getResource
argument_list|()
argument_list|,
name|comp
argument_list|,
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// container count
if|if
condition|(
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
name|globalNumberOfContainers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|// If it is a simple app with no components, then create a default component
if|if
condition|(
name|application
operator|.
name|getComponents
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setComponents
argument_list|(
name|getDefaultComponentAsList
argument_list|(
name|application
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Application lifetime if not specified, is set to unlimited lifetime
if|if
condition|(
name|application
operator|.
name|getLifetime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|setLifetime
argument_list|(
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateApplicationResource (Resource resource, Component comp, Artifact.TypeEnum artifactType)
specifier|private
name|void
name|validateApplicationResource
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Component
name|comp
parameter_list|,
name|Artifact
operator|.
name|TypeEnum
name|artifactType
parameter_list|)
block|{
comment|// Only apps/components of type APPLICATION can skip resource requirement
if|if
condition|(
name|resource
operator|==
literal|null
operator|&&
name|artifactType
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|ERROR_RESOURCE_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|ERROR_RESOURCE_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// One and only one of profile OR cpus& memory can be specified. Specifying
comment|// both raises validation error.
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
operator|&&
operator|(
name|resource
operator|.
name|getCpus
argument_list|()
operator|!=
literal|null
operator|||
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_NOT_SUPPORTED
else|:
name|String
operator|.
name|format
argument_list|(
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_FOR_COMP_NOT_SUPPORTED
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Currently resource profile is not supported yet, so we will raise
comment|// validation error if only resource profile is specified
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET
argument_list|)
throw|;
block|}
name|String
name|memory
init|=
name|resource
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|Integer
name|cpus
init|=
name|resource
operator|.
name|getCpus
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|memory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|ERROR_RESOURCE_MEMORY_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|ERROR_RESOURCE_MEMORY_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|ERROR_RESOURCE_CPUS_INVALID
else|:
name|String
operator|.
name|format
argument_list|(
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpus
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|comp
operator|==
literal|null
condition|?
name|ERROR_RESOURCE_CPUS_INVALID_RANGE
else|:
name|String
operator|.
name|format
argument_list|(
name|ERROR_RESOURCE_CPUS_FOR_COMP_INVALID_RANGE
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|createSliderApp (Application application, Map<String, String> compNameArtifactIdMap)
specifier|private
name|String
name|createSliderApp
parameter_list|(
name|Application
name|application
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compNameArtifactIdMap
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|appName
init|=
name|application
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
name|application
operator|.
name|getQueue
argument_list|()
decl_stmt|;
specifier|final
name|ActionCreateArgs
name|createArgs
init|=
operator|new
name|ActionCreateArgs
argument_list|()
decl_stmt|;
name|addAppConfOptions
argument_list|(
name|createArgs
argument_list|,
name|application
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|addResourceOptions
argument_list|(
name|createArgs
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|createArgs
operator|.
name|provider
operator|=
name|DockerKeys
operator|.
name|PROVIDER_DOCKER
expr_stmt|;
if|if
condition|(
name|queueName
operator|!=
literal|null
operator|&&
name|queueName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|createArgs
operator|.
name|queue
operator|=
name|queueName
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|createArgs
operator|.
name|lifetime
operator|=
name|application
operator|.
name|getLifetime
argument_list|()
expr_stmt|;
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|sliderClient
operator|.
name|actionCreate
argument_list|(
name|appName
argument_list|,
name|createArgs
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|sliderClient
operator|.
name|applicationId
decl_stmt|;
if|if
condition|(
name|applicationId
operator|!=
literal|null
condition|)
block|{
return|return
name|applicationId
operator|.
name|toString
argument_list|()
return|;
comment|// return getApplicationIdString(applicationId);
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|addAppConfOptions (ActionCreateArgs createArgs, Application application, Map<String, String> compNameArtifactIdMap)
specifier|private
name|void
name|addAppConfOptions
parameter_list|(
name|ActionCreateArgs
name|createArgs
parameter_list|,
name|Application
name|application
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compNameArtifactIdMap
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|appCompOptionTriples
init|=
name|createArgs
operator|.
name|optionsDelegate
operator|.
name|compOptTriples
decl_stmt|;
comment|// TODO: optionTuples instead of compOptTriples
name|logger
operator|.
name|info
argument_list|(
literal|"Initial appCompOptionTriples = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|appCompOptionTriples
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|appOptions
init|=
name|createArgs
operator|.
name|optionsDelegate
operator|.
name|optionTuples
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Initial appOptions = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|appOptions
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Set Slider-AM memory and vcores here
comment|//    appCompOptionTriples.addAll(Arrays.asList(SLIDER_APPMASTER_COMPONENT_NAME,
comment|//        "", ""));
comment|// Global configuration - for override purpose
comment|// TODO: add it to yaml
name|Configuration
name|globalConfig
init|=
literal|null
decl_stmt|;
comment|//    Configuration globalConfig = (Configuration) SerializationUtils
comment|//        .clone(application.getConfiguration());
comment|// TODO: Add the below into globalConfig
comment|//    if (application.getConfigurations() != null) {
comment|//      for (Entry<String, String> entry : application.getConfigurations()
comment|//          .entrySet()) {
comment|//        globalConf.addProperty(entry.getKey(), entry.getValue());
comment|//      }
comment|//    }
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueGlobalPropertyCache
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propEntry
range|:
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addOptionsIfNotPresent
argument_list|(
name|appOptions
argument_list|,
name|uniqueGlobalPropertyCache
argument_list|,
name|propEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|propEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
init|=
name|application
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|configFiles
operator|!=
literal|null
operator|&&
operator|!
name|configFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addOptionsIfNotPresent
argument_list|(
name|appOptions
argument_list|,
name|uniqueGlobalPropertyCache
argument_list|,
name|SliderKeys
operator|.
name|AM_CONFIG_GENERATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|configFiles
control|)
block|{
name|addOptionsIfNotPresent
argument_list|(
name|appOptions
argument_list|,
name|uniqueGlobalPropertyCache
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configFile
operator|.
name|getSrcFile
argument_list|()
operator|+
name|OptionKeys
operator|.
name|NAME_SUFFIX
argument_list|,
name|configFile
operator|.
name|getDestFile
argument_list|()
argument_list|)
expr_stmt|;
name|addOptionsIfNotPresent
argument_list|(
name|appOptions
argument_list|,
name|uniqueGlobalPropertyCache
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configFile
operator|.
name|getSrcFile
argument_list|()
operator|+
name|OptionKeys
operator|.
name|TYPE_SUFFIX
argument_list|,
name|configFile
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|application
operator|.
name|getComponents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appQuicklinks
init|=
name|application
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
name|appQuicklinks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|quicklink
range|:
name|appQuicklinks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addOptionsIfNotPresent
argument_list|(
name|appOptions
argument_list|,
name|uniqueGlobalPropertyCache
argument_list|,
name|OptionKeys
operator|.
name|EXPORT_PREFIX
operator|+
name|quicklink
operator|.
name|getKey
argument_list|()
argument_list|,
name|quicklink
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|placeholders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|placeholders
operator|.
name|put
argument_list|(
name|PLACEHOLDER_APP_NAME
argument_list|,
name|application
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|placeholders
operator|.
name|put
argument_list|(
name|PLACEHOLDER_APP_COMPONENT_NAME
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|DOCKER
condition|)
block|{
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|DockerKeys
operator|.
name|DOCKER_IMAGE
argument_list|,
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|application
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
else|:
name|comp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|DockerKeys
operator|.
name|DOCKER_START_COMMAND
argument_list|,
name|comp
operator|.
name|getLaunchCommand
argument_list|()
operator|==
literal|null
condition|?
name|replacePlaceholders
argument_list|(
name|application
operator|.
name|getLaunchCommand
argument_list|()
argument_list|,
name|placeholders
argument_list|)
else|:
name|replacePlaceholders
argument_list|(
name|comp
operator|.
name|getLaunchCommand
argument_list|()
argument_list|,
name|placeholders
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|DockerKeys
operator|.
name|DOCKER_NETWORK
argument_list|,
name|DockerKeys
operator|.
name|DEFAULT_DOCKER_NETWORK
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|getRunPrivilegedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|DockerKeys
operator|.
name|DOCKER_USE_PRIVILEGED
argument_list|,
name|comp
operator|.
name|getRunPrivilegedContainer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
init|=
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|configFiles
operator|!=
literal|null
operator|&&
operator|!
name|configFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|SliderKeys
operator|.
name|AM_CONFIG_GENERATION
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|configFiles
control|)
block|{
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configFile
operator|.
name|getSrcFile
argument_list|()
operator|+
name|OptionKeys
operator|.
name|NAME_SUFFIX
argument_list|,
name|configFile
operator|.
name|getDestFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configFile
operator|.
name|getSrcFile
argument_list|()
operator|+
name|OptionKeys
operator|.
name|TYPE_SUFFIX
argument_list|,
name|configFile
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|comp
operator|.
name|getUniqueComponentSupport
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|placeholders
operator|.
name|put
argument_list|(
name|PLACEHOLDER_COMPONENT_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|createAppConfigComponent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
operator|+
name|i
argument_list|,
name|comp
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
operator|+
name|i
argument_list|,
name|globalConfig
argument_list|,
name|placeholders
argument_list|,
name|compNameArtifactIdMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|appCompOptionTriples
operator|.
name|addAll
argument_list|(
name|createAppConfigComponent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|globalConfig
argument_list|,
literal|null
argument_list|,
name|compNameArtifactIdMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Updated appCompOptionTriples = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|appCompOptionTriples
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Updated appOptions = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|appOptions
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addOptionsIfNotPresent (List<String> options, Set<String> uniqueGlobalPropertyCache, String key, String value)
specifier|private
name|void
name|addOptionsIfNotPresent
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|options
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueGlobalPropertyCache
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|uniqueGlobalPropertyCache
operator|==
literal|null
condition|)
block|{
name|options
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|uniqueGlobalPropertyCache
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|options
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|uniqueGlobalPropertyCache
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPropertyToConfiguration (Configuration conf, String key, String value)
specifier|private
name|void
name|addPropertyToConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|conf
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|createAppConfigComponent (String compName, Component component, String configPrefix, Configuration globalConf, Map<String, String> placeholders, Map<String, String> compNameArtifactIdMap)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createAppConfigComponent
parameter_list|(
name|String
name|compName
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|configPrefix
parameter_list|,
name|Configuration
name|globalConf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|placeholders
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compNameArtifactIdMap
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|appConfOptTriples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|component
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
operator|&&
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propEntry
range|:
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|appConfOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
name|propEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|replacePlaceholders
argument_list|(
name|propEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|placeholders
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If artifact is of type APPLICATION, then in the POST JSON there will
comment|// be no component definition for that artifact. Hence it's corresponding id
comment|// field is added. Every external APPLICATION has a unique id field.
name|List
argument_list|<
name|String
argument_list|>
name|convertedDeps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dep
range|:
name|component
operator|.
name|getDependencies
argument_list|()
control|)
block|{
if|if
condition|(
name|compNameArtifactIdMap
operator|.
name|containsKey
argument_list|(
name|dep
argument_list|)
condition|)
block|{
name|convertedDeps
operator|.
name|add
argument_list|(
name|compNameArtifactIdMap
operator|.
name|get
argument_list|(
name|dep
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedDeps
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the DNS dependency property is set to true for a component, it means
comment|// that it is ensured that DNS entry has been added for all the containers
comment|// of this component, before moving on to the next component in the DAG.
if|if
condition|(
name|hasPropertyWithValue
argument_list|(
name|component
argument_list|,
name|PROPERTY_DNS_DEPENDENCY
argument_list|,
literal|"true"
argument_list|)
condition|)
block|{
if|if
condition|(
name|component
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
condition|)
block|{
name|convertedDeps
operator|.
name|add
argument_list|(
name|component
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedDeps
operator|.
name|add
argument_list|(
name|compName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|convertedDeps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|appConfOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
literal|"requires"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|convertedDeps
argument_list|,
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|appConfOptTriples
return|;
block|}
DECL|method|replacePlaceholders (String value, Map<String, String> placeholders)
specifier|private
name|String
name|replacePlaceholders
parameter_list|(
name|String
name|value
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|placeholders
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
operator|||
name|placeholders
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|placeholder
range|:
name|placeholders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|placeholder
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|placeholder
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|createAppConfigGlobal (Component component, Configuration globalConf, Set<String> uniqueGlobalPropertyCache)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createAppConfigGlobal
parameter_list|(
name|Component
name|component
parameter_list|,
name|Configuration
name|globalConf
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueGlobalPropertyCache
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|appOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|component
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
operator|&&
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propEntry
range|:
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addOptionsIfNotPresent
argument_list|(
name|appOptions
argument_list|,
name|uniqueGlobalPropertyCache
argument_list|,
name|propEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|propEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appOptions
return|;
block|}
DECL|method|addResourceOptions (ActionCreateArgs createArgs, Application application)
specifier|private
name|void
name|addResourceOptions
parameter_list|(
name|ActionCreateArgs
name|createArgs
parameter_list|,
name|Application
name|application
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|resCompOptionTriples
init|=
name|createArgs
operator|.
name|optionsDelegate
operator|.
name|resCompOptTriples
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Initial resCompOptTriples = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|resCompOptionTriples
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Add any Slider AM resource specific props here like jvm.heapsize
comment|//    resCompOptionTriples.addAll(Arrays.asList(SLIDER_APPMASTER_COMPONENT_NAME,
comment|//        "", ""));
comment|// Global resource - for override purpose
name|Resource
name|globalResource
init|=
operator|(
name|Resource
operator|)
name|SerializationUtils
operator|.
name|clone
argument_list|(
name|application
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
comment|// Priority seeded with 1, expecting every new component will increase it by
comment|// 1 making it ready for the next component to use.
if|if
condition|(
name|application
operator|.
name|getComponents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|priority
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|hasPropertyWithValue
argument_list|(
name|comp
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_KEY
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_EXTERNAL_APP
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|comp
operator|.
name|getUniqueComponentSupport
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|resCompOptionTriples
operator|.
name|addAll
argument_list|(
name|createResourcesComponent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
operator|+
name|i
argument_list|,
name|comp
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|,
name|globalResource
argument_list|)
argument_list|)
expr_stmt|;
name|priority
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|resCompOptionTriples
operator|.
name|addAll
argument_list|(
name|createResourcesComponent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
argument_list|,
name|priority
argument_list|,
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|,
name|globalResource
argument_list|)
argument_list|)
expr_stmt|;
name|priority
operator|++
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Updated resCompOptTriples = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|resCompOptionTriples
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasPropertyWithValue (Component comp, String key, String value)
specifier|private
name|boolean
name|hasPropertyWithValue
parameter_list|(
name|Component
name|comp
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|comp
operator|==
literal|null
operator|||
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
operator|||
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|comp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createResourcesComponent (String compName, Component component, int priority, long numInstances, Resource globalResource)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createResourcesComponent
parameter_list|(
name|String
name|compName
parameter_list|,
name|Component
name|component
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|numInstances
parameter_list|,
name|Resource
name|globalResource
parameter_list|)
block|{
name|String
name|memory
init|=
name|component
operator|.
name|getResource
argument_list|()
operator|==
literal|null
condition|?
name|globalResource
operator|.
name|getMemory
argument_list|()
else|:
name|component
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|Integer
name|cpus
init|=
name|component
operator|.
name|getResource
argument_list|()
operator|==
literal|null
condition|?
name|globalResource
operator|.
name|getCpus
argument_list|()
else|:
name|component
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resCompOptTriples
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|resCompOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_PRIORITY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|priority
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resCompOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|numInstances
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resCompOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
name|ResourceKeys
operator|.
name|YARN_MEMORY
argument_list|,
name|memory
argument_list|)
argument_list|)
expr_stmt|;
name|resCompOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
name|ResourceKeys
operator|.
name|YARN_CORES
argument_list|,
name|cpus
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|component
operator|.
name|getPlacementPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resCompOptTriples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|compName
argument_list|,
name|ResourceKeys
operator|.
name|COMPONENT_PLACEMENT_POLICY
argument_list|,
name|component
operator|.
name|getPlacementPolicy
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resCompOptTriples
return|;
block|}
DECL|method|getSliderUser ()
specifier|private
specifier|static
name|UserGroupInformation
name|getSliderUser
parameter_list|()
block|{
if|if
condition|(
name|SLIDER_USER
operator|!=
literal|null
condition|)
block|{
return|return
name|SLIDER_USER
return|;
block|}
name|UserGroupInformation
name|sliderUser
init|=
literal|null
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|SLIDER_CONFIG
argument_list|)
expr_stmt|;
name|String
name|loggedInUser
init|=
name|getUserToRunAs
argument_list|()
decl_stmt|;
try|try
block|{
name|sliderUser
operator|=
name|UserGroupInformation
operator|.
name|getBestUGI
argument_list|(
literal|null
argument_list|,
name|loggedInUser
argument_list|)
expr_stmt|;
comment|// TODO: Once plugged into RM process we should remove the previous call
comment|// and replace it with getCurrentUser as commented below.
comment|// sliderUser = UserGroupInformation.getCurrentUser();
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create UGI (slider user)"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|sliderUser
return|;
block|}
DECL|method|invokeSliderClientRunnable ( final SliderClientContextRunnable<T> runnable)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeSliderClientRunnable
parameter_list|(
specifier|final
name|SliderClientContextRunnable
argument_list|<
name|T
argument_list|>
name|runnable
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
try|try
block|{
name|T
name|value
init|=
name|SLIDER_USER
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|runnable
operator|.
name|run
argument_list|(
name|SLIDER_CLIENT
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|cause
decl_stmt|;
throw|throw
name|ye
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|createSliderClient ()
specifier|protected
specifier|static
name|SliderClient
name|createSliderClient
parameter_list|()
block|{
if|if
condition|(
name|SLIDER_CLIENT
operator|!=
literal|null
condition|)
block|{
return|return
name|SLIDER_CLIENT
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|sliderClientConfiguration
init|=
name|SLIDER_CONFIG
decl_stmt|;
name|SliderClient
name|client
init|=
operator|new
name|SliderClient
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|initHadoopBinding
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to automatically init Hadoop binding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to automatically init Hadoop binding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Slider Client configuration: {}"
argument_list|,
name|sliderClientConfiguration
argument_list|)
expr_stmt|;
name|sliderClientConfiguration
operator|=
name|client
operator|.
name|bindArgs
argument_list|(
name|sliderClientConfiguration
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"help"
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|init
argument_list|(
name|sliderClientConfiguration
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to create SliderClient"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getUserToRunAs ()
specifier|private
specifier|static
name|String
name|getUserToRunAs
parameter_list|()
block|{
name|String
name|user
init|=
name|System
operator|.
name|getenv
argument_list|(
name|PROPERTY_APP_RUNAS_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|user
operator|=
literal|"root"
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
DECL|method|getSliderClientConfiguration ()
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|getSliderClientConfiguration
parameter_list|()
block|{
if|if
condition|(
name|SLIDER_CONFIG
operator|!=
literal|null
condition|)
block|{
return|return
name|SLIDER_CONFIG
return|;
block|}
name|YarnConfiguration
name|yarnConfig
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"prop yarn.resourcemanager.address = {}"
argument_list|,
name|yarnConfig
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|yarnConfig
return|;
block|}
DECL|interface|SliderClientContextRunnable
specifier|private
interface|interface
name|SliderClientContextRunnable
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|run (SliderClient sliderClient)
name|T
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
block|}
annotation|@
name|GET
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getApplications (@ueryParamR) String state)
specifier|public
name|Response
name|getApplications
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|state
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"GET: getApplications with param state = {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Get all applications in a specific state - lighter projection. For full
comment|// detail, call getApplication on a specific app.
name|Set
argument_list|<
name|String
argument_list|>
name|applications
decl_stmt|;
try|try
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|ApplicationStatus
name|appStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
try|try
block|{
name|ApplicationState
operator|.
name|valueOf
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|appStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Invalid value for param state - "
operator|+
name|state
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|appStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|applications
operator|=
name|getSliderApplications
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|applications
operator|=
name|getSliderApplications
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get applications failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Application
argument_list|>
name|apps
init|=
operator|new
name|HashSet
argument_list|<
name|Application
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|applications
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
for|for
control|(
name|String
name|app
range|:
name|applications
control|)
block|{
name|Application
name|application
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
comment|// TODO: Need to get lifetime, launch-time and privileged container
comment|// status from YARN
name|application
operator|.
name|setLifetime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|application
operator|.
name|setLaunchTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|.
name|setName
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// Containers not required, setting to null to avoid empty list
name|application
operator|.
name|setContainers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get applications failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|entity
argument_list|(
name|apps
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{app_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getApplication (@athParamR) String appName)
specifier|public
name|Response
name|getApplication
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"GET: getApplication for appName = {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
comment|// app name validation
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isClusternameValid
argument_list|(
name|appName
argument_list|)
condition|)
block|{
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Invalid application name"
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_NAME_INVALID
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Check if app exists
try|try
block|{
name|int
name|livenessCheck
init|=
name|getSliderList
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|livenessCheck
operator|<
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Application not running"
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|ERROR_APPLICATION_NOT_RUNNING
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_IS_NOT_RUNNING
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownApplicationInstanceException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get application failed, application not found"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|ERROR_APPLICATION_DOES_NOT_EXIST
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_DOES_NOT_EXIST
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get application failed, application not running"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|ERROR_APPLICATION_NOT_RUNNING
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_IS_NOT_RUNNING
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Application
name|app
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
name|app
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|app
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|APPLICATIONS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|appName
argument_list|)
expr_stmt|;
comment|// TODO: add status
name|app
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|JsonObject
name|appStatus
init|=
literal|null
decl_stmt|;
name|JsonObject
name|appRegistryDocker
init|=
literal|null
decl_stmt|;
name|JsonObject
name|appRegistryQuicklinks
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appStatus
operator|=
name|getSliderApplicationStatus
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|appRegistryDocker
operator|=
name|getSliderApplicationRegistry
argument_list|(
name|appName
argument_list|,
literal|"docker"
argument_list|)
expr_stmt|;
name|appRegistryQuicklinks
operator|=
name|getSliderApplicationRegistry
argument_list|(
name|appName
argument_list|,
literal|"quicklinks"
argument_list|)
expr_stmt|;
return|return
name|populateAppData
argument_list|(
name|app
argument_list|,
name|appStatus
argument_list|,
name|appRegistryDocker
argument_list|,
name|appRegistryQuicklinks
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BadClusterStateException
decl||
name|NotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get application failed, application not in running state yet"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Application not running yet"
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_SUBMITTED_BUT_NOT_RUNNING_YET
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Failed to retrieve application: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|populateAppData (Application app, JsonObject appStatus, JsonObject appRegistryDocker, JsonObject appRegistryQuicklinks)
specifier|private
name|Response
name|populateAppData
parameter_list|(
name|Application
name|app
parameter_list|,
name|JsonObject
name|appStatus
parameter_list|,
name|JsonObject
name|appRegistryDocker
parameter_list|,
name|JsonObject
name|appRegistryQuicklinks
parameter_list|)
block|{
name|String
name|appName
init|=
name|jsonGetAsString
argument_list|(
name|appStatus
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|Long
name|totalNumberOfRunningContainers
init|=
literal|0L
decl_stmt|;
name|Long
name|totalExpectedNumberOfRunningContainers
init|=
literal|0L
decl_stmt|;
name|Long
name|totalNumberOfIpAssignedContainers
init|=
literal|0L
decl_stmt|;
comment|// info
name|JsonObject
name|applicationInfo
init|=
name|jsonGetAsObject
argument_list|(
name|appStatus
argument_list|,
literal|"info"
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|applicationId
init|=
name|jsonGetAsString
argument_list|(
name|applicationInfo
argument_list|,
literal|"info.am.app.id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationId
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|setId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// state
name|String
name|appState
init|=
name|jsonGetAsString
argument_list|(
name|appStatus
argument_list|,
literal|"state"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|appState
argument_list|)
condition|)
block|{
case|case
name|StateValues
operator|.
name|STATE_LIVE
case|:
name|app
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|StateValues
operator|.
name|STATE_CREATED
case|:
case|case
name|StateValues
operator|.
name|STATE_INCOMPLETE
case|:
case|case
name|StateValues
operator|.
name|STATE_SUBMITTED
case|:
name|app
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|app
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|StateValues
operator|.
name|STATE_DESTROYED
case|:
case|case
name|StateValues
operator|.
name|STATE_STOPPED
case|:
name|app
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|app
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
break|break;
block|}
comment|// start time
name|app
operator|.
name|setLaunchTime
argument_list|(
name|appStatus
operator|.
name|get
argument_list|(
literal|"createTime"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|appStatus
operator|.
name|get
argument_list|(
literal|"createTime"
argument_list|)
operator|.
name|getAsLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// lifetime - set it to unlimited for now
comment|// TODO: Once YARN-3813 and YARN-4205 are available - get it from YARN
name|app
operator|.
name|setLifetime
argument_list|(
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
comment|// Quicklinks
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appQuicklinks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|quicklink
range|:
name|appRegistryQuicklinks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|appQuicklinks
operator|.
name|put
argument_list|(
name|quicklink
operator|.
name|getKey
argument_list|()
argument_list|,
name|quicklink
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|quicklink
operator|.
name|getValue
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appQuicklinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|app
operator|.
name|setQuicklinks
argument_list|(
name|appQuicklinks
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// status.live
name|JsonObject
name|applicationStatus
init|=
name|jsonGetAsObject
argument_list|(
name|appStatus
argument_list|,
literal|"status"
argument_list|)
decl_stmt|;
comment|// roles
name|JsonObject
name|applicationRoles
init|=
name|jsonGetAsObject
argument_list|(
name|appStatus
argument_list|,
literal|"roles"
argument_list|)
decl_stmt|;
comment|// statistics
name|JsonObject
name|applicationStatistics
init|=
name|jsonGetAsObject
argument_list|(
name|appStatus
argument_list|,
literal|"statistics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationRoles
operator|==
literal|null
condition|)
block|{
comment|// initialize to empty object to avoid too many null checks
name|applicationRoles
operator|=
operator|new
name|JsonObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|applicationStatus
operator|!=
literal|null
condition|)
block|{
name|JsonObject
name|applicationLive
init|=
name|jsonGetAsObject
argument_list|(
name|applicationStatus
argument_list|,
literal|"live"
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationLive
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|entry
range|:
name|applicationLive
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|SLIDER_APPMASTER_COMPONENT_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|componentNames
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|JsonObject
name|componentRole
init|=
name|applicationRoles
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
operator|new
name|JsonObject
argument_list|()
else|:
name|applicationRoles
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getAsJsonObject
argument_list|()
decl_stmt|;
name|JsonObject
name|liveContainers
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAsJsonObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveContainers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|liveContainerEntry
range|:
name|liveContainers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|containerId
init|=
name|liveContainerEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|Container
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|JsonObject
name|liveContainer
init|=
operator|(
name|JsonObject
operator|)
name|liveContainerEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|container
operator|.
name|setLaunchTime
argument_list|(
name|liveContainer
operator|.
name|get
argument_list|(
literal|"startTime"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|liveContainer
operator|.
name|get
argument_list|(
literal|"startTime"
argument_list|)
operator|.
name|getAsLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setComponentName
argument_list|(
name|jsonGetAsString
argument_list|(
name|liveContainer
argument_list|,
literal|"role"
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setIp
argument_list|(
name|jsonGetAsString
argument_list|(
name|liveContainer
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If ip is non-null increment count
if|if
condition|(
name|container
operator|.
name|getIp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|totalNumberOfIpAssignedContainers
operator|++
expr_stmt|;
block|}
name|container
operator|.
name|setHostname
argument_list|(
name|jsonGetAsString
argument_list|(
name|liveContainer
argument_list|,
literal|"hostname"
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|INIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|container
operator|.
name|getIp
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|container
operator|.
name|getHostname
argument_list|()
argument_list|)
condition|)
block|{
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|READY
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setBareHost
argument_list|(
name|jsonGetAsString
argument_list|(
name|liveContainer
argument_list|,
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|APPLICATIONS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|appName
operator|+
name|CONTAINERS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|setCpus
argument_list|(
name|jsonGetAsInt
argument_list|(
name|componentRole
argument_list|,
literal|"yarn.vcores"
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
name|jsonGetAsString
argument_list|(
name|componentRole
argument_list|,
literal|"yarn.memory"
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
comment|// TODO: add container property - for response only?
name|app
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// application info
if|if
condition|(
name|applicationRoles
operator|!=
literal|null
operator|&&
operator|!
name|componentNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JsonObject
name|applicationRole
init|=
name|jsonGetAsObject
argument_list|(
name|applicationRoles
argument_list|,
name|componentNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationRole
operator|!=
literal|null
condition|)
block|{
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
comment|// how to get artifact id - docker image name??
name|artifact
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// actual and expected number of containers
if|if
condition|(
name|applicationStatistics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|entry
range|:
name|applicationStatistics
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|SLIDER_APPMASTER_COMPONENT_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|JsonObject
name|containerStats
init|=
operator|(
name|JsonObject
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|totalNumberOfRunningContainers
operator|+=
name|jsonGetAsInt
argument_list|(
name|containerStats
argument_list|,
literal|"containers.live"
argument_list|)
expr_stmt|;
name|totalExpectedNumberOfRunningContainers
operator|+=
name|jsonGetAsInt
argument_list|(
name|containerStats
argument_list|,
literal|"containers.desired"
argument_list|)
expr_stmt|;
block|}
name|app
operator|.
name|setNumberOfContainers
argument_list|(
name|totalExpectedNumberOfRunningContainers
argument_list|)
expr_stmt|;
name|app
operator|.
name|setNumberOfRunningContainers
argument_list|(
name|totalNumberOfRunningContainers
argument_list|)
expr_stmt|;
block|}
comment|// If all containers of the app has IP assigned, then according to the REST
comment|// API it is considered to be READY. Note, application readiness from
comment|// end-users point of view, is out of scope of the REST API. Also, this
comment|// readiness has nothing to do with readiness-check defined at the component
comment|// level (which is used for dependency resolution of component DAG).
if|if
condition|(
name|totalNumberOfIpAssignedContainers
operator|.
name|longValue
argument_list|()
operator|==
name|totalExpectedNumberOfRunningContainers
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|app
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|READY
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Application = {}"
argument_list|,
name|app
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|app
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|jsonGetAsString (JsonObject object, String key)
specifier|private
name|String
name|jsonGetAsString
parameter_list|(
name|JsonObject
name|object
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getAsString
argument_list|()
return|;
block|}
DECL|method|jsonGetAsInt (JsonObject object, String key)
specifier|private
name|Integer
name|jsonGetAsInt
parameter_list|(
name|JsonObject
name|object
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|isJsonNull
argument_list|()
condition|?
literal|null
else|:
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getAsInt
argument_list|()
return|;
block|}
DECL|method|jsonGetAsObject (JsonObject object, String key)
specifier|private
name|JsonObject
name|jsonGetAsObject
parameter_list|(
name|JsonObject
name|object
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getAsJsonObject
argument_list|()
return|;
block|}
DECL|method|getSliderApplicationStatus (final String appName)
specifier|private
name|JsonObject
name|getSliderApplicationStatus
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
specifier|final
name|File
name|appStatusOutputFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"status_"
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
specifier|final
name|ActionStatusArgs
name|statusArgs
init|=
operator|new
name|ActionStatusArgs
argument_list|()
decl_stmt|;
name|statusArgs
operator|.
name|output
operator|=
name|appStatusOutputFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|JsonObject
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonObject
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|sliderClient
operator|.
name|actionStatus
argument_list|(
name|appName
argument_list|,
name|statusArgs
argument_list|)
expr_stmt|;
name|JsonParser
name|parser
init|=
operator|new
name|JsonParser
argument_list|()
decl_stmt|;
name|FileReader
name|reader
init|=
literal|null
decl_stmt|;
name|JsonElement
name|statusElement
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|FileReader
argument_list|(
name|appStatusOutputFile
argument_list|)
expr_stmt|;
name|statusElement
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|appStatusOutputFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|statusElement
operator|==
literal|null
operator|||
name|statusElement
operator|instanceof
name|JsonNull
operator|)
condition|?
operator|new
name|JsonObject
argument_list|()
else|:
operator|(
name|JsonObject
operator|)
name|statusElement
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSliderApplicationRegistry (final String appName, final String registryName)
specifier|private
name|JsonObject
name|getSliderApplicationRegistry
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|,
specifier|final
name|String
name|registryName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
specifier|final
name|File
name|appRegistryOutputFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"registry_"
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
specifier|final
name|ActionRegistryArgs
name|registryArgs
init|=
operator|new
name|ActionRegistryArgs
argument_list|()
decl_stmt|;
name|registryArgs
operator|.
name|out
operator|=
name|appRegistryOutputFile
expr_stmt|;
name|registryArgs
operator|.
name|name
operator|=
name|appName
expr_stmt|;
name|registryArgs
operator|.
name|getConf
operator|=
name|registryName
expr_stmt|;
name|registryArgs
operator|.
name|format
operator|=
name|ConfigFormat
operator|.
name|JSON
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|JsonObject
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonObject
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|sliderClient
operator|.
name|actionRegistry
argument_list|(
name|registryArgs
argument_list|)
expr_stmt|;
name|JsonParser
name|parser
init|=
operator|new
name|JsonParser
argument_list|()
decl_stmt|;
name|FileReader
name|reader
init|=
literal|null
decl_stmt|;
name|JsonElement
name|registryElement
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|FileReader
argument_list|(
name|appRegistryOutputFile
argument_list|)
expr_stmt|;
name|registryElement
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error reading file {}"
argument_list|,
name|appRegistryOutputFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|appRegistryOutputFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|registryElement
operator|==
literal|null
operator|||
name|registryElement
operator|instanceof
name|JsonNull
operator|)
condition|?
operator|new
name|JsonObject
argument_list|()
else|:
operator|(
name|JsonObject
operator|)
name|registryElement
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSliderList (final String appName)
specifier|private
name|Integer
name|getSliderList
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|getSliderList
argument_list|(
name|appName
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getSliderList (final String appName, final boolean liveOnly)
specifier|private
name|Integer
name|getSliderList
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|,
specifier|final
name|boolean
name|liveOnly
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|status
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|liveOnly
condition|)
block|{
name|status
operator|=
name|sliderClient
operator|.
name|actionList
argument_list|(
name|appName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ActionListArgs
name|listArgs
init|=
operator|new
name|ActionListArgs
argument_list|()
decl_stmt|;
name|status
operator|=
name|sliderClient
operator|.
name|actionList
argument_list|(
name|appName
argument_list|,
name|listArgs
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSliderApplications (final String state)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSliderApplications
parameter_list|(
specifier|final
name|String
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|getSliderApplications
argument_list|(
literal|false
argument_list|,
name|state
argument_list|)
return|;
block|}
DECL|method|getSliderApplications (final boolean liveOnly)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSliderApplications
parameter_list|(
specifier|final
name|boolean
name|liveOnly
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|getSliderApplications
argument_list|(
name|liveOnly
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getSliderApplications (final boolean liveOnly, final String state)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSliderApplications
parameter_list|(
specifier|final
name|boolean
name|liveOnly
parameter_list|,
specifier|final
name|String
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|apps
decl_stmt|;
name|ActionListArgs
name|listArgs
init|=
operator|new
name|ActionListArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveOnly
condition|)
block|{
name|apps
operator|=
name|sliderClient
operator|.
name|getApplicationList
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|listArgs
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|apps
operator|=
name|sliderClient
operator|.
name|getApplicationList
argument_list|(
literal|null
argument_list|,
name|listArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|apps
operator|=
name|sliderClient
operator|.
name|getApplicationList
argument_list|(
literal|null
argument_list|,
name|listArgs
argument_list|)
expr_stmt|;
block|}
return|return
name|apps
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{app_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|deleteApplication (@athParamR) String appName)
specifier|public
name|Response
name|deleteApplication
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"DELETE: deleteApplication for appName = {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
try|try
block|{
name|Response
name|stopResponse
init|=
name|stopSliderApplication
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopResponse
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownApplicationInstanceException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Application does not exist"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Delete application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Although slider client stop returns immediately, it usually takes a
comment|// little longer for it to stop from YARN point of view. Slider destroy
comment|// fails if the application is not completely stopped. Hence the need to
comment|// call destroy in a controlled loop few times (only if exit code is
comment|// EXIT_APPLICATION_IN_USE), before giving up.
name|boolean
name|keepTrying
init|=
literal|true
decl_stmt|;
name|int
name|maxDeleteAttempt
init|=
literal|5
decl_stmt|;
name|int
name|deleteAttempt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|keepTrying
operator|&&
name|deleteAttempt
operator|<
name|maxDeleteAttempt
condition|)
block|{
try|try
block|{
name|destroySliderApplication
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|keepTrying
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Delete application threw exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getExitCode
argument_list|()
operator|==
name|SliderExitCodes
operator|.
name|EXIT_APPLICATION_IN_USE
condition|)
block|{
name|deleteAttempt
operator|++
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{           }
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Delete application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|stopSliderApplication (final String appName)
specifier|private
name|Response
name|stopSliderApplication
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|ActionFreezeArgs
name|freezeArgs
init|=
operator|new
name|ActionFreezeArgs
argument_list|()
decl_stmt|;
name|int
name|returnCode
init|=
name|sliderClient
operator|.
name|actionFreeze
argument_list|(
name|appName
argument_list|,
name|freezeArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnCode
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully stopped application {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Stop of application {} failed with return code "
argument_list|,
name|appName
argument_list|,
name|returnCode
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Stop of application "
operator|+
name|appName
operator|+
literal|" failed"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|startSliderApplication (final String appName, Application app)
specifier|private
name|Response
name|startSliderApplication
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|,
name|Application
name|app
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|ActionThawArgs
name|thawArgs
init|=
operator|new
name|ActionThawArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|getLifetime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|setLifetime
argument_list|(
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
block|}
name|thawArgs
operator|.
name|lifetime
operator|=
name|app
operator|.
name|getLifetime
argument_list|()
expr_stmt|;
name|int
name|returnCode
init|=
name|sliderClient
operator|.
name|actionThaw
argument_list|(
name|appName
argument_list|,
name|thawArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnCode
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully started application {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|APPLICATIONS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|appName
argument_list|)
expr_stmt|;
comment|// 202 = ACCEPTED
return|return
name|Response
operator|.
name|status
argument_list|(
name|HTTP_STATUS_CODE_ACCEPTED
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Start of application {} failed with returnCode "
argument_list|,
name|appName
argument_list|,
name|returnCode
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Start of application "
operator|+
name|appName
operator|+
literal|" failed"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|destroySliderApplication (final String appName)
specifier|private
name|Void
name|destroySliderApplication
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|sliderClient
operator|.
name|actionDestroy
argument_list|(
name|appName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/{app_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|updateApplication (@athParamR) String appName, Application updateAppData)
specifier|public
name|Response
name|updateApplication
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|,
name|Application
name|updateAppData
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"PUT: updateApplication for app = {} with data = {}"
argument_list|,
name|appName
argument_list|,
name|updateAppData
argument_list|)
expr_stmt|;
comment|// Ignore the app name provided in updateAppData and always use appName
comment|// path param
name|updateAppData
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
comment|// Adding support for stop and start
comment|// For STOP the app should be running. If already stopped then this
comment|// operation will be a no-op. For START it should be in stopped state.
comment|// If already running then this operation will be a no-op.
comment|// Check if app exists in any state
try|try
block|{
name|int
name|appsFound
init|=
name|getSliderList
argument_list|(
name|appName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|appsFound
operator|<
literal|0
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Update application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// If a STOP is requested
if|if
condition|(
name|updateAppData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateAppData
operator|.
name|getState
argument_list|()
operator|==
name|ApplicationState
operator|.
name|STOPPED
condition|)
block|{
try|try
block|{
name|int
name|livenessCheck
init|=
name|getSliderList
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|livenessCheck
operator|==
literal|0
condition|)
block|{
return|return
name|stopSliderApplication
argument_list|(
name|appName
argument_list|)
return|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Application {} is already stopped"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Application "
operator|+
name|appName
operator|+
literal|" is already stopped"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Stop application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// If a START is requested
if|if
condition|(
name|updateAppData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateAppData
operator|.
name|getState
argument_list|()
operator|==
name|ApplicationState
operator|.
name|STARTED
condition|)
block|{
try|try
block|{
name|int
name|livenessCheck
init|=
name|getSliderList
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|livenessCheck
operator|!=
literal|0
condition|)
block|{
return|return
name|startSliderApplication
argument_list|(
name|appName
argument_list|,
name|updateAppData
argument_list|)
return|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Application {} is already running"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Application "
operator|+
name|appName
operator|+
literal|" is already running"
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|APPLICATIONS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|appName
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Start application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// If no of instances specified then treat it as a flex
if|if
condition|(
name|updateAppData
operator|.
name|getNumberOfContainers
argument_list|()
operator|!=
literal|null
operator|&&
name|updateAppData
operator|.
name|getComponents
argument_list|()
operator|==
literal|null
condition|)
block|{
name|updateAppData
operator|.
name|setComponents
argument_list|(
name|getDefaultComponentAsList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// At this point if there are components then it is a flex
if|if
condition|(
name|updateAppData
operator|.
name|getComponents
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|livenessCheck
init|=
name|getSliderList
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|livenessCheck
operator|==
literal|0
condition|)
block|{
name|flexSliderApplication
argument_list|(
name|appName
argument_list|,
name|updateAppData
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Update application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// If new lifetime value specified then update it
if|if
condition|(
name|updateAppData
operator|.
name|getLifetime
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Once YARN-3813 and YARN-4205 are available
block|}
comment|// If nothing happens consider it a no-op
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// create default component and initialize with app level global values
DECL|method|getDefaultComponentAsList (Application app)
specifier|private
name|List
argument_list|<
name|Component
argument_list|>
name|getDefaultComponentAsList
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
name|List
argument_list|<
name|Component
argument_list|>
name|comps
init|=
name|getDefaultComponentAsList
argument_list|()
decl_stmt|;
name|Component
name|comp
init|=
name|comps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setArtifact
argument_list|(
name|app
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setResource
argument_list|(
name|app
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setNumberOfContainers
argument_list|(
name|app
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setLaunchCommand
argument_list|(
name|app
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|comps
return|;
block|}
DECL|method|getDefaultComponentAsList ()
specifier|private
name|List
argument_list|<
name|Component
argument_list|>
name|getDefaultComponentAsList
parameter_list|()
block|{
name|Component
name|comp
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setName
argument_list|(
name|DEFAULT_COMPONENT_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Component
argument_list|>
name|comps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|comps
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
return|return
name|comps
return|;
block|}
DECL|method|flexSliderApplication (final String appName, final Application updateAppData)
specifier|private
name|Void
name|flexSliderApplication
parameter_list|(
specifier|final
name|String
name|appName
parameter_list|,
specifier|final
name|Application
name|updateAppData
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
return|return
name|invokeSliderClientRunnable
argument_list|(
operator|new
name|SliderClientContextRunnable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|SliderClient
name|sliderClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|ActionFlexArgs
name|flexArgs
init|=
operator|new
name|ActionFlexArgs
argument_list|()
decl_stmt|;
name|ComponentArgsDelegate
name|compDelegate
init|=
operator|new
name|ComponentArgsDelegate
argument_list|()
decl_stmt|;
name|Long
name|globalNumberOfContainers
init|=
name|updateAppData
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|updateAppData
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|Long
name|noOfContainers
init|=
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|?
name|globalNumberOfContainers
else|:
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|noOfContainers
operator|!=
literal|null
condition|)
block|{
name|compDelegate
operator|.
name|componentTuples
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|noOfContainers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|compDelegate
operator|.
name|componentTuples
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|flexArgs
operator|.
name|componentDelegate
operator|=
name|compDelegate
expr_stmt|;
name|sliderClient
operator|.
name|actionFlex
argument_list|(
name|appName
argument_list|,
name|flexArgs
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

