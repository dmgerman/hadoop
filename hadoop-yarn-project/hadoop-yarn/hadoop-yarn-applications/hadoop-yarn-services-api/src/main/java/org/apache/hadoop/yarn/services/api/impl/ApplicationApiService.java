begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.services.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|ActionFreezeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|buildutils
operator|.
name|BuildHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|util
operator|.
name|RestApiConstants
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
name|APPLICATIONS_API_RESOURCE_PATH
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|class|ApplicationApiService
specifier|public
class|class
name|ApplicationApiService
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApplicationApiService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SLIDER_CONFIG
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|SLIDER_CONFIG
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|SLIDER_CLIENT
specifier|private
specifier|static
name|SliderClient
name|SLIDER_CLIENT
decl_stmt|;
DECL|field|SLIDER_VERSION
specifier|private
specifier|static
name|Response
name|SLIDER_VERSION
decl_stmt|;
DECL|field|ACTION_FREEZE_ARGS
specifier|private
specifier|static
specifier|final
name|ActionFreezeArgs
name|ACTION_FREEZE_ARGS
init|=
operator|new
name|ActionFreezeArgs
argument_list|()
decl_stmt|;
static|static
block|{
name|init
argument_list|()
expr_stmt|;
block|}
comment|// initialize all the common resources - order is important
DECL|method|init ()
specifier|protected
specifier|static
name|void
name|init
parameter_list|()
block|{
name|SLIDER_CLIENT
operator|=
name|createSliderClient
argument_list|()
expr_stmt|;
name|SLIDER_VERSION
operator|=
name|initSliderVersion
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/versions/slider-version"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getSliderVersion ()
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getSliderVersion
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"GET: getSliderVersion"
argument_list|)
expr_stmt|;
return|return
name|SLIDER_VERSION
return|;
block|}
DECL|method|initSliderVersion ()
specifier|private
specifier|static
name|Response
name|initSliderVersion
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BuildHelper
operator|.
name|addBuildMetadata
argument_list|(
name|metadata
argument_list|,
literal|"org.apache.hadoop.yarn.services"
argument_list|)
expr_stmt|;
name|String
name|sliderVersion
init|=
name|metadata
operator|.
name|toString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Slider version = {}"
argument_list|,
name|sliderVersion
argument_list|)
expr_stmt|;
name|String
name|hadoopVersion
init|=
name|SliderVersionInfo
operator|.
name|getHadoopVersionString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Hadoop version = {}"
argument_list|,
name|hadoopVersion
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"{ \"slider_version\": \""
operator|+
name|sliderVersion
operator|+
literal|"\", \"hadoop_version\": \""
operator|+
name|hadoopVersion
operator|+
literal|"\"}"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|createApplication (Application application)
specifier|public
name|Response
name|createApplication
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"POST: createApplication = {}"
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
try|try
block|{
name|ApplicationId
name|applicationId
init|=
name|SLIDER_CLIENT
operator|.
name|actionCreate
argument_list|(
name|application
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully created application "
operator|+
name|application
operator|.
name|getName
argument_list|()
operator|+
literal|" applicationId = "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setUri
argument_list|(
name|CONTEXT_ROOT
operator|+
name|APPLICATIONS_API_RESOURCE_PATH
operator|+
literal|"/"
operator|+
name|application
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CREATED
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to create application "
operator|+
name|application
operator|.
name|getName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|message
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|createSliderClient ()
specifier|protected
specifier|static
name|SliderClient
name|createSliderClient
parameter_list|()
block|{
if|if
condition|(
name|SLIDER_CLIENT
operator|!=
literal|null
condition|)
block|{
return|return
name|SLIDER_CLIENT
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|sliderClientConfiguration
init|=
name|SLIDER_CONFIG
decl_stmt|;
name|SliderClient
name|client
init|=
operator|new
name|SliderClient
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|initHadoopBinding
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to automatically init Hadoop binding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Slider Client configuration: {}"
argument_list|,
name|sliderClientConfiguration
argument_list|)
expr_stmt|;
name|sliderClientConfiguration
operator|=
name|client
operator|.
name|bindArgs
argument_list|(
name|sliderClientConfiguration
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"help"
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|init
argument_list|(
name|sliderClientConfiguration
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to create SliderClient"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|client
return|;
block|}
comment|// The information this REST endpoint currently returned can be retrieved from
comment|// RM web services
comment|// Probably the data from AM is more important. Do that later.
comment|//  @GET @Consumes({ MediaType.APPLICATION_JSON })
comment|//  @Produces({ MediaType.APPLICATION_JSON })
comment|//  public Response getApplications(@QueryParam("state") String state) {
comment|//    logger.info("GET: getApplications with param state = {}", state);
comment|//    return null;
comment|//  }
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{app_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getApplication (@athParamR) String appName)
specifier|public
name|Response
name|getApplication
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"GET: getApplication for appName = {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
comment|// app name validation
if|if
condition|(
operator|!
name|SliderUtils
operator|.
name|isClusternameValid
argument_list|(
name|appName
argument_list|)
condition|)
block|{
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Invalid application name: "
operator|+
name|appName
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_NAME_INVALID
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
name|Application
name|app
init|=
name|SLIDER_CLIENT
operator|.
name|actionStatus
argument_list|(
name|appName
argument_list|)
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|SLIDER_CLIENT
operator|.
name|findInstance
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
operator|&&
name|report
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|setLifetime
argument_list|(
name|report
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
operator|.
name|getRemainingTime
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Application = {}"
argument_list|,
name|app
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|app
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Application "
operator|+
name|appName
operator|+
literal|" does not exist."
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setCode
argument_list|(
name|ERROR_CODE_APP_DOES_NOT_EXIST
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Get application failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Failed to retrieve application: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{app_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|deleteApplication (@athParamR) String appName)
specifier|public
name|Response
name|deleteApplication
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"DELETE: deleteApplication for appName = {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
return|return
name|stopApplication
argument_list|(
name|appName
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|stopApplication (String appName, boolean destroy)
specifier|private
name|Response
name|stopApplication
parameter_list|(
name|String
name|appName
parameter_list|,
name|boolean
name|destroy
parameter_list|)
block|{
try|try
block|{
name|SLIDER_CLIENT
operator|.
name|actionStop
argument_list|(
name|appName
argument_list|,
name|ACTION_FREEZE_ARGS
argument_list|)
expr_stmt|;
if|if
condition|(
name|destroy
condition|)
block|{
name|SLIDER_CLIENT
operator|.
name|actionDestroy
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully deleted application {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully stopped application {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|e
parameter_list|)
block|{
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"Application "
operator|+
name|appName
operator|+
literal|" not found "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ApplicationStatus
name|applicationStatus
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|applicationStatus
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|applicationStatus
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/{app_name}/components/{component_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|updateComponent (@athParamR) String appName, @PathParam(R) String componentName, Component component)
specifier|public
name|Response
name|updateComponent
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"component_name"
argument_list|)
name|String
name|componentName
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
if|if
condition|(
name|component
operator|.
name|getNumberOfContainers
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Application = "
operator|+
name|appName
operator|+
literal|", Component = "
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|": Invalid number of containers specified "
operator|+
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|original
init|=
name|SLIDER_CLIENT
operator|.
name|flex
argument_list|(
name|appName
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|entity
argument_list|(
literal|"Updating "
operator|+
name|componentName
operator|+
literal|" size from "
operator|+
name|original
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
operator|+
literal|" to "
operator|+
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|ApplicationStatus
name|status
init|=
operator|new
name|ApplicationStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|status
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/{app_name}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|updateApplication (@athParamR) String appName, Application updateAppData)
specifier|public
name|Response
name|updateApplication
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"app_name"
argument_list|)
name|String
name|appName
parameter_list|,
name|Application
name|updateAppData
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"PUT: updateApplication for app = {} with data = {}"
argument_list|,
name|appName
argument_list|,
name|updateAppData
argument_list|)
expr_stmt|;
comment|// Ignore the app name provided in updateAppData and always use appName
comment|// path param
name|updateAppData
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
comment|// For STOP the app should be running. If already stopped then this
comment|// operation will be a no-op. For START it should be in stopped state.
comment|// If already running then this operation will be a no-op.
if|if
condition|(
name|updateAppData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateAppData
operator|.
name|getState
argument_list|()
operator|==
name|ApplicationState
operator|.
name|STOPPED
condition|)
block|{
return|return
name|stopApplication
argument_list|(
name|appName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// If a START is requested
if|if
condition|(
name|updateAppData
operator|.
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|updateAppData
operator|.
name|getState
argument_list|()
operator|==
name|ApplicationState
operator|.
name|STARTED
condition|)
block|{
return|return
name|startApplication
argument_list|(
name|appName
argument_list|)
return|;
block|}
comment|// If new lifetime value specified then update it
if|if
condition|(
name|updateAppData
operator|.
name|getLifetime
argument_list|()
operator|!=
literal|null
operator|&&
name|updateAppData
operator|.
name|getLifetime
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|updateLifetime
argument_list|(
name|appName
argument_list|,
name|updateAppData
argument_list|)
return|;
block|}
comment|// flex a single component app
if|if
condition|(
name|updateAppData
operator|.
name|getNumberOfContainers
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ServiceApiUtil
operator|.
name|hasComponent
argument_list|(
name|updateAppData
argument_list|)
condition|)
block|{
name|Component
name|defaultComp
init|=
name|ServiceApiUtil
operator|.
name|createDefaultComponent
argument_list|(
name|updateAppData
argument_list|)
decl_stmt|;
return|return
name|updateComponent
argument_list|(
name|updateAppData
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultComp
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultComp
argument_list|)
return|;
block|}
comment|// If nothing happens consider it a no-op
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|updateLifetime (String appName, Application updateAppData)
specifier|private
name|Response
name|updateLifetime
parameter_list|(
name|String
name|appName
parameter_list|,
name|Application
name|updateAppData
parameter_list|)
block|{
try|try
block|{
name|String
name|newLifeTime
init|=
name|SLIDER_CLIENT
operator|.
name|updateLifetime
argument_list|(
name|appName
argument_list|,
name|updateAppData
operator|.
name|getLifetime
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"Application "
operator|+
name|appName
operator|+
literal|" lifeTime is successfully updated to "
operator|+
name|updateAppData
operator|.
name|getLifetime
argument_list|()
operator|+
literal|" seconds from now: "
operator|+
name|newLifeTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to update application ("
operator|+
name|appName
operator|+
literal|") lifetime ("
operator|+
name|updateAppData
operator|.
name|getLifetime
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|startApplication (String appName)
specifier|private
name|Response
name|startApplication
parameter_list|(
name|String
name|appName
parameter_list|)
block|{
try|try
block|{
name|int
name|ret
init|=
name|SLIDER_CLIENT
operator|.
name|actionList
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|entity
argument_list|(
literal|"Application "
operator|+
name|appName
operator|+
literal|" is already alive."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|SLIDER_CLIENT
operator|.
name|actionStart
argument_list|(
name|appName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully started application "
operator|+
name|appName
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"Application "
operator|+
name|appName
operator|+
literal|" is successfully started"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to start application "
operator|+
name|appName
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

