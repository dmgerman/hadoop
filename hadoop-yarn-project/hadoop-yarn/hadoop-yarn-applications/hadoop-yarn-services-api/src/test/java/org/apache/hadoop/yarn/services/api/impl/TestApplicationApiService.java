begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.services.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|utils
operator|.
name|RestApiConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|services
operator|.
name|utils
operator|.
name|RestApiErrorMessages
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|SuppressStaticInitializationFor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|modules
operator|.
name|junit4
operator|.
name|PowerMockRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for application life time monitor feature test.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|PowerMockRunner
operator|.
name|class
argument_list|)
annotation|@
name|SuppressStaticInitializationFor
argument_list|(
literal|"org.apache.hadoop.yarn.services.api.impl.ApplicationApiService"
argument_list|)
DECL|class|TestApplicationApiService
specifier|public
class|class
name|TestApplicationApiService
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestApplicationApiService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXCEPTION_PREFIX
specifier|private
specifier|static
name|String
name|EXCEPTION_PREFIX
init|=
literal|"Should have thrown exception: "
decl_stmt|;
DECL|field|NO_EXCEPTION_PREFIX
specifier|private
specifier|static
name|String
name|NO_EXCEPTION_PREFIX
init|=
literal|"Should not have thrown exception: "
decl_stmt|;
DECL|field|appApiService
specifier|private
name|ApplicationApiService
name|appApiService
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|appApiService
operator|=
operator|new
name|ApplicationApiService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testValidateApplicationPostPayload ()
specifier|public
name|void
name|testValidateApplicationPostPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|Application
name|app
init|=
operator|new
name|Application
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compNameArtifactIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// no name
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_APPLICATION_NAME_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// bad format name
name|String
index|[]
name|badNames
init|=
block|{
literal|"4finance"
block|,
literal|"Finance"
block|,
literal|"finance@home"
block|}
decl_stmt|;
for|for
control|(
name|String
name|badName
range|:
name|badNames
control|)
block|{
name|app
operator|.
name|setName
argument_list|(
name|badName
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with bad name "
operator|+
name|badName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_APPLICATION_NAME_INVALID_FORMAT
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no artifact
name|app
operator|.
name|setName
argument_list|(
literal|"finance_home"
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no artifact"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_ARTIFACT_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// no artifact id
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
name|app
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no artifact id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_ARTIFACT_ID_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if artifact is of type APPLICATION then everything is valid here
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
literal|"app.io/hbase:facebook_0.2"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setNumberOfContainers
argument_list|(
literal|5l
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"application attributes specified should be valid here"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// default-component, default-lifetime and the property component_type
comment|// should get assigned here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getComponents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|DEFAULT_COMPONENT_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getLifetime
argument_list|()
argument_list|,
name|DEFAULT_UNLIMITED_LIFETIME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Property not set"
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|SliderKeys
operator|.
name|COMPONENT_TYPE_KEY
argument_list|)
argument_list|,
name|SliderKeys
operator|.
name|COMPONENT_TYPE_EXTERNAL_APP
argument_list|)
expr_stmt|;
comment|// unset artifact type, default component and no of containers to test other
comment|// validation logic
name|artifact
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|app
operator|.
name|setComponents
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|app
operator|.
name|setNumberOfContainers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// resource not specified
name|artifact
operator|.
name|setId
argument_list|(
literal|"docker.io/centos:centos7"
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no resource"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// memory not specified
name|Resource
name|res
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|app
operator|.
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no memory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_MEMORY_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cpus not specified
name|res
operator|.
name|setMemory
argument_list|(
literal|"2gb"
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no cpu"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_CPUS_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// invalid no of cpus
name|res
operator|.
name|setCpus
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with invalid no of cpups"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_CPUS_INVALID_RANGE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// number of containers not specified
name|res
operator|.
name|setCpus
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with no container count"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_CONTAINERS_COUNT_INVALID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// specifying profile along with cpus/memory raises exception
name|res
operator|.
name|setProfile
argument_list|(
literal|"hbase_finance_large"
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with resource profile along with cpus/memory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_NOT_SUPPORTED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// currently resource profile alone is not supported.
comment|// TODO: remove the next test once it is supported.
name|res
operator|.
name|setCpus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|res
operator|.
name|setMemory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"application with resource profile only - NOT SUPPORTED"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// unset profile here and add cpus/memory back
name|res
operator|.
name|setProfile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCpus
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|res
operator|.
name|setMemory
argument_list|(
literal|"2gb"
argument_list|)
expr_stmt|;
comment|// everything valid here
name|app
operator|.
name|setNumberOfContainers
argument_list|(
literal|5l
argument_list|)
expr_stmt|;
try|try
block|{
name|appApiService
operator|.
name|validateApplicationPostPayload
argument_list|(
name|app
argument_list|,
name|compNameArtifactIdMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"application attributes specified should be valid here"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now test with components
block|}
block|}
end_class

end_unit

