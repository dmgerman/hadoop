begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_comment
comment|/**  * A mock version of ServiceClient - This class is design  * to simulate various error conditions that will happen  * when a consumer class calls ServiceClient.  */
end_comment

begin_class
DECL|class|ServiceClientTest
specifier|public
class|class
name|ServiceClientTest
extends|extends
name|ServiceClient
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|init ()
specifier|protected
specifier|static
name|void
name|init
parameter_list|()
block|{   }
DECL|method|ServiceClientTest ()
specifier|public
name|ServiceClientTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfig ()
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|actionCreate (Service service)
specifier|public
name|ApplicationId
name|actionCreate
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveService
argument_list|(
name|service
argument_list|,
operator|new
name|SliderFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStatus (String appName)
specifier|public
name|Service
name|getStatus
parameter_list|(
name|String
name|appName
parameter_list|)
block|{
if|if
condition|(
name|appName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|appName
operator|.
name|equals
argument_list|(
literal|"jenkins"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Service
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|actionStart (String serviceName)
specifier|public
name|int
name|actionStart
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|serviceName
operator|.
name|equals
argument_list|(
literal|"jenkins"
argument_list|)
condition|)
block|{
return|return
name|EXIT_SUCCESS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|actionStop (String serviceName, boolean waitForAppStopped)
specifier|public
name|int
name|actionStop
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|boolean
name|waitForAppStopped
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|serviceName
operator|.
name|equals
argument_list|(
literal|"jenkins"
argument_list|)
condition|)
block|{
return|return
name|EXIT_SUCCESS
return|;
block|}
elseif|else
if|if
condition|(
name|serviceName
operator|.
name|equals
argument_list|(
literal|"jenkins-second-stop"
argument_list|)
condition|)
block|{
return|return
name|EXIT_COMMAND_ARGUMENT_ERROR
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|actionDestroy (String serviceName)
specifier|public
name|int
name|actionDestroy
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|serviceName
operator|.
name|equals
argument_list|(
literal|"jenkins"
argument_list|)
condition|)
block|{
return|return
name|EXIT_SUCCESS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

