begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Test class for system service manager.  */
end_comment

begin_class
DECL|class|TestSystemServiceImpl
specifier|public
class|class
name|TestSystemServiceImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSystemServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|systemService
specifier|private
name|SystemServiceManagerImpl
name|systemService
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|resourcePath
specifier|private
name|String
name|resourcePath
init|=
literal|"users"
decl_stmt|;
DECL|field|users
specifier|private
name|String
index|[]
name|users
init|=
operator|new
name|String
index|[]
block|{
literal|"user1"
block|,
literal|"user2"
block|}
decl_stmt|;
DECL|field|loadedServices
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|loadedServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|submittedServices
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|submittedServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resourcePath
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnServiceConf
operator|.
name|YARN_SERVICES_SYSTEM_SERVICE_DIRECTORY
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|systemService
operator|=
operator|new
name|SystemServiceManagerImpl
argument_list|()
block|{
annotation|@
name|Override
name|ServiceClient
name|getServiceClient
parameter_list|()
block|{
return|return
operator|new
name|TestServiceClient
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|systemService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// do not call explicit start
name|constructUserService
argument_list|(
name|users
index|[
literal|0
index|]
argument_list|,
literal|"example-app1"
argument_list|)
expr_stmt|;
name|constructUserService
argument_list|(
name|users
index|[
literal|1
index|]
argument_list|,
literal|"example-app1"
argument_list|,
literal|"example-app2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teadDown ()
specifier|public
name|void
name|teadDown
parameter_list|()
block|{
name|systemService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSystemServiceSubmission ()
specifier|public
name|void
name|testSystemServiceSubmission
parameter_list|()
throws|throws
name|Exception
block|{
name|systemService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/* verify for ignored sevices count */
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|ignoredUserServices
init|=
name|systemService
operator|.
name|getIgnoredUserServices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ignoredUserServices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"User user1 doesn't exist."
argument_list|,
name|ignoredUserServices
operator|.
name|containsKey
argument_list|(
name|users
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|ignoredUserServices
operator|.
name|get
argument_list|(
name|users
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|systemService
operator|.
name|getSkipCounter
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|userServices
init|=
name|systemService
operator|.
name|getSyncUserServices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|loadedServices
operator|.
name|size
argument_list|()
argument_list|,
name|userServices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyForScannedUserServices
argument_list|(
name|userServices
argument_list|)
expr_stmt|;
name|verifyForLaunchedUserServices
argument_list|()
expr_stmt|;
comment|// 2nd time launch service to handle if service exist scenario
name|systemService
operator|.
name|launchUserService
argument_list|(
name|userServices
argument_list|)
expr_stmt|;
name|verifyForLaunchedUserServices
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyForScannedUserServices ( Map<String, Set<Service>> userServices)
specifier|private
name|void
name|verifyForScannedUserServices
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|userServices
parameter_list|)
block|{
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|userServices
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|serviceNames
init|=
name|loadedServices
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serviceNames
operator|.
name|size
argument_list|()
argument_list|,
name|services
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Service
argument_list|>
name|iterator
init|=
name|services
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Service
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Service name doesn't exist in expected "
operator|+
literal|"userService "
operator|+
name|serviceNames
argument_list|,
name|serviceNames
operator|.
name|contains
argument_list|(
name|next
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|constructUserService (String user, String... serviceNames)
specifier|public
name|void
name|constructUserService
parameter_list|(
name|String
name|user
parameter_list|,
name|String
modifier|...
name|serviceNames
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|service
init|=
name|loadedServices
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|service
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|serviceName
range|:
name|serviceNames
control|)
block|{
name|service
operator|.
name|add
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
block|}
name|loadedServices
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestServiceClient
class|class
name|TestServiceClient
extends|extends
name|ServiceClient
block|{
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|actionCreate (Service service)
specifier|public
name|ApplicationId
name|actionCreate
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|userName
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|services
init|=
name|submittedServices
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|==
literal|null
condition|)
block|{
name|services
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|submittedServices
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|services
operator|.
name|contains
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Failed to create service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|", because it already exists."
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|services
operator|.
name|add
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
DECL|method|verifyForLaunchedUserServices ()
specifier|private
name|void
name|verifyForLaunchedUserServices
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|loadedServices
operator|.
name|size
argument_list|()
argument_list|,
name|submittedServices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|submittedServices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|serviceSet
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|loadedServices
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|services
init|=
name|loadedServices
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|services
operator|.
name|size
argument_list|()
argument_list|,
name|serviceSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|services
operator|.
name|containsAll
argument_list|(
name|serviceSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

