begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.flow
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowRunEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineDataToRetrieve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineEntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelinePrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|HBaseTimelineReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|HBaseTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineSchemaCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|ColumnHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineStorageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the FlowRun and FlowActivity Tables.  */
end_comment

begin_class
DECL|class|TestHBaseStorageFlowRun
specifier|public
class|class
name|TestHBaseStorageFlowRun
block|{
DECL|field|util
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
decl_stmt|;
DECL|field|METRIC1
specifier|private
specifier|static
specifier|final
name|String
name|METRIC1
init|=
literal|"MAP_SLOT_MILLIS"
decl_stmt|;
DECL|field|METRIC2
specifier|private
specifier|static
specifier|final
name|String
name|METRIC2
init|=
literal|"HDFS_BYTES_READ"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupBeforeClass ()
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|createSchema
argument_list|()
expr_stmt|;
block|}
DECL|method|createSchema ()
specifier|private
specifier|static
name|void
name|createSchema
parameter_list|()
throws|throws
name|IOException
block|{
name|TimelineSchemaCreator
operator|.
name|createAllTables
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkCoProcessorOff ()
specifier|public
name|void
name|checkCoProcessorOff
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|hbaseConf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|hbaseConf
operator|.
name|get
argument_list|(
name|FlowRunTable
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't check tables since admin is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// check the regions.
comment|// check in flow run table
name|util
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionServer
name|server
init|=
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|TimelineStorageUtils
operator|.
name|isFlowRunTable
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hbaseConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|hbaseConf
operator|.
name|get
argument_list|(
name|FlowActivityTable
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowActivityTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// check the regions.
comment|// check in flow activity table
name|util
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionServer
name|server
init|=
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
name|assertFalse
argument_list|(
name|TimelineStorageUtils
operator|.
name|isFlowRunTable
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hbaseConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|hbaseConf
operator|.
name|get
argument_list|(
name|EntityTable
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// check the regions.
comment|// check in entity run table
name|util
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionServer
name|server
init|=
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
name|assertFalse
argument_list|(
name|TimelineStorageUtils
operator|.
name|isFlowRunTable
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hbaseConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes 4 timeline entities belonging to one flow run through the    * {@link HBaseTimelineWriterImpl}    *    * Checks the flow run table contents    *    * The first entity has a created event, metrics and a finish event.    *    * The second entity has a created event and this is the entity with smallest    * start time. This should be the start time for the flow run.    *    * The third entity has a finish event and this is the entity with the max end    * time. This should be the end time for the flow run.    *    * The fourth entity has a created event which has a start time that is    * greater than min start time.    *    */
annotation|@
name|Test
DECL|method|testWriteFlowRunMinMax ()
specifier|public
name|void
name|testWriteFlowRunMinMax
parameter_list|()
throws|throws
name|Exception
block|{
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|TestFlowDataGenerator
operator|.
name|getEntity1
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|cluster
init|=
literal|"testWriteFlowRunMinMaxToHBase_cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"testWriteFlowRunMinMaxToHBase_user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"testing_flowRun_flow_name"
decl_stmt|;
name|String
name|flowVersion
init|=
literal|"CF7022C10F1354"
decl_stmt|;
name|long
name|runid
init|=
literal|1002345678919L
decl_stmt|;
name|String
name|appName
init|=
literal|"application_100000000000_1111"
decl_stmt|;
name|long
name|minStartTs
init|=
literal|1425026900000L
decl_stmt|;
name|long
name|greaterStartTs
init|=
literal|30000000000000L
decl_stmt|;
name|long
name|endTs
init|=
literal|1439750690000L
decl_stmt|;
name|TimelineEntity
name|entityMinStartTime
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMinStartTime
argument_list|(
name|minStartTs
argument_list|)
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// write another entity with the right min start time
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityMinStartTime
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_100000000000_3333"
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// writer another entity for max end time
name|TimelineEntity
name|entityMaxEndTime
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMaxEndTime
argument_list|(
name|endTs
argument_list|)
decl_stmt|;
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityMaxEndTime
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_100000000000_4444"
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// writer another entity with greater start time
name|TimelineEntity
name|entityGreaterStartTime
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityGreaterStartTime
argument_list|(
name|greaterStartTs
argument_list|)
decl_stmt|;
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityGreaterStartTime
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_1000000000000000_2222"
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// flush everything to hbase
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c1
argument_list|)
decl_stmt|;
comment|// check in flow run table
name|Table
name|table1
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|FlowRunTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
comment|// scan the table and see that we get back the right min and max
comment|// timestamps
name|byte
index|[]
name|startRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FlowRunColumn
operator|.
name|MIN_START_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FlowRunColumn
operator|.
name|MAX_END_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r1
init|=
name|table1
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|r1
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|starttime
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|FlowRunColumn
operator|.
name|MIN_START_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|minStartTs
argument_list|,
name|starttime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endTs
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|FlowRunColumn
operator|.
name|MAX_END_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// use the timeline reader to verify data
name|HBaseTimelineReaderImpl
name|hbr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbr
operator|=
operator|new
name|HBaseTimelineReaderImpl
argument_list|()
expr_stmt|;
name|hbr
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// get the flow run entity
name|TimelineEntity
name|entity
init|=
name|hbr
operator|.
name|getEntity
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|matches
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FlowRunEntity
name|flowRun
init|=
operator|(
name|FlowRunEntity
operator|)
name|entity
decl_stmt|;
name|assertEquals
argument_list|(
name|minStartTs
argument_list|,
name|flowRun
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endTs
argument_list|,
name|flowRun
operator|.
name|getMaxEndTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbr
operator|!=
literal|null
condition|)
block|{
name|hbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes two application entities of the same flow run. Each application has    * two metrics: slot millis and hdfs bytes read. Each metric has values at two    * timestamps.    *    * Checks the metric values of the flow in the flow run table. Flow metric    * values should be the sum of individual metric values that belong to the    * latest timestamp for that metric    */
annotation|@
name|Test
DECL|method|testWriteFlowRunMetricsOneFlow ()
specifier|public
name|void
name|testWriteFlowRunMetricsOneFlow
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"testWriteFlowRunMetricsOneFlow_cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"testWriteFlowRunMetricsOneFlow_user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"testing_flowRun_metrics_flow_name"
decl_stmt|;
name|String
name|flowVersion
init|=
literal|"CF7022C10F1354"
decl_stmt|;
name|long
name|runid
init|=
literal|1002345678919L
decl_stmt|;
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|String
name|appName
init|=
literal|"application_11111111111111_1111"
decl_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// write another application with same metric to this flow
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|TimelineEntity
name|entityApp2
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp2
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_11111111111111_2222"
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// check flow run
name|checkFlowRunTable
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
name|c1
argument_list|)
expr_stmt|;
comment|// check various batch limits in scanning the table for this flow
name|checkFlowRunTableBatchLimit
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
name|c1
argument_list|)
expr_stmt|;
comment|// use the timeline reader to verify data
name|HBaseTimelineReaderImpl
name|hbr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbr
operator|=
operator|new
name|HBaseTimelineReaderImpl
argument_list|()
expr_stmt|;
name|hbr
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|start
argument_list|()
expr_stmt|;
name|TimelineEntity
name|entity
init|=
name|hbr
operator|.
name|getEntity
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|matches
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|entity
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|String
name|id
init|=
name|metric
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|values
init|=
name|metric
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Number
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Number
name|n
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
name|value
operator|=
name|n
expr_stmt|;
block|}
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|METRIC1
case|:
name|assertEquals
argument_list|(
literal|141L
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|METRIC2
case|:
name|assertEquals
argument_list|(
literal|57L
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unrecognized metric: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|hbr
operator|!=
literal|null
condition|)
block|{
name|hbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*    * checks the batch limits on a scan    */
DECL|method|checkFlowRunTableBatchLimit (String cluster, String user, String flow, long runid, Configuration c1)
name|void
name|checkFlowRunTableBatchLimit
parameter_list|(
name|String
name|cluster
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|flow
parameter_list|,
name|long
name|runid
parameter_list|,
name|Configuration
name|c1
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|startRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
comment|// set a batch limit
name|int
name|batchLimit
init|=
literal|2
decl_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|String
name|clusterStop
init|=
name|cluster
operator|+
literal|"1"
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|clusterStop
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|Table
name|table1
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|FlowRunTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|loopCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|loopCount
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// test with a diff batch limit
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
comment|// set a batch limit
name|batchLimit
operator|=
literal|1
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|loopCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batchLimit
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batchLimit
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|loopCount
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// test with a diff batch limit
comment|// set it high enough
comment|// we expect back 3 since there are
comment|// column = m!HDFS_BYTES_READ value=57
comment|// column = m!MAP_SLOT_MILLIS value=141
comment|// column min_start_time value=1425016501000
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
comment|// set a batch limit
name|batchLimit
operator|=
literal|100
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|loopCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
comment|// assert that with every next invocation
comment|// we get back<= batchLimit values
name|assertTrue
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// see comment above
name|loopCount
operator|++
expr_stmt|;
block|}
comment|// should loop through only once
name|assertTrue
argument_list|(
name|loopCount
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// set it to a negative number
comment|// we expect all 3 back since there are
comment|// column = m!HDFS_BYTES_READ value=57
comment|// column = m!MAP_SLOT_MILLIS value=141
comment|// column min_start_time value=1425016501000
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
comment|// set a batch limit
name|batchLimit
operator|=
operator|-
literal|671
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|loopCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
comment|// assert that with every next invocation
comment|// we get back<= batchLimit values
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
block|}
comment|// should loop through only once
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loopCount
argument_list|)
expr_stmt|;
comment|// set it to 0
comment|// we expect all 3 back since there are
comment|// column = m!HDFS_BYTES_READ value=57
comment|// column = m!MAP_SLOT_MILLIS value=141
comment|// column min_start_time value=1425016501000
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
comment|// set a batch limit
name|batchLimit
operator|=
literal|0
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|loopCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
comment|// assert that with every next invocation
comment|// we get back<= batchLimit values
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
block|}
comment|// should loop through only once
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loopCount
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFlowRunTable (String cluster, String user, String flow, long runid, Configuration c1)
specifier|private
name|void
name|checkFlowRunTable
parameter_list|(
name|String
name|cluster
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|flow
parameter_list|,
name|long
name|runid
parameter_list|,
name|Configuration
name|c1
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|startRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|String
name|clusterStop
init|=
name|cluster
operator|+
literal|"1"
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|clusterStop
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|Table
name|table1
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|FlowRunTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|rowCount
operator|++
expr_stmt|;
comment|// check metric1
name|byte
index|[]
name|q
init|=
name|ColumnHelper
operator|.
name|getColumnQualifier
argument_list|(
name|FlowRunColumnPrefix
operator|.
name|METRIC
operator|.
name|getColumnPrefixBytes
argument_list|()
argument_list|,
name|METRIC1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|containsKey
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|141L
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check metric2
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
name|ColumnHelper
operator|.
name|getColumnQualifier
argument_list|(
name|FlowRunColumnPrefix
operator|.
name|METRIC
operator|.
name|getColumnPrefixBytes
argument_list|()
argument_list|,
name|METRIC2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|containsKey
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|57L
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteFlowRunMetricsPrefix ()
specifier|public
name|void
name|testWriteFlowRunMetricsPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"testWriteFlowRunMetricsPrefix_cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"testWriteFlowRunMetricsPrefix_user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"testWriteFlowRunMetricsPrefix_flow_name"
decl_stmt|;
name|String
name|flowVersion
init|=
literal|"CF7022C10F1354"
decl_stmt|;
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|String
name|appName
init|=
literal|"application_11111111111111_1111"
decl_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
literal|1002345678919L
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// write another application with same metric to this flow
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|TimelineEntity
name|entityApp2
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp2
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_11111111111111_2222"
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
literal|1002345678918L
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// use the timeline reader to verify data
name|HBaseTimelineReaderImpl
name|hbr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbr
operator|=
operator|new
name|HBaseTimelineReaderImpl
argument_list|()
expr_stmt|;
name|hbr
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|start
argument_list|()
expr_stmt|;
name|TimelineFilterList
name|metricsToRetrieve
init|=
operator|new
name|TimelineFilterList
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
operator|new
name|TimelinePrefixFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|EQUAL
argument_list|,
name|METRIC1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|METRIC1
operator|.
name|indexOf
argument_list|(
literal|"_"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TimelineEntity
name|entity
init|=
name|hbr
operator|.
name|getEntity
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|1002345678919L
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|matches
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|entity
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|String
name|id
init|=
name|metric
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|values
init|=
name|metric
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Number
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Number
name|n
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
name|value
operator|=
name|n
expr_stmt|;
block|}
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|METRIC1
case|:
name|assertEquals
argument_list|(
literal|40L
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unrecognized metric: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|()
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|metricCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|timelineEntity
range|:
name|entities
control|)
block|{
name|metricCnt
operator|+=
name|timelineEntity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metricCnt
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbr
operator|!=
literal|null
condition|)
block|{
name|hbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteFlowRunsMetricFields ()
specifier|public
name|void
name|testWriteFlowRunsMetricFields
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"testWriteFlowRunsMetricFields_cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"testWriteFlowRunsMetricFields_user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"testWriteFlowRunsMetricFields_flow_name"
decl_stmt|;
name|String
name|flowVersion
init|=
literal|"CF7022C10F1354"
decl_stmt|;
name|long
name|runid
init|=
literal|1002345678919L
decl_stmt|;
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|String
name|appName
init|=
literal|"application_11111111111111_1111"
decl_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// write another application with same metric to this flow
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|TimelineEntity
name|entityApp2
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp2
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_11111111111111_2222"
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// check flow run
name|checkFlowRunTable
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
name|c1
argument_list|)
expr_stmt|;
comment|// use the timeline reader to verify data
name|HBaseTimelineReaderImpl
name|hbr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbr
operator|=
operator|new
name|HBaseTimelineReaderImpl
argument_list|()
expr_stmt|;
name|hbr
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|start
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|()
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|timelineEntity
range|:
name|entities
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|timelineEntity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|()
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|timelineEntity
range|:
name|entities
control|)
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|timelineMetrics
init|=
name|timelineEntity
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|timelineMetrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|timelineMetrics
control|)
block|{
name|String
name|id
init|=
name|metric
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|values
init|=
name|metric
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Number
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Number
name|n
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
name|value
operator|=
name|n
expr_stmt|;
block|}
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|METRIC1
case|:
name|assertEquals
argument_list|(
literal|141L
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|METRIC2
case|:
name|assertEquals
argument_list|(
literal|57L
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unrecognized metric: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|hbr
operator|!=
literal|null
condition|)
block|{
name|hbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteFlowRunFlush ()
specifier|public
name|void
name|testWriteFlowRunFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"atestFlushFlowRun_cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"atestFlushFlowRun__user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"atestFlushFlowRun_flow_name"
decl_stmt|;
name|String
name|flowVersion
init|=
literal|"AF1021C19F1351"
decl_stmt|;
name|long
name|runid
init|=
literal|1449526652000L
decl_stmt|;
name|int
name|start
init|=
literal|10
decl_stmt|;
name|int
name|count
init|=
literal|20000
decl_stmt|;
name|int
name|appIdSuffix
init|=
literal|1
decl_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|long
name|insertTs
init|=
literal|1449796654827L
operator|-
name|count
decl_stmt|;
name|long
name|minTS
init|=
name|insertTs
operator|+
literal|1
decl_stmt|;
name|long
name|startTs
init|=
name|insertTs
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TimelineEntities
name|te1
init|=
literal|null
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
literal|null
decl_stmt|;
name|TimelineEntity
name|entityApp2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|appName
init|=
literal|"application_1060350000000_"
operator|+
name|appIdSuffix
decl_stmt|;
name|insertTs
operator|++
expr_stmt|;
name|te1
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|entityApp1
operator|=
name|TestFlowDataGenerator
operator|.
name|getMinFlushEntity
argument_list|(
name|insertTs
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|entityApp2
operator|=
name|TestFlowDataGenerator
operator|.
name|getMaxFlushEntity
argument_list|(
name|insertTs
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_1001199480000_7"
operator|+
name|appIdSuffix
expr_stmt|;
name|insertTs
operator|++
expr_stmt|;
name|appIdSuffix
operator|++
expr_stmt|;
name|te1
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|entityApp1
operator|=
name|TestFlowDataGenerator
operator|.
name|getMinFlushEntity
argument_list|(
name|insertTs
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|entityApp2
operator|=
name|TestFlowDataGenerator
operator|.
name|getMaxFlushEntity
argument_list|(
name|insertTs
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|,
name|te1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|checkMinMaxFlush
argument_list|(
name|c1
argument_list|,
name|minTS
argument_list|,
name|startTs
argument_list|,
name|count
argument_list|,
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|checkMinMaxFlush
argument_list|(
name|c1
argument_list|,
name|minTS
argument_list|,
name|startTs
argument_list|,
name|count
argument_list|,
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkMinMaxFlush (Configuration c1, long minTS, long startTs, int count, String cluster, String user, String flow, long runid, boolean checkMax)
specifier|private
name|void
name|checkMinMaxFlush
parameter_list|(
name|Configuration
name|c1
parameter_list|,
name|long
name|minTS
parameter_list|,
name|long
name|startTs
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|cluster
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|flow
parameter_list|,
name|long
name|runid
parameter_list|,
name|boolean
name|checkMax
parameter_list|)
throws|throws
name|IOException
block|{
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c1
argument_list|)
decl_stmt|;
comment|// check in flow run table
name|Table
name|table1
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|FlowRunTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
comment|// scan the table and see that we get back the right min and max
comment|// timestamps
name|byte
index|[]
name|startRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FlowRunColumn
operator|.
name|MIN_START_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FlowRunColumn
operator|.
name|MAX_END_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r1
init|=
name|table1
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|r1
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|10
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|starttime
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|FlowRunColumn
operator|.
name|MIN_START_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|minTS
argument_list|,
name|starttime
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkMax
condition|)
block|{
name|assertEquals
argument_list|(
name|startTs
operator|+
literal|2
operator|*
operator|(
name|count
operator|-
name|start
operator|)
operator|+
name|TestFlowDataGenerator
operator|.
name|END_TS_INCR
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|FlowRunColumn
operator|.
name|MAX_END_TIME
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFilterFlowRunsByCreatedTime ()
specifier|public
name|void
name|testFilterFlowRunsByCreatedTime
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"cluster2"
decl_stmt|;
name|String
name|user
init|=
literal|"user2"
decl_stmt|;
name|String
name|flow
init|=
literal|"flow_name2"
decl_stmt|;
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|entityApp1
operator|.
name|setCreatedTime
argument_list|(
literal|1425016501000L
argument_list|)
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|"CF7022C10F1354"
argument_list|,
literal|1002345678919L
argument_list|,
literal|"application_11111111111111_1111"
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// write another application with same metric to this flow
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|TimelineEntity
name|entityApp2
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp2
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|entityApp2
operator|.
name|setCreatedTime
argument_list|(
literal|1425016502000L
argument_list|)
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|"CF7022C10F1354"
argument_list|,
literal|1002345678918L
argument_list|,
literal|"application_11111111111111_2222"
argument_list|,
name|te
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// use the timeline reader to verify data
name|HBaseTimelineReaderImpl
name|hbr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbr
operator|=
operator|new
name|HBaseTimelineReaderImpl
argument_list|()
expr_stmt|;
name|hbr
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|start
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|1425016501000L
argument_list|,
literal|1425016502001L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
operator|!
name|entity
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user2@flow_name2/1002345678918"
argument_list|)
operator|&&
operator|!
name|entity
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user2@flow_name2/1002345678919"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Entities with flow runs 1002345678918 and 1002345678919"
operator|+
literal|"should be present."
argument_list|)
expr_stmt|;
block|}
block|}
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|1425016501050L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
operator|!
name|entity
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user2@flow_name2/1002345678918"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Entity with flow run 1002345678918 should be present."
argument_list|)
expr_stmt|;
block|}
block|}
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1425016501050L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
operator|!
name|entity
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user2@flow_name2/1002345678919"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Entity with flow run 1002345678919 should be present."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|hbr
operator|!=
literal|null
condition|)
block|{
name|hbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMetricFilters ()
specifier|public
name|void
name|testMetricFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"flow_name1"
decl_stmt|;
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|"CF7022C10F1354"
argument_list|,
literal|1002345678919L
argument_list|,
literal|"application_11111111111111_1111"
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// write another application with same metric to this flow
name|te
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|TimelineEntity
name|entityApp2
init|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp2
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entityApp2
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|"CF7022C10F1354"
argument_list|,
literal|1002345678918L
argument_list|,
literal|"application_11111111111111_2222"
argument_list|,
name|te
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// use the timeline reader to verify data
name|HBaseTimelineReaderImpl
name|hbr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbr
operator|=
operator|new
name|HBaseTimelineReaderImpl
argument_list|()
expr_stmt|;
name|hbr
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|start
argument_list|()
expr_stmt|;
name|TimelineFilterList
name|list1
init|=
operator|new
name|TimelineFilterList
argument_list|()
decl_stmt|;
name|list1
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|METRIC1
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|list2
init|=
operator|new
name|TimelineFilterList
argument_list|()
decl_stmt|;
name|list2
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|LESS_THAN
argument_list|,
name|METRIC1
argument_list|,
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|EQUAL
argument_list|,
name|METRIC2
argument_list|,
literal|57
argument_list|)
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|metricFilterList
init|=
operator|new
name|TimelineFilterList
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|list1
argument_list|,
name|list2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metricFilterList
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|metricCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
name|metricCnt
operator|+=
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|metricCnt
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|metricFilterList1
init|=
operator|new
name|TimelineFilterList
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|METRIC1
argument_list|,
literal|127
argument_list|)
argument_list|,
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|METRIC2
argument_list|,
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metricFilterList1
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|metricCnt
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
name|metricCnt
operator|+=
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metricCnt
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|metricFilterList2
init|=
operator|new
name|TimelineFilterList
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|LESS_THAN
argument_list|,
name|METRIC1
argument_list|,
literal|32
argument_list|)
argument_list|,
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|METRIC2
argument_list|,
literal|57
argument_list|)
argument_list|)
decl_stmt|;
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metricFilterList2
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|metricFilterList3
init|=
operator|new
name|TimelineFilterList
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|EQUAL
argument_list|,
literal|"s_metric"
argument_list|,
literal|32
argument_list|)
argument_list|)
decl_stmt|;
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metricFilterList3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|list3
init|=
operator|new
name|TimelineFilterList
argument_list|()
decl_stmt|;
name|list3
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|METRIC1
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|list4
init|=
operator|new
name|TimelineFilterList
argument_list|()
decl_stmt|;
name|list4
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|LESS_THAN
argument_list|,
name|METRIC1
argument_list|,
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelineCompareFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|EQUAL
argument_list|,
name|METRIC2
argument_list|,
literal|57
argument_list|)
argument_list|)
expr_stmt|;
name|TimelineFilterList
name|metricFilterList4
init|=
operator|new
name|TimelineFilterList
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|list3
argument_list|,
name|list4
argument_list|)
decl_stmt|;
name|TimelineFilterList
name|metricsToRetrieve
init|=
operator|new
name|TimelineFilterList
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
operator|new
name|TimelinePrefixFilter
argument_list|(
name|TimelineCompareOp
operator|.
name|EQUAL
argument_list|,
name|METRIC2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|METRIC2
operator|.
name|indexOf
argument_list|(
literal|"_"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|entities
operator|=
name|hbr
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineEntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metricFilterList4
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|metricCnt
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
name|metricCnt
operator|+=
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metricCnt
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbr
operator|!=
literal|null
condition|)
block|{
name|hbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|tearDownAfterClass ()
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

