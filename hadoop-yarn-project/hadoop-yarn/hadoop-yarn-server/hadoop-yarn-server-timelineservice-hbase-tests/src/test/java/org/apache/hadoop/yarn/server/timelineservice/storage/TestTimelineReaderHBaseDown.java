begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|HBaseTimelineReaderImpl
operator|.
name|DATA_TO_RETRIEVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|HBaseTimelineReaderImpl
operator|.
name|MONITOR_FILTERS
import|;
end_import

begin_class
DECL|class|TestTimelineReaderHBaseDown
specifier|public
class|class
name|TestTimelineReaderHBaseDown
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimelineReaderHBaseUp ()
specifier|public
name|void
name|testTimelineReaderHBaseUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|util
argument_list|)
expr_stmt|;
try|try
block|{
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|loadApps
argument_list|(
name|util
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineReaderServer
name|server
init|=
name|getTimelineReaderServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|init
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTimelineReaderImpl
name|htr
init|=
name|getHBaseTimelineReaderImpl
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkQuery
argument_list|(
name|htr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimelineReaderInitWhenHBaseIsDown ()
specifier|public
name|void
name|testTimelineReaderInitWhenHBaseIsDown
parameter_list|()
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|util
argument_list|)
expr_stmt|;
name|TimelineReaderServer
name|server
init|=
name|getTimelineReaderServer
argument_list|()
decl_stmt|;
comment|// init timeline reader when hbase is not running
name|server
operator|.
name|init
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTimelineReaderImpl
name|htr
init|=
name|getHBaseTimelineReaderImpl
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForHBaseDown
argument_list|(
name|htr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimelineReaderDetectsHBaseDown ()
specifier|public
name|void
name|testTimelineReaderDetectsHBaseDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|util
argument_list|)
expr_stmt|;
try|try
block|{
comment|// start minicluster
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|loadApps
argument_list|(
name|util
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// init timeline reader
name|TimelineReaderServer
name|server
init|=
name|getTimelineReaderServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|init
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTimelineReaderImpl
name|htr
init|=
name|getHBaseTimelineReaderImpl
argument_list|(
name|server
argument_list|)
decl_stmt|;
comment|// stop hbase after timeline reader init
name|util
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|// start server and check that it detects hbase is down
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForHBaseDown
argument_list|(
name|htr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimelineReaderDetectsZooKeeperDown ()
specifier|public
name|void
name|testTimelineReaderDetectsZooKeeperDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|util
argument_list|)
expr_stmt|;
try|try
block|{
comment|// start minicluster
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|loadApps
argument_list|(
name|util
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// init timeline reader
name|TimelineReaderServer
name|server
init|=
name|getTimelineReaderServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|init
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTimelineReaderImpl
name|htr
init|=
name|getHBaseTimelineReaderImpl
argument_list|(
name|server
argument_list|)
decl_stmt|;
comment|// stop hbase and zookeeper after timeline reader init
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
comment|// start server and check that it detects hbase is down
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForHBaseDown
argument_list|(
name|htr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimelineReaderRecoversAfterHBaseReturns ()
specifier|public
name|void
name|testTimelineReaderRecoversAfterHBaseReturns
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|util
argument_list|)
expr_stmt|;
try|try
block|{
comment|// start minicluster
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|loadApps
argument_list|(
name|util
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// init timeline reader
name|TimelineReaderServer
name|server
init|=
name|getTimelineReaderServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|init
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTimelineReaderImpl
name|htr
init|=
name|getHBaseTimelineReaderImpl
argument_list|(
name|server
argument_list|)
decl_stmt|;
comment|// stop hbase after timeline reader init
name|util
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|// start server and check that it detects hbase is down
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForHBaseDown
argument_list|(
name|htr
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniHBaseCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
operator|!
name|htr
operator|.
name|isHBaseDown
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|150000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForHBaseDown (HBaseTimelineReaderImpl htr)
specifier|private
specifier|static
name|void
name|waitForHBaseDown
parameter_list|(
name|HBaseTimelineReaderImpl
name|htr
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|htr
operator|.
name|isHBaseDown
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|150000
argument_list|)
expr_stmt|;
try|try
block|{
name|checkQuery
argument_list|(
name|htr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Query should fail when HBase is down"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"HBase is down"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkQuery (HBaseTimelineReaderImpl htr)
specifier|private
specifier|static
name|void
name|checkQuery
parameter_list|(
name|HBaseTimelineReaderImpl
name|htr
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineReaderContext
name|context
init|=
operator|new
name|TimelineReaderContext
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|htr
operator|.
name|getEntities
argument_list|(
name|context
argument_list|,
name|MONITOR_FILTERS
argument_list|,
name|DATA_TO_RETRIEVE
argument_list|)
decl_stmt|;
block|}
DECL|method|configure (HBaseTestingUtility util)
specifier|private
specifier|static
name|void
name|configure
parameter_list|(
name|HBaseTestingUtility
name|util
parameter_list|)
block|{
name|Configuration
name|config
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_WEBAPP_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
literal|"cluster1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.server.timelineservice.storage."
operator|+
literal|"HBaseTimelineReaderImpl"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimelineReaderServer ()
specifier|private
specifier|static
name|TimelineReaderServer
name|getTimelineReaderServer
parameter_list|()
block|{
return|return
operator|new
name|TimelineReaderServer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|addFilters
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// The parent code uses hadoop-common jar from this version of
comment|// Hadoop, but the tests are using hadoop-common jar from
comment|// ${hbase-compatible-hadoop.version}.  This version uses Jetty 9
comment|// while ${hbase-compatible-hadoop.version} uses Jetty 6, and there
comment|// are many differences, including classnames and packages.
comment|// We do nothing here, so that we don't cause a NoSuchMethodError or
comment|// NoClassDefFoundError.
comment|// Once ${hbase-compatible-hadoop.version} is changed to Hadoop 3,
comment|// we should be able to remove this @Override.
block|}
block|}
return|;
block|}
DECL|method|getHBaseTimelineReaderImpl ( TimelineReaderServer server)
specifier|private
specifier|static
name|HBaseTimelineReaderImpl
name|getHBaseTimelineReaderImpl
parameter_list|(
name|TimelineReaderServer
name|server
parameter_list|)
block|{
for|for
control|(
name|Service
name|s
range|:
name|server
operator|.
name|getServices
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|instanceof
name|HBaseTimelineReaderImpl
condition|)
block|{
return|return
operator|(
name|HBaseTimelineReaderImpl
operator|)
name|s
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Couldn't find HBaseTimelineReaderImpl"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

