begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTableRW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityTableRW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunTableRW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Unit tests for checking different schema prefixes.  */
end_comment

begin_class
DECL|class|TestHBaseTimelineStorageSchema
specifier|public
class|class
name|TestHBaseTimelineStorageSchema
block|{
DECL|field|util
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupBeforeClass ()
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createWithDefaultPrefix ()
specifier|public
name|void
name|createWithDefaultPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|hbaseConf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableName
name|entityTableName
init|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|EntityTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|entityTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entityTableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|entityTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|EntityTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entityTable
argument_list|)
expr_stmt|;
name|TableName
name|flowRunTableName
init|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|flowRunTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flowRunTableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|flowRunTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|flowRunTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createWithSetPrefix ()
specifier|public
name|void
name|createWithSetPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|hbaseConf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"unit-test."
decl_stmt|;
name|hbaseConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableName
name|entityTableName
init|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|EntityTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|entityTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entityTableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|entityTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|EntityTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entityTable
argument_list|)
expr_stmt|;
name|TableName
name|flowRunTableName
init|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|flowRunTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flowRunTableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|flowRunTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|flowRunTable
argument_list|)
expr_stmt|;
comment|// create another set with a diff prefix
name|hbaseConf
operator|.
name|unset
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"yet-another-unit-test."
expr_stmt|;
name|hbaseConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|entityTableName
operator|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|EntityTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|entityTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entityTableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|entityTable
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|EntityTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|EntityTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entityTable
argument_list|)
expr_stmt|;
name|flowRunTableName
operator|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|flowRunTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flowRunTableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|flowRunTable
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|flowRunTable
argument_list|)
expr_stmt|;
name|hbaseConf
operator|.
name|unset
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

