begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.flow
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|DataGeneratorForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|HBaseTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTableRW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|ColumnHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|HBaseTimelineServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|LongConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimestampGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the FlowRun and FlowActivity Tables.  */
end_comment

begin_class
DECL|class|TestHBaseStorageFlowRunCompaction
specifier|public
class|class
name|TestHBaseStorageFlowRunCompaction
block|{
DECL|field|util
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
decl_stmt|;
DECL|field|METRIC1
specifier|private
specifier|static
specifier|final
name|String
name|METRIC1
init|=
literal|"MAP_SLOT_MILLIS"
decl_stmt|;
DECL|field|METRIC2
specifier|private
specifier|static
specifier|final
name|String
name|METRIC2
init|=
literal|"HDFS_BYTES_READ"
decl_stmt|;
DECL|field|aRowKey
specifier|private
specifier|final
name|byte
index|[]
name|aRowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
DECL|field|aFamily
specifier|private
specifier|final
name|byte
index|[]
name|aFamily
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
DECL|field|aQualifier
specifier|private
specifier|final
name|byte
index|[]
name|aQualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupBeforeClass ()
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * writes non numeric data into flow run table.    * reads it back    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWriteNonNumericData ()
specifier|public
name|void
name|testWriteNonNumericData
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rowKey
init|=
literal|"nonNumericRowKey"
decl_stmt|;
name|String
name|column
init|=
literal|"nonNumericColumnName"
decl_stmt|;
name|String
name|value
init|=
literal|"nonNumericValue"
decl_stmt|;
name|byte
index|[]
name|rowKeyBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKeyBytes
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnNameBytes
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
name|Configuration
name|hbaseConf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Table
name|flowRunTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|flowRunTable
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowKeyBytes
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|flowRunTable
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|actualValue
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnNameBytes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|actualValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|actualValue
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteScanBatchLimit ()
specifier|public
name|void
name|testWriteScanBatchLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rowKey
init|=
literal|"nonNumericRowKey"
decl_stmt|;
name|String
name|column
init|=
literal|"nonNumericColumnName"
decl_stmt|;
name|String
name|value
init|=
literal|"nonNumericValue"
decl_stmt|;
name|String
name|column2
init|=
literal|"nonNumericColumnName2"
decl_stmt|;
name|String
name|value2
init|=
literal|"nonNumericValue2"
decl_stmt|;
name|String
name|column3
init|=
literal|"nonNumericColumnName3"
decl_stmt|;
name|String
name|value3
init|=
literal|"nonNumericValue3"
decl_stmt|;
name|String
name|column4
init|=
literal|"nonNumericColumnName4"
decl_stmt|;
name|String
name|value4
init|=
literal|"nonNumericValue4"
decl_stmt|;
name|byte
index|[]
name|rowKeyBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnName2Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnName3Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value3Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnName4Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column4
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value4Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value4
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKeyBytes
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnNameBytes
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName2Bytes
argument_list|,
name|value2Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName3Bytes
argument_list|,
name|value3Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName4Bytes
argument_list|,
name|value4Bytes
argument_list|)
expr_stmt|;
name|Configuration
name|hbaseConf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|Table
name|flowRunTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|hbaseConf
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|flowRunTable
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|rowKey2
init|=
literal|"nonNumericRowKey2"
decl_stmt|;
name|byte
index|[]
name|rowKey2Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKey2
argument_list|)
decl_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|rowKey2Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnNameBytes
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName2Bytes
argument_list|,
name|value2Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName3Bytes
argument_list|,
name|value3Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName4Bytes
argument_list|,
name|value4Bytes
argument_list|)
expr_stmt|;
name|flowRunTable
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|rowKey3
init|=
literal|"nonNumericRowKey3"
decl_stmt|;
name|byte
index|[]
name|rowKey3Bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKey3
argument_list|)
decl_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|rowKey3Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnNameBytes
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName2Bytes
argument_list|,
name|value2Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName3Bytes
argument_list|,
name|value3Bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columnName4Bytes
argument_list|,
name|value4Bytes
argument_list|)
expr_stmt|;
name|flowRunTable
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|rowKeyBytes
argument_list|)
expr_stmt|;
comment|// set number of cells to fetch per scanner next invocation
name|int
name|batchLimit
init|=
literal|2
decl_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|flowRunTable
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|rowKeyBytes
argument_list|)
expr_stmt|;
comment|// set number of cells to fetch per scanner next invocation
name|batchLimit
operator|=
literal|3
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|flowRunTable
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|rowKeyBytes
argument_list|)
expr_stmt|;
comment|// set number of cells to fetch per scanner next invocation
name|batchLimit
operator|=
literal|1000
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|flowRunTable
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|<=
name|batchLimit
argument_list|)
expr_stmt|;
comment|// we expect all back in one next call
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
comment|// should get back 1 row with each invocation
comment|// if scan batch is set sufficiently high
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// test with a negative number
comment|// should have same effect as setting it to a high number
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|rowKeyBytes
argument_list|)
expr_stmt|;
comment|// set number of cells to fetch per scanner next invocation
name|batchLimit
operator|=
operator|-
literal|2992
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
name|batchLimit
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|flowRunTable
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|rowCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// we expect all back in one next call
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
comment|// should get back 1 row with each invocation
comment|// if scan batch is set sufficiently high
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteFlowRunCompaction ()
specifier|public
name|void
name|testWriteFlowRunCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cluster
init|=
literal|"kompaction_cluster1"
decl_stmt|;
name|String
name|user
init|=
literal|"kompaction_FlowRun__user1"
decl_stmt|;
name|String
name|flow
init|=
literal|"kompaction_flowRun_flow_name"
decl_stmt|;
name|String
name|flowVersion
init|=
literal|"AF1021C19F1351"
decl_stmt|;
name|long
name|runid
init|=
literal|1449526652000L
decl_stmt|;
name|int
name|start
init|=
literal|10
decl_stmt|;
name|int
name|count
init|=
literal|2000
decl_stmt|;
name|int
name|appIdSuffix
init|=
literal|1
decl_stmt|;
name|HBaseTimelineWriterImpl
name|hbi
init|=
literal|null
decl_stmt|;
name|long
name|insertTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|count
decl_stmt|;
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TimelineEntities
name|te1
init|=
literal|null
decl_stmt|;
name|TimelineEntity
name|entityApp1
init|=
literal|null
decl_stmt|;
name|UserGroupInformation
name|remoteUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|hbi
operator|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
comment|// now insert count * ( 100 + 100) metrics
comment|// each call to getEntityMetricsApp1 brings back 100 values
comment|// of metric1 and 100 of metric2
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|appName
init|=
literal|"application_10240000000000_"
operator|+
name|appIdSuffix
decl_stmt|;
name|insertTs
operator|++
expr_stmt|;
name|te1
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|entityApp1
operator|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1
argument_list|(
name|insertTs
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
operator|new
name|TimelineCollectorContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|)
argument_list|,
name|te1
argument_list|,
name|remoteUser
argument_list|)
expr_stmt|;
name|appName
operator|=
literal|"application_2048000000000_7"
operator|+
name|appIdSuffix
expr_stmt|;
name|insertTs
operator|++
expr_stmt|;
name|te1
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|entityApp1
operator|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp2
argument_list|(
name|insertTs
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|write
argument_list|(
operator|new
name|TimelineCollectorContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|)
argument_list|,
name|te1
argument_list|,
name|remoteUser
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|String
name|appName
init|=
literal|"application_10240000000000_"
operator|+
name|appIdSuffix
decl_stmt|;
name|te1
operator|=
operator|new
name|TimelineEntities
argument_list|()
expr_stmt|;
name|entityApp1
operator|=
name|TestFlowDataGenerator
operator|.
name|getEntityMetricsApp1Complete
argument_list|(
name|insertTs
operator|+
literal|1
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|te1
operator|.
name|addEntity
argument_list|(
name|entityApp1
argument_list|)
expr_stmt|;
if|if
condition|(
name|hbi
operator|!=
literal|null
condition|)
block|{
name|hbi
operator|.
name|write
argument_list|(
operator|new
name|TimelineCollectorContext
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|flowVersion
argument_list|,
name|runid
argument_list|,
name|appName
argument_list|)
argument_list|,
name|te1
argument_list|,
name|remoteUser
argument_list|)
expr_stmt|;
name|hbi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hbi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// check in flow run table
name|TableName
name|flowRunTable
init|=
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|c1
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionServer
name|server
init|=
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|flowRunTable
argument_list|)
decl_stmt|;
comment|// flush and compact all the regions of the primary table
name|int
name|regionNum
init|=
name|HBaseTimelineServerUtils
operator|.
name|flushCompactTableRegions
argument_list|(
name|server
argument_list|,
name|flowRunTable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't find any regions for primary table!"
argument_list|,
name|regionNum
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// check flow run for one flow many apps
name|checkFlowRunTable
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|,
name|c1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFlowRunTable (String cluster, String user, String flow, long runid, Configuration c1, int valueCount)
specifier|private
name|void
name|checkFlowRunTable
parameter_list|(
name|String
name|cluster
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|flow
parameter_list|,
name|long
name|runid
parameter_list|,
name|Configuration
name|c1
parameter_list|,
name|int
name|valueCount
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|startRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|cluster
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|String
name|clusterStop
init|=
name|cluster
operator|+
literal|"1"
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|clusterStop
argument_list|,
name|user
argument_list|,
name|flow
argument_list|,
name|runid
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|Table
name|table1
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|BaseTableRW
operator|.
name|getTableName
argument_list|(
name|c1
argument_list|,
name|FlowRunTableRW
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTableRW
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|valueCount
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
comment|// check metric1
name|byte
index|[]
name|q
init|=
name|ColumnHelper
operator|.
name|getColumnQualifier
argument_list|(
name|FlowRunColumnPrefix
operator|.
name|METRIC
operator|.
name|getColumnPrefixBytes
argument_list|()
argument_list|,
name|METRIC1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|containsKey
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|141
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check metric2
name|q
operator|=
name|ColumnHelper
operator|.
name|getColumnQualifier
argument_list|(
name|FlowRunColumnPrefix
operator|.
name|METRIC
operator|.
name|getColumnPrefixBytes
argument_list|()
argument_list|,
name|METRIC2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|containsKey
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|57
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
DECL|method|getFlowScannerForTestingCompaction ()
specifier|private
name|FlowScanner
name|getFlowScannerForTestingCompaction
parameter_list|()
block|{
comment|// create a FlowScanner object with the sole purpose of invoking a process
comment|// summation;
comment|// okay to pass in nulls for the constructor arguments
comment|// because all we want to do is invoke the process summation
name|FlowScanner
name|fs
init|=
operator|new
name|FlowScanner
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|FlowScannerOperation
operator|.
name|MAJOR_COMPACTION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
annotation|@
name|Test
DECL|method|checkProcessSummationMoreCellsSumFinal2 ()
specifier|public
name|void
name|checkProcessSummationMoreCellsSumFinal2
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|cellValue1
init|=
literal|1236L
decl_stmt|;
name|long
name|cellValue2
init|=
literal|28L
decl_stmt|;
name|long
name|cellValue3
init|=
literal|1236L
decl_stmt|;
name|long
name|cellValue4
init|=
literal|1236L
decl_stmt|;
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
comment|// note down the current timestamp
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cell1Ts
init|=
literal|1200120L
decl_stmt|;
name|long
name|cell2Ts
init|=
name|TimestampGenerator
operator|.
name|getSupplementedTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"application_123746661110_11202"
argument_list|)
decl_stmt|;
name|long
name|cell3Ts
init|=
literal|1277719L
decl_stmt|;
name|long
name|cell4Ts
init|=
name|currentTimestamp
operator|-
literal|10
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Tag
name|t
init|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_1234588888_91188"
argument_list|)
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
comment|// create a cell with a VERY old timestamp and attribute SUM_FINAL
name|Cell
name|c1
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cell1Ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValue1
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_12700000001_29102"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tagByteArray
operator|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// create a cell with a recent timestamp and attribute SUM_FINAL
name|Cell
name|c2
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cell2Ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValue2
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_191780000000001_8195"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tagByteArray
operator|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// create a cell with a VERY old timestamp but has attribute SUM
name|Cell
name|c3
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cell3Ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValue3
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_191780000000001_98104"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tagByteArray
operator|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// create a cell with a VERY old timestamp but has attribute SUM
name|Cell
name|c4
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cell4Ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValue4
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
operator|new
name|LongConverter
argument_list|()
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
comment|// we should be getting back 4 cells
comment|// one is the flow sum cell
comment|// two are the cells with SUM attribute
comment|// one cell with SUM_FINAL
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|returnedCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnedCell
argument_list|)
expr_stmt|;
name|long
name|returnTs
init|=
name|returnedCell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|returnValue
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|returnedCell
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnValue
operator|==
name|cellValue2
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|==
name|cell2Ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnValue
operator|==
name|cellValue3
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|==
name|cell3Ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnValue
operator|==
name|cellValue4
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|==
name|cell4Ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnValue
operator|==
name|cellValue1
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|!=
name|cell1Ts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|>
name|cell1Ts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|currentTimestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// raise a failure since we expect only these two values back
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// tests with many cells
comment|// of type SUM and SUM_FINAL
comment|// all cells of SUM_FINAL will expire
annotation|@
name|Test
DECL|method|checkProcessSummationMoreCellsSumFinalMany ()
specifier|public
name|void
name|checkProcessSummationMoreCellsSumFinalMany
parameter_list|()
throws|throws
name|IOException
block|{
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|200000
decl_stmt|;
name|long
name|cellValueFinal
init|=
literal|1000L
decl_stmt|;
name|long
name|cellValueNotFinal
init|=
literal|28L
decl_stmt|;
comment|// note down the current timestamp
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cellTsFinalStart
init|=
literal|10001120L
decl_stmt|;
name|long
name|cellTsFinal
init|=
name|cellTsFinalStart
decl_stmt|;
name|long
name|cellTsNotFinalStart
init|=
name|currentTimestamp
operator|-
literal|5
decl_stmt|;
name|long
name|cellTsNotFinal
init|=
name|cellTsNotFinalStart
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
literal|null
decl_stmt|;
name|Tag
name|t
init|=
literal|null
decl_stmt|;
name|Cell
name|c1
init|=
literal|null
decl_stmt|;
comment|// insert SUM_FINAL cells
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_123450000"
operator|+
name|i
operator|+
literal|"01_19"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
comment|// create a cell with a VERY old timestamp and attribute SUM_FINAL
name|c1
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cellTsFinal
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValueFinal
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
expr_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|cellTsFinal
operator|++
expr_stmt|;
block|}
comment|// add SUM cells
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_1987650000"
operator|+
name|i
operator|+
literal|"83_911"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
comment|// create a cell with attribute SUM
name|c1
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cellTsNotFinal
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValueNotFinal
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
expr_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|cellTsNotFinal
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
operator|new
name|LongConverter
argument_list|()
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
comment|// we should be getting back count + 1 cells
comment|// one is the flow sum cell
comment|// others are the cells with SUM attribute
name|assertEquals
argument_list|(
name|count
operator|+
literal|1
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|returnedCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnedCell
argument_list|)
expr_stmt|;
name|long
name|returnTs
init|=
name|returnedCell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|returnValue
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|returnedCell
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnValue
operator|==
operator|(
name|count
operator|*
name|cellValueFinal
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|>
operator|(
name|cellTsFinalStart
operator|+
name|count
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|currentTimestamp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|returnValue
operator|>=
name|cellValueNotFinal
operator|)
operator|&&
operator|(
name|returnValue
operator|<=
name|cellValueNotFinal
operator|*
name|count
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|cellTsNotFinalStart
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|<=
name|cellTsNotFinalStart
operator|*
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// raise a failure since we expect only these values back
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// tests with many cells
comment|// of type SUM and SUM_FINAL
comment|// NOT cells of SUM_FINAL will expire
annotation|@
name|Test
DECL|method|checkProcessSummationMoreCellsSumFinalVariedTags ()
specifier|public
name|void
name|checkProcessSummationMoreCellsSumFinalVariedTags
parameter_list|()
throws|throws
name|IOException
block|{
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
name|int
name|countFinal
init|=
literal|20100
decl_stmt|;
name|int
name|countNotFinal
init|=
literal|1000
decl_stmt|;
name|int
name|countFinalNotExpire
init|=
literal|7009
decl_stmt|;
name|long
name|cellValueFinal
init|=
literal|1000L
decl_stmt|;
name|long
name|cellValueNotFinal
init|=
literal|28L
decl_stmt|;
comment|// note down the current timestamp
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cellTsFinalStart
init|=
literal|10001120L
decl_stmt|;
name|long
name|cellTsFinal
init|=
name|cellTsFinalStart
decl_stmt|;
name|long
name|cellTsFinalStartNotExpire
init|=
name|TimestampGenerator
operator|.
name|getSupplementedTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"application_10266666661166_118821"
argument_list|)
decl_stmt|;
name|long
name|cellTsFinalNotExpire
init|=
name|cellTsFinalStartNotExpire
decl_stmt|;
name|long
name|cellTsNotFinalStart
init|=
name|currentTimestamp
operator|-
literal|5
decl_stmt|;
name|long
name|cellTsNotFinal
init|=
name|cellTsNotFinalStart
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
literal|null
decl_stmt|;
name|Tag
name|t
init|=
literal|null
decl_stmt|;
name|Cell
name|c1
init|=
literal|null
decl_stmt|;
comment|// insert SUM_FINAL cells which will expire
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countFinal
condition|;
name|i
operator|++
control|)
block|{
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_123450000"
operator|+
name|i
operator|+
literal|"01_19"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
comment|// create a cell with a VERY old timestamp and attribute SUM_FINAL
name|c1
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cellTsFinal
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValueFinal
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
expr_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|cellTsFinal
operator|++
expr_stmt|;
block|}
comment|// insert SUM_FINAL cells which will NOT expire
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countFinalNotExpire
condition|;
name|i
operator|++
control|)
block|{
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_123450000"
operator|+
name|i
operator|+
literal|"01_19"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
comment|// create a cell with a VERY old timestamp and attribute SUM_FINAL
name|c1
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cellTsFinalNotExpire
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValueFinal
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
expr_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|cellTsFinalNotExpire
operator|++
expr_stmt|;
block|}
comment|// add SUM cells
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countNotFinal
condition|;
name|i
operator|++
control|)
block|{
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_1987650000"
operator|+
name|i
operator|+
literal|"83_911"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
comment|// create a cell with attribute SUM
name|c1
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|cellTsNotFinal
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValueNotFinal
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
expr_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|cellTsNotFinal
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
operator|new
name|LongConverter
argument_list|()
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
comment|// we should be getting back
comment|// countNotFinal + countFinalNotExpire + 1 cells
comment|// one is the flow sum cell
comment|// count = the cells with SUM attribute
comment|// count = the cells with SUM_FINAL attribute but not expired
name|assertEquals
argument_list|(
name|countFinalNotExpire
operator|+
name|countNotFinal
operator|+
literal|1
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|returnedCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnedCell
argument_list|)
expr_stmt|;
name|long
name|returnTs
init|=
name|returnedCell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|returnValue
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|returnedCell
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnValue
operator|==
operator|(
name|countFinal
operator|*
name|cellValueFinal
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|>
operator|(
name|cellTsFinalStart
operator|+
name|countFinal
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|currentTimestamp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnValue
operator|==
name|cellValueNotFinal
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|cellTsNotFinalStart
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|<=
name|cellTsNotFinalStart
operator|+
name|countNotFinal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnValue
operator|==
name|cellValueFinal
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|cellTsFinalStartNotExpire
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|<=
name|cellTsFinalStartNotExpire
operator|+
name|countFinalNotExpire
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// raise a failure since we expect only these values back
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testProcessSummationMoreCellsSumFinal ()
specifier|public
name|void
name|testProcessSummationMoreCellsSumFinal
parameter_list|()
throws|throws
name|IOException
block|{
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
comment|// note down the current timestamp
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cellValue1
init|=
literal|1236L
decl_stmt|;
name|long
name|cellValue2
init|=
literal|28L
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Tag
name|t
init|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_1234588888_999888"
argument_list|)
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|// create a cell with a VERY old timestamp and attribute SUM_FINAL
name|Cell
name|c1
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
literal|120L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValue1
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|t
operator|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_100000000001_119101"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tagByteArray
operator|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// create a cell with a VERY old timestamp but has attribute SUM
name|Cell
name|c2
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
literal|130L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cellValue2
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
operator|new
name|LongConverter
argument_list|()
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
comment|// we should be getting back two cells
comment|// one is the flow sum cell
comment|// another is the cell with SUM attribute
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|returnedCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnedCell
argument_list|)
expr_stmt|;
name|long
name|inputTs1
init|=
name|c1
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|inputTs2
init|=
name|c2
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|returnTs
init|=
name|returnedCell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|returnValue
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|returnedCell
argument_list|)
argument_list|)
decl_stmt|;
comment|// the returned Ts will be far greater than input ts as well as the noted
comment|// current timestamp
if|if
condition|(
name|returnValue
operator|==
name|cellValue2
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|==
name|inputTs2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnValue
operator|==
name|cellValue1
condition|)
block|{
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|currentTimestamp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|!=
name|inputTs1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// raise a failure since we expect only these two values back
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProcessSummationOneCellSumFinal ()
specifier|public
name|void
name|testProcessSummationOneCellSumFinal
parameter_list|()
throws|throws
name|IOException
block|{
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
comment|// note down the current timestamp
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Tag
name|t
init|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_123458888888_999888"
argument_list|)
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|// create a cell with a VERY old timestamp
name|Cell
name|c1
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
literal|120L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1110L
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
operator|new
name|LongConverter
argument_list|()
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
comment|// we should not get the same cell back
comment|// but we get back the flow cell
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|returnedCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// it's NOT the same cell
name|assertNotEquals
argument_list|(
name|c1
argument_list|,
name|returnedCell
argument_list|)
expr_stmt|;
name|long
name|inputTs
init|=
name|c1
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|returnTs
init|=
name|returnedCell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
comment|// the returned Ts will be far greater than input ts as well as the noted
comment|// current timestamp
name|assertTrue
argument_list|(
name|returnTs
operator|>
name|inputTs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnTs
operator|>=
name|currentTimestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessSummationOneCell ()
specifier|public
name|void
name|testProcessSummationOneCell
parameter_list|()
throws|throws
name|IOException
block|{
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
comment|// note down the current timestamp
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// try for 1 cell with tag SUM
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Tag
name|t
init|=
name|HBaseTimelineServerUtils
operator|.
name|createTag
argument_list|(
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getTagType
argument_list|()
argument_list|,
literal|"application_123458888888_999888"
argument_list|)
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagByteArray
init|=
name|HBaseTimelineServerUtils
operator|.
name|convertTagListToByteArray
argument_list|(
name|tags
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|Cell
name|c1
init|=
name|HBaseTimelineServerUtils
operator|.
name|createNewCell
argument_list|(
name|aRowKey
argument_list|,
name|aFamily
argument_list|,
name|aQualifier
argument_list|,
name|currentTimestamp
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1110L
argument_list|)
argument_list|,
name|tagByteArray
argument_list|)
decl_stmt|;
name|currentColumnCells
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
operator|new
name|LongConverter
argument_list|()
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
comment|// we expect the same cell back
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|c2
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentTimestamp
argument_list|,
name|c2
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessSummationEmpty ()
specifier|public
name|void
name|testProcessSummationEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|FlowScanner
name|fs
init|=
name|getFlowScannerForTestingCompaction
argument_list|()
decl_stmt|;
name|long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LongConverter
name|longConverter
init|=
operator|new
name|LongConverter
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|currentColumnCells
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
name|longConverter
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|currentColumnCells
operator|=
operator|new
name|TreeSet
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|cells
operator|=
name|fs
operator|.
name|processSummationMajorCompaction
argument_list|(
name|currentColumnCells
argument_list|,
name|longConverter
argument_list|,
name|currentTimestamp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownAfterClass ()
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

