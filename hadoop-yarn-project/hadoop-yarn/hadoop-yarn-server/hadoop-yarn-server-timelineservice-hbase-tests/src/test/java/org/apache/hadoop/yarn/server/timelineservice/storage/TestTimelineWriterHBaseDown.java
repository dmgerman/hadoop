begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|ApplicationEntity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests HbaseTimelineWriter with Hbase Down.  */
end_comment

begin_class
DECL|class|TestTimelineWriterHBaseDown
specifier|public
class|class
name|TestTimelineWriterHBaseDown
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimelineWriterHBaseDown ()
specifier|public
name|void
name|testTimelineWriterHBaseDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|HBaseTimelineWriterImpl
name|writer
init|=
operator|new
name|HBaseTimelineWriterImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|Configuration
name|c1
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|c1
operator|.
name|setLong
argument_list|(
name|TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|DataGeneratorForTest
operator|.
name|createSchema
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineStorageMonitor
name|storageMonitor
init|=
name|writer
operator|.
name|getTimelineStorageMonitor
argument_list|()
decl_stmt|;
name|waitForHBaseToUp
argument_list|(
name|storageMonitor
argument_list|)
expr_stmt|;
try|try
block|{
name|storageMonitor
operator|.
name|checkStorageIsUp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"HBaseStorageMonitor failed to detect HBase Up"
argument_list|)
expr_stmt|;
block|}
name|util
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|waitForHBaseToDown
argument_list|(
name|storageMonitor
argument_list|)
expr_stmt|;
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|ApplicationEntity
name|entity
init|=
operator|new
name|ApplicationEntity
argument_list|()
decl_stmt|;
name|String
name|appId
init|=
literal|"application_1000178881110_2002"
decl_stmt|;
name|entity
operator|.
name|setId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|Long
name|cTime
init|=
literal|1425016501000L
decl_stmt|;
name|entity
operator|.
name|setCreatedTime
argument_list|(
name|cTime
argument_list|)
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
operator|new
name|TimelineCollectorContext
argument_list|(
literal|"ATS1"
argument_list|,
literal|"user1"
argument_list|,
literal|"flow2"
argument_list|,
literal|"AB7822C10F1111"
argument_list|,
literal|1002345678919L
argument_list|,
name|appId
argument_list|)
argument_list|,
name|te
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"HBase is down"
argument_list|)
condition|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"HBaseStorageMonitor failed to detect HBase Down"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForHBaseToUp (TimelineStorageMonitor storageMonitor)
specifier|public
name|void
name|waitForHBaseToUp
parameter_list|(
name|TimelineStorageMonitor
name|storageMonitor
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|storageMonitor
operator|.
name|checkStorageIsUp
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|150000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForHBaseToDown (TimelineStorageMonitor storageMonitor)
specifier|public
name|void
name|waitForHBaseToDown
parameter_list|(
name|TimelineStorageMonitor
name|storageMonitor
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|storageMonitor
operator|.
name|checkStorageIsUp
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|150000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

