begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.reader.cosmosdb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|reader
operator|.
name|cosmosdb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|cosmosdb
operator|.
name|FeedOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|cosmosdb
operator|.
name|FeedResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|cosmosdb
operator|.
name|rx
operator|.
name|AsyncDocumentClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|DocumentStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|NoDocumentFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|TimelineDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreVendor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|reader
operator|.
name|DocumentStoreReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|schedulers
operator|.
name|Schedulers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_comment
comment|/**  * This is the Document Store Reader implementation for  * {@link DocumentStoreVendor#COSMOS_DB}.  */
end_comment

begin_class
DECL|class|CosmosDBDocumentStoreReader
specifier|public
class|class
name|CosmosDBDocumentStoreReader
parameter_list|<
name|TimelineDoc
extends|extends
name|TimelineDocument
parameter_list|>
implements|implements
name|DocumentStoreReader
argument_list|<
name|TimelineDoc
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CosmosDBDocumentStoreReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_DOCUMENTS_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_DOCUMENTS_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|AsyncDocumentClient
name|client
decl_stmt|;
DECL|field|databaseName
specifier|private
specifier|final
name|String
name|databaseName
decl_stmt|;
DECL|field|COLLECTION_LINK
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION_LINK
init|=
literal|"/dbs/%s/colls/%s"
decl_stmt|;
DECL|field|SELECT_TOP_FROM_COLLECTION
specifier|private
specifier|final
specifier|static
name|String
name|SELECT_TOP_FROM_COLLECTION
init|=
literal|"SELECT TOP %d * "
operator|+
literal|"FROM %s c"
decl_stmt|;
DECL|field|SELECT_ALL_FROM_COLLECTION
specifier|private
specifier|final
specifier|static
name|String
name|SELECT_ALL_FROM_COLLECTION
init|=
literal|"SELECT  * FROM %s c"
decl_stmt|;
DECL|field|SELECT_DISTINCT_TYPES_FROM_COLLECTION
specifier|private
specifier|final
specifier|static
name|String
name|SELECT_DISTINCT_TYPES_FROM_COLLECTION
init|=
literal|"SELECT  distinct c.type FROM %s c"
decl_stmt|;
DECL|field|ENTITY_TYPE_COLUMN
specifier|private
specifier|static
specifier|final
name|String
name|ENTITY_TYPE_COLUMN
init|=
literal|"type"
decl_stmt|;
DECL|field|WHERE_CLAUSE
specifier|private
specifier|final
specifier|static
name|String
name|WHERE_CLAUSE
init|=
literal|" WHERE "
decl_stmt|;
DECL|field|AND_OPERATOR
specifier|private
specifier|final
specifier|static
name|String
name|AND_OPERATOR
init|=
literal|" AND "
decl_stmt|;
DECL|field|CONTAINS_FUNC_FOR_ID
specifier|private
specifier|final
specifier|static
name|String
name|CONTAINS_FUNC_FOR_ID
init|=
literal|" CONTAINS(c.id, \"%s\") "
decl_stmt|;
DECL|field|CONTAINS_FUNC_FOR_TYPE
specifier|private
specifier|final
specifier|static
name|String
name|CONTAINS_FUNC_FOR_TYPE
init|=
literal|" CONTAINS(c.type, "
operator|+
literal|"\"%s\") "
decl_stmt|;
DECL|field|ORDER_BY_CLAUSE
specifier|private
specifier|final
specifier|static
name|String
name|ORDER_BY_CLAUSE
init|=
literal|" ORDER BY c.createdTime"
decl_stmt|;
comment|// creating thread pool of size, half of the total available threads from JVM
DECL|field|executorService
specifier|private
specifier|static
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
DECL|field|schedulerForBlockingWork
specifier|private
specifier|static
name|Scheduler
name|schedulerForBlockingWork
init|=
name|Schedulers
operator|.
name|from
argument_list|(
name|executorService
argument_list|)
decl_stmt|;
DECL|method|CosmosDBDocumentStoreReader (Configuration conf)
specifier|public
name|CosmosDBDocumentStoreReader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Cosmos DB DocumentStoreReader..."
argument_list|)
expr_stmt|;
name|databaseName
operator|=
name|DocumentStoreUtils
operator|.
name|getCosmosDBDatabaseName
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initCosmosDBClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|initCosmosDBClient (Configuration conf)
specifier|private
specifier|synchronized
name|void
name|initCosmosDBClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// making CosmosDB Async Client Singleton
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Cosmos DB Reader Async Client..."
argument_list|)
expr_stmt|;
name|client
operator|=
name|DocumentStoreUtils
operator|.
name|createCosmosDBAsyncClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addShutdownHook
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readDocumentList (String collectionName, TimelineReaderContext context, final Class<TimelineDoc> timelineDocClass, long size)
specifier|public
name|List
argument_list|<
name|TimelineDoc
argument_list|>
name|readDocumentList
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TimelineReaderContext
name|context
parameter_list|,
specifier|final
name|Class
argument_list|<
name|TimelineDoc
argument_list|>
name|timelineDocClass
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|NoDocumentFoundException
block|{
specifier|final
name|List
argument_list|<
name|TimelineDoc
argument_list|>
name|result
init|=
name|queryDocuments
argument_list|(
name|collectionName
argument_list|,
name|context
argument_list|,
name|timelineDocClass
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|NoDocumentFoundException
argument_list|(
literal|"No documents were found while "
operator|+
literal|"querying Collection : "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|fetchEntityTypes (String collectionName, TimelineReaderContext context)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|fetchEntityTypes
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TimelineReaderContext
name|context
parameter_list|)
block|{
name|StringBuilder
name|queryStrBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|SELECT_DISTINCT_TYPES_FROM_COLLECTION
argument_list|,
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sqlQuery
init|=
name|addPredicates
argument_list|(
name|context
argument_list|,
name|collectionName
argument_list|,
name|queryStrBuilder
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Querying Collection : {} , with query {}"
argument_list|,
name|collectionName
argument_list|,
name|sqlQuery
argument_list|)
expr_stmt|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|client
operator|.
name|queryDocuments
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|COLLECTION_LINK
argument_list|,
name|databaseName
argument_list|,
name|collectionName
argument_list|)
argument_list|,
name|sqlQuery
argument_list|,
operator|new
name|FeedOptions
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|FeedResponse
operator|::
name|getResults
argument_list|)
comment|// Map the page to the list of documents
operator|.
name|concatMap
argument_list|(
name|Observable
operator|::
name|from
argument_list|)
operator|.
name|map
argument_list|(
name|document
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|document
operator|.
name|get
argument_list|(
name|ENTITY_TYPE_COLUMN
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|subscribeOn
argument_list|(
name|schedulerForBlockingWork
argument_list|)
operator|.
name|toBlocking
argument_list|()
operator|.
name|single
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDocument (String collectionName, TimelineReaderContext context, final Class<TimelineDoc> timelineDocClass)
specifier|public
name|TimelineDoc
name|readDocument
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TimelineReaderContext
name|context
parameter_list|,
specifier|final
name|Class
argument_list|<
name|TimelineDoc
argument_list|>
name|timelineDocClass
parameter_list|)
throws|throws
name|NoDocumentFoundException
block|{
specifier|final
name|List
argument_list|<
name|TimelineDoc
argument_list|>
name|result
init|=
name|queryDocuments
argument_list|(
name|collectionName
argument_list|,
name|context
argument_list|,
name|timelineDocClass
argument_list|,
name|DEFAULT_DOCUMENTS_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoDocumentFoundException
argument_list|(
literal|"No documents were found while "
operator|+
literal|"querying Collection : "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
DECL|method|queryDocuments (String collectionName, TimelineReaderContext context, final Class<TimelineDoc> docClass, final long maxDocumentsSize)
specifier|private
name|List
argument_list|<
name|TimelineDoc
argument_list|>
name|queryDocuments
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TimelineReaderContext
name|context
parameter_list|,
specifier|final
name|Class
argument_list|<
name|TimelineDoc
argument_list|>
name|docClass
parameter_list|,
specifier|final
name|long
name|maxDocumentsSize
parameter_list|)
block|{
specifier|final
name|String
name|sqlQuery
init|=
name|buildQueryWithPredicates
argument_list|(
name|context
argument_list|,
name|collectionName
argument_list|,
name|maxDocumentsSize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Querying Collection : {} , with query {}"
argument_list|,
name|collectionName
argument_list|,
name|sqlQuery
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|queryDocuments
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|COLLECTION_LINK
argument_list|,
name|databaseName
argument_list|,
name|collectionName
argument_list|)
argument_list|,
name|sqlQuery
argument_list|,
operator|new
name|FeedOptions
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|FeedResponse
operator|::
name|getResults
argument_list|)
comment|// Map the page to the list of documents
operator|.
name|concatMap
argument_list|(
name|Observable
operator|::
name|from
argument_list|)
operator|.
name|map
argument_list|(
name|document
lambda|->
block|{
name|TimelineDoc
name|resultDoc
init|=
name|document
operator|.
name|toObject
argument_list|(
name|docClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultDoc
operator|.
name|getCreatedTime
argument_list|()
operator|==
literal|0
operator|&&
name|document
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resultDoc
operator|.
name|setCreatedTime
argument_list|(
name|document
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resultDoc
return|;
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|subscribeOn
argument_list|(
name|schedulerForBlockingWork
argument_list|)
operator|.
name|toBlocking
argument_list|()
operator|.
name|single
argument_list|()
return|;
block|}
DECL|method|buildQueryWithPredicates (TimelineReaderContext context, String collectionName, long size)
specifier|private
name|String
name|buildQueryWithPredicates
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|StringBuilder
name|queryStrBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|SELECT_ALL_FROM_COLLECTION
argument_list|,
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|SELECT_TOP_FROM_COLLECTION
argument_list|,
name|size
argument_list|,
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addPredicates
argument_list|(
name|context
argument_list|,
name|collectionName
argument_list|,
name|queryStrBuilder
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addPredicates (TimelineReaderContext context, String collectionName, StringBuilder queryStrBuilder)
name|String
name|addPredicates
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|StringBuilder
name|queryStrBuilder
parameter_list|)
block|{
name|boolean
name|hasPredicate
init|=
literal|false
decl_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|WHERE_CLAUSE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|)
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_ID
argument_list|,
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|context
operator|.
name|getUserId
argument_list|()
argument_list|)
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_ID
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|)
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_ID
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_ID
argument_list|,
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|context
operator|.
name|getEntityId
argument_list|()
argument_list|)
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_ID
argument_list|,
name|context
operator|.
name|getEntityId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_ID
argument_list|,
name|context
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
name|hasPredicate
operator|=
literal|true
expr_stmt|;
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINS_FUNC_FOR_TYPE
argument_list|,
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasPredicate
condition|)
block|{
name|queryStrBuilder
operator|.
name|append
argument_list|(
name|ORDER_BY_CLAUSE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CosmosDB Sql Query with predicates : {}"
argument_list|,
name|queryStrBuilder
argument_list|)
expr_stmt|;
return|return
name|queryStrBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The TimelineReaderContext does not "
operator|+
literal|"have enough information to query documents for Collection : "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing Cosmos DB Reader Async Client..."
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|addShutdownHook ()
specifier|private
name|void
name|addShutdownHook
parameter_list|()
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

