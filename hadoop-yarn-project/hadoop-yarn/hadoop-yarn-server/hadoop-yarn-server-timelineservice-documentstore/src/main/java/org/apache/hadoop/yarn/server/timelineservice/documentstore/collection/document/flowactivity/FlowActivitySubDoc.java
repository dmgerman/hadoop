begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.collection.document.flowactivity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowactivity
package|;
end_package

begin_comment
comment|/**  * This is a sub doc which represents each flow.  */
end_comment

begin_class
DECL|class|FlowActivitySubDoc
specifier|public
class|class
name|FlowActivitySubDoc
block|{
DECL|field|flowName
specifier|private
name|String
name|flowName
decl_stmt|;
DECL|field|flowVersion
specifier|private
name|String
name|flowVersion
decl_stmt|;
DECL|field|flowRunId
specifier|private
name|long
name|flowRunId
decl_stmt|;
DECL|method|FlowActivitySubDoc ()
specifier|public
name|FlowActivitySubDoc
parameter_list|()
block|{   }
DECL|method|FlowActivitySubDoc (String flowName, String flowVersion, long flowRunId)
specifier|public
name|FlowActivitySubDoc
parameter_list|(
name|String
name|flowName
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|long
name|flowRunId
parameter_list|)
block|{
name|this
operator|.
name|flowName
operator|=
name|flowName
expr_stmt|;
name|this
operator|.
name|flowVersion
operator|=
name|flowVersion
expr_stmt|;
name|this
operator|.
name|flowRunId
operator|=
name|flowRunId
expr_stmt|;
block|}
DECL|method|getFlowName ()
specifier|public
name|String
name|getFlowName
parameter_list|()
block|{
return|return
name|flowName
return|;
block|}
DECL|method|getFlowVersion ()
specifier|public
name|String
name|getFlowVersion
parameter_list|()
block|{
return|return
name|flowVersion
return|;
block|}
DECL|method|getFlowRunId ()
specifier|public
name|long
name|getFlowRunId
parameter_list|()
block|{
return|return
name|flowRunId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|flowVersion
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
call|(
name|int
call|)
argument_list|(
literal|31
operator|*
name|result
operator|+
name|flowRunId
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Only check if type and id are equal
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|FlowActivitySubDoc
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FlowActivitySubDoc
name|m
init|=
operator|(
name|FlowActivitySubDoc
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|flowVersion
operator|.
name|equalsIgnoreCase
argument_list|(
name|m
operator|.
name|getFlowVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|flowRunId
operator|==
name|m
operator|.
name|getFlowRunId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

