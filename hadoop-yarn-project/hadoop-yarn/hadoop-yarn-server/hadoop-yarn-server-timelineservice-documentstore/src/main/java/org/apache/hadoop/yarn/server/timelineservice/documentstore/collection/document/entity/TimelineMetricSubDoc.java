begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.collection.document.entity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetricOperation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * This class represents a Sub Document for {@link TimelineMetric} that will be  * used when creating new {@link TimelineEntityDocument}.  */
end_comment

begin_class
DECL|class|TimelineMetricSubDoc
specifier|public
class|class
name|TimelineMetricSubDoc
block|{
DECL|field|timelineMetric
specifier|private
specifier|final
name|TimelineMetric
name|timelineMetric
decl_stmt|;
DECL|field|valid
specifier|private
name|boolean
name|valid
decl_stmt|;
DECL|field|singleDataTimestamp
specifier|private
name|long
name|singleDataTimestamp
decl_stmt|;
DECL|field|singleDataValue
specifier|private
name|Number
name|singleDataValue
init|=
literal|0
decl_stmt|;
DECL|method|TimelineMetricSubDoc ()
specifier|public
name|TimelineMetricSubDoc
parameter_list|()
block|{
name|this
operator|.
name|timelineMetric
operator|=
operator|new
name|TimelineMetric
argument_list|()
expr_stmt|;
block|}
DECL|method|TimelineMetricSubDoc (TimelineMetric timelineMetric)
specifier|public
name|TimelineMetricSubDoc
parameter_list|(
name|TimelineMetric
name|timelineMetric
parameter_list|)
block|{
name|this
operator|.
name|timelineMetric
operator|=
name|timelineMetric
expr_stmt|;
name|this
operator|.
name|valid
operator|=
name|timelineMetric
operator|.
name|isValid
argument_list|()
expr_stmt|;
if|if
condition|(
name|timelineMetric
operator|.
name|getType
argument_list|()
operator|==
name|TimelineMetric
operator|.
name|Type
operator|.
name|SINGLE_VALUE
operator|&&
name|timelineMetric
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|singleDataTimestamp
operator|=
name|timelineMetric
operator|.
name|getSingleDataTimestamp
argument_list|()
expr_stmt|;
name|this
operator|.
name|singleDataValue
operator|=
name|timelineMetric
operator|.
name|getSingleDataValue
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the real time aggregation operation of this metric.    *    * @return Real time aggregation operation    */
DECL|method|getRealtimeAggregationOp ()
specifier|public
name|TimelineMetricOperation
name|getRealtimeAggregationOp
parameter_list|()
block|{
return|return
name|timelineMetric
operator|.
name|getRealtimeAggregationOp
argument_list|()
return|;
block|}
comment|/**    * Set the real time aggregation operation of this metric.    *    * @param op A timeline metric operation that the metric should perform on    *           real time aggregations    */
DECL|method|setRealtimeAggregationOp ( final TimelineMetricOperation op)
specifier|public
name|void
name|setRealtimeAggregationOp
parameter_list|(
specifier|final
name|TimelineMetricOperation
name|op
parameter_list|)
block|{
name|timelineMetric
operator|.
name|setRealtimeAggregationOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|timelineMetric
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|setId (String metricId)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|metricId
parameter_list|)
block|{
name|timelineMetric
operator|.
name|setId
argument_list|(
name|metricId
argument_list|)
expr_stmt|;
block|}
DECL|method|setSingleDataTimestamp (long singleDataTimestamp)
specifier|public
name|void
name|setSingleDataTimestamp
parameter_list|(
name|long
name|singleDataTimestamp
parameter_list|)
block|{
name|this
operator|.
name|singleDataTimestamp
operator|=
name|singleDataTimestamp
expr_stmt|;
block|}
comment|/**    * Get single data timestamp of the metric.    *    * @return the single data timestamp    */
DECL|method|getSingleDataTimestamp ()
specifier|public
name|long
name|getSingleDataTimestamp
parameter_list|()
block|{
if|if
condition|(
name|timelineMetric
operator|.
name|getType
argument_list|()
operator|==
name|TimelineMetric
operator|.
name|Type
operator|.
name|SINGLE_VALUE
condition|)
block|{
return|return
name|singleDataTimestamp
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get single data value of the metric.    *    * @return the single data value    */
DECL|method|getSingleDataValue ()
specifier|public
name|Number
name|getSingleDataValue
parameter_list|()
block|{
if|if
condition|(
name|timelineMetric
operator|.
name|getType
argument_list|()
operator|==
name|TimelineMetric
operator|.
name|Type
operator|.
name|SINGLE_VALUE
condition|)
block|{
return|return
name|singleDataValue
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|setSingleDataValue (Number singleDataValue)
specifier|public
name|void
name|setSingleDataValue
parameter_list|(
name|Number
name|singleDataValue
parameter_list|)
block|{
name|this
operator|.
name|singleDataValue
operator|=
name|singleDataValue
expr_stmt|;
block|}
DECL|method|getValues ()
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|timelineMetric
operator|.
name|getValues
argument_list|()
return|;
block|}
DECL|method|setValues (Map<Long, Number> vals)
specifier|public
name|void
name|setValues
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|vals
parameter_list|)
block|{
name|timelineMetric
operator|.
name|setValues
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
comment|// required by JAXB
DECL|method|getValuesJAXB ()
specifier|public
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|getValuesJAXB
parameter_list|()
block|{
return|return
name|timelineMetric
operator|.
name|getValuesJAXB
argument_list|()
return|;
block|}
DECL|method|getType ()
specifier|public
name|TimelineMetric
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|timelineMetric
operator|.
name|getType
argument_list|()
return|;
block|}
DECL|method|setType (TimelineMetric.Type metricType)
specifier|public
name|void
name|setType
parameter_list|(
name|TimelineMetric
operator|.
name|Type
name|metricType
parameter_list|)
block|{
name|timelineMetric
operator|.
name|setType
argument_list|(
name|metricType
argument_list|)
expr_stmt|;
block|}
DECL|method|setValid (boolean valid)
specifier|public
name|void
name|setValid
parameter_list|(
name|boolean
name|valid
parameter_list|)
block|{
name|this
operator|.
name|valid
operator|=
name|valid
expr_stmt|;
block|}
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|(
name|timelineMetric
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|timelineMetric
operator|.
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|timelineMetric
operator|.
name|getType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Only check if timestamp and id are equal
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|TimelineMetricSubDoc
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimelineMetricSubDoc
name|otherTimelineMetric
init|=
operator|(
name|TimelineMetricSubDoc
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|timelineMetric
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|otherTimelineMetric
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|timelineMetric
operator|.
name|getType
argument_list|()
operator|==
name|otherTimelineMetric
operator|.
name|getType
argument_list|()
return|;
block|}
DECL|method|fetchTimelineMetric ()
specifier|public
name|TimelineMetric
name|fetchTimelineMetric
parameter_list|()
block|{
return|return
name|timelineMetric
return|;
block|}
block|}
end_class

end_unit

