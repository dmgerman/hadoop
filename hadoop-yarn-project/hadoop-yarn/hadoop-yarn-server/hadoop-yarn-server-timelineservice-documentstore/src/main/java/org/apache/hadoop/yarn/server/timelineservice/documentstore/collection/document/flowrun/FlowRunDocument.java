begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.collection.document.flowrun
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowrun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetricOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|TimelineDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
operator|.
name|TimelineMetricSubDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This doc represents the flow run information for every job.  */
end_comment

begin_class
DECL|class|FlowRunDocument
specifier|public
class|class
name|FlowRunDocument
implements|implements
name|TimelineDocument
argument_list|<
name|FlowRunDocument
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FlowRunDocument
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
init|=
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|flowName
specifier|private
name|String
name|flowName
decl_stmt|;
DECL|field|flowRunId
specifier|private
name|Long
name|flowRunId
decl_stmt|;
DECL|field|flowVersion
specifier|private
name|String
name|flowVersion
decl_stmt|;
DECL|field|minStartTime
specifier|private
name|long
name|minStartTime
decl_stmt|;
DECL|field|maxEndTime
specifier|private
name|long
name|maxEndTime
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetricSubDoc
argument_list|>
DECL|field|metrics
name|metrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FlowRunDocument ()
specifier|public
name|FlowRunDocument
parameter_list|()
block|{   }
DECL|method|FlowRunDocument (TimelineCollectorContext collectorContext, Set<TimelineMetric> metrics)
specifier|public
name|FlowRunDocument
parameter_list|(
name|TimelineCollectorContext
name|collectorContext
parameter_list|,
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|collectorContext
operator|.
name|getClusterId
argument_list|()
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|collectorContext
operator|.
name|getUserId
argument_list|()
expr_stmt|;
name|this
operator|.
name|flowName
operator|=
name|collectorContext
operator|.
name|getFlowName
argument_list|()
expr_stmt|;
name|this
operator|.
name|flowRunId
operator|=
name|collectorContext
operator|.
name|getFlowRunId
argument_list|()
expr_stmt|;
name|transformMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
DECL|method|transformMetrics (Set<TimelineMetric> timelineMetrics)
specifier|private
name|void
name|transformMetrics
parameter_list|(
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|timelineMetrics
parameter_list|)
block|{
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|timelineMetrics
control|)
block|{
name|TimelineMetricSubDoc
name|metricSubDoc
init|=
operator|new
name|TimelineMetricSubDoc
argument_list|(
name|metric
argument_list|)
decl_stmt|;
name|this
operator|.
name|metrics
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getId
argument_list|()
argument_list|,
name|metricSubDoc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge the {@link FlowRunDocument} that is passed with the current    * document for upsert.    *    * @param flowRunDoc    *          that has to be merged    */
annotation|@
name|Override
DECL|method|merge (FlowRunDocument flowRunDoc)
specifier|public
name|void
name|merge
parameter_list|(
name|FlowRunDocument
name|flowRunDoc
parameter_list|)
block|{
if|if
condition|(
name|flowRunDoc
operator|.
name|getMinStartTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|minStartTime
operator|=
name|flowRunDoc
operator|.
name|getMinStartTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flowRunDoc
operator|.
name|getMaxEndTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|maxEndTime
operator|=
name|flowRunDoc
operator|.
name|getMaxEndTime
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|clusterId
operator|=
name|flowRunDoc
operator|.
name|getClusterId
argument_list|()
expr_stmt|;
name|this
operator|.
name|flowName
operator|=
name|flowRunDoc
operator|.
name|getFlowName
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|flowRunDoc
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|flowRunDoc
operator|.
name|getUsername
argument_list|()
expr_stmt|;
name|this
operator|.
name|flowVersion
operator|=
name|flowRunDoc
operator|.
name|getFlowVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|flowRunId
operator|=
name|flowRunDoc
operator|.
name|getFlowRunId
argument_list|()
expr_stmt|;
name|aggregateMetrics
argument_list|(
name|flowRunDoc
operator|.
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|aggregateMetrics ( Map<String, TimelineMetricSubDoc> metricSubDocMap)
specifier|private
name|void
name|aggregateMetrics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetricSubDoc
argument_list|>
name|metricSubDocMap
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TimelineMetricSubDoc
argument_list|>
name|metricEntry
range|:
name|metricSubDocMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|metricId
init|=
name|metricEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|TimelineMetricSubDoc
name|metricValue
init|=
name|metricEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|metrics
operator|.
name|containsKey
argument_list|(
name|metricId
argument_list|)
condition|)
block|{
name|TimelineMetric
name|incomingMetric
init|=
name|metricValue
operator|.
name|fetchTimelineMetric
argument_list|()
decl_stmt|;
name|TimelineMetric
name|baseMetric
init|=
name|this
operator|.
name|metrics
operator|.
name|get
argument_list|(
name|metricId
argument_list|)
operator|.
name|fetchTimelineMetric
argument_list|()
decl_stmt|;
if|if
condition|(
name|incomingMetric
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|baseMetric
operator|=
name|aggregate
argument_list|(
name|incomingMetric
argument_list|,
name|baseMetric
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|put
argument_list|(
name|metricId
argument_list|,
operator|new
name|TimelineMetricSubDoc
argument_list|(
name|baseMetric
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No incoming metric to aggregate for : {}"
argument_list|,
name|baseMetric
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|metrics
operator|.
name|put
argument_list|(
name|metricId
argument_list|,
name|metricValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|aggregate (TimelineMetric incomingMetric, TimelineMetric baseMetric)
specifier|private
name|TimelineMetric
name|aggregate
parameter_list|(
name|TimelineMetric
name|incomingMetric
parameter_list|,
name|TimelineMetric
name|baseMetric
parameter_list|)
block|{
switch|switch
condition|(
name|baseMetric
operator|.
name|getRealtimeAggregationOp
argument_list|()
condition|)
block|{
case|case
name|SUM
case|:
name|baseMetric
operator|=
name|TimelineMetricOperation
operator|.
name|SUM
operator|.
name|aggregate
argument_list|(
name|incomingMetric
argument_list|,
name|baseMetric
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|AVG
case|:
name|baseMetric
operator|=
name|TimelineMetricOperation
operator|.
name|AVG
operator|.
name|aggregate
argument_list|(
name|incomingMetric
argument_list|,
name|baseMetric
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|baseMetric
operator|=
name|TimelineMetricOperation
operator|.
name|MAX
operator|.
name|aggregate
argument_list|(
name|incomingMetric
argument_list|,
name|baseMetric
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPLACE
case|:
name|baseMetric
operator|=
name|TimelineMetricOperation
operator|.
name|REPLACE
operator|.
name|aggregate
argument_list|(
name|incomingMetric
argument_list|,
name|baseMetric
argument_list|,
literal|null
argument_list|)
expr_stmt|;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown TimelineMetricOperation: {}"
argument_list|,
name|baseMetric
operator|.
name|getRealtimeAggregationOp
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|baseMetric
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String id)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|setClusterId (String clusterId)
specifier|public
name|void
name|setClusterId
parameter_list|(
name|String
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getFlowName ()
specifier|public
name|String
name|getFlowName
parameter_list|()
block|{
return|return
name|flowName
return|;
block|}
DECL|method|setFlowName (String flowName)
specifier|public
name|void
name|setFlowName
parameter_list|(
name|String
name|flowName
parameter_list|)
block|{
name|this
operator|.
name|flowName
operator|=
name|flowName
expr_stmt|;
block|}
DECL|method|getFlowRunId ()
specifier|public
name|Long
name|getFlowRunId
parameter_list|()
block|{
return|return
name|flowRunId
return|;
block|}
DECL|method|setFlowRunId (Long flowRunId)
specifier|public
name|void
name|setFlowRunId
parameter_list|(
name|Long
name|flowRunId
parameter_list|)
block|{
name|this
operator|.
name|flowRunId
operator|=
name|flowRunId
expr_stmt|;
block|}
DECL|method|getMetrics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetricSubDoc
argument_list|>
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|method|setMetrics (Map<String, TimelineMetricSubDoc> metrics)
specifier|public
name|void
name|setMetrics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetricSubDoc
argument_list|>
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|.
name|putAll
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
DECL|method|fetchTimelineMetrics ()
specifier|public
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|fetchTimelineMetrics
parameter_list|()
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metricSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetricSubDoc
name|metricSubDoc
range|:
name|metrics
operator|.
name|values
argument_list|()
control|)
block|{
name|metricSet
operator|.
name|add
argument_list|(
name|metricSubDoc
operator|.
name|fetchTimelineMetric
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metricSet
return|;
block|}
DECL|method|getMinStartTime ()
specifier|public
name|long
name|getMinStartTime
parameter_list|()
block|{
return|return
name|minStartTime
return|;
block|}
DECL|method|setMinStartTime (long minStartTime)
specifier|public
name|void
name|setMinStartTime
parameter_list|(
name|long
name|minStartTime
parameter_list|)
block|{
name|this
operator|.
name|minStartTime
operator|=
name|minStartTime
expr_stmt|;
block|}
DECL|method|getMaxEndTime ()
specifier|public
name|long
name|getMaxEndTime
parameter_list|()
block|{
return|return
name|maxEndTime
return|;
block|}
DECL|method|setMaxEndTime (long maxEndTime)
specifier|public
name|void
name|setMaxEndTime
parameter_list|(
name|long
name|maxEndTime
parameter_list|)
block|{
name|this
operator|.
name|maxEndTime
operator|=
name|maxEndTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getCreatedTime ()
specifier|public
name|long
name|getCreatedTime
parameter_list|()
block|{
return|return
name|minStartTime
return|;
block|}
annotation|@
name|Override
DECL|method|setCreatedTime (long createdTime)
specifier|public
name|void
name|setCreatedTime
parameter_list|(
name|long
name|createdTime
parameter_list|)
block|{
if|if
condition|(
name|minStartTime
operator|==
literal|0
condition|)
block|{
name|minStartTime
operator|=
name|createdTime
expr_stmt|;
block|}
block|}
DECL|method|getFlowVersion ()
specifier|public
name|String
name|getFlowVersion
parameter_list|()
block|{
return|return
name|flowVersion
return|;
block|}
DECL|method|setFlowVersion (String flowVersion)
specifier|public
name|void
name|setFlowVersion
parameter_list|(
name|String
name|flowVersion
parameter_list|)
block|{
name|this
operator|.
name|flowVersion
operator|=
name|flowVersion
expr_stmt|;
block|}
block|}
end_class

end_unit

