begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowActivityEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowRunEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|DocumentStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
operator|.
name|TimelineEntityDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowactivity
operator|.
name|FlowActivityDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowactivity
operator|.
name|FlowActivitySubDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowrun
operator|.
name|FlowRunDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreVendor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This is a generic Collection reader for reading documents belonging to a  * {@link CollectionType} under a specific {@link DocumentStoreVendor} backend.  */
end_comment

begin_class
DECL|class|TimelineCollectionReader
specifier|public
class|class
name|TimelineCollectionReader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineCollectionReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentStoreReader
argument_list|<
name|TimelineEntityDocument
argument_list|>
DECL|field|genericEntityDocReader
name|genericEntityDocReader
decl_stmt|;
specifier|private
specifier|final
name|DocumentStoreReader
argument_list|<
name|FlowRunDocument
argument_list|>
DECL|field|flowRunDocReader
name|flowRunDocReader
decl_stmt|;
specifier|private
specifier|final
name|DocumentStoreReader
argument_list|<
name|FlowActivityDocument
argument_list|>
DECL|field|flowActivityDocReader
name|flowActivityDocReader
decl_stmt|;
DECL|method|TimelineCollectionReader ( Configuration conf)
specifier|public
name|TimelineCollectionReader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing TimelineCollectionReader..."
argument_list|)
expr_stmt|;
name|genericEntityDocReader
operator|=
name|DocumentStoreFactory
operator|.
name|createDocumentStoreReader
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|flowRunDocReader
operator|=
name|DocumentStoreFactory
operator|.
name|createDocumentStoreReader
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|flowActivityDocReader
operator|=
name|DocumentStoreFactory
operator|.
name|createDocumentStoreReader
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read a document from {@link DocumentStoreVendor} backend for    * a {@link CollectionType}.    * @param context    *               of the timeline reader    * @return TimelineEntityDocument as response    * @throws IOException on error while reading    */
DECL|method|readDocument ( TimelineReaderContext context)
specifier|public
name|TimelineEntityDocument
name|readDocument
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetching document for entity type {}"
argument_list|,
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|YARN_APPLICATION
case|:
return|return
name|genericEntityDocReader
operator|.
name|readDocument
argument_list|(
name|CollectionType
operator|.
name|APPLICATION
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|TimelineEntityDocument
operator|.
name|class
argument_list|)
return|;
case|case
name|YARN_FLOW_RUN
case|:
name|FlowRunDocument
name|flowRunDoc
init|=
name|flowRunDocReader
operator|.
name|readDocument
argument_list|(
name|CollectionType
operator|.
name|FLOW_RUN
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|FlowRunDocument
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlowRunEntity
name|flowRun
init|=
name|createFlowRunEntity
argument_list|(
name|flowRunDoc
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimelineEntityDocument
argument_list|(
name|flowRun
argument_list|)
return|;
case|case
name|YARN_FLOW_ACTIVITY
case|:
name|FlowActivityDocument
name|flowActivityDoc
init|=
name|flowActivityDocReader
operator|.
name|readDocument
argument_list|(
name|CollectionType
operator|.
name|FLOW_RUN
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|FlowActivityDocument
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlowActivityEntity
name|flowActivity
init|=
name|createFlowActivityEntity
argument_list|(
name|context
argument_list|,
name|flowActivityDoc
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimelineEntityDocument
argument_list|(
name|flowActivity
argument_list|)
return|;
default|default:
return|return
name|genericEntityDocReader
operator|.
name|readDocument
argument_list|(
name|CollectionType
operator|.
name|ENTITY
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|TimelineEntityDocument
operator|.
name|class
argument_list|)
return|;
block|}
block|}
comment|/**    * Read a list of  documents from {@link DocumentStoreVendor} backend for    * a {@link CollectionType}.    * @param context    *               of the timeline reader    * @param documentsSize    *               to limit    * @return List of TimelineEntityDocument as response    * @throws IOException on error while reading    */
DECL|method|readDocuments ( TimelineReaderContext context, long documentsSize)
specifier|public
name|List
argument_list|<
name|TimelineEntityDocument
argument_list|>
name|readDocuments
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|long
name|documentsSize
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TimelineEntityDocument
argument_list|>
name|entityDocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetching documents for entity type {}"
argument_list|,
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|YARN_APPLICATION
case|:
return|return
name|genericEntityDocReader
operator|.
name|readDocumentList
argument_list|(
name|CollectionType
operator|.
name|APPLICATION
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|TimelineEntityDocument
operator|.
name|class
argument_list|,
name|documentsSize
argument_list|)
return|;
case|case
name|YARN_FLOW_RUN
case|:
name|List
argument_list|<
name|FlowRunDocument
argument_list|>
name|flowRunDocs
init|=
name|flowRunDocReader
operator|.
name|readDocumentList
argument_list|(
name|CollectionType
operator|.
name|FLOW_RUN
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|FlowRunDocument
operator|.
name|class
argument_list|,
name|documentsSize
argument_list|)
decl_stmt|;
for|for
control|(
name|FlowRunDocument
name|flowRunDoc
range|:
name|flowRunDocs
control|)
block|{
name|entityDocs
operator|.
name|add
argument_list|(
operator|new
name|TimelineEntityDocument
argument_list|(
name|createFlowRunEntity
argument_list|(
name|flowRunDoc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entityDocs
return|;
case|case
name|YARN_FLOW_ACTIVITY
case|:
name|List
argument_list|<
name|FlowActivityDocument
argument_list|>
name|flowActivityDocs
init|=
name|flowActivityDocReader
operator|.
name|readDocumentList
argument_list|(
name|CollectionType
operator|.
name|FLOW_ACTIVITY
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|FlowActivityDocument
operator|.
name|class
argument_list|,
name|documentsSize
argument_list|)
decl_stmt|;
for|for
control|(
name|FlowActivityDocument
name|flowActivityDoc
range|:
name|flowActivityDocs
control|)
block|{
name|entityDocs
operator|.
name|add
argument_list|(
operator|new
name|TimelineEntityDocument
argument_list|(
name|createFlowActivityEntity
argument_list|(
name|context
argument_list|,
name|flowActivityDoc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entityDocs
return|;
default|default:
return|return
name|genericEntityDocReader
operator|.
name|readDocumentList
argument_list|(
name|CollectionType
operator|.
name|ENTITY
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|,
name|TimelineEntityDocument
operator|.
name|class
argument_list|,
name|documentsSize
argument_list|)
return|;
block|}
block|}
comment|/**    * Fetches the list of Entity Types i.e (YARN_CONTAINER,    * YARN_APPLICATION_ATTEMPT etc.) for an application Id.    * @param context    *               of the timeline reader    * @return List of EntityTypes as response    */
DECL|method|fetchEntityTypes ( TimelineReaderContext context)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|fetchEntityTypes
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetching all entity-types for appId : {}"
argument_list|,
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|genericEntityDocReader
operator|.
name|fetchEntityTypes
argument_list|(
name|CollectionType
operator|.
name|ENTITY
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createFlowActivityEntity ( TimelineReaderContext context, FlowActivityDocument flowActivityDoc)
specifier|private
name|FlowActivityEntity
name|createFlowActivityEntity
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|FlowActivityDocument
name|flowActivityDoc
parameter_list|)
block|{
name|FlowActivityEntity
name|flowActivity
init|=
operator|new
name|FlowActivityEntity
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|flowActivityDoc
operator|.
name|getDayTimestamp
argument_list|()
argument_list|,
name|flowActivityDoc
operator|.
name|getUser
argument_list|()
argument_list|,
name|flowActivityDoc
operator|.
name|getFlowName
argument_list|()
argument_list|)
decl_stmt|;
name|flowActivity
operator|.
name|setId
argument_list|(
name|flowActivityDoc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the list of run ids along with the version that are associated with
comment|// this flow on this day
for|for
control|(
name|FlowActivitySubDoc
name|activity
range|:
name|flowActivityDoc
operator|.
name|getFlowActivities
argument_list|()
control|)
block|{
name|FlowRunEntity
name|flowRunEntity
init|=
operator|new
name|FlowRunEntity
argument_list|()
decl_stmt|;
name|flowRunEntity
operator|.
name|setUser
argument_list|(
name|flowActivityDoc
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|flowRunEntity
operator|.
name|setName
argument_list|(
name|activity
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|flowRunEntity
operator|.
name|setRunId
argument_list|(
name|activity
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|flowRunEntity
operator|.
name|setVersion
argument_list|(
name|activity
operator|.
name|getFlowVersion
argument_list|()
argument_list|)
expr_stmt|;
name|flowRunEntity
operator|.
name|setId
argument_list|(
name|flowRunEntity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|flowActivity
operator|.
name|addFlowRun
argument_list|(
name|flowRunEntity
argument_list|)
expr_stmt|;
block|}
name|flowActivity
operator|.
name|getInfo
argument_list|()
operator|.
name|put
argument_list|(
name|TimelineReaderUtils
operator|.
name|FROMID_KEY
argument_list|,
name|flowActivityDoc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|flowActivity
operator|.
name|setCreatedTime
argument_list|(
name|flowActivityDoc
operator|.
name|getDayTimestamp
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|flowActivity
return|;
block|}
DECL|method|createFlowRunEntity (FlowRunDocument flowRunDoc)
specifier|private
name|FlowRunEntity
name|createFlowRunEntity
parameter_list|(
name|FlowRunDocument
name|flowRunDoc
parameter_list|)
block|{
name|FlowRunEntity
name|flowRun
init|=
operator|new
name|FlowRunEntity
argument_list|()
decl_stmt|;
name|flowRun
operator|.
name|setRunId
argument_list|(
name|flowRunDoc
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|flowRun
operator|.
name|setUser
argument_list|(
name|flowRunDoc
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|flowRun
operator|.
name|setName
argument_list|(
name|flowRunDoc
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the start time
if|if
condition|(
name|flowRunDoc
operator|.
name|getMinStartTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|flowRun
operator|.
name|setStartTime
argument_list|(
name|flowRunDoc
operator|.
name|getMinStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read the end time if available
if|if
condition|(
name|flowRunDoc
operator|.
name|getMaxEndTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|flowRun
operator|.
name|setMaxEndTime
argument_list|(
name|flowRunDoc
operator|.
name|getMaxEndTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read the flow version
if|if
condition|(
operator|!
name|DocumentStoreUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|flowRunDoc
operator|.
name|getFlowVersion
argument_list|()
argument_list|)
condition|)
block|{
name|flowRun
operator|.
name|setVersion
argument_list|(
name|flowRunDoc
operator|.
name|getFlowVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|flowRun
operator|.
name|setMetrics
argument_list|(
name|flowRunDoc
operator|.
name|fetchTimelineMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|flowRun
operator|.
name|setId
argument_list|(
name|flowRunDoc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|flowRun
operator|.
name|getInfo
argument_list|()
operator|.
name|put
argument_list|(
name|TimelineReaderUtils
operator|.
name|FROMID_KEY
argument_list|,
name|flowRunDoc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|flowRun
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|genericEntityDocReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|flowRunDocReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|flowActivityDocReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

