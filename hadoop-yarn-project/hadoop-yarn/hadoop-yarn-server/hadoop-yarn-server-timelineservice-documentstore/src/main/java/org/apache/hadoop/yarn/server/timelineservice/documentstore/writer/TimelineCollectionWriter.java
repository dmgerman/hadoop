begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.writer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|writer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|TimelineDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreVendor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|metrics
operator|.
name|PerNodeAggTimelineCollectorMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This is a generic Collection Writer that can be used for writing documents  * belonging to different {@link CollectionType} under a specific  * {@link DocumentStoreVendor} backend.  */
end_comment

begin_class
DECL|class|TimelineCollectionWriter
specifier|public
class|class
name|TimelineCollectionWriter
parameter_list|<
name|Document
extends|extends
name|TimelineDocument
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineCollectionWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DOCUMENT_BUFFER_SIZE_CONF
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_BUFFER_SIZE_CONF
init|=
literal|"yarn.timeline-service.document-buffer.size"
decl_stmt|;
DECL|field|DEFAULT_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|AWAIT_TIMEOUT_SECS
specifier|private
specifier|static
specifier|final
name|int
name|AWAIT_TIMEOUT_SECS
init|=
literal|5
decl_stmt|;
DECL|field|METRICS
specifier|private
specifier|static
specifier|final
name|PerNodeAggTimelineCollectorMetrics
name|METRICS
init|=
name|PerNodeAggTimelineCollectorMetrics
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|collectionType
specifier|private
specifier|final
name|CollectionType
name|collectionType
decl_stmt|;
DECL|field|documentStoreWriter
specifier|private
specifier|final
name|DocumentStoreWriter
argument_list|<
name|Document
argument_list|>
name|documentStoreWriter
decl_stmt|;
DECL|field|documentsBuffer
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|documentsBuffer
decl_stmt|;
DECL|field|maxBufferSize
specifier|private
specifier|final
name|int
name|maxBufferSize
decl_stmt|;
DECL|field|scheduledDocumentsFlusher
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduledDocumentsFlusher
decl_stmt|;
DECL|field|documentsBufferFullFlusher
specifier|private
specifier|final
name|ExecutorService
name|documentsBufferFullFlusher
decl_stmt|;
DECL|method|TimelineCollectionWriter (CollectionType collectionType, Configuration conf)
specifier|public
name|TimelineCollectionWriter
parameter_list|(
name|CollectionType
name|collectionType
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing TimelineCollectionWriter for collection type : {}"
argument_list|,
name|collectionType
argument_list|)
expr_stmt|;
name|int
name|flushIntervalSecs
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
argument_list|)
decl_stmt|;
name|maxBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DOCUMENT_BUFFER_SIZE_CONF
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|documentsBuffer
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|maxBufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|collectionType
operator|=
name|collectionType
expr_stmt|;
name|documentStoreWriter
operator|=
name|DocumentStoreFactory
operator|.
name|createDocumentStoreWriter
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduledDocumentsFlusher
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|scheduledDocumentsFlusher
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|::
name|flush
argument_list|,
name|flushIntervalSecs
argument_list|,
name|flushIntervalSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|documentsBufferFullFlusher
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|writeDocument (Document timelineDocument)
specifier|public
name|void
name|writeDocument
parameter_list|(
name|Document
name|timelineDocument
parameter_list|)
block|{
comment|/*      * The DocumentBuffer is used to buffer the most frequently used      * documents for performing upserts on them, whenever either due to      * buffer gets fulled or the scheduledDocumentsFlusher      * invokes flush() periodically, all the buffered documents would be written      * to DocumentStore in a background thread.      */
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|documentsBuffer
init|)
block|{
comment|//if buffer is full copy to flushBuffer in order to flush
if|if
condition|(
name|documentsBuffer
operator|.
name|size
argument_list|()
operator|==
name|maxBufferSize
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|flushedBuffer
init|=
name|copyToFlushBuffer
argument_list|()
decl_stmt|;
comment|//flush all documents from flushBuffer in background
name|documentsBufferFullFlusher
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|flush
argument_list|(
name|flushedBuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Document
name|prevDocument
init|=
name|documentsBuffer
operator|.
name|get
argument_list|(
name|timelineDocument
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// check if Document exists inside documentsBuffer
if|if
condition|(
name|prevDocument
operator|!=
literal|null
condition|)
block|{
name|prevDocument
operator|.
name|merge
argument_list|(
name|timelineDocument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// else treat this as a new document
name|prevDocument
operator|=
name|timelineDocument
expr_stmt|;
block|}
name|documentsBuffer
operator|.
name|put
argument_list|(
name|prevDocument
operator|.
name|getId
argument_list|()
argument_list|,
name|prevDocument
argument_list|)
expr_stmt|;
block|}
name|METRICS
operator|.
name|addAsyncPutEntitiesLatency
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|copyToFlushBuffer ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|copyToFlushBuffer
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|flushBuffer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|documentsBuffer
init|)
block|{
if|if
condition|(
name|documentsBuffer
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|flushBuffer
operator|.
name|putAll
argument_list|(
name|documentsBuffer
argument_list|)
expr_stmt|;
name|documentsBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|flushBuffer
return|;
block|}
DECL|method|flush (Map<String, Document> flushBuffer)
specifier|private
name|void
name|flush
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|flushBuffer
parameter_list|)
block|{
for|for
control|(
name|Document
name|document
range|:
name|flushBuffer
operator|.
name|values
argument_list|()
control|)
block|{
name|documentStoreWriter
operator|.
name|writeDocument
argument_list|(
name|document
argument_list|,
name|collectionType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|flush
argument_list|(
name|copyToFlushBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduledDocumentsFlusher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|documentsBufferFullFlusher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|scheduledDocumentsFlusher
operator|.
name|awaitTermination
argument_list|(
name|AWAIT_TIMEOUT_SECS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|documentsBufferFullFlusher
operator|.
name|awaitTermination
argument_list|(
name|AWAIT_TIMEOUT_SECS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|documentStoreWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

