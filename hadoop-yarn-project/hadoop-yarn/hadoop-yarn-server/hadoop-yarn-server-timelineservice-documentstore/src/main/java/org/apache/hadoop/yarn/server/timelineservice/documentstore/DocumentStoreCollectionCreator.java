begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreVendor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|writer
operator|.
name|DocumentStoreWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This creates the Collection for a {@link DocumentStoreVendor} backend  * configured for storing  application timeline information.  */
end_comment

begin_class
DECL|class|DocumentStoreCollectionCreator
specifier|public
class|class
name|DocumentStoreCollectionCreator
implements|implements
name|SchemaCreator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentStoreCollectionCreator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createTimelineSchema (String[] args)
specifier|public
name|void
name|createTimelineSchema
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating database and collections for DocumentStore : {}"
argument_list|,
name|DocumentStoreUtils
operator|.
name|getStoreVendor
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|DocumentStoreWriter
name|documentStoreWriter
init|=
name|DocumentStoreFactory
operator|.
name|createDocumentStoreWriter
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|documentStoreWriter
operator|.
name|createDatabase
argument_list|()
expr_stmt|;
name|documentStoreWriter
operator|.
name|createCollection
argument_list|(
name|CollectionType
operator|.
name|APPLICATION
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
name|documentStoreWriter
operator|.
name|createCollection
argument_list|(
name|CollectionType
operator|.
name|ENTITY
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
name|documentStoreWriter
operator|.
name|createCollection
argument_list|(
name|CollectionType
operator|.
name|FLOW_ACTIVITY
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
name|documentStoreWriter
operator|.
name|createCollection
argument_list|(
name|CollectionType
operator|.
name|FLOW_RUN
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while creating Timeline Collections"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

