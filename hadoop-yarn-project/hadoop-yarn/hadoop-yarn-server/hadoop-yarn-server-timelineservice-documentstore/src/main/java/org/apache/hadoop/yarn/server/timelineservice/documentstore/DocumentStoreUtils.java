begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|cosmosdb
operator|.
name|ConnectionPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|cosmosdb
operator|.
name|ConsistencyLevel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|cosmosdb
operator|.
name|rx
operator|.
name|AsyncDocumentClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|ApplicationEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowActivityEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowRunEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|lib
operator|.
name|DocumentStoreVendor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineDataToRetrieve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineEntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelinePrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineStorageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
operator|.
name|TimelineEntityDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
operator|.
name|TimelineEventSubDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
operator|.
name|TimelineMetricSubDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowactivity
operator|.
name|FlowActivityDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|flowrun
operator|.
name|FlowRunDocument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * This class consists of all the utils required for reading or writing  * documents for a {@link DocumentStoreVendor}.  */
end_comment

begin_class
DECL|class|DocumentStoreUtils
specifier|public
specifier|final
class|class
name|DocumentStoreUtils
block|{
DECL|method|DocumentStoreUtils ()
specifier|private
name|DocumentStoreUtils
parameter_list|()
block|{}
comment|/** milliseconds in one day. */
DECL|field|MILLIS_ONE_DAY
specifier|private
specifier|static
specifier|final
name|long
name|MILLIS_ONE_DAY
init|=
literal|86400000L
decl_stmt|;
DECL|field|TIMELINE_STORE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TIMELINE_STORE_TYPE
init|=
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"document-store-type"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_COSMOSDB_ENDPOINT
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_COSMOSDB_ENDPOINT
init|=
literal|"yarn.timeline-service.document-store.cosmos-db.endpoint"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_COSMOSDB_MASTER_KEY
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_COSMOSDB_MASTER_KEY
init|=
literal|"yarn.timeline-service.document-store.cosmos-db.masterkey"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME
init|=
literal|"yarn.timeline-service.document-store.db-name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
DECL|field|DEFAULT_TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME
name|DEFAULT_TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME
init|=
literal|"timeline_service"
decl_stmt|;
comment|/**    * Checks whether the cosmosdb conf are set properly in yarn-site.xml conf.    * @param conf    *             related to yarn    * @throws YarnException if required config properties are missing    */
DECL|method|validateCosmosDBConf (Configuration conf)
specifier|public
specifier|static
name|void
name|validateCosmosDBConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Configuration cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_COSMOSDB_ENDPOINT
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_COSMOSDB_MASTER_KEY
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"One or more CosmosDB configuration property is"
operator|+
literal|" missing in yarn-site.xml"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Retrieves {@link DocumentStoreVendor} configured.    * @param conf    *             related to yarn    * @return Returns the {@link DocumentStoreVendor} that is configured, else    *         uses {@link DocumentStoreVendor#COSMOS_DB} as default    */
DECL|method|getStoreVendor (Configuration conf)
specifier|public
specifier|static
name|DocumentStoreVendor
name|getStoreVendor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|DocumentStoreVendor
operator|.
name|getStoreType
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_STORE_TYPE
argument_list|,
name|DocumentStoreVendor
operator|.
name|COSMOS_DB
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieves a {@link TimelineEvent} from {@link TimelineEntity#events}.    * @param timelineEntity    *                      from which the set of events are examined.    * @param eventType    *                that has to be checked.    * @return {@link TimelineEvent} if found else null    */
DECL|method|fetchEvent (TimelineEntity timelineEntity, String eventType)
specifier|public
specifier|static
name|TimelineEvent
name|fetchEvent
parameter_list|(
name|TimelineEntity
name|timelineEntity
parameter_list|,
name|String
name|eventType
parameter_list|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|timelineEntity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|eventType
argument_list|)
condition|)
block|{
return|return
name|event
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Checks if the string is null or empty.    * @param values    *             array of string to be checked    * @return false if any of the string is null or empty else true    */
DECL|method|isNullOrEmpty (String...values)
specifier|public
specifier|static
name|boolean
name|isNullOrEmpty
parameter_list|(
name|String
modifier|...
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Creates CosmosDB Async Document Client.    * @param conf    *          to retrieve cosmos db endpoint and key    * @return async document client for CosmosDB    */
DECL|method|createCosmosDBAsyncClient ( Configuration conf)
specifier|public
specifier|static
name|AsyncDocumentClient
name|createCosmosDBAsyncClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|AsyncDocumentClient
operator|.
name|Builder
argument_list|()
operator|.
name|withServiceEndpoint
argument_list|(
name|DocumentStoreUtils
operator|.
name|getCosmosDBEndpoint
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withMasterKeyOrResourceToken
argument_list|(
name|DocumentStoreUtils
operator|.
name|getCosmosDBMasterKey
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withConnectionPolicy
argument_list|(
name|ConnectionPolicy
operator|.
name|GetDefault
argument_list|()
argument_list|)
operator|.
name|withConsistencyLevel
argument_list|(
name|ConsistencyLevel
operator|.
name|Session
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the timestamp of the day's start (which is midnight 00:00:00 AM)    * for a given input timestamp.    *    * @param timeStamp Timestamp.    * @return timestamp of that day's beginning (midnight)    */
DECL|method|getTopOfTheDayTimestamp (long timeStamp)
specifier|public
specifier|static
name|long
name|getTopOfTheDayTimestamp
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
return|return
name|timeStamp
operator|-
operator|(
name|timeStamp
operator|%
name|MILLIS_ONE_DAY
operator|)
return|;
block|}
comment|/**    * Creates a composite key for storing {@link TimelineEntityDocument}.    * @param collectorContext    *              of the timeline writer    * @param type    *            of the entity    * @return composite key delimited with !    */
DECL|method|constructTimelineEntityDocId (TimelineCollectorContext collectorContext, String type)
specifier|public
specifier|static
name|String
name|constructTimelineEntityDocId
parameter_list|(
name|TimelineCollectorContext
name|collectorContext
parameter_list|,
name|String
name|type
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s!%s!%s!%d!%s!%s"
argument_list|,
name|collectorContext
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getUserId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowRunId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getAppId
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**    * Creates a composite key for storing {@link TimelineEntityDocument}.    * @param collectorContext    *              of the timeline writer    * @param type    *            of the entity    * @param id    *            of the entity    * @return composite key delimited with !    */
DECL|method|constructTimelineEntityDocId (TimelineCollectorContext collectorContext, String type, String id)
specifier|public
specifier|static
name|String
name|constructTimelineEntityDocId
parameter_list|(
name|TimelineCollectorContext
name|collectorContext
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s!%s!%s!%d!%s!%s!%s"
argument_list|,
name|collectorContext
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getUserId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowRunId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getAppId
argument_list|()
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
return|;
block|}
comment|/**    * Creates a composite key for storing {@link FlowRunDocument}.    * @param collectorContext    *              of the timeline writer    * @return composite key delimited with !    */
DECL|method|constructFlowRunDocId (TimelineCollectorContext collectorContext)
specifier|public
specifier|static
name|String
name|constructFlowRunDocId
parameter_list|(
name|TimelineCollectorContext
name|collectorContext
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s!%s!%s!%s"
argument_list|,
name|collectorContext
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getUserId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a composite key for storing {@link FlowActivityDocument}.    * @param collectorContext    *              of the timeline writer    * @param eventTimestamp    *              of the timeline entity    * @return composite key delimited with !    */
DECL|method|constructFlowActivityDocId (TimelineCollectorContext collectorContext, long eventTimestamp)
specifier|public
specifier|static
name|String
name|constructFlowActivityDocId
parameter_list|(
name|TimelineCollectorContext
name|collectorContext
parameter_list|,
name|long
name|eventTimestamp
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s!%s!%s!%s"
argument_list|,
name|collectorContext
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|getTopOfTheDayTimestamp
argument_list|(
name|eventTimestamp
argument_list|)
argument_list|,
name|collectorContext
operator|.
name|getUserId
argument_list|()
argument_list|,
name|collectorContext
operator|.
name|getFlowName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCosmosDBEndpoint (Configuration conf)
specifier|private
specifier|static
name|String
name|getCosmosDBEndpoint
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_COSMOSDB_ENDPOINT
argument_list|)
return|;
block|}
DECL|method|getCosmosDBMasterKey (Configuration conf)
specifier|private
specifier|static
name|String
name|getCosmosDBMasterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_COSMOSDB_MASTER_KEY
argument_list|)
return|;
block|}
DECL|method|getCosmosDBDatabaseName (Configuration conf)
specifier|public
specifier|static
name|String
name|getCosmosDBDatabaseName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME
argument_list|,
name|getDefaultTimelineServiceDBName
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDefaultTimelineServiceDBName ( Configuration conf)
specifier|private
specifier|static
name|String
name|getDefaultTimelineServiceDBName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getClusterId
argument_list|(
name|conf
argument_list|)
operator|+
literal|"_"
operator|+
name|DEFAULT_TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME
return|;
block|}
DECL|method|getClusterId (Configuration conf)
specifier|private
specifier|static
name|String
name|getClusterId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
argument_list|)
return|;
block|}
DECL|method|isTimeInRange (long time, long timeBegin, long timeEnd)
specifier|private
specifier|static
name|boolean
name|isTimeInRange
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|timeBegin
parameter_list|,
name|long
name|timeEnd
parameter_list|)
block|{
return|return
operator|(
name|time
operator|>=
name|timeBegin
operator|)
operator|&&
operator|(
name|time
operator|<=
name|timeEnd
operator|)
return|;
block|}
comment|/**    * Checks if the {@link TimelineEntityFilters} are not matching for a given    * {@link TimelineEntity}.    * @param filters    *              that has to be checked for an entity    * @param timelineEntity  *                for which the filters would be applied    * @return true if any one of the filter is not matching else false    * @throws IOException if an unsupported filter is being matched.    */
DECL|method|isFilterNotMatching (TimelineEntityFilters filters, TimelineEntity timelineEntity)
specifier|static
name|boolean
name|isFilterNotMatching
parameter_list|(
name|TimelineEntityFilters
name|filters
parameter_list|,
name|TimelineEntity
name|timelineEntity
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timelineEntity
operator|.
name|getCreatedTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isTimeInRange
argument_list|(
name|timelineEntity
operator|.
name|getCreatedTime
argument_list|()
argument_list|,
name|filters
operator|.
name|getCreatedTimeBegin
argument_list|()
argument_list|,
name|filters
operator|.
name|getCreatedTimeEnd
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchRelatesTo
argument_list|(
name|timelineEntity
argument_list|,
name|filters
operator|.
name|getRelatesTo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchIsRelatedTo
argument_list|(
name|timelineEntity
argument_list|,
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|filters
operator|.
name|getInfoFilters
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|getInfoFilters
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchInfoFilters
argument_list|(
name|timelineEntity
argument_list|,
name|filters
operator|.
name|getInfoFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|filters
operator|.
name|getConfigFilters
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|getConfigFilters
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchConfigFilters
argument_list|(
name|timelineEntity
argument_list|,
name|filters
operator|.
name|getConfigFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|filters
operator|.
name|getMetricFilters
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|getMetricFilters
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchMetricFilters
argument_list|(
name|timelineEntity
argument_list|,
name|filters
operator|.
name|getMetricFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchEventFilters
argument_list|(
name|timelineEntity
argument_list|,
name|filters
operator|.
name|getEventFilters
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates the final entity to be returned as the result.    * @param timelineEntityDocument    *                         which has all the information for the entity    * @param dataToRetrieve    *                     specifies filters and fields to retrieve    * @return {@link TimelineEntity} as the result    */
DECL|method|createEntityToBeReturned ( TimelineEntityDocument timelineEntityDocument, TimelineDataToRetrieve dataToRetrieve)
specifier|public
specifier|static
name|TimelineEntity
name|createEntityToBeReturned
parameter_list|(
name|TimelineEntityDocument
name|timelineEntityDocument
parameter_list|,
name|TimelineDataToRetrieve
name|dataToRetrieve
parameter_list|)
block|{
name|TimelineEntity
name|entityToBeReturned
init|=
name|createTimelineEntity
argument_list|(
name|timelineEntityDocument
operator|.
name|getType
argument_list|()
argument_list|,
name|timelineEntityDocument
operator|.
name|fetchTimelineEntity
argument_list|()
argument_list|)
decl_stmt|;
name|entityToBeReturned
operator|.
name|setIdentifier
argument_list|(
operator|new
name|TimelineEntity
operator|.
name|Identifier
argument_list|(
name|timelineEntityDocument
operator|.
name|getType
argument_list|()
argument_list|,
name|timelineEntityDocument
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entityToBeReturned
operator|.
name|setCreatedTime
argument_list|(
name|timelineEntityDocument
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
expr_stmt|;
name|entityToBeReturned
operator|.
name|setInfo
argument_list|(
name|timelineEntityDocument
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fillFields
argument_list|(
name|entityToBeReturned
argument_list|,
name|timelineEntityDocument
argument_list|,
name|dataToRetrieve
argument_list|)
expr_stmt|;
block|}
return|return
name|entityToBeReturned
return|;
block|}
comment|/**    * Creates the final entity to be returned as the result.    * @param timelineEntityDocument    *                         which has all the information for the entity    * @param confsToRetrieve    *                     specifies config filters to be applied    * @param metricsToRetrieve    *                     specifies metric filters to be applied    *    * @return {@link TimelineEntity} as the result    */
DECL|method|createEntityToBeReturned ( TimelineEntityDocument timelineEntityDocument, TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve)
specifier|public
specifier|static
name|TimelineEntity
name|createEntityToBeReturned
parameter_list|(
name|TimelineEntityDocument
name|timelineEntityDocument
parameter_list|,
name|TimelineFilterList
name|confsToRetrieve
parameter_list|,
name|TimelineFilterList
name|metricsToRetrieve
parameter_list|)
block|{
name|TimelineEntity
name|timelineEntity
init|=
name|timelineEntityDocument
operator|.
name|fetchTimelineEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|confsToRetrieve
operator|!=
literal|null
condition|)
block|{
name|timelineEntity
operator|.
name|setConfigs
argument_list|(
name|DocumentStoreUtils
operator|.
name|applyConfigFilter
argument_list|(
name|confsToRetrieve
argument_list|,
name|timelineEntity
operator|.
name|getConfigs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metricsToRetrieve
operator|!=
literal|null
condition|)
block|{
name|timelineEntity
operator|.
name|setMetrics
argument_list|(
name|DocumentStoreUtils
operator|.
name|transformMetrics
argument_list|(
name|metricsToRetrieve
argument_list|,
name|timelineEntityDocument
operator|.
name|getMetrics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|timelineEntity
return|;
block|}
DECL|method|createTimelineEntity (String type, TimelineEntity timelineEntity)
specifier|private
specifier|static
name|TimelineEntity
name|createTimelineEntity
parameter_list|(
name|String
name|type
parameter_list|,
name|TimelineEntity
name|timelineEntity
parameter_list|)
block|{
switch|switch
condition|(
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
case|case
name|YARN_APPLICATION
case|:
return|return
operator|new
name|ApplicationEntity
argument_list|()
return|;
case|case
name|YARN_FLOW_RUN
case|:
return|return
operator|new
name|FlowRunEntity
argument_list|()
return|;
case|case
name|YARN_FLOW_ACTIVITY
case|:
name|FlowActivityEntity
name|flowActivityEntity
init|=
operator|(
name|FlowActivityEntity
operator|)
name|timelineEntity
decl_stmt|;
name|FlowActivityEntity
name|newFlowActivity
init|=
operator|new
name|FlowActivityEntity
argument_list|()
decl_stmt|;
name|newFlowActivity
operator|.
name|addFlowRuns
argument_list|(
name|flowActivityEntity
operator|.
name|getFlowRuns
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newFlowActivity
return|;
default|default:
return|return
operator|new
name|TimelineEntity
argument_list|()
return|;
block|}
block|}
comment|// fetch required fields for final entity to be returned
DECL|method|fillFields (TimelineEntity finalEntity, TimelineEntityDocument entityDoc, TimelineDataToRetrieve dataToRetrieve)
specifier|private
specifier|static
name|void
name|fillFields
parameter_list|(
name|TimelineEntity
name|finalEntity
parameter_list|,
name|TimelineEntityDocument
name|entityDoc
parameter_list|,
name|TimelineDataToRetrieve
name|dataToRetrieve
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|TimelineReader
operator|.
name|Field
argument_list|>
name|fieldsToRetrieve
init|=
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|TimelineReader
operator|.
name|Field
operator|.
name|ALL
argument_list|)
condition|)
block|{
name|fieldsToRetrieve
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|TimelineReader
operator|.
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimelineReader
operator|.
name|Field
name|field
range|:
name|fieldsToRetrieve
control|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|CONFIGS
case|:
name|finalEntity
operator|.
name|setConfigs
argument_list|(
name|applyConfigFilter
argument_list|(
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
argument_list|,
name|entityDoc
operator|.
name|getConfigs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|METRICS
case|:
name|finalEntity
operator|.
name|setMetrics
argument_list|(
name|transformMetrics
argument_list|(
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
argument_list|,
name|entityDoc
operator|.
name|getMetrics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|finalEntity
operator|.
name|setInfo
argument_list|(
name|entityDoc
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|IS_RELATED_TO
case|:
name|finalEntity
operator|.
name|setIsRelatedToEntities
argument_list|(
name|entityDoc
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RELATES_TO
case|:
name|finalEntity
operator|.
name|setIsRelatedToEntities
argument_list|(
name|entityDoc
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENTS
case|:
name|finalEntity
operator|.
name|setEvents
argument_list|(
name|transformEvents
argument_list|(
name|entityDoc
operator|.
name|getEvents
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
block|}
comment|/* Transforms Collection<Set<TimelineEventSubDoc>> to      NavigableSet<TimelineEvent> */
DECL|method|transformEvents ( Collection<Set<TimelineEventSubDoc>> eventSetColl)
specifier|private
specifier|static
name|NavigableSet
argument_list|<
name|TimelineEvent
argument_list|>
name|transformEvents
parameter_list|(
name|Collection
argument_list|<
name|Set
argument_list|<
name|TimelineEventSubDoc
argument_list|>
argument_list|>
name|eventSetColl
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|TimelineEvent
argument_list|>
name|timelineEvents
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|TimelineEventSubDoc
argument_list|>
name|eventSubDocs
range|:
name|eventSetColl
control|)
block|{
for|for
control|(
name|TimelineEventSubDoc
name|eventSubDoc
range|:
name|eventSubDocs
control|)
block|{
name|timelineEvents
operator|.
name|add
argument_list|(
name|eventSubDoc
operator|.
name|fetchTimelineEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|timelineEvents
return|;
block|}
DECL|method|transformMetrics ( TimelineFilterList metricsToRetrieve, Map<String, Set<TimelineMetricSubDoc>> metrics)
specifier|public
specifier|static
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|transformMetrics
parameter_list|(
name|TimelineFilterList
name|metricsToRetrieve
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TimelineMetricSubDoc
argument_list|>
argument_list|>
name|metrics
parameter_list|)
block|{
if|if
condition|(
name|metricsToRetrieve
operator|==
literal|null
operator|||
name|hasDataToBeRetrieve
argument_list|(
name|metricsToRetrieve
argument_list|,
name|metrics
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metricSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|TimelineMetricSubDoc
argument_list|>
name|metricSubDocs
range|:
name|metrics
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|TimelineMetricSubDoc
name|metricSubDoc
range|:
name|metricSubDocs
control|)
block|{
name|metricSet
operator|.
name|add
argument_list|(
name|metricSubDoc
operator|.
name|fetchTimelineMetric
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metricSet
return|;
block|}
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|applyConfigFilter ( TimelineFilterList configsToRetrieve, Map<String, String> configs)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|applyConfigFilter
parameter_list|(
name|TimelineFilterList
name|configsToRetrieve
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configs
parameter_list|)
block|{
if|if
condition|(
name|configsToRetrieve
operator|==
literal|null
operator|||
name|hasDataToBeRetrieve
argument_list|(
name|configsToRetrieve
argument_list|,
name|configs
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|configs
return|;
block|}
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|hasDataToBeRetrieve ( TimelineFilterList timelineFilters, Set<String> dataSet)
specifier|private
specifier|static
name|boolean
name|hasDataToBeRetrieve
parameter_list|(
name|TimelineFilterList
name|timelineFilters
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dataSet
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|dataToBeRetrieved
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TimelinePrefixFilter
name|timelinePrefixFilter
decl_stmt|;
for|for
control|(
name|TimelineFilter
name|timelineFilter
range|:
name|timelineFilters
operator|.
name|getFilterList
argument_list|()
control|)
block|{
name|timelinePrefixFilter
operator|=
operator|(
name|TimelinePrefixFilter
operator|)
name|timelineFilter
expr_stmt|;
name|dataToBeRetrieved
operator|.
name|add
argument_list|(
name|timelinePrefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|timelineFilters
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|OR
case|:
if|if
condition|(
name|dataToBeRetrieved
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|dataSet
argument_list|,
name|dataToBeRetrieved
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
case|case
name|AND
case|:
if|if
condition|(
name|dataToBeRetrieved
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|dataSet
operator|.
name|containsAll
argument_list|(
name|dataToBeRetrieved
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

