begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.documentstore.collection.document.entity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|documentstore
operator|.
name|collection
operator|.
name|document
operator|.
name|entity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|TimelineServiceHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class represents a Sub Document for {@link TimelineEvent}  * when creating a new {@link TimelineEntityDocument}.  */
end_comment

begin_class
DECL|class|TimelineEventSubDoc
specifier|public
class|class
name|TimelineEventSubDoc
block|{
DECL|field|timelineEvent
specifier|private
specifier|final
name|TimelineEvent
name|timelineEvent
decl_stmt|;
DECL|field|valid
specifier|private
name|boolean
name|valid
decl_stmt|;
DECL|method|TimelineEventSubDoc ()
specifier|public
name|TimelineEventSubDoc
parameter_list|()
block|{
name|timelineEvent
operator|=
operator|new
name|TimelineEvent
argument_list|()
expr_stmt|;
block|}
DECL|method|TimelineEventSubDoc (TimelineEvent timelineEvent)
specifier|public
name|TimelineEventSubDoc
parameter_list|(
name|TimelineEvent
name|timelineEvent
parameter_list|)
block|{
name|this
operator|.
name|timelineEvent
operator|=
name|timelineEvent
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|timelineEvent
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|setId (String eventId)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|eventId
parameter_list|)
block|{
name|timelineEvent
operator|.
name|setId
argument_list|(
name|eventId
argument_list|)
expr_stmt|;
block|}
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|timelineEvent
operator|.
name|isValid
argument_list|()
return|;
block|}
DECL|method|setValid (boolean valid)
specifier|public
name|void
name|setValid
parameter_list|(
name|boolean
name|valid
parameter_list|)
block|{
name|this
operator|.
name|valid
operator|=
name|valid
expr_stmt|;
block|}
DECL|method|getTimestamp ()
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timelineEvent
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
DECL|method|setTimestamp (long ts)
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
name|timelineEvent
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|getInfo ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getInfo
parameter_list|()
block|{
return|return
name|timelineEvent
operator|.
name|getInfo
argument_list|()
return|;
block|}
DECL|method|setInfo (Map<String, Object> info)
specifier|public
name|void
name|setInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
parameter_list|)
block|{
name|timelineEvent
operator|.
name|setInfo
argument_list|(
name|TimelineServiceHelper
operator|.
name|mapCastToHashMap
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|timelineEvent
operator|.
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// Only check if id is equal
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|TimelineEventSubDoc
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimelineEventSubDoc
name|otherTimelineEvent
init|=
operator|(
name|TimelineEventSubDoc
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|timelineEvent
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|otherTimelineEvent
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fetchTimelineEvent ()
specifier|public
name|TimelineEvent
name|fetchTimelineEvent
parameter_list|()
block|{
return|return
name|timelineEvent
return|;
block|}
block|}
end_class

end_unit

