begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_class
DECL|class|WebAppProxy
specifier|public
class|class
name|WebAppProxy
extends|extends
name|AbstractService
block|{
DECL|field|FETCHER_ATTRIBUTE
specifier|public
specifier|static
specifier|final
name|String
name|FETCHER_ATTRIBUTE
init|=
literal|"AppUrlFetcher"
decl_stmt|;
DECL|field|IS_SECURITY_ENABLED_ATTRIBUTE
specifier|public
specifier|static
specifier|final
name|String
name|IS_SECURITY_ENABLED_ATTRIBUTE
init|=
literal|"IsSecurityEnabled"
decl_stmt|;
DECL|field|PROXY_HOST_ATTRIBUTE
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_HOST_ATTRIBUTE
init|=
literal|"proxyHost"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WebAppProxy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|proxyServer
specifier|private
name|HttpServer
name|proxyServer
init|=
literal|null
decl_stmt|;
DECL|field|bindAddress
specifier|private
name|String
name|bindAddress
init|=
literal|null
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
literal|0
decl_stmt|;
DECL|field|acl
specifier|private
name|AccessControlList
name|acl
init|=
literal|null
decl_stmt|;
DECL|field|fetcher
specifier|private
name|AppReportFetcher
name|fetcher
init|=
literal|null
decl_stmt|;
DECL|field|isSecurityEnabled
specifier|private
name|boolean
name|isSecurityEnabled
init|=
literal|false
decl_stmt|;
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
init|=
literal|null
decl_stmt|;
DECL|method|WebAppProxy ()
specifier|public
name|WebAppProxy
parameter_list|()
block|{
name|super
argument_list|(
name|WebAppProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
operator|||
literal|"simple"
operator|.
name|equals
argument_list|(
name|auth
argument_list|)
condition|)
block|{
name|isSecurityEnabled
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"kerberos"
operator|.
name|equals
argument_list|(
name|auth
argument_list|)
condition|)
block|{
name|isSecurityEnabled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unrecongized attribute value for "
operator|+
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
operator|+
literal|" of "
operator|+
name|auth
argument_list|)
expr_stmt|;
block|}
name|String
name|proxy
init|=
name|WebAppUtils
operator|.
name|getProxyHostAndPort
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|proxyParts
init|=
name|proxy
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|proxyHost
operator|=
name|proxyParts
index|[
literal|0
index|]
expr_stmt|;
name|fetcher
operator|=
operator|new
name|AppReportFetcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bindAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindAddress
operator|==
literal|null
operator|||
name|bindAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
operator|+
literal|" is not set so the proxy will not run."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiating Proxy at "
operator|+
name|bindAddress
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|bindAddress
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
name|port
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|bindAddress
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|acl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|proxyServer
operator|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"proxy"
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|bindAddress
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|setFindPort
argument_list|(
name|port
operator|==
literal|0
argument_list|)
operator|.
name|setConf
argument_list|(
name|getConfig
argument_list|()
argument_list|)
operator|.
name|setACL
argument_list|(
name|acl
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|proxyServer
operator|.
name|addServlet
argument_list|(
name|ProxyUriUtils
operator|.
name|PROXY_SERVLET_NAME
argument_list|,
name|ProxyUriUtils
operator|.
name|PROXY_PATH_SPEC
argument_list|,
name|WebAppProxyServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|setAttribute
argument_list|(
name|FETCHER_ATTRIBUTE
argument_list|,
name|fetcher
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|setAttribute
argument_list|(
name|IS_SECURITY_ENABLED_ATTRIBUTE
argument_list|,
name|isSecurityEnabled
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|setAttribute
argument_list|(
name|PROXY_HOST_ATTRIBUTE
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Could not start proxy web server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not start proxy web server"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|proxyServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|proxyServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error stopping proxy web server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Error stopping proxy web server"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
if|if
condition|(
name|proxyServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|proxyServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
block|}
end_class

end_unit

