begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_comment
comment|/**  * Class containing general purpose proxy utilities  */
end_comment

begin_class
DECL|class|ProxyUtils
specifier|public
class|class
name|ProxyUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProxyUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|E_HTTP_HTTPS_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|E_HTTP_HTTPS_ONLY
init|=
literal|"This filter only works for HTTP/HTTPS"
decl_stmt|;
DECL|field|LOCATION
specifier|public
specifier|static
specifier|final
name|String
name|LOCATION
init|=
literal|"Location"
decl_stmt|;
DECL|class|_
specifier|public
specifier|static
class|class
name|_
implements|implements
name|Hamlet
operator|.
name|_
block|{
comment|//Empty
block|}
DECL|class|Page
specifier|public
specifier|static
class|class
name|Page
extends|extends
name|Hamlet
block|{
DECL|method|Page (PrintWriter out)
name|Page
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|html ()
specifier|public
name|HTML
argument_list|<
name|ProxyUtils
operator|.
name|_
argument_list|>
name|html
parameter_list|()
block|{
return|return
operator|new
name|HTML
argument_list|<>
argument_list|(
literal|"html"
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|EOpt
operator|.
name|ENDTAG
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Handle redirects with a status code that can in future support verbs other    * than GET, thus supporting full REST functionality.    *<p>    * The target URL is included in the redirect text returned    *<p>    * At the end of this method, the output stream is closed.    *     * @param request request (hence: the verb and any other information    * relevant to a redirect)    * @param response the response    * @param target the target URL -unencoded    *    */
DECL|method|sendRedirect (HttpServletRequest request, HttpServletResponse response, String target)
specifier|public
specifier|static
name|void
name|sendRedirect
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Redirecting {} {} to {}"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|String
name|location
init|=
name|response
operator|.
name|encodeRedirectURL
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FOUND
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|LOCATION
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|HTML
argument_list|)
expr_stmt|;
name|PrintWriter
name|writer
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|Page
name|p
init|=
operator|new
name|Page
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|p
operator|.
name|html
argument_list|()
operator|.
name|head
argument_list|()
operator|.
name|title
argument_list|(
literal|"Moved"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|h1
argument_list|(
literal|"Moved"
argument_list|)
operator|.
name|div
argument_list|()
operator|.
name|_
argument_list|(
literal|"Content has moved "
argument_list|)
operator|.
name|a
argument_list|(
name|location
argument_list|,
literal|"here"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Output 404 with appropriate message.    * @param resp the http response.    * @param message the message to include on the page.    * @throws IOException on any error.    */
DECL|method|notFound (HttpServletResponse resp, String message)
specifier|public
specifier|static
name|void
name|notFound
parameter_list|(
name|HttpServletResponse
name|resp
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|HTML
argument_list|)
expr_stmt|;
name|Page
name|p
init|=
operator|new
name|Page
argument_list|(
name|resp
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|html
argument_list|()
operator|.
name|h1
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reject any request that isn't from an HTTP servlet    * @param req request    * @throws ServletException if the request is of the wrong type    */
DECL|method|rejectNonHttpRequests (ServletRequest req)
specifier|public
specifier|static
name|void
name|rejectNonHttpRequests
parameter_list|(
name|ServletRequest
name|req
parameter_list|)
throws|throws
name|ServletException
block|{
if|if
condition|(
operator|!
operator|(
name|req
operator|instanceof
name|HttpServletRequest
operator|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|E_HTTP_HTTPS_ONLY
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

