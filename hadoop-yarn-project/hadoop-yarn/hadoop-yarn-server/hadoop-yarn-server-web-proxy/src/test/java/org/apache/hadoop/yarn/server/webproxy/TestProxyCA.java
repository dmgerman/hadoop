begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLPeerUnverifiedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|x500
operator|.
name|X500Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SignatureException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|TestProxyCA
specifier|public
class|class
name|TestProxyCA
block|{
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|proxyCA
operator|.
name|getCaCert
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|proxyCA
operator|.
name|getX509KeyManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|proxyCA
operator|.
name|getCaCert
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|proxyCA
operator|.
name|getX509KeyManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateChildKeyStore ()
specifier|public
name|void
name|testCreateChildKeyStore
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|keystoreBytes
init|=
name|proxyCA
operator|.
name|createChildKeyStore
argument_list|(
name|appId
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|KeyStore
name|keyStore
init|=
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|keystoreBytes
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyStore
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Certificate
index|[]
name|certChain
init|=
name|keyStore
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|certChain
operator|.
name|length
argument_list|)
expr_stmt|;
name|X509Certificate
name|caCert
init|=
operator|(
name|X509Certificate
operator|)
name|certChain
index|[
literal|1
index|]
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|certChain
index|[
literal|0
index|]
decl_stmt|;
comment|// check child cert
name|Assert
operator|.
name|assertEquals
argument_list|(
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|cert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|X500Principal
argument_list|(
literal|"CN="
operator|+
name|appId
argument_list|)
argument_list|,
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Found multiple fields in X500 Principal, when there "
operator|+
literal|"should have only been one: "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
argument_list|,
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"SHA512withRSA"
argument_list|,
name|cert
operator|.
name|getSigAlgName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cert
operator|.
name|getNotBefore
argument_list|()
argument_list|,
name|cert
operator|.
name|getNotAfter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected certificate to be expired but was not: "
operator|+
name|cert
operator|.
name|getNotAfter
argument_list|()
argument_list|,
name|cert
operator|.
name|getNotAfter
argument_list|()
operator|.
name|before
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|X500Principal
argument_list|(
literal|"CN="
operator|+
name|appId
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|cert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Key
name|privateKey
init|=
name|keyStore
operator|.
name|getKey
argument_list|(
literal|"server"
argument_list|,
literal|"password"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"RSA"
argument_list|,
name|privateKey
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cert
operator|.
name|getBasicConstraints
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify signature on child cert
name|PublicKey
name|caPublicKey
init|=
name|caCert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|cert
operator|.
name|verify
argument_list|(
name|caPublicKey
argument_list|)
expr_stmt|;
comment|// check CA cert
name|checkCACert
argument_list|(
name|caCert
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaCert
argument_list|()
argument_list|,
name|caCert
argument_list|)
expr_stmt|;
comment|// verify signature on CA cert
name|caCert
operator|.
name|verify
argument_list|(
name|caPublicKey
argument_list|)
expr_stmt|;
comment|// verify CA public key matches private key
name|PrivateKey
name|caPrivateKey
init|=
name|proxyCA
operator|.
name|getX509KeyManager
argument_list|()
operator|.
name|getPrivateKey
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|checkPrivatePublicKeys
argument_list|(
name|caPrivateKey
argument_list|,
name|caPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPublic
argument_list|()
argument_list|,
name|caPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|caPrivateKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetChildTrustStore ()
specifier|public
name|void
name|testGetChildTrustStore
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|byte
index|[]
name|truststoreBytes
init|=
name|proxyCA
operator|.
name|getChildTrustStore
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
name|KeyStore
name|truststore
init|=
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|truststoreBytes
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|truststore
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|X509Certificate
name|caCert
init|=
operator|(
name|X509Certificate
operator|)
name|truststore
operator|.
name|getCertificate
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
comment|// check CA cert
name|checkCACert
argument_list|(
name|caCert
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaCert
argument_list|()
argument_list|,
name|caCert
argument_list|)
expr_stmt|;
comment|// verify signature on CA cert
name|PublicKey
name|caPublicKey
init|=
name|caCert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|caCert
operator|.
name|verify
argument_list|(
name|caPublicKey
argument_list|)
expr_stmt|;
comment|// verify CA public key matches private key
name|PrivateKey
name|caPrivateKey
init|=
name|proxyCA
operator|.
name|getX509KeyManager
argument_list|()
operator|.
name|getPrivateKey
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|checkPrivatePublicKeys
argument_list|(
name|caPrivateKey
argument_list|,
name|caPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPublic
argument_list|()
argument_list|,
name|caPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|caPrivateKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateKeyStorePassword ()
specifier|public
name|void
name|testGenerateKeyStorePassword
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We can't possibly test every possible string, but we can at least verify
comment|// a few things about a few of the generated strings as a sanity check
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|passwords
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|password
init|=
name|proxyCA
operator|.
name|generateKeyStorePassword
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|password
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
name|password
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Found character '"
operator|+
name|c
operator|+
literal|"' in password '"
operator|+
name|password
operator|+
literal|"' which is outside of the expected range"
argument_list|,
name|c
operator|<
literal|' '
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Found character '"
operator|+
name|c
operator|+
literal|"' in password '"
operator|+
name|password
operator|+
literal|"' which is outside of the expected range"
argument_list|,
name|c
operator|>
literal|'z'
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Password "
operator|+
name|password
operator|+
literal|" was generated twice, which is _extremely_ unlikely"
operator|+
literal|" and shouldn't practically happen: "
operator|+
name|passwords
argument_list|,
name|passwords
operator|.
name|contains
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|passwords
operator|.
name|add
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateTrustManagerDefaultTrustManager ()
specifier|public
name|void
name|testCreateTrustManagerDefaultTrustManager
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509TrustManager
name|defaultTrustManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|X509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyCA
operator|.
name|setDefaultTrustManager
argument_list|(
name|defaultTrustManager
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|X509TrustManager
name|trustManager
init|=
name|proxyCA
operator|.
name|createTrustManager
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|defaultTrustManager
operator|.
name|getAcceptedIssuers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|X509Certificate
index|[]
block|{
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo"
argument_list|,
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|defaultTrustManager
operator|.
name|getAcceptedIssuers
argument_list|()
argument_list|,
name|trustManager
operator|.
name|getAcceptedIssuers
argument_list|()
argument_list|)
expr_stmt|;
name|trustManager
operator|.
name|checkClientTrusted
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTrustManagerYarnCert ()
specifier|public
name|void
name|testCreateTrustManagerYarnCert
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509TrustManager
name|defaultTrustManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|X509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyCA
operator|.
name|setDefaultTrustManager
argument_list|(
name|defaultTrustManager
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|X509TrustManager
name|trustManager
init|=
name|proxyCA
operator|.
name|createTrustManager
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|X509Certificate
index|[]
name|certChain
init|=
name|castCertificateArrayToX509CertificateArray
argument_list|(
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA
operator|.
name|createChildKeyStore
argument_list|(
name|appId
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
argument_list|)
decl_stmt|;
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTrustManagerWrongApp ()
specifier|public
name|void
name|testCreateTrustManagerWrongApp
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509TrustManager
name|defaultTrustManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|X509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyCA
operator|.
name|setDefaultTrustManager
argument_list|(
name|defaultTrustManager
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|X509TrustManager
name|trustManager
init|=
name|proxyCA
operator|.
name|createTrustManager
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|X509Certificate
index|[]
name|certChain
init|=
name|castCertificateArrayToX509CertificateArray
argument_list|(
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA
operator|.
name|createChildKeyStore
argument_list|(
name|appId2
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have thrown a CertificateException, but did not"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|ce
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected to find Subject X500 Principal with CN="
operator|+
name|appId
operator|+
literal|" but found CN="
operator|+
name|appId2
argument_list|,
name|ce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateTrustManagerWrongRM ()
specifier|public
name|void
name|testCreateTrustManagerWrongRM
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509TrustManager
name|defaultTrustManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|X509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyCA
operator|.
name|setDefaultTrustManager
argument_list|(
name|defaultTrustManager
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|X509TrustManager
name|trustManager
init|=
name|proxyCA
operator|.
name|createTrustManager
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|ProxyCA
name|proxyCA2
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
comment|// Simulates another RM
name|proxyCA2
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509Certificate
index|[]
name|certChain
init|=
name|castCertificateArrayToX509CertificateArray
argument_list|(
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA2
operator|.
name|createChildKeyStore
argument_list|(
name|appId
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTrustManagerRealCert ()
specifier|public
name|void
name|testCreateTrustManagerRealCert
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509TrustManager
name|defaultTrustManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|X509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyCA
operator|.
name|setDefaultTrustManager
argument_list|(
name|defaultTrustManager
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|X509TrustManager
name|trustManager
init|=
name|proxyCA
operator|.
name|createTrustManager
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// "real" cert
name|X509Certificate
index|[]
name|certChain
init|=
operator|new
name|X509Certificate
index|[]
block|{
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo.com"
argument_list|,
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
block|}
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
comment|// "real" cert x2
name|certChain
operator|=
operator|new
name|X509Certificate
index|[]
block|{
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo.com"
argument_list|,
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
block|,
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo.com"
argument_list|,
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
block|}
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTrustManagerExceptions ()
specifier|public
name|void
name|testCreateTrustManagerExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509TrustManager
name|defaultTrustManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|X509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyCA
operator|.
name|setDefaultTrustManager
argument_list|(
name|defaultTrustManager
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|X509TrustManager
name|trustManager
init|=
name|proxyCA
operator|.
name|createTrustManager
argument_list|(
name|appId
argument_list|)
decl_stmt|;
for|for
control|(
name|Exception
name|e
range|:
operator|new
name|Exception
index|[]
block|{
operator|new
name|CertificateException
argument_list|()
block|,
operator|new
name|NoSuchAlgorithmException
argument_list|()
block|,
operator|new
name|InvalidKeyException
argument_list|()
block|,
operator|new
name|SignatureException
argument_list|()
block|,
operator|new
name|NoSuchProviderException
argument_list|()
block|}
control|)
block|{
name|X509Certificate
index|[]
name|certChain
init|=
name|castCertificateArrayToX509CertificateArray
argument_list|(
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA
operator|.
name|createChildKeyStore
argument_list|(
name|appId
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|certChain
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|certChain
index|[
literal|0
index|]
operator|=
name|cert
expr_stmt|;
comment|// Throw e to simulate problems with verifying
name|Mockito
operator|.
name|doThrow
argument_list|(
name|e
argument_list|)
operator|.
name|when
argument_list|(
name|certChain
index|[
literal|0
index|]
argument_list|)
operator|.
name|verify
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|defaultTrustManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|checkServerTrusted
argument_list|(
name|certChain
argument_list|,
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateKeyManager ()
specifier|public
name|void
name|testCreateKeyManager
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|X509KeyManager
name|keyManager
init|=
name|proxyCA
operator|.
name|getX509KeyManager
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"client"
block|}
argument_list|,
name|keyManager
operator|.
name|getClientAliases
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"client"
argument_list|,
name|keyManager
operator|.
name|chooseClientAlias
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|keyManager
operator|.
name|getServerAliases
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|keyManager
operator|.
name|chooseServerAlias
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|truststoreBytes
init|=
name|proxyCA
operator|.
name|getChildTrustStore
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
name|KeyStore
name|truststore
init|=
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|truststoreBytes
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|truststore
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|X509Certificate
name|caCert
init|=
operator|(
name|X509Certificate
operator|)
name|truststore
operator|.
name|getCertificate
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|X509Certificate
index|[]
block|{
name|caCert
block|}
argument_list|,
name|keyManager
operator|.
name|getCertificateChain
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaCert
argument_list|()
argument_list|,
name|caCert
argument_list|)
expr_stmt|;
name|PrivateKey
name|caPrivateKey
init|=
name|keyManager
operator|.
name|getPrivateKey
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|PublicKey
name|caPublicKey
init|=
name|caCert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|checkPrivatePublicKeys
argument_list|(
name|caPrivateKey
argument_list|,
name|caPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPublic
argument_list|()
argument_list|,
name|caPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|caPrivateKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateHostnameVerifier ()
specifier|public
name|void
name|testCreateHostnameVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|HostnameVerifier
name|verifier
init|=
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
decl_stmt|;
name|SSLSession
name|sslSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA
operator|.
name|createChildKeyStore
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifier
operator|.
name|verify
argument_list|(
literal|"foo"
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateHostnameVerifierSSLPeerUnverifiedException ()
specifier|public
name|void
name|testCreateHostnameVerifierSSLPeerUnverifiedException
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|HostnameVerifier
name|verifier
init|=
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
decl_stmt|;
name|SSLSession
name|sslSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SSLPeerUnverifiedException
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|verifier
operator|.
name|verify
argument_list|(
literal|"foo"
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateHostnameVerifierWrongRM ()
specifier|public
name|void
name|testCreateHostnameVerifierWrongRM
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|HostnameVerifier
name|verifier
init|=
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
decl_stmt|;
name|SSLSession
name|sslSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProxyCA
name|proxyCA2
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
comment|// Simulate another RM
name|proxyCA2
operator|.
name|init
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA2
operator|.
name|createChildKeyStore
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|verifier
operator|.
name|verify
argument_list|(
literal|"foo"
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateHostnameVerifierExceptions ()
specifier|public
name|void
name|testCreateHostnameVerifierExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|HostnameVerifier
name|verifier
init|=
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
decl_stmt|;
for|for
control|(
name|Exception
name|e
range|:
operator|new
name|Exception
index|[]
block|{
operator|new
name|CertificateException
argument_list|()
block|,
operator|new
name|NoSuchAlgorithmException
argument_list|()
block|,
operator|new
name|InvalidKeyException
argument_list|()
block|,
operator|new
name|SignatureException
argument_list|()
block|,
operator|new
name|NoSuchProviderException
argument_list|()
block|}
control|)
block|{
name|SSLSession
name|sslSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Certificate
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Certificate
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Certificate
index|[]
name|certChain
init|=
name|KeyStoreTestUtil
operator|.
name|bytesToKeyStore
argument_list|(
name|proxyCA
operator|.
name|createChildKeyStore
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
operator|.
name|getCertificateChain
argument_list|(
literal|"server"
argument_list|)
decl_stmt|;
name|Certificate
name|cert
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|certChain
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|certChain
index|[
literal|0
index|]
operator|=
name|cert
expr_stmt|;
comment|// Throw e to simulate problems with verifying
name|Mockito
operator|.
name|doThrow
argument_list|(
name|e
argument_list|)
operator|.
name|when
argument_list|(
name|cert
argument_list|)
operator|.
name|verify
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|certChain
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|verifier
operator|.
name|verify
argument_list|(
literal|"foo"
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateHostnameVerifierRealCert ()
specifier|public
name|void
name|testCreateHostnameVerifierRealCert
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|HostnameVerifier
name|verifier
init|=
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
decl_stmt|;
name|SSLSession
name|sslSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Certificate
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Certificate
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// "real" cert
name|Certificate
index|[]
name|certChain
init|=
operator|new
name|Certificate
index|[]
block|{
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo.com"
argument_list|,
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
block|}
decl_stmt|;
return|return
name|certChain
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifier
operator|.
name|verify
argument_list|(
literal|"foo.com"
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateHostnameVerifierRealCertBad ()
specifier|public
name|void
name|testCreateHostnameVerifierRealCertBad
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyCA
name|proxyCA
init|=
operator|new
name|ProxyCA
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
name|HostnameVerifier
name|verifier
init|=
name|proxyCA
operator|.
name|getHostnameVerifier
argument_list|()
decl_stmt|;
name|SSLSession
name|sslSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Certificate
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Certificate
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// "real" cert
name|Certificate
index|[]
name|certChain
init|=
operator|new
name|Certificate
index|[]
block|{
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo.com"
argument_list|,
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
block|}
decl_stmt|;
return|return
name|certChain
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|verifier
operator|.
name|verify
argument_list|(
literal|"bar.com"
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCACert (X509Certificate caCert)
specifier|private
name|void
name|checkCACert
parameter_list|(
name|X509Certificate
name|caCert
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|caCert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|caCert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected CA certificate X500 Principal to start with"
operator|+
literal|" 'OU=YARN-', but did not: "
operator|+
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
argument_list|,
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"OU=YARN-"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Found multiple fields in X500 Principal, when there "
operator|+
literal|"should have only been one: "
operator|+
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
argument_list|,
name|caCert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"SHA512withRSA"
argument_list|,
name|caCert
operator|.
name|getSigAlgName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|GregorianCalendar
argument_list|(
literal|2037
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|31
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
name|caCert
operator|.
name|getNotAfter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected certificate to have started but was not: "
operator|+
name|caCert
operator|.
name|getNotBefore
argument_list|()
argument_list|,
name|caCert
operator|.
name|getNotBefore
argument_list|()
operator|.
name|before
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|caCert
operator|.
name|getBasicConstraints
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPrivatePublicKeys (PrivateKey privateKey, PublicKey publicKey)
specifier|private
name|void
name|checkPrivatePublicKeys
parameter_list|(
name|PrivateKey
name|privateKey
parameter_list|,
name|PublicKey
name|publicKey
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeyException
throws|,
name|SignatureException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|2000
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Signature
name|signer
init|=
name|Signature
operator|.
name|getInstance
argument_list|(
literal|"SHA512withRSA"
argument_list|)
decl_stmt|;
name|signer
operator|.
name|initSign
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|signer
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sig
init|=
name|signer
operator|.
name|sign
argument_list|()
decl_stmt|;
name|signer
operator|=
name|Signature
operator|.
name|getInstance
argument_list|(
literal|"SHA512withRSA"
argument_list|)
expr_stmt|;
name|signer
operator|.
name|initVerify
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|signer
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|signer
operator|.
name|verify
argument_list|(
name|sig
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|castCertificateArrayToX509CertificateArray ( Certificate[] certs)
specifier|private
name|X509Certificate
index|[]
name|castCertificateArrayToX509CertificateArray
parameter_list|(
name|Certificate
index|[]
name|certs
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|certs
argument_list|,
name|certs
operator|.
name|length
argument_list|,
name|X509Certificate
index|[]
operator|.
expr|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

