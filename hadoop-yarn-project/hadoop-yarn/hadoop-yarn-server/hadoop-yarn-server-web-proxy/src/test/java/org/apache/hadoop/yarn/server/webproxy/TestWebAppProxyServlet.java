begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpCookie
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationReportPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the WebAppProxyServlet and WebAppProxy. For back end use simple web  * server.  */
end_comment

begin_class
DECL|class|TestWebAppProxyServlet
specifier|public
class|class
name|TestWebAppProxyServlet
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWebAppProxyServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|Server
name|server
decl_stmt|;
DECL|field|originalPort
specifier|private
specifier|static
name|int
name|originalPort
init|=
literal|0
decl_stmt|;
DECL|field|numberOfHeaders
specifier|private
specifier|static
name|int
name|numberOfHeaders
init|=
literal|0
decl_stmt|;
DECL|field|UNKNOWN_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_HEADER
init|=
literal|"Unknown-Header"
decl_stmt|;
DECL|field|hasUnknownHeader
specifier|private
specifier|static
name|boolean
name|hasUnknownHeader
init|=
literal|false
decl_stmt|;
DECL|field|configuration
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/**    * Simple http server. Server should send answer with status 200    */
annotation|@
name|BeforeClass
DECL|method|start ()
specifier|public
specifier|static
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|TestServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|server
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|originalPort
operator|=
name|server
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running embedded servlet container at: http://localhost:"
operator|+
name|originalPort
argument_list|)
expr_stmt|;
comment|// This property needs to be set otherwise CORS Headers will be dropped
comment|// by HttpUrlConnection
name|System
operator|.
name|setProperty
argument_list|(
literal|"sun.net.http.allowRestrictedHeaders"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|TestServlet
specifier|public
specifier|static
class|class
name|TestServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|int
name|numHeaders
init|=
literal|0
decl_stmt|;
name|hasUnknownHeader
operator|=
literal|false
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Enumeration
argument_list|<
name|String
argument_list|>
name|names
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|headerName
init|=
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
name|UNKNOWN_HEADER
argument_list|)
condition|)
block|{
name|hasUnknownHeader
operator|=
literal|true
expr_stmt|;
block|}
operator|++
name|numHeaders
expr_stmt|;
block|}
name|numberOfHeaders
operator|=
name|numHeaders
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPost (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|InputStream
name|is
init|=
name|req
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
name|resp
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|c
operator|>
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testWebAppProxyServlet ()
specifier|public
name|void
name|testWebAppProxyServlet
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|,
literal|"localhost:9090"
argument_list|)
expr_stmt|;
comment|// overriding num of web server threads, see HttpServer.HTTP_MAXTHREADS
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hadoop.http.max.threads"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|WebAppProxyServerForTest
name|proxy
init|=
operator|new
name|WebAppProxyServerForTest
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|proxyPort
init|=
name|proxy
operator|.
name|proxy
operator|.
name|proxyServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|AppReportFetcherForTest
name|appReportFetcher
init|=
name|proxy
operator|.
name|proxy
operator|.
name|appReportFetcher
decl_stmt|;
comment|// wrong url
try|try
block|{
comment|// wrong url without app ID
name|URL
name|emptyUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|emptyProxyConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|emptyUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|emptyProxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|emptyProxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// wrong url. Set wrong app ID
name|URL
name|wrongUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy/app"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|proxyConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|wrongUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// set true Application ID in url
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy/application_00_0"
argument_list|)
decl_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
comment|// set cookie
name|proxyConn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
literal|"checked_application_0_0000=true"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isResponseCookiePresent
argument_list|(
name|proxyConn
argument_list|,
literal|"checked_application_0_0000"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that redirection is squashed correctly
name|URL
name|redirectUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy/redirect/application_00_0"
argument_list|)
decl_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|redirectUrl
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The proxy returned an unexpected status code rather than"
operator|+
literal|"redirecting the connection (302)"
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_MOVED_TEMP
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithScheme
argument_list|(
name|configuration
argument_list|)
operator|+
literal|"/cluster/failure/application_00_0"
decl_stmt|;
name|String
name|redirect
init|=
name|proxyConn
operator|.
name|getHeaderField
argument_list|(
name|ProxyUtils
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The proxy did not redirect the connection to the failure "
operator|+
literal|"page of the RM"
argument_list|,
name|expected
argument_list|,
name|redirect
argument_list|)
expr_stmt|;
comment|// cannot found application 1: null
name|appReportFetcher
operator|.
name|answer
operator|=
literal|1
expr_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
literal|"checked_application_0_0000=true"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isResponseCookiePresent
argument_list|(
name|proxyConn
argument_list|,
literal|"checked_application_0_0000"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
comment|// cannot found application 2: ApplicationNotFoundException
name|appReportFetcher
operator|.
name|answer
operator|=
literal|4
expr_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
literal|"checked_application_0_0000=true"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isResponseCookiePresent
argument_list|(
name|proxyConn
argument_list|,
literal|"checked_application_0_0000"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wrong user
name|appReportFetcher
operator|.
name|answer
operator|=
literal|2
expr_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|readInputStream
argument_list|(
name|proxyConn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"to continue to an Application Master web interface owned by"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"WARNING: The following page may not be safe!"
argument_list|)
argument_list|)
expr_stmt|;
comment|//case if task has a not running status
name|appReportFetcher
operator|.
name|answer
operator|=
literal|3
expr_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
literal|"checked_application_0_0000=true"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// test user-provided path and query parameter can be appended to the
comment|// original tracking url
name|appReportFetcher
operator|.
name|answer
operator|=
literal|5
expr_stmt|;
name|URL
name|clientUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy/application_00_0/test/tez?x=y&h=p"
argument_list|)
decl_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|clientUrl
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|proxyConn
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ProxyConn.getHeaderField(): "
operator|+
name|proxyConn
operator|.
name|getHeaderField
argument_list|(
name|ProxyUtils
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:"
operator|+
name|originalPort
operator|+
literal|"/foo/bar/test/tez?a=b&x=y&h=p#main"
argument_list|,
name|proxyConn
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAppReportForEmptyTrackingUrl ()
specifier|public
name|void
name|testAppReportForEmptyTrackingUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|,
literal|"localhost:9090"
argument_list|)
expr_stmt|;
comment|// overriding num of web server threads, see HttpServer.HTTP_MAXTHREADS
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hadoop.http.max.threads"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|WebAppProxyServerForTest
name|proxy
init|=
operator|new
name|WebAppProxyServerForTest
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|proxyPort
init|=
name|proxy
operator|.
name|proxy
operator|.
name|proxyServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|AppReportFetcherForTest
name|appReportFetcher
init|=
name|proxy
operator|.
name|proxy
operator|.
name|appReportFetcher
decl_stmt|;
try|try
block|{
comment|//set AHS_ENBALED = false to simulate getting the app report from RM
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ApplicationId
name|app
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|appReportFetcher
operator|.
name|answer
operator|=
literal|6
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy/"
operator|+
name|app
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|proxyConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
try|try
block|{
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
comment|// Connection Exception is expected as we have set
comment|// appReportFetcher.answer = 6, which does not set anything for
comment|// original tracking url field in the app report.
block|}
name|String
name|appAddressInRm
init|=
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithScheme
argument_list|(
name|configuration
argument_list|)
operator|+
literal|"/cluster"
operator|+
literal|"/app/"
operator|+
name|app
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Webapp proxy servlet should have redirected to RM"
argument_list|,
name|proxyConn
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|appAddressInRm
argument_list|)
argument_list|)
expr_stmt|;
comment|//set AHS_ENBALED = true to simulate getting the app report from AHS
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
try|try
block|{
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
comment|// Connection Exception is expected as we have set
comment|// appReportFetcher.answer = 6, which does not set anything for
comment|// original tracking url field in the app report.
block|}
name|String
name|appAddressInAhs
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|configuration
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
name|configuration
argument_list|)
operator|+
literal|"/applicationhistory"
operator|+
literal|"/app/"
operator|+
name|app
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Webapp proxy servlet should have redirected to AHS"
argument_list|,
name|proxyConn
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|appAddressInAhs
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testWebAppProxyPassThroughHeaders ()
specifier|public
name|void
name|testWebAppProxyPassThroughHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|,
literal|"localhost:9091"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hadoop.http.max.threads"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|WebAppProxyServerForTest
name|proxy
init|=
operator|new
name|WebAppProxyServerForTest
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|proxyPort
init|=
name|proxy
operator|.
name|proxy
operator|.
name|proxyServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|proxyPort
operator|+
literal|"/proxy/application_00_1"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|proxyConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
comment|// set headers
name|proxyConn
operator|.
name|addRequestProperty
argument_list|(
literal|"Origin"
argument_list|,
literal|"http://www.someurl.com"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|addRequestProperty
argument_list|(
literal|"Access-Control-Request-Method"
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|addRequestProperty
argument_list|(
literal|"Access-Control-Request-Headers"
argument_list|,
literal|"Authorization"
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|addRequestProperty
argument_list|(
name|UNKNOWN_HEADER
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
comment|// Verify if four headers mentioned above have been added
name|assertEquals
argument_list|(
name|proxyConn
operator|.
name|getRequestProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify if number of headers received by end server is 8.
comment|// Eight headers include Accept, Host, Connection, User-Agent, Cookie,
comment|// Origin, Access-Control-Request-Method and
comment|// Access-Control-Request-Headers. Pls note that Unknown-Header is dropped
comment|// by proxy as it is not in the list of allowed headers.
name|assertEquals
argument_list|(
name|numberOfHeaders
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasUnknownHeader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test main method of WebAppProxyServer    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testWebAppProxyServerMainMethod ()
specifier|public
name|void
name|testWebAppProxyServerMainMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|WebAppProxyServer
name|mainServer
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|,
literal|"localhost:9099"
argument_list|)
expr_stmt|;
try|try
block|{
name|mainServer
operator|=
name|WebAppProxyServer
operator|.
name|startServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|20
decl_stmt|;
name|URL
name|wrongUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:9099/proxy/app"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|proxyConn
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|counter
operator|--
expr_stmt|;
try|try
block|{
name|proxyConn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|wrongUrl
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
comment|// server started ok
name|counter
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|proxyConn
argument_list|)
expr_stmt|;
comment|// wrong application Id
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|,
name|proxyConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mainServer
operator|!=
literal|null
condition|)
block|{
name|mainServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|readInputStream (InputStream input)
specifier|private
name|String
name|readInputStream
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|data
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
DECL|method|isResponseCookiePresent (HttpURLConnection proxyConn, String expectedName, String expectedValue)
specifier|private
name|boolean
name|isResponseCookiePresent
parameter_list|(
name|HttpURLConnection
name|proxyConn
parameter_list|,
name|String
name|expectedName
parameter_list|,
name|String
name|expectedValue
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headerFields
init|=
name|proxyConn
operator|.
name|getHeaderFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cookiesHeader
init|=
name|headerFields
operator|.
name|get
argument_list|(
literal|"Set-Cookie"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookiesHeader
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|cookie
range|:
name|cookiesHeader
control|)
block|{
name|HttpCookie
name|c
init|=
name|HttpCookie
operator|.
name|parse
argument_list|(
name|cookie
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedName
argument_list|)
operator|&&
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|AfterClass
DECL|method|stop ()
specifier|public
specifier|static
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
try|try
block|{
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
block|}
DECL|class|WebAppProxyServerForTest
specifier|private
class|class
name|WebAppProxyServerForTest
extends|extends
name|CompositeService
block|{
DECL|field|proxy
specifier|private
name|WebAppProxyForTest
name|proxy
init|=
literal|null
decl_stmt|;
DECL|method|WebAppProxyServerForTest ()
specifier|public
name|WebAppProxyServerForTest
parameter_list|()
block|{
name|super
argument_list|(
name|WebAppProxyServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|proxy
operator|=
operator|new
name|WebAppProxyForTest
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WebAppProxyForTest
specifier|private
class|class
name|WebAppProxyForTest
extends|extends
name|WebAppProxy
block|{
DECL|field|proxyServer
name|HttpServer2
name|proxyServer
decl_stmt|;
DECL|field|appReportFetcher
name|AppReportFetcherForTest
name|appReportFetcher
decl_stmt|;
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|bindAddress
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|)
decl_stmt|;
name|bindAddress
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|bindAddress
argument_list|,
literal|':'
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|AccessControlList
name|acl
init|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
decl_stmt|;
name|proxyServer
operator|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"proxy"
argument_list|)
operator|.
name|addEndpoint
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|bindAddress
operator|+
literal|":0"
argument_list|)
argument_list|)
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setACL
argument_list|(
name|acl
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|proxyServer
operator|.
name|addServlet
argument_list|(
name|ProxyUriUtils
operator|.
name|PROXY_SERVLET_NAME
argument_list|,
name|ProxyUriUtils
operator|.
name|PROXY_PATH_SPEC
argument_list|,
name|WebAppProxyServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|appReportFetcher
operator|=
operator|new
name|AppReportFetcherForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|setAttribute
argument_list|(
name|FETCHER_ATTRIBUTE
argument_list|,
name|appReportFetcher
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|setAttribute
argument_list|(
name|IS_SECURITY_ENABLED_ATTRIBUTE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|String
name|proxy
init|=
name|WebAppUtils
operator|.
name|getProxyHostAndPort
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|proxyParts
init|=
name|proxy
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|proxyHost
init|=
name|proxyParts
index|[
literal|0
index|]
decl_stmt|;
name|proxyServer
operator|.
name|setAttribute
argument_list|(
name|PROXY_HOST_ATTRIBUTE
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
name|proxyServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Proxy server is started at port {}"
argument_list|,
name|proxyServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AppReportFetcherForTest
specifier|private
class|class
name|AppReportFetcherForTest
extends|extends
name|AppReportFetcher
block|{
DECL|field|answer
name|int
name|answer
init|=
literal|0
decl_stmt|;
DECL|method|AppReportFetcherForTest (Configuration conf)
specifier|public
name|AppReportFetcherForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplicationReport (ApplicationId appId)
specifier|public
name|FetchedAppReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
return|return
name|getDefaultApplicationReport
argument_list|(
name|appId
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
literal|2
condition|)
block|{
name|FetchedAppReport
name|result
init|=
name|getDefaultApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|result
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|setUser
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
literal|3
condition|)
block|{
name|FetchedAppReport
name|result
init|=
name|getDefaultApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|result
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|setYarnApplicationState
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
literal|4
condition|)
block|{
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application is not found"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
literal|5
condition|)
block|{
comment|// test user-provided path and query parameter can be appended to the
comment|// original tracking url
name|FetchedAppReport
name|result
init|=
name|getDefaultApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|result
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|setOriginalTrackingUrl
argument_list|(
literal|"localhost:"
operator|+
name|originalPort
operator|+
literal|"/foo/bar?a=b#main"
argument_list|)
expr_stmt|;
name|result
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|setYarnApplicationState
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
literal|6
condition|)
block|{
return|return
name|getDefaultApplicationReport
argument_list|(
name|appId
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/*      * If this method is called with isTrackingUrl=false, no tracking url      * will set in the app report. Hence, there will be a connection exception      * when the prxyCon tries to connect.      */
DECL|method|getDefaultApplicationReport (ApplicationId appId, boolean isTrackingUrl)
specifier|private
name|FetchedAppReport
name|getDefaultApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|boolean
name|isTrackingUrl
parameter_list|)
block|{
name|FetchedAppReport
name|fetchedReport
decl_stmt|;
name|ApplicationReport
name|result
init|=
operator|new
name|ApplicationReportPBImpl
argument_list|()
decl_stmt|;
name|result
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|result
operator|.
name|setYarnApplicationState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|result
operator|.
name|setUser
argument_list|(
name|CommonConfigurationKeys
operator|.
name|DEFAULT_HADOOP_HTTP_STATIC_USER
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTrackingUrl
condition|)
block|{
name|result
operator|.
name|setOriginalTrackingUrl
argument_list|(
literal|"localhost:"
operator|+
name|originalPort
operator|+
literal|"/foo/bar"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|fetchedReport
operator|=
operator|new
name|FetchedAppReport
argument_list|(
name|result
argument_list|,
name|AppReportSource
operator|.
name|AHS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fetchedReport
operator|=
operator|new
name|FetchedAppReport
argument_list|(
name|result
argument_list|,
name|AppReportSource
operator|.
name|RM
argument_list|)
expr_stmt|;
block|}
return|return
name|fetchedReport
return|;
block|}
DECL|method|getDefaultApplicationReport (ApplicationId appId)
specifier|private
name|FetchedAppReport
name|getDefaultApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|getDefaultApplicationReport
argument_list|(
name|appId
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

