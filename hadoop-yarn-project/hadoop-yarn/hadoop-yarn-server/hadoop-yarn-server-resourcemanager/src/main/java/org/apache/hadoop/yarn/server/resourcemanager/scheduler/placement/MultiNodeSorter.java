begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Common node sorting class which will do sorting based on policy spec.  * @param<N> extends SchedulerNode.  */
end_comment

begin_class
DECL|class|MultiNodeSorter
specifier|public
class|class
name|MultiNodeSorter
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
extends|extends
name|AbstractService
block|{
DECL|field|multiNodePolicy
specifier|private
name|MultiNodeLookupPolicy
argument_list|<
name|N
argument_list|>
name|multiNodePolicy
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiNodeSorter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ScheduledExecutorService which schedules the PreemptionChecker to run
comment|// periodically.
DECL|field|ses
specifier|private
name|ScheduledExecutorService
name|ses
decl_stmt|;
DECL|field|handler
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|handler
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|policySpec
specifier|private
name|MultiNodePolicySpec
name|policySpec
decl_stmt|;
DECL|method|MultiNodeSorter (RMContext rmContext, MultiNodePolicySpec policy)
specifier|public
name|MultiNodeSorter
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|MultiNodePolicySpec
name|policy
parameter_list|)
block|{
name|super
argument_list|(
literal|"MultiNodeLookupPolicy"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|policySpec
operator|=
name|policy
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMultiNodeLookupPolicy ()
specifier|public
specifier|synchronized
name|MultiNodeLookupPolicy
argument_list|<
name|N
argument_list|>
name|getMultiNodeLookupPolicy
parameter_list|()
block|{
return|return
name|multiNodePolicy
return|;
block|}
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing MultiNodeSorter="
operator|+
name|policySpec
operator|.
name|getPolicyName
argument_list|()
operator|+
literal|", with sorting interval="
operator|+
name|policySpec
operator|.
name|getSortingInterval
argument_list|()
argument_list|)
expr_stmt|;
name|initPolicy
argument_list|(
name|policySpec
operator|.
name|getPolicyName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initPolicy (String policyName)
name|void
name|initPolicy
parameter_list|(
name|String
name|policyName
parameter_list|)
throws|throws
name|YarnException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|policyClass
decl_stmt|;
try|try
block|{
name|policyClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|policyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Invalid policy name:"
operator|+
name|policyName
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|multiNodePolicy
operator|=
operator|(
name|MultiNodeLookupPolicy
argument_list|<
name|N
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|policyClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting SchedulingMonitor="
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|stopped
operator|:
literal|"starting when already stopped"
assert|;
name|ses
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Start sorter thread only if sorting interval is a +ve value.
if|if
condition|(
name|policySpec
operator|.
name|getSortingInterval
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|handler
operator|=
name|ses
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|SortingThread
argument_list|()
argument_list|,
literal|0
argument_list|,
name|policySpec
operator|.
name|getSortingInterval
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ses
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|VisibleForTesting
DECL|method|reSortClusterNodes ()
specifier|public
name|void
name|reSortClusterNodes
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeLabels
operator|.
name|addAll
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getClusterNodeLabelNames
argument_list|()
argument_list|)
expr_stmt|;
name|nodeLabels
operator|.
name|add
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|label
range|:
name|nodeLabels
control|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|SchedulerNode
argument_list|>
name|nodesByPartition
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SchedulerNode
argument_list|>
name|nodes
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|getNodesPerPartition
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
operator|&&
operator|!
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodes
operator|.
name|forEach
argument_list|(
name|n
lambda|->
name|nodesByPartition
operator|.
name|put
argument_list|(
name|n
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|multiNodePolicy
operator|.
name|addAndRefreshNodesSet
argument_list|(
operator|(
name|Collection
argument_list|<
name|N
argument_list|>
operator|)
name|nodesByPartition
operator|.
name|values
argument_list|()
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SortingThread
specifier|private
class|class
name|SortingThread
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|reSortClusterNodes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// The preemption monitor does not alter structures nor do structures
comment|// persist across invocations. Therefore, log, skip, and retry.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception raised while executing multinode"
operator|+
literal|" sorter, skip this run..., exception="
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify whether sorter thread is running or not.    *    * @return true if sorter thread is running, false otherwise.    */
DECL|method|isSorterThreadRunning ()
specifier|public
name|boolean
name|isSorterThreadRunning
parameter_list|()
block|{
return|return
operator|(
name|handler
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

