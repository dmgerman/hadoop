begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|JQueryUI
operator|.
name|DATATABLES_ID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|RMNodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|SubView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|TR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|NodeLabelsPage
specifier|public
class|class
name|NodeLabelsPage
extends|extends
name|RmView
block|{
DECL|class|NodeLabelsBlock
specifier|static
class|class
name|NodeLabelsBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|rm
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
annotation|@
name|Inject
DECL|method|NodeLabelsBlock (ResourceManager rm, ViewContext ctx)
name|NodeLabelsBlock
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#nodelabels"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".name"
argument_list|,
literal|"Label Name"
argument_list|)
operator|.
name|th
argument_list|(
literal|".type"
argument_list|,
literal|"Label Type"
argument_list|)
operator|.
name|th
argument_list|(
literal|".numOfActiveNMs"
argument_list|,
literal|"Num Of Active NMs"
argument_list|)
operator|.
name|th
argument_list|(
literal|".totalResource"
argument_list|,
literal|"Total Resource"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|RMNodeLabelsManager
name|nlm
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNodeLabel
name|info
range|:
name|nlm
operator|.
name|pullRMNodeLabelsInfo
argument_list|()
control|)
block|{
name|TR
argument_list|<
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|row
init|=
name|tbody
operator|.
name|tr
argument_list|()
operator|.
name|td
argument_list|(
name|info
operator|.
name|getLabelName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|info
operator|.
name|getLabelName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
name|info
operator|.
name|getIsExclusive
argument_list|()
operator|)
condition|?
literal|"Exclusive Partition"
else|:
literal|"Non Exclusive Partition"
decl_stmt|;
name|row
operator|=
name|row
operator|.
name|td
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|int
name|nActiveNMs
init|=
name|info
operator|.
name|getNumActiveNMs
argument_list|()
decl_stmt|;
if|if
condition|(
name|nActiveNMs
operator|>
literal|0
condition|)
block|{
name|row
operator|=
name|row
operator|.
name|td
argument_list|()
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"nodes"
argument_list|,
literal|"?"
operator|+
name|YarnWebParams
operator|.
name|NODE_LABEL
operator|+
literal|"="
operator|+
name|info
operator|.
name|getLabelName
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nActiveNMs
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
name|row
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nActiveNMs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|td
argument_list|(
name|info
operator|.
name|getResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|tbody
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|preHead (Page.HTML<__> html)
annotation|@
name|Override
specifier|protected
name|void
name|preHead
parameter_list|(
name|Page
operator|.
name|HTML
argument_list|<
name|__
argument_list|>
name|html
parameter_list|)
block|{
name|commonPreHead
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|String
name|title
init|=
literal|"Node labels of the cluster"
decl_stmt|;
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|DATATABLES_ID
argument_list|,
literal|"nodelabels"
argument_list|)
expr_stmt|;
name|setTableStyles
argument_list|(
name|html
argument_list|,
literal|"nodelabels"
argument_list|,
literal|".healthStatus {width:10em}"
argument_list|,
literal|".healthReport {width:10em}"
argument_list|)
expr_stmt|;
block|}
DECL|method|content ()
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|content
parameter_list|()
block|{
return|return
name|NodeLabelsBlock
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

