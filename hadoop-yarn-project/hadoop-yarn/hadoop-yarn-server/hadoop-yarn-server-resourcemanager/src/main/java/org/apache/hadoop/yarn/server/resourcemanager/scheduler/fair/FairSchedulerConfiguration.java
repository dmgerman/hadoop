begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
operator|.
name|RESOURCE_REQUEST_VALUE_PATTERN
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Evolving
DECL|class|FairSchedulerConfiguration
specifier|public
class|class
name|FairSchedulerConfiguration
extends|extends
name|Configuration
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Resource Increment request grant-able by the FairScheduler.    * This property is looked up in the yarn-site.xml.    * @deprecated The preferred way to configure the increment is by using the    * yarn.resource-types.{RESOURCE_NAME}.increment-allocation property,    * for memory: yarn.resource-types.memory-mb.increment-allocation    */
annotation|@
name|Deprecated
DECL|field|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
init|=
name|YarnConfiguration
operator|.
name|YARN_PREFIX
operator|+
literal|"scheduler.increment-allocation-mb"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB
init|=
literal|1024
decl_stmt|;
comment|/**    * Resource Increment request grant-able by the FairScheduler.    * This property is looked up in the yarn-site.xml.    * @deprecated The preferred way to configure the increment is by using the    * yarn.resource-types.{RESOURCE_NAME}.increment-allocation property,    * for CPU: yarn.resource-types.vcores.increment-allocation    */
annotation|@
name|Deprecated
DECL|field|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
init|=
name|YarnConfiguration
operator|.
name|YARN_PREFIX
operator|+
literal|"scheduler.increment-allocation-vcores"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
init|=
literal|1
decl_stmt|;
comment|/** Threshold for container size for making a container reservation as a    * multiple of increment allocation. Only container sizes above this are    * allowed to reserve a node */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
name|RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
init|=
name|YarnConfiguration
operator|.
name|YARN_PREFIX
operator|+
literal|"scheduler.reservation-threshold.increment-multiple"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
DECL|field|DEFAULT_RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
name|DEFAULT_RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
init|=
literal|2f
decl_stmt|;
DECL|field|CONF_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONF_PREFIX
init|=
literal|"yarn.scheduler.fair."
decl_stmt|;
comment|/**    * Used during FS-&gt;CS conversion. When enabled, background threads are    * not started. This property should NOT be used by end-users!    */
DECL|field|MIGRATION_MODE
specifier|public
specifier|static
specifier|final
name|String
name|MIGRATION_MODE
init|=
name|CONF_PREFIX
operator|+
literal|"migration.mode"
decl_stmt|;
DECL|field|ALLOCATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|ALLOCATION_FILE
init|=
name|CONF_PREFIX
operator|+
literal|"allocation.file"
decl_stmt|;
DECL|field|DEFAULT_ALLOCATION_FILE
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_ALLOCATION_FILE
init|=
literal|"fair-scheduler.xml"
decl_stmt|;
comment|/** Whether pools can be created that were not specified in the FS configuration file    */
DECL|field|ALLOW_UNDECLARED_POOLS
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_UNDECLARED_POOLS
init|=
name|CONF_PREFIX
operator|+
literal|"allow-undeclared-pools"
decl_stmt|;
DECL|field|DEFAULT_ALLOW_UNDECLARED_POOLS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ALLOW_UNDECLARED_POOLS
init|=
literal|true
decl_stmt|;
comment|/** Whether to use the user name as the queue name (instead of "default") if    * the request does not specify a queue. */
DECL|field|USER_AS_DEFAULT_QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|USER_AS_DEFAULT_QUEUE
init|=
name|CONF_PREFIX
operator|+
literal|"user-as-default-queue"
decl_stmt|;
DECL|field|DEFAULT_USER_AS_DEFAULT_QUEUE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USER_AS_DEFAULT_QUEUE
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_LOCALITY_THRESHOLD
specifier|protected
specifier|static
specifier|final
name|float
name|DEFAULT_LOCALITY_THRESHOLD
init|=
operator|-
literal|1.0f
decl_stmt|;
comment|/** Cluster threshold for node locality. */
DECL|field|LOCALITY_THRESHOLD_NODE
specifier|public
specifier|static
specifier|final
name|String
name|LOCALITY_THRESHOLD_NODE
init|=
name|CONF_PREFIX
operator|+
literal|"locality.threshold.node"
decl_stmt|;
DECL|field|DEFAULT_LOCALITY_THRESHOLD_NODE
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_LOCALITY_THRESHOLD_NODE
init|=
name|DEFAULT_LOCALITY_THRESHOLD
decl_stmt|;
comment|/** Cluster threshold for rack locality. */
DECL|field|LOCALITY_THRESHOLD_RACK
specifier|public
specifier|static
specifier|final
name|String
name|LOCALITY_THRESHOLD_RACK
init|=
name|CONF_PREFIX
operator|+
literal|"locality.threshold.rack"
decl_stmt|;
DECL|field|DEFAULT_LOCALITY_THRESHOLD_RACK
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_LOCALITY_THRESHOLD_RACK
init|=
name|DEFAULT_LOCALITY_THRESHOLD
decl_stmt|;
comment|/**    * Delay for node locality.    * @deprecated Continuous scheduling is known to cause locking issue inside    * Only used when {@link #CONTINUOUS_SCHEDULING_ENABLED} is enabled    */
annotation|@
name|Deprecated
DECL|field|LOCALITY_DELAY_NODE_MS
specifier|protected
specifier|static
specifier|final
name|String
name|LOCALITY_DELAY_NODE_MS
init|=
name|CONF_PREFIX
operator|+
literal|"locality-delay-node-ms"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_LOCALITY_DELAY_NODE_MS
specifier|protected
specifier|static
specifier|final
name|long
name|DEFAULT_LOCALITY_DELAY_NODE_MS
init|=
operator|-
literal|1L
decl_stmt|;
comment|/**    * Delay for rack locality.    * @deprecated Continuous scheduling is known to cause locking issue inside    * Only used when {@link #CONTINUOUS_SCHEDULING_ENABLED} is enabled    */
annotation|@
name|Deprecated
DECL|field|LOCALITY_DELAY_RACK_MS
specifier|protected
specifier|static
specifier|final
name|String
name|LOCALITY_DELAY_RACK_MS
init|=
name|CONF_PREFIX
operator|+
literal|"locality-delay-rack-ms"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_LOCALITY_DELAY_RACK_MS
specifier|protected
specifier|static
specifier|final
name|long
name|DEFAULT_LOCALITY_DELAY_RACK_MS
init|=
operator|-
literal|1L
decl_stmt|;
comment|/**    * Enable continuous scheduling or not.    * @deprecated Continuous scheduling is known to cause locking issue inside    * the scheduler in larger cluster, more than 100 nodes, use    * {@link #ASSIGN_MULTIPLE} to improve  container allocation ramp up.    */
annotation|@
name|Deprecated
DECL|field|CONTINUOUS_SCHEDULING_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|CONTINUOUS_SCHEDULING_ENABLED
init|=
name|CONF_PREFIX
operator|+
literal|"continuous-scheduling-enabled"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_CONTINUOUS_SCHEDULING_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CONTINUOUS_SCHEDULING_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * Sleep time of each pass in continuous scheduling (5ms in default).    * @deprecated Continuous scheduling is known to cause locking issue inside    * Only used when {@link #CONTINUOUS_SCHEDULING_ENABLED} is enabled    */
annotation|@
name|Deprecated
DECL|field|CONTINUOUS_SCHEDULING_SLEEP_MS
specifier|public
specifier|static
specifier|final
name|String
name|CONTINUOUS_SCHEDULING_SLEEP_MS
init|=
name|CONF_PREFIX
operator|+
literal|"continuous-scheduling-sleep-ms"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS
init|=
literal|5
decl_stmt|;
comment|/** Whether preemption is enabled. */
DECL|field|PREEMPTION
specifier|public
specifier|static
specifier|final
name|String
name|PREEMPTION
init|=
name|CONF_PREFIX
operator|+
literal|"preemption"
decl_stmt|;
DECL|field|DEFAULT_PREEMPTION
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PREEMPTION
init|=
literal|false
decl_stmt|;
DECL|field|PREEMPTION_THRESHOLD
specifier|protected
specifier|static
specifier|final
name|String
name|PREEMPTION_THRESHOLD
init|=
name|CONF_PREFIX
operator|+
literal|"preemption.cluster-utilization-threshold"
decl_stmt|;
DECL|field|DEFAULT_PREEMPTION_THRESHOLD
specifier|protected
specifier|static
specifier|final
name|float
name|DEFAULT_PREEMPTION_THRESHOLD
init|=
literal|0.8f
decl_stmt|;
DECL|field|WAIT_TIME_BEFORE_KILL
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_TIME_BEFORE_KILL
init|=
name|CONF_PREFIX
operator|+
literal|"waitTimeBeforeKill"
decl_stmt|;
DECL|field|DEFAULT_WAIT_TIME_BEFORE_KILL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_WAIT_TIME_BEFORE_KILL
init|=
literal|15000
decl_stmt|;
comment|/**    * Postfix for resource allocation increments in the    * yarn.resource-types.{RESOURCE_NAME}.increment-allocation property.    */
DECL|field|INCREMENT_ALLOCATION
specifier|static
specifier|final
name|String
name|INCREMENT_ALLOCATION
init|=
literal|".increment-allocation"
decl_stmt|;
comment|/**    * Configurable delay (ms) before an app's starvation is considered after    * it is identified. This is to give the scheduler enough time to    * allocate containers post preemption. This delay is added to the    * {@link #WAIT_TIME_BEFORE_KILL} and enough heartbeats.    *    * This is intended to be a backdoor on production clusters, and hence    * intentionally not documented.    */
DECL|field|WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
init|=
name|CONF_PREFIX
operator|+
literal|"waitTimeBeforeNextStarvationCheck"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
name|DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
init|=
literal|10000
decl_stmt|;
comment|/** Whether to assign multiple containers in one check-in. */
DECL|field|ASSIGN_MULTIPLE
specifier|public
specifier|static
specifier|final
name|String
name|ASSIGN_MULTIPLE
init|=
name|CONF_PREFIX
operator|+
literal|"assignmultiple"
decl_stmt|;
DECL|field|DEFAULT_ASSIGN_MULTIPLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ASSIGN_MULTIPLE
init|=
literal|false
decl_stmt|;
comment|/** Whether to give more weight to apps requiring many resources. */
DECL|field|SIZE_BASED_WEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|SIZE_BASED_WEIGHT
init|=
name|CONF_PREFIX
operator|+
literal|"sizebasedweight"
decl_stmt|;
DECL|field|DEFAULT_SIZE_BASED_WEIGHT
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SIZE_BASED_WEIGHT
init|=
literal|false
decl_stmt|;
comment|/** Maximum number of containers to assign on each check-in. */
DECL|field|DYNAMIC_MAX_ASSIGN
specifier|public
specifier|static
specifier|final
name|String
name|DYNAMIC_MAX_ASSIGN
init|=
name|CONF_PREFIX
operator|+
literal|"dynamic.max.assign"
decl_stmt|;
DECL|field|DEFAULT_DYNAMIC_MAX_ASSIGN
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_DYNAMIC_MAX_ASSIGN
init|=
literal|true
decl_stmt|;
comment|/**    * Specify exact number of containers to assign on each heartbeat, if dynamic    * max assign is turned off.    */
DECL|field|MAX_ASSIGN
specifier|public
specifier|static
specifier|final
name|String
name|MAX_ASSIGN
init|=
name|CONF_PREFIX
operator|+
literal|"max.assign"
decl_stmt|;
DECL|field|DEFAULT_MAX_ASSIGN
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_ASSIGN
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The update interval for calculating resources in FairScheduler .*/
DECL|field|UPDATE_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_INTERVAL_MS
init|=
name|CONF_PREFIX
operator|+
literal|"update-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_UPDATE_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_UPDATE_INTERVAL_MS
init|=
literal|500
decl_stmt|;
comment|/** Ratio of nodes available for an app to make an reservation on. */
DECL|field|RESERVABLE_NODES
specifier|public
specifier|static
specifier|final
name|String
name|RESERVABLE_NODES
init|=
name|CONF_PREFIX
operator|+
literal|"reservable-nodes"
decl_stmt|;
DECL|field|RESERVABLE_NODES_DEFAULT
specifier|public
specifier|static
specifier|final
name|float
name|RESERVABLE_NODES_DEFAULT
init|=
literal|0.05f
decl_stmt|;
DECL|field|INVALID_RESOURCE_DEFINITION_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_RESOURCE_DEFINITION_PREFIX
init|=
literal|"Error reading resource config--invalid resource definition: "
decl_stmt|;
DECL|field|RESOURCE_PERCENTAGE_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_PERCENTAGE_PATTERN
init|=
literal|"^(-?(\\d+)(\\.\\d*)?)\\s*%\\s*"
decl_stmt|;
DECL|field|RESOURCE_VALUE_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_VALUE_PATTERN
init|=
literal|"^(-?\\d+)(\\.\\d*)?\\s*"
decl_stmt|;
comment|/**    * For resources separated by spaces instead of a comma.    */
DECL|field|RESOURCES_WITH_SPACES_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCES_WITH_SPACES_PATTERN
init|=
literal|"-?\\d+(?:\\.\\d*)?\\s*[a-z]+\\s*"
decl_stmt|;
DECL|method|FairSchedulerConfiguration ()
specifier|public
name|FairSchedulerConfiguration
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|FairSchedulerConfiguration (Configuration conf)
specifier|public
name|FairSchedulerConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getMinimumAllocation ()
specifier|public
name|Resource
name|getMinimumAllocation
parameter_list|()
block|{
name|int
name|mem
init|=
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|int
name|cpu
init|=
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|mem
argument_list|,
name|cpu
argument_list|)
return|;
block|}
DECL|method|getMaximumAllocation ()
specifier|public
name|Resource
name|getMaximumAllocation
parameter_list|()
block|{
name|int
name|mem
init|=
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|int
name|cpu
init|=
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|mem
argument_list|,
name|cpu
argument_list|)
return|;
block|}
DECL|method|getIncrementAllocation ()
specifier|public
name|Resource
name|getIncrementAllocation
parameter_list|()
block|{
name|Long
name|memory
init|=
literal|null
decl_stmt|;
name|Integer
name|vCores
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|others
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceInformation
index|[]
name|resourceTypes
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|name
init|=
name|resourceTypes
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|propertyKey
init|=
name|getAllocationIncrementPropKey
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|propValue
init|=
name|get
argument_list|(
name|propertyKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|matcher
init|=
name|RESOURCE_REQUEST_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|propValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|unit
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|valueInDefaultUnits
init|=
name|getValueInDefaultUnits
argument_list|(
name|value
argument_list|,
name|unit
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|others
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|valueInDefaultUnits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|propertyKey
operator|+
literal|" is not in \"value [unit]\" format: "
operator|+
name|propValue
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|others
operator|.
name|containsKey
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|memory
operator|=
name|others
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
argument_list|(
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|overridingKey
init|=
name|getAllocationIncrementPropKey
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration "
operator|+
name|overridingKey
operator|+
literal|"="
operator|+
name|get
argument_list|(
name|overridingKey
argument_list|)
operator|+
literal|" is overriding the "
operator|+
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|get
argument_list|(
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|)
operator|+
literal|" property"
argument_list|)
expr_stmt|;
block|}
name|others
operator|.
name|remove
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memory
operator|=
name|getLong
argument_list|(
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
name|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|others
operator|.
name|containsKey
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|vCores
operator|=
name|others
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|get
argument_list|(
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|overridingKey
init|=
name|getAllocationIncrementPropKey
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration "
operator|+
name|overridingKey
operator|+
literal|"="
operator|+
name|get
argument_list|(
name|overridingKey
argument_list|)
operator|+
literal|" is overriding the "
operator|+
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
operator|+
literal|"="
operator|+
name|get
argument_list|(
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|)
operator|+
literal|" property"
argument_list|)
expr_stmt|;
block|}
name|others
operator|.
name|remove
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vCores
operator|=
name|getInt
argument_list|(
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|,
name|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|)
expr_stmt|;
block|}
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|,
name|others
argument_list|)
return|;
block|}
DECL|method|getValueInDefaultUnits (long value, String unit, String resourceName)
specifier|private
name|long
name|getValueInDefaultUnits
parameter_list|(
name|long
name|value
parameter_list|,
name|String
name|unit
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|unit
operator|.
name|isEmpty
argument_list|()
condition|?
name|value
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|unit
argument_list|,
name|ResourceUtils
operator|.
name|getDefaultUnit
argument_list|(
name|resourceName
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|getAllocationIncrementPropKey (String resourceName)
specifier|private
name|String
name|getAllocationIncrementPropKey
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resourceName
operator|+
name|INCREMENT_ALLOCATION
return|;
block|}
DECL|method|getReservationThresholdIncrementMultiple ()
specifier|public
name|float
name|getReservationThresholdIncrementMultiple
parameter_list|()
block|{
return|return
name|getFloat
argument_list|(
name|RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
argument_list|,
name|DEFAULT_RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
argument_list|)
return|;
block|}
DECL|method|getLocalityThresholdNode ()
specifier|public
name|float
name|getLocalityThresholdNode
parameter_list|()
block|{
return|return
name|getFloat
argument_list|(
name|LOCALITY_THRESHOLD_NODE
argument_list|,
name|DEFAULT_LOCALITY_THRESHOLD_NODE
argument_list|)
return|;
block|}
DECL|method|getLocalityThresholdRack ()
specifier|public
name|float
name|getLocalityThresholdRack
parameter_list|()
block|{
return|return
name|getFloat
argument_list|(
name|LOCALITY_THRESHOLD_RACK
argument_list|,
name|DEFAULT_LOCALITY_THRESHOLD_RACK
argument_list|)
return|;
block|}
comment|/**    * Whether continuous scheduling is turned on.    * @deprecated use {@link #ASSIGN_MULTIPLE} to improve container allocation    * ramp up.    * @return whether continuous scheduling is enabled    */
annotation|@
name|Deprecated
DECL|method|isContinuousSchedulingEnabled ()
specifier|public
name|boolean
name|isContinuousSchedulingEnabled
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
name|DEFAULT_CONTINUOUS_SCHEDULING_ENABLED
argument_list|)
return|;
block|}
comment|/**    * The sleep time of the continuous scheduler thread.    * @deprecated linked to {@link #CONTINUOUS_SCHEDULING_ENABLED} deprecation    * @return sleep time in ms    */
annotation|@
name|Deprecated
DECL|method|getContinuousSchedulingSleepMs ()
specifier|public
name|int
name|getContinuousSchedulingSleepMs
parameter_list|()
block|{
return|return
name|getInt
argument_list|(
name|CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|,
name|DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|)
return|;
block|}
comment|/**    * Delay in milliseconds for locality fallback node to rack.    * @deprecated linked to {@link #CONTINUOUS_SCHEDULING_ENABLED} deprecation    * @return delay in ms    */
annotation|@
name|Deprecated
DECL|method|getLocalityDelayNodeMs ()
specifier|public
name|long
name|getLocalityDelayNodeMs
parameter_list|()
block|{
return|return
name|getLong
argument_list|(
name|LOCALITY_DELAY_NODE_MS
argument_list|,
name|DEFAULT_LOCALITY_DELAY_NODE_MS
argument_list|)
return|;
block|}
comment|/**    * Delay in milliseconds for locality fallback rack to other.    * @deprecated linked to {@link #CONTINUOUS_SCHEDULING_ENABLED} deprecation    * @return delay in ms    */
annotation|@
name|Deprecated
DECL|method|getLocalityDelayRackMs ()
specifier|public
name|long
name|getLocalityDelayRackMs
parameter_list|()
block|{
return|return
name|getLong
argument_list|(
name|LOCALITY_DELAY_RACK_MS
argument_list|,
name|DEFAULT_LOCALITY_DELAY_RACK_MS
argument_list|)
return|;
block|}
DECL|method|getPreemptionEnabled ()
specifier|public
name|boolean
name|getPreemptionEnabled
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|PREEMPTION
argument_list|,
name|DEFAULT_PREEMPTION
argument_list|)
return|;
block|}
DECL|method|getPreemptionUtilizationThreshold ()
specifier|public
name|float
name|getPreemptionUtilizationThreshold
parameter_list|()
block|{
return|return
name|getFloat
argument_list|(
name|PREEMPTION_THRESHOLD
argument_list|,
name|DEFAULT_PREEMPTION_THRESHOLD
argument_list|)
return|;
block|}
DECL|method|getAssignMultiple ()
specifier|public
name|boolean
name|getAssignMultiple
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|ASSIGN_MULTIPLE
argument_list|,
name|DEFAULT_ASSIGN_MULTIPLE
argument_list|)
return|;
block|}
DECL|method|isMaxAssignDynamic ()
specifier|public
name|boolean
name|isMaxAssignDynamic
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|DYNAMIC_MAX_ASSIGN
argument_list|,
name|DEFAULT_DYNAMIC_MAX_ASSIGN
argument_list|)
return|;
block|}
DECL|method|getMaxAssign ()
specifier|public
name|int
name|getMaxAssign
parameter_list|()
block|{
return|return
name|getInt
argument_list|(
name|MAX_ASSIGN
argument_list|,
name|DEFAULT_MAX_ASSIGN
argument_list|)
return|;
block|}
DECL|method|getSizeBasedWeight ()
specifier|public
name|boolean
name|getSizeBasedWeight
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|SIZE_BASED_WEIGHT
argument_list|,
name|DEFAULT_SIZE_BASED_WEIGHT
argument_list|)
return|;
block|}
DECL|method|getWaitTimeBeforeNextStarvationCheck ()
specifier|public
name|long
name|getWaitTimeBeforeNextStarvationCheck
parameter_list|()
block|{
return|return
name|getLong
argument_list|(
name|WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
argument_list|,
name|DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
argument_list|)
return|;
block|}
DECL|method|getWaitTimeBeforeKill ()
specifier|public
name|int
name|getWaitTimeBeforeKill
parameter_list|()
block|{
return|return
name|getInt
argument_list|(
name|WAIT_TIME_BEFORE_KILL
argument_list|,
name|DEFAULT_WAIT_TIME_BEFORE_KILL
argument_list|)
return|;
block|}
DECL|method|getUsePortForNodeName ()
specifier|public
name|boolean
name|getUsePortForNodeName
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME
argument_list|)
return|;
block|}
DECL|method|getReservableNodes ()
specifier|public
name|float
name|getReservableNodes
parameter_list|()
block|{
return|return
name|getFloat
argument_list|(
name|RESERVABLE_NODES
argument_list|,
name|RESERVABLE_NODES_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Parses a resource config value in one of three forms:    *<ol>    *<li>Percentage:&quot;50%&quot; or&quot;40% memory, 60% cpu&quot;</li>    *<li>New style resources:&quot;vcores=10, memory-mb=1024&quot;    * or&quot;vcores=60%, memory-mb=40%&quot;</li>    *<li>Old style resources:&quot;1024 mb, 10 vcores&quot;</li>    *</ol>    * In new style resources, any resource that is not specified will be    * set to {@link Long#MAX_VALUE} or 100%, as appropriate. Also, in the new    * style resources, units are not allowed. Units are assumed from the resource    * manager's settings for the resources when the value isn't a percentage.    *    * @param value the resource definition to parse    * @return a {@link ConfigurableResource} that represents the parsed value    * @throws AllocationConfigurationException if the raw value is not a valid    * resource definition    */
DECL|method|parseResourceConfigValue (String value)
specifier|public
specifier|static
name|ConfigurableResource
name|parseResourceConfigValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
return|return
name|parseResourceConfigValue
argument_list|(
name|value
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**    * Parses a resource config value in one of three forms:    *<ol>    *<li>Percentage:&quot;50%&quot; or&quot;40% memory, 60% cpu&quot;</li>    *<li>New style resources:&quot;vcores=10, memory-mb=1024&quot;    * or&quot;vcores=60%, memory-mb=40%&quot;</li>    *<li>Old style resources:&quot;1024 mb, 10 vcores&quot;</li>    *</ol>    * In new style resources, any resource that is not specified will be    * set to {@code missing} or 0%, as appropriate. Also, in the new style    * resources, units are not allowed. Units are assumed from the resource    * manager's settings for the resources when the value isn't a percentage.    *    * The {@code missing} parameter is only used in the case of new style    * resources without percentages. With new style resources with percentages,    * any missing resources will be assumed to be 100% because percentages are    * only used with maximum resource limits.    *    * @param value the resource definition to parse    * @param missing the value to use for any unspecified resources    * @return a {@link ConfigurableResource} that represents the parsed value    * @throws AllocationConfigurationException if the raw value is not a valid    * resource definition    */
DECL|method|parseResourceConfigValue (String value, long missing)
specifier|public
specifier|static
name|ConfigurableResource
name|parseResourceConfigValue
parameter_list|(
name|String
name|value
parameter_list|,
name|long
name|missing
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|ConfigurableResource
name|configurableResource
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Error reading resource "
operator|+
literal|"config--the resource string is empty."
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|configurableResource
operator|=
name|parseNewStyleResource
argument_list|(
name|value
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|configurableResource
operator|=
name|parseOldStyleResourceAsPercentage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configurableResource
operator|=
name|parseOldStyleResource
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Error reading resource config"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|configurableResource
return|;
block|}
DECL|method|parseNewStyleResource (String value, long missing)
specifier|private
specifier|static
name|ConfigurableResource
name|parseNewStyleResource
parameter_list|(
name|String
name|value
parameter_list|,
name|long
name|missing
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|ConfigurableResource
name|configurableResource
decl_stmt|;
name|boolean
name|asPercent
init|=
name|value
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
if|if
condition|(
name|asPercent
condition|)
block|{
name|configurableResource
operator|=
operator|new
name|ConfigurableResource
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|configurableResource
operator|=
operator|new
name|ConfigurableResource
argument_list|(
name|missing
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|resources
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resources
control|)
block|{
name|String
index|[]
name|parts
init|=
name|resource
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
name|createConfigException
argument_list|(
name|value
argument_list|,
literal|"Every resource must be of the form: name=value."
argument_list|)
throw|;
block|}
name|String
name|resourceName
init|=
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|resourceValue
init|=
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|asPercent
condition|)
block|{
name|double
name|percentage
init|=
name|parseNewStyleResourceAsPercentage
argument_list|(
name|value
argument_list|,
name|resourceName
argument_list|,
name|resourceValue
argument_list|)
decl_stmt|;
name|configurableResource
operator|.
name|setPercentage
argument_list|(
name|resourceName
argument_list|,
name|percentage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|parsedValue
init|=
name|parseNewStyleResourceAsAbsoluteValue
argument_list|(
name|value
argument_list|,
name|resourceValue
argument_list|,
name|resourceName
argument_list|)
decl_stmt|;
name|configurableResource
operator|.
name|setValue
argument_list|(
name|resourceName
argument_list|,
name|parsedValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
name|createConfigException
argument_list|(
name|value
argument_list|,
literal|"The "
operator|+
literal|"resource name, \""
operator|+
name|resourceName
operator|+
literal|"\" was not "
operator|+
literal|"recognized. Please check the value of "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|" in the Resource "
operator|+
literal|"Manager's configuration files."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|configurableResource
return|;
block|}
DECL|method|parseNewStyleResourceAsPercentage ( String value, String resource, String resourceValue)
specifier|private
specifier|static
name|double
name|parseNewStyleResourceAsPercentage
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|resourceValue
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
try|try
block|{
return|return
name|findPercentage
argument_list|(
name|resourceValue
argument_list|,
name|resource
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AllocationConfigurationException
name|ex
parameter_list|)
block|{
throw|throw
name|createConfigException
argument_list|(
name|value
argument_list|,
literal|"The resource values must all be percentages. \""
operator|+
name|resourceValue
operator|+
literal|"\" is either not a non-negative number "
operator|+
literal|"or does not include the '%' symbol."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|parseNewStyleResourceAsAbsoluteValue (String value, String resourceValue, String resourceName)
specifier|private
specifier|static
name|long
name|parseNewStyleResourceAsAbsoluteValue
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|resourceValue
parameter_list|,
name|String
name|resourceName
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|long
name|parsedValue
decl_stmt|;
try|try
block|{
name|parsedValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|createConfigException
argument_list|(
name|value
argument_list|,
literal|"The "
operator|+
literal|"resource values must all be integers. \""
operator|+
name|resourceValue
operator|+
literal|"\" is not an integer."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|parsedValue
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid value of "
operator|+
name|resourceName
operator|+
literal|": "
operator|+
name|parsedValue
operator|+
literal|", value should not be negative!"
argument_list|)
throw|;
block|}
return|return
name|parsedValue
return|;
block|}
DECL|method|parseOldStyleResourceAsPercentage ( String value)
specifier|private
specifier|static
name|ConfigurableResource
name|parseOldStyleResourceAsPercentage
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
return|return
operator|new
name|ConfigurableResource
argument_list|(
name|getResourcePercentage
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseOldStyleResource (String input)
specifier|private
specifier|static
name|ConfigurableResource
name|parseOldStyleResource
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|String
name|lowerCaseInput
init|=
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|String
index|[]
name|resources
init|=
name|lowerCaseInput
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|resources
operator|=
name|findOldStyleResourcesInSpaceSeparatedInput
argument_list|(
name|lowerCaseInput
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Cannot parse resource values from input: "
operator|+
name|input
argument_list|)
throw|;
block|}
block|}
specifier|final
name|int
name|memory
init|=
name|parseOldStyleResourceMemory
argument_list|(
name|resources
argument_list|)
decl_stmt|;
specifier|final
name|int
name|vcores
init|=
name|parseOldStyleResourceVcores
argument_list|(
name|resources
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfigurableResource
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
name|memory
argument_list|,
name|vcores
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findOldStyleResourcesInSpaceSeparatedInput ( String input)
specifier|private
specifier|static
name|String
index|[]
name|findOldStyleResourcesInSpaceSeparatedInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|RESOURCES_WITH_SPACES_PATTERN
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resources
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|parseOldStyleResourceMemory (String[] resources)
specifier|private
specifier|static
name|int
name|parseOldStyleResourceMemory
parameter_list|(
name|String
index|[]
name|resources
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|int
name|memory
init|=
name|findResource
argument_list|(
name|resources
argument_list|,
literal|"mb"
argument_list|)
decl_stmt|;
if|if
condition|(
name|memory
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid value of memory: "
operator|+
name|memory
operator|+
literal|", value should not be negative!"
argument_list|)
throw|;
block|}
return|return
name|memory
return|;
block|}
DECL|method|parseOldStyleResourceVcores (String[] resources)
specifier|private
specifier|static
name|int
name|parseOldStyleResourceVcores
parameter_list|(
name|String
index|[]
name|resources
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|int
name|vcores
init|=
name|findResource
argument_list|(
name|resources
argument_list|,
literal|"vcores"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vcores
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid value of vcores: "
operator|+
name|vcores
operator|+
literal|", value should not be negative!"
argument_list|)
throw|;
block|}
return|return
name|vcores
return|;
block|}
DECL|method|getResourcePercentage (String val)
specifier|private
specifier|static
name|double
index|[]
name|getResourcePercentage
parameter_list|(
name|String
name|val
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|int
name|numberOfKnownResourceTypes
init|=
name|ResourceUtils
operator|.
name|getNumberOfCountableResourceTypes
argument_list|()
decl_stmt|;
name|double
index|[]
name|resourcePercentage
init|=
operator|new
name|double
index|[
name|numberOfKnownResourceTypes
index|]
decl_stmt|;
name|String
index|[]
name|values
init|=
name|val
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|double
name|percentage
init|=
name|findPercentage
argument_list|(
name|values
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfKnownResourceTypes
condition|;
name|i
operator|++
control|)
block|{
name|resourcePercentage
index|[
name|i
index|]
operator|=
name|percentage
expr_stmt|;
block|}
block|}
else|else
block|{
name|resourcePercentage
index|[
literal|0
index|]
operator|=
name|findPercentage
argument_list|(
name|values
argument_list|,
literal|"memory"
argument_list|)
expr_stmt|;
name|resourcePercentage
index|[
literal|1
index|]
operator|=
name|findPercentage
argument_list|(
name|values
argument_list|,
literal|"cpu"
argument_list|)
expr_stmt|;
block|}
return|return
name|resourcePercentage
return|;
block|}
DECL|method|findPercentage (String resourceValue, String resource)
specifier|private
specifier|static
name|double
name|findPercentage
parameter_list|(
name|String
name|resourceValue
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
return|return
name|findPercentageInternal
argument_list|(
name|resource
argument_list|,
name|resourceValue
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|findPercentage (String[] resourceValues, String resource)
specifier|private
specifier|static
name|double
name|findPercentage
parameter_list|(
name|String
index|[]
name|resourceValues
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|String
name|resourceValue
init|=
name|findResourceFromValues
argument_list|(
name|resourceValues
argument_list|,
name|resource
argument_list|)
decl_stmt|;
return|return
name|findPercentageInternal
argument_list|(
name|resource
argument_list|,
name|resourceValue
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|findPercentageInternal (String resource, String resourceValue, boolean includeResourceInPattern)
specifier|private
specifier|static
name|double
name|findPercentageInternal
parameter_list|(
name|String
name|resource
parameter_list|,
name|String
name|resourceValue
parameter_list|,
name|boolean
name|includeResourceInPattern
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|Pattern
name|pattern
decl_stmt|;
if|if
condition|(
name|includeResourceInPattern
condition|)
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|RESOURCE_PERCENTAGE_PATTERN
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|RESOURCE_PERCENTAGE_PATTERN
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|resourceValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid percentage: "
operator|+
name|resourceValue
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid percentage of "
operator|+
name|resource
operator|+
literal|": "
operator|+
name|resourceValue
argument_list|)
throw|;
block|}
block|}
name|double
name|percentage
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|/
literal|100.0
decl_stmt|;
if|if
condition|(
name|percentage
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid percentage: "
operator|+
name|resourceValue
operator|+
literal|", percentage should not be negative!"
argument_list|)
throw|;
block|}
return|return
name|percentage
return|;
block|}
DECL|method|createConfigException ( String value, String message)
specifier|private
specifier|static
name|AllocationConfigurationException
name|createConfigException
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|createConfigException
argument_list|(
name|value
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createConfigException ( String value, String message, Throwable t)
specifier|private
specifier|static
name|AllocationConfigurationException
name|createConfigException
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
name|INVALID_RESOURCE_DEFINITION_PREFIX
operator|+
name|value
operator|+
literal|". "
operator|+
name|message
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AllocationConfigurationException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|AllocationConfigurationException
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
DECL|method|getUpdateInterval ()
specifier|public
name|long
name|getUpdateInterval
parameter_list|()
block|{
return|return
name|getLong
argument_list|(
name|UPDATE_INTERVAL_MS
argument_list|,
name|DEFAULT_UPDATE_INTERVAL_MS
argument_list|)
return|;
block|}
DECL|method|findResource (String[] resourceValues, String resource)
specifier|private
specifier|static
name|int
name|findResource
parameter_list|(
name|String
index|[]
name|resourceValues
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|String
name|resourceValue
init|=
name|findResourceFromValues
argument_list|(
name|resourceValues
argument_list|,
name|resource
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|RESOURCE_VALUE_PATTERN
operator|+
name|resource
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|resourceValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Invalid value of "
operator|+
operator|(
name|resource
operator|.
name|equals
argument_list|(
literal|"mb"
argument_list|)
condition|?
literal|"memory"
else|:
name|resource
operator|)
operator|+
literal|": "
operator|+
name|resourceValue
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findResourceFromValues (String[] resourceValues, String resource)
specifier|private
specifier|static
name|String
name|findResourceFromValues
parameter_list|(
name|String
index|[]
name|resourceValues
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
for|for
control|(
name|String
name|resourceValue
range|:
name|resourceValues
control|)
block|{
if|if
condition|(
name|resourceValue
operator|.
name|contains
argument_list|(
name|resource
argument_list|)
condition|)
block|{
return|return
name|resourceValue
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Missing resource: "
operator|+
name|resource
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

