begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_comment
comment|/**  * Metrics for capacity scheduler.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"yarn"
argument_list|)
DECL|class|CapacitySchedulerMetrics
specifier|public
class|class
name|CapacitySchedulerMetrics
block|{
DECL|field|isInitialized
specifier|private
specifier|static
name|AtomicBoolean
name|isInitialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|RECORD_INFO
specifier|private
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|info
argument_list|(
literal|"CapacitySchedulerMetrics"
argument_list|,
literal|"Metrics for the Yarn Capacity Scheduler"
argument_list|)
decl_stmt|;
DECL|field|allocate
annotation|@
name|Metric
argument_list|(
literal|"Scheduler allocate containers"
argument_list|)
name|MutableRate
name|allocate
decl_stmt|;
DECL|field|commitSuccess
annotation|@
name|Metric
argument_list|(
literal|"Scheduler commit success"
argument_list|)
name|MutableRate
name|commitSuccess
decl_stmt|;
DECL|field|commitFailure
annotation|@
name|Metric
argument_list|(
literal|"Scheduler commit failure"
argument_list|)
name|MutableRate
name|commitFailure
decl_stmt|;
DECL|field|nodeUpdate
annotation|@
name|Metric
argument_list|(
literal|"Scheduler node update"
argument_list|)
name|MutableRate
name|nodeUpdate
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|volatile
name|CapacitySchedulerMetrics
name|INSTANCE
init|=
literal|null
decl_stmt|;
DECL|field|registry
specifier|private
specifier|static
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|method|getMetrics ()
specifier|public
specifier|static
name|CapacitySchedulerMetrics
name|getMetrics
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|CapacitySchedulerMetrics
operator|.
name|class
init|)
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|CapacitySchedulerMetrics
argument_list|()
expr_stmt|;
name|registerMetrics
argument_list|()
expr_stmt|;
name|isInitialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|INSTANCE
return|;
block|}
DECL|method|registerMetrics ()
specifier|private
specifier|static
name|void
name|registerMetrics
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|RECORD_INFO
argument_list|)
expr_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|RECORD_INFO
argument_list|,
literal|"ResourceManager"
argument_list|)
expr_stmt|;
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|register
argument_list|(
literal|"CapacitySchedulerMetrics"
argument_list|,
literal|"Metrics for the Yarn Capacity Scheduler"
argument_list|,
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|destroy ()
specifier|public
specifier|synchronized
specifier|static
name|void
name|destroy
parameter_list|()
block|{
name|isInitialized
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|INSTANCE
operator|=
literal|null
expr_stmt|;
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|unregisterSource
argument_list|(
literal|"CapacitySchedulerMetrics"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addAllocate (long latency)
specifier|public
name|void
name|addAllocate
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|this
operator|.
name|allocate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
DECL|method|addCommitSuccess (long latency)
specifier|public
name|void
name|addCommitSuccess
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|this
operator|.
name|commitSuccess
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
DECL|method|addCommitFailure (long latency)
specifier|public
name|void
name|addCommitFailure
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|this
operator|.
name|commitFailure
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
DECL|method|addNodeUpdate (long latency)
specifier|public
name|void
name|addNodeUpdate
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|this
operator|.
name|nodeUpdate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumOfNodeUpdate ()
specifier|public
name|long
name|getNumOfNodeUpdate
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeUpdate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumOfAllocates ()
specifier|public
name|long
name|getNumOfAllocates
parameter_list|()
block|{
return|return
name|this
operator|.
name|allocate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumOfCommitSuccess ()
specifier|public
name|long
name|getNumOfCommitSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|commitSuccess
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
block|}
end_class

end_unit

