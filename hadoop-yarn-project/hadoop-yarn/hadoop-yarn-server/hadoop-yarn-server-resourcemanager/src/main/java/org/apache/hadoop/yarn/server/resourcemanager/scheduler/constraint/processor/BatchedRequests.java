begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.processor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithmInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A grouping of Scheduling Requests which are sent to the PlacementAlgorithm  * to place as a batch. The placement algorithm tends to give more optimal  * placements if more requests are batched together.  */
end_comment

begin_class
DECL|class|BatchedRequests
class|class
name|BatchedRequests
implements|implements
name|ConstraintPlacementAlgorithmInput
block|{
comment|// PlacementAlgorithmOutput attempt - the number of times the requests in this
comment|// batch has been placed but was rejected by the scheduler.
DECL|field|placementAttempt
specifier|private
specifier|final
name|int
name|placementAttempt
decl_stmt|;
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|requests
specifier|private
specifier|final
name|Collection
argument_list|<
name|SchedulingRequest
argument_list|>
name|requests
decl_stmt|;
DECL|field|blacklist
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|blacklist
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|BatchedRequests (ApplicationId applicationId, Collection<SchedulingRequest> requests, int attempt)
name|BatchedRequests
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Collection
argument_list|<
name|SchedulingRequest
argument_list|>
name|requests
parameter_list|,
name|int
name|attempt
parameter_list|)
block|{
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
name|this
operator|.
name|requests
operator|=
name|requests
expr_stmt|;
name|this
operator|.
name|placementAttempt
operator|=
name|attempt
expr_stmt|;
block|}
comment|/**    * Get Application Id.    * @return Application Id.    */
DECL|method|getApplicationId ()
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
comment|/**    * Get Collection of SchedulingRequests in this batch.    * @return Collection of Scheduling Requests.    */
annotation|@
name|Override
DECL|method|getSchedulingRequests ()
specifier|public
name|Collection
argument_list|<
name|SchedulingRequest
argument_list|>
name|getSchedulingRequests
parameter_list|()
block|{
return|return
name|requests
return|;
block|}
comment|/**    * Add a Scheduling request to the batch.    * @param req Scheduling Request.    */
DECL|method|addToBatch (SchedulingRequest req)
name|void
name|addToBatch
parameter_list|(
name|SchedulingRequest
name|req
parameter_list|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
DECL|method|addToBlacklist (Set<String> tags, SchedulerNode node)
name|void
name|addToBlacklist
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|,
name|SchedulerNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|tags
operator|!=
literal|null
operator|&&
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We are currently assuming a single allocation tag
comment|// per scheduler request currently.
name|blacklist
operator|.
name|computeIfAbsent
argument_list|(
name|tags
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get placement attempt.    * @return PlacementAlgorithmOutput placement Attempt.    */
DECL|method|getPlacementAttempt ()
name|int
name|getPlacementAttempt
parameter_list|()
block|{
return|return
name|placementAttempt
return|;
block|}
comment|/**    * Get any blacklisted nodes associated with tag.    * @param tag Tag.    * @return Set of blacklisted Nodes.    */
DECL|method|getBlacklist (String tag)
name|Set
argument_list|<
name|NodeId
argument_list|>
name|getBlacklist
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
return|return
name|blacklist
operator|.
name|getOrDefault
argument_list|(
name|tag
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
return|;
block|}
block|}
end_class

end_unit

