begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|policy
operator|.
name|PriorityUtilizationQueueOrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * Calculate how much resources need to be preempted for each queue,  * will be used by {@link PreemptionCandidatesSelector}.  */
end_comment

begin_class
DECL|class|AbstractPreemptableResourceCalculator
specifier|public
class|class
name|AbstractPreemptableResourceCalculator
block|{
DECL|field|context
specifier|protected
specifier|final
name|CapacitySchedulerPreemptionContext
name|context
decl_stmt|;
DECL|field|rc
specifier|protected
specifier|final
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|isReservedPreemptionCandidatesSelector
specifier|private
name|boolean
name|isReservedPreemptionCandidatesSelector
decl_stmt|;
DECL|class|TQComparator
specifier|static
class|class
name|TQComparator
implements|implements
name|Comparator
argument_list|<
name|TempQueuePerPartition
argument_list|>
block|{
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|clusterRes
specifier|private
name|Resource
name|clusterRes
decl_stmt|;
DECL|method|TQComparator (ResourceCalculator rc, Resource clusterRes)
name|TQComparator
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterRes
parameter_list|)
block|{
name|this
operator|.
name|rc
operator|=
name|rc
expr_stmt|;
name|this
operator|.
name|clusterRes
operator|=
name|clusterRes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (TempQueuePerPartition tq1, TempQueuePerPartition tq2)
specifier|public
name|int
name|compare
parameter_list|(
name|TempQueuePerPartition
name|tq1
parameter_list|,
name|TempQueuePerPartition
name|tq2
parameter_list|)
block|{
name|double
name|assigned1
init|=
name|getIdealPctOfGuaranteed
argument_list|(
name|tq1
argument_list|)
decl_stmt|;
name|double
name|assigned2
init|=
name|getIdealPctOfGuaranteed
argument_list|(
name|tq2
argument_list|)
decl_stmt|;
return|return
name|PriorityUtilizationQueueOrderingPolicy
operator|.
name|compare
argument_list|(
name|assigned1
argument_list|,
name|assigned2
argument_list|,
name|tq1
operator|.
name|relativePriority
argument_list|,
name|tq2
operator|.
name|relativePriority
argument_list|)
return|;
block|}
comment|// Calculates idealAssigned / guaranteed
comment|// TempQueues with 0 guarantees are always considered the most over
comment|// capacity and therefore considered last for resources.
DECL|method|getIdealPctOfGuaranteed (TempQueuePerPartition q)
specifier|private
name|double
name|getIdealPctOfGuaranteed
parameter_list|(
name|TempQueuePerPartition
name|q
parameter_list|)
block|{
name|double
name|pctOver
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterRes
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|pctOver
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterRes
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|pctOver
operator|)
return|;
block|}
block|}
comment|/**    * PreemptableResourceCalculator constructor.    *    * @param preemptionContext context    * @param isReservedPreemptionCandidatesSelector    *          this will be set by different implementation of candidate    *          selectors, please refer to TempQueuePerPartition#offer for    *          details.    */
DECL|method|AbstractPreemptableResourceCalculator ( CapacitySchedulerPreemptionContext preemptionContext, boolean isReservedPreemptionCandidatesSelector)
specifier|public
name|AbstractPreemptableResourceCalculator
parameter_list|(
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|,
name|boolean
name|isReservedPreemptionCandidatesSelector
parameter_list|)
block|{
name|context
operator|=
name|preemptionContext
expr_stmt|;
name|rc
operator|=
name|preemptionContext
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
name|this
operator|.
name|isReservedPreemptionCandidatesSelector
operator|=
name|isReservedPreemptionCandidatesSelector
expr_stmt|;
block|}
comment|/**    * Given a set of queues compute the fix-point distribution of unassigned    * resources among them. As pending request of a queue are exhausted, the    * queue is removed from the set and remaining capacity redistributed among    * remaining queues. The distribution is weighted based on guaranteed    * capacity, unless asked to ignoreGuarantee, in which case resources are    * distributed uniformly.    *    * @param totGuarant    *          total guaranteed resource    * @param qAlloc    *          List of child queues    * @param unassigned    *          Unassigned resource per queue    * @param ignoreGuarantee    *          ignore guarantee per queue.    */
DECL|method|computeFixpointAllocation (Resource totGuarant, Collection<TempQueuePerPartition> qAlloc, Resource unassigned, boolean ignoreGuarantee)
specifier|protected
name|void
name|computeFixpointAllocation
parameter_list|(
name|Resource
name|totGuarant
parameter_list|,
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|qAlloc
parameter_list|,
name|Resource
name|unassigned
parameter_list|,
name|boolean
name|ignoreGuarantee
parameter_list|)
block|{
comment|// Prior to assigning the unused resources, process each queue as follows:
comment|// If current> guaranteed, idealAssigned = guaranteed + untouchable extra
comment|// Else idealAssigned = current;
comment|// Subtract idealAssigned resources from unassigned.
comment|// If the queue has all of its needs met (that is, if
comment|// idealAssigned>= current + pending), remove it from consideration.
comment|// Sort queues from most under-guaranteed to most over-guaranteed.
name|TQComparator
name|tqComparator
init|=
operator|new
name|TQComparator
argument_list|(
name|rc
argument_list|,
name|totGuarant
argument_list|)
decl_stmt|;
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|orderedByNeed
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
literal|10
argument_list|,
name|tqComparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|i
init|=
name|qAlloc
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TempQueuePerPartition
name|q
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|used
init|=
name|q
operator|.
name|getUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|totGuarant
argument_list|,
name|used
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|q
operator|.
name|untouchableExtra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|used
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unassigned
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
comment|// If idealAssigned< (allocated + used + pending), q needs more
comment|// resources, so
comment|// add it to the list of underserved queues, ordered by need.
name|Resource
name|curPlusPend
init|=
name|Resources
operator|.
name|add
argument_list|(
name|q
operator|.
name|getUsed
argument_list|()
argument_list|,
name|q
operator|.
name|pending
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|totGuarant
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|,
name|curPlusPend
argument_list|)
condition|)
block|{
name|orderedByNeed
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assign all cluster resources until no more demand, or no resources are
comment|// left
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|totGuarant
argument_list|,
name|unassigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|wQassigned
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// we compute normalizedGuarantees capacity based on currently active
comment|// queues
name|resetCapacity
argument_list|(
name|unassigned
argument_list|,
name|orderedByNeed
argument_list|,
name|ignoreGuarantee
argument_list|)
expr_stmt|;
comment|// For each underserved queue (or set of queues if multiple are equally
comment|// underserved), offer its share of the unassigned resources based on its
comment|// normalized guarantee. After the offer, if the queue is not satisfied,
comment|// place it back in the ordered list of queues, recalculating its place
comment|// in the order of most under-guaranteed to most over-guaranteed. In this
comment|// way, the most underserved queue(s) are always given resources first.
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|underserved
init|=
name|getMostUnderservedQueues
argument_list|(
name|orderedByNeed
argument_list|,
name|tqComparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|i
init|=
name|underserved
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TempQueuePerPartition
name|sub
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|wQavail
init|=
name|Resources
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|rc
argument_list|,
name|unassigned
argument_list|,
name|sub
operator|.
name|normalizedGuarantee
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|wQidle
init|=
name|sub
operator|.
name|offer
argument_list|(
name|wQavail
argument_list|,
name|rc
argument_list|,
name|totGuarant
argument_list|,
name|isReservedPreemptionCandidatesSelector
argument_list|)
decl_stmt|;
name|Resource
name|wQdone
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|wQavail
argument_list|,
name|wQidle
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|totGuarant
argument_list|,
name|wQdone
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// The queue is still asking for more. Put it back in the priority
comment|// queue, recalculating its order based on need.
name|orderedByNeed
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|wQassigned
argument_list|,
name|wQdone
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unassigned
argument_list|,
name|wQassigned
argument_list|)
expr_stmt|;
block|}
comment|// Sometimes its possible that, all queues are properly served. So intra
comment|// queue preemption will not try for any preemption. How ever there are
comment|// chances that within a queue, there are some imbalances. Hence make sure
comment|// all queues are added to list.
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TempQueuePerPartition
name|q1
init|=
name|orderedByNeed
operator|.
name|remove
argument_list|()
decl_stmt|;
name|context
operator|.
name|addPartitionToUnderServedQueues
argument_list|(
name|q1
operator|.
name|queueName
argument_list|,
name|q1
operator|.
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Computes a normalizedGuaranteed capacity based on active queues.    *    * @param clusterResource    *          the total amount of resources in the cluster    * @param queues    *          the list of queues to consider    * @param ignoreGuar    *          ignore guarantee.    */
DECL|method|resetCapacity (Resource clusterResource, Collection<TempQueuePerPartition> queues, boolean ignoreGuar)
specifier|private
name|void
name|resetCapacity
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|queues
parameter_list|,
name|boolean
name|ignoreGuar
parameter_list|)
block|{
name|Resource
name|activeCap
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreGuar
condition|)
block|{
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|normalizedGuarantee
index|[
name|i
index|]
operator|=
literal|1.0f
operator|/
name|queues
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|activeCap
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|nResourceInformation
init|=
name|q
operator|.
name|getGuaranteed
argument_list|()
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|dResourceInformation
init|=
name|activeCap
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|nValue
init|=
name|nResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|dValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|dResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|nResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|dResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dValue
operator|!=
literal|0
condition|)
block|{
name|q
operator|.
name|normalizedGuarantee
index|[
name|i
index|]
operator|=
operator|(
name|float
operator|)
name|nValue
operator|/
name|dValue
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Take the most underserved TempQueue (the one on the head). Collect and
comment|// return the list of all queues that have the same idealAssigned
comment|// percentage of guaranteed.
DECL|method|getMostUnderservedQueues ( PriorityQueue<TempQueuePerPartition> orderedByNeed, TQComparator tqComparator)
specifier|private
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|getMostUnderservedQueues
parameter_list|(
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|orderedByNeed
parameter_list|,
name|TQComparator
name|tqComparator
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|underserved
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TempQueuePerPartition
name|q1
init|=
name|orderedByNeed
operator|.
name|remove
argument_list|()
decl_stmt|;
name|underserved
operator|.
name|add
argument_list|(
name|q1
argument_list|)
expr_stmt|;
comment|// Add underserved queues in order for later uses
name|context
operator|.
name|addPartitionToUnderServedQueues
argument_list|(
name|q1
operator|.
name|queueName
argument_list|,
name|q1
operator|.
name|partition
argument_list|)
expr_stmt|;
name|TempQueuePerPartition
name|q2
init|=
name|orderedByNeed
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// q1's pct of guaranteed won't be larger than q2's. If it's less, then
comment|// return what has already been collected. Otherwise, q1's pct of
comment|// guaranteed == that of q2, so add q2 to underserved list during the
comment|// next pass.
if|if
condition|(
name|q2
operator|==
literal|null
operator|||
name|tqComparator
operator|.
name|compare
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|q2
condition|)
block|{
name|context
operator|.
name|addPartitionToUnderServedQueues
argument_list|(
name|q2
operator|.
name|queueName
argument_list|,
name|q2
operator|.
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|underserved
return|;
block|}
block|}
return|return
name|underserved
return|;
block|}
block|}
end_class

end_unit

