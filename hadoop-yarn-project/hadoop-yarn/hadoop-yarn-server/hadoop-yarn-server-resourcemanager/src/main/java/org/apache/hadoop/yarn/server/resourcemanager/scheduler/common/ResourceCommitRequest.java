begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ResourceCommitRequest
specifier|public
class|class
name|ResourceCommitRequest
parameter_list|<
name|A
extends|extends
name|SchedulerApplicationAttempt
parameter_list|,
name|N
extends|extends
name|SchedulerNode
parameter_list|>
block|{
comment|// New containers to be allocated
DECL|field|containersToAllocate
specifier|private
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|containersToAllocate
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|// New containers to be released
DECL|field|containersToReserve
specifier|private
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|containersToReserve
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|// We don't need these containers anymore
DECL|field|toReleaseContainers
specifier|private
name|List
argument_list|<
name|SchedulerContainer
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|toReleaseContainers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|totalAllocatedResource
specifier|private
name|Resource
name|totalAllocatedResource
decl_stmt|;
DECL|field|totalReservedResource
specifier|private
name|Resource
name|totalReservedResource
decl_stmt|;
DECL|field|totalReleasedResource
specifier|private
name|Resource
name|totalReleasedResource
decl_stmt|;
DECL|method|ResourceCommitRequest ( List<ContainerAllocationProposal<A, N>> containersToAllocate, List<ContainerAllocationProposal<A, N>> containersToReserve, List<SchedulerContainer<A, N>> toReleaseContainers)
specifier|public
name|ResourceCommitRequest
parameter_list|(
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|containersToAllocate
parameter_list|,
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|containersToReserve
parameter_list|,
name|List
argument_list|<
name|SchedulerContainer
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|toReleaseContainers
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|containersToAllocate
condition|)
block|{
name|this
operator|.
name|containersToAllocate
operator|=
name|containersToAllocate
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|containersToReserve
condition|)
block|{
name|this
operator|.
name|containersToReserve
operator|=
name|containersToReserve
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|toReleaseContainers
condition|)
block|{
name|this
operator|.
name|toReleaseContainers
operator|=
name|toReleaseContainers
expr_stmt|;
block|}
name|totalAllocatedResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|totalReservedResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|/*      * For total-release resource, it has two parts:      * 1) Unconditional release: for example, an app reserved a container,      *    but the app doesn't has any pending resource.      * 2) Conditional release: for example, reservation continuous looking, or      *    Lazy preemption -- which we need to kill some resource to allocate      *    or reserve the new container.      *      * For the 2nd part, it is inside:      * ContainerAllocationProposal#toRelease, which means we will kill/release      * these containers to allocate/reserve the given container.      *      * So we need to account both of conditional/unconditional to-release      * containers to the total release-able resource.      */
name|totalReleasedResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|c
range|:
name|this
operator|.
name|containersToAllocate
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totalAllocatedResource
argument_list|,
name|c
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulerContainer
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|r
range|:
name|c
operator|.
name|getToRelease
argument_list|()
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totalReleasedResource
argument_list|,
name|r
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|c
range|:
name|this
operator|.
name|containersToReserve
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totalReservedResource
argument_list|,
name|c
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulerContainer
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|r
range|:
name|c
operator|.
name|getToRelease
argument_list|()
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totalReleasedResource
argument_list|,
name|r
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SchedulerContainer
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|r
range|:
name|this
operator|.
name|toReleaseContainers
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totalReleasedResource
argument_list|,
name|r
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContainersToAllocate ()
specifier|public
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|getContainersToAllocate
parameter_list|()
block|{
return|return
name|containersToAllocate
return|;
block|}
DECL|method|getContainersToReserve ()
specifier|public
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|getContainersToReserve
parameter_list|()
block|{
return|return
name|containersToReserve
return|;
block|}
DECL|method|getContainersToRelease ()
specifier|public
name|List
argument_list|<
name|SchedulerContainer
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
argument_list|>
name|getContainersToRelease
parameter_list|()
block|{
return|return
name|toReleaseContainers
return|;
block|}
DECL|method|getTotalAllocatedResource ()
specifier|public
name|Resource
name|getTotalAllocatedResource
parameter_list|()
block|{
return|return
name|totalAllocatedResource
return|;
block|}
DECL|method|getTotalReservedResource ()
specifier|public
name|Resource
name|getTotalReservedResource
parameter_list|()
block|{
return|return
name|totalReservedResource
return|;
block|}
DECL|method|getTotalReleasedResource ()
specifier|public
name|Resource
name|getTotalReleasedResource
parameter_list|()
block|{
return|return
name|totalReleasedResource
return|;
block|}
comment|/*    * Util functions to make your life easier    */
DECL|method|anythingAllocatedOrReserved ()
specifier|public
name|boolean
name|anythingAllocatedOrReserved
parameter_list|()
block|{
return|return
operator|(
operator|!
name|containersToAllocate
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|containersToReserve
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
DECL|method|getFirstAllocatedOrReservedContainer ()
specifier|public
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|getFirstAllocatedOrReservedContainer
parameter_list|()
block|{
name|ContainerAllocationProposal
argument_list|<
name|A
argument_list|,
name|N
argument_list|>
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|containersToAllocate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|c
operator|=
name|containersToAllocate
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|null
operator|&&
operator|!
name|containersToReserve
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|c
operator|=
name|containersToReserve
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"New "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|containersToAllocate
operator|&&
operator|!
name|containersToAllocate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t ALLOCATED="
operator|+
name|containersToAllocate
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|containersToReserve
operator|&&
operator|!
name|containersToReserve
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t RESERVED="
operator|+
name|containersToReserve
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|toReleaseContainers
operator|&&
operator|!
name|toReleaseContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t RELEASED="
operator|+
name|toReleaseContainers
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

