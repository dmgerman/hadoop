begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Update nodes labels map for ResourceManager periodically. It collects  * nodes labels from {@link RMNodeLabelsMappingProvider} and updates the  * nodes {@literal ->} labels map via {@link RMNodeLabelsManager}.  * This service is enabled when configuration  * "yarn.node-labels.configuration-type" is set to "delegated-centralized".  */
end_comment

begin_class
DECL|class|RMDelegatedNodeLabelsUpdater
specifier|public
class|class
name|RMDelegatedNodeLabelsUpdater
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RMDelegatedNodeLabelsUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DISABLE_DELEGATED_NODE_LABELS_UPDATE
specifier|public
specifier|static
specifier|final
name|long
name|DISABLE_DELEGATED_NODE_LABELS_UPDATE
init|=
operator|-
literal|1
decl_stmt|;
comment|// Timer used to schedule node labels fetching
DECL|field|nodeLabelsScheduler
specifier|private
name|Timer
name|nodeLabelsScheduler
decl_stmt|;
comment|// 30 seconds
annotation|@
name|VisibleForTesting
DECL|field|nodeLabelsUpdateInterval
specifier|public
name|long
name|nodeLabelsUpdateInterval
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
DECL|field|newlyRegisteredNodes
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|newlyRegisteredNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
comment|// Lock to protect newlyRegisteredNodes
DECL|field|lock
specifier|private
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|lastAllNodesLabelUpdateMills
specifier|private
name|long
name|lastAllNodesLabelUpdateMills
init|=
literal|0L
decl_stmt|;
DECL|field|allNodesLabelUpdateInterval
specifier|private
name|long
name|allNodesLabelUpdateInterval
decl_stmt|;
DECL|field|rmNodeLabelsMappingProvider
specifier|private
name|RMNodeLabelsMappingProvider
name|rmNodeLabelsMappingProvider
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|RMDelegatedNodeLabelsUpdater (RMContext rmContext)
specifier|public
name|RMDelegatedNodeLabelsUpdater
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
literal|"RMDelegatedNodeLabelsUpdater"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|allNodesLabelUpdateInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
argument_list|)
expr_stmt|;
name|rmNodeLabelsMappingProvider
operator|=
name|createRMNodeLabelsMappingProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|rmNodeLabelsMappingProvider
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|nodeLabelsScheduler
operator|=
operator|new
name|Timer
argument_list|(
literal|"RMDelegatedNodeLabelsUpdater-Timer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TimerTask
name|delegatedNodeLabelsUpdaterTimerTask
init|=
operator|new
name|RMDelegatedNodeLabelsUpdaterTimerTask
argument_list|()
decl_stmt|;
name|nodeLabelsScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|delegatedNodeLabelsUpdaterTimerTask
argument_list|,
name|nodeLabelsUpdateInterval
argument_list|,
name|nodeLabelsUpdateInterval
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
comment|/**    * Terminate the timer.    * @throws Exception    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeLabelsScheduler
operator|!=
literal|null
condition|)
block|{
name|nodeLabelsScheduler
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|class|RMDelegatedNodeLabelsUpdaterTimerTask
specifier|private
class|class
name|RMDelegatedNodeLabelsUpdaterTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodesToUpdateLabels
init|=
literal|null
decl_stmt|;
name|boolean
name|isUpdatingAllNodes
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|allNodesLabelUpdateInterval
operator|!=
name|DISABLE_DELEGATED_NODE_LABELS_UPDATE
condition|)
block|{
name|long
name|elapsedTimeSinceLastUpdate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastAllNodesLabelUpdateMills
decl_stmt|;
if|if
condition|(
name|elapsedTimeSinceLastUpdate
operator|>
name|allNodesLabelUpdateInterval
condition|)
block|{
name|nodesToUpdateLabels
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|isUpdatingAllNodes
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodesToUpdateLabels
operator|==
literal|null
operator|&&
operator|!
name|newlyRegisteredNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
operator|!
name|newlyRegisteredNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesToUpdateLabels
operator|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|(
name|newlyRegisteredNodes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|nodesToUpdateLabels
operator|!=
literal|null
operator|&&
operator|!
name|nodesToUpdateLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateNodeLabelsInternal
argument_list|(
name|nodesToUpdateLabels
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUpdatingAllNodes
condition|)
block|{
name|lastAllNodesLabelUpdateMills
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|newlyRegisteredNodes
operator|.
name|removeAll
argument_list|(
name|nodesToUpdateLabels
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update node Labels"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateNodeLabelsInternal (Set<NodeId> nodes)
specifier|private
name|void
name|updateNodeLabelsInternal
parameter_list|(
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|labelsUpdated
init|=
name|rmNodeLabelsMappingProvider
operator|.
name|getNodeLabels
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelsUpdated
operator|!=
literal|null
operator|&&
name|labelsUpdated
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|labelsUpdated
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|entry
range|:
name|labelsUpdated
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nodeToLabels
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|NodeLabelsUtils
operator|.
name|convertToStringSet
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|nodeToLabels
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the RMNodeLabelsMappingProvider which is used to provide node labels.    */
DECL|method|createRMNodeLabelsMappingProvider ( Configuration conf)
specifier|private
name|RMNodeLabelsMappingProvider
name|createRMNodeLabelsMappingProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RMNodeLabelsMappingProvider
name|nodeLabelsMappingProvider
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RMNodeLabelsMappingProvider
argument_list|>
name|labelsProviderClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_LABELS_PROVIDER_CONFIG
argument_list|,
literal|null
argument_list|,
name|RMNodeLabelsMappingProvider
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelsProviderClass
operator|!=
literal|null
condition|)
block|{
name|nodeLabelsMappingProvider
operator|=
name|labelsProviderClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create RMNodeLabelsMappingProvider based on"
operator|+
literal|" Configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create RMNodeLabelsMappingProvider : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|nodeLabelsMappingProvider
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"RMNodeLabelsMappingProvider should be configured when "
operator|+
literal|"delegated-centralized node label configuration is enabled"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RM Node labels mapping provider class is : "
operator|+
name|nodeLabelsMappingProvider
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeLabelsMappingProvider
return|;
block|}
comment|/**    * Update node labels for a specified node.    * @param node the node to update node labels    */
DECL|method|updateNodeLabels (NodeId node)
specifier|public
name|void
name|updateNodeLabels
parameter_list|(
name|NodeId
name|node
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|newlyRegisteredNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

