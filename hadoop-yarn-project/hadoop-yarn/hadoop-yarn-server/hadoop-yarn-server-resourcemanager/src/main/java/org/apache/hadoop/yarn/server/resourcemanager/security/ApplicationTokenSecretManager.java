begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ApplicationTokenIdentifier
import|;
end_import

begin_comment
comment|/**  * Application-tokens are per ApplicationAttempt. If users redistribute their  * tokens, it is their headache, god save them. I mean you are not supposed to  * distribute keys to your vault, right? Anyways, ResourceManager saves each  * token locally in memory till application finishes and to a store for restart,  * so no need to remember master-keys even after rolling them.  */
end_comment

begin_class
DECL|class|ApplicationTokenSecretManager
specifier|public
class|class
name|ApplicationTokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ApplicationTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|masterKey
specifier|private
name|SecretKey
name|masterKey
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
DECL|field|rollingInterval
specifier|private
specifier|final
name|long
name|rollingInterval
decl_stmt|;
DECL|field|passwords
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|byte
index|[]
argument_list|>
name|passwords
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Create an {@link ApplicationTokenSecretManager}    */
DECL|method|ApplicationTokenSecretManager (Configuration conf)
specifier|public
name|ApplicationTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|rollMasterKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|timer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|this
operator|.
name|rollingInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_APP_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_APP_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|MasterKeyRoller
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rollingInterval
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
DECL|method|applicationMasterFinished ( ApplicationAttemptId appAttemptId)
specifier|public
specifier|synchronized
name|void
name|applicationMasterFinished
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application finished, removing password for "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|passwords
operator|.
name|remove
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
DECL|class|MasterKeyRoller
specifier|private
class|class
name|MasterKeyRoller
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|rollMasterKey
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|setMasterKey (SecretKey masterKey)
specifier|public
specifier|synchronized
name|void
name|setMasterKey
parameter_list|(
name|SecretKey
name|masterKey
parameter_list|)
block|{
name|this
operator|.
name|masterKey
operator|=
name|masterKey
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|getMasterKey ()
specifier|public
specifier|synchronized
name|SecretKey
name|getMasterKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|masterKey
return|;
block|}
annotation|@
name|Private
DECL|method|rollMasterKey ()
specifier|synchronized
name|void
name|rollMasterKey
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling master-key for application-tokens"
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterKey
operator|=
name|generateSecret
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a password for a given {@link ApplicationTokenIdentifier}. Used to    * send to the AppicationAttempt which can give it back during authentication.    */
annotation|@
name|Override
DECL|method|createPassword ( ApplicationTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|createPassword
parameter_list|(
name|ApplicationTokenIdentifier
name|identifier
parameter_list|)
block|{
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating password for "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|password
init|=
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|masterKey
argument_list|)
decl_stmt|;
name|this
operator|.
name|passwords
operator|.
name|put
argument_list|(
name|applicationAttemptId
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|password
return|;
block|}
comment|/**    * Retrieve the password for the given {@link ApplicationTokenIdentifier}.    * Used by RPC layer to validate a remote {@link ApplicationTokenIdentifier}.    */
annotation|@
name|Override
DECL|method|retrievePassword ( ApplicationTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|ApplicationTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to retrieve password for "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|password
init|=
name|this
operator|.
name|passwords
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"Password not found for ApplicationAttempt "
operator|+
name|applicationAttemptId
argument_list|)
throw|;
block|}
return|return
name|password
return|;
block|}
comment|/**    * Creates an empty TokenId to be used for de-serializing an    * {@link ApplicationTokenIdentifier} by the RPC layer.    */
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|ApplicationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|ApplicationTokenIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

