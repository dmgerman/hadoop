begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * Represents a YARN Cluster Node from the viewpoint of the scheduler.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SchedulerNode
specifier|public
specifier|abstract
class|class
name|SchedulerNode
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|unallocatedResource
specifier|private
name|Resource
name|unallocatedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|allocatedResource
specifier|private
name|Resource
name|allocatedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|totalResource
specifier|private
name|Resource
name|totalResource
decl_stmt|;
DECL|field|reservedContainer
specifier|private
name|RMContainer
name|reservedContainer
decl_stmt|;
DECL|field|numContainers
specifier|private
specifier|volatile
name|int
name|numContainers
decl_stmt|;
DECL|field|containersUtilization
specifier|private
specifier|volatile
name|ResourceUtilization
name|containersUtilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0f
argument_list|)
decl_stmt|;
DECL|field|nodeUtilization
specifier|private
specifier|volatile
name|ResourceUtilization
name|nodeUtilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0f
argument_list|)
decl_stmt|;
comment|/* set of containers that are allocated containers */
DECL|field|launchedContainers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerInfo
argument_list|>
name|launchedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rmNode
specifier|private
specifier|final
name|RMNode
name|rmNode
decl_stmt|;
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|field|labels
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
literal|null
decl_stmt|;
DECL|method|SchedulerNode (RMNode node, boolean usePortForNodeName, Set<String> labels)
specifier|public
name|SchedulerNode
parameter_list|(
name|RMNode
name|node
parameter_list|,
name|boolean
name|usePortForNodeName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
name|this
operator|.
name|rmNode
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|unallocatedResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|node
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|node
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|usePortForNodeName
condition|)
block|{
name|nodeName
operator|=
name|rmNode
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nodeName
operator|=
name|rmNode
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|labels
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
DECL|method|SchedulerNode (RMNode node, boolean usePortForNodeName)
specifier|public
name|SchedulerNode
parameter_list|(
name|RMNode
name|node
parameter_list|,
name|boolean
name|usePortForNodeName
parameter_list|)
block|{
name|this
argument_list|(
name|node
argument_list|,
name|usePortForNodeName
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
expr_stmt|;
block|}
DECL|method|getRMNode ()
specifier|public
name|RMNode
name|getRMNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmNode
return|;
block|}
comment|/**    * Set total resources on the node.    * @param resource Total resources on the node.    */
DECL|method|updateTotalResource (Resource resource)
specifier|public
specifier|synchronized
name|void
name|updateTotalResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|totalResource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|unallocatedResource
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|totalResource
argument_list|,
name|this
operator|.
name|allocatedResource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the ID of the node which contains both its hostname and port.    * @return The ID of the node.    */
DECL|method|getNodeID ()
specifier|public
name|NodeId
name|getNodeID
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmNode
operator|.
name|getNodeID
argument_list|()
return|;
block|}
comment|/**    * Get HTTP address for the node.    * @return HTTP address for the node.    */
DECL|method|getHttpAddress ()
specifier|public
name|String
name|getHttpAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmNode
operator|.
name|getHttpAddress
argument_list|()
return|;
block|}
comment|/**    * Get the name of the node for scheduling matching decisions.    *<p>    * Typically this is the 'hostname' reported by the node, but it could be    * configured to be 'hostname:port' reported by the node via the    * {@link YarnConfiguration#RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME} constant.    * The main usecase of this is Yarn minicluster to be able to differentiate    * node manager instances by their port number.    * @return Name of the node for scheduling matching decisions.    */
DECL|method|getNodeName ()
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
comment|/**    * Get rackname.    * @return rackname    */
DECL|method|getRackName ()
specifier|public
name|String
name|getRackName
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmNode
operator|.
name|getRackName
argument_list|()
return|;
block|}
comment|/**    * The Scheduler has allocated containers on this node to the given    * application.    * @param rmContainer Allocated container    */
DECL|method|allocateContainer (RMContainer rmContainer)
specifier|public
name|void
name|allocateContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|allocateContainer
argument_list|(
name|rmContainer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * The Scheduler has allocated containers on this node to the given    * application.    * @param rmContainer Allocated container    * @param launchedOnNode True if the container has been launched    */
DECL|method|allocateContainer (RMContainer rmContainer, boolean launchedOnNode)
specifier|protected
specifier|synchronized
name|void
name|allocateContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|boolean
name|launchedOnNode
parameter_list|)
block|{
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|GUARANTEED
condition|)
block|{
name|deductUnallocatedResource
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|numContainers
expr_stmt|;
block|}
name|launchedContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|ContainerInfo
argument_list|(
name|rmContainer
argument_list|,
name|launchedOnNode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigned container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" of capacity "
operator|+
name|container
operator|.
name|getResource
argument_list|()
operator|+
literal|" on host "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|", which has "
operator|+
name|numContainers
operator|+
literal|" containers, "
operator|+
name|getAllocatedResource
argument_list|()
operator|+
literal|" used and "
operator|+
name|getUnallocatedResource
argument_list|()
operator|+
literal|" available after allocation"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get unallocated resources on the node.    * @return Unallocated resources on the node    */
DECL|method|getUnallocatedResource ()
specifier|public
specifier|synchronized
name|Resource
name|getUnallocatedResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|unallocatedResource
return|;
block|}
comment|/**    * Get allocated resources on the node.    * @return Allocated resources on the node    */
DECL|method|getAllocatedResource ()
specifier|public
specifier|synchronized
name|Resource
name|getAllocatedResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|allocatedResource
return|;
block|}
comment|/**    * Get total resources on the node.    * @return Total resources on the node.    */
DECL|method|getTotalResource ()
specifier|public
specifier|synchronized
name|Resource
name|getTotalResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalResource
return|;
block|}
comment|/**    * Check if a container is launched by this node.    * @return If the container is launched by the node.    */
DECL|method|isValidContainer (ContainerId containerId)
specifier|public
specifier|synchronized
name|boolean
name|isValidContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|launchedContainers
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Update the resources of the node when releasing a container.    * @param container Container to release.    */
DECL|method|updateResourceForReleasedContainer ( Container container)
specifier|protected
specifier|synchronized
name|void
name|updateResourceForReleasedContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|GUARANTEED
condition|)
block|{
name|addUnallocatedResource
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|numContainers
expr_stmt|;
block|}
block|}
comment|/**    * Release an allocated container on this node.    * @param containerId ID of container to be released.    * @param releasedByNode whether the release originates from a node update.    */
DECL|method|releaseContainer (ContainerId containerId, boolean releasedByNode)
specifier|public
specifier|synchronized
name|void
name|releaseContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|boolean
name|releasedByNode
parameter_list|)
block|{
name|ContainerInfo
name|info
init|=
name|launchedContainers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|releasedByNode
operator|&&
name|info
operator|.
name|launchedOnNode
condition|)
block|{
comment|// wait until node reports container has completed
return|return;
block|}
name|launchedContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|info
operator|.
name|container
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|updateResourceForReleasedContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Released container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" of capacity "
operator|+
name|container
operator|.
name|getResource
argument_list|()
operator|+
literal|" on host "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|", which currently has "
operator|+
name|numContainers
operator|+
literal|" containers, "
operator|+
name|getAllocatedResource
argument_list|()
operator|+
literal|" used and "
operator|+
name|getUnallocatedResource
argument_list|()
operator|+
literal|" available"
operator|+
literal|", release resources="
operator|+
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Inform the node that a container has launched.    * @param containerId ID of the launched container    */
DECL|method|containerStarted (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|containerStarted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|ContainerInfo
name|info
init|=
name|launchedContainers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|launchedOnNode
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Add unallocated resources to the node. This is used when unallocating a    * container.    * @param resource Resources to add.    */
DECL|method|addUnallocatedResource (Resource resource)
specifier|private
specifier|synchronized
name|void
name|addUnallocatedResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid resource addition of null resource for "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|unallocatedResource
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|allocatedResource
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deduct unallocated resources from the node. This is used when allocating a    * container.    * @param resource Resources to deduct.    */
annotation|@
name|VisibleForTesting
DECL|method|deductUnallocatedResource (Resource resource)
specifier|public
specifier|synchronized
name|void
name|deductUnallocatedResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid deduction of null resource for "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unallocatedResource
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|allocatedResource
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reserve container for the attempt on this node.    * @param attempt Application attempt asking for the reservation.    * @param schedulerKey Priority of the reservation.    * @param container Container reserving resources for.    */
DECL|method|reserveResource (SchedulerApplicationAttempt attempt, SchedulerRequestKey schedulerKey, RMContainer container)
specifier|public
specifier|abstract
name|void
name|reserveResource
parameter_list|(
name|SchedulerApplicationAttempt
name|attempt
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|container
parameter_list|)
function_decl|;
comment|/**    * Unreserve resources on this node.    * @param attempt Application attempt that had done the reservation.    */
DECL|method|unreserveResource (SchedulerApplicationAttempt attempt)
specifier|public
specifier|abstract
name|void
name|unreserveResource
parameter_list|(
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"host: "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" #containers="
operator|+
name|getNumContainers
argument_list|()
operator|+
literal|" available="
operator|+
name|getUnallocatedResource
argument_list|()
operator|+
literal|" used="
operator|+
name|getAllocatedResource
argument_list|()
return|;
block|}
comment|/**    * Get number of active containers on the node.    * @return Number of active containers on the node.    */
DECL|method|getNumContainers ()
specifier|public
name|int
name|getNumContainers
parameter_list|()
block|{
return|return
name|numContainers
return|;
block|}
comment|/**    * Get the containers running on the node.    * @return A copy of containers running on the node.    */
DECL|method|getCopiedListOfRunningContainers ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RMContainer
argument_list|>
name|getCopiedListOfRunningContainers
parameter_list|()
block|{
name|List
argument_list|<
name|RMContainer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|launchedContainers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerInfo
name|info
range|:
name|launchedContainers
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|info
operator|.
name|container
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the containers running on the node with AM containers at the end.    * @return A copy of running containers with AM containers at the end.    */
DECL|method|getRunningContainersWithAMsAtTheEnd ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RMContainer
argument_list|>
name|getRunningContainersWithAMsAtTheEnd
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|RMContainer
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerInfo
name|info
range|:
name|launchedContainers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|container
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
name|result
operator|.
name|addLast
argument_list|(
name|info
operator|.
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|addFirst
argument_list|(
name|info
operator|.
name|container
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the container for the specified container ID.    * @param containerId The container ID    * @return The container for the specified container ID    */
DECL|method|getContainer (ContainerId containerId)
specifier|protected
specifier|synchronized
name|RMContainer
name|getContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|RMContainer
name|container
init|=
literal|null
decl_stmt|;
name|ContainerInfo
name|info
init|=
name|launchedContainers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|container
operator|=
name|info
operator|.
name|container
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
comment|/**    * Get the reserved container in the node.    * @return Reserved container in the node.    */
DECL|method|getReservedContainer ()
specifier|public
specifier|synchronized
name|RMContainer
name|getReservedContainer
parameter_list|()
block|{
return|return
name|reservedContainer
return|;
block|}
comment|/**    * Set the reserved container in the node.    * @param reservedContainer Reserved container in the node.    */
specifier|public
specifier|synchronized
name|void
DECL|method|setReservedContainer (RMContainer reservedContainer)
name|setReservedContainer
parameter_list|(
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|this
operator|.
name|reservedContainer
operator|=
name|reservedContainer
expr_stmt|;
block|}
comment|/**    * Recover a container.    * @param rmContainer Container to recover.    */
DECL|method|recoverContainer (RMContainer rmContainer)
specifier|public
specifier|synchronized
name|void
name|recoverContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
condition|)
block|{
return|return;
block|}
name|allocateContainer
argument_list|(
name|rmContainer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the labels for the node.    * @return Set of labels for the node.    */
DECL|method|getLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLabels
parameter_list|()
block|{
return|return
name|labels
return|;
block|}
comment|/**    * Update the labels for the node.    * @param labels Set of labels for the node.    */
DECL|method|updateLabels (Set<String> labels)
specifier|public
name|void
name|updateLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
name|this
operator|.
name|labels
operator|=
name|labels
expr_stmt|;
block|}
comment|/**    * Get partition of which the node belongs to, if node-labels of this node is    * empty or null, it belongs to NO_LABEL partition. And since we only support    * one partition for each node (YARN-2694), first label will be its partition.    * @return Partition for the node.    */
DECL|method|getPartition ()
specifier|public
name|String
name|getPartition
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|labels
operator|==
literal|null
operator|||
name|this
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|labels
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|/**    * Set the resource utilization of the containers in the node.    * @param containersUtilization Resource utilization of the containers.    */
DECL|method|setAggregatedContainersUtilization ( ResourceUtilization containersUtilization)
specifier|public
name|void
name|setAggregatedContainersUtilization
parameter_list|(
name|ResourceUtilization
name|containersUtilization
parameter_list|)
block|{
name|this
operator|.
name|containersUtilization
operator|=
name|containersUtilization
expr_stmt|;
block|}
comment|/**    * Get the resource utilization of the containers in the node.    * @return Resource utilization of the containers.    */
DECL|method|getAggregatedContainersUtilization ()
specifier|public
name|ResourceUtilization
name|getAggregatedContainersUtilization
parameter_list|()
block|{
return|return
name|this
operator|.
name|containersUtilization
return|;
block|}
comment|/**    * Set the resource utilization of the node. This includes the containers.    * @param nodeUtilization Resource utilization of the node.    */
DECL|method|setNodeUtilization (ResourceUtilization nodeUtilization)
specifier|public
name|void
name|setNodeUtilization
parameter_list|(
name|ResourceUtilization
name|nodeUtilization
parameter_list|)
block|{
name|this
operator|.
name|nodeUtilization
operator|=
name|nodeUtilization
expr_stmt|;
block|}
comment|/**    * Get the resource utilization of the node.    * @return Resource utilization of the node.    */
DECL|method|getNodeUtilization ()
specifier|public
name|ResourceUtilization
name|getNodeUtilization
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeUtilization
return|;
block|}
DECL|class|ContainerInfo
specifier|private
specifier|static
class|class
name|ContainerInfo
block|{
DECL|field|container
specifier|private
specifier|final
name|RMContainer
name|container
decl_stmt|;
DECL|field|launchedOnNode
specifier|private
name|boolean
name|launchedOnNode
decl_stmt|;
DECL|method|ContainerInfo (RMContainer container, boolean launchedOnNode)
specifier|public
name|ContainerInfo
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|boolean
name|launchedOnNode
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|launchedOnNode
operator|=
name|launchedOnNode
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

