begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.algorithm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|algorithm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Iterator that can take current state of an existing iterator  * and circularly iterate to that point.  */
end_comment

begin_class
DECL|class|CircularIterator
class|class
name|CircularIterator
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
init|=
literal|null
decl_stmt|;
DECL|field|iterable
specifier|private
specifier|final
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
decl_stmt|;
DECL|field|startElem
specifier|private
name|T
name|startElem
init|=
literal|null
decl_stmt|;
DECL|field|nextElem
specifier|private
name|T
name|nextElem
init|=
literal|null
decl_stmt|;
comment|// if not null, This overrides the starting Element.
DECL|field|firstElem
specifier|private
name|T
name|firstElem
init|=
literal|null
decl_stmt|;
comment|// Can't handle empty or null lists.
DECL|method|CircularIterator (T first, Iterator<T> iter, Iterable<T> iterable)
name|CircularIterator
parameter_list|(
name|T
name|first
parameter_list|,
name|Iterator
argument_list|<
name|T
argument_list|>
name|iter
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|)
block|{
name|this
operator|.
name|firstElem
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|iterable
operator|=
name|iterable
expr_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|this
operator|.
name|iterator
operator|=
name|this
operator|.
name|iterable
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|iterator
operator|=
name|iter
expr_stmt|;
block|}
name|this
operator|.
name|startElem
operator|=
name|this
operator|.
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|this
operator|.
name|nextElem
operator|=
name|this
operator|.
name|startElem
expr_stmt|;
block|}
DECL|method|hasNext ()
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|nextElem
operator|!=
literal|null
operator|||
name|this
operator|.
name|firstElem
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|next
init|=
name|this
operator|.
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|startElem
operator|.
name|equals
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|this
operator|.
name|nextElem
operator|=
name|next
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|iterator
operator|=
name|this
operator|.
name|iterable
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|nextElem
operator|=
name|this
operator|.
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startElem
operator|.
name|equals
argument_list|(
name|this
operator|.
name|nextElem
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
DECL|method|next ()
name|T
name|next
parameter_list|()
block|{
name|T
name|retVal
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|firstElem
operator|!=
literal|null
condition|)
block|{
name|retVal
operator|=
name|this
operator|.
name|firstElem
expr_stmt|;
name|this
operator|.
name|firstElem
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nextElem
operator|!=
literal|null
condition|)
block|{
name|retVal
operator|=
name|this
operator|.
name|nextElem
expr_stmt|;
name|this
operator|.
name|nextElem
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|retVal
operator|=
name|this
operator|.
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
block|}
end_class

end_unit

