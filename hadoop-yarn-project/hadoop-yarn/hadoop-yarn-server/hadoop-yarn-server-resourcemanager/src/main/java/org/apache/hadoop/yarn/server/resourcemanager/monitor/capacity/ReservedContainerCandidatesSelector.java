begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ReservedContainerCandidatesSelector
specifier|public
class|class
name|ReservedContainerCandidatesSelector
extends|extends
name|PreemptionCandidatesSelector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReservedContainerCandidatesSelector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|preemptableAmountCalculator
specifier|private
name|PreemptableResourceCalculator
name|preemptableAmountCalculator
decl_stmt|;
comment|/**    * A temporary data structure to remember what to preempt on a node    */
DECL|class|NodeForPreemption
specifier|private
specifier|static
class|class
name|NodeForPreemption
block|{
DECL|field|preemptionCost
specifier|private
name|float
name|preemptionCost
decl_stmt|;
DECL|field|schedulerNode
specifier|private
name|FiCaSchedulerNode
name|schedulerNode
decl_stmt|;
DECL|field|selectedContainers
specifier|private
name|List
argument_list|<
name|RMContainer
argument_list|>
name|selectedContainers
decl_stmt|;
DECL|method|NodeForPreemption (float preemptionCost, FiCaSchedulerNode schedulerNode, List<RMContainer> selectedContainers)
specifier|public
name|NodeForPreemption
parameter_list|(
name|float
name|preemptionCost
parameter_list|,
name|FiCaSchedulerNode
name|schedulerNode
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|selectedContainers
parameter_list|)
block|{
name|this
operator|.
name|preemptionCost
operator|=
name|preemptionCost
expr_stmt|;
name|this
operator|.
name|schedulerNode
operator|=
name|schedulerNode
expr_stmt|;
name|this
operator|.
name|selectedContainers
operator|=
name|selectedContainers
expr_stmt|;
block|}
block|}
DECL|method|ReservedContainerCandidatesSelector ( CapacitySchedulerPreemptionContext preemptionContext)
name|ReservedContainerCandidatesSelector
parameter_list|(
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|)
block|{
name|super
argument_list|(
name|preemptionContext
argument_list|)
expr_stmt|;
name|preemptableAmountCalculator
operator|=
operator|new
name|PreemptableResourceCalculator
argument_list|(
name|preemptionContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|selectCandidates ( Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource clusterResource, Resource totalPreemptedResourceAllowed)
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectCandidates
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|totalPreemptedResourceAllowed
parameter_list|)
block|{
comment|// Calculate how much resources we need to preempt
name|preemptableAmountCalculator
operator|.
name|computeIdealAllocation
argument_list|(
name|clusterResource
argument_list|,
name|totalPreemptedResourceAllowed
argument_list|)
expr_stmt|;
comment|// Get queue to preemptable resource by partition
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|queueToPreemptableResourceByPartition
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|leafQueue
range|:
name|preemptionContext
operator|.
name|getLeafQueueNames
argument_list|()
control|)
block|{
name|queueToPreemptableResourceByPartition
operator|.
name|put
argument_list|(
name|leafQueue
argument_list|,
name|CapacitySchedulerPreemptionUtils
operator|.
name|getResToObtainByPartitionForLeafQueue
argument_list|(
name|preemptionContext
argument_list|,
name|leafQueue
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Get list of nodes for preemption, ordered by preemption cost
name|List
argument_list|<
name|NodeForPreemption
argument_list|>
name|nodesForPreemption
init|=
name|getNodesForPreemption
argument_list|(
name|queueToPreemptableResourceByPartition
argument_list|,
name|selectedCandidates
argument_list|,
name|totalPreemptedResourceAllowed
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeForPreemption
name|nfp
range|:
name|nodesForPreemption
control|)
block|{
name|RMContainer
name|reservedContainer
init|=
name|nfp
operator|.
name|schedulerNode
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|reservedContainer
condition|)
block|{
continue|continue;
block|}
name|NodeForPreemption
name|preemptionResult
init|=
name|getPreemptionCandidatesOnNode
argument_list|(
name|nfp
operator|.
name|schedulerNode
argument_list|,
name|queueToPreemptableResourceByPartition
argument_list|,
name|selectedCandidates
argument_list|,
name|totalPreemptedResourceAllowed
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|preemptionResult
condition|)
block|{
for|for
control|(
name|RMContainer
name|c
range|:
name|preemptionResult
operator|.
name|selectedContainers
control|)
block|{
name|ApplicationAttemptId
name|appId
init|=
name|c
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
name|selectedCandidates
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|containers
condition|)
block|{
name|containers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|selectedCandidates
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|containers
argument_list|)
expr_stmt|;
block|}
name|containers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Marked container="
operator|+
name|c
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" from queue="
operator|+
name|c
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" to be preemption candidates"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|selectedCandidates
return|;
block|}
DECL|method|getPreemptableResource (String queueName, String partitionName, Map<String, Map<String, Resource>> queueToPreemptableResourceByPartition)
specifier|private
name|Resource
name|getPreemptableResource
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|queueToPreemptableResourceByPartition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|partitionToPreemptable
init|=
name|queueToPreemptableResourceByPartition
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|partitionToPreemptable
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Resource
name|preemptable
init|=
name|partitionToPreemptable
operator|.
name|get
argument_list|(
name|partitionName
argument_list|)
decl_stmt|;
return|return
name|preemptable
return|;
block|}
DECL|method|tryToPreemptFromQueue (String queueName, String partitionName, Map<String, Map<String, Resource>> queueToPreemptableResourceByPartition, Resource required, Resource totalPreemptionAllowed, boolean readOnly)
specifier|private
name|boolean
name|tryToPreemptFromQueue
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|queueToPreemptableResourceByPartition
parameter_list|,
name|Resource
name|required
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|Resource
name|preemptable
init|=
name|getPreemptableResource
argument_list|(
name|queueName
argument_list|,
name|partitionName
argument_list|,
name|queueToPreemptableResourceByPartition
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|preemptable
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rc
argument_list|,
name|required
argument_list|,
name|preemptable
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rc
argument_list|,
name|required
argument_list|,
name|totalPreemptionAllowed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|preemptable
argument_list|,
name|required
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|totalPreemptionAllowed
argument_list|,
name|required
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Try to check if we can preempt resources for reserved container in given node    * @param node    * @param queueToPreemptableResourceByPartition it's a map of    *<queueName,<partition, preemptable-resource>>    * @param readOnly do we want to modify preemptable resource after we selected    *                 candidates    * @return NodeForPreemption if it's possible to preempt containers on the node    * to satisfy reserved resource    */
DECL|method|getPreemptionCandidatesOnNode ( FiCaSchedulerNode node, Map<String, Map<String, Resource>> queueToPreemptableResourceByPartition, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource totalPreemptionAllowed, boolean readOnly)
specifier|private
name|NodeForPreemption
name|getPreemptionCandidatesOnNode
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|queueToPreemptableResourceByPartition
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
name|Resource
name|available
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|node
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|totalSelected
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|sortedRunningContainers
init|=
name|node
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|selectedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
name|killableContainers
init|=
name|node
operator|.
name|getKillableContainers
argument_list|()
decl_stmt|;
comment|// Sort running container by launch time, we preferred to preempt recent
comment|// launched preempt container
name|Collections
operator|.
name|sort
argument_list|(
name|sortedRunningContainers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RMContainer
name|o1
parameter_list|,
name|RMContainer
name|o2
parameter_list|)
block|{
return|return
operator|-
literal|1
operator|*
name|o1
operator|.
name|getContainerId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// First check: can we preempt containers to allocate the
comment|// reservedContainer?
name|boolean
name|canAllocateReservedContainer
init|=
literal|false
decl_stmt|;
comment|// At least, we can get available + killable resources from this node
name|Resource
name|cur
init|=
name|Resources
operator|.
name|add
argument_list|(
name|available
argument_list|,
name|node
operator|.
name|getTotalKillableResources
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partition
init|=
name|node
operator|.
name|getPartition
argument_list|()
decl_stmt|;
comment|// Avoid preempt any container if required<= available + killable
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rc
argument_list|,
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
argument_list|,
name|cur
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Extra cost of am container preemption
name|float
name|amPreemptionCost
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|sortedRunningContainers
control|)
block|{
name|String
name|containerQueueName
init|=
name|c
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
comment|// Skip container if it is already marked killable
if|if
condition|(
name|killableContainers
operator|.
name|containsKey
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// An alternative approach is add a "penalty cost" if AM container is
comment|// selected. Here for safety, avoid preempt AM container in any cases
if|if
condition|(
name|c
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip selecting AM container on host="
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" AM container="
operator|+
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// Can we preempt container c?
comment|// Check if we have quota to preempt this container
name|boolean
name|canPreempt
init|=
name|tryToPreemptFromQueue
argument_list|(
name|containerQueueName
argument_list|,
name|partition
argument_list|,
name|queueToPreemptableResourceByPartition
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|totalPreemptionAllowed
argument_list|,
name|readOnly
argument_list|)
decl_stmt|;
comment|// If we can, add to selected container, and change resource accordingly.
if|if
condition|(
name|canPreempt
condition|)
block|{
if|if
condition|(
operator|!
name|CapacitySchedulerPreemptionUtils
operator|.
name|isContainerAlreadySelected
argument_list|(
name|c
argument_list|,
name|selectedCandidates
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|selectedContainers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|totalSelected
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|cur
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rc
argument_list|,
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
argument_list|,
name|cur
argument_list|)
condition|)
block|{
name|canAllocateReservedContainer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|canAllocateReservedContainer
condition|)
block|{
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
comment|// Revert queue preemption quotas
for|for
control|(
name|RMContainer
name|c
range|:
name|selectedContainers
control|)
block|{
name|Resource
name|res
init|=
name|getPreemptableResource
argument_list|(
name|c
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|partition
argument_list|,
name|queueToPreemptableResourceByPartition
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|res
condition|)
block|{
comment|// This shouldn't happen in normal cases, one possible cause is
comment|// container moved to different queue while executing preemption logic.
comment|// Ignore such failures.
continue|continue;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|res
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|float
name|ratio
init|=
name|Resources
operator|.
name|ratio
argument_list|(
name|rc
argument_list|,
name|totalSelected
argument_list|,
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
argument_list|)
decl_stmt|;
comment|// Compute preemption score
name|NodeForPreemption
name|nfp
init|=
operator|new
name|NodeForPreemption
argument_list|(
name|ratio
operator|+
name|amPreemptionCost
argument_list|,
name|node
argument_list|,
name|selectedContainers
argument_list|)
decl_stmt|;
return|return
name|nfp
return|;
block|}
DECL|method|getNodesForPreemption ( Map<String, Map<String, Resource>> queueToPreemptableResourceByPartition, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource totalPreemptionAllowed)
specifier|private
name|List
argument_list|<
name|NodeForPreemption
argument_list|>
name|getNodesForPreemption
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|queueToPreemptableResourceByPartition
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
name|List
argument_list|<
name|NodeForPreemption
argument_list|>
name|nfps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// get nodes have reserved container
for|for
control|(
name|FiCaSchedulerNode
name|node
range|:
name|preemptionContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getAllNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NodeForPreemption
name|nfp
init|=
name|getPreemptionCandidatesOnNode
argument_list|(
name|node
argument_list|,
name|queueToPreemptableResourceByPartition
argument_list|,
name|selectedCandidates
argument_list|,
name|totalPreemptionAllowed
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|nfp
condition|)
block|{
comment|// Null means we cannot preempt containers on the node to satisfy
comment|// reserved container
name|nfps
operator|.
name|add
argument_list|(
name|nfp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Return sorted node-for-preemptions (by cost)
name|Collections
operator|.
name|sort
argument_list|(
name|nfps
argument_list|,
operator|new
name|Comparator
argument_list|<
name|NodeForPreemption
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|NodeForPreemption
name|o1
parameter_list|,
name|NodeForPreemption
name|o2
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|preemptionCost
argument_list|,
name|o2
operator|.
name|preemptionCost
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|nfps
return|;
block|}
block|}
end_class

end_unit

