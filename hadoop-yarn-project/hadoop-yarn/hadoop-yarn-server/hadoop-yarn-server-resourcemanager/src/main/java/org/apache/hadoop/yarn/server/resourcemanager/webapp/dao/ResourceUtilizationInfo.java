begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_comment
comment|/**  * DAO object represents resource utilization of node and containers.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ResourceUtilizationInfo
specifier|public
class|class
name|ResourceUtilizationInfo
block|{
DECL|field|nodePhysicalMemoryMB
specifier|protected
name|int
name|nodePhysicalMemoryMB
decl_stmt|;
DECL|field|nodeVirtualMemoryMB
specifier|protected
name|int
name|nodeVirtualMemoryMB
decl_stmt|;
DECL|field|nodeCPUUsage
specifier|protected
name|double
name|nodeCPUUsage
decl_stmt|;
DECL|field|aggregatedContainersPhysicalMemoryMB
specifier|protected
name|int
name|aggregatedContainersPhysicalMemoryMB
decl_stmt|;
DECL|field|aggregatedContainersVirtualMemoryMB
specifier|protected
name|int
name|aggregatedContainersVirtualMemoryMB
decl_stmt|;
DECL|field|containersCPUUsage
specifier|protected
name|double
name|containersCPUUsage
decl_stmt|;
DECL|method|ResourceUtilizationInfo ()
specifier|public
name|ResourceUtilizationInfo
parameter_list|()
block|{   }
comment|// JAXB needs this
DECL|method|ResourceUtilizationInfo (RMNode ni)
specifier|public
name|ResourceUtilizationInfo
parameter_list|(
name|RMNode
name|ni
parameter_list|)
block|{
comment|// update node and containers resource utilization
name|ResourceUtilization
name|nodeUtilization
init|=
name|ni
operator|.
name|getNodeUtilization
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeUtilization
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nodePhysicalMemoryMB
operator|=
name|nodeUtilization
operator|.
name|getPhysicalMemory
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeVirtualMemoryMB
operator|=
name|nodeUtilization
operator|.
name|getVirtualMemory
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeCPUUsage
operator|=
name|nodeUtilization
operator|.
name|getCPU
argument_list|()
expr_stmt|;
block|}
name|ResourceUtilization
name|containerAggrUtilization
init|=
name|ni
operator|.
name|getAggregatedContainersUtilization
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerAggrUtilization
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|aggregatedContainersPhysicalMemoryMB
operator|=
name|containerAggrUtilization
operator|.
name|getPhysicalMemory
argument_list|()
expr_stmt|;
name|this
operator|.
name|aggregatedContainersVirtualMemoryMB
operator|=
name|containerAggrUtilization
operator|.
name|getVirtualMemory
argument_list|()
expr_stmt|;
name|this
operator|.
name|containersCPUUsage
operator|=
name|containerAggrUtilization
operator|.
name|getCPU
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNodePhysicalMemoryMB ()
specifier|public
name|int
name|getNodePhysicalMemoryMB
parameter_list|()
block|{
return|return
name|nodePhysicalMemoryMB
return|;
block|}
DECL|method|getNodeVirtualMemoryMB ()
specifier|public
name|int
name|getNodeVirtualMemoryMB
parameter_list|()
block|{
return|return
name|nodeVirtualMemoryMB
return|;
block|}
DECL|method|getAggregatedContainersPhysicalMemoryMB ()
specifier|public
name|int
name|getAggregatedContainersPhysicalMemoryMB
parameter_list|()
block|{
return|return
name|aggregatedContainersPhysicalMemoryMB
return|;
block|}
DECL|method|getAggregatedContainersVirtualMemoryMB ()
specifier|public
name|int
name|getAggregatedContainersVirtualMemoryMB
parameter_list|()
block|{
return|return
name|aggregatedContainersVirtualMemoryMB
return|;
block|}
DECL|method|getNodeCPUUsage ()
specifier|public
name|double
name|getNodeCPUUsage
parameter_list|()
block|{
return|return
name|nodeCPUUsage
return|;
block|}
DECL|method|getContainersCPUUsage ()
specifier|public
name|double
name|getContainersCPUUsage
parameter_list|()
block|{
return|return
name|containersCPUUsage
return|;
block|}
block|}
end_class

end_unit

