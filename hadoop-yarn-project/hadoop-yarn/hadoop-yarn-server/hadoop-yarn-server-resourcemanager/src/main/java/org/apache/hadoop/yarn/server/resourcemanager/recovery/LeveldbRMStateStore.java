begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|asString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|VersionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|AMRMTokenSecretManagerStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|EpochProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationAttemptStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ReservationAllocationStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|AMRMTokenSecretManagerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|Epoch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|RMDelegationTokenIdentifierData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|AMRMTokenSecretManagerStatePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|LeveldbIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|internal
operator|.
name|NativeDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Changes from 1.0 to 1.1, Addition of ReservationSystem state.  */
end_comment

begin_class
DECL|class|LeveldbRMStateStore
specifier|public
class|class
name|LeveldbRMStateStore
extends|extends
name|RMStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LeveldbRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
DECL|field|DB_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"yarn-rm-state"
decl_stmt|;
DECL|field|RM_DT_MASTER_KEY_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RM_DT_MASTER_KEY_KEY_PREFIX
init|=
name|RM_DT_SECRET_MANAGER_ROOT
operator|+
name|SEPARATOR
operator|+
name|DELEGATION_KEY_PREFIX
decl_stmt|;
DECL|field|RM_DT_TOKEN_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RM_DT_TOKEN_KEY_PREFIX
init|=
name|RM_DT_SECRET_MANAGER_ROOT
operator|+
name|SEPARATOR
operator|+
name|DELEGATION_TOKEN_PREFIX
decl_stmt|;
DECL|field|RM_DT_SEQUENCE_NUMBER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|RM_DT_SEQUENCE_NUMBER_KEY
init|=
name|RM_DT_SECRET_MANAGER_ROOT
operator|+
name|SEPARATOR
operator|+
literal|"RMDTSequentialNumber"
decl_stmt|;
DECL|field|RM_APP_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RM_APP_KEY_PREFIX
init|=
name|RM_APP_ROOT
operator|+
name|SEPARATOR
operator|+
name|ApplicationId
operator|.
name|appIdStrPrefix
decl_stmt|;
DECL|field|RM_RESERVATION_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RM_RESERVATION_KEY_PREFIX
init|=
name|RESERVATION_SYSTEM_ROOT
operator|+
name|SEPARATOR
decl_stmt|;
DECL|field|CURRENT_VERSION_INFO
specifier|private
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|field|compactionTimer
specifier|private
name|Timer
name|compactionTimer
decl_stmt|;
DECL|field|compactionIntervalMsec
specifier|private
name|long
name|compactionIntervalMsec
decl_stmt|;
DECL|method|getApplicationNodeKey (ApplicationId appId)
specifier|private
name|String
name|getApplicationNodeKey
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|RM_APP_ROOT
operator|+
name|SEPARATOR
operator|+
name|appId
return|;
block|}
DECL|method|getApplicationAttemptNodeKey (ApplicationAttemptId attemptId)
specifier|private
name|String
name|getApplicationAttemptNodeKey
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
return|return
name|getApplicationAttemptNodeKey
argument_list|(
name|getApplicationNodeKey
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
DECL|method|getApplicationAttemptNodeKey (String appNodeKey, ApplicationAttemptId attemptId)
specifier|private
name|String
name|getApplicationAttemptNodeKey
parameter_list|(
name|String
name|appNodeKey
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
return|return
name|appNodeKey
operator|+
name|SEPARATOR
operator|+
name|attemptId
return|;
block|}
DECL|method|getRMDTMasterKeyNodeKey (DelegationKey masterKey)
specifier|private
name|String
name|getRMDTMasterKeyNodeKey
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
block|{
return|return
name|RM_DT_MASTER_KEY_KEY_PREFIX
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
return|;
block|}
DECL|method|getRMDTTokenNodeKey (RMDelegationTokenIdentifier tokenId)
specifier|private
name|String
name|getRMDTTokenNodeKey
parameter_list|(
name|RMDelegationTokenIdentifier
name|tokenId
parameter_list|)
block|{
return|return
name|RM_DT_TOKEN_KEY_PREFIX
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
return|;
block|}
DECL|method|getReservationNodeKey (String planName, String reservationId)
specifier|private
name|String
name|getReservationNodeKey
parameter_list|(
name|String
name|planName
parameter_list|,
name|String
name|reservationId
parameter_list|)
block|{
return|return
name|RESERVATION_SYSTEM_ROOT
operator|+
name|SEPARATOR
operator|+
name|planName
operator|+
name|SEPARATOR
operator|+
name|reservationId
return|;
block|}
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|protected
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|compactionIntervalMsec
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_LEVELDB_COMPACTION_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_LEVELDB_COMPACTION_INTERVAL_SECS
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
DECL|method|getStorageDir ()
specifier|private
name|Path
name|getStorageDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|storePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_LEVELDB_STORE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|storePath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No store location directory configured in "
operator|+
name|YarnConfiguration
operator|.
name|RM_LEVELDB_STORE_PATH
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|storePath
argument_list|,
name|DB_NAME
argument_list|)
return|;
block|}
DECL|method|createStorageDir ()
specifier|private
name|Path
name|createStorageDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
name|getStorageDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
annotation|@
name|Override
DECL|method|startInternal ()
specifier|protected
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|openDatabase
argument_list|()
expr_stmt|;
name|startCompactionTimer
argument_list|()
expr_stmt|;
block|}
DECL|method|openDatabase ()
specifier|protected
name|DB
name|openDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|storeRoot
init|=
name|createStorageDir
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using state database at "
operator|+
name|storeRoot
operator|+
literal|" for recovery"
argument_list|)
expr_stmt|;
name|File
name|dbfile
init|=
operator|new
name|File
argument_list|(
name|storeRoot
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NativeDB
operator|.
name|DBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNotFound
argument_list|()
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" does not exist "
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating state database at "
operator|+
name|dbfile
argument_list|)
expr_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// store version
name|storeVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbErr
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|dbErr
operator|.
name|getMessage
argument_list|()
argument_list|,
name|dbErr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|db
return|;
block|}
DECL|method|startCompactionTimer ()
specifier|private
name|void
name|startCompactionTimer
parameter_list|()
block|{
if|if
condition|(
name|compactionIntervalMsec
operator|>
literal|0
condition|)
block|{
name|compactionTimer
operator|=
operator|new
name|Timer
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" compaction timer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|compactionTimer
operator|.
name|schedule
argument_list|(
operator|new
name|CompactionTimerTask
argument_list|()
argument_list|,
name|compactionIntervalMsec
argument_list|,
name|compactionIntervalMsec
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|protected
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|compactionTimer
operator|!=
literal|null
condition|)
block|{
name|compactionTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|compactionTimer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|isClosed ()
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|db
operator|==
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatabase ()
name|DB
name|getDatabase
parameter_list|()
block|{
return|return
name|db
return|;
block|}
annotation|@
name|Override
DECL|method|loadVersion ()
specifier|protected
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Version
name|version
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|VERSION_NODE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
operator|new
name|VersionPBImpl
argument_list|(
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|storeVersion ()
specifier|protected
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|dbStoreVersion
argument_list|(
name|CURRENT_VERSION_INFO
argument_list|)
expr_stmt|;
block|}
DECL|method|dbStoreVersion (Version state)
name|void
name|dbStoreVersion
parameter_list|(
name|Version
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|VERSION_NODE
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|state
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|protected
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
annotation|@
name|Override
DECL|method|getAndIncrementEpoch ()
specifier|public
specifier|synchronized
name|long
name|getAndIncrementEpoch
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|currentEpoch
init|=
name|baseEpoch
decl_stmt|;
name|byte
index|[]
name|dbKeyBytes
init|=
name|bytes
argument_list|(
name|EPOCH_NODE
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|dbKeyBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|currentEpoch
operator|=
name|EpochProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
operator|.
name|getEpoch
argument_list|()
expr_stmt|;
block|}
name|EpochProto
name|proto
init|=
name|Epoch
operator|.
name|newInstance
argument_list|(
name|nextEpoch
argument_list|(
name|currentEpoch
argument_list|)
argument_list|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|db
operator|.
name|put
argument_list|(
name|dbKeyBytes
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|currentEpoch
return|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
name|loadRMDTSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
name|loadRMApps
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
name|loadAMRMTokenSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
name|loadReservationState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
return|return
name|rmState
return|;
block|}
DECL|method|loadReservationState (RMState rmState)
specifier|private
name|void
name|loadReservationState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numReservations
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|RM_RESERVATION_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|RM_RESERVATION_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|planReservationString
init|=
name|key
operator|.
name|substring
argument_list|(
name|RM_RESERVATION_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|planReservationString
operator|.
name|split
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incorrect reservation state key "
operator|+
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|planName
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|reservationName
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|ReservationAllocationStateProto
name|allocationState
init|=
name|ReservationAllocationStateProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rmState
operator|.
name|getReservationState
argument_list|()
operator|.
name|containsKey
argument_list|(
name|planName
argument_list|)
condition|)
block|{
name|rmState
operator|.
name|getReservationState
argument_list|()
operator|.
name|put
argument_list|(
name|planName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ReservationId
argument_list|,
name|ReservationAllocationStateProto
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReservationId
name|reservationId
init|=
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|reservationName
argument_list|)
decl_stmt|;
name|rmState
operator|.
name|getReservationState
argument_list|()
operator|.
name|get
argument_list|(
name|planName
argument_list|)
operator|.
name|put
argument_list|(
name|reservationId
argument_list|,
name|allocationState
argument_list|)
expr_stmt|;
name|numReservations
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered "
operator|+
name|numReservations
operator|+
literal|" reservations"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRMDTSecretManagerState (RMState state)
specifier|private
name|void
name|loadRMDTSecretManagerState
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numKeys
init|=
name|loadRMDTSecretManagerKeys
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered "
operator|+
name|numKeys
operator|+
literal|" RM delegation token master keys"
argument_list|)
expr_stmt|;
name|int
name|numTokens
init|=
name|loadRMDTSecretManagerTokens
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered "
operator|+
name|numTokens
operator|+
literal|" RM delegation tokens"
argument_list|)
expr_stmt|;
name|loadRMDTSecretManagerTokenSequenceNumber
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRMDTSecretManagerKeys (RMState state)
specifier|private
name|int
name|loadRMDTSecretManagerKeys
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numKeys
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|RM_DT_MASTER_KEY_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|RM_DT_MASTER_KEY_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|DelegationKey
name|masterKey
init|=
name|loadDelegationKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|.
name|rmSecretManagerState
operator|.
name|masterKeyState
operator|.
name|add
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
operator|++
name|numKeys
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded RM delegation key from "
operator|+
name|key
operator|+
literal|": keyId="
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
operator|+
literal|", expirationDate="
operator|+
name|masterKey
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|numKeys
return|;
block|}
DECL|method|loadDelegationKey (byte[] data)
specifier|private
name|DelegationKey
name|loadDelegationKey
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
DECL|method|loadRMDTSecretManagerTokens (RMState state)
specifier|private
name|int
name|loadRMDTSecretManagerTokens
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|RM_DT_TOKEN_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|RM_DT_TOKEN_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|RMDelegationTokenIdentifierData
name|tokenData
init|=
name|loadDelegationToken
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|tokenId
init|=
name|tokenData
operator|.
name|getTokenIdentifier
argument_list|()
decl_stmt|;
name|long
name|renewDate
init|=
name|tokenData
operator|.
name|getRenewDate
argument_list|()
decl_stmt|;
name|state
operator|.
name|rmSecretManagerState
operator|.
name|delegationTokenState
operator|.
name|put
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
operator|++
name|numTokens
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded RM delegation token from "
operator|+
name|key
operator|+
literal|": tokenId="
operator|+
name|tokenId
operator|+
literal|", renewDate="
operator|+
name|renewDate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|numTokens
return|;
block|}
DECL|method|loadDelegationToken (byte[] data)
specifier|private
name|RMDelegationTokenIdentifierData
name|loadDelegationToken
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|RMDelegationTokenIdentifierData
name|tokenData
init|=
literal|null
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|tokenData
operator|=
name|RMStateStoreUtils
operator|.
name|readRMDelegationTokenIdentifierData
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenData
return|;
block|}
DECL|method|loadRMDTSecretManagerTokenSequenceNumber (RMState state)
specifier|private
name|void
name|loadRMDTSecretManagerTokenSequenceNumber
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|RM_DT_SEQUENCE_NUMBER_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|state
operator|.
name|rmSecretManagerState
operator|.
name|dtSequenceNumber
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadRMApps (RMState state)
specifier|private
name|void
name|loadRMApps
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numApps
init|=
literal|0
decl_stmt|;
name|int
name|numAppAttempts
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|RM_APP_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|RM_APP_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|appIdStr
init|=
name|key
operator|.
name|substring
argument_list|(
name|RM_APP_ROOT
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|appIdStr
operator|.
name|contains
argument_list|(
name|SEPARATOR
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping extraneous data "
operator|+
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|numAppAttempts
operator|+=
name|loadRMApp
argument_list|(
name|state
argument_list|,
name|iter
argument_list|,
name|appIdStr
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|numApps
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered "
operator|+
name|numApps
operator|+
literal|" applications and "
operator|+
name|numAppAttempts
operator|+
literal|" application attempts"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRMApp (RMState rmState, LeveldbIterator iter, String appIdStr, byte[] appData)
specifier|private
name|int
name|loadRMApp
parameter_list|(
name|RMState
name|rmState
parameter_list|,
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|appIdStr
parameter_list|,
name|byte
index|[]
name|appData
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationStateData
name|appState
init|=
name|createApplicationState
argument_list|(
name|appIdStr
argument_list|,
name|appData
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|appState
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|String
name|attemptNodePrefix
init|=
name|getApplicationNodeKey
argument_list|(
name|appId
argument_list|)
operator|+
name|SEPARATOR
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|attemptNodePrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|attemptId
init|=
name|key
operator|.
name|substring
argument_list|(
name|attemptNodePrefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptId
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
name|ApplicationAttemptStateData
name|attemptState
init|=
name|createAttemptState
argument_list|(
name|attemptId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring unknown application key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|int
name|numAttempts
init|=
name|appState
operator|.
name|attempts
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded application "
operator|+
name|appId
operator|+
literal|" with "
operator|+
name|numAttempts
operator|+
literal|" attempts"
argument_list|)
expr_stmt|;
block|}
return|return
name|numAttempts
return|;
block|}
DECL|method|createApplicationState (String appIdStr, byte[] data)
specifier|private
name|ApplicationStateData
name|createApplicationState
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appIdStr
argument_list|)
decl_stmt|;
name|ApplicationStateDataPBImpl
name|appState
init|=
operator|new
name|ApplicationStateDataPBImpl
argument_list|(
name|ApplicationStateDataProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The database entry for "
operator|+
name|appId
operator|+
literal|" contains data for "
operator|+
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|appState
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|loadRMAppState (ApplicationId appId)
name|ApplicationStateData
name|loadRMAppState
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|appKey
init|=
name|getApplicationNodeKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|appKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|createApplicationState
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|loadRMAppAttemptState ( ApplicationAttemptId attemptId)
name|ApplicationAttemptStateData
name|loadRMAppAttemptState
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|attemptKey
init|=
name|getApplicationAttemptNodeKey
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|attemptKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|createAttemptState
argument_list|(
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|method|createAttemptState (String itemName, byte[] data)
specifier|private
name|ApplicationAttemptStateData
name|createAttemptState
parameter_list|(
name|String
name|itemName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|itemName
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateDataPBImpl
name|attemptState
init|=
operator|new
name|ApplicationAttemptStateDataPBImpl
argument_list|(
name|ApplicationAttemptStateDataProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attemptId
operator|.
name|equals
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The database entry for "
operator|+
name|attemptId
operator|+
literal|" contains data for "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attemptState
return|;
block|}
DECL|method|loadAMRMTokenSecretManagerState (RMState rmState)
specifier|private
name|void
name|loadAMRMTokenSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|AMRMTOKEN_SECRET_MANAGER_ROOT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|AMRMTokenSecretManagerStatePBImpl
name|stateData
init|=
operator|new
name|AMRMTokenSecretManagerStatePBImpl
argument_list|(
name|AMRMTokenSecretManagerStateProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|rmState
operator|.
name|amrmTokenSecretManagerState
operator|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|stateData
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|,
name|stateData
operator|.
name|getNextMasterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateData)
specifier|protected
name|void
name|storeApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateData
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getApplicationNodeKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing state for app "
operator|+
name|appId
operator|+
literal|" at "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|appStateData
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateData)
specifier|protected
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateData
parameter_list|)
throws|throws
name|IOException
block|{
name|storeApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeApplicationAttemptStateInternal ( ApplicationAttemptId attemptId, ApplicationAttemptStateData attemptStateData)
specifier|protected
name|void
name|storeApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateData
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getApplicationAttemptNodeKey
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing state for attempt "
operator|+
name|attemptId
operator|+
literal|" at "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|attemptStateData
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationAttemptStateInternal ( ApplicationAttemptId attemptId, ApplicationAttemptStateData attemptStateData)
specifier|protected
name|void
name|updateApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateData
parameter_list|)
throws|throws
name|IOException
block|{
name|storeApplicationAttemptStateInternal
argument_list|(
name|attemptId
argument_list|,
name|attemptStateData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeApplicationAttemptInternal ( ApplicationAttemptId attemptId)
specifier|public
specifier|synchronized
name|void
name|removeApplicationAttemptInternal
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|attemptKey
init|=
name|getApplicationAttemptNodeKey
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing state for attempt "
operator|+
name|attemptId
operator|+
literal|" at "
operator|+
name|attemptKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|attemptKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplicationStateInternal (ApplicationStateData appState)
specifier|protected
name|void
name|removeApplicationStateInternal
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|String
name|appKey
init|=
name|getApplicationNodeKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|appKey
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|attemptId
range|:
name|appState
operator|.
name|attempts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|attemptKey
init|=
name|getApplicationAttemptNodeKey
argument_list|(
name|appKey
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|attemptKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing state for app "
operator|+
name|appId
operator|+
literal|" and "
operator|+
name|appState
operator|.
name|attempts
operator|.
name|size
argument_list|()
operator|+
literal|" attempts"
operator|+
literal|" at "
operator|+
name|appKey
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeReservationState ( ReservationAllocationStateProto reservationAllocation, String planName, String reservationIdName)
specifier|protected
name|void
name|storeReservationState
parameter_list|(
name|ReservationAllocationStateProto
name|reservationAllocation
parameter_list|,
name|String
name|planName
parameter_list|,
name|String
name|reservationIdName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|key
init|=
name|getReservationNodeKey
argument_list|(
name|planName
argument_list|,
name|reservationIdName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing state for reservation "
operator|+
name|reservationIdName
operator|+
literal|" plan "
operator|+
name|planName
operator|+
literal|" at "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|reservationAllocation
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeReservationState (String planName, String reservationIdName)
specifier|protected
name|void
name|removeReservationState
parameter_list|(
name|String
name|planName
parameter_list|,
name|String
name|reservationIdName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|reservationKey
init|=
name|getReservationNodeKey
argument_list|(
name|planName
argument_list|,
name|reservationIdName
argument_list|)
decl_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|reservationKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing state for reservation "
operator|+
name|reservationIdName
operator|+
literal|" plan "
operator|+
name|planName
operator|+
literal|" at "
operator|+
name|reservationKey
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|storeOrUpdateRMDT (RMDelegationTokenIdentifier tokenId, Long renewDate, boolean isUpdate)
specifier|private
name|void
name|storeOrUpdateRMDT
parameter_list|(
name|RMDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tokenKey
init|=
name|getRMDTTokenNodeKey
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifierData
name|tokenData
init|=
operator|new
name|RMDelegationTokenIdentifierData
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token to "
operator|+
name|tokenKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|tokenKey
argument_list|)
argument_list|,
name|tokenData
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isUpdate
condition|)
block|{
name|ByteArrayOutputStream
name|bs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bs
argument_list|)
init|)
block|{
name|ds
operator|.
name|writeInt
argument_list|(
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
operator|+
literal|" to "
operator|+
name|RM_DT_SEQUENCE_NUMBER_KEY
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|RM_DT_SEQUENCE_NUMBER_KEY
argument_list|)
argument_list|,
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeRMDelegationTokenState ( RMDelegationTokenIdentifier tokenId, Long renewDate)
specifier|protected
name|void
name|storeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|storeOrUpdateRMDT
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateRMDelegationTokenState ( RMDelegationTokenIdentifier tokenId, Long renewDate)
specifier|protected
name|void
name|updateRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|storeOrUpdateRMDT
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeRMDelegationTokenState ( RMDelegationTokenIdentifier tokenId)
specifier|protected
name|void
name|removeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tokenKey
init|=
name|getRMDTTokenNodeKey
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing token at "
operator|+
name|tokenKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|tokenKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeRMDTMasterKeyState (DelegationKey masterKey)
specifier|protected
name|void
name|storeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dbKey
init|=
name|getRMDTMasterKeyNodeKey
argument_list|(
name|masterKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token master key to "
operator|+
name|dbKey
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|masterKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|dbKey
argument_list|)
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeRMDTMasterKeyState (DelegationKey masterKey)
specifier|protected
name|void
name|removeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dbKey
init|=
name|getRMDTMasterKeyNodeKey
argument_list|(
name|masterKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing token master key at "
operator|+
name|dbKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|dbKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeOrUpdateAMRMTokenSecretManagerState ( AMRMTokenSecretManagerState state, boolean isUpdate)
specifier|public
name|void
name|storeOrUpdateAMRMTokenSecretManagerState
parameter_list|(
name|AMRMTokenSecretManagerState
name|state
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
block|{
name|AMRMTokenSecretManagerState
name|data
init|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateData
init|=
name|data
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|AMRMTOKEN_SECRET_MANAGER_ROOT
argument_list|)
argument_list|,
name|stateData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteStore ()
specifier|public
name|void
name|deleteStore
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
name|getStorageDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting state database at "
operator|+
name|root
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|=
literal|null
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId removeAppId)
specifier|public
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|removeAppId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|appKey
init|=
name|getApplicationNodeKey
argument_list|(
name|removeAppId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing state for app "
operator|+
name|removeAppId
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|appKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumEntriesInDatabase ()
name|int
name|getNumEntriesInDatabase
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numEntries
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"entry: "
operator|+
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|numEntries
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|numEntries
return|;
block|}
DECL|class|CompactionTimerTask
specifier|private
class|class
name|CompactionTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting full compaction cycle"
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|compactRange
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error compacting database"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|duration
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Full compaction cycle completed in "
operator|+
name|duration
operator|+
literal|" msec"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

