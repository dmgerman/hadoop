begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class that determines what should happen if the FS->CS converter  * encounters a property that is currently not supported.  *  * Acceptable values are either "abort" or "warning".  */
end_comment

begin_class
DECL|class|FSConfigToCSConfigRuleHandler
specifier|public
class|class
name|FSConfigToCSConfigRuleHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSConfigToCSConfigRuleHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_CHILD_QUEUE_LIMIT
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CHILD_QUEUE_LIMIT
init|=
literal|"maxChildQueue.limit"
decl_stmt|;
DECL|field|MAX_CAPACITY_PERCENTAGE
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CAPACITY_PERCENTAGE
init|=
literal|"maxCapacityPercentage.action"
decl_stmt|;
DECL|field|MAX_CHILD_CAPACITY
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CHILD_CAPACITY
init|=
literal|"maxChildCapacity.action"
decl_stmt|;
DECL|field|USER_MAX_RUNNING_APPS
specifier|public
specifier|static
specifier|final
name|String
name|USER_MAX_RUNNING_APPS
init|=
literal|"userMaxRunningApps.action"
decl_stmt|;
DECL|field|USER_MAX_APPS_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|USER_MAX_APPS_DEFAULT
init|=
literal|"userMaxAppsDefault.action"
decl_stmt|;
DECL|field|DYNAMIC_MAX_ASSIGN
specifier|public
specifier|static
specifier|final
name|String
name|DYNAMIC_MAX_ASSIGN
init|=
literal|"dynamicMaxAssign.action"
decl_stmt|;
DECL|field|SPECIFIED_NOT_FIRST
specifier|public
specifier|static
specifier|final
name|String
name|SPECIFIED_NOT_FIRST
init|=
literal|"specifiedNotFirstRule.action"
decl_stmt|;
DECL|field|RESERVATION_SYSTEM
specifier|public
specifier|static
specifier|final
name|String
name|RESERVATION_SYSTEM
init|=
literal|"reservationSystem.action"
decl_stmt|;
DECL|field|QUEUE_AUTO_CREATE
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_AUTO_CREATE
init|=
literal|"queueAutoCreate.action"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|enum|RuleAction
enum|enum
name|RuleAction
block|{
DECL|enumConstant|WARNING
name|WARNING
block|,
DECL|enumConstant|ABORT
name|ABORT
block|}
DECL|field|actions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RuleAction
argument_list|>
name|actions
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
DECL|method|loadRulesFromFile (String ruleFile)
name|void
name|loadRulesFromFile
parameter_list|(
name|String
name|ruleFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ruleFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Rule file cannot be null!"
argument_list|)
throw|;
block|}
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|ruleFile
argument_list|)
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|actions
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|initPropertyActions
argument_list|()
expr_stmt|;
block|}
DECL|method|FSConfigToCSConfigRuleHandler ()
specifier|public
name|FSConfigToCSConfigRuleHandler
parameter_list|()
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|actions
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|FSConfigToCSConfigRuleHandler (Properties props)
name|FSConfigToCSConfigRuleHandler
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|properties
operator|=
name|props
expr_stmt|;
name|actions
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|initPropertyActions
argument_list|()
expr_stmt|;
block|}
DECL|method|initPropertyActions ()
specifier|private
name|void
name|initPropertyActions
parameter_list|()
block|{
name|setActionForProperty
argument_list|(
name|MAX_CAPACITY_PERCENTAGE
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|MAX_CHILD_CAPACITY
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|USER_MAX_RUNNING_APPS
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|USER_MAX_APPS_DEFAULT
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|DYNAMIC_MAX_ASSIGN
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|SPECIFIED_NOT_FIRST
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|RESERVATION_SYSTEM
argument_list|)
expr_stmt|;
name|setActionForProperty
argument_list|(
name|QUEUE_AUTO_CREATE
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMaxCapacityPercentage (String queueName)
specifier|public
name|void
name|handleMaxCapacityPercentage
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|handle
argument_list|(
name|MAX_CAPACITY_PERCENTAGE
argument_list|,
literal|null
argument_list|,
name|format
argument_list|(
literal|"<maxResources> defined in percentages for queue %s"
argument_list|,
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMaxChildCapacity ()
specifier|public
name|void
name|handleMaxChildCapacity
parameter_list|()
block|{
name|handle
argument_list|(
name|MAX_CHILD_CAPACITY
argument_list|,
literal|"<maxChildResources>"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|handleChildQueueCount (String queue, int count)
specifier|public
name|void
name|handleChildQueueCount
parameter_list|(
name|String
name|queue
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|MAX_CHILD_QUEUE_LIMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNumeric
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|int
name|maxChildQueue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|maxChildQueue
condition|)
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
name|format
argument_list|(
literal|"Queue %s has too many children: %d"
argument_list|,
name|queue
argument_list|,
name|count
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
literal|"Rule setting: maxChildQueue.limit is not an integer"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|handleUserMaxApps ()
specifier|public
name|void
name|handleUserMaxApps
parameter_list|()
block|{
name|handle
argument_list|(
name|USER_MAX_RUNNING_APPS
argument_list|,
literal|"<maxRunningApps>"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|handleUserMaxAppsDefault ()
specifier|public
name|void
name|handleUserMaxAppsDefault
parameter_list|()
block|{
name|handle
argument_list|(
name|USER_MAX_APPS_DEFAULT
argument_list|,
literal|"<userMaxAppsDefault>"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDynamicMaxAssign ()
specifier|public
name|void
name|handleDynamicMaxAssign
parameter_list|()
block|{
name|handle
argument_list|(
name|DYNAMIC_MAX_ASSIGN
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DYNAMIC_MAX_ASSIGN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSpecifiedNotFirstRule ()
specifier|public
name|void
name|handleSpecifiedNotFirstRule
parameter_list|()
block|{
name|handle
argument_list|(
name|SPECIFIED_NOT_FIRST
argument_list|,
literal|null
argument_list|,
literal|"The<specified> tag is not the first placement rule, this cannot be"
operator|+
literal|" converted properly"
argument_list|)
expr_stmt|;
block|}
DECL|method|handleReservationSystem ()
specifier|public
name|void
name|handleReservationSystem
parameter_list|()
block|{
name|handle
argument_list|(
name|RESERVATION_SYSTEM
argument_list|,
literal|null
argument_list|,
literal|"Conversion of reservation system is not supported"
argument_list|)
expr_stmt|;
block|}
DECL|method|handleQueueAutoCreate (String placementRule)
specifier|public
name|void
name|handleQueueAutoCreate
parameter_list|(
name|String
name|placementRule
parameter_list|)
block|{
name|handle
argument_list|(
name|QUEUE_AUTO_CREATE
argument_list|,
literal|null
argument_list|,
name|format
argument_list|(
literal|"Placement rules: queue auto-create is not supported (type: %s)"
argument_list|,
name|placementRule
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|handle (String actionName, String fsSetting, String message)
specifier|private
name|void
name|handle
parameter_list|(
name|String
name|actionName
parameter_list|,
name|String
name|fsSetting
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|RuleAction
name|action
init|=
name|actions
operator|.
name|get
argument_list|(
name|actionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|ABORT
case|:
name|String
name|exceptionMessage
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|exceptionMessage
operator|=
name|message
expr_stmt|;
block|}
else|else
block|{
name|exceptionMessage
operator|=
name|format
argument_list|(
literal|"Setting %s is not supported"
argument_list|,
name|fsSetting
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|UnsupportedPropertyException
argument_list|(
name|exceptionMessage
argument_list|)
throw|;
case|case
name|WARNING
case|:
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting {} is not supported, ignoring conversion"
argument_list|,
name|fsSetting
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action "
operator|+
name|action
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|setActionForProperty (String property)
specifier|private
name|void
name|setActionForProperty
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|String
name|action
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No rule set for {}, defaulting to WARNING"
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|RuleAction
operator|.
name|WARNING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"warning"
argument_list|)
condition|)
block|{
name|actions
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|RuleAction
operator|.
name|WARNING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"abort"
argument_list|)
condition|)
block|{
name|actions
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|RuleAction
operator|.
name|ABORT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown action {} set for rule {}, defaulting to WARNING"
argument_list|,
name|action
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|RuleAction
operator|.
name|WARNING
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getActions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RuleAction
argument_list|>
name|getActions
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
block|}
end_class

end_unit

