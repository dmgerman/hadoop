begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|class|WorkflowPriorityMappingsManager
specifier|public
class|class
name|WorkflowPriorityMappingsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkflowPriorityMappingsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WORKFLOW_PART_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|WORKFLOW_PART_SEPARATOR
init|=
literal|":"
decl_stmt|;
DECL|field|WORKFLOW_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|WORKFLOW_SEPARATOR
init|=
literal|","
decl_stmt|;
DECL|field|scheduler
specifier|private
name|CapacityScheduler
name|scheduler
decl_stmt|;
DECL|field|conf
specifier|private
name|CapacitySchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|overrideWithPriorityMappings
specifier|private
name|boolean
name|overrideWithPriorityMappings
init|=
literal|false
decl_stmt|;
comment|// Map of queue to a map of workflow ID to priority
DECL|field|priorityMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WorkflowPriorityMapping
argument_list|>
argument_list|>
name|priorityMappings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WorkflowPriorityMapping
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|WorkflowPriorityMapping
specifier|public
specifier|static
class|class
name|WorkflowPriorityMapping
block|{
DECL|field|workflowID
name|String
name|workflowID
decl_stmt|;
DECL|field|queue
name|String
name|queue
decl_stmt|;
DECL|field|priority
name|Priority
name|priority
decl_stmt|;
DECL|method|WorkflowPriorityMapping (String workflowID, String queue, Priority priority)
specifier|public
name|WorkflowPriorityMapping
parameter_list|(
name|String
name|workflowID
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|workflowID
operator|=
name|workflowID
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|priority
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|WorkflowPriorityMapping
condition|)
block|{
name|WorkflowPriorityMapping
name|other
init|=
operator|(
name|WorkflowPriorityMapping
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|other
operator|.
name|workflowID
operator|.
name|equals
argument_list|(
name|workflowID
argument_list|)
operator|&&
name|other
operator|.
name|queue
operator|.
name|equals
argument_list|(
name|queue
argument_list|)
operator|&&
name|other
operator|.
name|priority
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|workflowID
operator|+
name|WORKFLOW_PART_SEPARATOR
operator|+
name|queue
operator|+
name|WORKFLOW_PART_SEPARATOR
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|initialize (CapacityScheduler scheduler)
specifier|public
name|void
name|initialize
parameter_list|(
name|CapacityScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|scheduler
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|boolean
name|overrideWithWorkflowPriorityMappings
init|=
name|conf
operator|.
name|getOverrideWithWorkflowPriorityMappings
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized workflow priority mappings, override: "
operator|+
name|overrideWithWorkflowPriorityMappings
argument_list|)
expr_stmt|;
name|this
operator|.
name|overrideWithPriorityMappings
operator|=
name|overrideWithWorkflowPriorityMappings
expr_stmt|;
name|this
operator|.
name|priorityMappings
operator|=
name|getWorkflowPriorityMappings
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get workflow ID to priority mappings for a queue.    *    * @return workflowID to priority mappings for a queue    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WorkflowPriorityMapping
argument_list|>
argument_list|>
DECL|method|getWorkflowPriorityMappings ()
name|getWorkflowPriorityMappings
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WorkflowPriorityMapping
argument_list|>
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WorkflowPriorityMapping
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|workflowMappings
init|=
name|conf
operator|.
name|getWorkflowPriorityMappings
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|workflowMapping
range|:
name|workflowMappings
control|)
block|{
name|WorkflowPriorityMapping
name|mapping
init|=
name|getWorkflowMappingFromString
argument_list|(
name|workflowMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|mappings
operator|.
name|containsKey
argument_list|(
name|mapping
operator|.
name|queue
argument_list|)
condition|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|queue
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WorkflowPriorityMapping
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mappings
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|queue
argument_list|)
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|workflowID
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mappings
return|;
block|}
DECL|method|getWorkflowMappingFromString ( String mappingString)
specifier|private
name|WorkflowPriorityMapping
name|getWorkflowMappingFromString
parameter_list|(
name|String
name|mappingString
parameter_list|)
block|{
if|if
condition|(
name|mappingString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|mappingArray
init|=
name|StringUtils
operator|.
name|getTrimmedStringCollection
argument_list|(
name|mappingString
argument_list|,
name|WORKFLOW_PART_SEPARATOR
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingArray
operator|.
name|length
operator|!=
literal|3
operator|||
name|mappingArray
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mappingArray
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mappingArray
index|[
literal|2
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal workflow priority mapping "
operator|+
name|mappingString
argument_list|)
throw|;
block|}
name|WorkflowPriorityMapping
name|mapping
decl_stmt|;
try|try
block|{
name|mapping
operator|=
operator|new
name|WorkflowPriorityMapping
argument_list|(
name|mappingArray
index|[
literal|0
index|]
argument_list|,
name|mappingArray
index|[
literal|1
index|]
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|mappingArray
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal workflow priority for mapping "
operator|+
name|mappingString
argument_list|)
throw|;
block|}
return|return
name|mapping
return|;
block|}
DECL|method|getMappedPriority (String workflowID, CSQueue queue)
specifier|public
name|Priority
name|getMappedPriority
parameter_list|(
name|String
name|workflowID
parameter_list|,
name|CSQueue
name|queue
parameter_list|)
block|{
comment|// Recursively fetch the priority mapping for the given workflow tracing
comment|// up the queue hierarchy until the first match.
if|if
condition|(
name|queue
operator|.
name|equals
argument_list|(
name|scheduler
operator|.
name|getRootQueue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|queuePath
init|=
name|queue
operator|.
name|getQueuePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|priorityMappings
operator|.
name|containsKey
argument_list|(
name|queuePath
argument_list|)
operator|&&
name|priorityMappings
operator|.
name|get
argument_list|(
name|queuePath
argument_list|)
operator|.
name|containsKey
argument_list|(
name|workflowID
argument_list|)
condition|)
block|{
return|return
name|priorityMappings
operator|.
name|get
argument_list|(
name|queuePath
argument_list|)
operator|.
name|get
argument_list|(
name|workflowID
argument_list|)
operator|.
name|priority
return|;
block|}
else|else
block|{
name|queue
operator|=
name|queue
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|getMappedPriority
argument_list|(
name|workflowID
argument_list|,
name|queue
argument_list|)
return|;
block|}
block|}
DECL|method|mapWorkflowPriorityForApp (ApplicationId applicationId, CSQueue queue, String user, Priority priority)
specifier|public
name|Priority
name|mapWorkflowPriorityForApp
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|CSQueue
name|queue
parameter_list|,
name|String
name|user
parameter_list|,
name|Priority
name|priority
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|overrideWithPriorityMappings
condition|)
block|{
comment|// Set the correct workflow priority
name|RMApp
name|rmApp
init|=
name|scheduler
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
operator|&&
name|rmApp
operator|.
name|getApplicationTags
argument_list|()
operator|!=
literal|null
operator|&&
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|workflowTagPrefix
init|=
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_WORKFLOW_ID_TAG_PREFIX
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_WORKFLOW_ID_TAG_PREFIX
argument_list|)
decl_stmt|;
name|String
name|workflowID
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|rmApp
operator|.
name|getApplicationTags
argument_list|()
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
name|workflowTagPrefix
argument_list|)
condition|)
block|{
name|workflowID
operator|=
name|tag
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
name|workflowTagPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|workflowID
operator|!=
literal|null
operator|&&
operator|!
name|workflowID
operator|.
name|isEmpty
argument_list|()
operator|&&
name|priorityMappings
operator|!=
literal|null
operator|&&
name|priorityMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Priority
name|mappedPriority
init|=
name|getMappedPriority
argument_list|(
name|workflowID
argument_list|,
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedPriority
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" user "
operator|+
name|user
operator|+
literal|" workflow "
operator|+
name|workflowID
operator|+
literal|" queue "
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" mapping ["
operator|+
name|priority
operator|+
literal|"] to ["
operator|+
name|mappedPriority
operator|+
literal|"] override "
operator|+
name|overrideWithPriorityMappings
argument_list|)
expr_stmt|;
comment|// If workflow ID exists in workflow mapping, change this
comment|// application's priority to mapped value. Else, use queue
comment|// default priority.
name|priority
operator|=
name|mappedPriority
expr_stmt|;
name|priority
operator|=
name|scheduler
operator|.
name|checkAndGetApplicationPriority
argument_list|(
name|priority
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
argument_list|,
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMAppImpl
operator|)
name|rmApp
operator|)
operator|.
name|setApplicationPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|priority
return|;
block|}
DECL|method|getWorkflowPriorityMappingStr ( List<WorkflowPriorityMapping> workflowPriorityMappings)
specifier|public
specifier|static
name|String
name|getWorkflowPriorityMappingStr
parameter_list|(
name|List
argument_list|<
name|WorkflowPriorityMapping
argument_list|>
name|workflowPriorityMappings
parameter_list|)
block|{
if|if
condition|(
name|workflowPriorityMappings
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|workflowPriorityMappingStrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|WorkflowPriorityMapping
name|mapping
range|:
name|workflowPriorityMappings
control|)
block|{
name|workflowPriorityMappingStrs
operator|.
name|add
argument_list|(
name|mapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|WORKFLOW_SEPARATOR
argument_list|,
name|workflowPriorityMappingStrs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

