begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|DailyRollingFileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_comment
comment|/**  * Event log used by the fair scheduler for machine-readable debug info.  * This class uses a log4j rolling file appender to write the log, but uses  * a custom tab-separated event format of the form:  *<pre>  * DATE    EVENT_TYPE   PARAM_1   PARAM_2   ...  *</pre>  * Various event types are used by the fair scheduler. The purpose of logging  * in this format is to enable tools to parse the history log easily and read  * internal scheduler variables, rather than trying to make the log human  * readable. The fair scheduler also logs human readable messages in the  * JobTracker's main log.  *  * Constructing this class creates a disabled log. It must be initialized  * using {@link FairSchedulerEventLog#init(Configuration, String)} to begin  * writing to the file.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FairSchedulerEventLog
class|class
name|FairSchedulerEventLog
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FairSchedulerEventLog
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Set to true if logging is disabled due to an error. */
DECL|field|logDisabled
specifier|private
name|boolean
name|logDisabled
init|=
literal|true
decl_stmt|;
comment|/**    * Log directory, set by mapred.fairscheduler.eventlog.location in conf file;    * defaults to {hadoop.log.dir}/fairscheduler.    */
DECL|field|logDir
specifier|private
name|String
name|logDir
decl_stmt|;
comment|/**    * Active log file, which is {LOG_DIR}/hadoop-{user}-fairscheduler.log.    * Older files are also stored as {LOG_FILE}.date (date format YYYY-MM-DD).    */
DECL|field|logFile
specifier|private
name|String
name|logFile
decl_stmt|;
comment|/** Log4j appender used to write to the log file */
DECL|field|appender
specifier|private
name|DailyRollingFileAppender
name|appender
decl_stmt|;
DECL|method|init (FairSchedulerConfiguration conf)
name|boolean
name|init
parameter_list|(
name|FairSchedulerConfiguration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|isEventLogEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|logDir
operator|=
name|conf
operator|.
name|getEventlogDir
argument_list|()
expr_stmt|;
name|File
name|logDirFile
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|logDirFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|logDirFile
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|logDirFile
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|String
name|username
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|logFile
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s%shadoop-%s-fairscheduler.log"
argument_list|,
name|logDir
argument_list|,
name|File
operator|.
name|separator
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|logDisabled
operator|=
literal|false
expr_stmt|;
name|PatternLayout
name|layout
init|=
operator|new
name|PatternLayout
argument_list|(
literal|"%d{ISO8601}\t%m%n"
argument_list|)
decl_stmt|;
name|appender
operator|=
operator|new
name|DailyRollingFileAppender
argument_list|(
name|layout
argument_list|,
name|logFile
argument_list|,
literal|"'.'yyyy-MM-dd"
argument_list|)
expr_stmt|;
name|appender
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized fair scheduler event log, logging to "
operator|+
name|logFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to initialize fair scheduler event log. Disabling it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|logDisabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|logDisabled
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|!
operator|(
name|logDisabled
operator|)
return|;
block|}
comment|/**    * Log an event, writing a line in the log file of the form    *<pre>    * DATE    EVENT_TYPE   PARAM_1   PARAM_2   ...    *</pre>    */
DECL|method|log (String eventType, Object... params)
specifier|synchronized
name|void
name|log
parameter_list|(
name|String
name|eventType
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|logDisabled
condition|)
return|return;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|param
range|:
name|params
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|appender
operator|.
name|append
argument_list|(
operator|new
name|LoggingEvent
argument_list|(
literal|""
argument_list|,
name|logger
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to append to fair scheduler event log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|logDisabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Flush and close the log.    */
DECL|method|shutdown ()
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|appender
operator|!=
literal|null
condition|)
name|appender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close fair scheduler event log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|logDisabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|isEnabled ()
specifier|synchronized
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
operator|!
name|logDisabled
return|;
block|}
DECL|method|getLogFile ()
specifier|public
name|String
name|getLogFile
parameter_list|()
block|{
return|return
name|logFile
return|;
block|}
block|}
end_class

end_unit

