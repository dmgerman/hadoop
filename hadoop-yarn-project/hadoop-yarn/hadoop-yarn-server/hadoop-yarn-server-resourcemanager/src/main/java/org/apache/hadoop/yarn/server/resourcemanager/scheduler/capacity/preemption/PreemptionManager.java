begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.preemption
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|preemption
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_class
DECL|class|PreemptionManager
specifier|public
class|class
name|PreemptionManager
block|{
DECL|field|readLock
specifier|private
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|entities
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PreemptableQueue
argument_list|>
name|entities
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PreemptionManager ()
specifier|public
name|PreemptionManager
parameter_list|()
block|{
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshQueues (CSQueue parent, CSQueue current)
specifier|public
name|void
name|refreshQueues
parameter_list|(
name|CSQueue
name|parent
parameter_list|,
name|CSQueue
name|current
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PreemptableQueue
name|parentEntity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parentEntity
operator|=
name|entities
operator|.
name|get
argument_list|(
name|parent
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entities
operator|.
name|containsKey
argument_list|(
name|current
operator|.
name|getQueueName
argument_list|()
argument_list|)
condition|)
block|{
name|entities
operator|.
name|put
argument_list|(
name|current
operator|.
name|getQueueName
argument_list|()
argument_list|,
operator|new
name|PreemptableQueue
argument_list|(
name|parentEntity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|.
name|getChildQueues
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CSQueue
name|child
range|:
name|current
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
name|refreshQueues
argument_list|(
name|current
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addKillableContainer (KillableContainer container)
specifier|public
name|void
name|addKillableContainer
parameter_list|(
name|KillableContainer
name|container
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PreemptableQueue
name|entity
init|=
name|entities
operator|.
name|get
argument_list|(
name|container
operator|.
name|getLeafQueueName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|entity
condition|)
block|{
name|entity
operator|.
name|addKillableContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeKillableContainer (KillableContainer container)
specifier|public
name|void
name|removeKillableContainer
parameter_list|(
name|KillableContainer
name|container
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PreemptableQueue
name|entity
init|=
name|entities
operator|.
name|get
argument_list|(
name|container
operator|.
name|getLeafQueueName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|entity
condition|)
block|{
name|entity
operator|.
name|removeKillableContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|moveKillableContainer (KillableContainer oldContainer, KillableContainer newContainer)
specifier|public
name|void
name|moveKillableContainer
parameter_list|(
name|KillableContainer
name|oldContainer
parameter_list|,
name|KillableContainer
name|newContainer
parameter_list|)
block|{
comment|// TODO, will be called when partition of the node changed OR
comment|// container moved to different queue
block|}
DECL|method|updateKillableContainerResource (KillableContainer container, Resource oldResource, Resource newResource)
specifier|public
name|void
name|updateKillableContainerResource
parameter_list|(
name|KillableContainer
name|container
parameter_list|,
name|Resource
name|oldResource
parameter_list|,
name|Resource
name|newResource
parameter_list|)
block|{
comment|// TODO, will be called when container's resource changed
block|}
annotation|@
name|VisibleForTesting
DECL|method|getKillableContainersMap ( String queueName, String partition)
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
name|getKillableContainersMap
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PreemptableQueue
name|entity
init|=
name|entities
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
name|containers
init|=
name|entity
operator|.
name|getKillableContainers
argument_list|()
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|containers
operator|!=
literal|null
condition|)
block|{
return|return
name|containers
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getKillableContainers (String queueName, String partition)
specifier|public
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|getKillableContainers
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
return|return
name|getKillableContainersMap
argument_list|(
name|queueName
argument_list|,
name|partition
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|getKillableResource (String queueName, String partition)
specifier|public
name|Resource
name|getKillableResource
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PreemptableQueue
name|entity
init|=
name|entities
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|Resource
name|res
init|=
name|entity
operator|.
name|getTotalKillableResources
argument_list|()
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
operator|||
name|res
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|res
argument_list|)
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getShallowCopyOfPreemptableEntities ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PreemptableQueue
argument_list|>
name|getShallowCopyOfPreemptableEntities
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreemptableQueue
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PreemptableQueue
argument_list|>
name|entry
range|:
name|entities
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PreemptableQueue
name|entity
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|PreemptableQueue
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|entity
operator|.
name|getTotalKillableResources
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|entity
operator|.
name|getKillableContainers
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

