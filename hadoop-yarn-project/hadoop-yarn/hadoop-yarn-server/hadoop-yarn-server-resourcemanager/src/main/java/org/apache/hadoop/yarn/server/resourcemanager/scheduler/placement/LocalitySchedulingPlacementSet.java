begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|IteratorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppSchedulingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_class
DECL|class|LocalitySchedulingPlacementSet
specifier|public
class|class
name|LocalitySchedulingPlacementSet
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
implements|implements
name|SchedulingPlacementSet
argument_list|<
name|N
argument_list|>
block|{
DECL|field|resourceRequestMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|resourceRequestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|appSchedulingInfo
specifier|private
name|AppSchedulingInfo
name|appSchedulingInfo
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
DECL|method|LocalitySchedulingPlacementSet (AppSchedulingInfo info)
specifier|public
name|LocalitySchedulingPlacementSet
parameter_list|(
name|AppSchedulingInfo
name|info
parameter_list|)
block|{
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|appSchedulingInfo
operator|=
name|info
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getPreferredNodeIterator ( PlacementSet<N> clusterPlacementSet)
specifier|public
name|Iterator
argument_list|<
name|N
argument_list|>
name|getPreferredNodeIterator
parameter_list|(
name|PlacementSet
argument_list|<
name|N
argument_list|>
name|clusterPlacementSet
parameter_list|)
block|{
comment|// Now only handle the case that single node in placementSet
comment|// TODO, Add support to multi-hosts inside placement-set which is passed in.
name|N
name|singleNode
init|=
name|PlacementSetUtils
operator|.
name|getSingleNode
argument_list|(
name|clusterPlacementSet
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|singleNode
condition|)
block|{
return|return
name|IteratorUtils
operator|.
name|singletonIterator
argument_list|(
name|singleNode
argument_list|)
return|;
block|}
return|return
name|IteratorUtils
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
DECL|method|hasRequestLabelChanged (ResourceRequest requestOne, ResourceRequest requestTwo)
specifier|private
name|boolean
name|hasRequestLabelChanged
parameter_list|(
name|ResourceRequest
name|requestOne
parameter_list|,
name|ResourceRequest
name|requestTwo
parameter_list|)
block|{
name|String
name|requestOneLabelExp
init|=
name|requestOne
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|String
name|requestTwoLabelExp
init|=
name|requestTwo
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
comment|// First request label expression can be null and second request
comment|// is not null then we have to consider it as changed.
if|if
condition|(
operator|(
literal|null
operator|==
name|requestOneLabelExp
operator|)
operator|&&
operator|(
literal|null
operator|!=
name|requestTwoLabelExp
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// If the label is not matching between both request when
comment|// requestOneLabelExp is not null.
return|return
operator|(
operator|(
literal|null
operator|!=
name|requestOneLabelExp
operator|)
operator|&&
operator|!
operator|(
name|requestOneLabelExp
operator|.
name|equals
argument_list|(
name|requestTwoLabelExp
argument_list|)
operator|)
operator|)
return|;
block|}
DECL|method|updateNodeLabels (ResourceRequest request)
specifier|private
name|void
name|updateNodeLabels
parameter_list|(
name|ResourceRequest
name|request
parameter_list|)
block|{
name|String
name|resourceName
init|=
name|request
operator|.
name|getResourceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourceName
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|ResourceRequest
name|previousAnyRequest
init|=
name|getResourceRequest
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
comment|// When there is change in ANY request label expression, we should
comment|// update label for all resource requests already added of same
comment|// priority as ANY resource request.
if|if
condition|(
operator|(
literal|null
operator|==
name|previousAnyRequest
operator|)
operator|||
name|hasRequestLabelChanged
argument_list|(
name|previousAnyRequest
argument_list|,
name|request
argument_list|)
condition|)
block|{
for|for
control|(
name|ResourceRequest
name|r
range|:
name|resourceRequestMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|r
operator|.
name|setNodeLabelExpression
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|ResourceRequest
name|anyRequest
init|=
name|getResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|anyRequest
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setNodeLabelExpression
argument_list|(
name|anyRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|updateResourceRequests ( Collection<ResourceRequest> requests, boolean recoverPreemptedRequestForAContainer)
specifier|public
name|ResourceRequestUpdateResult
name|updateResourceRequests
parameter_list|(
name|Collection
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
parameter_list|,
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ResourceRequestUpdateResult
name|updateResult
init|=
literal|null
decl_stmt|;
comment|// Update resource requests
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
name|String
name|resourceName
init|=
name|request
operator|.
name|getResourceName
argument_list|()
decl_stmt|;
comment|// Update node labels if required
name|updateNodeLabels
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Increment number of containers if recovering preempted resources
name|ResourceRequest
name|lastRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoverPreemptedRequestForAContainer
operator|&&
name|lastRequest
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setNumContainers
argument_list|(
name|lastRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Update asks
name|resourceRequestMap
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceName
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
comment|//update the applications requested labels set
name|appSchedulingInfo
operator|.
name|addRequestedPartition
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
operator|==
literal|null
condition|?
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
else|:
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|updateResult
operator|=
operator|new
name|ResourceRequestUpdateResult
argument_list|(
name|lastRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|updateResult
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResourceRequests ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|getResourceRequests
parameter_list|()
block|{
return|return
name|resourceRequestMap
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceRequest (String resourceName)
specifier|public
name|ResourceRequest
name|getResourceRequest
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
DECL|method|decrementOutstanding (ResourceRequest offSwitchRequest)
specifier|private
name|void
name|decrementOutstanding
parameter_list|(
name|ResourceRequest
name|offSwitchRequest
parameter_list|)
block|{
name|int
name|numOffSwitchContainers
init|=
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// Do not remove ANY
name|offSwitchRequest
operator|.
name|setNumContainers
argument_list|(
name|numOffSwitchContainers
argument_list|)
expr_stmt|;
comment|// Do we have any outstanding requests?
comment|// If there is nothing, we need to deactivate this application
if|if
condition|(
name|numOffSwitchContainers
operator|==
literal|0
condition|)
block|{
name|SchedulerRequestKey
name|schedulerRequestKey
init|=
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|offSwitchRequest
argument_list|)
decl_stmt|;
name|appSchedulingInfo
operator|.
name|decrementSchedulerKeyReference
argument_list|(
name|schedulerRequestKey
argument_list|)
expr_stmt|;
name|appSchedulingInfo
operator|.
name|checkForDeactivation
argument_list|()
expr_stmt|;
block|}
name|appSchedulingInfo
operator|.
name|decPendingResource
argument_list|(
name|offSwitchRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|offSwitchRequest
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cloneResourceRequest (ResourceRequest request)
specifier|private
name|ResourceRequest
name|cloneResourceRequest
parameter_list|(
name|ResourceRequest
name|request
parameter_list|)
block|{
name|ResourceRequest
name|newRequest
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
literal|1
argument_list|,
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newRequest
return|;
block|}
comment|/**    * The {@link ResourceScheduler} is allocating data-local resources to the    * application.    */
DECL|method|allocateRackLocal (SchedulerNode node, ResourceRequest rackLocalRequest, List<ResourceRequest> resourceRequests)
specifier|private
name|void
name|allocateRackLocal
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|ResourceRequest
name|rackLocalRequest
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
comment|// Update future requirements
name|decResourceRequest
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|rackLocalRequest
argument_list|)
expr_stmt|;
name|ResourceRequest
name|offRackRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|decrementOutstanding
argument_list|(
name|offRackRequest
argument_list|)
expr_stmt|;
comment|// Update cloned RackLocal and OffRack requests for recovery
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|rackLocalRequest
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|offRackRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The {@link ResourceScheduler} is allocating data-local resources to the    * application.    */
DECL|method|allocateOffSwitch (ResourceRequest offSwitchRequest, List<ResourceRequest> resourceRequests)
specifier|private
name|void
name|allocateOffSwitch
parameter_list|(
name|ResourceRequest
name|offSwitchRequest
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
comment|// Update future requirements
name|decrementOutstanding
argument_list|(
name|offSwitchRequest
argument_list|)
expr_stmt|;
comment|// Update cloned OffRack requests for recovery
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|offSwitchRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The {@link ResourceScheduler} is allocating data-local resources to the    * application.    */
DECL|method|allocateNodeLocal (SchedulerNode node, ResourceRequest nodeLocalRequest, List<ResourceRequest> resourceRequests)
specifier|private
name|void
name|allocateNodeLocal
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|ResourceRequest
name|nodeLocalRequest
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
comment|// Update future requirements
name|decResourceRequest
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|nodeLocalRequest
argument_list|)
expr_stmt|;
name|ResourceRequest
name|rackLocalRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
name|decResourceRequest
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|rackLocalRequest
argument_list|)
expr_stmt|;
name|ResourceRequest
name|offRackRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|decrementOutstanding
argument_list|(
name|offRackRequest
argument_list|)
expr_stmt|;
comment|// Update cloned NodeLocal, RackLocal and OffRack requests for recovery
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|nodeLocalRequest
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|rackLocalRequest
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|offRackRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decResourceRequest (String resourceName, ResourceRequest request)
specifier|private
name|void
name|decResourceRequest
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|ResourceRequest
name|request
parameter_list|)
block|{
name|request
operator|.
name|setNumContainers
argument_list|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resourceRequestMap
operator|.
name|remove
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|canAllocate (NodeType type, SchedulerNode node)
specifier|public
name|boolean
name|canAllocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ResourceRequest
name|r
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
operator|||
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|r
operator|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|r
operator|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocate (NodeType type, SchedulerNode node, ResourceRequest request)
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|ResourceRequest
name|request
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|request
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|request
operator|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
name|request
operator|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|allocateNodeLocal
argument_list|(
name|node
argument_list|,
name|request
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
name|allocateRackLocal
argument_list|(
name|node
argument_list|,
name|request
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocateOffSwitch
argument_list|(
name|request
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceRequests
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

