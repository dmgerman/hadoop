begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|RMNotYetActiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|RMPolicyProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_class
DECL|class|AdminService
specifier|public
class|class
name|AdminService
extends|extends
name|AbstractService
implements|implements
name|HAServiceProtocol
implements|,
name|ResourceManagerAdministrationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AdminService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|masterServiceAddress
specifier|private
name|InetSocketAddress
name|masterServiceAddress
decl_stmt|;
DECL|field|adminAcl
specifier|private
name|AccessControlList
name|adminAcl
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|AdminService (ResourceManager rm, RMContext rmContext)
specifier|public
name|AdminService
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|AdminService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|masterServiceAddress
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_PORT
argument_list|)
expr_stmt|;
name|adminAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopServer
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startServer ()
specifier|protected
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
operator|(
name|Server
operator|)
name|rpc
operator|.
name|getServer
argument_list|(
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|masterServiceAddress
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
operator|new
name|RMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtocolXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|haPbService
init|=
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtocolXlator
argument_list|)
decl_stmt|;
name|server
operator|.
name|addProtocol
argument_list|(
name|RPC
operator|.
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|HAServiceProtocol
operator|.
name|class
argument_list|,
name|haPbService
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stopServer ()
specifier|protected
name|void
name|stopServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkAccess (String method)
specifier|private
name|UserGroupInformation
name|checkAccess
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RMServerUtils
operator|.
name|verifyAccess
argument_list|(
name|adminAcl
argument_list|,
name|method
argument_list|,
name|LOG
argument_list|)
return|;
block|}
DECL|method|checkAcls (String method)
specifier|private
name|UserGroupInformation
name|checkAcls
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
return|return
name|checkAccess
argument_list|(
name|method
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|isRMActive ()
specifier|private
specifier|synchronized
name|boolean
name|isRMActive
parameter_list|()
block|{
return|return
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|monitorHealth ()
specifier|public
specifier|synchronized
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
literal|"monitorHealth"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRMActive
argument_list|()
operator|&&
operator|!
name|rm
operator|.
name|areActiveServicesRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"Active ResourceManager services are not running!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToActive ( HAServiceProtocol.StateChangeRequestInfo reqInfo)
specifier|public
specifier|synchronized
name|void
name|transitionToActive
parameter_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAccess
argument_list|(
literal|"transitionToActive"
argument_list|)
decl_stmt|;
comment|// TODO (YARN-1177): When automatic failover is enabled,
comment|// check if transition should be allowed for this request
try|try
block|{
name|rm
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToActive"
argument_list|,
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToActive"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"RMHAProtocolService"
argument_list|,
literal|"Exception transitioning to active"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Error when transitioning to Active mode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToStandby ( HAServiceProtocol.StateChangeRequestInfo reqInfo)
specifier|public
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAccess
argument_list|(
literal|"transitionToStandby"
argument_list|)
decl_stmt|;
comment|// TODO (YARN-1177): When automatic failover is enabled,
comment|// check if transition should be allowed for this request
try|try
block|{
name|rm
operator|.
name|transitionToStandby
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToStandby"
argument_list|,
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToStandby"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"RMHAProtocolService"
argument_list|,
literal|"Exception transitioning to standby"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Error when transitioning to Standby mode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceStatus ()
specifier|public
specifier|synchronized
name|HAServiceStatus
name|getServiceStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
literal|"getServiceState"
argument_list|)
expr_stmt|;
name|HAServiceState
name|haState
init|=
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
decl_stmt|;
name|HAServiceStatus
name|ret
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|haState
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRMActive
argument_list|()
operator|||
name|haState
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
condition|)
block|{
name|ret
operator|.
name|setReadyToBecomeActive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setNotReadyToBecomeActive
argument_list|(
literal|"State is "
operator|+
name|haState
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|refreshQueues (RefreshQueuesRequest request)
specifier|public
name|RefreshQueuesResponse
name|refreshQueues
parameter_list|(
name|RefreshQueuesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
literal|"refreshQueues"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isRMActive
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshQueues"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"AdminService"
argument_list|,
literal|"ResourceManager is not active. Can not refresh queues."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMNotYetActiveException
argument_list|()
throw|;
block|}
try|try
block|{
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshQueues"
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshQueuesResponse
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception refreshing queues "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshQueues"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"AdminService"
argument_list|,
literal|"Exception refreshing queues"
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|refreshNodes (RefreshNodesRequest request)
specifier|public
name|RefreshNodesResponse
name|refreshNodes
parameter_list|(
name|RefreshNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
literal|"refreshNodes"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isRMActive
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshNodes"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"AdminService"
argument_list|,
literal|"ResourceManager is not active. Can not refresh nodes."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMNotYetActiveException
argument_list|()
throw|;
block|}
try|try
block|{
name|rmContext
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshNodes"
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshNodesResponse
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception refreshing nodes "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshNodes"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"AdminService"
argument_list|,
literal|"Exception refreshing nodes"
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|refreshSuperUserGroupsConfiguration ( RefreshSuperUserGroupsConfigurationRequest request)
specifier|public
name|RefreshSuperUserGroupsConfigurationResponse
name|refreshSuperUserGroupsConfiguration
parameter_list|(
name|RefreshSuperUserGroupsConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
literal|"refreshSuperUserGroupsConfiguration"
argument_list|)
decl_stmt|;
comment|// TODO (YARN-1459): Revisit handling super-user-groups on Standby RM
if|if
condition|(
operator|!
name|isRMActive
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshSuperUserGroupsConfiguration"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"AdminService"
argument_list|,
literal|"ResourceManager is not active. Can not refresh super-user-groups."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMNotYetActiveException
argument_list|()
throw|;
block|}
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshSuperUserGroupsConfiguration"
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshSuperUserGroupsConfigurationResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshUserToGroupsMappings ( RefreshUserToGroupsMappingsRequest request)
specifier|public
name|RefreshUserToGroupsMappingsResponse
name|refreshUserToGroupsMappings
parameter_list|(
name|RefreshUserToGroupsMappingsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
literal|"refreshUserToGroupsMappings"
argument_list|)
decl_stmt|;
comment|// TODO (YARN-1459): Revisit handling user-groups on Standby RM
if|if
condition|(
operator|!
name|isRMActive
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshUserToGroupsMapping"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"AdminService"
argument_list|,
literal|"ResourceManager is not active. Can not refresh user-groups."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMNotYetActiveException
argument_list|()
throw|;
block|}
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshUserToGroupsMappings"
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshUserToGroupsMappingsResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshAdminAcls ( RefreshAdminAclsRequest request)
specifier|public
name|RefreshAdminAclsResponse
name|refreshAdminAcls
parameter_list|(
name|RefreshAdminAclsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
literal|"refreshAdminAcls"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|adminAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"refreshAdminAcls"
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshAdminAclsResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshServiceAcls ( RefreshServiceAclsRequest request)
specifier|public
name|RefreshServiceAclsResponse
name|refreshServiceAcls
parameter_list|(
name|RefreshServiceAclsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Service Authorization ("
operator|+
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
operator|+
literal|") not enabled."
argument_list|)
argument_list|)
throw|;
block|}
name|PolicyProvider
name|policyProvider
init|=
operator|new
name|RMPolicyProvider
argument_list|()
decl_stmt|;
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRMActive
argument_list|()
condition|)
block|{
name|rmContext
operator|.
name|getClientRMService
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ResourceManager is not active. Not refreshing ACLs for "
operator|+
literal|"Clients, ApplicationMasters and NodeManagers"
argument_list|)
expr_stmt|;
block|}
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshServiceAclsResponse
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGroupsForUser (String user)
specifier|public
name|String
index|[]
name|getGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|getGroupNames
argument_list|()
return|;
block|}
block|}
end_class

end_unit

