begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ConfiguredYarnAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|YarnAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoveFromClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoveFromClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReplaceLabelsOnNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReplaceLabelsOnNodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeResourceUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|RMPolicyProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_class
DECL|class|AdminService
specifier|public
class|class
name|AdminService
extends|extends
name|CompositeService
implements|implements
name|HAServiceProtocol
implements|,
name|ResourceManagerAdministrationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AdminService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|rmId
specifier|private
name|String
name|rmId
decl_stmt|;
DECL|field|autoFailoverEnabled
specifier|private
name|boolean
name|autoFailoverEnabled
decl_stmt|;
DECL|field|embeddedElector
specifier|private
name|EmbeddedElectorService
name|embeddedElector
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
comment|// Address to use for binding. May be a wildcard address.
DECL|field|masterServiceBindAddress
specifier|private
name|InetSocketAddress
name|masterServiceBindAddress
decl_stmt|;
DECL|field|authorizer
specifier|private
name|YarnAuthorizationProvider
name|authorizer
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|AdminService (ResourceManager rm, RMContext rmContext)
specifier|public
name|AdminService
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|AdminService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
name|autoFailoverEnabled
operator|=
name|HAUtil
operator|.
name|isAutomaticFailoverEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|autoFailoverEnabled
condition|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isAutomaticFailoverEmbedded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|embeddedElector
operator|=
name|createEmbeddedElectorService
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|embeddedElector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|masterServiceBindAddress
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_PORT
argument_list|)
expr_stmt|;
name|authorizer
operator|=
name|YarnAuthorizationProvider
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|setAdmins
argument_list|(
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
name|rmId
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopServer
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startServer ()
specifier|protected
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
operator|(
name|Server
operator|)
name|rpc
operator|.
name|getServer
argument_list|(
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|masterServiceBindAddress
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|refreshServiceAcls
argument_list|(
name|getConfiguration
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|)
argument_list|,
name|RMPolicyProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtocolXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|haPbService
init|=
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtocolXlator
argument_list|)
decl_stmt|;
name|server
operator|.
name|addProtocol
argument_list|(
name|RPC
operator|.
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|HAServiceProtocol
operator|.
name|class
argument_list|,
name|haPbService
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stopServer ()
specifier|protected
name|void
name|stopServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createEmbeddedElectorService ()
specifier|protected
name|EmbeddedElectorService
name|createEmbeddedElectorService
parameter_list|()
block|{
return|return
operator|new
name|EmbeddedElectorService
argument_list|(
name|rmContext
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|resetLeaderElection ()
name|void
name|resetLeaderElection
parameter_list|()
block|{
if|if
condition|(
name|embeddedElector
operator|!=
literal|null
condition|)
block|{
name|embeddedElector
operator|.
name|resetLeaderElection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkAccess (String method)
specifier|private
name|UserGroupInformation
name|checkAccess
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RMServerUtils
operator|.
name|verifyAdminAccess
argument_list|(
name|authorizer
argument_list|,
name|method
argument_list|,
name|LOG
argument_list|)
return|;
block|}
DECL|method|checkAcls (String method)
specifier|private
name|UserGroupInformation
name|checkAcls
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
return|return
name|checkAccess
argument_list|(
name|method
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check that a request to change this node's HA state is valid.    * In particular, verifies that, if auto failover is enabled, non-forced    * requests from the HAAdmin CLI are rejected, and vice versa.    *    * @param req the request to check    * @throws AccessControlException if the request is disallowed    */
DECL|method|checkHaStateChange (StateChangeRequestInfo req)
specifier|private
name|void
name|checkHaStateChange
parameter_list|(
name|StateChangeRequestInfo
name|req
parameter_list|)
throws|throws
name|AccessControlException
block|{
switch|switch
condition|(
name|req
operator|.
name|getSource
argument_list|()
condition|)
block|{
case|case
name|REQUEST_BY_USER
case|:
if|if
condition|(
name|autoFailoverEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Manual failover for this ResourceManager is disallowed, "
operator|+
literal|"because automatic failover is enabled."
argument_list|)
throw|;
block|}
break|break;
case|case
name|REQUEST_BY_USER_FORCED
case|:
if|if
condition|(
name|autoFailoverEnabled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Allowing manual failover from "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|getRemoteAddress
argument_list|()
operator|+
literal|" even though automatic failover is enabled, because the user "
operator|+
literal|"specified the force flag"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|REQUEST_BY_ZKFC
case|:
if|if
condition|(
operator|!
name|autoFailoverEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Request from ZK failover controller at "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|getRemoteAddress
argument_list|()
operator|+
literal|" denied "
operator|+
literal|"since automatic failover is not enabled"
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
DECL|method|isRMActive ()
specifier|private
specifier|synchronized
name|boolean
name|isRMActive
parameter_list|()
block|{
return|return
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
return|;
block|}
DECL|method|throwStandbyException ()
specifier|private
name|void
name|throwStandbyException
parameter_list|()
throws|throws
name|StandbyException
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"ResourceManager "
operator|+
name|rmId
operator|+
literal|" is not Active!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|monitorHealth ()
specifier|public
specifier|synchronized
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
literal|"monitorHealth"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRMActive
argument_list|()
operator|&&
operator|!
name|rm
operator|.
name|areActiveServicesRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"Active ResourceManager services are not running!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToActive ( HAServiceProtocol.StateChangeRequestInfo reqInfo)
specifier|public
specifier|synchronized
name|void
name|transitionToActive
parameter_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// call refreshAdminAcls before HA state transition
comment|// for the case that adminAcls have been updated in previous active RM
try|try
block|{
name|refreshAdminAcls
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Can not execute refreshAdminAcls"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|user
init|=
name|checkAccess
argument_list|(
literal|"transitionToActive"
argument_list|)
decl_stmt|;
name|checkHaStateChange
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
comment|// call all refresh*s for active RM to get the updated configurations.
name|refreshAll
argument_list|()
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToActive"
argument_list|,
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToActive"
argument_list|,
literal|""
argument_list|,
literal|"RMHAProtocolService"
argument_list|,
literal|"Exception transitioning to active"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Error when transitioning to Active mode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToStandby ( HAServiceProtocol.StateChangeRequestInfo reqInfo)
specifier|public
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// call refreshAdminAcls before HA state transition
comment|// for the case that adminAcls have been updated in previous active RM
try|try
block|{
name|refreshAdminAcls
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Can not execute refreshAdminAcls"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|user
init|=
name|checkAccess
argument_list|(
literal|"transitionToStandby"
argument_list|)
decl_stmt|;
name|checkHaStateChange
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|transitionToStandby
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToStandby"
argument_list|,
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToStandby"
argument_list|,
literal|""
argument_list|,
literal|"RMHAProtocolService"
argument_list|,
literal|"Exception transitioning to standby"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Error when transitioning to Standby mode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceStatus ()
specifier|public
specifier|synchronized
name|HAServiceStatus
name|getServiceStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
literal|"getServiceState"
argument_list|)
expr_stmt|;
name|HAServiceState
name|haState
init|=
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
decl_stmt|;
name|HAServiceStatus
name|ret
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|haState
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRMActive
argument_list|()
operator|||
name|haState
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
condition|)
block|{
name|ret
operator|.
name|setReadyToBecomeActive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setNotReadyToBecomeActive
argument_list|(
literal|"State is "
operator|+
name|haState
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|refreshQueues (RefreshQueuesRequest request)
specifier|public
name|RefreshQueuesResponse
name|refreshQueues
parameter_list|(
name|RefreshQueuesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|StandbyException
block|{
name|String
name|argName
init|=
literal|"refreshQueues"
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"refresh queues."
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|RefreshQueuesResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshQueuesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
argument_list|)
expr_stmt|;
comment|// refresh the reservation system
name|ReservationSystem
name|rSystem
init|=
name|rmContext
operator|.
name|getReservationSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|rSystem
operator|!=
literal|null
condition|)
block|{
name|rSystem
operator|.
name|reinitialize
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|logAndWrapException
argument_list|(
name|ioe
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|refreshNodes (RefreshNodesRequest request)
specifier|public
name|RefreshNodesResponse
name|refreshNodes
parameter_list|(
name|RefreshNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|StandbyException
block|{
name|String
name|argName
init|=
literal|"refreshNodes"
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"refresh nodes."
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
literal|"refreshNodes"
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshNodesResponse
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|logAndWrapException
argument_list|(
name|ioe
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|refreshSuperUserGroupsConfiguration ( RefreshSuperUserGroupsConfigurationRequest request)
specifier|public
name|RefreshSuperUserGroupsConfigurationResponse
name|refreshSuperUserGroupsConfiguration
parameter_list|(
name|RefreshSuperUserGroupsConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"refreshSuperUserGroupsConfiguration"
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"refresh super-user-groups."
argument_list|)
expr_stmt|;
comment|// Accept hadoop common configs in core-site.xml as well as RM specific
comment|// configurations in yarn-site.xml
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|CORE_SITE_CONFIGURATION_FILE
argument_list|,
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
name|RMServerUtils
operator|.
name|processRMProxyUsersConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshSuperUserGroupsConfigurationResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshUserToGroupsMappings ( RefreshUserToGroupsMappingsRequest request)
specifier|public
name|RefreshUserToGroupsMappingsResponse
name|refreshUserToGroupsMappings
parameter_list|(
name|RefreshUserToGroupsMappingsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"refreshUserToGroupsMappings"
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"refresh user-groups."
argument_list|)
expr_stmt|;
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|getConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|CORE_SITE_CONFIGURATION_FILE
argument_list|)
argument_list|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshUserToGroupsMappingsResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshAdminAcls ( RefreshAdminAclsRequest request)
specifier|public
name|RefreshAdminAclsResponse
name|refreshAdminAcls
parameter_list|(
name|RefreshAdminAclsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|refreshAdminAcls
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|refreshAdminAcls (boolean checkRMHAState)
specifier|private
name|RefreshAdminAclsResponse
name|refreshAdminAcls
parameter_list|(
name|boolean
name|checkRMHAState
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"refreshAdminAcls"
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkRMHAState
condition|)
block|{
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"refresh Admin ACLs."
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|setAdmins
argument_list|(
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshAdminAclsResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshServiceAcls ( RefreshServiceAclsRequest request)
specifier|public
name|RefreshServiceAclsResponse
name|refreshServiceAcls
parameter_list|(
name|RefreshServiceAclsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Service Authorization ("
operator|+
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
operator|+
literal|") not enabled."
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|argName
init|=
literal|"refreshServiceAcls"
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"refresh Service ACLs."
argument_list|)
expr_stmt|;
name|PolicyProvider
name|policyProvider
init|=
name|RMPolicyProvider
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getClientRMService
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshServiceAclsResponse
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
specifier|private
specifier|synchronized
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAclWithLoadedConfiguration
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGroupsForUser (String user)
specifier|public
name|String
index|[]
name|getGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|getGroupNames
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|updateNodeResource ( UpdateNodeResourceRequest request)
specifier|public
name|UpdateNodeResourceResponse
name|updateNodeResource
parameter_list|(
name|UpdateNodeResourceRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"updateNodeResource"
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"update node resource."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
name|nodeResourceMap
init|=
name|request
operator|.
name|getNodeResourceMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
name|nodeResourceMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// verify nodes are all valid first.
comment|// if any invalid nodes, throw exception instead of partially updating
comment|// valid nodes.
for|for
control|(
name|NodeId
name|nodeId
range|:
name|nodeIds
control|)
block|{
name|RMNode
name|node
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Resource update get failed on all nodes due to change "
operator|+
literal|"resource on an unrecognized node: "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Resource update get failed on all nodes due to change resource "
operator|+
literal|"on an unrecognized node: "
operator|+
name|nodeId
argument_list|)
throw|;
block|}
block|}
comment|// do resource update on each node.
comment|// Notice: it is still possible to have invalid NodeIDs as nodes decommission
comment|// may happen just at the same time. This time, only log and skip absent
comment|// nodes without throwing any exceptions.
name|boolean
name|allSuccess
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
name|entry
range|:
name|nodeResourceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ResourceOption
name|newResourceOption
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RMNode
name|node
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource update get failed on an unrecognized node: "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
name|allSuccess
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// update resource to RMNode
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeResourceUpdateEvent
argument_list|(
name|nodeId
argument_list|,
name|newResourceOption
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Update resource on node("
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|") with resource("
operator|+
name|newResourceOption
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allSuccess
condition|)
block|{
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
block|}
name|UpdateNodeResourceResponse
name|response
init|=
name|UpdateNodeResourceResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|response
return|;
block|}
DECL|method|getConfiguration (Configuration conf, String... confFileNames)
specifier|private
specifier|synchronized
name|Configuration
name|getConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|confFileNames
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
for|for
control|(
name|String
name|confFileName
range|:
name|confFileNames
control|)
block|{
name|InputStream
name|confFileInputStream
init|=
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|conf
argument_list|,
name|confFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|confFileInputStream
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|confFileInputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conf
return|;
block|}
DECL|method|refreshAll ()
specifier|private
name|void
name|refreshAll
parameter_list|()
throws|throws
name|ServiceFailedException
block|{
try|try
block|{
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|refreshUserToGroupsMappings
argument_list|(
name|RefreshUserToGroupsMappingsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|refreshServiceAcls
argument_list|(
name|RefreshServiceAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// only for testing
annotation|@
name|VisibleForTesting
DECL|method|getAccessControlList ()
specifier|public
name|AccessControlList
name|getAccessControlList
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ConfiguredYarnAuthorizer
operator|)
name|authorizer
operator|)
operator|.
name|getAdminAcls
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServer ()
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|server
return|;
block|}
annotation|@
name|Override
DECL|method|addToClusterNodeLabels (AddToClusterNodeLabelsRequest request)
specifier|public
name|AddToClusterNodeLabelsResponse
name|addToClusterNodeLabels
parameter_list|(
name|AddToClusterNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"addToClusterNodeLabels"
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"add labels."
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|AddToClusterNodeLabelsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|AddToClusterNodeLabelsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|request
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|logAndWrapException
argument_list|(
name|ioe
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeFromClusterNodeLabels ( RemoveFromClusterNodeLabelsRequest request)
specifier|public
name|RemoveFromClusterNodeLabelsResponse
name|removeFromClusterNodeLabels
parameter_list|(
name|RemoveFromClusterNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"removeFromClusterNodeLabels"
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"remove labels."
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|RemoveFromClusterNodeLabelsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RemoveFromClusterNodeLabelsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|request
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|logAndWrapException
argument_list|(
name|ioe
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|replaceLabelsOnNode ( ReplaceLabelsOnNodeRequest request)
specifier|public
name|ReplaceLabelsOnNodeResponse
name|replaceLabelsOnNode
parameter_list|(
name|ReplaceLabelsOnNodeRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"replaceLabelsOnNode"
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"set node to labels."
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|ReplaceLabelsOnNodeResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ReplaceLabelsOnNodeResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request
operator|.
name|getNodeToLabels
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|logAndWrapException
argument_list|(
name|ioe
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateNodeLabels ( UpdateNodeLabelsRequest request)
specifier|public
name|UpdateNodeLabelsResponse
name|updateNodeLabels
parameter_list|(
name|UpdateNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|argName
init|=
literal|"updateNodeLabels"
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"update node labels"
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|checkAcls
argument_list|(
name|argName
argument_list|)
decl_stmt|;
name|checkRMStatus
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|UpdateNodeLabelsResponse
name|response
init|=
name|UpdateNodeLabelsResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|updateNodeLabels
argument_list|(
name|request
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
literal|"AdminService"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ioe
parameter_list|)
block|{
throw|throw
name|logAndWrapException
argument_list|(
name|ioe
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|argName
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
DECL|method|checkRMStatus (String user, String argName, String msg)
specifier|private
name|void
name|checkRMStatus
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|argName
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|StandbyException
block|{
if|if
condition|(
operator|!
name|isRMActive
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|argName
argument_list|,
literal|""
argument_list|,
literal|"AdminService"
argument_list|,
literal|"ResourceManager is not active. Can not "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|throwStandbyException
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|logAndWrapException (Exception exception, String user, String argName, String msg)
specifier|private
name|YarnException
name|logAndWrapException
parameter_list|(
name|Exception
name|exception
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|argName
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|YarnException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception "
operator|+
name|msg
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|argName
argument_list|,
literal|""
argument_list|,
literal|"AdminService"
argument_list|,
literal|"Exception "
operator|+
name|msg
argument_list|)
expr_stmt|;
return|return
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|exception
argument_list|)
return|;
block|}
block|}
end_class

end_unit

