begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Temporary data-structure tracking resource availability, pending resource  * need, current utilization. This is per-queue-per-partition data structure  */
end_comment

begin_class
DECL|class|TempQueuePerPartition
specifier|public
class|class
name|TempQueuePerPartition
block|{
comment|// Following fields are copied from scheduler
DECL|field|queueName
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|current
specifier|final
name|Resource
name|current
decl_stmt|;
DECL|field|pending
specifier|final
name|Resource
name|pending
decl_stmt|;
DECL|field|guaranteed
specifier|final
name|Resource
name|guaranteed
decl_stmt|;
DECL|field|maxCapacity
specifier|final
name|Resource
name|maxCapacity
decl_stmt|;
DECL|field|killable
specifier|final
name|Resource
name|killable
decl_stmt|;
DECL|field|partition
specifier|final
name|String
name|partition
decl_stmt|;
comment|// Following fields are setted and used by candidate selection policies
DECL|field|idealAssigned
name|Resource
name|idealAssigned
decl_stmt|;
DECL|field|toBePreempted
name|Resource
name|toBePreempted
decl_stmt|;
DECL|field|untouchableExtra
name|Resource
name|untouchableExtra
decl_stmt|;
DECL|field|preemptableExtra
name|Resource
name|preemptableExtra
decl_stmt|;
comment|// For logging purpose
DECL|field|actuallyToBePreempted
name|Resource
name|actuallyToBePreempted
decl_stmt|;
DECL|field|normalizedGuarantee
name|double
name|normalizedGuarantee
decl_stmt|;
DECL|field|children
specifier|final
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|children
decl_stmt|;
DECL|field|leafQueue
name|LeafQueue
name|leafQueue
decl_stmt|;
DECL|field|preemptionDisabled
name|boolean
name|preemptionDisabled
decl_stmt|;
DECL|method|TempQueuePerPartition (String queueName, Resource current, Resource pending, Resource guaranteed, Resource maxCapacity, boolean preemptionDisabled, String partition, Resource killable)
name|TempQueuePerPartition
parameter_list|(
name|String
name|queueName
parameter_list|,
name|Resource
name|current
parameter_list|,
name|Resource
name|pending
parameter_list|,
name|Resource
name|guaranteed
parameter_list|,
name|Resource
name|maxCapacity
parameter_list|,
name|boolean
name|preemptionDisabled
parameter_list|,
name|String
name|partition
parameter_list|,
name|Resource
name|killable
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
name|this
operator|.
name|guaranteed
operator|=
name|guaranteed
expr_stmt|;
name|this
operator|.
name|maxCapacity
operator|=
name|maxCapacity
expr_stmt|;
name|this
operator|.
name|idealAssigned
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|actuallyToBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|toBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|normalizedGuarantee
operator|=
name|Float
operator|.
name|NaN
expr_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|untouchableExtra
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|preemptableExtra
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|preemptionDisabled
operator|=
name|preemptionDisabled
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|killable
operator|=
name|killable
expr_stmt|;
block|}
DECL|method|setLeafQueue (LeafQueue l)
specifier|public
name|void
name|setLeafQueue
parameter_list|(
name|LeafQueue
name|l
parameter_list|)
block|{
assert|assert
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
assert|;
name|this
operator|.
name|leafQueue
operator|=
name|l
expr_stmt|;
block|}
comment|/**    * When adding a child we also aggregate its pending resource needs.    * @param q the child queue to add to this queue    */
DECL|method|addChild (TempQueuePerPartition q)
specifier|public
name|void
name|addChild
parameter_list|(
name|TempQueuePerPartition
name|q
parameter_list|)
block|{
assert|assert
name|leafQueue
operator|==
literal|null
assert|;
name|children
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|pending
argument_list|,
name|q
operator|.
name|pending
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildren ()
specifier|public
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
comment|// This function "accepts" all the resources it can (pending) and return
comment|// the unused ones
DECL|method|offer (Resource avail, ResourceCalculator rc, Resource clusterResource)
name|Resource
name|offer
parameter_list|(
name|Resource
name|avail
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|Resource
name|absMaxCapIdealAssignedDelta
init|=
name|Resources
operator|.
name|componentwiseMax
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|maxCapacity
argument_list|,
name|idealAssigned
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// remain = avail - min(avail, (max - assigned), (current + pending - assigned))
name|Resource
name|accepted
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|absMaxCapIdealAssignedDelta
argument_list|,
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|avail
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|current
argument_list|,
name|pending
argument_list|)
argument_list|,
name|idealAssigned
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|remain
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|avail
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|idealAssigned
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
return|return
name|remain
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" NAME: "
operator|+
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|" CUR: "
argument_list|)
operator|.
name|append
argument_list|(
name|current
argument_list|)
operator|.
name|append
argument_list|(
literal|" PEN: "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
argument_list|)
operator|.
name|append
argument_list|(
literal|" GAR: "
argument_list|)
operator|.
name|append
argument_list|(
name|guaranteed
argument_list|)
operator|.
name|append
argument_list|(
literal|" NORM: "
argument_list|)
operator|.
name|append
argument_list|(
name|normalizedGuarantee
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_ASSIGNED: "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
argument_list|)
operator|.
name|append
argument_list|(
literal|" ACTUAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|actuallyToBePreempted
argument_list|)
operator|.
name|append
argument_list|(
literal|" UNTOUCHABLE: "
argument_list|)
operator|.
name|append
argument_list|(
name|untouchableExtra
argument_list|)
operator|.
name|append
argument_list|(
literal|" PREEMPTABLE: "
argument_list|)
operator|.
name|append
argument_list|(
name|preemptableExtra
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|assignPreemption (float scalingFactor, ResourceCalculator rc, Resource clusterResource)
specifier|public
name|void
name|assignPreemption
parameter_list|(
name|float
name|scalingFactor
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|current
argument_list|,
name|killable
argument_list|)
argument_list|,
name|idealAssigned
argument_list|)
condition|)
block|{
name|toBePreempted
operator|=
name|Resources
operator|.
name|multiply
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|current
argument_list|,
name|killable
argument_list|)
argument_list|,
name|idealAssigned
argument_list|)
argument_list|,
name|scalingFactor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendLogString (StringBuilder sb)
name|void
name|appendLogString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|current
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|current
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|guaranteed
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|guaranteed
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|actuallyToBePreempted
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|actuallyToBePreempted
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

