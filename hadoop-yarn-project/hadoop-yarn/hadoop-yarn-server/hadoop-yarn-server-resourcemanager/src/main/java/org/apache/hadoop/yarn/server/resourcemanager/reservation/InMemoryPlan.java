begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
operator|.
name|Planner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
operator|.
name|ReservationAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class represents an in memory representation of the state of our  * reservation system, and provides accelerated access to both individual  * reservations and aggregate utilization of resources over time.  */
end_comment

begin_class
DECL|class|InMemoryPlan
specifier|public
class|class
name|InMemoryPlan
implements|implements
name|Plan
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryPlan
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZERO_RESOURCE
specifier|private
specifier|static
specifier|final
name|Resource
name|ZERO_RESOURCE
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|currentReservations
specifier|private
name|TreeMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
argument_list|>
name|currentReservations
init|=
operator|new
name|TreeMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rleSparseVector
specifier|private
name|RLESparseResourceAllocation
name|rleSparseVector
decl_stmt|;
DECL|field|userResourceAlloc
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RLESparseResourceAllocation
argument_list|>
name|userResourceAlloc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RLESparseResourceAllocation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reservationTable
specifier|private
name|Map
argument_list|<
name|ReservationId
argument_list|,
name|InMemoryReservationAllocation
argument_list|>
name|reservationTable
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationId
argument_list|,
name|InMemoryReservationAllocation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readWriteLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|policy
specifier|private
specifier|final
name|SharingPolicy
name|policy
decl_stmt|;
DECL|field|agent
specifier|private
specifier|final
name|ReservationAgent
name|agent
decl_stmt|;
DECL|field|step
specifier|private
specifier|final
name|long
name|step
decl_stmt|;
DECL|field|resCalc
specifier|private
specifier|final
name|ResourceCalculator
name|resCalc
decl_stmt|;
DECL|field|minAlloc
DECL|field|maxAlloc
specifier|private
specifier|final
name|Resource
name|minAlloc
decl_stmt|,
name|maxAlloc
decl_stmt|;
DECL|field|queueName
specifier|private
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|queueMetrics
specifier|private
specifier|final
name|QueueMetrics
name|queueMetrics
decl_stmt|;
DECL|field|replanner
specifier|private
specifier|final
name|Planner
name|replanner
decl_stmt|;
DECL|field|getMoveOnExpiry
specifier|private
specifier|final
name|boolean
name|getMoveOnExpiry
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|totalCapacity
specifier|private
name|Resource
name|totalCapacity
decl_stmt|;
DECL|method|InMemoryPlan (QueueMetrics queueMetrics, SharingPolicy policy, ReservationAgent agent, Resource totalCapacity, long step, ResourceCalculator resCalc, Resource minAlloc, Resource maxAlloc, String queueName, Planner replanner, boolean getMoveOnExpiry, RMContext rmContext)
specifier|public
name|InMemoryPlan
parameter_list|(
name|QueueMetrics
name|queueMetrics
parameter_list|,
name|SharingPolicy
name|policy
parameter_list|,
name|ReservationAgent
name|agent
parameter_list|,
name|Resource
name|totalCapacity
parameter_list|,
name|long
name|step
parameter_list|,
name|ResourceCalculator
name|resCalc
parameter_list|,
name|Resource
name|minAlloc
parameter_list|,
name|Resource
name|maxAlloc
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Planner
name|replanner
parameter_list|,
name|boolean
name|getMoveOnExpiry
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
argument_list|(
name|queueMetrics
argument_list|,
name|policy
argument_list|,
name|agent
argument_list|,
name|totalCapacity
argument_list|,
name|step
argument_list|,
name|resCalc
argument_list|,
name|minAlloc
argument_list|,
name|maxAlloc
argument_list|,
name|queueName
argument_list|,
name|replanner
argument_list|,
name|getMoveOnExpiry
argument_list|,
name|rmContext
argument_list|,
operator|new
name|UTCClock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|InMemoryPlan (QueueMetrics queueMetrics, SharingPolicy policy, ReservationAgent agent, Resource totalCapacity, long step, ResourceCalculator resCalc, Resource minAlloc, Resource maxAlloc, String queueName, Planner replanner, boolean getMoveOnExpiry, RMContext rmContext, Clock clock)
specifier|public
name|InMemoryPlan
parameter_list|(
name|QueueMetrics
name|queueMetrics
parameter_list|,
name|SharingPolicy
name|policy
parameter_list|,
name|ReservationAgent
name|agent
parameter_list|,
name|Resource
name|totalCapacity
parameter_list|,
name|long
name|step
parameter_list|,
name|ResourceCalculator
name|resCalc
parameter_list|,
name|Resource
name|minAlloc
parameter_list|,
name|Resource
name|maxAlloc
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Planner
name|replanner
parameter_list|,
name|boolean
name|getMoveOnExpiry
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|queueMetrics
operator|=
name|queueMetrics
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|agent
operator|=
name|agent
expr_stmt|;
name|this
operator|.
name|step
operator|=
name|step
expr_stmt|;
name|this
operator|.
name|totalCapacity
operator|=
name|totalCapacity
expr_stmt|;
name|this
operator|.
name|resCalc
operator|=
name|resCalc
expr_stmt|;
name|this
operator|.
name|minAlloc
operator|=
name|minAlloc
expr_stmt|;
name|this
operator|.
name|maxAlloc
operator|=
name|maxAlloc
expr_stmt|;
name|this
operator|.
name|rleSparseVector
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|,
name|minAlloc
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|replanner
operator|=
name|replanner
expr_stmt|;
name|this
operator|.
name|getMoveOnExpiry
operator|=
name|getMoveOnExpiry
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueueMetrics ()
specifier|public
name|QueueMetrics
name|getQueueMetrics
parameter_list|()
block|{
return|return
name|queueMetrics
return|;
block|}
DECL|method|incrementAllocation (ReservationAllocation reservation)
specifier|private
name|void
name|incrementAllocation
parameter_list|(
name|ReservationAllocation
name|reservation
parameter_list|)
block|{
assert|assert
operator|(
name|readWriteLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
operator|)
assert|;
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|allocationRequests
init|=
name|reservation
operator|.
name|getAllocationRequests
argument_list|()
decl_stmt|;
comment|// check if we have encountered the user earlier and if not add an entry
name|String
name|user
init|=
name|reservation
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|resAlloc
init|=
name|userResourceAlloc
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|resAlloc
operator|==
literal|null
condition|)
block|{
name|resAlloc
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|,
name|minAlloc
argument_list|)
expr_stmt|;
name|userResourceAlloc
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|resAlloc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|r
range|:
name|allocationRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resAlloc
operator|.
name|addInterval
argument_list|(
name|r
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|r
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decrementAllocation (ReservationAllocation reservation)
specifier|private
name|void
name|decrementAllocation
parameter_list|(
name|ReservationAllocation
name|reservation
parameter_list|)
block|{
assert|assert
operator|(
name|readWriteLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
operator|)
assert|;
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|allocationRequests
init|=
name|reservation
operator|.
name|getAllocationRequests
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|reservation
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|resAlloc
init|=
name|userResourceAlloc
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|r
range|:
name|allocationRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resAlloc
operator|.
name|removeInterval
argument_list|(
name|r
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|r
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resAlloc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|userResourceAlloc
operator|.
name|remove
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllReservations ()
specifier|public
name|Set
argument_list|<
name|ReservationAllocation
argument_list|>
name|getAllReservations
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|currentReservations
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ReservationAllocation
argument_list|>
name|flattenedReservations
init|=
operator|new
name|HashSet
argument_list|<
name|ReservationAllocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
name|reservationEntries
range|:
name|currentReservations
operator|.
name|values
argument_list|()
control|)
block|{
name|flattenedReservations
operator|.
name|addAll
argument_list|(
name|reservationEntries
argument_list|)
expr_stmt|;
block|}
return|return
name|flattenedReservations
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addReservation (ReservationAllocation reservation)
specifier|public
name|boolean
name|addReservation
parameter_list|(
name|ReservationAllocation
name|reservation
parameter_list|)
throws|throws
name|PlanningException
block|{
comment|// Verify the allocation is memory based otherwise it is not supported
name|InMemoryReservationAllocation
name|inMemReservation
init|=
operator|(
name|InMemoryReservationAllocation
operator|)
name|reservation
decl_stmt|;
if|if
condition|(
name|inMemReservation
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Reservation with ID "
operator|+
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
operator|+
literal|" is not mapped to any user"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|reservationTable
operator|.
name|containsKey
argument_list|(
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Reservation with ID "
operator|+
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
operator|+
literal|" already exists"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// Validate if we can accept this reservation, throws exception if
comment|// validation fails
name|policy
operator|.
name|validate
argument_list|(
name|this
argument_list|,
name|inMemReservation
argument_list|)
expr_stmt|;
comment|// we record here the time in which the allocation has been accepted
name|reservation
operator|.
name|setAcceptanceTimestamp
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|ReservationInterval
name|searchInterval
init|=
operator|new
name|ReservationInterval
argument_list|(
name|inMemReservation
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|inMemReservation
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
name|reservations
init|=
name|currentReservations
operator|.
name|get
argument_list|(
name|searchInterval
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservations
operator|==
literal|null
condition|)
block|{
name|reservations
operator|=
operator|new
name|HashSet
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reservations
operator|.
name|add
argument_list|(
name|inMemReservation
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to add reservation: {} to plan."
argument_list|,
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|currentReservations
operator|.
name|put
argument_list|(
name|searchInterval
argument_list|,
name|reservations
argument_list|)
expr_stmt|;
name|reservationTable
operator|.
name|put
argument_list|(
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|inMemReservation
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeNewReservation
argument_list|(
name|ReservationSystemUtil
operator|.
name|buildStateProto
argument_list|(
name|inMemReservation
argument_list|)
argument_list|,
name|getQueueName
argument_list|()
argument_list|,
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|incrementAllocation
argument_list|(
name|inMemReservation
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully added reservation: {} to plan."
argument_list|,
name|inMemReservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateReservation (ReservationAllocation reservation)
specifier|public
name|boolean
name|updateReservation
parameter_list|(
name|ReservationAllocation
name|reservation
parameter_list|)
throws|throws
name|PlanningException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ReservationId
name|resId
init|=
name|reservation
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationAllocation
name|currReservation
init|=
name|getReservationById
argument_list|(
name|resId
argument_list|)
decl_stmt|;
if|if
condition|(
name|currReservation
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Reservation with ID "
operator|+
name|resId
operator|+
literal|" does not exist in the plan"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// validate if we can accept this reservation, throws exception if
comment|// validation fails
name|policy
operator|.
name|validate
argument_list|(
name|this
argument_list|,
name|reservation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|removeReservation
argument_list|(
name|currReservation
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to replace reservation: {} from plan."
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
try|try
block|{
name|result
operator|=
name|addReservation
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update reservation: {} from plan due to {}."
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully updated reservation: {} in plan."
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
comment|// rollback delete
name|addReservation
argument_list|(
name|currReservation
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rollbacked update reservation: {} from plan."
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeReservation (ReservationAllocation reservation)
specifier|private
name|boolean
name|removeReservation
parameter_list|(
name|ReservationAllocation
name|reservation
parameter_list|)
block|{
assert|assert
operator|(
name|readWriteLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
operator|)
assert|;
name|ReservationInterval
name|searchInterval
init|=
operator|new
name|ReservationInterval
argument_list|(
name|reservation
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|reservation
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
name|reservations
init|=
name|currentReservations
operator|.
name|get
argument_list|(
name|searchInterval
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservations
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|reservations
operator|.
name|remove
argument_list|(
name|reservation
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove reservation: {} from plan."
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|reservations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentReservations
operator|.
name|remove
argument_list|(
name|searchInterval
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|errMsg
init|=
literal|"The specified Reservation with ID "
operator|+
name|reservation
operator|.
name|getReservationId
argument_list|()
operator|+
literal|" does not exist in the plan"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|reservationTable
operator|.
name|remove
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|removeReservation
argument_list|(
name|getQueueName
argument_list|()
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|decrementAllocation
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully deleted reservation: {} in plan."
argument_list|,
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation (ReservationId reservationID)
specifier|public
name|boolean
name|deleteReservation
parameter_list|(
name|ReservationId
name|reservationID
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ReservationAllocation
name|reservation
init|=
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Reservation with ID "
operator|+
name|reservationID
operator|+
literal|" does not exist in the plan"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
return|return
name|removeReservation
argument_list|(
name|reservation
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|archiveCompletedReservations (long tick)
specifier|public
name|void
name|archiveCompletedReservations
parameter_list|(
name|long
name|tick
parameter_list|)
block|{
comment|// Since we are looking for old reservations, read lock is optimal
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running archival at time: {}"
argument_list|,
name|tick
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
name|expiredReservations
init|=
operator|new
name|ArrayList
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// archive reservations and delete the ones which are beyond
comment|// the reservation policy "window"
try|try
block|{
name|long
name|archivalTime
init|=
name|tick
operator|-
name|policy
operator|.
name|getValidWindow
argument_list|()
decl_stmt|;
name|ReservationInterval
name|searchInterval
init|=
operator|new
name|ReservationInterval
argument_list|(
name|archivalTime
argument_list|,
name|archivalTime
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
argument_list|>
name|reservations
init|=
name|currentReservations
operator|.
name|headMap
argument_list|(
name|searchInterval
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reservations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
name|reservationEntries
range|:
name|reservations
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|InMemoryReservationAllocation
name|reservation
range|:
name|reservationEntries
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getEndTime
argument_list|()
operator|<=
name|archivalTime
condition|)
block|{
name|expiredReservations
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expiredReservations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Need write lock only if there are any reservations to be deleted
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|InMemoryReservationAllocation
name|expiredReservation
range|:
name|expiredReservations
control|)
block|{
name|removeReservation
argument_list|(
name|expiredReservation
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReservationsAtTime (long tick)
specifier|public
name|Set
argument_list|<
name|ReservationAllocation
argument_list|>
name|getReservationsAtTime
parameter_list|(
name|long
name|tick
parameter_list|)
block|{
name|ReservationInterval
name|searchInterval
init|=
operator|new
name|ReservationInterval
argument_list|(
name|tick
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|SortedMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
argument_list|>
name|reservations
init|=
name|currentReservations
operator|.
name|headMap
argument_list|(
name|searchInterval
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reservations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|ReservationAllocation
argument_list|>
name|flattenedReservations
init|=
operator|new
name|HashSet
argument_list|<
name|ReservationAllocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|InMemoryReservationAllocation
argument_list|>
name|reservationEntries
range|:
name|reservations
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|InMemoryReservationAllocation
name|reservation
range|:
name|reservationEntries
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getEndTime
argument_list|()
operator|>
name|tick
condition|)
block|{
name|flattenedReservations
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|flattenedReservations
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStep ()
specifier|public
name|long
name|getStep
parameter_list|()
block|{
return|return
name|step
return|;
block|}
annotation|@
name|Override
DECL|method|getSharingPolicy ()
specifier|public
name|SharingPolicy
name|getSharingPolicy
parameter_list|()
block|{
return|return
name|policy
return|;
block|}
annotation|@
name|Override
DECL|method|getReservationAgent ()
specifier|public
name|ReservationAgent
name|getReservationAgent
parameter_list|()
block|{
return|return
name|agent
return|;
block|}
annotation|@
name|Override
DECL|method|getConsumptionForUser (String user, long t)
specifier|public
name|Resource
name|getConsumptionForUser
parameter_list|(
name|String
name|user
parameter_list|,
name|long
name|t
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|RLESparseResourceAllocation
name|userResAlloc
init|=
name|userResourceAlloc
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userResAlloc
operator|!=
literal|null
condition|)
block|{
return|return
name|userResAlloc
operator|.
name|getCapacityAtTime
argument_list|(
name|t
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|ZERO_RESOURCE
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTotalCommittedResources (long t)
specifier|public
name|Resource
name|getTotalCommittedResources
parameter_list|(
name|long
name|t
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|t
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReservationById (ReservationId reservationID)
specifier|public
name|ReservationAllocation
name|getReservationById
parameter_list|(
name|ReservationId
name|reservationID
parameter_list|)
block|{
if|if
condition|(
name|reservationID
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|reservationTable
operator|.
name|get
argument_list|(
name|reservationID
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTotalCapacity ()
specifier|public
name|Resource
name|getTotalCapacity
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|totalCapacity
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMinimumAllocation ()
specifier|public
name|Resource
name|getMinimumAllocation
parameter_list|()
block|{
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|minAlloc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTotalCapacity (Resource cap)
specifier|public
name|void
name|setTotalCapacity
parameter_list|(
name|Resource
name|cap
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|totalCapacity
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getEarliestStartTime ()
specifier|public
name|long
name|getEarliestStartTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|rleSparseVector
operator|.
name|getEarliestStartTime
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLastEndTime ()
specifier|public
name|long
name|getLastEndTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|rleSparseVector
operator|.
name|getLatestEndTime
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResourceCalculator ()
specifier|public
name|ResourceCalculator
name|getResourceCalculator
parameter_list|()
block|{
return|return
name|resCalc
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumAllocation ()
specifier|public
name|Resource
name|getMaximumAllocation
parameter_list|()
block|{
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|maxAlloc
argument_list|)
return|;
block|}
DECL|method|toCumulativeString ()
specifier|public
name|String
name|toCumulativeString
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|rleSparseVector
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReplanner ()
specifier|public
name|Planner
name|getReplanner
parameter_list|()
block|{
return|return
name|replanner
return|;
block|}
annotation|@
name|Override
DECL|method|getMoveOnExpiry ()
specifier|public
name|boolean
name|getMoveOnExpiry
parameter_list|()
block|{
return|return
name|getMoveOnExpiry
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|StringBuffer
name|planStr
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"In-memory Plan: "
argument_list|)
decl_stmt|;
name|planStr
operator|.
name|append
argument_list|(
literal|"Parent Queue: "
argument_list|)
operator|.
name|append
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|"Total Capacity: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalCapacity
argument_list|)
operator|.
name|append
argument_list|(
literal|"Step: "
argument_list|)
operator|.
name|append
argument_list|(
name|step
argument_list|)
expr_stmt|;
for|for
control|(
name|ReservationAllocation
name|reservation
range|:
name|getAllReservations
argument_list|()
control|)
block|{
name|planStr
operator|.
name|append
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
return|return
name|planStr
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

