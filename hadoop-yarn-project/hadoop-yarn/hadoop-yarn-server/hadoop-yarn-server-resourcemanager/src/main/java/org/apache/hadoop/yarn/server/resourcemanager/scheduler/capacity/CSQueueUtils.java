begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|Lock
import|;
end_import

begin_class
DECL|class|CSQueueUtils
class|class
name|CSQueueUtils
block|{
DECL|field|EPSILON
specifier|final
specifier|static
name|float
name|EPSILON
init|=
literal|0.0001f
decl_stmt|;
DECL|method|checkMaxCapacity (String queueName, float capacity, float maximumCapacity)
specifier|public
specifier|static
name|void
name|checkMaxCapacity
parameter_list|(
name|String
name|queueName
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|maximumCapacity
parameter_list|)
block|{
if|if
condition|(
name|maximumCapacity
argument_list|<
literal|0.0f
operator|||
name|maximumCapacity
argument_list|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal value  of maximumCapacity "
operator|+
name|maximumCapacity
operator|+
literal|" used in call to setMaxCapacity for queue "
operator|+
name|queueName
argument_list|)
throw|;
block|}
block|}
DECL|method|checkAbsoluteCapacities (String queueName, float absCapacity, float absMaxCapacity)
specifier|public
specifier|static
name|void
name|checkAbsoluteCapacities
parameter_list|(
name|String
name|queueName
parameter_list|,
name|float
name|absCapacity
parameter_list|,
name|float
name|absMaxCapacity
parameter_list|)
block|{
if|if
condition|(
name|absMaxCapacity
operator|<
operator|(
name|absCapacity
operator|-
name|EPSILON
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal call to setMaxCapacity. "
operator|+
literal|"Queue '"
operator|+
name|queueName
operator|+
literal|"' has "
operator|+
literal|"an absolute capacity ("
operator|+
name|absCapacity
operator|+
literal|") greater than "
operator|+
literal|"its absolute maximumCapacity ("
operator|+
name|absMaxCapacity
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
DECL|method|computeAbsoluteMaximumCapacity ( float maximumCapacity, CSQueue parent)
specifier|public
specifier|static
name|float
name|computeAbsoluteMaximumCapacity
parameter_list|(
name|float
name|maximumCapacity
parameter_list|,
name|CSQueue
name|parent
parameter_list|)
block|{
name|float
name|parentAbsMaxCapacity
init|=
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
literal|1.0f
else|:
name|parent
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
decl_stmt|;
return|return
operator|(
name|parentAbsMaxCapacity
operator|*
name|maximumCapacity
operator|)
return|;
block|}
DECL|method|computeMaxActiveApplications ( ResourceCalculator calculator, Resource clusterResource, Resource minimumAllocation, float maxAMResourcePercent, float absoluteMaxCapacity)
specifier|public
specifier|static
name|int
name|computeMaxActiveApplications
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|minimumAllocation
parameter_list|,
name|float
name|maxAMResourcePercent
parameter_list|,
name|float
name|absoluteMaxCapacity
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Resources
operator|.
name|ratio
argument_list|(
name|calculator
argument_list|,
name|clusterResource
argument_list|,
name|minimumAllocation
argument_list|)
operator|*
name|maxAMResourcePercent
operator|*
name|absoluteMaxCapacity
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|computeMaxActiveApplicationsPerUser ( int maxActiveApplications, int userLimit, float userLimitFactor)
specifier|public
specifier|static
name|int
name|computeMaxActiveApplicationsPerUser
parameter_list|(
name|int
name|maxActiveApplications
parameter_list|,
name|int
name|userLimit
parameter_list|,
name|float
name|userLimitFactor
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|maxActiveApplications
operator|*
operator|(
name|userLimit
operator|/
literal|100.0f
operator|)
operator|*
name|userLimitFactor
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Lock
argument_list|(
name|CSQueue
operator|.
name|class
argument_list|)
DECL|method|updateQueueStatistics ( final ResourceCalculator calculator, final CSQueue childQueue, final CSQueue parentQueue, final Resource clusterResource, final Resource minimumAllocation)
specifier|public
specifier|static
name|void
name|updateQueueStatistics
parameter_list|(
specifier|final
name|ResourceCalculator
name|calculator
parameter_list|,
specifier|final
name|CSQueue
name|childQueue
parameter_list|,
specifier|final
name|CSQueue
name|parentQueue
parameter_list|,
specifier|final
name|Resource
name|clusterResource
parameter_list|,
specifier|final
name|Resource
name|minimumAllocation
parameter_list|)
block|{
name|Resource
name|queueLimit
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
name|Resource
name|usedResources
init|=
name|childQueue
operator|.
name|getUsedResources
argument_list|()
decl_stmt|;
name|float
name|absoluteUsedCapacity
init|=
literal|0.0f
decl_stmt|;
name|float
name|usedCapacity
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|calculator
argument_list|,
name|clusterResource
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|queueLimit
operator|=
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
name|childQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|absoluteUsedCapacity
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|calculator
argument_list|,
name|clusterResource
argument_list|,
name|usedResources
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|usedCapacity
operator|=
name|Resources
operator|.
name|equals
argument_list|(
name|queueLimit
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|?
literal|0
else|:
name|Resources
operator|.
name|divide
argument_list|(
name|calculator
argument_list|,
name|clusterResource
argument_list|,
name|usedResources
argument_list|,
name|queueLimit
argument_list|)
expr_stmt|;
block|}
name|childQueue
operator|.
name|setUsedCapacity
argument_list|(
name|usedCapacity
argument_list|)
expr_stmt|;
name|childQueue
operator|.
name|setAbsoluteUsedCapacity
argument_list|(
name|absoluteUsedCapacity
argument_list|)
expr_stmt|;
name|Resource
name|available
init|=
name|Resources
operator|.
name|roundUp
argument_list|(
name|calculator
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|queueLimit
argument_list|,
name|usedResources
argument_list|)
argument_list|,
name|minimumAllocation
argument_list|)
decl_stmt|;
name|childQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|setAvailableResourcesToQueue
argument_list|(
name|Resources
operator|.
name|max
argument_list|(
name|calculator
argument_list|,
name|clusterResource
argument_list|,
name|available
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

