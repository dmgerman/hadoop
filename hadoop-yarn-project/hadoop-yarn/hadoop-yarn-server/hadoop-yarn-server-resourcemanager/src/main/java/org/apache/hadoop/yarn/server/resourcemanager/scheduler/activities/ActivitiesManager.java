begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWSConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A class to store node or application allocations.  * It mainly contains operations for allocation start, add, update and finish.  */
end_comment

begin_class
DECL|class|ActivitiesManager
specifier|public
class|class
name|ActivitiesManager
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActivitiesManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// An empty node ID, we use this variable as a placeholder
comment|// in the activity records when recording multiple nodes assignments.
DECL|field|EMPTY_NODE_ID
specifier|public
specifier|static
specifier|final
name|NodeId
name|EMPTY_NODE_ID
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|DIAGNOSTICS_DETAILS_SEPARATOR
specifier|public
specifier|static
specifier|final
name|char
name|DIAGNOSTICS_DETAILS_SEPARATOR
init|=
literal|'\n'
decl_stmt|;
DECL|field|EMPTY_DIAGNOSTICS
specifier|public
specifier|static
specifier|final
name|String
name|EMPTY_DIAGNOSTICS
init|=
literal|""
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|NodeAllocation
argument_list|>
argument_list|>
argument_list|>
DECL|field|recordingNodesAllocation
name|recordingNodesAllocation
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|completedNodeAllocations
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|NodeAllocation
argument_list|>
argument_list|>
name|completedNodeAllocations
decl_stmt|;
DECL|field|activeRecordedNodes
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|activeRecordedNodes
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
DECL|field|recordingAppActivitiesUntilSpecifiedTime
name|recordingAppActivitiesUntilSpecifiedTime
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|AppAllocation
argument_list|>
argument_list|>
DECL|field|appsAllocation
name|appsAllocation
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|completedAppAllocations
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Queue
argument_list|<
name|AppAllocation
argument_list|>
argument_list|>
name|completedAppAllocations
decl_stmt|;
DECL|field|recordNextAvailableNode
specifier|private
name|boolean
name|recordNextAvailableNode
init|=
literal|false
decl_stmt|;
DECL|field|lastAvailableNodeActivities
specifier|private
name|List
argument_list|<
name|NodeAllocation
argument_list|>
name|lastAvailableNodeActivities
init|=
literal|null
decl_stmt|;
DECL|field|cleanUpThread
specifier|private
name|Thread
name|cleanUpThread
decl_stmt|;
DECL|field|activitiesCleanupIntervalMs
specifier|private
name|long
name|activitiesCleanupIntervalMs
decl_stmt|;
DECL|field|schedulerActivitiesTTL
specifier|private
name|long
name|schedulerActivitiesTTL
decl_stmt|;
DECL|field|appActivitiesTTL
specifier|private
name|long
name|appActivitiesTTL
decl_stmt|;
DECL|field|appActivitiesMaxQueueLength
specifier|private
specifier|volatile
name|int
name|appActivitiesMaxQueueLength
decl_stmt|;
DECL|field|configuredAppActivitiesMaxQueueLength
specifier|private
name|int
name|configuredAppActivitiesMaxQueueLength
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
decl_stmt|;
DECL|field|diagnosticCollectorManager
specifier|private
name|ThreadLocal
argument_list|<
name|DiagnosticsCollectorManager
argument_list|>
name|diagnosticCollectorManager
decl_stmt|;
DECL|method|ActivitiesManager (RMContext rmContext)
specifier|public
name|ActivitiesManager
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|ActivitiesManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|recordingNodesAllocation
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|completedNodeAllocations
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|appsAllocation
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|completedAppAllocations
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|activeRecordedNodes
operator|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|recordingAppActivitiesUntilSpecifiedTime
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|diagnosticCollectorManager
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|DiagnosticsCollectorManager
argument_list|(
operator|new
name|GenericDiagnosticsCollector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
if|if
condition|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setupConfForCleanup
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupConfForCleanup (Configuration conf)
specifier|private
name|void
name|setupConfForCleanup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|activitiesCleanupIntervalMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ACTIVITIES_MANAGER_CLEANUP_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ACTIVITIES_MANAGER_CLEANUP_INTERVAL_MS
argument_list|)
expr_stmt|;
name|schedulerActivitiesTTL
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ACTIVITIES_MANAGER_SCHEDULER_ACTIVITIES_TTL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ACTIVITIES_MANAGER_SCHEDULER_ACTIVITIES_TTL_MS
argument_list|)
expr_stmt|;
name|appActivitiesTTL
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ACTIVITIES_MANAGER_APP_ACTIVITIES_TTL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ACTIVITIES_MANAGER_APP_ACTIVITIES_TTL_MS
argument_list|)
expr_stmt|;
name|configuredAppActivitiesMaxQueueLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ACTIVITIES_MANAGER_APP_ACTIVITIES_MAX_QUEUE_LENGTH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ACTIVITIES_MANAGER_APP_ACTIVITIES_MAX_QUEUE_LENGTH
argument_list|)
expr_stmt|;
name|appActivitiesMaxQueueLength
operator|=
name|configuredAppActivitiesMaxQueueLength
expr_stmt|;
block|}
DECL|method|getAppActivitiesInfo (ApplicationId applicationId, Set<String> requestPriorities, Set<String> allocationRequestIds, RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize, double maxTimeInSeconds)
specifier|public
name|AppActivitiesInfo
name|getAppActivitiesInfo
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestPriorities
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationRequestIds
parameter_list|,
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
name|groupBy
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|summarize
parameter_list|,
name|double
name|maxTimeInSeconds
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
operator|&&
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|==
name|FinalApplicationStatus
operator|.
name|UNDEFINED
condition|)
block|{
name|Queue
argument_list|<
name|AppAllocation
argument_list|>
name|curAllocations
init|=
name|completedAppAllocations
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AppAllocation
argument_list|>
name|allocations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|curAllocations
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|requestPriorities
argument_list|)
operator|||
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|allocationRequestIds
argument_list|)
condition|)
block|{
name|allocations
operator|=
name|curAllocations
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|filterAllocationAttempts
argument_list|(
name|requestPriorities
argument_list|,
name|allocationRequestIds
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|e
lambda|->
operator|!
name|e
operator|.
name|getAllocationAttempts
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocations
operator|=
operator|new
name|ArrayList
argument_list|(
name|curAllocations
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|summarize
operator|&&
name|allocations
operator|!=
literal|null
condition|)
block|{
name|AppAllocation
name|summaryAppAllocation
init|=
name|getSummarizedAppAllocation
argument_list|(
name|allocations
argument_list|,
name|maxTimeInSeconds
argument_list|)
decl_stmt|;
if|if
condition|(
name|summaryAppAllocation
operator|!=
literal|null
condition|)
block|{
name|allocations
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|summaryAppAllocation
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocations
operator|!=
literal|null
operator|&&
name|limit
operator|>
literal|0
operator|&&
name|limit
operator|<
name|allocations
operator|.
name|size
argument_list|()
condition|)
block|{
name|allocations
operator|=
name|allocations
operator|.
name|subList
argument_list|(
name|allocations
operator|.
name|size
argument_list|()
operator|-
name|limit
argument_list|,
name|allocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AppActivitiesInfo
argument_list|(
name|allocations
argument_list|,
name|applicationId
argument_list|,
name|groupBy
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|AppActivitiesInfo
argument_list|(
literal|"fail to get application activities after finished"
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Get summarized app allocation from multiple allocations as follows:    * 1. Collect latest allocation attempts on nodes to construct an allocation    *    summary on nodes from multiple app allocations which are recorded a few    *    seconds before the last allocation.    * 2. Copy other fields from the last allocation.    */
DECL|method|getSummarizedAppAllocation ( List<AppAllocation> allocations, double maxTimeInSeconds)
specifier|private
name|AppAllocation
name|getSummarizedAppAllocation
parameter_list|(
name|List
argument_list|<
name|AppAllocation
argument_list|>
name|allocations
parameter_list|,
name|double
name|maxTimeInSeconds
parameter_list|)
block|{
if|if
condition|(
name|allocations
operator|==
literal|null
operator|||
name|allocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|startTime
init|=
name|allocations
operator|.
name|get
argument_list|(
name|allocations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getTime
argument_list|()
operator|-
call|(
name|long
call|)
argument_list|(
name|maxTimeInSeconds
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActivityNode
argument_list|>
name|nodeActivities
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|allocations
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|AppAllocation
name|appAllocation
init|=
name|allocations
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTime
operator|>
name|appAllocation
operator|.
name|getTime
argument_list|()
condition|)
block|{
break|break;
block|}
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|activityNodes
init|=
name|appAllocation
operator|.
name|getAllocationAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|ActivityNode
name|an
range|:
name|activityNodes
control|)
block|{
if|if
condition|(
name|an
operator|.
name|getNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nodeActivities
operator|.
name|putIfAbsent
argument_list|(
name|an
operator|.
name|getRequestPriority
argument_list|()
operator|+
literal|"_"
operator|+
name|an
operator|.
name|getAllocationRequestId
argument_list|()
operator|+
literal|"_"
operator|+
name|an
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|an
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|AppAllocation
name|lastAppAllocation
init|=
name|allocations
operator|.
name|get
argument_list|(
name|allocations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AppAllocation
name|summarizedAppAllocation
init|=
operator|new
name|AppAllocation
argument_list|(
name|lastAppAllocation
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|,
name|lastAppAllocation
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|summarizedAppAllocation
operator|.
name|updateAppContainerStateAndTime
argument_list|(
literal|null
argument_list|,
name|lastAppAllocation
operator|.
name|getAppState
argument_list|()
argument_list|,
name|lastAppAllocation
operator|.
name|getTime
argument_list|()
argument_list|,
name|lastAppAllocation
operator|.
name|getDiagnostic
argument_list|()
argument_list|)
expr_stmt|;
name|summarizedAppAllocation
operator|.
name|setAllocationAttempts
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodeActivities
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|summarizedAppAllocation
return|;
block|}
DECL|method|getActivitiesInfo (String nodeId, RMWSConsts.ActivitiesGroupBy groupBy)
specifier|public
name|ActivitiesInfo
name|getActivitiesInfo
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
name|groupBy
parameter_list|)
block|{
name|List
argument_list|<
name|NodeAllocation
argument_list|>
name|allocations
decl_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|allocations
operator|=
name|lastAvailableNodeActivities
expr_stmt|;
block|}
else|else
block|{
name|allocations
operator|=
name|completedNodeAllocations
operator|.
name|get
argument_list|(
name|NodeId
operator|.
name|fromString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ActivitiesInfo
argument_list|(
name|allocations
argument_list|,
name|nodeId
argument_list|,
name|groupBy
argument_list|)
return|;
block|}
DECL|method|recordNextNodeUpdateActivities (String nodeId)
specifier|public
name|void
name|recordNextNodeUpdateActivities
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|recordNextAvailableNode
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|activeRecordedNodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|fromString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|turnOnAppActivitiesRecording (ApplicationId applicationId, double maxTime)
specifier|public
name|void
name|turnOnAppActivitiesRecording
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|double
name|maxTime
parameter_list|)
block|{
name|long
name|startTS
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|endTS
init|=
name|startTS
operator|+
call|(
name|long
call|)
argument_list|(
name|maxTime
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|recordingAppActivitiesUntilSpecifiedTime
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|endTS
argument_list|)
expr_stmt|;
block|}
DECL|method|dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded ()
specifier|private
name|void
name|dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rmContext
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cs
operator|.
name|isMultiNodePlacementEnabled
argument_list|()
condition|)
block|{
name|int
name|numNodes
init|=
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|newAppActivitiesMaxQueueLength
decl_stmt|;
name|int
name|numAsyncSchedulerThreads
init|=
name|cs
operator|.
name|getNumAsyncSchedulerThreads
argument_list|()
decl_stmt|;
if|if
condition|(
name|numAsyncSchedulerThreads
operator|>
literal|0
condition|)
block|{
name|newAppActivitiesMaxQueueLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|configuredAppActivitiesMaxQueueLength
argument_list|,
name|numNodes
operator|*
name|numAsyncSchedulerThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newAppActivitiesMaxQueueLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|configuredAppActivitiesMaxQueueLength
argument_list|,
call|(
name|int
call|)
argument_list|(
name|numNodes
operator|*
literal|1.2
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appActivitiesMaxQueueLength
operator|!=
name|newAppActivitiesMaxQueueLength
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Update max queue length of app activities from {} to {},"
operator|+
literal|" configured={}, numNodes={}, numAsyncSchedulerThreads={}"
operator|+
literal|" when multi-node placement disabled."
argument_list|,
name|appActivitiesMaxQueueLength
argument_list|,
name|newAppActivitiesMaxQueueLength
argument_list|,
name|configuredAppActivitiesMaxQueueLength
argument_list|,
name|numNodes
argument_list|,
name|numAsyncSchedulerThreads
argument_list|)
expr_stmt|;
name|appActivitiesMaxQueueLength
operator|=
name|newAppActivitiesMaxQueueLength
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|appActivitiesMaxQueueLength
operator|!=
name|configuredAppActivitiesMaxQueueLength
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Update max queue length of app activities from {} to {}"
operator|+
literal|" when multi-node placement enabled."
argument_list|,
name|appActivitiesMaxQueueLength
argument_list|,
name|configuredAppActivitiesMaxQueueLength
argument_list|)
expr_stmt|;
name|appActivitiesMaxQueueLength
operator|=
name|configuredAppActivitiesMaxQueueLength
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUpThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stopped
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|NodeAllocation
argument_list|>
argument_list|>
argument_list|>
name|ite
init|=
name|completedNodeAllocations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|curTS
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|NodeAllocation
argument_list|>
argument_list|>
name|nodeAllocation
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeAllocation
argument_list|>
name|allocations
init|=
name|nodeAllocation
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocations
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|curTS
operator|-
name|allocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimeStamp
argument_list|()
operator|>
name|schedulerActivitiesTTL
condition|)
block|{
name|ite
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Queue
argument_list|<
name|AppAllocation
argument_list|>
argument_list|>
argument_list|>
name|iteApp
init|=
name|completedAppAllocations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iteApp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Queue
argument_list|<
name|AppAllocation
argument_list|>
argument_list|>
name|appAllocation
init|=
name|iteApp
operator|.
name|next
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAllocation
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
operator|||
name|rmApp
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|!=
name|FinalApplicationStatus
operator|.
name|UNDEFINED
condition|)
block|{
name|iteApp
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|AppAllocation
argument_list|>
name|appActivitiesIt
init|=
name|appAllocation
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|appActivitiesIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|curTS
operator|-
name|appActivitiesIt
operator|.
name|next
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|appActivitiesTTL
condition|)
block|{
name|appActivitiesIt
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|appAllocation
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iteApp
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed all expired activities from cache for {}."
argument_list|,
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remaining apps in app activities cache: {}"
argument_list|,
name|completedAppAllocations
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// dynamically update max queue length of app activities if needed
name|dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|activitiesCleanupIntervalMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" thread interrupted"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|cleanUpThread
operator|.
name|setName
argument_list|(
literal|"ActivitiesManager thread."
argument_list|)
expr_stmt|;
name|cleanUpThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cleanUpThread
operator|!=
literal|null
condition|)
block|{
name|cleanUpThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|cleanUpThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted Exception while stopping"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startNodeUpdateRecording (NodeId nodeID)
name|void
name|startNodeUpdateRecording
parameter_list|(
name|NodeId
name|nodeID
parameter_list|)
block|{
if|if
condition|(
name|recordNextAvailableNode
condition|)
block|{
name|recordNextNodeUpdateActivities
argument_list|(
name|nodeID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Removing from activeRecordedNodes immediately is to ensure that
comment|// activities will be recorded just once in multiple threads.
if|if
condition|(
name|activeRecordedNodes
operator|.
name|remove
argument_list|(
name|nodeID
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|NodeAllocation
argument_list|>
name|nodeAllocation
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|recordingNodesAllocation
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
name|nodeID
argument_list|,
name|nodeAllocation
argument_list|)
expr_stmt|;
comment|// enable diagnostic collector
name|diagnosticCollectorManager
operator|.
name|get
argument_list|()
operator|.
name|enable
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startAppAllocationRecording (NodeId nodeID, long currTS, SchedulerApplicationAttempt application)
name|void
name|startAppAllocationRecording
parameter_list|(
name|NodeId
name|nodeID
parameter_list|,
name|long
name|currTS
parameter_list|,
name|SchedulerApplicationAttempt
name|application
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|application
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Long
name|turnOffTimestamp
init|=
name|recordingAppActivitiesUntilSpecifiedTime
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|turnOffTimestamp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|turnOffTimestamp
operator|>
name|currTS
condition|)
block|{
name|appsAllocation
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
operator|new
name|AppAllocation
argument_list|(
name|application
operator|.
name|getPriority
argument_list|()
argument_list|,
name|nodeID
argument_list|,
name|application
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// enable diagnostic collector
name|diagnosticCollectorManager
operator|.
name|get
argument_list|()
operator|.
name|enable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|turnOffActivityMonitoringForApp
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add queue, application or container activity into specific node allocation.
DECL|method|addSchedulingActivityForNode (NodeId nodeId, String parentName, String childName, String priority, ActivityState state, String diagnostic, String type, String allocationRequestId)
name|void
name|addSchedulingActivityForNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|String
name|parentName
parameter_list|,
name|String
name|childName
parameter_list|,
name|String
name|priority
parameter_list|,
name|ActivityState
name|state
parameter_list|,
name|String
name|diagnostic
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|allocationRequestId
parameter_list|)
block|{
if|if
condition|(
name|shouldRecordThisNode
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|NodeAllocation
name|nodeAllocation
init|=
name|getCurrentNodeAllocation
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|nodeAllocation
operator|.
name|addAllocationActivity
argument_list|(
name|parentName
argument_list|,
name|childName
argument_list|,
name|priority
argument_list|,
name|state
argument_list|,
name|diagnostic
argument_list|,
name|type
argument_list|,
name|nodeId
argument_list|,
name|allocationRequestId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add queue, application or container activity into specific application
comment|// allocation.
DECL|method|addSchedulingActivityForApp (ApplicationId applicationId, ContainerId containerId, String priority, ActivityState state, String diagnostic, String type, NodeId nodeId, String allocationRequestId)
name|void
name|addSchedulingActivityForApp
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|priority
parameter_list|,
name|ActivityState
name|state
parameter_list|,
name|String
name|diagnostic
parameter_list|,
name|String
name|type
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|allocationRequestId
parameter_list|)
block|{
if|if
condition|(
name|shouldRecordThisApp
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
name|AppAllocation
name|appAllocation
init|=
name|appsAllocation
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|appAllocation
operator|.
name|addAppAllocationActivity
argument_list|(
name|containerId
operator|==
literal|null
condition|?
literal|"Container-Id-Not-Assigned"
else|:
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|priority
argument_list|,
name|state
argument_list|,
name|diagnostic
argument_list|,
name|type
argument_list|,
name|nodeId
argument_list|,
name|allocationRequestId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update container allocation meta status for this node allocation.
comment|// It updates general container status but not the detailed activity state
comment|// in updateActivityState.
DECL|method|updateAllocationFinalState (NodeId nodeID, ContainerId containerId, AllocationState containerState)
name|void
name|updateAllocationFinalState
parameter_list|(
name|NodeId
name|nodeID
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|AllocationState
name|containerState
parameter_list|)
block|{
if|if
condition|(
name|shouldRecordThisNode
argument_list|(
name|nodeID
argument_list|)
condition|)
block|{
name|NodeAllocation
name|nodeAllocation
init|=
name|getCurrentNodeAllocation
argument_list|(
name|nodeID
argument_list|)
decl_stmt|;
name|nodeAllocation
operator|.
name|updateContainerState
argument_list|(
name|containerId
argument_list|,
name|containerState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finishAppAllocationRecording (ApplicationId applicationId, ContainerId containerId, ActivityState appState, String diagnostic)
name|void
name|finishAppAllocationRecording
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|ActivityState
name|appState
parameter_list|,
name|String
name|diagnostic
parameter_list|)
block|{
if|if
condition|(
name|shouldRecordThisApp
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
name|long
name|currTS
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|AppAllocation
name|appAllocation
init|=
name|appsAllocation
operator|.
name|get
argument_list|()
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|appAllocation
operator|.
name|updateAppContainerStateAndTime
argument_list|(
name|containerId
argument_list|,
name|appState
argument_list|,
name|currTS
argument_list|,
name|diagnostic
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|AppAllocation
argument_list|>
name|appAllocations
init|=
name|completedAppAllocations
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAllocations
operator|==
literal|null
condition|)
block|{
name|appAllocations
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|Queue
argument_list|<
name|AppAllocation
argument_list|>
name|curAppAllocations
init|=
name|completedAppAllocations
operator|.
name|putIfAbsent
argument_list|(
name|applicationId
argument_list|,
name|appAllocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|curAppAllocations
operator|!=
literal|null
condition|)
block|{
name|appAllocations
operator|=
name|curAppAllocations
expr_stmt|;
block|}
block|}
name|int
name|curQueueLength
init|=
name|appAllocations
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|curQueueLength
operator|>=
name|appActivitiesMaxQueueLength
condition|)
block|{
name|appAllocations
operator|.
name|poll
argument_list|()
expr_stmt|;
operator|--
name|curQueueLength
expr_stmt|;
block|}
name|appAllocations
operator|.
name|add
argument_list|(
name|appAllocation
argument_list|)
expr_stmt|;
name|Long
name|stopTime
init|=
name|recordingAppActivitiesUntilSpecifiedTime
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopTime
operator|!=
literal|null
operator|&&
name|stopTime
operator|<=
name|currTS
condition|)
block|{
name|turnOffActivityMonitoringForApp
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|finishNodeUpdateRecording (NodeId nodeID)
name|void
name|finishNodeUpdateRecording
parameter_list|(
name|NodeId
name|nodeID
parameter_list|)
block|{
name|List
argument_list|<
name|NodeAllocation
argument_list|>
name|value
init|=
name|recordingNodesAllocation
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|nodeID
argument_list|)
decl_stmt|;
name|long
name|timeStamp
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lastAvailableNodeActivities
operator|=
name|value
expr_stmt|;
for|for
control|(
name|NodeAllocation
name|allocation
range|:
name|lastAvailableNodeActivities
control|)
block|{
name|allocation
operator|.
name|transformToTree
argument_list|()
expr_stmt|;
name|allocation
operator|.
name|setTimeStamp
argument_list|(
name|timeStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recordNextAvailableNode
condition|)
block|{
name|recordNextAvailableNode
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shouldRecordThisNode
argument_list|(
name|nodeID
argument_list|)
condition|)
block|{
name|recordingNodesAllocation
operator|.
name|get
argument_list|()
operator|.
name|remove
argument_list|(
name|nodeID
argument_list|)
expr_stmt|;
name|completedNodeAllocations
operator|.
name|put
argument_list|(
name|nodeID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// disable diagnostic collector
name|diagnosticCollectorManager
operator|.
name|get
argument_list|()
operator|.
name|disable
argument_list|()
expr_stmt|;
block|}
DECL|method|shouldRecordThisApp (ApplicationId applicationId)
name|boolean
name|shouldRecordThisApp
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
if|if
condition|(
name|recordingAppActivitiesUntilSpecifiedTime
operator|.
name|isEmpty
argument_list|()
operator|||
name|appsAllocation
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|recordingAppActivitiesUntilSpecifiedTime
operator|.
name|containsKey
argument_list|(
name|applicationId
argument_list|)
operator|&&
name|appsAllocation
operator|.
name|get
argument_list|()
operator|.
name|containsKey
argument_list|(
name|applicationId
argument_list|)
return|;
block|}
DECL|method|shouldRecordThisNode (NodeId nodeID)
name|boolean
name|shouldRecordThisNode
parameter_list|(
name|NodeId
name|nodeID
parameter_list|)
block|{
return|return
name|isRecordingMultiNodes
argument_list|()
operator|||
name|recordingNodesAllocation
operator|.
name|get
argument_list|()
operator|.
name|containsKey
argument_list|(
name|nodeID
argument_list|)
return|;
block|}
DECL|method|getCurrentNodeAllocation (NodeId nodeID)
specifier|private
name|NodeAllocation
name|getCurrentNodeAllocation
parameter_list|(
name|NodeId
name|nodeID
parameter_list|)
block|{
name|NodeId
name|recordingKey
init|=
name|isRecordingMultiNodes
argument_list|()
condition|?
name|EMPTY_NODE_ID
else|:
name|nodeID
decl_stmt|;
name|List
argument_list|<
name|NodeAllocation
argument_list|>
name|nodeAllocations
init|=
name|recordingNodesAllocation
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|recordingKey
argument_list|)
decl_stmt|;
name|NodeAllocation
name|nodeAllocation
decl_stmt|;
comment|// When this node has already stored allocation activities, get the
comment|// last allocation for this node.
if|if
condition|(
name|nodeAllocations
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|nodeAllocation
operator|=
name|nodeAllocations
operator|.
name|get
argument_list|(
name|nodeAllocations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// When final state in last allocation is not DEFAULT, it means
comment|// last allocation has finished. Create a new allocation for this node,
comment|// and add it to the allocation list. Return this new allocation.
comment|//
comment|// When final state in last allocation is DEFAULT,
comment|// it means last allocation has not finished. Just get last allocation.
if|if
condition|(
name|nodeAllocation
operator|.
name|getFinalAllocationState
argument_list|()
operator|!=
name|AllocationState
operator|.
name|DEFAULT
condition|)
block|{
name|nodeAllocation
operator|=
operator|new
name|NodeAllocation
argument_list|(
name|nodeID
argument_list|)
expr_stmt|;
name|nodeAllocations
operator|.
name|add
argument_list|(
name|nodeAllocation
argument_list|)
expr_stmt|;
block|}
block|}
comment|// When this node has not stored allocation activities,
comment|// create a new allocation for this node, and add it to the allocation list.
comment|// Return this new allocation.
else|else
block|{
name|nodeAllocation
operator|=
operator|new
name|NodeAllocation
argument_list|(
name|nodeID
argument_list|)
expr_stmt|;
name|nodeAllocations
operator|.
name|add
argument_list|(
name|nodeAllocation
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeAllocation
return|;
block|}
DECL|method|turnOffActivityMonitoringForApp (ApplicationId applicationId)
specifier|private
name|void
name|turnOffActivityMonitoringForApp
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|recordingAppActivitiesUntilSpecifiedTime
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
DECL|method|isRecordingMultiNodes ()
specifier|public
name|boolean
name|isRecordingMultiNodes
parameter_list|()
block|{
return|return
name|recordingNodesAllocation
operator|.
name|get
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EMPTY_NODE_ID
argument_list|)
return|;
block|}
comment|/**    * Get recording node id:    * 1. node id of the input node if it is not null.    * 2. EMPTY_NODE_ID if input node is null and activities manager is    *    recording multi-nodes.    * 3. null otherwise.    * @param node - input node    * @return recording nodeId    */
DECL|method|getRecordingNodeId (SchedulerNode node)
specifier|public
name|NodeId
name|getRecordingNodeId
parameter_list|(
name|SchedulerNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|getNodeID
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|isRecordingMultiNodes
argument_list|()
condition|)
block|{
return|return
name|ActivitiesManager
operator|.
name|EMPTY_NODE_ID
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Class to manage the diagnostics collector.    */
DECL|class|DiagnosticsCollectorManager
specifier|public
specifier|static
class|class
name|DiagnosticsCollectorManager
block|{
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
DECL|field|gdc
specifier|private
name|DiagnosticsCollector
name|gdc
decl_stmt|;
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|enable ()
specifier|public
name|void
name|enable
parameter_list|()
block|{
name|this
operator|.
name|enabled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|disable ()
specifier|public
name|void
name|disable
parameter_list|()
block|{
name|this
operator|.
name|enabled
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|DiagnosticsCollectorManager (DiagnosticsCollector gdc)
specifier|public
name|DiagnosticsCollectorManager
parameter_list|(
name|DiagnosticsCollector
name|gdc
parameter_list|)
block|{
name|this
operator|.
name|gdc
operator|=
name|gdc
expr_stmt|;
block|}
DECL|method|getOptionalDiagnosticsCollector ()
specifier|public
name|Optional
argument_list|<
name|DiagnosticsCollector
argument_list|>
name|getOptionalDiagnosticsCollector
parameter_list|()
block|{
if|if
condition|(
name|enabled
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|gdc
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|getOptionalDiagnosticsCollector ()
specifier|public
name|Optional
argument_list|<
name|DiagnosticsCollector
argument_list|>
name|getOptionalDiagnosticsCollector
parameter_list|()
block|{
return|return
name|diagnosticCollectorManager
operator|.
name|get
argument_list|()
operator|.
name|getOptionalDiagnosticsCollector
argument_list|()
return|;
block|}
DECL|method|getResourceDiagnostics (ResourceCalculator rc, Resource required, Resource available)
specifier|public
name|String
name|getResourceDiagnostics
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|required
parameter_list|,
name|Resource
name|available
parameter_list|)
block|{
name|Optional
argument_list|<
name|DiagnosticsCollector
argument_list|>
name|dcOpt
init|=
name|getOptionalDiagnosticsCollector
argument_list|()
decl_stmt|;
if|if
condition|(
name|dcOpt
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dcOpt
operator|.
name|get
argument_list|()
operator|.
name|collectResourceDiagnostics
argument_list|(
name|rc
argument_list|,
name|required
argument_list|,
name|available
argument_list|)
expr_stmt|;
return|return
name|getDiagnostics
argument_list|(
name|dcOpt
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
return|return
name|EMPTY_DIAGNOSTICS
return|;
block|}
DECL|method|getDiagnostics (Optional<DiagnosticsCollector> dcOpt)
specifier|public
specifier|static
name|String
name|getDiagnostics
parameter_list|(
name|Optional
argument_list|<
name|DiagnosticsCollector
argument_list|>
name|dcOpt
parameter_list|)
block|{
if|if
condition|(
name|dcOpt
operator|!=
literal|null
operator|&&
name|dcOpt
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|DiagnosticsCollector
name|dc
init|=
name|dcOpt
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|dc
operator|!=
literal|null
operator|&&
name|dc
operator|.
name|getDiagnostics
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getDiagnostics
argument_list|(
name|dc
argument_list|)
return|;
block|}
block|}
return|return
name|EMPTY_DIAGNOSTICS
return|;
block|}
DECL|method|getDiagnostics (DiagnosticsCollector dc)
specifier|private
specifier|static
name|String
name|getDiagnostics
parameter_list|(
name|DiagnosticsCollector
name|dc
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|dc
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dc
operator|.
name|getDetails
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|DIAGNOSTICS_DETAILS_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|dc
operator|.
name|getDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAppActivitiesMaxQueueLength ()
specifier|public
name|int
name|getAppActivitiesMaxQueueLength
parameter_list|()
block|{
return|return
name|appActivitiesMaxQueueLength
return|;
block|}
block|}
end_class

end_unit

