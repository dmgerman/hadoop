begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|RMAppAttemptMetrics
specifier|public
class|class
name|RMAppAttemptMetrics
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppAttemptMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|attemptId
specifier|private
name|ApplicationAttemptId
name|attemptId
init|=
literal|null
decl_stmt|;
comment|// preemption info
DECL|field|resourcePreempted
specifier|private
name|Resource
name|resourcePreempted
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// application headroom
DECL|field|applicationHeadroom
specifier|private
specifier|volatile
name|Resource
name|applicationHeadroom
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|numNonAMContainersPreempted
specifier|private
name|AtomicInteger
name|numNonAMContainersPreempted
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isPreempted
specifier|private
name|AtomicBoolean
name|isPreempted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|finishedMemorySeconds
specifier|private
name|AtomicLong
name|finishedMemorySeconds
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|finishedVcoreSeconds
specifier|private
name|AtomicLong
name|finishedVcoreSeconds
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|preemptedMemorySeconds
specifier|private
name|AtomicLong
name|preemptedMemorySeconds
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|preemptedVcoreSeconds
specifier|private
name|AtomicLong
name|preemptedVcoreSeconds
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|localityStatistics
specifier|private
name|int
index|[]
index|[]
name|localityStatistics
init|=
operator|new
name|int
index|[
name|NodeType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
index|[
name|NodeType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
DECL|field|totalAllocatedContainers
specifier|private
specifier|volatile
name|int
name|totalAllocatedContainers
decl_stmt|;
DECL|method|RMAppAttemptMetrics (ApplicationAttemptId attemptId, RMContext rmContext)
specifier|public
name|RMAppAttemptMetrics
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
DECL|method|updatePreemptionInfo (Resource resource, RMContainer container)
specifier|public
name|void
name|updatePreemptionInfo
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|RMContainer
name|container
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|resourcePreempted
operator|=
name|Resources
operator|.
name|addTo
argument_list|(
name|resourcePreempted
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|container
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
comment|// container got preempted is not a master container
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Non-AM container preempted, current appAttemptId=%s, "
operator|+
literal|"containerId=%s, resource=%s"
argument_list|,
name|attemptId
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|numNonAMContainersPreempted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// container got preempted is a master container
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"AM container preempted, "
operator|+
literal|"current appAttemptId=%s, containerId=%s, resource=%s"
argument_list|,
name|attemptId
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|isPreempted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getResourcePreempted ()
specifier|public
name|Resource
name|getResourcePreempted
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|resourcePreempted
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPreemptedMemory ()
specifier|public
name|long
name|getPreemptedMemory
parameter_list|()
block|{
return|return
name|preemptedMemorySeconds
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getPreemptedVcore ()
specifier|public
name|long
name|getPreemptedVcore
parameter_list|()
block|{
return|return
name|preemptedVcoreSeconds
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getNumNonAMContainersPreempted ()
specifier|public
name|int
name|getNumNonAMContainersPreempted
parameter_list|()
block|{
return|return
name|numNonAMContainersPreempted
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setIsPreempted ()
specifier|public
name|void
name|setIsPreempted
parameter_list|()
block|{
name|this
operator|.
name|isPreempted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getIsPreempted ()
specifier|public
name|boolean
name|getIsPreempted
parameter_list|()
block|{
return|return
name|this
operator|.
name|isPreempted
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getAggregateAppResourceUsage ()
specifier|public
name|AggregateAppResourceUsage
name|getAggregateAppResourceUsage
parameter_list|()
block|{
name|long
name|memorySeconds
init|=
name|finishedMemorySeconds
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|vcoreSeconds
init|=
name|finishedVcoreSeconds
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Only add in the running containers if this is the active attempt.
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmApp
condition|)
block|{
name|RMAppAttempt
name|currentAttempt
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|attemptId
argument_list|)
condition|)
block|{
name|ApplicationResourceUsageReport
name|appResUsageReport
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getAppResourceUsageReport
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appResUsageReport
operator|!=
literal|null
condition|)
block|{
name|memorySeconds
operator|+=
name|appResUsageReport
operator|.
name|getMemorySeconds
argument_list|()
expr_stmt|;
name|vcoreSeconds
operator|+=
name|appResUsageReport
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|AggregateAppResourceUsage
argument_list|(
name|memorySeconds
argument_list|,
name|vcoreSeconds
argument_list|)
return|;
block|}
DECL|method|updateAggregateAppResourceUsage (long finishedMemorySeconds, long finishedVcoreSeconds)
specifier|public
name|void
name|updateAggregateAppResourceUsage
parameter_list|(
name|long
name|finishedMemorySeconds
parameter_list|,
name|long
name|finishedVcoreSeconds
parameter_list|)
block|{
name|this
operator|.
name|finishedMemorySeconds
operator|.
name|addAndGet
argument_list|(
name|finishedMemorySeconds
argument_list|)
expr_stmt|;
name|this
operator|.
name|finishedVcoreSeconds
operator|.
name|addAndGet
argument_list|(
name|finishedVcoreSeconds
argument_list|)
expr_stmt|;
block|}
DECL|method|updateAggregatePreemptedAppResourceUsage ( long preemptedMemorySeconds, long preemptedVcoreSeconds)
specifier|public
name|void
name|updateAggregatePreemptedAppResourceUsage
parameter_list|(
name|long
name|preemptedMemorySeconds
parameter_list|,
name|long
name|preemptedVcoreSeconds
parameter_list|)
block|{
name|this
operator|.
name|preemptedMemorySeconds
operator|.
name|addAndGet
argument_list|(
name|preemptedMemorySeconds
argument_list|)
expr_stmt|;
name|this
operator|.
name|preemptedVcoreSeconds
operator|.
name|addAndGet
argument_list|(
name|preemptedVcoreSeconds
argument_list|)
expr_stmt|;
block|}
DECL|method|incNumAllocatedContainers (NodeType containerType, NodeType requestType)
specifier|public
name|void
name|incNumAllocatedContainers
parameter_list|(
name|NodeType
name|containerType
parameter_list|,
name|NodeType
name|requestType
parameter_list|)
block|{
name|localityStatistics
index|[
name|containerType
operator|.
name|getIndex
argument_list|()
index|]
index|[
name|requestType
operator|.
name|getIndex
argument_list|()
index|]
operator|++
expr_stmt|;
name|totalAllocatedContainers
operator|++
expr_stmt|;
block|}
DECL|method|getLocalityStatistics ()
specifier|public
name|int
index|[]
index|[]
name|getLocalityStatistics
parameter_list|()
block|{
return|return
name|this
operator|.
name|localityStatistics
return|;
block|}
DECL|method|getTotalAllocatedContainers ()
specifier|public
name|int
name|getTotalAllocatedContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalAllocatedContainers
return|;
block|}
DECL|method|getApplicationAttemptHeadroom ()
specifier|public
name|Resource
name|getApplicationAttemptHeadroom
parameter_list|()
block|{
return|return
name|applicationHeadroom
return|;
block|}
DECL|method|setApplicationAttemptHeadRoom (Resource headRoom)
specifier|public
name|void
name|setApplicationAttemptHeadRoom
parameter_list|(
name|Resource
name|headRoom
parameter_list|)
block|{
name|this
operator|.
name|applicationHeadroom
operator|=
name|headRoom
expr_stmt|;
block|}
block|}
end_class

end_unit

