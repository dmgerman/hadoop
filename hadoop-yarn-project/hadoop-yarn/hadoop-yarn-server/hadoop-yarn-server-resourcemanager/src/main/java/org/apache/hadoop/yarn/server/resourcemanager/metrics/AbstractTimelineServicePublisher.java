begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
operator|.
name|TimelineServicePublisher
import|;
end_import

begin_class
DECL|class|AbstractTimelineServicePublisher
specifier|public
specifier|abstract
class|class
name|AbstractTimelineServicePublisher
extends|extends
name|CompositeService
implements|implements
name|TimelineServicePublisher
implements|,
name|EventHandler
argument_list|<
name|SystemMetricsEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineServiceV2Publisher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|AbstractTimelineServicePublisher (String name)
specifier|public
name|AbstractTimelineServicePublisher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (SystemMetricsEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SystemMetricsEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APP_CREATED
case|:
name|publishApplicationCreatedEvent
argument_list|(
operator|(
name|ApplicationCreatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_FINISHED
case|:
name|publishApplicationFinishedEvent
argument_list|(
operator|(
name|ApplicationFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_UPDATED
case|:
name|publishApplicationUpdatedEvent
argument_list|(
operator|(
name|ApplicationUpdatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_STATE_UPDATED
case|:
name|publishApplicationStateUpdatedEvent
argument_list|(
operator|(
name|ApplicaitonStateUpdatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ACLS_UPDATED
case|:
name|publishApplicationACLsUpdatedEvent
argument_list|(
operator|(
name|ApplicationACLsUpdatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_REGISTERED
case|:
name|publishAppAttemptRegisteredEvent
argument_list|(
operator|(
name|AppAttemptRegisteredEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_FINISHED
case|:
name|publishAppAttemptFinishedEvent
argument_list|(
operator|(
name|AppAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_CREATED
case|:
name|publishContainerCreatedEvent
argument_list|(
operator|(
name|ContainerCreatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_FINISHED
case|:
name|publishContainerFinishedEvent
argument_list|(
operator|(
name|ContainerFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown SystemMetricsEvent type: "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|publishAppAttemptFinishedEvent (AppAttemptFinishedEvent event)
specifier|abstract
name|void
name|publishAppAttemptFinishedEvent
parameter_list|(
name|AppAttemptFinishedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishAppAttemptRegisteredEvent (AppAttemptRegisteredEvent event)
specifier|abstract
name|void
name|publishAppAttemptRegisteredEvent
parameter_list|(
name|AppAttemptRegisteredEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishApplicationUpdatedEvent (ApplicationUpdatedEvent event)
specifier|abstract
name|void
name|publishApplicationUpdatedEvent
parameter_list|(
name|ApplicationUpdatedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishApplicationStateUpdatedEvent ( ApplicaitonStateUpdatedEvent event)
specifier|abstract
name|void
name|publishApplicationStateUpdatedEvent
parameter_list|(
name|ApplicaitonStateUpdatedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishApplicationACLsUpdatedEvent ( ApplicationACLsUpdatedEvent event)
specifier|abstract
name|void
name|publishApplicationACLsUpdatedEvent
parameter_list|(
name|ApplicationACLsUpdatedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishApplicationFinishedEvent (ApplicationFinishedEvent event)
specifier|abstract
name|void
name|publishApplicationFinishedEvent
parameter_list|(
name|ApplicationFinishedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishApplicationCreatedEvent (ApplicationCreatedEvent event)
specifier|abstract
name|void
name|publishApplicationCreatedEvent
parameter_list|(
name|ApplicationCreatedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishContainerCreatedEvent (ContainerCreatedEvent event)
specifier|abstract
name|void
name|publishContainerCreatedEvent
parameter_list|(
name|ContainerCreatedEvent
name|event
parameter_list|)
function_decl|;
DECL|method|publishContainerFinishedEvent (ContainerFinishedEvent event)
specifier|abstract
name|void
name|publishContainerFinishedEvent
parameter_list|(
name|ContainerFinishedEvent
name|event
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getDispatcher ()
specifier|public
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
name|MultiThreadedDispatcher
name|dispatcher
init|=
operator|new
name|MultiThreadedDispatcher
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
annotation|@
name|Override
DECL|method|publishRMContainerMetrics ()
specifier|public
name|boolean
name|publishRMContainerMetrics
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
argument_list|<
name|SystemMetricsEvent
argument_list|>
name|getEventHandler
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|MultiThreadedDispatcher
specifier|public
specifier|static
class|class
name|MultiThreadedDispatcher
extends|extends
name|CompositeService
implements|implements
name|Dispatcher
block|{
DECL|field|dispatchers
specifier|private
name|List
argument_list|<
name|AsyncDispatcher
argument_list|>
name|dispatchers
init|=
operator|new
name|ArrayList
argument_list|<
name|AsyncDispatcher
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MultiThreadedDispatcher (int num)
specifier|public
name|MultiThreadedDispatcher
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|super
argument_list|(
name|MultiThreadedDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|AsyncDispatcher
name|dispatcher
init|=
name|createDispatcher
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|add
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
operator|new
name|CompositEventHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|register (Class<? extends Enum> eventType, EventHandler handler)
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{
for|for
control|(
name|AsyncDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
name|dispatcher
operator|.
name|register
argument_list|(
name|eventType
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setDrainEventsOnStop ()
specifier|public
name|void
name|setDrainEventsOnStop
parameter_list|()
block|{
for|for
control|(
name|AsyncDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CompositEventHandler
specifier|private
class|class
name|CompositEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// Use hashCode (of ApplicationId) to dispatch the event to the child
comment|// dispatcher, such that all the writing events of one application will
comment|// be handled by one thread, the scheduled order of the these events
comment|// will be preserved
name|int
name|index
init|=
operator|(
name|event
operator|.
name|hashCode
argument_list|()
operator|&
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|%
name|dispatchers
operator|.
name|size
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDispatcher ()
specifier|protected
name|AsyncDispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|AsyncDispatcher
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

