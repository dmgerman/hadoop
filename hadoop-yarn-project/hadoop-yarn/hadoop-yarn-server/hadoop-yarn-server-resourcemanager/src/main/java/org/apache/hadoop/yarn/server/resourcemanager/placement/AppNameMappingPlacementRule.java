begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerQueueManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|QueuePlacementRuleUtils
operator|.
name|extractQueuePath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|QueuePlacementRuleUtils
operator|.
name|getPlacementContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|QueuePlacementRuleUtils
operator|.
name|isStaticQueueMapping
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|QueuePlacementRuleUtils
operator|.
name|validateAndGetAutoCreatedQueueMapping
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|QueuePlacementRuleUtils
operator|.
name|validateAndGetQueueMapping
import|;
end_import

begin_class
DECL|class|AppNameMappingPlacementRule
specifier|public
class|class
name|AppNameMappingPlacementRule
extends|extends
name|PlacementRule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppNameMappingPlacementRule
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CURRENT_APP_MAPPING
specifier|public
specifier|static
specifier|final
name|String
name|CURRENT_APP_MAPPING
init|=
literal|"%application"
decl_stmt|;
DECL|field|QUEUE_MAPPING_NAME
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_MAPPING_NAME
init|=
literal|"app-name"
decl_stmt|;
DECL|field|overrideWithQueueMappings
specifier|private
name|boolean
name|overrideWithQueueMappings
init|=
literal|false
decl_stmt|;
DECL|field|mappings
specifier|private
name|List
argument_list|<
name|QueueMappingEntity
argument_list|>
name|mappings
init|=
literal|null
decl_stmt|;
DECL|method|AppNameMappingPlacementRule ()
specifier|public
name|AppNameMappingPlacementRule
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AppNameMappingPlacementRule (boolean overrideWithQueueMappings, List<QueueMappingEntity> newMappings)
specifier|public
name|AppNameMappingPlacementRule
parameter_list|(
name|boolean
name|overrideWithQueueMappings
parameter_list|,
name|List
argument_list|<
name|QueueMappingEntity
argument_list|>
name|newMappings
parameter_list|)
block|{
name|this
operator|.
name|overrideWithQueueMappings
operator|=
name|overrideWithQueueMappings
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|newMappings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (CapacitySchedulerContext schedulerContext)
specifier|public
name|boolean
name|initialize
parameter_list|(
name|CapacitySchedulerContext
name|schedulerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
name|schedulerContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|overrideWithQueueMappings
init|=
name|conf
operator|.
name|getOverrideWithQueueMappings
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized queue mappings, override: "
operator|+
name|overrideWithQueueMappings
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueueMappingEntity
argument_list|>
name|queueMappings
init|=
name|conf
operator|.
name|getQueueMappingEntity
argument_list|(
name|QUEUE_MAPPING_NAME
argument_list|)
decl_stmt|;
comment|// Get new user mappings
name|List
argument_list|<
name|QueueMappingEntity
argument_list|>
name|newMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CapacitySchedulerQueueManager
name|queueManager
init|=
name|schedulerContext
operator|.
name|getCapacitySchedulerQueueManager
argument_list|()
decl_stmt|;
comment|// check if mappings refer to valid queues
for|for
control|(
name|QueueMappingEntity
name|mapping
range|:
name|queueMappings
control|)
block|{
name|QueuePath
name|queuePath
init|=
name|extractQueuePath
argument_list|(
name|mapping
operator|.
name|getQueue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStaticQueueMapping
argument_list|(
name|mapping
argument_list|)
condition|)
block|{
comment|//Try getting queue by its leaf queue name
comment|// without splitting into parent/leaf queues
name|CSQueue
name|queue
init|=
name|queueManager
operator|.
name|getQueue
argument_list|(
name|mapping
operator|.
name|getQueue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifQueueDoesNotExist
argument_list|(
name|queue
argument_list|)
condition|)
block|{
comment|//Try getting the queue by extracting leaf and parent queue names
comment|//Assuming its a potential auto created leaf queue
name|queue
operator|=
name|queueManager
operator|.
name|getQueue
argument_list|(
name|queuePath
operator|.
name|getLeafQueue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ifQueueDoesNotExist
argument_list|(
name|queue
argument_list|)
condition|)
block|{
comment|//if leaf queue does not exist,
comment|// this could be a potential auto created leaf queue
comment|//validate if parent queue is specified,
comment|// then it should exist and
comment|// be an instance of AutoCreateEnabledParentQueue
name|QueueMappingEntity
name|newMapping
init|=
name|validateAndGetAutoCreatedQueueMapping
argument_list|(
name|queueManager
argument_list|,
name|mapping
argument_list|,
name|queuePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"mapping contains invalid or non-leaf queue "
operator|+
name|mapping
operator|.
name|getQueue
argument_list|()
argument_list|)
throw|;
block|}
name|newMappings
operator|.
name|add
argument_list|(
name|newMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QueueMappingEntity
name|newMapping
init|=
name|validateAndGetQueueMapping
argument_list|(
name|queueManager
argument_list|,
name|queue
argument_list|,
name|mapping
argument_list|,
name|queuePath
argument_list|)
decl_stmt|;
name|newMappings
operator|.
name|add
argument_list|(
name|newMapping
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if queue exists, validate
comment|//   if its an instance of leaf queue
comment|//   if its an instance of auto created leaf queue,
comment|// then extract parent queue name and update queue mapping
name|QueueMappingEntity
name|newMapping
init|=
name|validateAndGetQueueMapping
argument_list|(
name|queueManager
argument_list|,
name|queue
argument_list|,
name|mapping
argument_list|,
name|queuePath
argument_list|)
decl_stmt|;
name|newMappings
operator|.
name|add
argument_list|(
name|newMapping
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//If it is a dynamic queue mapping,
comment|// we can safely assume leaf queue name does not have '.' in it
comment|// validate
comment|// if parent queue is specified, then
comment|//  parent queue exists and an instance of AutoCreateEnabledParentQueue
comment|//
name|QueueMappingEntity
name|newMapping
init|=
name|validateAndGetAutoCreatedQueueMapping
argument_list|(
name|queueManager
argument_list|,
name|mapping
argument_list|,
name|queuePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|!=
literal|null
condition|)
block|{
name|newMappings
operator|.
name|add
argument_list|(
name|newMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|mappings
operator|=
name|newMappings
expr_stmt|;
name|this
operator|.
name|overrideWithQueueMappings
operator|=
name|overrideWithQueueMappings
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|ifQueueDoesNotExist (CSQueue queue)
specifier|private
specifier|static
name|boolean
name|ifQueueDoesNotExist
parameter_list|(
name|CSQueue
name|queue
parameter_list|)
block|{
return|return
name|queue
operator|==
literal|null
return|;
block|}
DECL|method|getAppPlacementContext (String user, ApplicationId applicationId)
specifier|private
name|ApplicationPlacementContext
name|getAppPlacementContext
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|QueueMappingEntity
name|mapping
range|:
name|mappings
control|)
block|{
if|if
condition|(
name|mapping
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|CURRENT_APP_MAPPING
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapping
operator|.
name|getQueue
argument_list|()
operator|.
name|equals
argument_list|(
name|CURRENT_APP_MAPPING
argument_list|)
condition|)
block|{
return|return
name|getPlacementContext
argument_list|(
name|mapping
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|applicationId
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getPlacementContext
argument_list|(
name|mapping
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|mapping
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getPlacementContext
argument_list|(
name|mapping
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPlacementForApp ( ApplicationSubmissionContext asc, String user)
specifier|public
name|ApplicationPlacementContext
name|getPlacementForApp
parameter_list|(
name|ApplicationSubmissionContext
name|asc
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|queueName
init|=
name|asc
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|asc
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappings
operator|!=
literal|null
operator|&&
name|mappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|ApplicationPlacementContext
name|mappedQueue
init|=
name|getAppPlacementContext
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedQueue
operator|!=
literal|null
condition|)
block|{
comment|// We have a mapping, should we use it?
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
comment|//queueName will be same as mapped queue name in case of recovery
operator|||
name|queueName
operator|.
name|equals
argument_list|(
name|mappedQueue
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|||
name|overrideWithQueueMappings
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" mapping ["
operator|+
name|queueName
operator|+
literal|"] to ["
operator|+
name|mappedQueue
operator|+
literal|"] override "
operator|+
name|overrideWithQueueMappings
argument_list|)
expr_stmt|;
return|return
name|mappedQueue
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to submit application "
operator|+
name|applicationId
operator|+
literal|" reason: "
operator|+
name|ioex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

