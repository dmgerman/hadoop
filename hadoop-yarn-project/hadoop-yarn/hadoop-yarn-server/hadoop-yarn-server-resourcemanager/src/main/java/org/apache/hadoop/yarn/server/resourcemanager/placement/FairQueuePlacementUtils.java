begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility methods used by Fair scheduler placement rules.  * {@link  * org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FairQueuePlacementUtils
specifier|public
specifier|final
class|class
name|FairQueuePlacementUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FairQueuePlacementUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Constants for name clean up and hierarchy checks
DECL|field|DOT
specifier|protected
specifier|static
specifier|final
name|String
name|DOT
init|=
literal|"."
decl_stmt|;
DECL|field|DOT_REPLACEMENT
specifier|protected
specifier|static
specifier|final
name|String
name|DOT_REPLACEMENT
init|=
literal|"_dot_"
decl_stmt|;
DECL|field|ROOT_QUEUE
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_QUEUE
init|=
literal|"root"
decl_stmt|;
DECL|method|FairQueuePlacementUtils ()
specifier|private
name|FairQueuePlacementUtils
parameter_list|()
block|{   }
comment|/**    * Replace the periods in the username or group name with "_dot_" and    * remove trailing and leading whitespace.    *    * @param name The name to clean    * @return The name with {@link #DOT} replaced with {@link #DOT_REPLACEMENT}    */
DECL|method|cleanName (String name)
specifier|protected
specifier|static
name|String
name|cleanName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|FairSchedulerUtilities
operator|.
name|trimQueueName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
name|DOT
argument_list|)
condition|)
block|{
name|String
name|converted
init|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
name|DOT_REPLACEMENT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Name {} is converted to {} when it is used as a queue name."
argument_list|,
name|name
argument_list|,
name|converted
argument_list|)
expr_stmt|;
return|return
name|converted
return|;
block|}
else|else
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**    * Assure root prefix for a queue name.    *    * @param queueName The queue name to check for the root prefix    * @return The root prefixed queue name    */
DECL|method|assureRoot (String queueName)
specifier|protected
specifier|static
name|String
name|assureRoot
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
if|if
condition|(
name|queueName
operator|!=
literal|null
operator|&&
operator|!
name|queueName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|queueName
operator|.
name|startsWith
argument_list|(
name|ROOT_QUEUE
operator|+
name|DOT
argument_list|)
operator|&&
operator|!
name|queueName
operator|.
name|equals
argument_list|(
name|ROOT_QUEUE
argument_list|)
condition|)
block|{
name|queueName
operator|=
name|ROOT_QUEUE
operator|+
name|DOT
operator|+
name|queueName
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"AssureRoot: queueName is empty or null."
argument_list|)
expr_stmt|;
block|}
return|return
name|queueName
return|;
block|}
comment|/**    * Validate the queue name: it may not start or end with a {@link #DOT}.    *    * @param queueName The queue name to validate    * @return<code>false</code> if the queue name starts or ends with a    * {@link #DOT},<code>true</code>    */
DECL|method|isValidQueueName (String queueName)
specifier|protected
specifier|static
name|boolean
name|isValidQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
if|if
condition|(
name|queueName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
name|FairSchedulerUtilities
operator|.
name|trimQueueName
argument_list|(
name|queueName
argument_list|)
argument_list|)
operator|&&
operator|!
name|queueName
operator|.
name|startsWith
argument_list|(
name|DOT
argument_list|)
operator|&&
operator|!
name|queueName
operator|.
name|endsWith
argument_list|(
name|DOT
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

