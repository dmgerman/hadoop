begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|DOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|assureRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|cleanName
import|;
end_import

begin_comment
comment|/**  * Places apps in queues by username of the submitter.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|UserPlacementRule
specifier|public
class|class
name|UserPlacementRule
extends|extends
name|FSPlacementRule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserPlacementRule
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getPlacementForApp ( ApplicationSubmissionContext asc, String user)
specifier|public
name|ApplicationPlacementContext
name|getPlacementForApp
parameter_list|(
name|ApplicationSubmissionContext
name|asc
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|queueName
decl_stmt|;
name|String
name|cleanUser
init|=
name|cleanName
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|PlacementRule
name|parentRule
init|=
name|getParentRule
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentRule
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User rule: parent rule found: {}"
argument_list|,
name|parentRule
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationPlacementContext
name|parent
init|=
name|parentRule
operator|.
name|getPlacementForApp
argument_list|(
name|asc
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|parent
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|instanceof
name|FSLeafQueue
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User rule: parent rule failed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"User rule: parent rule result: {}"
argument_list|,
name|parent
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|queueName
operator|=
name|parent
operator|.
name|getQueue
argument_list|()
operator|+
name|DOT
operator|+
name|cleanUser
expr_stmt|;
block|}
else|else
block|{
name|queueName
operator|=
name|assureRoot
argument_list|(
name|cleanUser
argument_list|)
expr_stmt|;
block|}
comment|// If we can create the queue in the rule or the queue exists return it
if|if
condition|(
name|createQueue
operator|||
name|configuredQueue
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
return|return
operator|new
name|ApplicationPlacementContext
argument_list|(
name|queueName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

