begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_comment
comment|/**  * A planning algorithm that invokes several other planning algorithms according  * to a given order. If one of the planners succeeds, the allocation it  * generates is returned.  */
end_comment

begin_class
DECL|class|TryManyReservationAgents
specifier|public
class|class
name|TryManyReservationAgents
implements|implements
name|ReservationAgent
block|{
comment|// Planning algorithms
DECL|field|algs
specifier|private
specifier|final
name|List
argument_list|<
name|ReservationAgent
argument_list|>
name|algs
decl_stmt|;
comment|// Constructor
DECL|method|TryManyReservationAgents (List<ReservationAgent> algs)
specifier|public
name|TryManyReservationAgents
parameter_list|(
name|List
argument_list|<
name|ReservationAgent
argument_list|>
name|algs
parameter_list|)
block|{
name|this
operator|.
name|algs
operator|=
operator|new
name|LinkedList
argument_list|<
name|ReservationAgent
argument_list|>
argument_list|(
name|algs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createReservation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract)
specifier|public
name|boolean
name|createReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|)
throws|throws
name|PlanningException
block|{
comment|// Save the planning exception
name|PlanningException
name|planningException
init|=
literal|null
decl_stmt|;
comment|// Try all of the algorithms, in order
for|for
control|(
name|ReservationAgent
name|alg
range|:
name|algs
control|)
block|{
try|try
block|{
if|if
condition|(
name|alg
operator|.
name|createReservation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|,
name|contract
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
name|planningException
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// If all of the algorithms failed and one of the algorithms threw an
comment|// exception, throw the last planning exception
if|if
condition|(
name|planningException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|planningException
throw|;
block|}
comment|// If all of the algorithms failed, return false
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|updateReservation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract)
specifier|public
name|boolean
name|updateReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|)
throws|throws
name|PlanningException
block|{
comment|// Save the planning exception
name|PlanningException
name|planningException
init|=
literal|null
decl_stmt|;
comment|// Try all of the algorithms, in order
for|for
control|(
name|ReservationAgent
name|alg
range|:
name|algs
control|)
block|{
try|try
block|{
if|if
condition|(
name|alg
operator|.
name|updateReservation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|,
name|contract
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
name|planningException
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// If all of the algorithms failed and one of the algorithms threw an
comment|// exception, throw the last planning exception
if|if
condition|(
name|planningException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|planningException
throw|;
block|}
comment|// If all of the algorithms failed, return false
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation (ReservationId reservationId, String user, Plan plan)
specifier|public
name|boolean
name|deleteReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|)
throws|throws
name|PlanningException
block|{
return|return
name|plan
operator|.
name|deleteReservation
argument_list|(
name|reservationId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

