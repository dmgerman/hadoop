begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|UserGroupMappingPlacementRule
specifier|public
class|class
name|UserGroupMappingPlacementRule
extends|extends
name|PlacementRule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UserGroupMappingPlacementRule
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CURRENT_USER_MAPPING
specifier|public
specifier|static
specifier|final
name|String
name|CURRENT_USER_MAPPING
init|=
literal|"%user"
decl_stmt|;
DECL|field|PRIMARY_GROUP_MAPPING
specifier|public
specifier|static
specifier|final
name|String
name|PRIMARY_GROUP_MAPPING
init|=
literal|"%primary_group"
decl_stmt|;
DECL|field|overrideWithQueueMappings
specifier|private
name|boolean
name|overrideWithQueueMappings
init|=
literal|false
decl_stmt|;
DECL|field|mappings
specifier|private
name|List
argument_list|<
name|QueueMapping
argument_list|>
name|mappings
init|=
literal|null
decl_stmt|;
DECL|field|groups
specifier|private
name|Groups
name|groups
decl_stmt|;
annotation|@
name|Private
DECL|class|QueueMapping
specifier|public
specifier|static
class|class
name|QueueMapping
block|{
DECL|enum|MappingType
specifier|public
enum|enum
name|MappingType
block|{
DECL|enumConstant|USER
DECL|enumConstant|GROUP
name|USER
argument_list|(
literal|"u"
argument_list|)
block|,
name|GROUP
argument_list|(
literal|"g"
argument_list|)
block|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|MappingType (String type)
specifier|private
name|MappingType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
empty_stmt|;
DECL|field|type
name|MappingType
name|type
decl_stmt|;
DECL|field|source
name|String
name|source
decl_stmt|;
DECL|field|queue
name|String
name|queue
decl_stmt|;
DECL|method|QueueMapping (MappingType type, String source, String queue)
specifier|public
name|QueueMapping
parameter_list|(
name|MappingType
name|type
parameter_list|,
name|String
name|source
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|QueueMapping
condition|)
block|{
name|QueueMapping
name|other
init|=
operator|(
name|QueueMapping
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|other
operator|.
name|type
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|other
operator|.
name|source
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
name|other
operator|.
name|queue
operator|.
name|equals
argument_list|(
name|queue
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|method|UserGroupMappingPlacementRule (boolean overrideWithQueueMappings, List<QueueMapping> newMappings, Groups groups)
specifier|public
name|UserGroupMappingPlacementRule
parameter_list|(
name|boolean
name|overrideWithQueueMappings
parameter_list|,
name|List
argument_list|<
name|QueueMapping
argument_list|>
name|newMappings
parameter_list|,
name|Groups
name|groups
parameter_list|)
block|{
name|this
operator|.
name|mappings
operator|=
name|newMappings
expr_stmt|;
name|this
operator|.
name|overrideWithQueueMappings
operator|=
name|overrideWithQueueMappings
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
block|}
DECL|method|getMappedQueue (String user)
specifier|private
name|String
name|getMappedQueue
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|QueueMapping
name|mapping
range|:
name|mappings
control|)
block|{
if|if
condition|(
name|mapping
operator|.
name|type
operator|==
name|MappingType
operator|.
name|USER
condition|)
block|{
if|if
condition|(
name|mapping
operator|.
name|source
operator|.
name|equals
argument_list|(
name|CURRENT_USER_MAPPING
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapping
operator|.
name|queue
operator|.
name|equals
argument_list|(
name|CURRENT_USER_MAPPING
argument_list|)
condition|)
block|{
return|return
name|user
return|;
block|}
elseif|else
if|if
condition|(
name|mapping
operator|.
name|queue
operator|.
name|equals
argument_list|(
name|PRIMARY_GROUP_MAPPING
argument_list|)
condition|)
block|{
return|return
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mapping
operator|.
name|queue
return|;
block|}
block|}
if|if
condition|(
name|user
operator|.
name|equals
argument_list|(
name|mapping
operator|.
name|source
argument_list|)
condition|)
block|{
return|return
name|mapping
operator|.
name|queue
return|;
block|}
block|}
if|if
condition|(
name|mapping
operator|.
name|type
operator|==
name|MappingType
operator|.
name|GROUP
condition|)
block|{
for|for
control|(
name|String
name|userGroups
range|:
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
control|)
block|{
if|if
condition|(
name|userGroups
operator|.
name|equals
argument_list|(
name|mapping
operator|.
name|source
argument_list|)
condition|)
block|{
return|return
name|mapping
operator|.
name|queue
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueForApp (ApplicationSubmissionContext asc, String user)
specifier|public
name|String
name|getQueueForApp
parameter_list|(
name|ApplicationSubmissionContext
name|asc
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|queueName
init|=
name|asc
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|asc
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappings
operator|!=
literal|null
operator|&&
name|mappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|String
name|mappedQueue
init|=
name|getMappedQueue
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedQueue
operator|!=
literal|null
condition|)
block|{
comment|// We have a mapping, should we use it?
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
operator|||
name|overrideWithQueueMappings
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" user "
operator|+
name|user
operator|+
literal|" mapping ["
operator|+
name|queueName
operator|+
literal|"] to ["
operator|+
name|mappedQueue
operator|+
literal|"] override "
operator|+
name|overrideWithQueueMappings
argument_list|)
expr_stmt|;
return|return
name|mappedQueue
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to submit application "
operator|+
name|applicationId
operator|+
literal|" submitted by user "
operator|+
name|user
operator|+
literal|" reason: "
operator|+
name|ioex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
return|return
name|queueName
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getQueueMappings ()
specifier|public
name|List
argument_list|<
name|QueueMapping
argument_list|>
name|getQueueMappings
parameter_list|()
block|{
return|return
name|mappings
return|;
block|}
block|}
end_class

end_unit

