begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
operator|.
name|IterativePlanner
operator|.
name|StageProvider
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link StageExecutionInterval}, which sets the execution  * interval of the stage. For ANY and ALL jobs, the interval is  * [jobArrival,jobDeadline]. For ORDER jobs, the the maximal possible time  * interval is divided as follows: First, each stage is guaranteed at least its  * requested duration. Then, the stage receives a fraction of the remaining  * time. The fraction is calculated as the ratio between the weight (total  * requested resources) of the stage and the total weight of all remaining  * stages.  */
end_comment

begin_class
DECL|class|StageExecutionIntervalByDemand
specifier|public
class|class
name|StageExecutionIntervalByDemand
implements|implements
name|StageExecutionInterval
block|{
DECL|field|step
specifier|private
name|long
name|step
decl_stmt|;
annotation|@
name|Override
DECL|method|computeExecutionInterval (Plan plan, ReservationDefinition reservation, ReservationRequest currentReservationStage, boolean allocateLeft, RLESparseResourceAllocation allocations)
specifier|public
name|ReservationInterval
name|computeExecutionInterval
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|reservation
parameter_list|,
name|ReservationRequest
name|currentReservationStage
parameter_list|,
name|boolean
name|allocateLeft
parameter_list|,
name|RLESparseResourceAllocation
name|allocations
parameter_list|)
block|{
comment|// Use StageExecutionIntervalUnconstrained to get the maximal interval
name|ReservationInterval
name|maxInterval
init|=
operator|(
operator|new
name|StageExecutionIntervalUnconstrained
argument_list|()
operator|)
operator|.
name|computeExecutionInterval
argument_list|(
name|plan
argument_list|,
name|reservation
argument_list|,
name|currentReservationStage
argument_list|,
name|allocateLeft
argument_list|,
name|allocations
argument_list|)
decl_stmt|;
name|ReservationRequestInterpreter
name|jobType
init|=
name|reservation
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getInterpreter
argument_list|()
decl_stmt|;
comment|// For unconstrained jobs, such as ALL& ANY, we can use the unconstrained
comment|// version
if|if
condition|(
operator|(
name|jobType
operator|!=
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
operator|)
operator|&&
operator|(
name|jobType
operator|!=
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
operator|)
condition|)
block|{
return|return
name|maxInterval
return|;
block|}
comment|// For ORDER and ORDER_NO_GAP, take a sub-interval of maxInterval
name|step
operator|=
name|plan
operator|.
name|getStep
argument_list|()
expr_stmt|;
name|double
name|totalWeight
init|=
literal|0.0
decl_stmt|;
name|long
name|totalDuration
init|=
literal|0
decl_stmt|;
comment|// Iterate over the stages that haven't been allocated.
comment|// For allocateLeft == True, we iterate in reverse order, starting from the
comment|// last
comment|// stage, until we reach the current stage.
comment|// For allocateLeft == False, we do the opposite.
name|StageProvider
name|stageProvider
init|=
operator|new
name|StageProvider
argument_list|(
operator|!
name|allocateLeft
argument_list|,
name|reservation
argument_list|)
decl_stmt|;
while|while
condition|(
name|stageProvider
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReservationRequest
name|rr
init|=
name|stageProvider
operator|.
name|next
argument_list|()
decl_stmt|;
name|totalWeight
operator|+=
name|calcWeight
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|totalDuration
operator|+=
name|getRoundedDuration
argument_list|(
name|rr
argument_list|,
name|step
argument_list|)
expr_stmt|;
comment|// Stop once we reach current
if|if
condition|(
name|rr
operator|==
name|currentReservationStage
condition|)
block|{
break|break;
block|}
block|}
comment|// Compute the weight of the current stage as compared to remaining ones
name|double
name|ratio
init|=
name|calcWeight
argument_list|(
name|currentReservationStage
argument_list|)
operator|/
name|totalWeight
decl_stmt|;
comment|// Estimate an early start time, such that:
comment|// 1. Every stage is guaranteed to receive at least its duration
comment|// 2. The remainder of the window is divided between stages
comment|// proportionally to its workload (total memory consumption)
name|long
name|maxIntervalArrival
init|=
name|maxInterval
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|maxIntervalDeadline
init|=
name|maxInterval
operator|.
name|getEndTime
argument_list|()
decl_stmt|;
name|long
name|window
init|=
name|maxIntervalDeadline
operator|-
name|maxIntervalArrival
decl_stmt|;
name|long
name|windowRemainder
init|=
name|window
operator|-
name|totalDuration
decl_stmt|;
if|if
condition|(
name|allocateLeft
condition|)
block|{
name|long
name|latestEnd
init|=
call|(
name|long
call|)
argument_list|(
name|maxIntervalArrival
operator|+
name|getRoundedDuration
argument_list|(
name|currentReservationStage
argument_list|,
name|step
argument_list|)
operator|+
operator|(
name|windowRemainder
operator|*
name|ratio
operator|)
argument_list|)
decl_stmt|;
comment|// Realign if necessary (since we did some arithmetic)
name|latestEnd
operator|=
name|stepRoundDown
argument_list|(
name|latestEnd
argument_list|,
name|step
argument_list|)
expr_stmt|;
comment|// Return new interval
return|return
operator|new
name|ReservationInterval
argument_list|(
name|maxIntervalArrival
argument_list|,
name|latestEnd
argument_list|)
return|;
block|}
else|else
block|{
name|long
name|earlyStart
init|=
call|(
name|long
call|)
argument_list|(
name|maxIntervalDeadline
operator|-
name|getRoundedDuration
argument_list|(
name|currentReservationStage
argument_list|,
name|step
argument_list|)
operator|-
operator|(
name|windowRemainder
operator|*
name|ratio
operator|)
argument_list|)
decl_stmt|;
comment|// Realign if necessary (since we did some arithmetic)
name|earlyStart
operator|=
name|stepRoundUp
argument_list|(
name|earlyStart
argument_list|,
name|step
argument_list|)
expr_stmt|;
comment|// Return new interval
return|return
operator|new
name|ReservationInterval
argument_list|(
name|earlyStart
argument_list|,
name|maxIntervalDeadline
argument_list|)
return|;
block|}
block|}
comment|// Weight = total memory consumption of stage
DECL|method|calcWeight (ReservationRequest stage)
specifier|protected
name|double
name|calcWeight
parameter_list|(
name|ReservationRequest
name|stage
parameter_list|)
block|{
return|return
operator|(
name|stage
operator|.
name|getDuration
argument_list|()
operator|*
name|stage
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|)
operator|*
operator|(
name|stage
operator|.
name|getNumContainers
argument_list|()
operator|)
return|;
block|}
DECL|method|getRoundedDuration (ReservationRequest stage, Long s)
specifier|protected
name|long
name|getRoundedDuration
parameter_list|(
name|ReservationRequest
name|stage
parameter_list|,
name|Long
name|s
parameter_list|)
block|{
return|return
name|stepRoundUp
argument_list|(
name|stage
operator|.
name|getDuration
argument_list|()
argument_list|,
name|s
argument_list|)
return|;
block|}
DECL|method|stepRoundDown (long t, long s)
specifier|protected
specifier|static
name|long
name|stepRoundDown
parameter_list|(
name|long
name|t
parameter_list|,
name|long
name|s
parameter_list|)
block|{
return|return
operator|(
name|t
operator|/
name|s
operator|)
operator|*
name|s
return|;
block|}
DECL|method|stepRoundUp (long t, long s)
specifier|protected
specifier|static
name|long
name|stepRoundUp
parameter_list|(
name|long
name|t
parameter_list|,
name|long
name|s
parameter_list|)
block|{
return|return
operator|(
operator|(
name|t
operator|+
name|s
operator|-
literal|1
operator|)
operator|/
name|s
operator|)
operator|*
name|s
return|;
block|}
block|}
end_class

end_unit

