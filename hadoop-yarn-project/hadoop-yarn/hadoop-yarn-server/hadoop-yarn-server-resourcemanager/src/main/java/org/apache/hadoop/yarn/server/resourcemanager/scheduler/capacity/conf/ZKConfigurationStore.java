begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
operator|.
name|ZKCuratorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A Zookeeper-based implementation of {@link YarnConfigurationStore}.  */
end_comment

begin_class
DECL|class|ZKConfigurationStore
specifier|public
class|class
name|ZKConfigurationStore
extends|extends
name|YarnConfigurationStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZKConfigurationStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maxLogs
specifier|private
name|long
name|maxLogs
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CURRENT_VERSION_INFO
specifier|protected
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|pendingMutation
specifier|private
name|LogMutation
name|pendingMutation
decl_stmt|;
DECL|field|znodeParentPath
specifier|private
name|String
name|znodeParentPath
decl_stmt|;
DECL|field|ZK_VERSION_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ZK_VERSION_PATH
init|=
literal|"VERSION"
decl_stmt|;
DECL|field|LOGS_PATH
specifier|private
specifier|static
specifier|final
name|String
name|LOGS_PATH
init|=
literal|"LOGS"
decl_stmt|;
DECL|field|CONF_STORE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|CONF_STORE_PATH
init|=
literal|"CONF_STORE"
decl_stmt|;
DECL|field|FENCING_PATH
specifier|private
specifier|static
specifier|final
name|String
name|FENCING_PATH
init|=
literal|"FENCING"
decl_stmt|;
DECL|field|CONF_VERSION_PATH
specifier|private
specifier|static
specifier|final
name|String
name|CONF_VERSION_PATH
init|=
literal|"CONF_VERSION"
decl_stmt|;
DECL|field|zkVersionPath
specifier|private
name|String
name|zkVersionPath
decl_stmt|;
DECL|field|logsPath
specifier|private
name|String
name|logsPath
decl_stmt|;
DECL|field|confStorePath
specifier|private
name|String
name|confStorePath
decl_stmt|;
DECL|field|fencingNodePath
specifier|private
name|String
name|fencingNodePath
decl_stmt|;
DECL|field|confVersionPath
specifier|private
name|String
name|confVersionPath
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|zkManager
specifier|protected
name|ZKCuratorManager
name|zkManager
decl_stmt|;
DECL|field|zkAcl
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|zkAcl
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (Configuration config, Configuration schedConf, RMContext rmContext)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|Configuration
name|schedConf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|maxLogs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_MAX_LOGS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS
argument_list|)
expr_stmt|;
name|this
operator|.
name|znodeParentPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_STORE_ZK_PARENT_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkManager
operator|=
name|rmContext
operator|.
name|getResourceManager
argument_list|()
operator|.
name|createAndStartZKManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkAcl
operator|=
name|ZKCuratorManager
operator|.
name|getZKAcls
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkVersionPath
operator|=
name|getNodePath
argument_list|(
name|znodeParentPath
argument_list|,
name|ZK_VERSION_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|logsPath
operator|=
name|getNodePath
argument_list|(
name|znodeParentPath
argument_list|,
name|LOGS_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|confStorePath
operator|=
name|getNodePath
argument_list|(
name|znodeParentPath
argument_list|,
name|CONF_STORE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|fencingNodePath
operator|=
name|getNodePath
argument_list|(
name|znodeParentPath
argument_list|,
name|FENCING_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|confVersionPath
operator|=
name|getNodePath
argument_list|(
name|znodeParentPath
argument_list|,
name|CONF_VERSION_PATH
argument_list|)
expr_stmt|;
name|zkManager
operator|.
name|createRootDirRecursively
argument_list|(
name|znodeParentPath
argument_list|,
name|zkAcl
argument_list|)
expr_stmt|;
name|zkManager
operator|.
name|delete
argument_list|(
name|fencingNodePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|zkManager
operator|.
name|exists
argument_list|(
name|logsPath
argument_list|)
condition|)
block|{
name|zkManager
operator|.
name|create
argument_list|(
name|logsPath
argument_list|)
expr_stmt|;
name|zkManager
operator|.
name|setData
argument_list|(
name|logsPath
argument_list|,
name|serializeObject
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|LogMutation
argument_list|>
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|zkManager
operator|.
name|exists
argument_list|(
name|confVersionPath
argument_list|)
condition|)
block|{
name|zkManager
operator|.
name|create
argument_list|(
name|confVersionPath
argument_list|)
expr_stmt|;
name|zkManager
operator|.
name|setData
argument_list|(
name|confVersionPath
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|zkManager
operator|.
name|exists
argument_list|(
name|confStorePath
argument_list|)
condition|)
block|{
name|zkManager
operator|.
name|create
argument_list|(
name|confStorePath
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapSchedConf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|schedConf
control|)
block|{
name|mapSchedConf
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|zkManager
operator|.
name|setData
argument_list|(
name|confStorePath
argument_list|,
name|serializeObject
argument_list|(
name|mapSchedConf
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|long
name|configVersion
init|=
name|getConfigVersion
argument_list|()
operator|+
literal|1L
decl_stmt|;
name|zkManager
operator|.
name|setData
argument_list|(
name|confVersionPath
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|configVersion
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLogs ()
specifier|protected
name|LinkedList
argument_list|<
name|LogMutation
argument_list|>
name|getLogs
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|LinkedList
argument_list|<
name|LogMutation
argument_list|>
operator|)
name|deserializeObject
argument_list|(
name|zkManager
operator|.
name|getData
argument_list|(
name|logsPath
argument_list|)
argument_list|)
return|;
block|}
comment|// TODO: following version-related code is taken from ZKRMStateStore
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
annotation|@
name|Override
DECL|method|getConfStoreVersion ()
specifier|public
name|Version
name|getConfStoreVersion
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zkManager
operator|.
name|exists
argument_list|(
name|zkVersionPath
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|zkManager
operator|.
name|getData
argument_list|(
name|zkVersionPath
argument_list|)
decl_stmt|;
return|return
operator|new
name|VersionPBImpl
argument_list|(
name|YarnServerCommonProtos
operator|.
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|format ()
specifier|public
name|void
name|format
parameter_list|()
throws|throws
name|Exception
block|{
name|zkManager
operator|.
name|delete
argument_list|(
name|confStorePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeVersion ()
specifier|public
specifier|synchronized
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|CURRENT_VERSION_INFO
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkManager
operator|.
name|exists
argument_list|(
name|zkVersionPath
argument_list|)
condition|)
block|{
name|zkManager
operator|.
name|safeSetData
argument_list|(
name|zkVersionPath
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|,
name|zkAcl
argument_list|,
name|fencingNodePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkManager
operator|.
name|safeCreate
argument_list|(
name|zkVersionPath
argument_list|,
name|data
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|zkAcl
argument_list|,
name|fencingNodePath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|logMutation (LogMutation logMutation)
specifier|public
name|void
name|logMutation
parameter_list|(
name|LogMutation
name|logMutation
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|storedLogs
init|=
name|zkManager
operator|.
name|getData
argument_list|(
name|logsPath
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|LogMutation
argument_list|>
name|logs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedLogs
operator|!=
literal|null
condition|)
block|{
name|logs
operator|=
operator|(
name|LinkedList
argument_list|<
name|LogMutation
argument_list|>
operator|)
name|deserializeObject
argument_list|(
name|storedLogs
argument_list|)
expr_stmt|;
block|}
name|logs
operator|.
name|add
argument_list|(
name|logMutation
argument_list|)
expr_stmt|;
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|>
name|maxLogs
condition|)
block|{
name|logs
operator|.
name|remove
argument_list|(
name|logs
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|zkManager
operator|.
name|safeSetData
argument_list|(
name|logsPath
argument_list|,
name|serializeObject
argument_list|(
name|logs
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|zkAcl
argument_list|,
name|fencingNodePath
argument_list|)
expr_stmt|;
name|pendingMutation
operator|=
name|logMutation
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|confirmMutation (boolean isValid)
specifier|public
name|void
name|confirmMutation
parameter_list|(
name|boolean
name|isValid
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isValid
condition|)
block|{
name|Configuration
name|storedConfigs
init|=
name|retrieve
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapConf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|storedConf
range|:
name|storedConfigs
control|)
block|{
name|mapConf
operator|.
name|put
argument_list|(
name|storedConf
operator|.
name|getKey
argument_list|()
argument_list|,
name|storedConf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confChange
range|:
name|pendingMutation
operator|.
name|getUpdates
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|confChange
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|confChange
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapConf
operator|.
name|remove
argument_list|(
name|confChange
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapConf
operator|.
name|put
argument_list|(
name|confChange
operator|.
name|getKey
argument_list|()
argument_list|,
name|confChange
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|zkManager
operator|.
name|safeSetData
argument_list|(
name|confStorePath
argument_list|,
name|serializeObject
argument_list|(
name|mapConf
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|zkAcl
argument_list|,
name|fencingNodePath
argument_list|)
expr_stmt|;
name|long
name|configVersion
init|=
name|getConfigVersion
argument_list|()
operator|+
literal|1L
decl_stmt|;
name|zkManager
operator|.
name|setData
argument_list|(
name|confVersionPath
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|configVersion
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|pendingMutation
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|retrieve ()
specifier|public
specifier|synchronized
name|Configuration
name|retrieve
parameter_list|()
block|{
name|byte
index|[]
name|serializedSchedConf
decl_stmt|;
try|try
block|{
name|serializedSchedConf
operator|=
name|zkManager
operator|.
name|getData
argument_list|(
name|confStorePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to retrieve configuration from zookeeper store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|deserializeObject
argument_list|(
name|serializedSchedConf
argument_list|)
decl_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|c
operator|.
name|set
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while deserializing scheduler configuration "
operator|+
literal|"from store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getConfigVersion ()
specifier|public
name|long
name|getConfigVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|zkManager
operator|.
name|getStringData
argument_list|(
name|confVersionPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getConfirmedConfHistory (long fromId)
specifier|public
name|List
argument_list|<
name|LogMutation
argument_list|>
name|getConfirmedConfHistory
parameter_list|(
name|long
name|fromId
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// unimplemented
block|}
DECL|method|getNodePath (String root, String nodeName)
specifier|private
specifier|static
name|String
name|getNodePath
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|ZKCuratorManager
operator|.
name|getNodePath
argument_list|(
name|root
argument_list|,
name|nodeName
argument_list|)
return|;
block|}
DECL|method|serializeObject (Object o)
specifier|private
specifier|static
name|byte
index|[]
name|serializeObject
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;
name|ObjectOutputStream
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
init|;
init|)
block|{
name|oos
operator|.
name|writeObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
DECL|method|deserializeObject (byte[] bytes)
specifier|private
specifier|static
name|Object
name|deserializeObject
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
init|;
name|ObjectInputStream
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|bais
argument_list|)
init|;
init|)
block|{
return|return
name|ois
operator|.
name|readObject
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

