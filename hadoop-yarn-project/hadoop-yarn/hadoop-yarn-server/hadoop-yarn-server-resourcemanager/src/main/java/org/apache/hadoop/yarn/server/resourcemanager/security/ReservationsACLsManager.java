begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The {@link ReservationsACLsManager} is used to check a specified user's  * permissons to perform a reservation operation on the  * {@link CapacityScheduler} and the {@link FairScheduler}.  * {@link ReservationACL}s are used to specify reservation operations.  */
end_comment

begin_class
DECL|class|ReservationsACLsManager
specifier|public
class|class
name|ReservationsACLsManager
block|{
DECL|field|isReservationACLsEnable
specifier|private
name|boolean
name|isReservationACLsEnable
decl_stmt|;
DECL|field|reservationAcls
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ReservationACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
name|reservationAcls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ReservationsACLsManager (ResourceScheduler scheduler, Configuration conf)
specifier|public
name|ReservationsACLsManager
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|isReservationACLsEnable
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_RESERVATION_ACL_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_RESERVATION_ACL_ENABLE
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ACL_ENABLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduler
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|planQueue
range|:
name|scheduler
operator|.
name|getPlanQueues
argument_list|()
control|)
block|{
name|CSQueue
name|queue
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getQueue
argument_list|(
name|planQueue
argument_list|)
decl_stmt|;
name|reservationAcls
operator|.
name|put
argument_list|(
name|planQueue
argument_list|,
name|csConf
operator|.
name|getReservationAcls
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|scheduler
operator|instanceof
name|FairScheduler
condition|)
block|{
name|AllocationConfiguration
name|aConf
init|=
operator|(
operator|(
name|FairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|planQueue
range|:
name|scheduler
operator|.
name|getPlanQueues
argument_list|()
control|)
block|{
name|reservationAcls
operator|.
name|put
argument_list|(
name|planQueue
argument_list|,
name|aConf
operator|.
name|getReservationAcls
argument_list|(
name|planQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkAccess (UserGroupInformation callerUGI, ReservationACL acl, String queueName)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|ReservationACL
name|acl
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isReservationACLsEnable
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|this
operator|.
name|reservationAcls
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|ReservationACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
name|this
operator|.
name|reservationAcls
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|acls
operator|!=
literal|null
operator|&&
name|acls
operator|.
name|containsKey
argument_list|(
name|acl
argument_list|)
condition|)
block|{
return|return
name|acls
operator|.
name|get
argument_list|(
name|acl
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
return|;
block|}
else|else
block|{
comment|// Give access if acl is undefined for queue.
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

