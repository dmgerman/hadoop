begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_comment
comment|/**  * Log aggregation logic used by RMApp.  *  */
end_comment

begin_class
DECL|class|RMAppLogAggregation
specifier|public
class|class
name|RMAppLogAggregation
block|{
DECL|field|logAggregationEnabled
specifier|private
specifier|final
name|boolean
name|logAggregationEnabled
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|logAggregationStartTime
specifier|private
name|long
name|logAggregationStartTime
init|=
literal|0
decl_stmt|;
DECL|field|logAggregationStatusTimeout
specifier|private
specifier|final
name|long
name|logAggregationStatusTimeout
decl_stmt|;
DECL|field|logAggregationStatus
specifier|private
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|logAggregationStatus
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|logAggregationStatusForAppReport
specifier|private
specifier|volatile
name|LogAggregationStatus
name|logAggregationStatusForAppReport
decl_stmt|;
DECL|field|logAggregationSucceed
specifier|private
name|int
name|logAggregationSucceed
init|=
literal|0
decl_stmt|;
DECL|field|logAggregationFailed
specifier|private
name|int
name|logAggregationFailed
init|=
literal|0
decl_stmt|;
DECL|field|logAggregationDiagnosticsForNMs
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|logAggregationDiagnosticsForNMs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|logAggregationFailureMessagesForNMs
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|logAggregationFailureMessagesForNMs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|maxLogAggregationDiagnosticsInMemory
specifier|private
specifier|final
name|int
name|maxLogAggregationDiagnosticsInMemory
decl_stmt|;
DECL|method|RMAppLogAggregation (Configuration conf, ReadLock readLock, WriteLock writeLock)
name|RMAppLogAggregation
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ReadLock
name|readLock
parameter_list|,
name|WriteLock
name|writeLock
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|=
name|readLock
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|writeLock
expr_stmt|;
name|this
operator|.
name|logAggregationStatusTimeout
operator|=
name|getLogAggregationStatusTimeout
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationEnabled
operator|=
name|getEnabledFlagFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|this
operator|.
name|logAggregationEnabled
condition|?
name|LogAggregationStatus
operator|.
name|NOT_START
else|:
name|LogAggregationStatus
operator|.
name|DISABLED
expr_stmt|;
name|this
operator|.
name|maxLogAggregationDiagnosticsInMemory
operator|=
name|getMaxLogAggregationDiagnostics
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogAggregationStatusTimeout (Configuration conf)
specifier|private
name|long
name|getLogAggregationStatusTimeout
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|statusTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_STATUS_TIME_OUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusTimeout
operator|<=
literal|0
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS
return|;
block|}
else|else
block|{
return|return
name|statusTimeout
return|;
block|}
block|}
DECL|method|getEnabledFlagFromConf (Configuration conf)
specifier|private
name|boolean
name|getEnabledFlagFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
return|;
block|}
DECL|method|getMaxLogAggregationDiagnostics (Configuration conf)
specifier|private
name|int
name|getMaxLogAggregationDiagnostics
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
argument_list|)
return|;
block|}
DECL|method|getLogAggregationReportsForApp ( RMAppImpl rmApp)
name|Map
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|getLogAggregationReportsForApp
parameter_list|(
name|RMAppImpl
name|rmApp
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isLogAggregationFinished
argument_list|()
operator|&&
name|RMAppImpl
operator|.
name|isAppInFinalState
argument_list|(
name|rmApp
argument_list|)
operator|&&
name|rmApp
operator|.
name|getSystemClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|this
operator|.
name|logAggregationStartTime
operator|+
name|this
operator|.
name|logAggregationStatusTimeout
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|output
range|:
name|logAggregationStatus
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
operator|&&
operator|!
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
operator|&&
operator|!
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
condition|)
block|{
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|setLogAggregationStatus
argument_list|(
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|logAggregationStatus
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|aggregateLogReport (NodeId nodeId, LogAggregationReport report, RMAppImpl rmApp)
name|void
name|aggregateLogReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|LogAggregationReport
name|report
parameter_list|,
name|RMAppImpl
name|rmApp
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|logAggregationEnabled
operator|&&
operator|!
name|isLogAggregationFinished
argument_list|()
condition|)
block|{
name|LogAggregationReport
name|curReport
init|=
name|this
operator|.
name|logAggregationStatus
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|boolean
name|stateChangedToFinal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|curReport
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|logAggregationStatus
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLogAggregationFinishedForNM
argument_list|(
name|report
argument_list|)
condition|)
block|{
name|stateChangedToFinal
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isLogAggregationFinishedForNM
argument_list|(
name|report
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isLogAggregationFinishedForNM
argument_list|(
name|curReport
argument_list|)
condition|)
block|{
name|stateChangedToFinal
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|!=
name|LogAggregationStatus
operator|.
name|RUNNING
operator|||
name|curReport
operator|.
name|getLogAggregationStatus
argument_list|()
operator|!=
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
condition|)
block|{
if|if
condition|(
name|curReport
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|TIME_OUT
operator|&&
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING
condition|)
block|{
comment|// If the log aggregation status got from latest NM heartbeat
comment|// is RUNNING, and current log aggregation status is TIME_OUT,
comment|// based on whether there are any failure messages for this NM,
comment|// we will reset the log aggregation status as RUNNING or
comment|// RUNNING_WITH_FAILURE
if|if
condition|(
name|isThereFailureMessageForNM
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|report
operator|.
name|setLogAggregationStatus
argument_list|(
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
name|curReport
operator|.
name|setLogAggregationStatus
argument_list|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|updateLogAggregationDiagnosticMessages
argument_list|(
name|nodeId
argument_list|,
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|RMAppImpl
operator|.
name|isAppInFinalState
argument_list|(
name|rmApp
argument_list|)
operator|&&
name|stateChangedToFinal
condition|)
block|{
name|updateLogAggregationStatus
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLogAggregationStatusForAppReport ( RMAppImpl rmApp)
specifier|public
name|LogAggregationStatus
name|getLogAggregationStatusForAppReport
parameter_list|(
name|RMAppImpl
name|rmApp
parameter_list|)
block|{
name|boolean
name|appInFinalState
init|=
name|RMAppImpl
operator|.
name|isAppInFinalState
argument_list|(
name|rmApp
argument_list|)
decl_stmt|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|logAggregationEnabled
condition|)
block|{
return|return
name|LogAggregationStatus
operator|.
name|DISABLED
return|;
block|}
if|if
condition|(
name|isLogAggregationFinished
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|logAggregationStatusForAppReport
return|;
block|}
name|Map
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|reports
init|=
name|getLogAggregationReportsForApp
argument_list|(
name|rmApp
argument_list|)
decl_stmt|;
if|if
condition|(
name|reports
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|logAggregationStatusForAppReport
return|;
block|}
name|int
name|logNotStartCount
init|=
literal|0
decl_stmt|;
name|int
name|logCompletedCount
init|=
literal|0
decl_stmt|;
name|int
name|logTimeOutCount
init|=
literal|0
decl_stmt|;
name|int
name|logFailedCount
init|=
literal|0
decl_stmt|;
name|int
name|logRunningWithFailure
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|report
range|:
name|reports
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|report
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
condition|)
block|{
case|case
name|NOT_START
case|:
name|logNotStartCount
operator|++
expr_stmt|;
break|break;
case|case
name|RUNNING_WITH_FAILURE
case|:
name|logRunningWithFailure
operator|++
expr_stmt|;
break|break;
case|case
name|SUCCEEDED
case|:
name|logCompletedCount
operator|++
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|logFailedCount
operator|++
expr_stmt|;
name|logCompletedCount
operator|++
expr_stmt|;
break|break;
case|case
name|TIME_OUT
case|:
name|logTimeOutCount
operator|++
expr_stmt|;
name|logCompletedCount
operator|++
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|logNotStartCount
operator|==
name|reports
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|LogAggregationStatus
operator|.
name|NOT_START
return|;
block|}
elseif|else
if|if
condition|(
name|logCompletedCount
operator|==
name|reports
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// We should satisfy two condition in order to return
comment|// SUCCEEDED or FAILED.
comment|// 1) make sure the application is in final state
comment|// 2) logs status from all NMs are SUCCEEDED/FAILED/TIMEOUT
comment|// The SUCCEEDED/FAILED status is the final status which means
comment|// the log aggregation is finished. And the log aggregation status will
comment|// not be updated anymore.
if|if
condition|(
name|logFailedCount
operator|>
literal|0
operator|&&
name|appInFinalState
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|FAILED
expr_stmt|;
return|return
name|LogAggregationStatus
operator|.
name|FAILED
return|;
block|}
elseif|else
if|if
condition|(
name|logTimeOutCount
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|TIME_OUT
expr_stmt|;
return|return
name|LogAggregationStatus
operator|.
name|TIME_OUT
return|;
block|}
if|if
condition|(
name|appInFinalState
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|SUCCEEDED
expr_stmt|;
return|return
name|LogAggregationStatus
operator|.
name|SUCCEEDED
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|logRunningWithFailure
operator|>
literal|0
condition|)
block|{
return|return
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
return|;
block|}
return|return
name|LogAggregationStatus
operator|.
name|RUNNING
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isLogAggregationFinished ()
specifier|private
name|boolean
name|isLogAggregationFinished
parameter_list|()
block|{
return|return
name|this
operator|.
name|logAggregationStatusForAppReport
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
operator|||
name|this
operator|.
name|logAggregationStatusForAppReport
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
operator|||
name|this
operator|.
name|logAggregationStatusForAppReport
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
return|;
block|}
DECL|method|isLogAggregationFinishedForNM (LogAggregationReport report)
specifier|private
name|boolean
name|isLogAggregationFinishedForNM
parameter_list|(
name|LogAggregationReport
name|report
parameter_list|)
block|{
return|return
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|SUCCEEDED
operator|||
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|FAILED
return|;
block|}
DECL|method|updateLogAggregationDiagnosticMessages (NodeId nodeId, LogAggregationReport report)
specifier|private
name|void
name|updateLogAggregationDiagnosticMessages
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|LogAggregationReport
name|report
parameter_list|)
block|{
if|if
condition|(
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|diagnostics
init|=
name|logAggregationDiagnosticsForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|diagnostics
operator|==
literal|null
condition|)
block|{
name|diagnostics
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|logAggregationDiagnosticsForNMs
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|diagnostics
operator|.
name|size
argument_list|()
operator|==
name|maxLogAggregationDiagnosticsInMemory
condition|)
block|{
name|diagnostics
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|diagnostics
operator|.
name|add
argument_list|(
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationStatus
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setDiagnosticMessage
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|diagnostics
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failureMessages
init|=
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|failureMessages
operator|==
literal|null
condition|)
block|{
name|failureMessages
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|logAggregationFailureMessagesForNMs
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|failureMessages
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|failureMessages
operator|.
name|size
argument_list|()
operator|==
name|maxLogAggregationDiagnosticsInMemory
condition|)
block|{
name|failureMessages
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|failureMessages
operator|.
name|add
argument_list|(
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateLogAggregationStatus (NodeId nodeId)
specifier|private
name|void
name|updateLogAggregationStatus
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|LogAggregationStatus
name|status
init|=
name|this
operator|.
name|logAggregationStatus
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|getLogAggregationStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
condition|)
block|{
name|this
operator|.
name|logAggregationSucceed
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
condition|)
block|{
name|this
operator|.
name|logAggregationFailed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|logAggregationSucceed
operator|==
name|this
operator|.
name|logAggregationStatus
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|SUCCEEDED
expr_stmt|;
comment|// Since the log aggregation status for this application for all NMs
comment|// is SUCCEEDED, it means all logs are aggregated successfully.
comment|// We could remove all the cached log aggregation reports
name|this
operator|.
name|logAggregationStatus
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationDiagnosticsForNMs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationFailureMessagesForNMs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|logAggregationSucceed
operator|+
name|this
operator|.
name|logAggregationFailed
operator|==
name|this
operator|.
name|logAggregationStatus
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|FAILED
expr_stmt|;
comment|// We have collected the log aggregation status for all NMs.
comment|// The log aggregation status is FAILED which means the log
comment|// aggregation fails in some NMs. We are only interested in the
comment|// nodes where the log aggregation is failed. So we could remove
comment|// the log aggregation details for those succeeded NMs
name|this
operator|.
name|logAggregationStatus
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
comment|// the log aggregation has finished/failed.
comment|// and the status will not be updated anymore.
name|this
operator|.
name|logAggregationDiagnosticsForNMs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLogAggregationFailureMessagesForNM (NodeId nodeId)
name|String
name|getLogAggregationFailureMessagesForNM
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failureMessages
init|=
name|this
operator|.
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|failureMessages
operator|==
literal|null
operator|||
name|failureMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|StringUtils
operator|.
name|EMPTY
return|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|failureMessages
argument_list|,
literal|"\n"
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|recordLogAggregationStartTime (long time)
name|void
name|recordLogAggregationStartTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|logAggregationStartTime
operator|=
name|time
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|logAggregationEnabled
return|;
block|}
DECL|method|hasReportForNodeManager (NodeId nodeId)
specifier|private
name|boolean
name|hasReportForNodeManager
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|logAggregationStatus
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|addReportForNodeManager (NodeId nodeId, LogAggregationReport report)
specifier|private
name|void
name|addReportForNodeManager
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|LogAggregationReport
name|report
parameter_list|)
block|{
name|logAggregationStatus
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|isLogAggregationFinished
argument_list|()
return|;
block|}
DECL|method|isThereFailureMessageForNM (NodeId nodeId)
specifier|private
name|boolean
name|isThereFailureMessageForNM
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getLogAggregationStartTime ()
name|long
name|getLogAggregationStartTime
parameter_list|()
block|{
return|return
name|logAggregationStartTime
return|;
block|}
DECL|method|addReportIfNecessary (NodeId nodeId, ApplicationId applicationId)
name|void
name|addReportIfNecessary
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasReportForNodeManager
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|LogAggregationStatus
name|status
init|=
name|isEnabled
argument_list|()
condition|?
name|LogAggregationStatus
operator|.
name|NOT_START
else|:
name|LogAggregationStatus
operator|.
name|DISABLED
decl_stmt|;
name|addReportForNodeManager
argument_list|(
name|nodeId
argument_list|,
name|LogAggregationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|status
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

