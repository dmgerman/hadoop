begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Represents an application attempt from the viewpoint of the Fair Scheduler.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FSAppAttempt
specifier|public
class|class
name|FSAppAttempt
extends|extends
name|SchedulerApplicationAttempt
implements|implements
name|Schedulable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RESOURCE_CALCULATOR
specifier|private
specifier|static
specifier|final
name|DefaultResourceCalculator
name|RESOURCE_CALCULATOR
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|priority
specifier|private
name|Priority
name|priority
decl_stmt|;
DECL|field|resourceWeights
specifier|private
name|ResourceWeights
name|resourceWeights
decl_stmt|;
DECL|field|demand
specifier|private
name|Resource
name|demand
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|fairShare
specifier|private
name|Resource
name|fairShare
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|preemptedResources
specifier|private
name|Resource
name|preemptedResources
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|comparator
specifier|private
name|RMContainerComparator
name|comparator
init|=
operator|new
name|RMContainerComparator
argument_list|()
decl_stmt|;
DECL|field|preemptionMap
specifier|private
specifier|final
name|Map
argument_list|<
name|RMContainer
argument_list|,
name|Long
argument_list|>
name|preemptionMap
init|=
operator|new
name|HashMap
argument_list|<
name|RMContainer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Used to record node reservation by an app.
comment|// Key = RackName, Value = Set of Nodes reserved by app on rack
DECL|field|reservations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|reservations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Delay scheduling: We often want to prioritize scheduling of node-local    * containers over rack-local or off-switch containers. To achieve this    * we first only allow node-local assignments for a given priority level,    * then relax the locality threshold once we've had a long enough period    * without successfully scheduling. We measure both the number of "missed"    * scheduling opportunities since the last container was scheduled    * at the current allowed level and the time since the last container    * was scheduled. Currently we use only the former.    */
DECL|field|allowedLocalityLevel
specifier|private
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|NodeType
argument_list|>
name|allowedLocalityLevel
init|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FSAppAttempt (FairScheduler scheduler, ApplicationAttemptId applicationAttemptId, String user, FSLeafQueue queue, ActiveUsersManager activeUsersManager, RMContext rmContext)
specifier|public
name|FSAppAttempt
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|FSLeafQueue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|activeUsersManager
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceWeights
operator|=
operator|new
name|ResourceWeights
argument_list|()
expr_stmt|;
block|}
DECL|method|getResourceWeights ()
specifier|public
name|ResourceWeights
name|getResourceWeights
parameter_list|()
block|{
return|return
name|resourceWeights
return|;
block|}
comment|/**    * Get metrics reference from containing queue.    */
DECL|method|getMetrics ()
specifier|public
name|QueueMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getMetrics
argument_list|()
return|;
block|}
DECL|method|containerCompleted (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|synchronized
specifier|public
name|void
name|containerCompleted
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Remove from the list of newly allocated containers if found
name|newlyAllocatedContainers
operator|.
name|remove
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed container: "
operator|+
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" in state: "
operator|+
name|rmContainer
operator|.
name|getState
argument_list|()
operator|+
literal|" event:"
operator|+
name|event
argument_list|)
expr_stmt|;
comment|// Remove from the list of containers
name|liveContainers
operator|.
name|remove
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// Update usage metrics
name|Resource
name|containerResource
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|releaseResources
argument_list|(
name|getUser
argument_list|()
argument_list|,
literal|1
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|decUsed
argument_list|(
name|containerResource
argument_list|)
expr_stmt|;
comment|// remove from preemption map if it is completed
name|preemptionMap
operator|.
name|remove
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Clear resource utilization metrics cache.
name|lastMemoryAggregateAllocationUpdateTime
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|unreserveInternal ( Priority priority, FSSchedulerNode node)
specifier|private
specifier|synchronized
name|void
name|unreserveInternal
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|RMContainer
name|reservedContainer
init|=
name|reservedContainers
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|reservedContainers
operator|.
name|remove
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
comment|// Reset the re-reservation count
name|resetReReservations
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|decReserved
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" unreserved "
operator|+
literal|" on node "
operator|+
name|node
operator|+
literal|", currently has "
operator|+
name|reservedContainers
operator|.
name|size
argument_list|()
operator|+
literal|" at priority "
operator|+
name|priority
operator|+
literal|"; currentReservation "
operator|+
name|this
operator|.
name|attemptResourceUsage
operator|.
name|getReserved
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Headroom depends on resources in the cluster, current usage of the    * queue, queue's fair-share and queue's max-resources.    */
annotation|@
name|Override
DECL|method|getHeadroom ()
specifier|public
name|Resource
name|getHeadroom
parameter_list|()
block|{
specifier|final
name|FSQueue
name|queue
init|=
operator|(
name|FSQueue
operator|)
name|this
operator|.
name|queue
decl_stmt|;
name|SchedulingPolicy
name|policy
init|=
name|queue
operator|.
name|getPolicy
argument_list|()
decl_stmt|;
name|Resource
name|queueFairShare
init|=
name|queue
operator|.
name|getFairShare
argument_list|()
decl_stmt|;
name|Resource
name|queueUsage
init|=
name|queue
operator|.
name|getResourceUsage
argument_list|()
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|this
operator|.
name|scheduler
operator|.
name|getClusterResource
argument_list|()
decl_stmt|;
name|Resource
name|clusterUsage
init|=
name|this
operator|.
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedResources
argument_list|()
decl_stmt|;
name|Resource
name|clusterAvailableResources
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|clusterResource
argument_list|,
name|clusterUsage
argument_list|)
decl_stmt|;
name|Resource
name|queueMaxAvailableResources
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|queue
operator|.
name|getMaxShare
argument_list|()
argument_list|,
name|queueUsage
argument_list|)
decl_stmt|;
name|Resource
name|maxAvailableResource
init|=
name|Resources
operator|.
name|componentwiseMin
argument_list|(
name|clusterAvailableResources
argument_list|,
name|queueMaxAvailableResources
argument_list|)
decl_stmt|;
name|Resource
name|headroom
init|=
name|policy
operator|.
name|getHeadroom
argument_list|(
name|queueFairShare
argument_list|,
name|queueUsage
argument_list|,
name|maxAvailableResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Headroom calculation for "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
literal|"Min("
operator|+
literal|"(queueFairShare="
operator|+
name|queueFairShare
operator|+
literal|" - queueUsage="
operator|+
name|queueUsage
operator|+
literal|"),"
operator|+
literal|" maxAvailableResource="
operator|+
name|maxAvailableResource
operator|+
literal|"Headroom="
operator|+
name|headroom
argument_list|)
expr_stmt|;
block|}
return|return
name|headroom
return|;
block|}
DECL|method|getLocalityWaitFactor ( Priority priority, int clusterNodes)
specifier|public
specifier|synchronized
name|float
name|getLocalityWaitFactor
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|clusterNodes
parameter_list|)
block|{
comment|// Estimate: Required unique resources (i.e. hosts + racks)
name|int
name|requiredResources
init|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// waitFactor can't be more than '1'
comment|// i.e. no point skipping more than clustersize opportunities
return|return
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|float
operator|)
name|requiredResources
operator|/
name|clusterNodes
operator|)
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
comment|/**    * Return the level at which we are allowed to schedule containers, given the    * current size of the cluster and thresholds indicating how many nodes to    * fail at (as a fraction of cluster size) before relaxing scheduling    * constraints.    */
DECL|method|getAllowedLocalityLevel (Priority priority, int numNodes, double nodeLocalityThreshold, double rackLocalityThreshold)
specifier|public
specifier|synchronized
name|NodeType
name|getAllowedLocalityLevel
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|double
name|nodeLocalityThreshold
parameter_list|,
name|double
name|rackLocalityThreshold
parameter_list|)
block|{
comment|// upper limit on threshold
if|if
condition|(
name|nodeLocalityThreshold
operator|>
literal|1.0
condition|)
block|{
name|nodeLocalityThreshold
operator|=
literal|1.0
expr_stmt|;
block|}
if|if
condition|(
name|rackLocalityThreshold
operator|>
literal|1.0
condition|)
block|{
name|rackLocalityThreshold
operator|=
literal|1.0
expr_stmt|;
block|}
comment|// If delay scheduling is not being used, can schedule anywhere
if|if
condition|(
name|nodeLocalityThreshold
operator|<
literal|0.0
operator|||
name|rackLocalityThreshold
operator|<
literal|0.0
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// Default level is NODE_LOCAL
if|if
condition|(
operator|!
name|allowedLocalityLevel
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
return|return
name|NodeType
operator|.
name|NODE_LOCAL
return|;
block|}
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
comment|// If level is already most liberal, we're done
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
condition|)
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
name|double
name|threshold
init|=
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|?
name|nodeLocalityThreshold
else|:
name|rackLocalityThreshold
decl_stmt|;
comment|// Relax locality constraints once we've surpassed threshold.
if|if
condition|(
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
operator|>
operator|(
name|numNodes
operator|*
name|threshold
operator|)
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
comment|/**    * Return the level at which we are allowed to schedule containers.    * Given the thresholds indicating how much time passed before relaxing    * scheduling constraints.    */
DECL|method|getAllowedLocalityLevelByTime (Priority priority, long nodeLocalityDelayMs, long rackLocalityDelayMs, long currentTimeMs)
specifier|public
specifier|synchronized
name|NodeType
name|getAllowedLocalityLevelByTime
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|long
name|nodeLocalityDelayMs
parameter_list|,
name|long
name|rackLocalityDelayMs
parameter_list|,
name|long
name|currentTimeMs
parameter_list|)
block|{
comment|// if not being used, can schedule anywhere
if|if
condition|(
name|nodeLocalityDelayMs
operator|<
literal|0
operator|||
name|rackLocalityDelayMs
operator|<
literal|0
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// default level is NODE_LOCAL
if|if
condition|(
operator|!
name|allowedLocalityLevel
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
return|return
name|NodeType
operator|.
name|NODE_LOCAL
return|;
block|}
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
comment|// if level is already most liberal, we're done
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// check waiting time
name|long
name|waitTime
init|=
name|currentTimeMs
decl_stmt|;
if|if
condition|(
name|lastScheduledContainer
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|waitTime
operator|-=
name|lastScheduledContainer
operator|.
name|get
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|waitTime
operator|-=
name|getStartTime
argument_list|()
expr_stmt|;
block|}
name|long
name|thresholdTime
init|=
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|?
name|nodeLocalityDelayMs
else|:
name|rackLocalityDelayMs
decl_stmt|;
if|if
condition|(
name|waitTime
operator|>
name|thresholdTime
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|,
name|currentTimeMs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|,
name|currentTimeMs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|allocate (NodeType type, FSSchedulerNode node, Priority priority, ResourceRequest request, Container container)
specifier|synchronized
specifier|public
name|RMContainer
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Update allowed locality level
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowed
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|this
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Required sanity check - AM can call 'allocate' to update resource
comment|// request without locking the scheduler, hence we need to check
if|if
condition|(
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Create RMContainer
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|appSchedulingInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Add it to allContainers list.
name|newlyAllocatedContainers
operator|.
name|add
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|liveContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Update consumption and track allocations
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequestList
init|=
name|appSchedulingInfo
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update resource requests related to "request" and store in RMContainer
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setResourceRequests
argument_list|(
name|resourceRequestList
argument_list|)
expr_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|RMContainerEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationAttemptId="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" container="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" host="
operator|+
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|ALLOC_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rmContainer
return|;
block|}
comment|/**    * Should be called when the scheduler assigns a container at a higher    * degree of locality than the current threshold. Reset the allowed locality    * level to a higher degree of locality.    */
DECL|method|resetAllowedLocalityLevel (Priority priority, NodeType level)
specifier|public
specifier|synchronized
name|void
name|resetAllowedLocalityLevel
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|NodeType
name|level
parameter_list|)
block|{
name|NodeType
name|old
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Raising locality level from "
operator|+
name|old
operator|+
literal|" to "
operator|+
name|level
operator|+
literal|" at "
operator|+
literal|" priority "
operator|+
name|priority
argument_list|)
expr_stmt|;
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
comment|// related methods
DECL|method|addPreemption (RMContainer container, long time)
specifier|public
name|void
name|addPreemption
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|long
name|time
parameter_list|)
block|{
assert|assert
name|preemptionMap
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|==
literal|null
assert|;
name|preemptionMap
operator|.
name|put
argument_list|(
name|container
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|preemptedResources
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerPreemptionTime (RMContainer container)
specifier|public
name|Long
name|getContainerPreemptionTime
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{
return|return
name|preemptionMap
operator|.
name|get
argument_list|(
name|container
argument_list|)
return|;
block|}
DECL|method|getPreemptionContainers ()
specifier|public
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|getPreemptionContainers
parameter_list|()
block|{
return|return
name|preemptionMap
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueue ()
specifier|public
name|FSLeafQueue
name|getQueue
parameter_list|()
block|{
return|return
operator|(
name|FSLeafQueue
operator|)
name|super
operator|.
name|getQueue
argument_list|()
return|;
block|}
DECL|method|getPreemptedResources ()
specifier|public
name|Resource
name|getPreemptedResources
parameter_list|()
block|{
return|return
name|preemptedResources
return|;
block|}
DECL|method|resetPreemptedResources ()
specifier|public
name|void
name|resetPreemptedResources
parameter_list|()
block|{
name|preemptedResources
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|getPreemptionContainers
argument_list|()
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|preemptedResources
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearPreemptedResources ()
specifier|public
name|void
name|clearPreemptedResources
parameter_list|()
block|{
name|preemptedResources
operator|.
name|setMemory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|preemptedResources
operator|.
name|setVirtualCores
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create and return a container object reflecting an allocation for the    * given appliction on the given node with the given capability and    * priority.    */
DECL|method|createContainer ( FSSchedulerNode node, Resource capability, Priority priority)
specifier|public
name|Container
name|createContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|getNewContainerId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the container
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
comment|/**    * Reserve a spot for {@code container} on this {@code node}. If    * the container is {@code alreadyReserved} on the node, simply    * update relevant bookeeping. This dispatches ro relevant handlers    * in {@link FSSchedulerNode}..    */
DECL|method|reserve (Priority priority, FSSchedulerNode node, Container container, NodeType type, boolean alreadyReserved)
specifier|private
name|void
name|reserve
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|,
name|Container
name|container
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|boolean
name|alreadyReserved
parameter_list|)
block|{
if|if
condition|(
operator|!
name|reservationExceedsThreshold
argument_list|(
name|node
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Making reservation: node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" app_id="
operator|+
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|alreadyReserved
condition|)
block|{
name|getMetrics
argument_list|()
operator|.
name|reserveResource
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|super
operator|.
name|reserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|node
operator|.
name|reserveResource
argument_list|(
name|this
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
name|setReservation
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RMContainer
name|rmContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
name|super
operator|.
name|reserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|node
operator|.
name|reserveResource
argument_list|(
name|this
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
name|setReservation
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|reservationExceedsThreshold (FSSchedulerNode node, NodeType type)
specifier|private
name|boolean
name|reservationExceedsThreshold
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|,
name|NodeType
name|type
parameter_list|)
block|{
comment|// Only if not node-local
if|if
condition|(
name|type
operator|!=
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|int
name|existingReservations
init|=
name|getNumReservations
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
decl_stmt|;
name|int
name|totalAvailNodes
init|=
operator|(
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
operator|)
condition|?
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
else|:
name|scheduler
operator|.
name|getNumNodesInRack
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numAllowedReservations
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|totalAvailNodes
operator|*
name|scheduler
operator|.
name|getReservableNodesRatio
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingReservations
operator|>=
name|numAllowedReservations
condition|)
block|{
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|()
decl_stmt|;
name|df
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reservation Exceeds Allowed number of nodes:"
operator|+
literal|" app_id="
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" existingReservations="
operator|+
name|existingReservations
operator|+
literal|" totalAvailableNodes="
operator|+
name|totalAvailNodes
operator|+
literal|" reservableNodesRatio="
operator|+
name|df
operator|.
name|format
argument_list|(
name|scheduler
operator|.
name|getReservableNodesRatio
argument_list|()
argument_list|)
operator|+
literal|" numAllowedReservations="
operator|+
name|numAllowedReservations
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Remove the reservation on {@code node} at the given {@link Priority}.    * This dispatches SchedulerNode handlers as well.    */
DECL|method|unreserve (Priority priority, FSSchedulerNode node)
specifier|public
name|void
name|unreserve
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|)
block|{
name|RMContainer
name|rmContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
name|unreserveInternal
argument_list|(
name|priority
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|unreserveResource
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|clearReservation
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|getMetrics
argument_list|()
operator|.
name|unreserveResource
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setReservation (SchedulerNode node)
specifier|private
specifier|synchronized
name|void
name|setReservation
parameter_list|(
name|SchedulerNode
name|node
parameter_list|)
block|{
name|String
name|rackName
init|=
name|node
operator|.
name|getRackName
argument_list|()
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|node
operator|.
name|getRackName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackReservations
init|=
name|reservations
operator|.
name|get
argument_list|(
name|rackName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackReservations
operator|==
literal|null
condition|)
block|{
name|rackReservations
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|reservations
operator|.
name|put
argument_list|(
name|rackName
argument_list|,
name|rackReservations
argument_list|)
expr_stmt|;
block|}
name|rackReservations
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|clearReservation (SchedulerNode node)
specifier|private
specifier|synchronized
name|void
name|clearReservation
parameter_list|(
name|SchedulerNode
name|node
parameter_list|)
block|{
name|String
name|rackName
init|=
name|node
operator|.
name|getRackName
argument_list|()
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|node
operator|.
name|getRackName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackReservations
init|=
name|reservations
operator|.
name|get
argument_list|(
name|rackName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackReservations
operator|!=
literal|null
condition|)
block|{
name|rackReservations
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumReservations (String rackName, boolean isAny)
name|int
name|getNumReservations
parameter_list|(
name|String
name|rackName
parameter_list|,
name|boolean
name|isAny
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isAny
condition|)
block|{
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
range|:
name|reservations
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|counter
operator|+=
name|nodes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|reservations
operator|.
name|get
argument_list|(
name|rackName
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|rackName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|counter
operator|+=
name|nodes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|counter
return|;
block|}
comment|/**    * Assign a container to this node to facilitate {@code request}. If node does    * not have enough memory, create a reservation. This is called once we are    * sure the particular request should be facilitated by this node.    *    * @param node    *     The node to try placing the container on.    * @param request    *     The ResourceRequest we're trying to satisfy.    * @param type    *     The locality of the assignment.    * @param reserved    *     Whether there's already a container reserved for this app on the node.    * @return    *     If an assignment was made, returns the resources allocated to the    *     container.  If a reservation was made, returns    *     FairScheduler.CONTAINER_RESERVED.  If no assignment or reservation was    *     made, returns an empty resource.    */
DECL|method|assignContainer ( FSSchedulerNode node, ResourceRequest request, NodeType type, boolean reserved)
specifier|private
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|boolean
name|reserved
parameter_list|)
block|{
comment|// How much does this request need?
name|Resource
name|capability
init|=
name|request
operator|.
name|getCapability
argument_list|()
decl_stmt|;
comment|// How much does the node have?
name|Resource
name|available
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reserved
condition|)
block|{
name|container
operator|=
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getContainer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|container
operator|=
name|createContainer
argument_list|(
name|node
argument_list|,
name|capability
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Can we allocate a container on this node?
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|capability
argument_list|,
name|available
argument_list|)
condition|)
block|{
comment|// Inform the application of the new container for this request
name|RMContainer
name|allocatedContainer
init|=
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocatedContainer
operator|==
literal|null
condition|)
block|{
comment|// Did the application need this resource?
if|if
condition|(
name|reserved
condition|)
block|{
name|unreserve
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|// If we had previously made a reservation, delete it
if|if
condition|(
name|reserved
condition|)
block|{
name|unreserve
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Inform the node
name|node
operator|.
name|allocateContainer
argument_list|(
name|allocatedContainer
argument_list|)
expr_stmt|;
comment|// If not running unmanaged, the first container we allocate is always
comment|// the AM. Set the amResource for this app and update the leaf queue's AM
comment|// usage
if|if
condition|(
operator|!
name|isAmRunning
argument_list|()
operator|&&
operator|!
name|getUnmanagedAM
argument_list|()
condition|)
block|{
name|setAMResource
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|getQueue
argument_list|()
operator|.
name|addAMResourceUsage
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|setAmRunning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|container
operator|.
name|getResource
argument_list|()
return|;
block|}
if|if
condition|(
name|isReservable
argument_list|(
name|container
argument_list|)
condition|)
block|{
comment|// The desired container won't fit here, so reserve
name|reserve
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|node
argument_list|,
name|container
argument_list|,
name|type
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
return|return
name|FairScheduler
operator|.
name|CONTAINER_RESERVED
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not creating reservation as container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" is not reservable"
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
block|}
DECL|method|isReservable (Container container)
specifier|private
name|boolean
name|isReservable
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|isAtLeastReservationThreshold
argument_list|(
name|getQueue
argument_list|()
operator|.
name|getPolicy
argument_list|()
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
return|;
block|}
DECL|method|hasNodeOrRackLocalRequests (Priority priority)
specifier|private
name|boolean
name|hasNodeOrRackLocalRequests
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
comment|/**    * Whether the AM container for this app is over maxAMShare limit.    */
DECL|method|isOverAMShareLimit ()
specifier|private
name|boolean
name|isOverAMShareLimit
parameter_list|()
block|{
comment|// Check the AM resource usage for the leaf queue
if|if
condition|(
operator|!
name|isAmRunning
argument_list|()
operator|&&
operator|!
name|getUnmanagedAM
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
name|appSchedulingInfo
operator|.
name|getAllResourceRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|ask
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getQueue
argument_list|()
operator|.
name|canRunAppAM
argument_list|(
name|ask
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCapability
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|assignContainer (FSSchedulerNode node, boolean reserved)
specifier|private
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|,
name|boolean
name|reserved
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node offered to app: "
operator|+
name|getName
argument_list|()
operator|+
literal|" reserved: "
operator|+
name|reserved
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Priority
argument_list|>
name|prioritiesToTry
init|=
operator|(
name|reserved
operator|)
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getReservedPriority
argument_list|()
argument_list|)
else|:
name|getPriorities
argument_list|()
decl_stmt|;
comment|// For each priority, see if we can schedule a node local, rack local
comment|// or off-switch request. Rack of off-switch requests may be delayed
comment|// (not scheduled) in order to promote better locality.
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|Priority
name|priority
range|:
name|prioritiesToTry
control|)
block|{
comment|// Skip it for reserved container, since
comment|// we already check it in isValidReservation.
if|if
condition|(
operator|!
name|reserved
operator|&&
operator|!
name|hasContainerForNode
argument_list|(
name|priority
argument_list|,
name|node
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|addSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|ResourceRequest
name|rackLocalRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceRequest
name|localRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|localRequest
operator|!=
literal|null
operator|&&
operator|!
name|localRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Relax locality off is not supported on local request: "
operator|+
name|localRequest
argument_list|)
expr_stmt|;
block|}
name|NodeType
name|allowedLocality
decl_stmt|;
if|if
condition|(
name|scheduler
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
condition|)
block|{
name|allowedLocality
operator|=
name|getAllowedLocalityLevelByTime
argument_list|(
name|priority
argument_list|,
name|scheduler
operator|.
name|getNodeLocalityDelayMs
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getRackLocalityDelayMs
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allowedLocality
operator|=
name|getAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getNodeLocalityThreshold
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getRackLocalityThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rackLocalRequest
operator|!=
literal|null
operator|&&
name|rackLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|!=
literal|0
operator|&&
name|localRequest
operator|!=
literal|null
operator|&&
name|localRequest
operator|.
name|getNumContainers
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|node
argument_list|,
name|localRequest
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reserved
argument_list|)
return|;
block|}
if|if
condition|(
name|rackLocalRequest
operator|!=
literal|null
operator|&&
operator|!
name|rackLocalRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|rackLocalRequest
operator|!=
literal|null
operator|&&
name|rackLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|!=
literal|0
operator|&&
operator|(
name|allowedLocality
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|||
name|allowedLocality
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
operator|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|node
argument_list|,
name|rackLocalRequest
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reserved
argument_list|)
return|;
block|}
name|ResourceRequest
name|offSwitchRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|offSwitchRequest
operator|!=
literal|null
operator|&&
operator|!
name|offSwitchRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|offSwitchRequest
operator|!=
literal|null
operator|&&
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|hasNodeOrRackLocalRequests
argument_list|(
name|priority
argument_list|)
operator|||
name|allowedLocality
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|node
argument_list|,
name|offSwitchRequest
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reserved
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|/**    * Whether this app has containers requests that could be satisfied on the    * given node, if the node had full space.    */
DECL|method|hasContainerForNode (Priority prio, FSSchedulerNode node)
specifier|private
name|boolean
name|hasContainerForNode
parameter_list|(
name|Priority
name|prio
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|)
block|{
name|ResourceRequest
name|anyRequest
init|=
name|getResourceRequest
argument_list|(
name|prio
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|getResourceRequest
argument_list|(
name|prio
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|getResourceRequest
argument_list|(
name|prio
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
return|return
comment|// There must be outstanding requests at the given priority:
name|anyRequest
operator|!=
literal|null
operator|&&
name|anyRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
operator|&&
comment|// If locality relaxation is turned off at *-level, there must be a
comment|// non-zero request for the node's rack:
operator|(
name|anyRequest
operator|.
name|getRelaxLocality
argument_list|()
operator|||
operator|(
name|rackRequest
operator|!=
literal|null
operator|&&
name|rackRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
operator|)
operator|)
operator|&&
comment|// If locality relaxation is turned off at rack-level, there must be a
comment|// non-zero request at the node:
operator|(
name|rackRequest
operator|==
literal|null
operator|||
name|rackRequest
operator|.
name|getRelaxLocality
argument_list|()
operator|||
operator|(
name|nodeRequest
operator|!=
literal|null
operator|&&
name|nodeRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
operator|)
operator|)
operator|&&
comment|// The requested container must be able to fit on the node:
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|RESOURCE_CALCULATOR
argument_list|,
literal|null
argument_list|,
name|anyRequest
operator|.
name|getCapability
argument_list|()
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
operator|&&
comment|// The requested container must fit in queue maximum share:
name|getQueue
argument_list|()
operator|.
name|fitsInMaxShare
argument_list|(
name|anyRequest
operator|.
name|getCapability
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isValidReservation (FSSchedulerNode node)
specifier|private
name|boolean
name|isValidReservation
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
name|Priority
name|reservedPriority
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getReservedPriority
argument_list|()
decl_stmt|;
return|return
name|hasContainerForNode
argument_list|(
name|reservedPriority
argument_list|,
name|node
argument_list|)
operator|&&
operator|!
name|isOverAMShareLimit
argument_list|()
return|;
block|}
comment|/**    * Called when this application already has an existing reservation on the    * given node.  Sees whether we can turn the reservation into an allocation.    * Also checks whether the application needs the reservation anymore, and    * releases it if not.    *    * @param node    *     Node that the application has an existing reservation on    * @return whether the reservation on the given node is valid.    */
DECL|method|assignReservedContainer (FSSchedulerNode node)
specifier|public
name|boolean
name|assignReservedContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
name|RMContainer
name|rmContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
name|Priority
name|reservedPriority
init|=
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidReservation
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// Don't hold the reservation if app can no longer use it
name|LOG
operator|.
name|info
argument_list|(
literal|"Releasing reservation that cannot be satisfied for "
operator|+
literal|"application "
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" on node "
operator|+
name|node
argument_list|)
expr_stmt|;
name|unreserve
argument_list|(
name|reservedPriority
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Reservation valid; try to fulfill the reservation
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to fulfill reservation for application "
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Fail early if the reserved container won't fit.
comment|// Note that we have an assumption here that
comment|// there's only one container size per priority.
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getReservedResource
argument_list|()
argument_list|,
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
condition|)
block|{
name|assignContainer
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|class|RMContainerComparator
specifier|static
class|class
name|RMContainerComparator
implements|implements
name|Comparator
argument_list|<
name|RMContainer
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (RMContainer c1, RMContainer c2)
specifier|public
name|int
name|compare
parameter_list|(
name|RMContainer
name|c1
parameter_list|,
name|RMContainer
name|c2
parameter_list|)
block|{
name|int
name|ret
init|=
name|c1
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
return|return
name|c2
operator|.
name|getContainerId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c1
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|ret
return|;
block|}
block|}
comment|/* Schedulable methods implementation */
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|Resource
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|Resource
name|getMinShare
parameter_list|()
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxShare ()
specifier|public
name|Resource
name|getMaxShare
parameter_list|()
block|{
return|return
name|Resources
operator|.
name|unbounded
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUsage ()
specifier|public
name|Resource
name|getResourceUsage
parameter_list|()
block|{
comment|// Here the getPreemptedResources() always return zero, except in
comment|// a preemption round
return|return
name|Resources
operator|.
name|subtract
argument_list|(
name|getCurrentConsumption
argument_list|()
argument_list|,
name|getPreemptedResources
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWeights ()
specifier|public
name|ResourceWeights
name|getWeights
parameter_list|()
block|{
return|return
name|scheduler
operator|.
name|getAppWeight
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
comment|// Right now per-app priorities are not passed to scheduler,
comment|// so everyone has the same priority.
return|return
name|priority
return|;
block|}
annotation|@
name|Override
DECL|method|getFairShare ()
specifier|public
name|Resource
name|getFairShare
parameter_list|()
block|{
return|return
name|this
operator|.
name|fairShare
return|;
block|}
annotation|@
name|Override
DECL|method|setFairShare (Resource fairShare)
specifier|public
name|void
name|setFairShare
parameter_list|(
name|Resource
name|fairShare
parameter_list|)
block|{
name|this
operator|.
name|fairShare
operator|=
name|fairShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{
name|demand
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Demand is current consumption plus outstanding requests
name|Resources
operator|.
name|addTo
argument_list|(
name|demand
argument_list|,
name|getCurrentConsumption
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add up outstanding resource requests
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|Priority
name|p
range|:
name|getPriorities
argument_list|()
control|)
block|{
for|for
control|(
name|ResourceRequest
name|r
range|:
name|getResourceRequests
argument_list|(
name|p
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|Resources
operator|.
name|multiplyAndAddTo
argument_list|(
name|demand
argument_list|,
name|r
operator|.
name|getCapability
argument_list|()
argument_list|,
name|r
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|assignContainer (FSSchedulerNode node)
specifier|public
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|isOverAMShareLimit
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping allocation because maxAMShare limit would "
operator|+
literal|"be exceeded"
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
return|return
name|assignContainer
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Preempt a running container according to the priority    */
annotation|@
name|Override
DECL|method|preemptContainer ()
specifier|public
name|RMContainer
name|preemptContainer
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"App "
operator|+
name|getName
argument_list|()
operator|+
literal|" is going to preempt a running "
operator|+
literal|"container"
argument_list|)
expr_stmt|;
block|}
name|RMContainer
name|toBePreempted
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|getPreemptionContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|container
argument_list|)
operator|&&
operator|(
name|toBePreempted
operator|==
literal|null
operator|||
name|comparator
operator|.
name|compare
argument_list|(
name|toBePreempted
argument_list|,
name|container
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|toBePreempted
operator|=
name|container
expr_stmt|;
block|}
block|}
return|return
name|toBePreempted
return|;
block|}
block|}
end_class

end_unit

