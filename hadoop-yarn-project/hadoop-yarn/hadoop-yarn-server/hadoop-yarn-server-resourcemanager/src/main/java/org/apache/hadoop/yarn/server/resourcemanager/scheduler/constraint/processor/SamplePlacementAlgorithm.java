begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.processor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TargetConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraintTransformations
operator|.
name|SpecializedConstraintTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|AllocationTagsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|InvalidAllocationTagsQueryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|PlacementConstraintManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithmInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithmOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithmOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|PlacedSchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Sample Test algorithm. Assumes anti-affinity always  * It also assumes the numAllocations in resource sizing is always = 1  *  * NOTE: This is just a sample implementation. Not be actually used  */
end_comment

begin_class
DECL|class|SamplePlacementAlgorithm
specifier|public
class|class
name|SamplePlacementAlgorithm
implements|implements
name|ConstraintPlacementAlgorithm
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SamplePlacementAlgorithm
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tagsManager
specifier|private
name|AllocationTagsManager
name|tagsManager
decl_stmt|;
DECL|field|constraintManager
specifier|private
name|PlacementConstraintManager
name|constraintManager
decl_stmt|;
DECL|field|nodeSelector
specifier|private
name|NodeCandidateSelector
name|nodeSelector
decl_stmt|;
annotation|@
name|Override
DECL|method|init (RMContext rmContext)
specifier|public
name|void
name|init
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|tagsManager
operator|=
name|rmContext
operator|.
name|getAllocationTagsManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|constraintManager
operator|=
name|rmContext
operator|.
name|getPlacementConstraintManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeSelector
operator|=
name|filter
lambda|->
operator|(
call|(
name|AbstractYarnScheduler
call|)
argument_list|(
name|rmContext
argument_list|)
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodes
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|place (ConstraintPlacementAlgorithmInput input, ConstraintPlacementAlgorithmOutputCollector collector)
specifier|public
name|void
name|place
parameter_list|(
name|ConstraintPlacementAlgorithmInput
name|input
parameter_list|,
name|ConstraintPlacementAlgorithmOutputCollector
name|collector
parameter_list|)
block|{
name|BatchedRequests
name|requests
init|=
operator|(
name|BatchedRequests
operator|)
name|input
decl_stmt|;
name|ConstraintPlacementAlgorithmOutput
name|resp
init|=
operator|new
name|ConstraintPlacementAlgorithmOutput
argument_list|(
name|requests
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SchedulerNode
argument_list|>
name|allNodes
init|=
name|nodeSelector
operator|.
name|selectNodes
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|tagIndexedRequests
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|requests
operator|.
name|getSchedulingRequests
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getAllocationTags
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|forEach
argument_list|(
name|req
lambda|->
name|req
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|forEach
argument_list|(
name|tag
lambda|->
name|tagIndexedRequests
operator|.
name|computeIfAbsent
argument_list|(
name|tag
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|req
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|entry
range|:
name|tagIndexedRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|constraint
init|=
name|constraintManager
operator|.
name|getConstraint
argument_list|(
name|requests
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|tag
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
comment|// Currently works only for simple anti-affinity
comment|// NODE scope target expressions
name|SpecializedConstraintTransformer
name|transformer
init|=
operator|new
name|SpecializedConstraintTransformer
argument_list|(
name|constraint
argument_list|)
decl_stmt|;
name|PlacementConstraint
name|transform
init|=
name|transformer
operator|.
name|transform
argument_list|()
decl_stmt|;
name|TargetConstraint
name|targetConstraint
init|=
operator|(
name|TargetConstraint
operator|)
name|transform
operator|.
name|getConstraintExpr
argument_list|()
decl_stmt|;
comment|// Assume a single target expression tag;
comment|// The Sample Algorithm assumes a constraint will always be a simple
comment|// Target Constraint with a single entry in the target set.
comment|// As mentioned in the class javadoc - This algorithm should be
comment|// used mostly for testing and validating end-2-end workflow.
name|String
name|targetTag
init|=
name|targetConstraint
operator|.
name|getTargetExpressions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getTargetValues
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// iterate over all nodes
name|Iterator
argument_list|<
name|SchedulerNode
argument_list|>
name|nodeIter
init|=
name|allNodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequests
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|SchedulingRequest
argument_list|>
name|reqIter
init|=
name|schedulingRequests
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|reqIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchedulingRequest
name|sReq
init|=
name|reqIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|numAllocs
init|=
name|sReq
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|getNumAllocations
argument_list|()
decl_stmt|;
while|while
condition|(
name|numAllocs
operator|>
literal|0
operator|&&
name|nodeIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchedulerNode
name|node
init|=
name|nodeIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|nodeCardinality
init|=
literal|0
decl_stmt|;
try|try
block|{
name|nodeCardinality
operator|=
name|tagsManager
operator|.
name|getNodeCardinality
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|requests
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|targetTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeCardinality
operator|==
literal|0
operator|&&
operator|!
name|requests
operator|.
name|getBlacklist
argument_list|(
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
condition|)
block|{
name|numAllocs
operator|--
expr_stmt|;
name|sReq
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|setNumAllocations
argument_list|(
name|numAllocs
argument_list|)
expr_stmt|;
name|PlacedSchedulingRequest
name|placedReq
init|=
operator|new
name|PlacedSchedulingRequest
argument_list|(
name|sReq
argument_list|)
decl_stmt|;
name|placedReq
operator|.
name|setPlacementAttempt
argument_list|(
name|requests
operator|.
name|getPlacementAttempt
argument_list|()
argument_list|)
expr_stmt|;
name|placedReq
operator|.
name|getNodes
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getPlacedRequests
argument_list|()
operator|.
name|add
argument_list|(
name|placedReq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidAllocationTagsQueryException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception from TagManager !"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Add all requests whose numAllocations still> 0 to rejected list.
name|requests
operator|.
name|getSchedulingRequests
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|sReq
lambda|->
name|sReq
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|getNumAllocations
argument_list|()
operator|>
literal|0
argument_list|)
operator|.
name|forEach
argument_list|(
name|rejReq
lambda|->
name|resp
operator|.
name|getRejectedRequests
argument_list|()
operator|.
name|add
argument_list|(
name|rejReq
argument_list|)
argument_list|)
expr_stmt|;
name|collector
operator|.
name|collect
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

