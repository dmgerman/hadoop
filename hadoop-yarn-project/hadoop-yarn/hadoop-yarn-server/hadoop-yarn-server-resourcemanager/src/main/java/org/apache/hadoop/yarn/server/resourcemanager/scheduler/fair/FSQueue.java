begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AccessRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|PrivilegedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|PrivilegedEntity
operator|.
name|EntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|YarnAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FSQueue
specifier|public
specifier|abstract
class|class
name|FSQueue
implements|implements
name|Queue
implements|,
name|Schedulable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|fairShare
specifier|private
name|Resource
name|fairShare
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|steadyFairShare
specifier|private
name|Resource
name|steadyFairShare
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|reservedResource
specifier|private
name|Resource
name|reservedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|scheduler
specifier|protected
specifier|final
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|authorizer
specifier|private
specifier|final
name|YarnAuthorizationProvider
name|authorizer
decl_stmt|;
DECL|field|queueEntity
specifier|private
specifier|final
name|PrivilegedEntity
name|queueEntity
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|FSQueueMetrics
name|metrics
decl_stmt|;
DECL|field|parent
specifier|protected
specifier|final
name|FSParentQueue
name|parent
decl_stmt|;
DECL|field|recordFactory
specifier|protected
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|policy
specifier|protected
name|SchedulingPolicy
name|policy
init|=
name|SchedulingPolicy
operator|.
name|DEFAULT_POLICY
decl_stmt|;
DECL|field|weights
specifier|protected
name|float
name|weights
decl_stmt|;
DECL|field|minShare
specifier|protected
name|Resource
name|minShare
decl_stmt|;
DECL|field|maxShare
specifier|private
name|ConfigurableResource
name|maxShare
decl_stmt|;
DECL|field|maxRunningApps
specifier|protected
name|int
name|maxRunningApps
decl_stmt|;
DECL|field|maxChildQueueResource
specifier|private
name|ConfigurableResource
name|maxChildQueueResource
decl_stmt|;
comment|// maxAMShare is a value between 0 and 1.
DECL|field|maxAMShare
specifier|protected
name|float
name|maxAMShare
decl_stmt|;
DECL|field|fairSharePreemptionTimeout
specifier|private
name|long
name|fairSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|minSharePreemptionTimeout
specifier|private
name|long
name|minSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|fairSharePreemptionThreshold
specifier|private
name|float
name|fairSharePreemptionThreshold
init|=
literal|0.5f
decl_stmt|;
DECL|field|preemptable
specifier|private
name|boolean
name|preemptable
init|=
literal|true
decl_stmt|;
DECL|method|FSQueue (String name, FairScheduler scheduler, FSParentQueue parent)
specifier|public
name|FSQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|FairScheduler
name|scheduler
parameter_list|,
name|FSParentQueue
name|parent
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|authorizer
operator|=
name|YarnAuthorizationProvider
operator|.
name|getInstance
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueEntity
operator|=
operator|new
name|PrivilegedEntity
argument_list|(
name|EntityType
operator|.
name|QUEUE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|FSQueueMetrics
operator|.
name|forQueue
argument_list|(
name|getName
argument_list|()
argument_list|,
name|parent
argument_list|,
literal|true
argument_list|,
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|setPolicy
argument_list|(
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|getSchedulingPolicy
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|reinit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize a queue by setting its queue-specific properties and its    * metrics. This method is invoked when creating a new queue or reloading    * the allocation file.    * This method does not set policies for queues when reloading the allocation    * file since we need to either set all new policies or nothing, which is    * handled by method {@link #verifyAndSetPolicyFromConf}.    *    * @param recursive whether child queues should be reinitialized recursively    */
DECL|method|reinit (boolean recursive)
specifier|public
specifier|final
name|void
name|reinit
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|AllocationConfiguration
name|allocConf
init|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
name|allocConf
operator|.
name|initFSQueue
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updatePreemptionVariables
argument_list|()
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
for|for
control|(
name|FSQueue
name|child
range|:
name|getChildQueues
argument_list|()
control|)
block|{
name|child
operator|.
name|reinit
argument_list|(
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getPolicy ()
specifier|public
name|SchedulingPolicy
name|getPolicy
parameter_list|()
block|{
return|return
name|policy
return|;
block|}
DECL|method|getParent ()
specifier|public
name|FSParentQueue
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|setPolicy (SchedulingPolicy policy)
specifier|public
name|void
name|setPolicy
parameter_list|(
name|SchedulingPolicy
name|policy
parameter_list|)
block|{
name|policy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
DECL|method|setWeights (float weights)
specifier|public
name|void
name|setWeights
parameter_list|(
name|float
name|weights
parameter_list|)
block|{
name|this
operator|.
name|weights
operator|=
name|weights
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWeight ()
specifier|public
name|float
name|getWeight
parameter_list|()
block|{
return|return
name|weights
return|;
block|}
DECL|method|setMinShare (Resource minShare)
specifier|public
name|void
name|setMinShare
parameter_list|(
name|Resource
name|minShare
parameter_list|)
block|{
name|this
operator|.
name|minShare
operator|=
name|minShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|Resource
name|getMinShare
parameter_list|()
block|{
return|return
name|minShare
return|;
block|}
DECL|method|setMaxShare (ConfigurableResource maxShare)
specifier|public
name|void
name|setMaxShare
parameter_list|(
name|ConfigurableResource
name|maxShare
parameter_list|)
block|{
name|this
operator|.
name|maxShare
operator|=
name|maxShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxShare ()
specifier|public
name|Resource
name|getMaxShare
parameter_list|()
block|{
name|Resource
name|maxResource
init|=
name|maxShare
operator|.
name|getResource
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
decl_stmt|;
comment|// Max resource should be greater than or equal to min resource
name|Resource
name|result
init|=
name|Resources
operator|.
name|componentwiseMax
argument_list|(
name|maxResource
argument_list|,
name|minShare
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|equals
argument_list|(
name|maxResource
argument_list|,
name|result
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue %s has max resources %s less than "
operator|+
literal|"min resources %s"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|maxResource
argument_list|,
name|minShare
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getReservedResource ()
specifier|public
name|Resource
name|getReservedResource
parameter_list|()
block|{
name|reservedResource
operator|.
name|setMemorySize
argument_list|(
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|reservedResource
operator|.
name|setVirtualCores
argument_list|(
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reservedResource
return|;
block|}
DECL|method|setMaxChildQueueResource (ConfigurableResource maxChildShare)
specifier|public
name|void
name|setMaxChildQueueResource
parameter_list|(
name|ConfigurableResource
name|maxChildShare
parameter_list|)
block|{
name|this
operator|.
name|maxChildQueueResource
operator|=
name|maxChildShare
expr_stmt|;
block|}
DECL|method|getMaxChildQueueResource ()
specifier|public
name|ConfigurableResource
name|getMaxChildQueueResource
parameter_list|()
block|{
return|return
name|maxChildQueueResource
return|;
block|}
DECL|method|setMaxRunningApps (int maxRunningApps)
specifier|public
name|void
name|setMaxRunningApps
parameter_list|(
name|int
name|maxRunningApps
parameter_list|)
block|{
name|this
operator|.
name|maxRunningApps
operator|=
name|maxRunningApps
expr_stmt|;
block|}
DECL|method|getMaxRunningApps ()
specifier|public
name|int
name|getMaxRunningApps
parameter_list|()
block|{
return|return
name|maxRunningApps
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMaxAMShare ()
specifier|protected
name|float
name|getMaxAMShare
parameter_list|()
block|{
return|return
name|maxAMShare
return|;
block|}
DECL|method|setMaxAMShare (float maxAMShare)
specifier|public
name|void
name|setMaxAMShare
parameter_list|(
name|float
name|maxAMShare
parameter_list|)
block|{
name|this
operator|.
name|maxAMShare
operator|=
name|maxAMShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
name|Priority
name|p
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (boolean includeChildQueues, boolean recursive)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|QueueInfo
name|queueInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|queueInfo
operator|.
name|setQueueName
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|queueInfo
operator|.
name|setCapacity
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueInfo
operator|.
name|setCapacity
argument_list|(
operator|(
name|float
operator|)
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|/
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|queueInfo
operator|.
name|setCurrentCapacity
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueInfo
operator|.
name|setCurrentCapacity
argument_list|(
operator|(
name|float
operator|)
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|/
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
name|childQueueInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeChildQueues
condition|)
block|{
name|Collection
argument_list|<
name|FSQueue
argument_list|>
name|childQueues
init|=
name|getChildQueues
argument_list|()
decl_stmt|;
for|for
control|(
name|FSQueue
name|child
range|:
name|childQueues
control|)
block|{
name|childQueueInfos
operator|.
name|add
argument_list|(
name|child
operator|.
name|getQueueInfo
argument_list|(
name|recursive
argument_list|,
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|queueInfo
operator|.
name|setChildQueues
argument_list|(
name|childQueueInfos
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setQueueState
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setQueueStatistics
argument_list|(
name|getQueueStatistics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|queueInfo
return|;
block|}
DECL|method|getQueueStatistics ()
specifier|public
name|QueueStatistics
name|getQueueStatistics
parameter_list|()
block|{
name|QueueStatistics
name|stats
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setNumAppsSubmitted
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumAppsRunning
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumAppsPending
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumAppsCompleted
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumAppsKilled
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumAppsFailed
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAppsFailed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumActiveUsers
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvailableMemoryMB
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAllocatedMemoryMB
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setPendingMemoryMB
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getPendingMB
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setReservedMemoryMB
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvailableVCores
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAllocatedVCores
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setPendingVCores
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getPendingVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setReservedVCores
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAllocatedContainers
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setPendingContainers
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getPendingContainers
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setReservedContainers
argument_list|(
name|getMetrics
argument_list|()
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|FSQueueMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/** Get the fair share assigned to this Schedulable. */
DECL|method|getFairShare ()
specifier|public
name|Resource
name|getFairShare
parameter_list|()
block|{
return|return
name|fairShare
return|;
block|}
annotation|@
name|Override
DECL|method|setFairShare (Resource fairShare)
specifier|public
name|void
name|setFairShare
parameter_list|(
name|Resource
name|fairShare
parameter_list|)
block|{
name|this
operator|.
name|fairShare
operator|=
name|fairShare
expr_stmt|;
name|metrics
operator|.
name|setFairShare
argument_list|(
name|fairShare
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The updated fairShare for "
operator|+
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|fairShare
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Get the steady fair share assigned to this Schedulable. */
DECL|method|getSteadyFairShare ()
specifier|public
name|Resource
name|getSteadyFairShare
parameter_list|()
block|{
return|return
name|steadyFairShare
return|;
block|}
DECL|method|setSteadyFairShare (Resource steadyFairShare)
name|void
name|setSteadyFairShare
parameter_list|(
name|Resource
name|steadyFairShare
parameter_list|)
block|{
name|this
operator|.
name|steadyFairShare
operator|=
name|steadyFairShare
expr_stmt|;
name|metrics
operator|.
name|setSteadyFairShare
argument_list|(
name|steadyFairShare
argument_list|)
expr_stmt|;
block|}
DECL|method|hasAccess (QueueACL acl, UserGroupInformation user)
specifier|public
name|boolean
name|hasAccess
parameter_list|(
name|QueueACL
name|acl
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
return|return
name|authorizer
operator|.
name|checkPermission
argument_list|(
operator|new
name|AccessRequest
argument_list|(
name|queueEntity
argument_list|,
name|user
argument_list|,
name|SchedulerUtils
operator|.
name|toAccessType
argument_list|(
name|acl
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Server
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFairSharePreemptionTimeout ()
name|long
name|getFairSharePreemptionTimeout
parameter_list|()
block|{
return|return
name|fairSharePreemptionTimeout
return|;
block|}
DECL|method|setFairSharePreemptionTimeout (long fairSharePreemptionTimeout)
name|void
name|setFairSharePreemptionTimeout
parameter_list|(
name|long
name|fairSharePreemptionTimeout
parameter_list|)
block|{
name|this
operator|.
name|fairSharePreemptionTimeout
operator|=
name|fairSharePreemptionTimeout
expr_stmt|;
block|}
DECL|method|getMinSharePreemptionTimeout ()
name|long
name|getMinSharePreemptionTimeout
parameter_list|()
block|{
return|return
name|minSharePreemptionTimeout
return|;
block|}
DECL|method|setMinSharePreemptionTimeout (long minSharePreemptionTimeout)
name|void
name|setMinSharePreemptionTimeout
parameter_list|(
name|long
name|minSharePreemptionTimeout
parameter_list|)
block|{
name|this
operator|.
name|minSharePreemptionTimeout
operator|=
name|minSharePreemptionTimeout
expr_stmt|;
block|}
DECL|method|getFairSharePreemptionThreshold ()
name|float
name|getFairSharePreemptionThreshold
parameter_list|()
block|{
return|return
name|fairSharePreemptionThreshold
return|;
block|}
DECL|method|setFairSharePreemptionThreshold (float fairSharePreemptionThreshold)
name|void
name|setFairSharePreemptionThreshold
parameter_list|(
name|float
name|fairSharePreemptionThreshold
parameter_list|)
block|{
name|this
operator|.
name|fairSharePreemptionThreshold
operator|=
name|fairSharePreemptionThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isPreemptable ()
specifier|public
name|boolean
name|isPreemptable
parameter_list|()
block|{
return|return
name|preemptable
return|;
block|}
comment|/**    * Recomputes the shares for all child queues and applications based on this    * queue's current share.    *    * To be called holding the scheduler writelock.    */
DECL|method|updateInternal ()
specifier|abstract
name|void
name|updateInternal
parameter_list|()
function_decl|;
comment|/**    * Set the queue's fairshare and update the demand/fairshare of child    * queues/applications.    *    * To be called holding the scheduler writelock.    *    * @param fairShare    */
DECL|method|update (Resource fairShare)
specifier|public
name|void
name|update
parameter_list|(
name|Resource
name|fairShare
parameter_list|)
block|{
name|setFairShare
argument_list|(
name|fairShare
argument_list|)
expr_stmt|;
name|updateInternal
argument_list|()
expr_stmt|;
block|}
comment|/**    * Update the min/fair share preemption timeouts, threshold and preemption    * disabled flag for this queue.    */
DECL|method|updatePreemptionVariables ()
specifier|private
name|void
name|updatePreemptionVariables
parameter_list|()
block|{
comment|// For min share timeout
name|minSharePreemptionTimeout
operator|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|minSharePreemptionTimeout
operator|==
operator|-
literal|1
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|minSharePreemptionTimeout
operator|=
name|parent
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
expr_stmt|;
block|}
comment|// For fair share timeout
name|fairSharePreemptionTimeout
operator|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fairSharePreemptionTimeout
operator|==
operator|-
literal|1
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|fairSharePreemptionTimeout
operator|=
name|parent
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
expr_stmt|;
block|}
comment|// For fair share preemption threshold
name|fairSharePreemptionThreshold
operator|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fairSharePreemptionThreshold
operator|<
literal|0
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|fairSharePreemptionThreshold
operator|=
name|parent
operator|.
name|getFairSharePreemptionThreshold
argument_list|()
expr_stmt|;
block|}
comment|// For option whether allow preemption from this queue.
comment|// If the parent is non-preemptable, this queue is non-preemptable as well,
comment|// otherwise get the value from the allocation file.
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|isPreemptable
argument_list|()
condition|)
block|{
name|preemptable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|preemptable
operator|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|isPreemptable
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets the children of this queue, if any.    */
DECL|method|getChildQueues ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|FSQueue
argument_list|>
name|getChildQueues
parameter_list|()
function_decl|;
comment|/**    * Adds all applications in the queue and its subqueues to the given collection.    * @param apps the collection to add the applications to    */
DECL|method|collectSchedulerApplications ( Collection<ApplicationAttemptId> apps)
specifier|public
specifier|abstract
name|void
name|collectSchedulerApplications
parameter_list|(
name|Collection
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
parameter_list|)
function_decl|;
comment|/**    * Return the number of apps for which containers can be allocated.    * Includes apps in subqueues.    */
DECL|method|getNumRunnableApps ()
specifier|public
specifier|abstract
name|int
name|getNumRunnableApps
parameter_list|()
function_decl|;
comment|/**    * Helper method to check if the queue should attempt assigning resources    *     * @return true if check passes (can assign) or false otherwise    */
DECL|method|assignContainerPreCheck (FSSchedulerNode node)
name|boolean
name|assignContainerPreCheck
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning container failed on node '"
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" because it has reserved containers."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|getResourceUsage
argument_list|()
argument_list|,
name|getMaxShare
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning container failed on node '"
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" because queue resource usage is larger than MaxShare: "
operator|+
name|dumpState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Returns true if queue has at least one app running.    */
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|getNumRunnableApps
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/** Convenient toString implementation for debugging. */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[%s, demand=%s, running=%s, share=%s, w=%s]"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|getDemand
argument_list|()
argument_list|,
name|getResourceUsage
argument_list|()
argument_list|,
name|fairShare
argument_list|,
name|getWeight
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAccessibleNodeLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAccessibleNodeLabels
parameter_list|()
block|{
comment|// TODO, add implementation for FS
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultNodeLabelExpression ()
specifier|public
name|String
name|getDefaultNodeLabelExpression
parameter_list|()
block|{
comment|// TODO, add implementation for FS
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|incPendingResource (String nodeLabel, Resource resourceToInc)
specifier|public
name|void
name|incPendingResource
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|Resource
name|resourceToInc
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|decPendingResource (String nodeLabel, Resource resourceToDec)
specifier|public
name|void
name|decPendingResource
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|Resource
name|resourceToDec
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|incReservedResource (String nodeLabel, Resource resourceToInc)
specifier|public
name|void
name|incReservedResource
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|Resource
name|resourceToInc
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|decReservedResource (String nodeLabel, Resource resourceToDec)
specifier|public
name|void
name|decReservedResource
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|Resource
name|resourceToDec
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|getDefaultApplicationPriority ()
specifier|public
name|Priority
name|getDefaultApplicationPriority
parameter_list|()
block|{
comment|// TODO add implementation for FSParentQueue
return|return
literal|null
return|;
block|}
DECL|method|fitsInMaxShare (Resource additionalResource)
name|boolean
name|fitsInMaxShare
parameter_list|(
name|Resource
name|additionalResource
parameter_list|)
block|{
name|Resource
name|usagePlusAddition
init|=
name|Resources
operator|.
name|add
argument_list|(
name|getResourceUsage
argument_list|()
argument_list|,
name|additionalResource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|usagePlusAddition
argument_list|,
name|getMaxShare
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource usage plus resource request: "
operator|+
name|usagePlusAddition
operator|+
literal|" exceeds maximum resource allowed:"
operator|+
name|getMaxShare
argument_list|()
operator|+
literal|" in queue "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|FSQueue
name|parentQueue
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentQueue
operator|!=
literal|null
condition|)
block|{
return|return
name|parentQueue
operator|.
name|fitsInMaxShare
argument_list|(
name|additionalResource
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Recursively check policies for queues in pre-order. Get queue policies    * from the allocation file instead of properties of {@link FSQueue} objects.    * Set the policy for current queue if there is no policy violation for its    * children. This method is invoked while reloading the allocation file.    *    * @param queueConf allocation configuration    * @return true if no policy violation and successfully set polices    *         for queues; false otherwise    */
DECL|method|verifyAndSetPolicyFromConf (AllocationConfiguration queueConf)
specifier|public
name|boolean
name|verifyAndSetPolicyFromConf
parameter_list|(
name|AllocationConfiguration
name|queueConf
parameter_list|)
block|{
name|SchedulingPolicy
name|queuePolicy
init|=
name|queueConf
operator|.
name|getSchedulingPolicy
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FSQueue
name|child
range|:
name|getChildQueues
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|queuePolicy
operator|.
name|isChildPolicyAllowed
argument_list|(
name|queueConf
operator|.
name|getSchedulingPolicy
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|success
init|=
name|child
operator|.
name|verifyAndSetPolicyFromConf
argument_list|(
name|queueConf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Set the policy if no policy violation for all children
name|setPolicy
argument_list|(
name|queuePolicy
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Recursively dump states of all queues.    *    * @return a string which holds all queue states    */
DECL|method|dumpState ()
specifier|public
name|String
name|dumpState
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|dumpStateInternal
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Recursively dump states of all queues.    *    * @param sb the {code StringBuilder} which holds queue states    */
DECL|method|dumpStateInternal (StringBuilder sb)
specifier|protected
specifier|abstract
name|void
name|dumpStateInternal
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
function_decl|;
block|}
end_class

end_unit

