begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.allocator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|allocator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * For an application, resource limits and resource requests, decide how to  * allocate container. This is to make application resource allocation logic  * extensible.  */
end_comment

begin_class
DECL|class|ContainerAllocator
specifier|public
specifier|abstract
class|class
name|ContainerAllocator
block|{
DECL|field|application
name|FiCaSchedulerApp
name|application
decl_stmt|;
DECL|field|rc
specifier|final
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|rmContext
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|ContainerAllocator (FiCaSchedulerApp application, ResourceCalculator rc, RMContext rmContext)
specifier|public
name|ContainerAllocator
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
name|this
operator|.
name|rc
operator|=
name|rc
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
comment|/**    * preAllocation is to perform checks, etc. to see if we can/cannot allocate    * container. It will put necessary information to returned    * {@link ContainerAllocation}.     */
DECL|method|preAllocation ( Resource clusterResource, FiCaSchedulerNode node, SchedulingMode schedulingMode, ResourceLimits resourceLimits, Priority priority, RMContainer reservedContainer)
specifier|abstract
name|ContainerAllocation
name|preAllocation
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|resourceLimits
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
function_decl|;
comment|/**    * doAllocation is to update application metrics, create containers, etc.    * According to allocating conclusion decided by preAllocation.    */
DECL|method|doAllocation ( ContainerAllocation allocationResult, Resource clusterResource, FiCaSchedulerNode node, SchedulingMode schedulingMode, Priority priority, RMContainer reservedContainer)
specifier|abstract
name|ContainerAllocation
name|doAllocation
parameter_list|(
name|ContainerAllocation
name|allocationResult
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
function_decl|;
DECL|method|checkHeadroom (Resource clusterResource, ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node)
name|boolean
name|checkHeadroom
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceLimits
name|currentResourceLimits
parameter_list|,
name|Resource
name|required
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|)
block|{
comment|// If headroom + currentReservation< required, we cannot allocate this
comment|// require
name|Resource
name|resourceCouldBeUnReserved
init|=
name|application
operator|.
name|getCurrentReservation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
operator|||
operator|!
name|node
operator|.
name|getPartition
argument_list|()
operator|.
name|equals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
comment|// If we don't allow reservation continuous looking, OR we're looking at
comment|// non-default node partition, we won't allow to unreserve before
comment|// allocation.
name|resourceCouldBeUnReserved
operator|=
name|Resources
operator|.
name|none
argument_list|()
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|currentResourceLimits
operator|.
name|getHeadroom
argument_list|()
argument_list|,
name|resourceCouldBeUnReserved
argument_list|)
argument_list|,
name|required
argument_list|)
return|;
block|}
comment|/**    * allocate needs to handle following stuffs:    *     *<ul>    *<li>Select request: Select a request to allocate. E.g. select a resource    * request based on requirement/priority/locality.</li>    *<li>Check if a given resource can be allocated based on resource    * availability</li>    *<li>Do allocation: this will decide/create allocated/reserved    * container, this will also update metrics</li>    *</ul>    */
DECL|method|allocate (Resource clusterResource, FiCaSchedulerNode node, SchedulingMode schedulingMode, ResourceLimits resourceLimits, Priority priority, RMContainer reservedContainer)
specifier|public
name|ContainerAllocation
name|allocate
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|resourceLimits
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|ContainerAllocation
name|result
init|=
name|preAllocation
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulingMode
argument_list|,
name|resourceLimits
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|AllocationState
operator|.
name|ALLOCATED
operator|==
name|result
operator|.
name|state
operator|||
name|AllocationState
operator|.
name|RESERVED
operator|==
name|result
operator|.
name|state
condition|)
block|{
name|result
operator|=
name|doAllocation
argument_list|(
name|result
argument_list|,
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulingMode
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

