begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_comment
comment|/**  *<p>  * This class has the following functionality:  *  *<p>  * ResourceUsageMultiNodeLookupPolicy holds sorted nodes list based on the  * resource usage of nodes at given time.  *</p>  */
end_comment

begin_class
DECL|class|ResourceUsageMultiNodeLookupPolicy
specifier|public
class|class
name|ResourceUsageMultiNodeLookupPolicy
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
implements|implements
name|MultiNodeLookupPolicy
argument_list|<
name|N
argument_list|>
block|{
DECL|field|nodesPerPartition
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|N
argument_list|>
argument_list|>
name|nodesPerPartition
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|comparator
specifier|protected
name|Comparator
argument_list|<
name|N
argument_list|>
name|comparator
decl_stmt|;
DECL|method|ResourceUsageMultiNodeLookupPolicy ()
specifier|public
name|ResourceUsageMultiNodeLookupPolicy
parameter_list|()
block|{
name|this
operator|.
name|comparator
operator|=
operator|new
name|Comparator
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|N
name|o1
parameter_list|,
name|N
name|o2
parameter_list|)
block|{
name|int
name|allocatedDiff
init|=
name|o1
operator|.
name|getAllocatedResource
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocatedDiff
operator|==
literal|0
condition|)
block|{
return|return
name|o1
operator|.
name|getNodeID
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getNodeID
argument_list|()
argument_list|)
return|;
block|}
return|return
name|allocatedDiff
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPreferredNodeIterator (Collection<N> nodes, String partition)
specifier|public
name|Iterator
argument_list|<
name|N
argument_list|>
name|getPreferredNodeIterator
parameter_list|(
name|Collection
argument_list|<
name|N
argument_list|>
name|nodes
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
return|return
name|getNodesPerPartition
argument_list|(
name|partition
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addAndRefreshNodesSet (Collection<N> nodes, String partition)
specifier|public
name|void
name|addAndRefreshNodesSet
parameter_list|(
name|Collection
argument_list|<
name|N
argument_list|>
name|nodes
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|Set
argument_list|<
name|N
argument_list|>
name|nodeList
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|N
argument_list|>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|nodesPerPartition
operator|.
name|put
argument_list|(
name|partition
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|nodeList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodesPerPartition (String partition)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|getNodesPerPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
return|return
name|nodesPerPartition
operator|.
name|getOrDefault
argument_list|(
name|partition
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

