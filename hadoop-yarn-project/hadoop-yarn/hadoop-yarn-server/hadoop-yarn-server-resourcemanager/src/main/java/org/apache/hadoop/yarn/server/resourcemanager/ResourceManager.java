begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|ServletContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
operator|.
name|ZKCuratorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ahs
operator|.
name|RMApplicationHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|ApplicationMasterLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|federation
operator|.
name|FederationStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|NoOpSystemMetricPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|TimelineServiceV1Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|TimelineServiceV2Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|CombinedSystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMDelegatedNodeLabelsUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|NullRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Recoverable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|AbstractReservationSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceProfilesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceProfilesManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|monitor
operator|.
name|RMAppLifetimeMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|DelegationTokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|timelineservice
operator|.
name|RMTimelineCollectorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebAppUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|AppReportFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyUriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|WebAppProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|WebAppProxyServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApps
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|auth
operator|.
name|DigestAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * The ResourceManager is the main class that is a set of components.  * "I am the ResourceManager. All your resources belong to us..."  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|ResourceManager
specifier|public
class|class
name|ResourceManager
extends|extends
name|CompositeService
implements|implements
name|Recoverable
block|{
comment|/**    * Priority of the ResourceManager shutdown hook.    */
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
comment|/**    * Used for generation of various ids.    */
DECL|field|EPOCH_BIT_SHIFT
specifier|public
specifier|static
specifier|final
name|int
name|EPOCH_BIT_SHIFT
init|=
literal|40
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clusterTimeStamp
specifier|private
specifier|static
name|long
name|clusterTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|/*    * UI2 webapp name    */
DECL|field|UI2_WEBAPP_NAME
specifier|public
specifier|static
specifier|final
name|String
name|UI2_WEBAPP_NAME
init|=
literal|"/ui2"
decl_stmt|;
comment|/**    * "Always On" services. Services that need to run always irrespective of    * the HA state of the RM.    */
annotation|@
name|VisibleForTesting
DECL|field|rmContext
specifier|protected
name|RMContextImpl
name|rmContext
decl_stmt|;
DECL|field|rmDispatcher
specifier|private
name|Dispatcher
name|rmDispatcher
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|adminService
specifier|protected
name|AdminService
name|adminService
decl_stmt|;
comment|/**    * "Active" services. Services that need to run only on the Active RM.    * These services are managed (initialized, started, stopped) by the    * {@link CompositeService} RMActiveServices.    *    * RM is active when (1) HA is disabled, or (2) HA is enabled and the RM is    * in Active state.    */
DECL|field|activeServices
specifier|protected
name|RMActiveServices
name|activeServices
decl_stmt|;
DECL|field|rmSecretManagerService
specifier|protected
name|RMSecretManagerService
name|rmSecretManagerService
decl_stmt|;
DECL|field|scheduler
specifier|protected
name|ResourceScheduler
name|scheduler
decl_stmt|;
DECL|field|reservationSystem
specifier|protected
name|ReservationSystem
name|reservationSystem
decl_stmt|;
DECL|field|clientRM
specifier|private
name|ClientRMService
name|clientRM
decl_stmt|;
DECL|field|masterService
specifier|protected
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|nmLivelinessMonitor
specifier|protected
name|NMLivelinessMonitor
name|nmLivelinessMonitor
decl_stmt|;
DECL|field|nodesListManager
specifier|protected
name|NodesListManager
name|nodesListManager
decl_stmt|;
DECL|field|rmAppManager
specifier|protected
name|RMAppManager
name|rmAppManager
decl_stmt|;
DECL|field|applicationACLsManager
specifier|protected
name|ApplicationACLsManager
name|applicationACLsManager
decl_stmt|;
DECL|field|queueACLsManager
specifier|protected
name|QueueACLsManager
name|queueACLsManager
decl_stmt|;
DECL|field|federationStateStoreService
specifier|private
name|FederationStateStoreService
name|federationStateStoreService
decl_stmt|;
DECL|field|webApp
specifier|private
name|WebApp
name|webApp
decl_stmt|;
DECL|field|fetcher
specifier|private
name|AppReportFetcher
name|fetcher
init|=
literal|null
decl_stmt|;
DECL|field|resourceTracker
specifier|protected
name|ResourceTrackerService
name|resourceTracker
decl_stmt|;
DECL|field|jvmMetrics
specifier|private
name|JvmMetrics
name|jvmMetrics
decl_stmt|;
DECL|field|curatorEnabled
specifier|private
name|boolean
name|curatorEnabled
init|=
literal|false
decl_stmt|;
DECL|field|zkManager
specifier|private
name|ZKCuratorManager
name|zkManager
decl_stmt|;
DECL|field|zkRootNodePassword
specifier|private
specifier|final
name|String
name|zkRootNodePassword
init|=
name|Long
operator|.
name|toString
argument_list|(
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|recoveryEnabled
specifier|private
name|boolean
name|recoveryEnabled
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|webAppAddress
specifier|protected
name|String
name|webAppAddress
decl_stmt|;
DECL|field|configurationProvider
specifier|private
name|ConfigurationProvider
name|configurationProvider
init|=
literal|null
decl_stmt|;
comment|/** End of Active services */
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rmLoginUGI
specifier|private
name|UserGroupInformation
name|rmLoginUGI
decl_stmt|;
DECL|method|ResourceManager ()
specifier|public
name|ResourceManager
parameter_list|()
block|{
name|super
argument_list|(
literal|"ResourceManager"
argument_list|)
expr_stmt|;
block|}
DECL|method|getRMContext ()
specifier|public
name|RMContext
name|getRMContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmContext
return|;
block|}
DECL|method|getClusterTimeStamp ()
specifier|public
specifier|static
name|long
name|getClusterTimeStamp
parameter_list|()
block|{
return|return
name|clusterTimeStamp
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setClusterTimeStamp (long timestamp)
specifier|protected
specifier|static
name|void
name|setClusterTimeStamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|clusterTimeStamp
operator|=
name|timestamp
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRmDispatcher ()
name|Dispatcher
name|getRmDispatcher
parameter_list|()
block|{
return|return
name|rmDispatcher
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createResourceProfileManager ()
specifier|protected
name|ResourceProfilesManager
name|createResourceProfileManager
parameter_list|()
block|{
name|ResourceProfilesManager
name|resourceProfilesManager
init|=
operator|new
name|ResourceProfilesManagerImpl
argument_list|()
decl_stmt|;
return|return
name|resourceProfilesManager
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
operator|new
name|RMContextImpl
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setResourceManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// add resource profiles here because it's used by AbstractYarnScheduler
name|ResourceProfilesManager
name|resourceProfilesManager
init|=
name|createResourceProfileManager
argument_list|()
decl_stmt|;
name|resourceProfilesManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setResourceProfilesManager
argument_list|(
name|resourceProfilesManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurationProvider
operator|=
name|ConfigurationProviderFactory
operator|.
name|getConfigurationProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurationProvider
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setConfigurationProvider
argument_list|(
name|configurationProvider
argument_list|)
expr_stmt|;
comment|// load core-site.xml
name|loadConfigurationXml
argument_list|(
name|YarnConfiguration
operator|.
name|CORE_SITE_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
comment|// Do refreshUserToGroupsMappings with loaded core-site.xml
name|Groups
operator|.
name|getUserToGroupsMappingServiceWithLoadedConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// Do refreshSuperUserGroupsConfiguration with loaded core-site.xml
comment|// Or use RM specific configurations to overwrite the common ones first
comment|// if they exist
name|RMServerUtils
operator|.
name|processRMProxyUsersConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// load yarn-site.xml
name|loadConfigurationXml
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
name|validateConfigs
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// Set HA configuration should be done before login
name|this
operator|.
name|rmContext
operator|.
name|setHAEnabled
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Set UGI and do login
comment|// If security is enabled, use login user
comment|// If security is not enabled, use current user
name|this
operator|.
name|rmLoginUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
try|try
block|{
name|doSecureLogin
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to login"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
comment|// register the handlers for all AlwaysOn services using setupDispatcher().
name|rmDispatcher
operator|=
name|setupDispatcher
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|rmDispatcher
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setDispatcher
argument_list|(
name|rmDispatcher
argument_list|)
expr_stmt|;
comment|// The order of services below should not be changed as services will be
comment|// started in same order
comment|// As elector service needs admin service to be initialized and started,
comment|// first we add admin service then elector service
name|adminService
operator|=
name|createAdminService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|adminService
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMAdminService
argument_list|(
name|adminService
argument_list|)
expr_stmt|;
comment|// elector must be added post adminservice
if|if
condition|(
name|this
operator|.
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
comment|// If the RM is configured to use an embedded leader elector,
comment|// initialize the leader elector.
if|if
condition|(
name|HAUtil
operator|.
name|isAutomaticFailoverEnabled
argument_list|(
name|conf
argument_list|)
operator|&&
name|HAUtil
operator|.
name|isAutomaticFailoverEmbedded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|EmbeddedElector
name|elector
init|=
name|createEmbeddedElector
argument_list|()
decl_stmt|;
name|addIfService
argument_list|(
name|elector
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setLeaderElectorService
argument_list|(
name|elector
argument_list|)
expr_stmt|;
block|}
block|}
name|rmContext
operator|.
name|setYarnConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createAndInitActiveServices
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|webAppAddress
operator|=
name|WebAppUtils
operator|.
name|getWebAppBindURL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|WebAppUtils
operator|.
name|getRMWebAppURLWithoutScheme
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|RMApplicationHistoryWriter
name|rmApplicationHistoryWriter
init|=
name|createRMApplicationHistoryWriter
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|rmApplicationHistoryWriter
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMApplicationHistoryWriter
argument_list|(
name|rmApplicationHistoryWriter
argument_list|)
expr_stmt|;
comment|// initialize the RM timeline collector first so that the system metrics
comment|// publisher can bind to it
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|this
operator|.
name|conf
argument_list|)
condition|)
block|{
name|RMTimelineCollectorManager
name|timelineCollectorManager
init|=
name|createRMTimelineCollectorManager
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|timelineCollectorManager
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMTimelineCollectorManager
argument_list|(
name|timelineCollectorManager
argument_list|)
expr_stmt|;
block|}
name|SystemMetricsPublisher
name|systemMetricsPublisher
init|=
name|createSystemMetricsPublisher
argument_list|()
decl_stmt|;
name|addIfService
argument_list|(
name|systemMetricsPublisher
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setSystemMetricsPublisher
argument_list|(
name|systemMetricsPublisher
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|loadConfigurationXml (String configurationFile)
specifier|private
name|void
name|loadConfigurationXml
parameter_list|(
name|String
name|configurationFile
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|InputStream
name|configurationInputStream
init|=
name|this
operator|.
name|configurationProvider
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|configurationFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurationInputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|addResource
argument_list|(
name|configurationInputStream
argument_list|,
name|configurationFile
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createEmbeddedElector ()
specifier|protected
name|EmbeddedElector
name|createEmbeddedElector
parameter_list|()
throws|throws
name|IOException
block|{
name|EmbeddedElector
name|elector
decl_stmt|;
name|curatorEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|CURATOR_LEADER_ELECTOR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|curatorEnabled
condition|)
block|{
name|this
operator|.
name|zkManager
operator|=
name|createAndStartZKManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|elector
operator|=
operator|new
name|CuratorBasedElectorService
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elector
operator|=
operator|new
name|ActiveStandbyElectorBasedElectorService
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|elector
return|;
block|}
comment|/**    * Get ZooKeeper Curator manager, creating and starting if not exists.    * @param config Configuration for the ZooKeeper curator.    * @return ZooKeeper Curator manager.    * @throws IOException If it cannot create the manager.    */
DECL|method|createAndStartZKManager (Configuration config)
specifier|public
name|ZKCuratorManager
name|createAndStartZKManager
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|ZKCuratorManager
name|manager
init|=
operator|new
name|ZKCuratorManager
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Get authentication
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|authInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|config
argument_list|)
operator|&&
name|HAUtil
operator|.
name|getConfValueForRMInstance
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ROOT_NODE_ACL
argument_list|,
name|config
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|zkRootNodeUsername
init|=
name|HAUtil
operator|.
name|getConfValueForRMInstance
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|String
name|defaultFencingAuth
init|=
name|zkRootNodeUsername
operator|+
literal|":"
operator|+
name|zkRootNodePassword
decl_stmt|;
name|byte
index|[]
name|defaultFencingAuthData
init|=
name|defaultFencingAuth
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
operator|new
name|DigestAuthenticationProvider
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|AuthInfo
name|authInfo
init|=
operator|new
name|AuthInfo
argument_list|(
name|scheme
argument_list|,
name|defaultFencingAuthData
argument_list|)
decl_stmt|;
name|authInfos
operator|.
name|add
argument_list|(
name|authInfo
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|start
argument_list|(
name|authInfos
argument_list|)
expr_stmt|;
return|return
name|manager
return|;
block|}
DECL|method|getZKManager ()
specifier|public
name|ZKCuratorManager
name|getZKManager
parameter_list|()
block|{
return|return
name|zkManager
return|;
block|}
DECL|method|getCurator ()
specifier|public
name|CuratorFramework
name|getCurator
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|zkManager
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|zkManager
operator|.
name|getCurator
argument_list|()
return|;
block|}
DECL|method|getZkRootNodePassword ()
specifier|public
name|String
name|getZkRootNodePassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|zkRootNodePassword
return|;
block|}
DECL|method|createQueueACLsManager (ResourceScheduler scheduler, Configuration conf)
specifier|protected
name|QueueACLsManager
name|createQueueACLsManager
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|QueueACLsManager
argument_list|(
name|scheduler
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setRMStateStore (RMStateStore rmStore)
specifier|protected
name|void
name|setRMStateStore
parameter_list|(
name|RMStateStore
name|rmStore
parameter_list|)
block|{
name|rmStore
operator|.
name|setRMDispatcher
argument_list|(
name|rmDispatcher
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|setResourceManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setStateStore
argument_list|(
name|rmStore
argument_list|)
expr_stmt|;
block|}
DECL|method|createSchedulerEventDispatcher ()
specifier|protected
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|createSchedulerEventDispatcher
parameter_list|()
block|{
return|return
operator|new
name|EventDispatcher
argument_list|(
name|this
operator|.
name|scheduler
argument_list|,
literal|"SchedulerEventDispatcher"
argument_list|)
return|;
block|}
DECL|method|createDispatcher ()
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|AsyncDispatcher
argument_list|(
literal|"RM Event dispatcher"
argument_list|)
return|;
block|}
DECL|method|createScheduler ()
specifier|protected
name|ResourceScheduler
name|createScheduler
parameter_list|()
block|{
name|String
name|schedulerClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Scheduler: "
operator|+
name|schedulerClassName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|schedulerClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|schedulerClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ResourceScheduler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|schedulerClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|ResourceScheduler
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|schedulerClazz
argument_list|,
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|schedulerClassName
operator|+
literal|" not instance of "
operator|+
name|ResourceScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate Scheduler: "
operator|+
name|schedulerClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createReservationSystem ()
specifier|protected
name|ReservationSystem
name|createReservationSystem
parameter_list|()
block|{
name|String
name|reservationClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_CLASS
argument_list|,
name|AbstractReservationSystem
operator|.
name|getDefaultReservationSystem
argument_list|(
name|scheduler
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationClassName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using ReservationSystem: "
operator|+
name|reservationClassName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|reservationClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|reservationClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ReservationSystem
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|reservationClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|ReservationSystem
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reservationClazz
argument_list|,
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|reservationClassName
operator|+
literal|" not instance of "
operator|+
name|ReservationSystem
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate ReservationSystem: "
operator|+
name|reservationClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createAMLauncher ()
specifier|protected
name|ApplicationMasterLauncher
name|createAMLauncher
parameter_list|()
block|{
return|return
operator|new
name|ApplicationMasterLauncher
argument_list|(
name|this
operator|.
name|rmContext
argument_list|)
return|;
block|}
DECL|method|createNMLivelinessMonitor ()
specifier|private
name|NMLivelinessMonitor
name|createNMLivelinessMonitor
parameter_list|()
block|{
return|return
operator|new
name|NMLivelinessMonitor
argument_list|(
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createAMLivelinessMonitor ()
specifier|protected
name|AMLivelinessMonitor
name|createAMLivelinessMonitor
parameter_list|()
block|{
return|return
operator|new
name|AMLivelinessMonitor
argument_list|(
name|this
operator|.
name|rmDispatcher
argument_list|)
return|;
block|}
DECL|method|createNodeLabelManager ()
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
return|return
operator|new
name|RMNodeLabelsManager
argument_list|()
return|;
block|}
DECL|method|createDelegationTokenRenewer ()
specifier|protected
name|DelegationTokenRenewer
name|createDelegationTokenRenewer
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenRenewer
argument_list|()
return|;
block|}
DECL|method|createRMAppManager ()
specifier|protected
name|RMAppManager
name|createRMAppManager
parameter_list|()
block|{
return|return
operator|new
name|RMAppManager
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|masterService
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
DECL|method|createRMApplicationHistoryWriter ()
specifier|protected
name|RMApplicationHistoryWriter
name|createRMApplicationHistoryWriter
parameter_list|()
block|{
return|return
operator|new
name|RMApplicationHistoryWriter
argument_list|()
return|;
block|}
DECL|method|createRMTimelineCollectorManager ()
specifier|private
name|RMTimelineCollectorManager
name|createRMTimelineCollectorManager
parameter_list|()
block|{
return|return
operator|new
name|RMTimelineCollectorManager
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createFederationStateStoreService ()
specifier|private
name|FederationStateStoreService
name|createFederationStateStoreService
parameter_list|()
block|{
return|return
operator|new
name|FederationStateStoreService
argument_list|(
name|rmContext
argument_list|)
return|;
block|}
DECL|method|createSystemMetricsPublisher ()
specifier|protected
name|SystemMetricsPublisher
name|createSystemMetricsPublisher
parameter_list|()
block|{
name|List
argument_list|<
name|SystemMetricsPublisher
argument_list|>
name|publishers
init|=
operator|new
name|ArrayList
argument_list|<
name|SystemMetricsPublisher
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|SystemMetricsPublisher
name|publisherV1
init|=
operator|new
name|TimelineServiceV1Publisher
argument_list|()
decl_stmt|;
name|publishers
operator|.
name|add
argument_list|(
name|publisherV1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// we're dealing with the v.2.x publisher
name|LOG
operator|.
name|info
argument_list|(
literal|"system metrics publisher with the timeline service V2 is "
operator|+
literal|"configured"
argument_list|)
expr_stmt|;
name|SystemMetricsPublisher
name|publisherV2
init|=
operator|new
name|TimelineServiceV2Publisher
argument_list|(
name|rmContext
operator|.
name|getRMTimelineCollectorManager
argument_list|()
argument_list|)
decl_stmt|;
name|publishers
operator|.
name|add
argument_list|(
name|publisherV2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TimelineServicePublisher is not configured"
argument_list|)
expr_stmt|;
name|SystemMetricsPublisher
name|noopPublisher
init|=
operator|new
name|NoOpSystemMetricPublisher
argument_list|()
decl_stmt|;
name|publishers
operator|.
name|add
argument_list|(
name|noopPublisher
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SystemMetricsPublisher
name|publisher
range|:
name|publishers
control|)
block|{
name|addIfService
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
block|}
name|SystemMetricsPublisher
name|combinedPublisher
init|=
operator|new
name|CombinedSystemMetricsPublisher
argument_list|(
name|publishers
argument_list|)
decl_stmt|;
return|return
name|combinedPublisher
return|;
block|}
comment|// sanity check for configurations
DECL|method|validateConfigs (Configuration conf)
specifier|protected
specifier|static
name|void
name|validateConfigs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// validate max-attempts
name|int
name|globalMaxAppAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalMaxAppAttempts
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid global max attempts configuration"
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
operator|+
literal|"="
operator|+
name|globalMaxAppAttempts
operator|+
literal|", it should be a positive integer."
argument_list|)
throw|;
block|}
comment|// validate expireIntvl>= heartbeatIntvl
name|long
name|expireIntvl
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
decl_stmt|;
name|long
name|heartbeatIntvl
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|)
decl_stmt|;
if|if
condition|(
name|expireIntvl
operator|<
name|heartbeatIntvl
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Nodemanager expiry interval should be no"
operator|+
literal|" less than heartbeat interval, "
operator|+
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
operator|+
literal|"="
operator|+
name|expireIntvl
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
operator|+
literal|"="
operator|+
name|heartbeatIntvl
argument_list|)
throw|;
block|}
block|}
comment|/**    * RMActiveServices handles all the Active services in the RM.    */
annotation|@
name|Private
DECL|class|RMActiveServices
specifier|public
class|class
name|RMActiveServices
extends|extends
name|CompositeService
block|{
DECL|field|delegationTokenRenewer
specifier|private
name|DelegationTokenRenewer
name|delegationTokenRenewer
decl_stmt|;
DECL|field|schedulerDispatcher
specifier|private
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|schedulerDispatcher
decl_stmt|;
DECL|field|applicationMasterLauncher
specifier|private
name|ApplicationMasterLauncher
name|applicationMasterLauncher
decl_stmt|;
DECL|field|containerAllocationExpirer
specifier|private
name|ContainerAllocationExpirer
name|containerAllocationExpirer
decl_stmt|;
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|fromActive
specifier|private
name|boolean
name|fromActive
init|=
literal|false
decl_stmt|;
DECL|field|standByTransitionRunnable
specifier|private
name|StandByTransitionRunnable
name|standByTransitionRunnable
decl_stmt|;
DECL|method|RMActiveServices (ResourceManager rm)
name|RMActiveServices
parameter_list|(
name|ResourceManager
name|rm
parameter_list|)
block|{
name|super
argument_list|(
literal|"RMActiveServices"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|standByTransitionRunnable
operator|=
operator|new
name|StandByTransitionRunnable
argument_list|()
expr_stmt|;
name|rmSecretManagerService
operator|=
name|createRMSecretManagerService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|rmSecretManagerService
argument_list|)
expr_stmt|;
name|containerAllocationExpirer
operator|=
operator|new
name|ContainerAllocationExpirer
argument_list|(
name|rmDispatcher
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|containerAllocationExpirer
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setContainerAllocationExpirer
argument_list|(
name|containerAllocationExpirer
argument_list|)
expr_stmt|;
name|AMLivelinessMonitor
name|amLivelinessMonitor
init|=
name|createAMLivelinessMonitor
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|amLivelinessMonitor
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setAMLivelinessMonitor
argument_list|(
name|amLivelinessMonitor
argument_list|)
expr_stmt|;
name|AMLivelinessMonitor
name|amFinishingMonitor
init|=
name|createAMLivelinessMonitor
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|amFinishingMonitor
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setAMFinishingMonitor
argument_list|(
name|amFinishingMonitor
argument_list|)
expr_stmt|;
name|RMAppLifetimeMonitor
name|rmAppLifetimeMonitor
init|=
name|createRMAppLifetimeMonitor
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|rmAppLifetimeMonitor
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMAppLifetimeMonitor
argument_list|(
name|rmAppLifetimeMonitor
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|nlm
init|=
name|createNodeLabelManager
argument_list|()
decl_stmt|;
name|nlm
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
name|RMDelegatedNodeLabelsUpdater
name|delegatedNodeLabelsUpdater
init|=
name|createRMDelegatedNodeLabelsUpdater
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegatedNodeLabelsUpdater
operator|!=
literal|null
condition|)
block|{
name|addService
argument_list|(
name|delegatedNodeLabelsUpdater
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMDelegatedNodeLabelsUpdater
argument_list|(
name|delegatedNodeLabelsUpdater
argument_list|)
expr_stmt|;
block|}
name|recoveryEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RECOVERY_ENABLED
argument_list|)
expr_stmt|;
name|RMStateStore
name|rmStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|recoveryEnabled
condition|)
block|{
name|rmStore
operator|=
name|RMStateStoreFactory
operator|.
name|getStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|isWorkPreservingRecoveryEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setWorkPreservingRecoveryEnabled
argument_list|(
name|isWorkPreservingRecoveryEnabled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rmStore
operator|=
operator|new
name|NullRMStateStore
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|rmStore
operator|.
name|setResourceManager
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|setRMDispatcher
argument_list|(
name|rmDispatcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// the Exception from stateStore.init() needs to be handled for
comment|// HA and we need to give up master status if we got fenced
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to init state store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|rmContext
operator|.
name|setStateStore
argument_list|(
name|rmStore
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|delegationTokenRenewer
operator|=
name|createDelegationTokenRenewer
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setDelegationTokenRenewer
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
block|}
comment|// Register event handler for NodesListManager
name|nodesListManager
operator|=
operator|new
name|NodesListManager
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|NodesListManagerEventType
operator|.
name|class
argument_list|,
name|nodesListManager
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|nodesListManager
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setNodesListManager
argument_list|(
name|nodesListManager
argument_list|)
expr_stmt|;
comment|// Initialize the scheduler
name|scheduler
operator|=
name|createScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setScheduler
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|schedulerDispatcher
operator|=
name|createSchedulerEventDispatcher
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|schedulerDispatcher
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
name|schedulerDispatcher
argument_list|)
expr_stmt|;
comment|// Register event handler for RmAppEvents
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
operator|new
name|ApplicationEventDispatcher
argument_list|(
name|rmContext
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register event handler for RmAppAttemptEvents
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|ApplicationAttemptEventDispatcher
argument_list|(
name|rmContext
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register event handler for RmNodes
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
operator|new
name|NodeEventDispatcher
argument_list|(
name|rmContext
argument_list|)
argument_list|)
expr_stmt|;
name|nmLivelinessMonitor
operator|=
name|createNMLivelinessMonitor
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|nmLivelinessMonitor
argument_list|)
expr_stmt|;
name|resourceTracker
operator|=
name|createResourceTrackerService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|resourceTracker
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setResourceTrackerService
argument_list|(
name|resourceTracker
argument_list|)
expr_stmt|;
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"ResourceManager"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromActive
condition|)
block|{
name|JvmMetrics
operator|.
name|reattach
argument_list|(
name|ms
argument_list|,
name|jvmMetrics
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|reattachMetrics
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jvmMetrics
operator|=
name|JvmMetrics
operator|.
name|initSingleton
argument_list|(
literal|"ResourceManager"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|JvmPauseMonitor
name|pauseMonitor
init|=
operator|new
name|JvmPauseMonitor
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|pauseMonitor
argument_list|)
expr_stmt|;
name|jvmMetrics
operator|.
name|setPauseMonitor
argument_list|(
name|pauseMonitor
argument_list|)
expr_stmt|;
comment|// Initialize the Reservation system
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESERVATION_SYSTEM_ENABLE
argument_list|)
condition|)
block|{
name|reservationSystem
operator|=
name|createReservationSystem
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservationSystem
operator|!=
literal|null
condition|)
block|{
name|reservationSystem
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|reservationSystem
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setReservationSystem
argument_list|(
name|reservationSystem
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized Reservation system"
argument_list|)
expr_stmt|;
block|}
block|}
name|masterService
operator|=
name|createApplicationMasterService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|masterService
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setApplicationMasterService
argument_list|(
name|masterService
argument_list|)
expr_stmt|;
name|applicationACLsManager
operator|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|queueACLsManager
operator|=
name|createQueueACLsManager
argument_list|(
name|scheduler
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rmAppManager
operator|=
name|createRMAppManager
argument_list|()
expr_stmt|;
comment|// Register event handler for RMAppManagerEvents
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppManagerEventType
operator|.
name|class
argument_list|,
name|rmAppManager
argument_list|)
expr_stmt|;
name|clientRM
operator|=
name|createClientRMService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|clientRM
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setClientRMService
argument_list|(
name|clientRM
argument_list|)
expr_stmt|;
name|applicationMasterLauncher
operator|=
name|createAMLauncher
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|AMLauncherEventType
operator|.
name|class
argument_list|,
name|applicationMasterLauncher
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|applicationMasterLauncher
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|addService
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|HAUtil
operator|.
name|isFederationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
name|cId
init|=
name|YarnConfiguration
operator|.
name|getClusterId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|cId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot initialize RM as Federation is enabled"
operator|+
literal|" but cluster id is not configured."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|federationStateStoreService
operator|=
name|createFederationStateStoreService
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|federationStateStoreService
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized Federation membership."
argument_list|)
expr_stmt|;
block|}
operator|new
name|RMNMInfo
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|RMStateStore
name|rmStore
init|=
name|rmContext
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
comment|// The state store needs to start irrespective of recoveryEnabled as apps
comment|// need events to move to further states.
name|rmStore
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|recoveryEnabled
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery started"
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmContext
operator|.
name|isWorkPreservingRecoveryEnabled
argument_list|()
condition|)
block|{
name|rmContext
operator|.
name|setEpoch
argument_list|(
name|rmStore
operator|.
name|getAndIncrementEpoch
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RMState
name|state
init|=
name|rmStore
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery ended"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// the Exception from loadState() needs to be handled for
comment|// HA and we need to give up master status if we got fenced
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load/recover state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isFederationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|long
name|epoch
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_EPOCH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_EPOCH
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setEpoch
argument_list|(
name|epoch
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Epoch set for Federation: "
operator|+
name|epoch
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmContext
operator|!=
literal|null
condition|)
block|{
name|RMStateStore
name|store
init|=
name|rmContext
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing store."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Private
DECL|class|RMFatalEventDispatcher
specifier|private
class|class
name|RMFatalEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMFatalEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMFatalEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMFatalEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Received "
operator|+
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
comment|// If we're in an HA config, the right answer is always to go into
comment|// standby.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Transitioning the resource manager to standby."
argument_list|)
expr_stmt|;
name|handleTransitionToStandByInNewThread
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If we're stand-alone, we probably want to shut down, but the if and
comment|// how depends on the event.
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|STATE_STORE_FENCED
case|:
name|LOG
operator|.
name|fatal
argument_list|(
literal|"State store fenced even though the resource manager "
operator|+
literal|"is not configured for high availability. Shutting down this "
operator|+
literal|"resource manager to protect the integrity of the state store."
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|event
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STATE_STORE_OP_FAILED
case|:
if|if
condition|(
name|YarnConfiguration
operator|.
name|shouldRMFailFast
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Shutting down the resource manager because a state "
operator|+
literal|"store operation failed, and the resource manager is "
operator|+
literal|"configured to fail fast. See the yarn.fail-fast and "
operator|+
literal|"yarn.resourcemanager.fail-fast properties."
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|event
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring state store operation failure because the "
operator|+
literal|"resource manager is not configured to fail fast. See the "
operator|+
literal|"yarn.fail-fast and yarn.resourcemanager.fail-fast "
operator|+
literal|"properties."
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Shutting down the resource manager."
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|event
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Transition to standby state in a new thread. The transition operation is    * asynchronous to avoid deadlock caused by cyclic dependency.    */
DECL|method|handleTransitionToStandByInNewThread ()
specifier|private
name|void
name|handleTransitionToStandByInNewThread
parameter_list|()
block|{
name|Thread
name|standByTransitionThread
init|=
operator|new
name|Thread
argument_list|(
name|activeServices
operator|.
name|standByTransitionRunnable
argument_list|)
decl_stmt|;
name|standByTransitionThread
operator|.
name|setName
argument_list|(
literal|"StandByTransitionThread"
argument_list|)
expr_stmt|;
name|standByTransitionThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * The class to transition RM to standby state. The same    * {@link StandByTransitionRunnable} object could be used in multiple threads,    * but runs only once. That's because RM can go back to active state after    * transition to standby state, the same runnable in the old context can't    * transition RM to standby state again. A new runnable is created every time    * RM transitions to active state.    */
DECL|class|StandByTransitionRunnable
specifier|private
class|class
name|StandByTransitionRunnable
implements|implements
name|Runnable
block|{
comment|// The atomic variable to make sure multiple threads with the same runnable
comment|// run only once.
DECL|field|hasAlreadyRun
specifier|private
specifier|final
name|AtomicBoolean
name|hasAlreadyRun
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Run this only once, even if multiple threads end up triggering
comment|// this simultaneously.
if|if
condition|(
name|hasAlreadyRun
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Transition to standby and reinit active services
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning RM to Standby mode"
argument_list|)
expr_stmt|;
name|transitionToStandby
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EmbeddedElector
name|elector
init|=
name|rmContext
operator|.
name|getLeaderElectorService
argument_list|()
decl_stmt|;
if|if
condition|(
name|elector
operator|!=
literal|null
condition|)
block|{
name|elector
operator|.
name|rejoinElection
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Failed to transition RM to Standby mode."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Private
DECL|class|ApplicationEventDispatcher
specifier|public
specifier|static
specifier|final
class|class
name|ApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppEvent
argument_list|>
block|{
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|ApplicationEventDispatcher (RMContext rmContext)
specifier|public
name|ApplicationEventDispatcher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|ApplicationId
name|appID
init|=
name|event
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmApp
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|appID
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Private
DECL|class|ApplicationAttemptEventDispatcher
specifier|public
specifier|static
specifier|final
class|class
name|ApplicationAttemptEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppAttemptEvent
argument_list|>
block|{
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|ApplicationAttemptEventDispatcher (RMContext rmContext)
specifier|public
name|ApplicationAttemptEventDispatcher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptID
init|=
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|ApplicationId
name|appAttemptId
init|=
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
name|RMAppAttempt
name|rmAppAttempt
init|=
name|rmApp
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmAppAttempt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmAppAttempt
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for applicationAttempt "
operator|+
name|appAttemptId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|!=
literal|null
operator|&&
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
operator|&&
name|event
operator|.
name|getType
argument_list|()
operator|==
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
condition|)
block|{
comment|// For work-preserving AM restart, failed attempts are still
comment|// capturing CONTAINER_FINISHED events and record the finished
comment|// containers which will be used by current attempt.
comment|// We just keep 'yarn.resourcemanager.am.max-attempts' in
comment|// RMStateStore. If the finished container's attempt is deleted, we
comment|// use the first attempt in app.attempts to deal with these events.
name|RMAppAttempt
name|previousFailedAttempt
init|=
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousFailedAttempt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" handled by "
operator|+
name|previousFailedAttempt
argument_list|)
expr_stmt|;
name|previousFailedAttempt
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for applicationAttempt "
operator|+
name|appAttemptId
operator|+
literal|" with "
operator|+
name|previousFailedAttempt
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" not handled, because previousFailedAttempt is null"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Private
DECL|class|NodeEventDispatcher
specifier|public
specifier|static
specifier|final
class|class
name|NodeEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
block|{
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|NodeEventDispatcher (RMContext rmContext)
specifier|public
name|NodeEventDispatcher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMNodeEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|event
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|RMNode
name|node
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
operator|)
name|node
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for node "
operator|+
name|nodeId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Return a HttpServer.Builder that the journalnode / namenode / secondary    * namenode can use to initialize their HTTP / HTTPS server.    *    * @param conf configuration object    * @param httpAddr HTTP address    * @param httpsAddr HTTPS address    * @param name  Name of the server    * @throws IOException from Builder    * @return builder object    */
DECL|method|httpServerTemplateForRM (Configuration conf, final InetSocketAddress httpAddr, final InetSocketAddress httpsAddr, String name)
specifier|public
specifier|static
name|HttpServer2
operator|.
name|Builder
name|httpServerTemplateForRM
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|httpAddr
parameter_list|,
specifier|final
name|InetSocketAddress
name|httpsAddr
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setSecurityEnabled
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpAddr
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpAddr
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Web-server for "
operator|+
name|name
operator|+
literal|" at: "
operator|+
name|uri
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|startWepApp ()
specifier|protected
name|void
name|startWepApp
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceConfig
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|RMWebAppUtil
operator|.
name|setupSecurityAndFilters
argument_list|(
name|conf
argument_list|,
name|getClientRMService
argument_list|()
operator|.
name|rmDTSecretManager
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_API_SERVICES_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|String
name|apiPackages
init|=
literal|"org.apache.hadoop.yarn.service.webapp;"
operator|+
literal|"org.apache.hadoop.yarn.webapp"
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"com.sun.jersey.config.property.resourceConfigClass"
argument_list|,
literal|"com.sun.jersey.api.core.PackagesResourceConfig"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"com.sun.jersey.config.property.packages"
argument_list|,
name|apiPackages
argument_list|)
expr_stmt|;
block|}
name|Builder
argument_list|<
name|ApplicationMasterService
argument_list|>
name|builder
init|=
name|WebApps
operator|.
name|$for
argument_list|(
literal|"cluster"
argument_list|,
name|ApplicationMasterService
operator|.
name|class
argument_list|,
name|masterService
argument_list|,
literal|"ws"
argument_list|)
operator|.
name|with
argument_list|(
name|conf
argument_list|)
operator|.
name|withServlet
argument_list|(
literal|"API-Service"
argument_list|,
literal|"/app/*"
argument_list|,
name|ServletContainer
operator|.
name|class
argument_list|,
name|params
argument_list|)
operator|.
name|withHttpSpnegoPrincipalKey
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_SPNEGO_USER_NAME_KEY
argument_list|)
operator|.
name|withHttpSpnegoKeytabKey
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
argument_list|)
operator|.
name|withCSRFProtection
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CSRF_PREFIX
argument_list|)
operator|.
name|withXFSProtection
argument_list|(
name|YarnConfiguration
operator|.
name|RM_XFS_PREFIX
argument_list|)
operator|.
name|at
argument_list|(
name|webAppAddress
argument_list|)
decl_stmt|;
name|String
name|proxyHostAndPort
init|=
name|rmContext
operator|.
name|getProxyHostAndPort
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
operator|.
name|equals
argument_list|(
name|proxyHostAndPort
argument_list|)
condition|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|fetcher
operator|=
operator|new
name|AppReportFetcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fetcher
operator|=
operator|new
name|AppReportFetcher
argument_list|(
name|conf
argument_list|,
name|getClientRMService
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|withServlet
argument_list|(
name|ProxyUriUtils
operator|.
name|PROXY_SERVLET_NAME
argument_list|,
name|ProxyUriUtils
operator|.
name|PROXY_PATH_SPEC
argument_list|,
name|WebAppProxyServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withAttribute
argument_list|(
name|WebAppProxy
operator|.
name|FETCHER_ATTRIBUTE
argument_list|,
name|fetcher
argument_list|)
expr_stmt|;
name|String
index|[]
name|proxyParts
init|=
name|proxyHostAndPort
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withAttribute
argument_list|(
name|WebAppProxy
operator|.
name|PROXY_HOST_ATTRIBUTE
argument_list|,
name|proxyParts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|WebAppContext
name|uiWebAppContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_WEBAPP_UI2_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_WEBAPP_UI2_ENABLE
argument_list|)
condition|)
block|{
name|String
name|onDiskPath
init|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_WEBAPP_UI2_WARFILE_PATH
argument_list|)
decl_stmt|;
name|uiWebAppContext
operator|=
operator|new
name|WebAppContext
argument_list|()
expr_stmt|;
name|uiWebAppContext
operator|.
name|setContextPath
argument_list|(
name|UI2_WEBAPP_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|onDiskPath
condition|)
block|{
name|String
name|war
init|=
literal|"hadoop-yarn-ui-"
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|".war"
decl_stmt|;
name|URLClassLoader
name|cl
init|=
operator|(
name|URLClassLoader
operator|)
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|cl
operator|.
name|findResource
argument_list|(
name|war
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|url
condition|)
block|{
name|onDiskPath
operator|=
name|getWebAppsPath
argument_list|(
literal|"ui2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onDiskPath
operator|=
name|url
operator|.
name|getFile
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|onDiskPath
operator|==
literal|null
operator|||
name|onDiskPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No war file or webapps found for ui2 !"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|onDiskPath
operator|.
name|endsWith
argument_list|(
literal|".war"
argument_list|)
condition|)
block|{
name|uiWebAppContext
operator|.
name|setWar
argument_list|(
name|onDiskPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using war file at: "
operator|+
name|onDiskPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uiWebAppContext
operator|.
name|setResourceBase
argument_list|(
name|onDiskPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using webapps at: "
operator|+
name|onDiskPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|webApp
operator|=
name|builder
operator|.
name|start
argument_list|(
operator|new
name|RMWebApp
argument_list|(
name|this
argument_list|)
argument_list|,
name|uiWebAppContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getWebAppsPath (String appName)
specifier|private
name|String
name|getWebAppsPath
parameter_list|(
name|String
name|appName
parameter_list|)
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"webapps/"
operator|+
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Helper method to create and init {@link #activeServices}. This creates an    * instance of {@link RMActiveServices} and initializes it.    *    * @param fromActive Indicates if the call is from the active state transition    *                   or the RM initialization.    */
DECL|method|createAndInitActiveServices (boolean fromActive)
specifier|protected
name|void
name|createAndInitActiveServices
parameter_list|(
name|boolean
name|fromActive
parameter_list|)
block|{
name|activeServices
operator|=
operator|new
name|RMActiveServices
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|activeServices
operator|.
name|fromActive
operator|=
name|fromActive
expr_stmt|;
name|activeServices
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method to start {@link #activeServices}.    * @throws Exception    */
DECL|method|startActiveServices ()
name|void
name|startActiveServices
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|activeServices
operator|!=
literal|null
condition|)
block|{
name|clusterTimeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|activeServices
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to stop {@link #activeServices}.    * @throws Exception    */
DECL|method|stopActiveServices ()
name|void
name|stopActiveServices
parameter_list|()
block|{
if|if
condition|(
name|activeServices
operator|!=
literal|null
condition|)
block|{
name|activeServices
operator|.
name|stop
argument_list|()
expr_stmt|;
name|activeServices
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|reinitialize (boolean initialize)
name|void
name|reinitialize
parameter_list|(
name|boolean
name|initialize
parameter_list|)
block|{
name|ClusterMetrics
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
if|if
condition|(
name|initialize
condition|)
block|{
name|resetRMContext
argument_list|()
expr_stmt|;
name|createAndInitActiveServices
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|areActiveServicesRunning ()
specifier|protected
name|boolean
name|areActiveServicesRunning
parameter_list|()
block|{
return|return
name|activeServices
operator|!=
literal|null
operator|&&
name|activeServices
operator|.
name|isInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
return|;
block|}
DECL|method|transitionToActive ()
specifier|synchronized
name|void
name|transitionToActive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Already in active state"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning to active state"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmLoginUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startActiveServices
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reinitialize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioned to active state"
argument_list|)
expr_stmt|;
block|}
DECL|method|transitionToStandby (boolean initialize)
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|boolean
name|initialize
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Already in standby state"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning to standby state"
argument_list|)
expr_stmt|;
name|HAServiceState
name|state
init|=
name|rmContext
operator|.
name|getHAServiceState
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
name|stopActiveServices
argument_list|()
expr_stmt|;
name|reinitialize
argument_list|(
name|initialize
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioned to standby state"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|rmContext
operator|.
name|isHAEnabled
argument_list|()
condition|)
block|{
name|transitionToStandby
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transitionToActive
argument_list|()
expr_stmt|;
block|}
name|startWepApp
argument_list|()
expr_stmt|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|IS_MINI_YARN_CLUSTER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|int
name|port
init|=
name|webApp
operator|.
name|port
argument_list|()
decl_stmt|;
name|WebAppUtils
operator|.
name|setRMWebAppPort
argument_list|(
name|conf
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
DECL|method|doSecureLogin ()
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|socAddr
init|=
name|getBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_KEYTAB
argument_list|,
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
name|socAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// if security is enable, set rmLoginUGI as UGI of loginUser
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|rmLoginUGI
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|webApp
operator|!=
literal|null
condition|)
block|{
name|webApp
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fetcher
operator|!=
literal|null
condition|)
block|{
name|fetcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|configurationProvider
operator|!=
literal|null
condition|)
block|{
name|configurationProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|zkManager
operator|!=
literal|null
condition|)
block|{
name|zkManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|transitionToStandby
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceState
operator|.
name|STOPPING
argument_list|)
expr_stmt|;
block|}
DECL|method|createResourceTrackerService ()
specifier|protected
name|ResourceTrackerService
name|createResourceTrackerService
parameter_list|()
block|{
return|return
operator|new
name|ResourceTrackerService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|nodesListManager
argument_list|,
name|this
operator|.
name|nmLivelinessMonitor
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createClientRMService ()
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createApplicationMasterService ()
specifier|protected
name|ApplicationMasterService
name|createApplicationMasterService
parameter_list|()
block|{
name|Configuration
name|config
init|=
name|this
operator|.
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|isOpportunisticContainerAllocationEnabled
argument_list|(
name|config
argument_list|)
operator|||
name|YarnConfiguration
operator|.
name|isDistSchedulingEnabled
argument_list|(
name|config
argument_list|)
condition|)
block|{
if|if
condition|(
name|YarnConfiguration
operator|.
name|isDistSchedulingEnabled
argument_list|(
name|config
argument_list|)
operator|&&
operator|!
name|YarnConfiguration
operator|.
name|isOpportunisticContainerAllocationEnabled
argument_list|(
name|config
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid parameters: opportunistic container allocation has to "
operator|+
literal|"be enabled when distributed scheduling is enabled."
argument_list|)
throw|;
block|}
name|OpportunisticContainerAllocatorAMService
name|oppContainerAllocatingAMService
init|=
operator|new
name|OpportunisticContainerAllocatorAMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|EventDispatcher
name|oppContainerAllocEventDispatcher
init|=
operator|new
name|EventDispatcher
argument_list|(
name|oppContainerAllocatingAMService
argument_list|,
name|OpportunisticContainerAllocatorAMService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add an event dispatcher for the
comment|// OpportunisticContainerAllocatorAMService to handle node
comment|// additions, updates and removals. Since the SchedulerEvent is currently
comment|// a super set of theses, we register interest for it.
name|addService
argument_list|(
name|oppContainerAllocEventDispatcher
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
name|oppContainerAllocEventDispatcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|setContainerQueueLimitCalculator
argument_list|(
name|oppContainerAllocatingAMService
operator|.
name|getNodeManagerQueueLimitCalculator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|oppContainerAllocatingAMService
return|;
block|}
return|return
operator|new
name|ApplicationMasterService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|)
return|;
block|}
DECL|method|createAdminService ()
specifier|protected
name|AdminService
name|createAdminService
parameter_list|()
block|{
return|return
operator|new
name|AdminService
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createRMSecretManagerService ()
specifier|protected
name|RMSecretManagerService
name|createRMSecretManagerService
parameter_list|()
block|{
return|return
operator|new
name|RMSecretManagerService
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
return|;
block|}
comment|/**    * Create RMDelegatedNodeLabelsUpdater based on configuration.    */
DECL|method|createRMDelegatedNodeLabelsUpdater ()
specifier|protected
name|RMDelegatedNodeLabelsUpdater
name|createRMDelegatedNodeLabelsUpdater
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NODE_LABELS_ENABLED
argument_list|)
operator|&&
name|YarnConfiguration
operator|.
name|isDelegatedCentralizedNodeLabelConfiguration
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
operator|new
name|RMDelegatedNodeLabelsUpdater
argument_list|(
name|rmContext
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Private
DECL|method|getClientRMService ()
specifier|public
name|ClientRMService
name|getClientRMService
parameter_list|()
block|{
return|return
name|this
operator|.
name|clientRM
return|;
block|}
comment|/**    * return the scheduler.    * @return the scheduler for the Resource Manager.    */
annotation|@
name|Private
DECL|method|getResourceScheduler ()
specifier|public
name|ResourceScheduler
name|getResourceScheduler
parameter_list|()
block|{
return|return
name|this
operator|.
name|scheduler
return|;
block|}
comment|/**    * return the resource tracking component.    * @return the resource tracking component.    */
annotation|@
name|Private
DECL|method|getResourceTrackerService ()
specifier|public
name|ResourceTrackerService
name|getResourceTrackerService
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceTracker
return|;
block|}
annotation|@
name|Private
DECL|method|getApplicationMasterService ()
specifier|public
name|ApplicationMasterService
name|getApplicationMasterService
parameter_list|()
block|{
return|return
name|this
operator|.
name|masterService
return|;
block|}
annotation|@
name|Private
DECL|method|getApplicationACLsManager ()
specifier|public
name|ApplicationACLsManager
name|getApplicationACLsManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationACLsManager
return|;
block|}
annotation|@
name|Private
DECL|method|getQueueACLsManager ()
specifier|public
name|QueueACLsManager
name|getQueueACLsManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueACLsManager
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getFederationStateStoreService ()
specifier|public
name|FederationStateStoreService
name|getFederationStateStoreService
parameter_list|()
block|{
return|return
name|this
operator|.
name|federationStateStoreService
return|;
block|}
annotation|@
name|Private
DECL|method|getWebapp ()
name|WebApp
name|getWebapp
parameter_list|()
block|{
return|return
name|this
operator|.
name|webApp
return|;
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
comment|// recover RMdelegationTokenSecretManager
name|rmContext
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// recover AMRMTokenSecretManager
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// recover reservations
if|if
condition|(
name|reservationSystem
operator|!=
literal|null
condition|)
block|{
name|reservationSystem
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
comment|// recover applications
name|rmAppManager
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|setSchedulerRecoveryStartAndWaitTime
argument_list|(
name|state
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|GenericOptionsParser
name|hParser
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|argv
operator|=
name|hParser
operator|.
name|getRemainingArgs
argument_list|()
expr_stmt|;
comment|// If -format-state-store, then delete RMStateStore; else startup normally
if|if
condition|(
name|argv
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|argv
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-format-state-store"
argument_list|)
condition|)
block|{
name|deleteRMStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-remove-application-from-state-store"
argument_list|)
operator|&&
name|argv
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|removeApplication
argument_list|(
name|conf
argument_list|,
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ResourceManager
name|resourceManager
init|=
operator|new
name|ResourceManager
argument_list|()
decl_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|CompositeServiceShutdownHook
argument_list|(
name|resourceManager
argument_list|)
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error starting ResourceManager"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register the handlers for alwaysOn services    */
DECL|method|setupDispatcher ()
specifier|private
name|Dispatcher
name|setupDispatcher
parameter_list|()
block|{
name|Dispatcher
name|dispatcher
init|=
name|createDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMFatalEventType
operator|.
name|class
argument_list|,
operator|new
name|ResourceManager
operator|.
name|RMFatalEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
DECL|method|resetRMContext ()
specifier|private
name|void
name|resetRMContext
parameter_list|()
block|{
name|RMContextImpl
name|rmContextImpl
init|=
operator|new
name|RMContextImpl
argument_list|()
decl_stmt|;
comment|// transfer service context to new RM service Context
name|rmContextImpl
operator|.
name|setServiceContext
argument_list|(
name|rmContext
operator|.
name|getServiceContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset dispatcher
name|Dispatcher
name|dispatcher
init|=
name|setupDispatcher
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Service
operator|)
name|dispatcher
operator|)
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|dispatcher
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|removeService
argument_list|(
operator|(
name|Service
operator|)
name|rmDispatcher
argument_list|)
expr_stmt|;
comment|// Need to stop previous rmDispatcher before assigning new dispatcher
comment|// otherwise causes "AsyncDispatcher event handler" thread leak
operator|(
operator|(
name|Service
operator|)
name|rmDispatcher
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|=
name|dispatcher
expr_stmt|;
name|addIfService
argument_list|(
name|rmDispatcher
argument_list|)
expr_stmt|;
name|rmContextImpl
operator|.
name|setDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|rmContextImpl
expr_stmt|;
block|}
DECL|method|setSchedulerRecoveryStartAndWaitTime (RMState state, Configuration conf)
specifier|private
name|void
name|setSchedulerRecoveryStartAndWaitTime
parameter_list|(
name|RMState
name|state
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|waitTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setSchedulerRecoveryStartAndWaitTime
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Retrieve RM bind address from configuration    *     * @param conf    * @return InetSocketAddress    */
DECL|method|getBindAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
return|;
block|}
comment|/**    * Deletes the RMStateStore    *    * @param conf    * @throws Exception    */
annotation|@
name|VisibleForTesting
DECL|method|deleteRMStateStore (Configuration conf)
specifier|static
name|void
name|deleteRMStateStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|rmStore
init|=
name|RMStateStoreFactory
operator|.
name|getStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rmStore
operator|.
name|setResourceManager
argument_list|(
operator|new
name|ResourceManager
argument_list|()
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting ResourceManager state store..."
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|deleteStore
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"State store deleted"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmStore
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|removeApplication (Configuration conf, String applicationId)
specifier|static
name|void
name|removeApplication
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|applicationId
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|rmStore
init|=
name|RMStateStoreFactory
operator|.
name|getStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rmStore
operator|.
name|setResourceManager
argument_list|(
operator|new
name|ResourceManager
argument_list|()
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationId
name|removeAppId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting application "
operator|+
name|removeAppId
operator|+
literal|" from state store"
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|removeApplication
argument_list|(
name|removeAppId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application is deleted from state store"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmStore
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|printUsage (PrintStream out)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Usage: yarn resourcemanager [-format-state-store]"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                            "
operator|+
literal|"[-remove-application-from-state-store<appId>]"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|createRMAppLifetimeMonitor ()
specifier|protected
name|RMAppLifetimeMonitor
name|createRMAppLifetimeMonitor
parameter_list|()
block|{
return|return
operator|new
name|RMAppLifetimeMonitor
argument_list|(
name|this
operator|.
name|rmContext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

