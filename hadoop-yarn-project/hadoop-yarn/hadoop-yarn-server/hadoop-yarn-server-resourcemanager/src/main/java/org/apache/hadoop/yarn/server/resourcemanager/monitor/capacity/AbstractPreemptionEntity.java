begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Abstract temporary data-structure for tracking resource availability,pending  * resource need, current utilization for app/queue.  */
end_comment

begin_class
DECL|class|AbstractPreemptionEntity
specifier|public
class|class
name|AbstractPreemptionEntity
block|{
comment|// Following fields are copied from scheduler
DECL|field|queueName
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|current
specifier|protected
specifier|final
name|Resource
name|current
decl_stmt|;
DECL|field|amUsed
specifier|protected
specifier|final
name|Resource
name|amUsed
decl_stmt|;
DECL|field|reserved
specifier|protected
specifier|final
name|Resource
name|reserved
decl_stmt|;
DECL|field|pending
specifier|protected
name|Resource
name|pending
decl_stmt|;
comment|// Following fields are settled and used by candidate selection policies
DECL|field|idealAssigned
name|Resource
name|idealAssigned
decl_stmt|;
DECL|field|toBePreempted
name|Resource
name|toBePreempted
decl_stmt|;
DECL|field|selected
name|Resource
name|selected
decl_stmt|;
DECL|field|actuallyToBePreempted
specifier|private
name|Resource
name|actuallyToBePreempted
decl_stmt|;
DECL|field|toBePreemptFromOther
specifier|private
name|Resource
name|toBePreemptFromOther
decl_stmt|;
DECL|method|AbstractPreemptionEntity (String queueName, Resource usedPerPartition, Resource amUsedPerPartition, Resource reserved, Resource pendingPerPartition)
name|AbstractPreemptionEntity
parameter_list|(
name|String
name|queueName
parameter_list|,
name|Resource
name|usedPerPartition
parameter_list|,
name|Resource
name|amUsedPerPartition
parameter_list|,
name|Resource
name|reserved
parameter_list|,
name|Resource
name|pendingPerPartition
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|usedPerPartition
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|pendingPerPartition
expr_stmt|;
name|this
operator|.
name|reserved
operator|=
name|reserved
expr_stmt|;
name|this
operator|.
name|amUsed
operator|=
name|amUsedPerPartition
expr_stmt|;
name|this
operator|.
name|idealAssigned
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|actuallyToBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|toBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|toBePreemptFromOther
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|selected
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getUsed ()
specifier|public
name|Resource
name|getUsed
parameter_list|()
block|{
return|return
name|current
return|;
block|}
DECL|method|getUsedDeductAM ()
specifier|public
name|Resource
name|getUsedDeductAM
parameter_list|()
block|{
return|return
name|Resources
operator|.
name|subtract
argument_list|(
name|current
argument_list|,
name|amUsed
argument_list|)
return|;
block|}
DECL|method|getAMUsed ()
specifier|public
name|Resource
name|getAMUsed
parameter_list|()
block|{
return|return
name|amUsed
return|;
block|}
DECL|method|getPending ()
specifier|public
name|Resource
name|getPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
DECL|method|getReserved ()
specifier|public
name|Resource
name|getReserved
parameter_list|()
block|{
return|return
name|reserved
return|;
block|}
DECL|method|getActuallyToBePreempted ()
specifier|public
name|Resource
name|getActuallyToBePreempted
parameter_list|()
block|{
return|return
name|actuallyToBePreempted
return|;
block|}
DECL|method|setActuallyToBePreempted (Resource actuallyToBePreempted)
specifier|public
name|void
name|setActuallyToBePreempted
parameter_list|(
name|Resource
name|actuallyToBePreempted
parameter_list|)
block|{
name|this
operator|.
name|actuallyToBePreempted
operator|=
name|actuallyToBePreempted
expr_stmt|;
block|}
DECL|method|getToBePreemptFromOther ()
specifier|public
name|Resource
name|getToBePreemptFromOther
parameter_list|()
block|{
return|return
name|toBePreemptFromOther
return|;
block|}
DECL|method|setToBePreemptFromOther (Resource toBePreemptFromOther)
specifier|public
name|void
name|setToBePreemptFromOther
parameter_list|(
name|Resource
name|toBePreemptFromOther
parameter_list|)
block|{
name|this
operator|.
name|toBePreemptFromOther
operator|=
name|toBePreemptFromOther
expr_stmt|;
block|}
block|}
end_class

end_unit

