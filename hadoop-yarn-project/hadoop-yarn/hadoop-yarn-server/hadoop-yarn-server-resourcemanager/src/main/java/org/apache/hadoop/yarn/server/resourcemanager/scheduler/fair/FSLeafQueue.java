begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
operator|.
name|none
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FSLeafQueue
specifier|public
class|class
name|FSLeafQueue
extends|extends
name|FSQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSLeafQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|EMPTY_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|FSQueue
argument_list|>
name|EMPTY_LIST
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|context
specifier|private
name|FSContext
name|context
decl_stmt|;
comment|// apps that are runnable
DECL|field|runnableApps
specifier|private
specifier|final
name|List
argument_list|<
name|FSAppAttempt
argument_list|>
name|runnableApps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nonRunnableApps
specifier|private
specifier|final
name|List
argument_list|<
name|FSAppAttempt
argument_list|>
name|nonRunnableApps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// get a lock with fair distribution for app list updates
DECL|field|rwl
specifier|private
specifier|final
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|rwl
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|rwl
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|demand
specifier|private
name|Resource
name|demand
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Variables used for preemption
DECL|field|lastTimeAtMinShare
specifier|private
name|long
name|lastTimeAtMinShare
decl_stmt|;
comment|// Track the AM resource usage for this queue
DECL|field|amResourceUsage
specifier|private
name|Resource
name|amResourceUsage
decl_stmt|;
DECL|field|activeUsersManager
specifier|private
specifier|final
name|ActiveUsersManager
name|activeUsersManager
decl_stmt|;
DECL|method|FSLeafQueue (String name, FairScheduler scheduler, FSParentQueue parent)
specifier|public
name|FSLeafQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|FairScheduler
name|scheduler
parameter_list|,
name|FSParentQueue
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|scheduler
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|scheduler
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|activeUsersManager
operator|=
operator|new
name|ActiveUsersManager
argument_list|(
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|amResourceUsage
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getMetrics
argument_list|()
operator|.
name|setAMResourceUsage
argument_list|(
name|amResourceUsage
argument_list|)
expr_stmt|;
block|}
DECL|method|addApp (FSAppAttempt app, boolean runnable)
name|void
name|addApp
parameter_list|(
name|FSAppAttempt
name|app
parameter_list|,
name|boolean
name|runnable
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|runnable
condition|)
block|{
name|runnableApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonRunnableApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// for testing
DECL|method|addAppSchedulable (FSAppAttempt appSched)
name|void
name|addAppSchedulable
parameter_list|(
name|FSAppAttempt
name|appSched
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|runnableApps
operator|.
name|add
argument_list|(
name|appSched
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Removes the given app from this queue.    * @return whether or not the app was runnable    */
DECL|method|removeApp (FSAppAttempt app)
name|boolean
name|removeApp
parameter_list|(
name|FSAppAttempt
name|app
parameter_list|)
block|{
name|boolean
name|runnable
init|=
literal|false
decl_stmt|;
comment|// Remove app from runnable/nonRunnable list while holding the write lock
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|runnable
operator|=
name|runnableApps
operator|.
name|remove
argument_list|(
name|app
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runnable
condition|)
block|{
comment|// removeNonRunnableApp acquires the write lock again, which is fine
if|if
condition|(
operator|!
name|removeNonRunnableApp
argument_list|(
name|app
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Given app to remove "
operator|+
name|app
operator|+
literal|" does not exist in queue "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update AM resource usage if needed. If isAMRunning is true, we're not
comment|// running an unmanaged AM.
if|if
condition|(
name|runnable
operator|&&
name|app
operator|.
name|isAmRunning
argument_list|()
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|amResourceUsage
argument_list|,
name|app
operator|.
name|getAMResource
argument_list|()
argument_list|)
expr_stmt|;
name|getMetrics
argument_list|()
operator|.
name|setAMResourceUsage
argument_list|(
name|amResourceUsage
argument_list|)
expr_stmt|;
block|}
return|return
name|runnable
return|;
block|}
comment|/**    * Removes the given app if it is non-runnable and belongs to this queue    * @return true if the app is removed, false otherwise    */
DECL|method|removeNonRunnableApp (FSAppAttempt app)
name|boolean
name|removeNonRunnableApp
parameter_list|(
name|FSAppAttempt
name|app
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nonRunnableApps
operator|.
name|remove
argument_list|(
name|app
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isRunnableApp (FSAppAttempt attempt)
name|boolean
name|isRunnableApp
parameter_list|(
name|FSAppAttempt
name|attempt
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|runnableApps
operator|.
name|contains
argument_list|(
name|attempt
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isNonRunnableApp (FSAppAttempt attempt)
name|boolean
name|isNonRunnableApp
parameter_list|(
name|FSAppAttempt
name|attempt
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nonRunnableApps
operator|.
name|contains
argument_list|(
name|attempt
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCopyOfNonRunnableAppSchedulables ()
name|List
argument_list|<
name|FSAppAttempt
argument_list|>
name|getCopyOfNonRunnableAppSchedulables
parameter_list|()
block|{
name|List
argument_list|<
name|FSAppAttempt
argument_list|>
name|appsToReturn
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|appsToReturn
operator|.
name|addAll
argument_list|(
name|nonRunnableApps
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|appsToReturn
return|;
block|}
annotation|@
name|Override
DECL|method|collectSchedulerApplications ( Collection<ApplicationAttemptId> apps)
specifier|public
name|void
name|collectSchedulerApplications
parameter_list|(
name|Collection
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FSAppAttempt
name|appSched
range|:
name|runnableApps
control|)
block|{
name|apps
operator|.
name|add
argument_list|(
name|appSched
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FSAppAttempt
name|appSched
range|:
name|nonRunnableApps
control|)
block|{
name|apps
operator|.
name|add
argument_list|(
name|appSched
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setPolicy (SchedulingPolicy policy)
specifier|public
name|void
name|setPolicy
parameter_list|(
name|SchedulingPolicy
name|policy
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
if|if
condition|(
operator|!
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
condition|)
block|{
name|throwPolicyDoesnotApplyException
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateInternal (boolean checkStarvation)
specifier|public
name|void
name|updateInternal
parameter_list|(
name|boolean
name|checkStarvation
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|policy
operator|.
name|computeShares
argument_list|(
name|runnableApps
argument_list|,
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkStarvation
condition|)
block|{
name|updateStarvedApps
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to identify starved applications. This needs to be called    * ONLY from {@link #updateInternal}, after the application shares    * are updated.    *    * A queue can be starving due to fairshare or minshare.    *    * Minshare is defined only on the queue and not the applications.    * Fairshare is defined for both the queue and the applications.    *    * If this queue is starved due to minshare, we need to identify the most    * deserving apps if they themselves are not starved due to fairshare.    *    * If this queue is starving due to fairshare, there must be at least    * one application that is starved. And, even if the queue is not    * starved due to fairshare, there might still be starved applications.    */
DECL|method|updateStarvedApps ()
specifier|private
name|void
name|updateStarvedApps
parameter_list|()
block|{
comment|// First identify starved applications and track total amount of
comment|// starvation (in resources)
name|Resource
name|fairShareStarvation
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|none
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fetch apps with unmet demand sorted by fairshare starvation
name|TreeSet
argument_list|<
name|FSAppAttempt
argument_list|>
name|appsWithDemand
init|=
name|fetchAppsWithDemand
argument_list|()
decl_stmt|;
for|for
control|(
name|FSAppAttempt
name|app
range|:
name|appsWithDemand
control|)
block|{
name|Resource
name|appStarvation
init|=
name|app
operator|.
name|fairShareStarvation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|appStarvation
argument_list|)
condition|)
block|{
name|context
operator|.
name|getStarvedApps
argument_list|()
operator|.
name|addStarvedApp
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|fairShareStarvation
argument_list|,
name|appStarvation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Compute extent of minshare starvation
name|Resource
name|minShareStarvation
init|=
name|minShareStarvation
argument_list|()
decl_stmt|;
comment|// Compute minshare starvation that is not subsumed by fairshare starvation
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|minShareStarvation
argument_list|,
name|fairShareStarvation
argument_list|)
expr_stmt|;
comment|// Keep adding apps to the starved list until the unmet demand goes over
comment|// the remaining minshare
for|for
control|(
name|FSAppAttempt
name|app
range|:
name|appsWithDemand
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|policy
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|minShareStarvation
argument_list|,
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|appPendingDemand
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|app
operator|.
name|getDemand
argument_list|()
argument_list|,
name|app
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|minShareStarvation
argument_list|,
name|appPendingDemand
argument_list|)
expr_stmt|;
name|app
operator|.
name|setMinshareStarvation
argument_list|(
name|appPendingDemand
argument_list|)
expr_stmt|;
name|context
operator|.
name|getStarvedApps
argument_list|()
operator|.
name|addStarvedApp
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Reset minshare starvation in case we had set it in a previous
comment|// iteration
name|app
operator|.
name|resetMinshareStarvation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|Resource
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUsage ()
specifier|public
name|Resource
name|getResourceUsage
parameter_list|()
block|{
name|Resource
name|usage
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FSAppAttempt
name|app
range|:
name|runnableApps
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|usage
argument_list|,
name|app
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FSAppAttempt
name|app
range|:
name|nonRunnableApps
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|usage
argument_list|,
name|app
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|usage
return|;
block|}
DECL|method|getAmResourceUsage ()
name|Resource
name|getAmResourceUsage
parameter_list|()
block|{
return|return
name|amResourceUsage
return|;
block|}
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{
comment|// Compute demand by iterating through apps in the queue
comment|// Limit demand to maxResources
name|demand
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FSAppAttempt
name|sched
range|:
name|runnableApps
control|)
block|{
name|updateDemandForApp
argument_list|(
name|sched
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FSAppAttempt
name|sched
range|:
name|nonRunnableApps
control|)
block|{
name|updateDemandForApp
argument_list|(
name|sched
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Cap demand to maxShare to limit allocation to maxShare
name|demand
operator|=
name|Resources
operator|.
name|componentwiseMin
argument_list|(
name|demand
argument_list|,
name|maxShare
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The updated demand for "
operator|+
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|demand
operator|+
literal|"; the max is "
operator|+
name|maxShare
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The updated fairshare for "
operator|+
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateDemandForApp (FSAppAttempt sched)
specifier|private
name|void
name|updateDemandForApp
parameter_list|(
name|FSAppAttempt
name|sched
parameter_list|)
block|{
name|sched
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|Resource
name|toAdd
init|=
name|sched
operator|.
name|getDemand
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Counting resource from "
operator|+
name|sched
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|toAdd
operator|+
literal|"; Total resource demand for "
operator|+
name|getName
argument_list|()
operator|+
literal|" now "
operator|+
name|demand
argument_list|)
expr_stmt|;
block|}
name|demand
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|demand
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assignContainer (FSSchedulerNode node)
specifier|public
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
name|Resource
name|assigned
init|=
name|none
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" offered to queue: "
operator|+
name|getName
argument_list|()
operator|+
literal|" fairShare: "
operator|+
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignContainerPreCheck
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
name|assigned
return|;
block|}
for|for
control|(
name|FSAppAttempt
name|sched
range|:
name|fetchAppsWithDemand
argument_list|()
control|)
block|{
if|if
condition|(
name|SchedulerAppUtils
operator|.
name|isPlaceBlacklisted
argument_list|(
name|sched
argument_list|,
name|node
argument_list|,
name|LOG
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assigned
operator|=
name|sched
operator|.
name|assignContainer
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assigned
operator|.
name|equals
argument_list|(
name|none
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigned container in queue:"
operator|+
name|getName
argument_list|()
operator|+
literal|" "
operator|+
literal|"container:"
operator|+
name|assigned
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|assigned
return|;
block|}
DECL|method|fetchAppsWithDemand ()
specifier|private
name|TreeSet
argument_list|<
name|FSAppAttempt
argument_list|>
name|fetchAppsWithDemand
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|FSAppAttempt
argument_list|>
name|pendingForResourceApps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|policy
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FSAppAttempt
name|app
range|:
name|runnableApps
control|)
block|{
name|Resource
name|pending
init|=
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pending
operator|.
name|equals
argument_list|(
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|pendingForResourceApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|pendingForResourceApps
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues ()
specifier|public
name|List
argument_list|<
name|FSQueue
argument_list|>
name|getChildQueues
parameter_list|()
block|{
return|return
name|EMPTY_LIST
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAclInfo (UserGroupInformation user)
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|QueueUserACLInfo
name|userAclInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueUserACLInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueACL
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueACL
name|operation
range|:
name|QueueACL
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasAccess
argument_list|(
name|operation
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
name|userAclInfo
operator|.
name|setQueueName
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|userAclInfo
operator|.
name|setUserAcls
argument_list|(
name|operations
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|userAclInfo
argument_list|)
return|;
block|}
DECL|method|setLastTimeAtMinShare (long lastTimeAtMinShare)
specifier|private
name|void
name|setLastTimeAtMinShare
parameter_list|(
name|long
name|lastTimeAtMinShare
parameter_list|)
block|{
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|lastTimeAtMinShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumRunnableApps ()
specifier|public
name|int
name|getNumRunnableApps
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|runnableApps
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNumNonRunnableApps ()
name|int
name|getNumNonRunnableApps
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nonRunnableApps
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNumPendingApps ()
specifier|public
name|int
name|getNumPendingApps
parameter_list|()
block|{
name|int
name|numPendingApps
init|=
literal|0
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FSAppAttempt
name|attempt
range|:
name|runnableApps
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|numPendingApps
operator|++
expr_stmt|;
block|}
block|}
name|numPendingApps
operator|+=
name|nonRunnableApps
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|numPendingApps
return|;
block|}
comment|/**    * TODO: Based on how frequently this is called, we might want to club    * counting pending and active apps in the same method.    */
DECL|method|getNumActiveApps ()
specifier|public
name|int
name|getNumActiveApps
parameter_list|()
block|{
name|int
name|numActiveApps
init|=
literal|0
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FSAppAttempt
name|attempt
range|:
name|runnableApps
control|)
block|{
if|if
condition|(
operator|!
name|attempt
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|numActiveApps
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|numActiveApps
return|;
block|}
annotation|@
name|Override
DECL|method|getActiveUsersManager ()
specifier|public
name|ActiveUsersManager
name|getActiveUsersManager
parameter_list|()
block|{
return|return
name|activeUsersManager
return|;
block|}
comment|/**   * Compute the maximum resource AM can use. The value is the result of   * multiplying FairShare and maxAMShare. If FairShare is zero, use   * min(maxShare, available resource) instead to prevent zero value for   * maximum AM resource since it forbids any job running in the queue.   *   * @return the maximum resource AM can use   */
DECL|method|computeMaxAMResource ()
specifier|private
name|Resource
name|computeMaxAMResource
parameter_list|()
block|{
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|getFairShare
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxResource
operator|.
name|getMemorySize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|maxResource
operator|.
name|setMemorySize
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|,
name|getMaxShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxResource
operator|.
name|getVirtualCores
argument_list|()
operator|==
literal|0
condition|)
block|{
name|maxResource
operator|.
name|setVirtualCores
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|,
name|getMaxShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|multiply
argument_list|(
name|maxResource
argument_list|,
name|maxAMShare
argument_list|)
return|;
block|}
comment|/**    * Check whether this queue can run the Application Master under the    * maxAMShare limit.    *    * @param amResource resources required to run the AM    * @return true if this queue can run    */
DECL|method|canRunAppAM (Resource amResource)
specifier|public
name|boolean
name|canRunAppAM
parameter_list|(
name|Resource
name|amResource
parameter_list|)
block|{
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|maxAMShare
operator|-
operator|-
literal|1.0f
argument_list|)
operator|<
literal|0.0001
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Resource
name|maxAMResource
init|=
name|computeMaxAMResource
argument_list|()
decl_stmt|;
name|getMetrics
argument_list|()
operator|.
name|setMaxAMShare
argument_list|(
name|maxAMResource
argument_list|)
expr_stmt|;
name|Resource
name|ifRunAMResource
init|=
name|Resources
operator|.
name|add
argument_list|(
name|amResourceUsage
argument_list|,
name|amResource
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|fitsIn
argument_list|(
name|ifRunAMResource
argument_list|,
name|maxAMResource
argument_list|)
return|;
block|}
DECL|method|addAMResourceUsage (Resource amResource)
name|void
name|addAMResourceUsage
parameter_list|(
name|Resource
name|amResource
parameter_list|)
block|{
if|if
condition|(
name|amResource
operator|!=
literal|null
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|amResourceUsage
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|getMetrics
argument_list|()
operator|.
name|setAMResourceUsage
argument_list|(
name|amResourceUsage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recoverContainer (Resource clusterResource, SchedulerApplicationAttempt schedulerAttempt, RMContainer rmContainer)
specifier|public
name|void
name|recoverContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApplicationAttempt
name|schedulerAttempt
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/**    * Allows setting weight for a dynamically created queue.    * Currently only used for reservation based queues.    * @param weight queue weight    */
DECL|method|setWeights (float weight)
specifier|public
name|void
name|setWeights
parameter_list|(
name|float
name|weight
parameter_list|)
block|{
name|this
operator|.
name|weights
operator|=
operator|new
name|ResourceWeights
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method to compute the amount of minshare starvation.    *    * @return the extent of minshare starvation    */
DECL|method|minShareStarvation ()
specifier|private
name|Resource
name|minShareStarvation
parameter_list|()
block|{
comment|// If demand< minshare, we should use demand to determine starvation
name|Resource
name|desiredShare
init|=
name|Resources
operator|.
name|min
argument_list|(
name|policy
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|getMinShare
argument_list|()
argument_list|,
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|starvation
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|desiredShare
argument_list|,
name|getResourceUsage
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|starved
init|=
operator|!
name|Resources
operator|.
name|isNone
argument_list|(
name|starvation
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|starved
condition|)
block|{
comment|// Record that the queue is not starved
name|setLastTimeAtMinShare
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|now
operator|-
name|lastTimeAtMinShare
operator|<
name|getMinSharePreemptionTimeout
argument_list|()
condition|)
block|{
comment|// the queue is not starved for the preemption timeout
name|starvation
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|starvation
return|;
block|}
comment|/**    * Helper method for tests to check if a queue is starved for minShare.    * @return whether starved for minshare    */
annotation|@
name|VisibleForTesting
DECL|method|isStarvedForMinShare ()
specifier|private
name|boolean
name|isStarvedForMinShare
parameter_list|()
block|{
return|return
operator|!
name|Resources
operator|.
name|isNone
argument_list|(
name|minShareStarvation
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Helper method for tests to check if a queue is starved for fairshare.    * @return whether starved for fairshare    */
annotation|@
name|VisibleForTesting
DECL|method|isStarvedForFairShare ()
specifier|private
name|boolean
name|isStarvedForFairShare
parameter_list|()
block|{
for|for
control|(
name|FSAppAttempt
name|app
range|:
name|runnableApps
control|)
block|{
if|if
condition|(
name|app
operator|.
name|isStarvedForFairShare
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Helper method for tests to check if a queue is starved.    * @return whether starved for either minshare or fairshare    */
annotation|@
name|VisibleForTesting
DECL|method|isStarved ()
name|boolean
name|isStarved
parameter_list|()
block|{
return|return
name|isStarvedForMinShare
argument_list|()
operator|||
name|isStarvedForFairShare
argument_list|()
return|;
block|}
block|}
end_class

end_unit

