begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
DECL|package|queuemanagement
operator|.
name|queuemanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueManagementDynamicEditPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AbstractAutoCreatedLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AutoCreatedLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AutoCreatedLeafQueueConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AutoCreatedQueueManagementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ManagedParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueManagementChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueueUtils
operator|.
name|EPSILON
import|;
end_import

begin_comment
comment|/**  * Capacity Management policy for auto created leaf queues  *<p>  * Assigns capacity if available to leaf queues based on application  * submission order i.e leaf queues are assigned capacity in FCFS order based  * on application submission time.  Updates leaf queue capacities to 0 when  * there are no pending or running apps under that queue.  */
end_comment

begin_class
DECL|class|GuaranteedOrZeroCapacityOverTimePolicy
specifier|public
class|class
name|GuaranteedOrZeroCapacityOverTimePolicy
implements|implements
name|AutoCreatedQueueManagementPolicy
block|{
DECL|field|scheduler
specifier|private
name|CapacitySchedulerContext
name|scheduler
decl_stmt|;
DECL|field|managedParentQueue
specifier|private
name|ManagedParentQueue
name|managedParentQueue
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GuaranteedOrZeroCapacityOverTimePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|writeLock
specifier|private
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|readLock
specifier|private
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|parentQueueState
specifier|private
name|ParentQueueState
name|parentQueueState
init|=
operator|new
name|ParentQueueState
argument_list|()
decl_stmt|;
DECL|field|leafQueueTemplate
specifier|private
name|AutoCreatedLeafQueueConfig
name|leafQueueTemplate
decl_stmt|;
DECL|field|leafQueueTemplateCapacities
specifier|private
name|QueueCapacities
name|leafQueueTemplateCapacities
decl_stmt|;
DECL|field|leafQueueTemplateNodeLabels
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueueTemplateNodeLabels
decl_stmt|;
DECL|field|leafQueueState
specifier|private
name|LeafQueueState
name|leafQueueState
init|=
operator|new
name|LeafQueueState
argument_list|()
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
DECL|class|LeafQueueState
specifier|private
class|class
name|LeafQueueState
block|{
comment|//map of partition-> queueName->{leaf queue's state}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LeafQueueStatePerPartition
argument_list|>
argument_list|>
DECL|field|leafQueueStateMap
name|leafQueueStateMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|containsLeafQueue (String leafQueueName, String partition)
specifier|public
name|boolean
name|containsLeafQueue
parameter_list|(
name|String
name|leafQueueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
if|if
condition|(
name|leafQueueStateMap
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
return|return
name|leafQueueStateMap
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|.
name|containsKey
argument_list|(
name|leafQueueName
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|containsPartition (String partition)
specifier|private
name|boolean
name|containsPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
if|if
condition|(
name|leafQueueStateMap
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|addLeafQueueStateIfNotExists (String leafQueueName, String partition, LeafQueueStatePerPartition leafQueueState)
specifier|private
name|boolean
name|addLeafQueueStateIfNotExists
parameter_list|(
name|String
name|leafQueueName
parameter_list|,
name|String
name|partition
parameter_list|,
name|LeafQueueStatePerPartition
name|leafQueueState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|containsPartition
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|leafQueueStateMap
operator|.
name|put
argument_list|(
name|partition
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|containsLeafQueue
argument_list|(
name|leafQueueName
argument_list|,
name|partition
argument_list|)
condition|)
block|{
name|leafQueueStateMap
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|.
name|put
argument_list|(
name|leafQueueName
argument_list|,
name|leafQueueState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|createLeafQueueStateIfNotExists (LeafQueue leafQueue, String partition)
specifier|public
name|boolean
name|createLeafQueueStateIfNotExists
parameter_list|(
name|LeafQueue
name|leafQueue
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
return|return
name|addLeafQueueStateIfNotExists
argument_list|(
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|partition
argument_list|,
operator|new
name|LeafQueueStatePerPartition
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLeafQueueStatePerPartition ( String leafQueueName, String partition)
specifier|public
name|LeafQueueStatePerPartition
name|getLeafQueueStatePerPartition
parameter_list|(
name|String
name|leafQueueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
if|if
condition|(
name|leafQueueStateMap
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|leafQueueStateMap
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|.
name|get
argument_list|(
name|leafQueueName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LeafQueueStatePerPartition
argument_list|>
argument_list|>
DECL|method|getLeafQueueStateMap ()
name|getLeafQueueStateMap
parameter_list|()
block|{
return|return
name|leafQueueStateMap
return|;
block|}
DECL|method|clear ()
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|leafQueueStateMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LeafQueueStatePerPartition
specifier|private
class|class
name|LeafQueueStatePerPartition
block|{
DECL|field|isActive
specifier|private
name|AtomicBoolean
name|isActive
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|mostRecentActivationTime
specifier|private
name|long
name|mostRecentActivationTime
decl_stmt|;
DECL|field|mostRecentDeactivationTime
specifier|private
name|long
name|mostRecentDeactivationTime
decl_stmt|;
DECL|method|getMostRecentActivationTime ()
specifier|public
name|long
name|getMostRecentActivationTime
parameter_list|()
block|{
return|return
name|mostRecentActivationTime
return|;
block|}
DECL|method|getMostRecentDeactivationTime ()
specifier|public
name|long
name|getMostRecentDeactivationTime
parameter_list|()
block|{
return|return
name|mostRecentDeactivationTime
return|;
block|}
comment|/**      * Is the queue currently active or deactivated?      *      * @return true if Active else false      */
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|isActive
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|activate ()
specifier|private
name|boolean
name|activate
parameter_list|()
block|{
name|boolean
name|ret
init|=
name|isActive
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|mostRecentActivationTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|deactivate ()
specifier|private
name|boolean
name|deactivate
parameter_list|()
block|{
name|boolean
name|ret
init|=
name|isActive
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mostRecentDeactivationTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
DECL|class|ParentQueueState
specifier|private
class|class
name|ParentQueueState
block|{
DECL|field|totalAbsoluteActivatedChildQueueCapacityByLabel
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|totalAbsoluteActivatedChildQueueCapacityByLabel
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getAbsoluteActivatedChildQueueCapacity (String nodeLabel)
specifier|private
name|float
name|getAbsoluteActivatedChildQueueCapacity
parameter_list|(
name|String
name|nodeLabel
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Float
name|totalActivatedCapacity
init|=
name|getAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalActivatedCapacity
operator|!=
literal|null
condition|)
block|{
return|return
name|totalActivatedCapacity
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incAbsoluteActivatedChildCapacity (String nodeLabel, float childQueueCapacity)
specifier|private
name|void
name|incAbsoluteActivatedChildCapacity
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|float
name|childQueueCapacity
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Float
name|activatedChildCapacity
init|=
name|getAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|activatedChildCapacity
operator|!=
literal|null
condition|)
block|{
name|setAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|,
name|activatedChildCapacity
operator|+
name|childQueueCapacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|,
name|childQueueCapacity
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decAbsoluteActivatedChildCapacity (String nodeLabel, float childQueueCapacity)
specifier|private
name|void
name|decAbsoluteActivatedChildCapacity
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|float
name|childQueueCapacity
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Float
name|activatedChildCapacity
init|=
name|getAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|activatedChildCapacity
operator|!=
literal|null
condition|)
block|{
name|setAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|,
name|activatedChildCapacity
operator|-
name|childQueueCapacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setAbsActivatedChildQueueCapacityByLabel
argument_list|(
name|nodeLabel
argument_list|,
name|childQueueCapacity
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAbsActivatedChildQueueCapacityByLabel (String label)
name|Float
name|getAbsActivatedChildQueueCapacityByLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|totalAbsoluteActivatedChildQueueCapacityByLabel
operator|.
name|get
argument_list|(
name|label
argument_list|)
return|;
block|}
DECL|method|setAbsActivatedChildQueueCapacityByLabel (String label, float val)
name|Float
name|setAbsActivatedChildQueueCapacityByLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|val
parameter_list|)
block|{
return|return
name|totalAbsoluteActivatedChildQueueCapacityByLabel
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|val
argument_list|)
return|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|totalAbsoluteActivatedChildQueueCapacityByLabel
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Comparator that orders applications by their submit time    */
DECL|class|PendingApplicationComparator
specifier|private
class|class
name|PendingApplicationComparator
implements|implements
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (FiCaSchedulerApp app1, FiCaSchedulerApp app2)
specifier|public
name|int
name|compare
parameter_list|(
name|FiCaSchedulerApp
name|app1
parameter_list|,
name|FiCaSchedulerApp
name|app2
parameter_list|)
block|{
name|RMApp
name|rmApp1
init|=
name|scheduler
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
name|scheduler
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp1
operator|!=
literal|null
operator|&&
name|rmApp2
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|rmApp1
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|rmApp2
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rmApp1
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|rmApp2
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|field|applicationComparator
specifier|private
name|PendingApplicationComparator
name|applicationComparator
init|=
operator|new
name|PendingApplicationComparator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init (final CapacitySchedulerContext schedulerContext, final ParentQueue parentQueue)
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|CapacitySchedulerContext
name|schedulerContext
parameter_list|,
specifier|final
name|ParentQueue
name|parentQueue
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scheduler
operator|=
name|schedulerContext
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|parentQueue
operator|instanceof
name|ManagedParentQueue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected instance of type "
operator|+
name|ManagedParentQueue
operator|.
name|class
argument_list|)
throw|;
block|}
name|this
operator|.
name|managedParentQueue
operator|=
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
expr_stmt|;
name|initializeLeafQueueTemplate
argument_list|(
name|this
operator|.
name|managedParentQueue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized queue management policy for parent queue "
operator|+
name|parentQueue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" with leaf queue template capacities : ["
operator|+
name|leafQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeLeafQueueTemplate (ManagedParentQueue parentQueue)
specifier|private
name|void
name|initializeLeafQueueTemplate
parameter_list|(
name|ManagedParentQueue
name|parentQueue
parameter_list|)
throws|throws
name|IOException
block|{
name|leafQueueTemplate
operator|=
name|parentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
expr_stmt|;
name|leafQueueTemplateCapacities
operator|=
name|leafQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parentQueueLabels
init|=
name|parentQueue
operator|.
name|getNodeLabelsForQueue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeLabel
range|:
name|leafQueueTemplateCapacities
operator|.
name|getExistingNodeLabels
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|parentQueueLabels
operator|.
name|contains
argument_list|(
name|nodeLabel
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid node label "
operator|+
name|nodeLabel
operator|+
literal|" on configured leaf template on parent"
operator|+
literal|" queue "
operator|+
name|parentQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid node label "
operator|+
name|nodeLabel
operator|+
literal|" on configured leaf template on parent"
operator|+
literal|" queue "
operator|+
name|parentQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|leafQueueTemplateNodeLabels
operator|=
name|leafQueueTemplateCapacities
operator|.
name|getExistingNodeLabels
argument_list|()
expr_stmt|;
block|}
comment|/**    * Compute/Adjust child queue capacities    * for auto created leaf queues    * This computes queue entitlements but does not update LeafQueueState or    * queue capacities. Scheduler calls commitQueueManagemetChanges after    * validation after applying queue changes and commits to LeafQueueState    * are done in commitQueueManagementChanges.    *    * @return List of Queue Management change suggestions which could potentially    * be committed/rejected by the scheduler due to validation failures    * @throws SchedulerDynamicEditException    */
annotation|@
name|Override
DECL|method|computeQueueManagementChanges ()
specifier|public
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|computeQueueManagementChanges
parameter_list|()
throws|throws
name|SchedulerDynamicEditException
block|{
comment|//TODO : Add support for node labels on leaf queue template configurations
comment|//synch/add missing leaf queue(s) if any to state
name|updateLeafQueueState
argument_list|()
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueManagementChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|pendingApps
init|=
name|getSortedPendingApplications
argument_list|()
decl_stmt|;
comment|//Map of LeafQueue->QueueCapacities - keep adding the computed
comment|// entitlements to this map and finally
comment|// build the leaf queue configuration Template for all identified leaf
comment|// queues
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|leafQueueEntitlements
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeLabel
range|:
name|leafQueueTemplateNodeLabels
control|)
block|{
comment|// check if any leaf queues need to be deactivated based on pending
comment|// applications
name|float
name|parentAbsoluteCapacity
init|=
name|managedParentQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
name|float
name|leafQueueTemplateAbsoluteCapacity
init|=
name|leafQueueTemplateCapacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|deactivatedLeafQueues
init|=
name|deactivateLeafQueuesIfInActive
argument_list|(
name|managedParentQueue
argument_list|,
name|nodeLabel
argument_list|,
name|leafQueueEntitlements
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|deactivatedLeafQueues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent queue = {},  "
operator|+
literal|", nodeLabel = {}, deactivated leaf queues = [{}] "
argument_list|,
name|managedParentQueue
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|nodeLabel
argument_list|,
name|deactivatedLeafQueues
operator|.
name|size
argument_list|()
operator|>
literal|25
condition|?
name|deactivatedLeafQueues
operator|.
name|size
argument_list|()
else|:
name|deactivatedLeafQueues
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|deactivatedCapacity
init|=
name|getTotalDeactivatedCapacity
argument_list|(
name|deactivatedLeafQueues
argument_list|,
name|nodeLabel
argument_list|)
decl_stmt|;
name|float
name|sumOfChildQueueActivatedCapacity
init|=
name|parentQueueState
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
comment|//Check if we need to activate anything at all?
name|float
name|availableCapacity
init|=
name|parentAbsoluteCapacity
operator|-
name|sumOfChildQueueActivatedCapacity
operator|+
name|deactivatedCapacity
operator|+
name|EPSILON
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent queue = "
operator|+
name|managedParentQueue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|", nodeLabel = "
operator|+
name|nodeLabel
operator|+
literal|", absCapacity = "
operator|+
name|parentAbsoluteCapacity
operator|+
literal|", leafQueueAbsoluteCapacity = "
operator|+
name|leafQueueTemplateAbsoluteCapacity
operator|+
literal|", deactivatedCapacity = "
operator|+
name|deactivatedCapacity
operator|+
literal|" , absChildActivatedCapacity = "
operator|+
name|sumOfChildQueueActivatedCapacity
operator|+
literal|", availableCapacity = "
operator|+
name|availableCapacity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|availableCapacity
operator|>=
name|leafQueueTemplateAbsoluteCapacity
condition|)
block|{
comment|//sort applications across leaf queues by submit time
if|if
condition|(
name|pendingApps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|maxLeafQueuesTobeActivated
init|=
name|getMaxLeavesToBeActivated
argument_list|(
name|availableCapacity
argument_list|,
name|leafQueueTemplateAbsoluteCapacity
argument_list|,
name|pendingApps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent queue = "
operator|+
name|managedParentQueue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" : Found "
operator|+
name|maxLeafQueuesTobeActivated
operator|+
literal|" leaf queues"
operator|+
literal|" to be activated with "
operator|+
name|pendingApps
operator|.
name|size
argument_list|()
operator|+
literal|" apps "
argument_list|)
expr_stmt|;
block|}
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|leafQueuesToBeActivated
init|=
name|getSortedLeafQueues
argument_list|(
name|nodeLabel
argument_list|,
name|pendingApps
argument_list|,
name|maxLeafQueuesTobeActivated
argument_list|,
name|deactivatedLeafQueues
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|//Compute entitlement changes for the identified leaf queues
comment|// which is appended to the List of computedEntitlements
name|updateLeafQueueCapacitiesByLabel
argument_list|(
name|nodeLabel
argument_list|,
name|leafQueuesToBeActivated
argument_list|,
name|leafQueueEntitlements
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|leafQueuesToBeActivated
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Activated leaf queues : [{}]"
argument_list|,
name|leafQueuesToBeActivated
operator|.
name|size
argument_list|()
operator|<
literal|25
condition|?
name|leafQueuesToBeActivated
else|:
name|leafQueuesToBeActivated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//Populate new entitlements
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
argument_list|>
name|iterator
init|=
name|leafQueueEntitlements
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|queueCapacities
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|leafQueueName
init|=
name|queueCapacities
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|scheduler
operator|.
name|getCapacitySchedulerQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|leafQueueName
argument_list|)
decl_stmt|;
name|AutoCreatedLeafQueueConfig
name|newTemplate
init|=
name|buildTemplate
argument_list|(
name|queueCapacities
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|queueManagementChanges
operator|.
name|add
argument_list|(
operator|new
name|QueueManagementChange
operator|.
name|UpdateQueue
argument_list|(
name|leafQueue
argument_list|,
name|newTemplate
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|queueManagementChanges
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTotalDeactivatedCapacity ( Map<String, QueueCapacities> deactivatedLeafQueues, String nodeLabel)
specifier|private
name|float
name|getTotalDeactivatedCapacity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|deactivatedLeafQueues
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
block|{
name|float
name|deactivatedCapacity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
argument_list|>
name|iterator
init|=
name|deactivatedLeafQueues
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|deactivatedQueueCapacity
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|deactivatedCapacity
operator|+=
name|deactivatedQueueCapacity
operator|.
name|getValue
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
return|return
name|deactivatedCapacity
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|updateLeafQueueState ()
name|void
name|updateLeafQueueState
parameter_list|()
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newPartitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|newQueues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CSQueue
name|newQueue
range|:
name|managedParentQueue
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
if|if
condition|(
name|newQueue
operator|instanceof
name|LeafQueue
condition|)
block|{
for|for
control|(
name|String
name|nodeLabel
range|:
name|leafQueueTemplateNodeLabels
control|)
block|{
name|leafQueueState
operator|.
name|createLeafQueueStateIfNotExists
argument_list|(
operator|(
name|LeafQueue
operator|)
name|newQueue
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
name|newPartitions
operator|.
name|add
argument_list|(
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
name|newQueues
operator|.
name|add
argument_list|(
name|newQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LeafQueueStatePerPartition
argument_list|>
argument_list|>
argument_list|>
name|itr
init|=
name|leafQueueState
operator|.
name|getLeafQueueStateMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LeafQueueStatePerPartition
argument_list|>
argument_list|>
name|e
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|partition
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newPartitions
operator|.
name|contains
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|managedParentQueue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" : Removed partition "
operator|+
name|partition
operator|+
literal|" from leaf queue "
operator|+
literal|"state"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LeafQueueStatePerPartition
argument_list|>
name|queues
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LeafQueueStatePerPartition
argument_list|>
argument_list|>
name|queueItr
init|=
name|queues
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|queueItr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|queue
init|=
name|queueItr
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newQueues
operator|.
name|contains
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|queueItr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|managedParentQueue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" : Removed queue"
operator|+
name|queue
operator|+
literal|" from "
operator|+
literal|"leaf queue "
operator|+
literal|"state from partition "
operator|+
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSortedLeafQueues (String nodeLabel, final List<FiCaSchedulerApp> pendingApps, int leafQueuesNeeded, Set<String> deactivatedQueues)
specifier|private
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|getSortedLeafQueues
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
specifier|final
name|List
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|pendingApps
parameter_list|,
name|int
name|leafQueuesNeeded
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|deactivatedQueues
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|leafQueues
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|leafQueuesNeeded
argument_list|)
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
name|pendingApps
control|)
block|{
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|app
operator|.
name|getCSLeafQueue
argument_list|()
decl_stmt|;
name|String
name|leafQueueName
init|=
name|leafQueue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
comment|//Check if leafQueue is not active already and has any pending apps
if|if
condition|(
name|ctr
operator|<
name|leafQueuesNeeded
condition|)
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|deactivatedQueues
operator|.
name|contains
argument_list|(
name|leafQueueName
argument_list|)
condition|)
block|{
if|if
condition|(
name|addLeafQueueIfNotExists
argument_list|(
name|leafQueues
argument_list|,
name|leafQueueName
argument_list|)
condition|)
block|{
name|ctr
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|leafQueues
return|;
block|}
DECL|method|addLeafQueueIfNotExists (Set<String> leafQueues, String leafQueueName)
specifier|private
name|boolean
name|addLeafQueueIfNotExists
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueues
parameter_list|,
name|String
name|leafQueueName
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|leafQueues
operator|.
name|contains
argument_list|(
name|leafQueueName
argument_list|)
condition|)
block|{
name|ret
operator|=
name|leafQueues
operator|.
name|add
argument_list|(
name|leafQueueName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|isActive (final AutoCreatedLeafQueue leafQueue, String nodeLabel)
specifier|public
name|boolean
name|isActive
parameter_list|(
specifier|final
name|AutoCreatedLeafQueue
name|leafQueue
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|LeafQueueStatePerPartition
name|leafQueueStatus
init|=
name|getLeafQueueState
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
decl_stmt|;
return|return
name|leafQueueStatus
operator|.
name|isActive
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deactivateLeafQueuesIfInActive ( ParentQueue parentQueue, String nodeLabel, Map<String, QueueCapacities> leafQueueEntitlements)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|deactivateLeafQueuesIfInActive
parameter_list|(
name|ParentQueue
name|parentQueue
parameter_list|,
name|String
name|nodeLabel
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|leafQueueEntitlements
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|deactivatedQueues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CSQueue
name|childQueue
range|:
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|childQueue
decl_stmt|;
if|if
condition|(
name|leafQueue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isActive
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
operator|&&
operator|!
name|hasPendingApps
argument_list|(
name|leafQueue
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|leafQueueEntitlements
operator|.
name|containsKey
argument_list|(
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
condition|)
block|{
name|leafQueueEntitlements
operator|.
name|put
argument_list|(
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|,
operator|new
name|QueueCapacities
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueueCapacities
name|capacities
init|=
name|leafQueueEntitlements
operator|.
name|get
argument_list|(
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|updateToZeroCapacity
argument_list|(
name|capacities
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
name|deactivatedQueues
operator|.
name|put
argument_list|(
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|leafQueueTemplateCapacities
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find queue in scheduler while trying"
operator|+
literal|" to "
operator|+
literal|"deactivate for "
operator|+
name|parentQueue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|deactivatedQueues
return|;
block|}
DECL|method|updateLeafQueueCapacitiesByLabel (String nodeLabel, Set<String> leafQueuesToBeActivated, Map<String, QueueCapacities> leafQueueEntitlements)
specifier|private
name|void
name|updateLeafQueueCapacitiesByLabel
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueuesToBeActivated
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|QueueCapacities
argument_list|>
name|leafQueueEntitlements
parameter_list|)
block|{
for|for
control|(
name|String
name|curLeafQueue
range|:
name|leafQueuesToBeActivated
control|)
block|{
if|if
condition|(
operator|!
name|leafQueueEntitlements
operator|.
name|containsKey
argument_list|(
name|curLeafQueue
argument_list|)
condition|)
block|{
name|leafQueueEntitlements
operator|.
name|put
argument_list|(
name|curLeafQueue
argument_list|,
operator|new
name|QueueCapacities
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Activate queues if capacity is available
block|}
name|QueueCapacities
name|capacities
init|=
name|leafQueueEntitlements
operator|.
name|get
argument_list|(
name|curLeafQueue
argument_list|)
decl_stmt|;
name|updateCapacityFromTemplate
argument_list|(
name|capacities
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMaxLeavesToBeActivated (float availableCapacity, float childQueueAbsoluteCapacity, int numPendingApps)
specifier|public
name|int
name|getMaxLeavesToBeActivated
parameter_list|(
name|float
name|availableCapacity
parameter_list|,
name|float
name|childQueueAbsoluteCapacity
parameter_list|,
name|int
name|numPendingApps
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
if|if
condition|(
name|childQueueAbsoluteCapacity
operator|>
literal|0
condition|)
block|{
name|int
name|numLeafQueuesNeeded
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|availableCapacity
operator|/
name|childQueueAbsoluteCapacity
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
name|numLeafQueuesNeeded
argument_list|,
name|numPendingApps
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Commit queue management changes - which involves updating required state    * on parent/underlying leaf queues    *    * @param queueManagementChanges Queue Management changes to commit    * @throws SchedulerDynamicEditException when validation fails    */
annotation|@
name|Override
DECL|method|commitQueueManagementChanges ( List<QueueManagementChange> queueManagementChanges)
specifier|public
name|void
name|commitQueueManagementChanges
parameter_list|(
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueManagementChanges
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|QueueManagementChange
name|queueManagementChange
range|:
name|queueManagementChanges
control|)
block|{
name|AutoCreatedLeafQueueConfig
name|updatedQueueTemplate
init|=
name|queueManagementChange
operator|.
name|getUpdatedQueueTemplate
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|queueManagementChange
operator|.
name|getQueue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|queue
operator|instanceof
name|AutoCreatedLeafQueue
operator|)
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Expected queue management change for AutoCreatedLeafQueue. "
operator|+
literal|"Found "
operator|+
name|queue
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|queue
decl_stmt|;
for|for
control|(
name|String
name|nodeLabel
range|:
name|updatedQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getExistingNodeLabels
argument_list|()
control|)
block|{
if|if
condition|(
name|updatedQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|nodeLabel
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isActive
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queue is already active."
operator|+
literal|" Skipping activation : "
operator|+
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|activate
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queue is already de-activated. Skipping "
operator|+
literal|"de-activation : "
operator|+
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|deactivate
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|activate (final AbstractAutoCreatedLeafQueue leafQueue, String nodeLabel)
specifier|private
name|void
name|activate
parameter_list|(
specifier|final
name|AbstractAutoCreatedLeafQueue
name|leafQueue
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getLeafQueueState
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
operator|.
name|activate
argument_list|()
expr_stmt|;
name|parentQueueState
operator|.
name|incAbsoluteActivatedChildCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|leafQueueTemplateCapacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deactivate (final AbstractAutoCreatedLeafQueue leafQueue, String nodeLabel)
specifier|private
name|void
name|deactivate
parameter_list|(
specifier|final
name|AbstractAutoCreatedLeafQueue
name|leafQueue
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getLeafQueueState
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|parentQueueState
operator|.
name|decAbsoluteActivatedChildCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|leafQueueTemplateCapacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasPendingApps (final AutoCreatedLeafQueue leafQueue)
specifier|public
name|boolean
name|hasPendingApps
parameter_list|(
specifier|final
name|AutoCreatedLeafQueue
name|leafQueue
parameter_list|)
block|{
return|return
name|leafQueue
operator|.
name|getNumApplications
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CapacitySchedulerContext schedulerContext, final ParentQueue parentQueue)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|CapacitySchedulerContext
name|schedulerContext
parameter_list|,
specifier|final
name|ParentQueue
name|parentQueue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|parentQueue
operator|instanceof
name|ManagedParentQueue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected instance of type "
operator|+
name|ManagedParentQueue
operator|.
name|class
operator|+
literal|" found  "
operator|+
literal|" : "
operator|+
name|parentQueue
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|managedParentQueue
operator|!=
literal|null
operator|&&
operator|!
name|parentQueue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|managedParentQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected parent queue path to match "
operator|+
name|this
operator|.
name|managedParentQueue
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|" found : "
operator|+
name|parentQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|managedParentQueue
operator|=
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
expr_stmt|;
name|initializeLeafQueueTemplate
argument_list|(
name|this
operator|.
name|managedParentQueue
argument_list|)
expr_stmt|;
comment|//clear state
name|parentQueueState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|leafQueueState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reinitialized queue management policy for parent queue "
operator|+
name|parentQueue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" with leaf queue template "
operator|+
literal|"capacities : ["
operator|+
name|leafQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInitialLeafQueueConfiguration ( AbstractAutoCreatedLeafQueue leafQueue)
specifier|public
name|AutoCreatedLeafQueueConfig
name|getInitialLeafQueueConfiguration
parameter_list|(
name|AbstractAutoCreatedLeafQueue
name|leafQueue
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|AutoCreatedLeafQueueConfig
name|template
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|leafQueue
operator|instanceof
name|AutoCreatedLeafQueue
operator|)
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Not an instance of "
operator|+
literal|"AutoCreatedLeafQueue : "
operator|+
name|leafQueue
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|QueueCapacities
name|capacities
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodeLabel
range|:
name|leafQueueTemplateNodeLabels
control|)
block|{
if|if
condition|(
operator|!
name|leafQueueState
operator|.
name|createLeafQueueStateIfNotExists
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Leaf queue already exists in state : "
operator|+
name|getLeafQueueState
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|float
name|availableCapacity
init|=
name|managedParentQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
operator|-
name|parentQueueState
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|nodeLabel
argument_list|)
operator|+
name|EPSILON
decl_stmt|;
if|if
condition|(
name|availableCapacity
operator|>=
name|leafQueueTemplateCapacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
condition|)
block|{
name|updateCapacityFromTemplate
argument_list|(
name|capacities
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
name|activate
argument_list|(
name|leafQueue
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateToZeroCapacity
argument_list|(
name|capacities
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|=
name|buildTemplate
argument_list|(
name|capacities
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|template
return|;
block|}
DECL|method|updateToZeroCapacity (QueueCapacities capacities, String nodeLabel)
specifier|private
name|void
name|updateToZeroCapacity
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
block|{
name|capacities
operator|.
name|setCapacity
argument_list|(
name|nodeLabel
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|capacities
operator|.
name|setMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|leafQueueTemplateCapacities
operator|.
name|getMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateCapacityFromTemplate (QueueCapacities capacities, String nodeLabel)
specifier|private
name|void
name|updateCapacityFromTemplate
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
block|{
name|capacities
operator|.
name|setCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|leafQueueTemplateCapacities
operator|.
name|getCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
name|capacities
operator|.
name|setMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|leafQueueTemplateCapacities
operator|.
name|getMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLeafQueueState (LeafQueue queue, String partition)
name|LeafQueueStatePerPartition
name|getLeafQueueState
parameter_list|(
name|LeafQueue
name|queue
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|queueName
init|=
name|queue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|leafQueueState
operator|.
name|containsLeafQueue
argument_list|(
name|queueName
argument_list|,
name|partition
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Could not find leaf queue in "
operator|+
literal|"state "
operator|+
name|queueName
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|leafQueueState
operator|.
name|getLeafQueueStatePerPartition
argument_list|(
name|queueName
argument_list|,
name|partition
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAbsoluteActivatedChildQueueCapacity (String nodeLabel)
specifier|public
name|float
name|getAbsoluteActivatedChildQueueCapacity
parameter_list|(
name|String
name|nodeLabel
parameter_list|)
block|{
return|return
name|parentQueueState
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|nodeLabel
argument_list|)
return|;
block|}
DECL|method|getSortedPendingApplications ()
specifier|private
name|List
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|getSortedPendingApplications
parameter_list|()
block|{
name|List
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|managedParentQueue
operator|.
name|getAllApplications
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|apps
argument_list|,
name|applicationComparator
argument_list|)
expr_stmt|;
return|return
name|apps
return|;
block|}
DECL|method|buildTemplate (QueueCapacities capacities)
specifier|private
name|AutoCreatedLeafQueueConfig
name|buildTemplate
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|)
block|{
name|AutoCreatedLeafQueueConfig
operator|.
name|Builder
name|templateBuilder
init|=
operator|new
name|AutoCreatedLeafQueueConfig
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|templateBuilder
operator|.
name|capacities
argument_list|(
name|capacities
argument_list|)
expr_stmt|;
return|return
operator|new
name|AutoCreatedLeafQueueConfig
argument_list|(
name|templateBuilder
argument_list|)
return|;
block|}
block|}
end_class

end_unit

