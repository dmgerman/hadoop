begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|ApplicationsStore
operator|.
name|ApplicationStore
import|;
end_import

begin_class
DECL|class|StoreFactory
specifier|public
class|class
name|StoreFactory
block|{
DECL|method|getStore (Configuration conf)
specifier|public
specifier|static
name|Store
name|getStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Store
name|store
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemStore
operator|.
name|class
argument_list|,
name|Store
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|store
return|;
block|}
DECL|method|createVoidAppStore ()
specifier|public
specifier|static
name|ApplicationStore
name|createVoidAppStore
parameter_list|()
block|{
return|return
operator|new
name|VoidApplicationStore
argument_list|()
return|;
block|}
DECL|class|VoidApplicationStore
specifier|private
specifier|static
class|class
name|VoidApplicationStore
implements|implements
name|ApplicationStore
block|{
DECL|method|VoidApplicationStore ()
specifier|public
name|VoidApplicationStore
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|storeContainer (Container container)
specifier|public
name|void
name|storeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|removeContainer (Container container)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|storeMasterContainer (Container container)
specifier|public
name|void
name|storeMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|updateApplicationState (ApplicationMaster master)
specifier|public
name|void
name|updateApplicationState
parameter_list|(
name|ApplicationMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|isLoggable ()
specifier|public
name|boolean
name|isLoggable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

