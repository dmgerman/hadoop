begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|RMSecretManagerService
specifier|public
class|class
name|RMSecretManagerService
extends|extends
name|AbstractService
block|{
DECL|field|amRmTokenSecretManager
name|AMRMTokenSecretManager
name|amRmTokenSecretManager
decl_stmt|;
DECL|field|nmTokenSecretManager
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
decl_stmt|;
DECL|field|clientToAMSecretManager
name|ClientToAMTokenSecretManagerInRM
name|clientToAMSecretManager
decl_stmt|;
DECL|field|containerTokenSecretManager
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
decl_stmt|;
DECL|field|rmDTSecretManager
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
decl_stmt|;
DECL|field|rmContext
name|RMContextImpl
name|rmContext
decl_stmt|;
comment|/**    * Construct the service.    *    */
DECL|method|RMSecretManagerService (Configuration conf, RMContextImpl rmContext)
specifier|public
name|RMSecretManagerService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContextImpl
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|RMSecretManagerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
comment|// To initialize correctly, these managers should be created before
comment|// being called serviceInit().
name|nmTokenSecretManager
operator|=
name|createNMTokenSecretManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setNMTokenSecretManager
argument_list|(
name|nmTokenSecretManager
argument_list|)
expr_stmt|;
name|containerTokenSecretManager
operator|=
name|createContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setContainerTokenSecretManager
argument_list|(
name|containerTokenSecretManager
argument_list|)
expr_stmt|;
name|clientToAMSecretManager
operator|=
name|createClientToAMTokenSecretManager
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setClientToAMTokenSecretManager
argument_list|(
name|clientToAMSecretManager
argument_list|)
expr_stmt|;
name|amRmTokenSecretManager
operator|=
name|createAMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|rmContext
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setAMRMTokenSecretManager
argument_list|(
name|amRmTokenSecretManager
argument_list|)
expr_stmt|;
name|rmDTSecretManager
operator|=
name|createRMDelegationTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMDelegationTokenSecretManager
argument_list|(
name|rmDTSecretManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|amRmTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|containerTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|nmTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rmDTSecretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to start secret manager threads"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rmDTSecretManager
operator|!=
literal|null
condition|)
block|{
name|rmDTSecretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|amRmTokenSecretManager
operator|!=
literal|null
condition|)
block|{
name|amRmTokenSecretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|containerTokenSecretManager
operator|!=
literal|null
condition|)
block|{
name|containerTokenSecretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nmTokenSecretManager
operator|!=
literal|null
condition|)
block|{
name|nmTokenSecretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|createContainerTokenSecretManager ( Configuration conf)
specifier|protected
name|RMContainerTokenSecretManager
name|createContainerTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|createNMTokenSecretManager ( Configuration conf)
specifier|protected
name|NMTokenSecretManagerInRM
name|createNMTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|createAMRMTokenSecretManager ( Configuration conf, RMContext rmContext)
specifier|protected
name|AMRMTokenSecretManager
name|createAMRMTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
return|return
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
return|;
block|}
DECL|method|createClientToAMTokenSecretManager ()
specifier|protected
name|ClientToAMTokenSecretManagerInRM
name|createClientToAMTokenSecretManager
parameter_list|()
block|{
return|return
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createRMDelegationTokenSecretManager ( Configuration conf, RMContext rmContext)
specifier|protected
name|RMDelegationTokenSecretManager
name|createRMDelegationTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|long
name|secretKeyInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELEGATION_KEY_UPDATE_INTERVAL_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|RM_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenMaxLifetime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|RM_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenRenewInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|RM_DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|RMDelegationTokenSecretManager
argument_list|(
name|secretKeyInterval
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|tokenRenewInterval
argument_list|,
literal|3600000
argument_list|,
name|rmContext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

