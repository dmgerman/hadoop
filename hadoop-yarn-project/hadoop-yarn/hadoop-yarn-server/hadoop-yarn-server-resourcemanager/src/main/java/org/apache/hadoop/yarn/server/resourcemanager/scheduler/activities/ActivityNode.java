begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  * It represents tree node in "NodeAllocation" tree structure.  * Each node may represent queue, application or container in allocation activity.  * Node may have children node if successfully allocated to next level.  */
end_comment

begin_class
DECL|class|ActivityNode
specifier|public
class|class
name|ActivityNode
block|{
DECL|field|activityNodeName
specifier|private
name|String
name|activityNodeName
decl_stmt|;
DECL|field|parentName
specifier|private
name|String
name|parentName
decl_stmt|;
DECL|field|appPriority
specifier|private
name|String
name|appPriority
decl_stmt|;
DECL|field|requestPriority
specifier|private
name|String
name|requestPriority
decl_stmt|;
DECL|field|state
specifier|private
name|ActivityState
name|state
decl_stmt|;
DECL|field|diagnostic
specifier|private
name|String
name|diagnostic
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|allocationRequestId
specifier|private
name|String
name|allocationRequestId
decl_stmt|;
DECL|field|childNode
specifier|private
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|childNode
decl_stmt|;
DECL|method|ActivityNode (String activityNodeName, String parentName, String priority, ActivityState state, String diagnostic, String type)
specifier|public
name|ActivityNode
parameter_list|(
name|String
name|activityNodeName
parameter_list|,
name|String
name|parentName
parameter_list|,
name|String
name|priority
parameter_list|,
name|ActivityState
name|state
parameter_list|,
name|String
name|diagnostic
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|activityNodeName
argument_list|,
name|parentName
argument_list|,
name|priority
argument_list|,
name|state
argument_list|,
name|diagnostic
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ActivityNode (String activityNodeName, String parentName, String priority, ActivityState state, String diagnostic, String type, NodeId nodeId, String allocationRequestId)
specifier|public
name|ActivityNode
parameter_list|(
name|String
name|activityNodeName
parameter_list|,
name|String
name|parentName
parameter_list|,
name|String
name|priority
parameter_list|,
name|ActivityState
name|state
parameter_list|,
name|String
name|diagnostic
parameter_list|,
name|String
name|type
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|allocationRequestId
parameter_list|)
block|{
name|this
operator|.
name|activityNodeName
operator|=
name|activityNodeName
expr_stmt|;
name|this
operator|.
name|parentName
operator|=
name|parentName
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"app"
argument_list|)
condition|)
block|{
name|this
operator|.
name|appPriority
operator|=
name|priority
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"request"
argument_list|)
condition|)
block|{
name|this
operator|.
name|requestPriority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|allocationRequestId
operator|=
name|allocationRequestId
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"container"
argument_list|)
condition|)
block|{
name|this
operator|.
name|requestPriority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|allocationRequestId
operator|=
name|allocationRequestId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
block|}
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|diagnostic
operator|=
name|diagnostic
expr_stmt|;
name|this
operator|.
name|childNode
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|activityNodeName
return|;
block|}
DECL|method|getParentName ()
specifier|public
name|String
name|getParentName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentName
return|;
block|}
DECL|method|addChild (ActivityNode node)
specifier|public
name|void
name|addChild
parameter_list|(
name|ActivityNode
name|node
parameter_list|)
block|{
name|childNode
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildren ()
specifier|public
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|this
operator|.
name|childNode
return|;
block|}
DECL|method|getState ()
specifier|public
name|ActivityState
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
DECL|method|getDiagnostic ()
specifier|public
name|String
name|getDiagnostic
parameter_list|()
block|{
return|return
name|this
operator|.
name|diagnostic
return|;
block|}
DECL|method|getAppPriority ()
specifier|public
name|String
name|getAppPriority
parameter_list|()
block|{
return|return
name|appPriority
return|;
block|}
DECL|method|getRequestPriority ()
specifier|public
name|String
name|getRequestPriority
parameter_list|()
block|{
return|return
name|requestPriority
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|getAllocationRequestId ()
specifier|public
name|String
name|getAllocationRequestId
parameter_list|()
block|{
return|return
name|allocationRequestId
return|;
block|}
DECL|method|isAppType ()
specifier|public
name|boolean
name|isAppType
parameter_list|()
block|{
if|if
condition|(
name|appPriority
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isRequestType ()
specifier|public
name|boolean
name|isRequestType
parameter_list|()
block|{
return|return
name|requestPriority
operator|!=
literal|null
operator|&&
name|nodeId
operator|==
literal|null
return|;
block|}
DECL|method|getShortDiagnostic ()
specifier|public
name|String
name|getShortDiagnostic
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|diagnostic
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|StringUtils
operator|.
name|split
argument_list|(
name|this
operator|.
name|diagnostic
argument_list|,
name|ActivitiesManager
operator|.
name|DIAGNOSTICS_DETAILS_SEPARATOR
argument_list|)
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|activityNodeName
operator|+
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|appPriority
operator|+
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|state
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nodeId
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|diagnostic
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|diagnostic
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ActivityNode
name|child
range|:
name|childNode
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

