begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|UsersManager
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Temporary data-structure tracking resource availability, pending resource  * need, current utilization for an application.  */
end_comment

begin_class
DECL|class|TempUserPerPartition
specifier|public
class|class
name|TempUserPerPartition
extends|extends
name|AbstractPreemptionEntity
block|{
DECL|field|user
specifier|private
specifier|final
name|User
name|user
decl_stmt|;
DECL|field|userLimit
specifier|private
name|Resource
name|userLimit
decl_stmt|;
DECL|field|donePreemptionQuotaForULDelta
specifier|private
name|boolean
name|donePreemptionQuotaForULDelta
init|=
literal|false
decl_stmt|;
DECL|method|TempUserPerPartition (User user, String queueName, Resource usedPerPartition, Resource amUsedPerPartition, Resource reserved, Resource pendingPerPartition)
name|TempUserPerPartition
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Resource
name|usedPerPartition
parameter_list|,
name|Resource
name|amUsedPerPartition
parameter_list|,
name|Resource
name|reserved
parameter_list|,
name|Resource
name|pendingPerPartition
parameter_list|)
block|{
name|super
argument_list|(
name|queueName
argument_list|,
name|usedPerPartition
argument_list|,
name|amUsedPerPartition
argument_list|,
name|reserved
argument_list|,
name|pendingPerPartition
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" NAME: "
operator|+
name|getUserName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" CUR: "
argument_list|)
operator|.
name|append
argument_list|(
name|getUsed
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" PEN: "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
argument_list|)
operator|.
name|append
argument_list|(
literal|" RESERVED: "
argument_list|)
operator|.
name|append
argument_list|(
name|reserved
argument_list|)
operator|.
name|append
argument_list|(
literal|" AM_USED: "
argument_list|)
operator|.
name|append
argument_list|(
name|amUsed
argument_list|)
operator|.
name|append
argument_list|(
literal|" USER_LIMIT: "
argument_list|)
operator|.
name|append
argument_list|(
name|getUserLimit
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_ASSIGNED: "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
argument_list|)
operator|.
name|append
argument_list|(
literal|" USED_WO_AMUSED: "
argument_list|)
operator|.
name|append
argument_list|(
name|getUsedDeductAM
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
argument_list|)
operator|.
name|append
argument_list|(
literal|" ACTUAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|getActuallyToBePreempted
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|user
operator|.
name|getUserName
argument_list|()
return|;
block|}
DECL|method|getUserLimit ()
specifier|public
name|Resource
name|getUserLimit
parameter_list|()
block|{
return|return
name|userLimit
return|;
block|}
DECL|method|setUserLimit (Resource userLimitResource)
specifier|public
name|void
name|setUserLimit
parameter_list|(
name|Resource
name|userLimitResource
parameter_list|)
block|{
name|this
operator|.
name|userLimit
operator|=
name|userLimitResource
expr_stmt|;
block|}
DECL|method|isUserLimitReached (ResourceCalculator rc, Resource clusterResource)
specifier|public
name|boolean
name|isUserLimitReached
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|getUsedDeductAM
argument_list|()
argument_list|,
name|userLimit
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isPreemptionQuotaForULDeltaDone ()
specifier|public
name|boolean
name|isPreemptionQuotaForULDeltaDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|donePreemptionQuotaForULDelta
return|;
block|}
DECL|method|updatePreemptionQuotaForULDeltaAsDone (boolean done)
specifier|public
name|void
name|updatePreemptionQuotaForULDeltaAsDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|this
operator|.
name|donePreemptionQuotaForULDelta
operator|=
name|done
expr_stmt|;
block|}
block|}
end_class

end_unit

