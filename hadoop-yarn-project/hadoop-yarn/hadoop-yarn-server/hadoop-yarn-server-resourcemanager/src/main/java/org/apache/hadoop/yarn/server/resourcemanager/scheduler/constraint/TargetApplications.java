begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This class is used by  * {@link TargetApplicationsNamespace#evaluate(TargetApplications)} to evaluate  * a namespace.  */
end_comment

begin_class
DECL|class|TargetApplications
specifier|public
class|class
name|TargetApplications
block|{
DECL|field|currentAppId
specifier|private
name|ApplicationId
name|currentAppId
decl_stmt|;
DECL|field|allApps
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|allApps
decl_stmt|;
DECL|method|TargetApplications (ApplicationId currentApplicationId, Set<ApplicationId> allApplicationIds)
specifier|public
name|TargetApplications
parameter_list|(
name|ApplicationId
name|currentApplicationId
parameter_list|,
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|allApplicationIds
parameter_list|)
block|{
name|this
operator|.
name|currentAppId
operator|=
name|currentApplicationId
expr_stmt|;
name|allApps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|allApplicationIds
operator|!=
literal|null
condition|)
block|{
name|allApplicationIds
operator|.
name|forEach
argument_list|(
name|appId
lambda|->
name|allApps
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|TargetApplications (ApplicationId currentApplicationId, Map<ApplicationId, Set<String>> allApplicationIds)
specifier|public
name|TargetApplications
parameter_list|(
name|ApplicationId
name|currentApplicationId
parameter_list|,
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|allApplicationIds
parameter_list|)
block|{
name|this
operator|.
name|currentAppId
operator|=
name|currentApplicationId
expr_stmt|;
name|this
operator|.
name|allApps
operator|=
name|allApplicationIds
expr_stmt|;
block|}
DECL|method|getCurrentApplicationId ()
specifier|public
name|ApplicationId
name|getCurrentApplicationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentAppId
return|;
block|}
DECL|method|getAllApplicationIds ()
specifier|public
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|getAllApplicationIds
parameter_list|()
block|{
return|return
name|this
operator|.
name|allApps
operator|==
literal|null
condition|?
name|ImmutableSet
operator|.
name|of
argument_list|()
else|:
name|allApps
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getOtherApplicationIds ()
specifier|public
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|getOtherApplicationIds
parameter_list|()
block|{
if|if
condition|(
name|getAllApplicationIds
argument_list|()
operator|==
literal|null
operator|||
name|getAllApplicationIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|getAllApplicationIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|appId
lambda|->
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|getCurrentApplicationId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getApplicationIdsByTag (String applicationTag)
specifier|public
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|getApplicationIdsByTag
parameter_list|(
name|String
name|applicationTag
parameter_list|)
block|{
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|applicationTag
argument_list|)
operator|||
name|this
operator|.
name|allApps
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|app
range|:
name|this
operator|.
name|allApps
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|app
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|applicationTag
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|app
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

