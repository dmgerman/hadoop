begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_comment
comment|/**  * Converts a Fair Scheduler site configuration to Capacity Scheduler  * site configuration.  *  */
end_comment

begin_class
DECL|class|FSYarnSiteConverter
specifier|public
class|class
name|FSYarnSiteConverter
block|{
DECL|field|preemptionEnabled
specifier|private
name|boolean
name|preemptionEnabled
decl_stmt|;
DECL|field|autoCreateChildQueues
specifier|private
name|boolean
name|autoCreateChildQueues
decl_stmt|;
DECL|field|sizeBasedWeight
specifier|private
name|boolean
name|sizeBasedWeight
decl_stmt|;
DECL|field|userAsDefaultQueue
specifier|private
name|boolean
name|userAsDefaultQueue
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"checkstyle:linelength"
block|}
argument_list|)
DECL|method|convertSiteProperties (Configuration conf, Configuration yarnSiteConfig)
specifier|public
name|void
name|convertSiteProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Configuration
name|yarnSiteConfig
parameter_list|)
block|{
name|yarnSiteConfig
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: deprecated property, check if necessary
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_CONTINUOUS_SCHEDULING_ENABLED
argument_list|)
condition|)
block|{
name|yarnSiteConfig
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|interval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|)
decl_stmt|;
name|yarnSiteConfig
operator|.
name|setInt
argument_list|(
name|PREFIX
operator|+
literal|"schedule-asynchronously.scheduling-interval-ms"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
name|String
name|mbIncrementAllocation
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resource-types.memory-mb.increment-allocation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbIncrementAllocation
operator|!=
literal|null
condition|)
block|{
name|yarnSiteConfig
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.minimum-allocation-mb"
argument_list|,
name|mbIncrementAllocation
argument_list|)
expr_stmt|;
block|}
name|String
name|vcoreIncrementAllocation
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resource-types.vcores.increment-allocation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vcoreIncrementAllocation
operator|!=
literal|null
condition|)
block|{
name|yarnSiteConfig
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.minimum-allocation-vcores"
argument_list|,
name|vcoreIncrementAllocation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_PREEMPTION
argument_list|)
condition|)
block|{
name|yarnSiteConfig
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
name|int
name|waitTimeBeforeKill
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_WAIT_TIME_BEFORE_KILL
argument_list|)
decl_stmt|;
name|yarnSiteConfig
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_WAIT_TIME_BEFORE_KILL
argument_list|,
name|waitTimeBeforeKill
argument_list|)
expr_stmt|;
name|long
name|waitBeforeNextStarvationCheck
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
argument_list|)
decl_stmt|;
name|yarnSiteConfig
operator|.
name|setLong
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_MONITORING_INTERVAL
argument_list|,
name|waitBeforeNextStarvationCheck
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_ASSIGN_MULTIPLE
argument_list|)
condition|)
block|{
name|yarnSiteConfig
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yarnSiteConfig
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|maxAssign
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MAX_ASSIGN
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_MAX_ASSIGN
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxAssign
operator|!=
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_MAX_ASSIGN
condition|)
block|{
name|yarnSiteConfig
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAX_ASSIGN_PER_HEARTBEAT
argument_list|,
name|maxAssign
argument_list|)
expr_stmt|;
block|}
name|float
name|localityThresholdNode
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_NODE
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_LOCALITY_THRESHOLD_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|localityThresholdNode
operator|!=
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_LOCALITY_THRESHOLD_NODE
condition|)
block|{
name|yarnSiteConfig
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|NODE_LOCALITY_DELAY
argument_list|,
name|localityThresholdNode
argument_list|)
expr_stmt|;
block|}
name|float
name|localityThresholdRack
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_RACK
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_LOCALITY_THRESHOLD_RACK
argument_list|)
decl_stmt|;
if|if
condition|(
name|localityThresholdRack
operator|!=
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_LOCALITY_THRESHOLD_RACK
condition|)
block|{
name|yarnSiteConfig
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RACK_LOCALITY_ADDITIONAL_DELAY
argument_list|,
name|localityThresholdRack
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_ALLOW_UNDECLARED_POOLS
argument_list|)
condition|)
block|{
name|autoCreateChildQueues
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|SIZE_BASED_WEIGHT
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_SIZE_BASED_WEIGHT
argument_list|)
condition|)
block|{
name|sizeBasedWeight
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_USER_AS_DEFAULT_QUEUE
argument_list|)
condition|)
block|{
name|userAsDefaultQueue
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|isPreemptionEnabled ()
specifier|public
name|boolean
name|isPreemptionEnabled
parameter_list|()
block|{
return|return
name|preemptionEnabled
return|;
block|}
DECL|method|isAutoCreateChildQueues ()
specifier|public
name|boolean
name|isAutoCreateChildQueues
parameter_list|()
block|{
return|return
name|autoCreateChildQueues
return|;
block|}
DECL|method|isSizeBasedWeight ()
specifier|public
name|boolean
name|isSizeBasedWeight
parameter_list|()
block|{
return|return
name|sizeBasedWeight
return|;
block|}
DECL|method|isUserAsDefaultQueue ()
specifier|public
name|boolean
name|isUserAsDefaultQueue
parameter_list|()
block|{
return|return
name|userAsDefaultQueue
return|;
block|}
block|}
end_class

end_unit

