begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|WritableRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|RMPolicyProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/**  * Internal class to handle HA related aspects of the {@link ResourceManager}.  *  * TODO (YARN-1318): Some/ all of this functionality should be merged with  * {@link AdminService}. Currently, marking this as Private and Unstable for  * those reasons.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RMHAProtocolService
specifier|public
class|class
name|RMHAProtocolService
extends|extends
name|AbstractService
implements|implements
name|HAServiceProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMHAProtocolService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|haState
specifier|protected
name|HAServiceState
name|haState
init|=
name|HAServiceState
operator|.
name|INITIALIZING
decl_stmt|;
DECL|field|adminAcl
specifier|private
name|AccessControlList
name|adminAcl
decl_stmt|;
DECL|field|haAdminServer
specifier|private
name|Server
name|haAdminServer
decl_stmt|;
DECL|field|haEnabled
specifier|private
name|boolean
name|haEnabled
decl_stmt|;
DECL|method|RMHAProtocolService (ResourceManager resourceManager)
specifier|public
name|RMHAProtocolService
parameter_list|(
name|ResourceManager
name|resourceManager
parameter_list|)
block|{
name|super
argument_list|(
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|resourceManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|haEnabled
operator|=
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|haEnabled
condition|)
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|setConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|adminAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|createAndInitActiveServices
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|haEnabled
condition|)
block|{
name|transitionToStandby
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|startHAAdminServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transitionToActive
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|haEnabled
condition|)
block|{
name|stopHAAdminServer
argument_list|()
expr_stmt|;
block|}
name|transitionToStandby
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|haState
operator|=
name|HAServiceState
operator|.
name|STOPPING
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startHAAdminServer ()
specifier|protected
name|void
name|startHAAdminServer
parameter_list|()
throws|throws
name|Exception
block|{
name|InetSocketAddress
name|haAdminServiceAddress
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_HA_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_HA_ADMIN_PORT
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtocolXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|haPbService
init|=
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtocolXlator
argument_list|)
decl_stmt|;
name|WritableRpcEngine
operator|.
name|ensureInitialized
argument_list|()
expr_stmt|;
name|String
name|bindHost
init|=
name|haAdminServiceAddress
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|int
name|serviceHandlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ADMIN_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_HA_ADMIN_CLIENT_THREAD_COUNT
argument_list|)
decl_stmt|;
name|haAdminServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|haPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|bindHost
argument_list|)
operator|.
name|setPort
argument_list|(
name|haAdminServiceAddress
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|serviceHandlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|haAdminServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|RMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|haAdminServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ADMIN_ADDRESS
argument_list|,
name|haAdminServer
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stopHAAdminServer ()
specifier|private
name|void
name|stopHAAdminServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|haAdminServer
operator|!=
literal|null
condition|)
block|{
name|haAdminServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|haAdminServer
operator|.
name|join
argument_list|()
expr_stmt|;
name|haAdminServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|monitorHealth ()
specifier|public
specifier|synchronized
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
literal|"monitorHealth"
argument_list|)
expr_stmt|;
if|if
condition|(
name|haState
operator|==
name|HAServiceState
operator|.
name|ACTIVE
operator|&&
operator|!
name|rm
operator|.
name|areActiveServicesRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"Active ResourceManager services are not running!"
argument_list|)
throw|;
block|}
block|}
DECL|method|transitionToActive ()
specifier|private
specifier|synchronized
name|void
name|transitionToActive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|haState
operator|==
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Already in active state"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning to active"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|startActiveServices
argument_list|()
expr_stmt|;
name|haState
operator|=
name|HAServiceState
operator|.
name|ACTIVE
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioned to active"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transitionToActive (StateChangeRequestInfo reqInfo)
specifier|public
specifier|synchronized
name|void
name|transitionToActive
parameter_list|(
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAccess
argument_list|(
literal|"transitionToActive"
argument_list|)
decl_stmt|;
comment|// TODO (YARN-1177): When automatic failover is enabled,
comment|// check if transition should be allowed for this request
try|try
block|{
name|transitionToActive
argument_list|()
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToActive"
argument_list|,
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToActive"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"RMHAProtocolService"
argument_list|,
literal|"Exception transitioning to active"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Error when transitioning to Active mode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|transitionToStandby (boolean initialize)
specifier|private
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|boolean
name|initialize
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|haState
operator|==
name|HAServiceState
operator|.
name|STANDBY
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Already in standby state"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning to standby"
argument_list|)
expr_stmt|;
if|if
condition|(
name|haState
operator|==
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
name|rm
operator|.
name|stopActiveServices
argument_list|()
expr_stmt|;
if|if
condition|(
name|initialize
condition|)
block|{
name|rm
operator|.
name|createAndInitActiveServices
argument_list|()
expr_stmt|;
block|}
block|}
name|haState
operator|=
name|HAServiceState
operator|.
name|STANDBY
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioned to standby"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transitionToStandby (StateChangeRequestInfo reqInfo)
specifier|public
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|checkAccess
argument_list|(
literal|"transitionToStandby"
argument_list|)
decl_stmt|;
comment|// TODO (YARN-1177): When automatic failover is enabled,
comment|// check if transition should be allowed for this request
try|try
block|{
name|transitionToStandby
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToStandby"
argument_list|,
literal|"RMHAProtocolService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"transitionToStandby"
argument_list|,
name|adminAcl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"RMHAProtocolService"
argument_list|,
literal|"Exception transitioning to standby"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Error when transitioning to Standby mode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceStatus ()
specifier|public
specifier|synchronized
name|HAServiceStatus
name|getServiceStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
literal|"getServiceState"
argument_list|)
expr_stmt|;
name|HAServiceStatus
name|ret
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|haState
argument_list|)
decl_stmt|;
if|if
condition|(
name|haState
operator|==
name|HAServiceState
operator|.
name|ACTIVE
operator|||
name|haState
operator|==
name|HAServiceState
operator|.
name|STANDBY
condition|)
block|{
name|ret
operator|.
name|setReadyToBecomeActive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setNotReadyToBecomeActive
argument_list|(
literal|"State is "
operator|+
name|haState
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|checkAccess (String method)
specifier|private
name|UserGroupInformation
name|checkAccess
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RMServerUtils
operator|.
name|verifyAccess
argument_list|(
name|adminAcl
argument_list|,
name|method
argument_list|,
name|LOG
argument_list|)
return|;
block|}
block|}
end_class

end_unit

