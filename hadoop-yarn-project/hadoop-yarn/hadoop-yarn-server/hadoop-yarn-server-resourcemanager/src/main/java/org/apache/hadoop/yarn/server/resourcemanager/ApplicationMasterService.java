begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|StrictPreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidContainerReleaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceBlacklistRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptStatusupdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUnregistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|RMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Private
DECL|class|ApplicationMasterService
specifier|public
class|class
name|ApplicationMasterService
extends|extends
name|AbstractService
implements|implements
name|ApplicationMasterProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ApplicationMasterService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|amLivelinessMonitor
specifier|private
specifier|final
name|AMLivelinessMonitor
name|amLivelinessMonitor
decl_stmt|;
DECL|field|rScheduler
specifier|private
name|YarnScheduler
name|rScheduler
decl_stmt|;
DECL|field|bindAddress
specifier|private
name|InetSocketAddress
name|bindAddress
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|responseMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|AllocateResponseLock
argument_list|>
name|responseMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|AllocateResponseLock
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|resync
specifier|private
specifier|final
name|AllocateResponse
name|resync
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|ApplicationMasterService (RMContext rmContext, YarnScheduler scheduler)
specifier|public
name|ApplicationMasterService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|)
block|{
name|super
argument_list|(
name|ApplicationMasterService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|amLivelinessMonitor
operator|=
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
expr_stmt|;
name|this
operator|.
name|rScheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|resync
operator|.
name|setAMCommand
argument_list|(
name|AMCommand
operator|.
name|AM_RESYNC
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|masterServiceAddress
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_PORT
argument_list|)
decl_stmt|;
name|Configuration
name|serverConf
init|=
name|conf
decl_stmt|;
comment|// If the auth is not-simple, enforce it to be token-based.
name|serverConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|serverConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|TOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|masterServiceAddress
argument_list|,
name|serverConf
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
argument_list|,
name|serverConf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
operator|new
name|RMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|bindAddress
operator|=
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|getBindAddress ()
specifier|public
name|InetSocketAddress
name|getBindAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|bindAddress
return|;
block|}
comment|// Obtain the needed AMRMTokenIdentifier from the remote-UGI. RPC layer
comment|// currently sets only the required id, but iterate through anyways just to be
comment|// sure.
DECL|method|selectAMRMTokenIdentifier ( UserGroupInformation remoteUgi)
specifier|private
name|AMRMTokenIdentifier
name|selectAMRMTokenIdentifier
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|)
throws|throws
name|IOException
block|{
name|AMRMTokenIdentifier
name|result
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|TokenIdentifier
argument_list|>
name|tokenIds
init|=
name|remoteUgi
operator|.
name|getTokenIdentifiers
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenIdentifier
name|tokenId
range|:
name|tokenIds
control|)
block|{
if|if
condition|(
name|tokenId
operator|instanceof
name|AMRMTokenIdentifier
condition|)
block|{
name|result
operator|=
operator|(
name|AMRMTokenIdentifier
operator|)
name|tokenId
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|authorizeRequest ()
specifier|private
name|ApplicationAttemptId
name|authorizeRequest
parameter_list|()
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|remoteUgi
decl_stmt|;
try|try
block|{
name|remoteUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot obtain the user-name for authorizing ApplicationMaster. "
operator|+
literal|"Got exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|boolean
name|tokenFound
init|=
literal|false
decl_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
name|AMRMTokenIdentifier
name|appTokenIdentifier
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appTokenIdentifier
operator|=
name|selectAMRMTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
expr_stmt|;
if|if
condition|(
name|appTokenIdentifier
operator|==
literal|null
condition|)
block|{
name|tokenFound
operator|=
literal|false
expr_stmt|;
name|message
operator|=
literal|"No AMRMToken found for user "
operator|+
name|remoteUgi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tokenFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|tokenFound
operator|=
literal|false
expr_stmt|;
name|message
operator|=
literal|"Got exception while looking for AMRMToken for user "
operator|+
name|remoteUgi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tokenFound
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|appTokenIdentifier
operator|.
name|getApplicationAttemptId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|authorizeRequest
argument_list|()
decl_stmt|;
name|ApplicationId
name|appID
init|=
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AllocateResponseLock
name|lock
init|=
name|responseMap
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|REGISTER_AM
argument_list|,
literal|"Application doesn't exist in cache "
operator|+
name|applicationAttemptId
argument_list|,
literal|"ApplicationMasterService"
argument_list|,
literal|"Error in registering application master"
argument_list|,
name|appID
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|throwApplicationDoesNotExistInCacheException
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|// Allow only one thread in AM to do registerApp at a time.
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|AllocateResponse
name|lastResponse
init|=
name|lock
operator|.
name|getAllocateResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasApplicationMasterRegistered
argument_list|(
name|applicationAttemptId
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Application Master is already registered : "
operator|+
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|REGISTER_AM
argument_list|,
literal|""
argument_list|,
literal|"ApplicationMasterService"
argument_list|,
name|message
argument_list|,
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidApplicationMasterRequestException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|this
operator|.
name|amLivelinessMonitor
operator|.
name|receivedPing
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
comment|// Setting the response id to 0 to identify if the
comment|// application master is register for the respective attemptid
name|lastResponse
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setAllocateResponse
argument_list|(
name|lastResponse
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AM registration "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptRegistrationEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
operator|.
name|getHost
argument_list|()
argument_list|,
name|request
operator|.
name|getRpcPort
argument_list|()
argument_list|,
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|REGISTER_AM
argument_list|,
literal|"ApplicationMasterService"
argument_list|,
name|appID
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
comment|// Pick up min/max resource from scheduler...
name|RegisterApplicationMasterResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterApplicationMasterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setMaximumResourceCapability
argument_list|(
name|rScheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setApplicationACLs
argument_list|(
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting client token master key"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setClientToAMTokenMasterKey
argument_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|getMasterKey
argument_list|(
name|applicationAttemptId
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|authorizeRequest
argument_list|()
decl_stmt|;
name|AllocateResponseLock
name|lock
init|=
name|responseMap
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|throwApplicationDoesNotExistInCacheException
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|// Allow only one thread in AM to do finishApp at a time.
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|this
operator|.
name|amLivelinessMonitor
operator|.
name|receivedPing
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|request
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|request
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|isAppSafeToUnregister
argument_list|()
condition|)
block|{
return|return
name|FinishApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|FinishApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|throwApplicationDoesNotExistInCacheException ( ApplicationAttemptId appAttemptId)
specifier|private
name|void
name|throwApplicationDoesNotExistInCacheException
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|InvalidApplicationMasterRequestException
block|{
name|String
name|message
init|=
literal|"Application doesn't exist in cache "
operator|+
name|appAttemptId
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidApplicationMasterRequestException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * @param appAttemptId    * @return true if application is registered for the respective attemptid    */
DECL|method|hasApplicationMasterRegistered ( ApplicationAttemptId appAttemptId)
specifier|public
name|boolean
name|hasApplicationMasterRegistered
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|boolean
name|hasApplicationMasterRegistered
init|=
literal|false
decl_stmt|;
name|AllocateResponseLock
name|lastResponse
init|=
name|responseMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastResponse
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|lastResponse
init|)
block|{
if|if
condition|(
name|lastResponse
operator|.
name|getAllocateResponse
argument_list|()
operator|!=
literal|null
operator|&&
name|lastResponse
operator|.
name|getAllocateResponse
argument_list|()
operator|.
name|getResponseId
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|hasApplicationMasterRegistered
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|hasApplicationMasterRegistered
return|;
block|}
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|authorizeRequest
argument_list|()
decl_stmt|;
name|this
operator|.
name|amLivelinessMonitor
operator|.
name|receivedPing
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
comment|/* check if its in cache */
name|AllocateResponseLock
name|lock
init|=
name|responseMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AppAttemptId doesnt exist in cache "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
name|resync
return|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|AllocateResponse
name|lastResponse
init|=
name|lock
operator|.
name|getAllocateResponse
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasApplicationMasterRegistered
argument_list|(
name|appAttemptId
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Application Master is trying to allocate before registering for: "
operator|+
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|REGISTER_AM
argument_list|,
literal|""
argument_list|,
literal|"ApplicationMasterService"
argument_list|,
name|message
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidApplicationMasterRequestException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
operator|)
operator|==
name|lastResponse
operator|.
name|getResponseId
argument_list|()
condition|)
block|{
comment|/* old heartbeat */
return|return
name|lastResponse
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
operator|<
name|lastResponse
operator|.
name|getResponseId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid responseid from appAttemptId "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
comment|// Oh damn! Sending reboot isn't enough. RM state is corrupted. TODO:
comment|// Reboot is not useful since after AM reboots, it will send register
comment|// and
comment|// get an exception. Might as well throw an exception here.
return|return
name|resync
return|;
block|}
comment|// Send the status update to the appAttempt.
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptStatusupdateEvent
argument_list|(
name|appAttemptId
argument_list|,
name|request
operator|.
name|getProgress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
name|request
operator|.
name|getAskList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
name|request
operator|.
name|getReleaseList
argument_list|()
decl_stmt|;
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|(
name|blacklistRequest
operator|!=
literal|null
operator|)
condition|?
name|blacklistRequest
operator|.
name|getBlacklistAdditions
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
operator|(
name|blacklistRequest
operator|!=
literal|null
operator|)
condition|?
name|blacklistRequest
operator|.
name|getBlacklistRemovals
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// sanity check
try|try
block|{
name|RMServerUtils
operator|.
name|validateResourceRequests
argument_list|(
name|ask
argument_list|,
name|rScheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid resource ask by application "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|RMServerUtils
operator|.
name|validateBlacklistRequest
argument_list|(
name|blacklistRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceBlacklistRequestException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid blacklist request by application "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|RMServerUtils
operator|.
name|validateContainerReleaseRequest
argument_list|(
name|release
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidContainerReleaseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid container release by application "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// Send new requests to appAttempt.
name|Allocation
name|allocation
init|=
name|this
operator|.
name|rScheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
name|release
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// update the response with the deltas of node status changes
name|List
argument_list|<
name|RMNode
argument_list|>
name|updatedNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|pullRMNodeUpdates
argument_list|(
name|updatedNodes
argument_list|)
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|updatedNodeReports
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|updatedNodes
control|)
block|{
name|SchedulerNodeReport
name|schedulerNodeReport
init|=
name|rScheduler
operator|.
name|getNodeReport
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|used
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|numContainers
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|schedulerNodeReport
operator|!=
literal|null
condition|)
block|{
name|used
operator|=
name|schedulerNodeReport
operator|.
name|getUsedResource
argument_list|()
expr_stmt|;
name|numContainers
operator|=
name|schedulerNodeReport
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
name|NodeReport
name|report
init|=
name|BuilderUtils
operator|.
name|newNodeReport
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getRackName
argument_list|()
argument_list|,
name|used
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|numContainers
argument_list|,
name|rmNode
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
decl_stmt|;
name|updatedNodeReports
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setUpdatedNodes
argument_list|(
name|updatedNodeReports
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setAllocatedContainers
argument_list|(
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
name|allocateResponse
operator|.
name|setCompletedContainersStatuses
argument_list|(
name|appAttempt
operator|.
name|pullJustFinishedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|allocateResponse
operator|.
name|setResponseId
argument_list|(
name|lastResponse
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|allocateResponse
operator|.
name|setAvailableResources
argument_list|(
name|allocation
operator|.
name|getResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|allocateResponse
operator|.
name|setNumClusterNodes
argument_list|(
name|this
operator|.
name|rScheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// add preemption to the allocateResponse message (if any)
name|allocateResponse
operator|.
name|setPreemptionMessage
argument_list|(
name|generatePreemptionMessage
argument_list|(
name|allocation
argument_list|)
argument_list|)
expr_stmt|;
comment|// Adding NMTokens for allocated containers.
if|if
condition|(
operator|!
name|allocation
operator|.
name|getContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|allocateResponse
operator|.
name|setNMTokens
argument_list|(
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|createAndGetNMTokens
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|appAttemptId
argument_list|,
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*        * As we are updating the response inside the lock object so we don't        * need to worry about unregister call occurring in between (which        * removes the lock object).        */
name|lock
operator|.
name|setAllocateResponse
argument_list|(
name|allocateResponse
argument_list|)
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
block|}
DECL|method|generatePreemptionMessage (Allocation allocation)
specifier|private
name|PreemptionMessage
name|generatePreemptionMessage
parameter_list|(
name|Allocation
name|allocation
parameter_list|)
block|{
name|PreemptionMessage
name|pMsg
init|=
literal|null
decl_stmt|;
comment|// assemble strict preemption request
if|if
condition|(
name|allocation
operator|.
name|getStrictContainerPreemptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pMsg
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
expr_stmt|;
name|StrictPreemptionContract
name|pStrict
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StrictPreemptionContract
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PreemptionContainer
argument_list|>
name|pCont
init|=
operator|new
name|HashSet
argument_list|<
name|PreemptionContainer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|allocation
operator|.
name|getStrictContainerPreemptions
argument_list|()
control|)
block|{
name|PreemptionContainer
name|pc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|pCont
operator|.
name|add
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|pStrict
operator|.
name|setContainers
argument_list|(
name|pCont
argument_list|)
expr_stmt|;
name|pMsg
operator|.
name|setStrictContract
argument_list|(
name|pStrict
argument_list|)
expr_stmt|;
block|}
comment|// assemble negotiable preemption request
if|if
condition|(
name|allocation
operator|.
name|getResourcePreemptions
argument_list|()
operator|!=
literal|null
operator|&&
name|allocation
operator|.
name|getResourcePreemptions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
operator|!=
literal|null
operator|&&
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pMsg
operator|==
literal|null
condition|)
block|{
name|pMsg
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|PreemptionContract
name|contract
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContract
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PreemptionContainer
argument_list|>
name|pCont
init|=
operator|new
name|HashSet
argument_list|<
name|PreemptionContainer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
control|)
block|{
name|PreemptionContainer
name|pc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|pCont
operator|.
name|add
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PreemptionResourceRequest
argument_list|>
name|pRes
init|=
operator|new
name|ArrayList
argument_list|<
name|PreemptionResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|crr
range|:
name|allocation
operator|.
name|getResourcePreemptions
argument_list|()
control|)
block|{
name|PreemptionResourceRequest
name|prr
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|prr
operator|.
name|setResourceRequest
argument_list|(
name|crr
argument_list|)
expr_stmt|;
name|pRes
operator|.
name|add
argument_list|(
name|prr
argument_list|)
expr_stmt|;
block|}
name|contract
operator|.
name|setContainers
argument_list|(
name|pCont
argument_list|)
expr_stmt|;
name|contract
operator|.
name|setResourceRequest
argument_list|(
name|pRes
argument_list|)
expr_stmt|;
name|pMsg
operator|.
name|setContract
argument_list|(
name|contract
argument_list|)
expr_stmt|;
block|}
return|return
name|pMsg
return|;
block|}
DECL|method|registerAppAttempt (ApplicationAttemptId attemptId)
specifier|public
name|void
name|registerAppAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|AllocateResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set response id to -1 before application master for the following
comment|// attemptID get registered
name|response
operator|.
name|setResponseId
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering app attempt : "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
name|responseMap
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
operator|new
name|AllocateResponseLock
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|registerApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterAttempt (ApplicationAttemptId attemptId)
specifier|public
name|void
name|unregisterAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unregistering app attempt : "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
name|responseMap
operator|.
name|remove
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|unregisterApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
specifier|public
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|class|AllocateResponseLock
specifier|public
specifier|static
class|class
name|AllocateResponseLock
block|{
DECL|field|response
specifier|private
name|AllocateResponse
name|response
decl_stmt|;
DECL|method|AllocateResponseLock (AllocateResponse response)
specifier|public
name|AllocateResponseLock
parameter_list|(
name|AllocateResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|getAllocateResponse ()
specifier|public
specifier|synchronized
name|AllocateResponse
name|getAllocateResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|setAllocateResponse (AllocateResponse response)
specifier|public
specifier|synchronized
name|void
name|setAllocateResponse
parameter_list|(
name|AllocateResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

