begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A container class for automatically created child leaf queues.  * From the user perspective this is equivalent to a LeafQueue,  * but functionality wise is a sub-class of ParentQueue  */
end_comment

begin_class
DECL|class|AbstractManagedParentQueue
specifier|public
specifier|abstract
class|class
name|AbstractManagedParentQueue
extends|extends
name|ParentQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractManagedParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|leafQueueTemplate
specifier|protected
name|AutoCreatedLeafQueueTemplate
name|leafQueueTemplate
decl_stmt|;
DECL|method|AbstractManagedParentQueue (CapacitySchedulerContext cs, String queueName, CSQueue parent, CSQueue old)
specifier|public
name|AbstractManagedParentQueue
parameter_list|(
name|CapacitySchedulerContext
name|cs
parameter_list|,
name|String
name|queueName
parameter_list|,
name|CSQueue
name|parent
parameter_list|,
name|CSQueue
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cs
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|old
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupQueueConfigs
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CSQueue newlyParsedQueue, Resource clusterResource)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|newlyParsedQueue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Set new configs
name|setupQueueConfigs
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
comment|// run reinitialize on each existing queue, to trigger absolute cap
comment|// recomputations
for|for
control|(
name|CSQueue
name|res
range|:
name|this
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
name|res
operator|.
name|reinitialize
argument_list|(
name|res
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Initialize leaf queue configs from template configurations specified on    * parent queue.    */
DECL|method|initializeLeafQueueConfigs (String queuePath)
specifier|protected
name|AutoCreatedLeafQueueTemplate
operator|.
name|Builder
name|initializeLeafQueueConfigs
parameter_list|(
name|String
name|queuePath
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
name|csContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|AutoCreatedLeafQueueTemplate
operator|.
name|Builder
name|leafQueueTemplateBuilder
init|=
operator|new
name|AutoCreatedLeafQueueTemplate
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|int
name|maxApps
init|=
name|conf
operator|.
name|getMaximumApplicationsPerQueue
argument_list|(
name|queuePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxApps
operator|<
literal|0
condition|)
block|{
name|maxApps
operator|=
call|(
name|int
call|)
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|DEFAULT_MAXIMUM_SYSTEM_APPLICATIIONS
operator|*
name|getAbsoluteCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|userLimit
init|=
name|conf
operator|.
name|getUserLimit
argument_list|(
name|queuePath
argument_list|)
decl_stmt|;
name|float
name|userLimitFactor
init|=
name|conf
operator|.
name|getUserLimitFactor
argument_list|(
name|queuePath
argument_list|)
decl_stmt|;
name|leafQueueTemplateBuilder
operator|.
name|userLimit
argument_list|(
name|userLimit
argument_list|)
operator|.
name|userLimitFactor
argument_list|(
name|userLimitFactor
argument_list|)
operator|.
name|maxApps
argument_list|(
name|maxApps
argument_list|)
operator|.
name|maxAppsPerUser
argument_list|(
call|(
name|int
call|)
argument_list|(
name|maxApps
operator|*
operator|(
name|userLimit
operator|/
literal|100.0f
operator|)
operator|*
name|userLimitFactor
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|leafQueueTemplateBuilder
return|;
block|}
comment|/**    * Add the specified child queue.    * @param childQueue reference to the child queue to be added    * @throws SchedulerDynamicEditException    */
DECL|method|addChildQueue (CSQueue childQueue)
specifier|public
name|void
name|addChildQueue
parameter_list|(
name|CSQueue
name|childQueue
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|childQueue
operator|.
name|getCapacity
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Queue "
operator|+
name|childQueue
operator|+
literal|" being added has non zero capacity."
argument_list|)
throw|;
block|}
name|boolean
name|added
init|=
name|this
operator|.
name|childQueues
operator|.
name|add
argument_list|(
name|childQueue
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"updateChildQueues (action: add queue): "
operator|+
name|added
operator|+
literal|" "
operator|+
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove the specified child queue.    * @param childQueue reference to the child queue to be removed    * @throws SchedulerDynamicEditException    */
DECL|method|removeChildQueue (CSQueue childQueue)
specifier|public
name|void
name|removeChildQueue
parameter_list|(
name|CSQueue
name|childQueue
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|childQueue
operator|.
name|getCapacity
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Queue "
operator|+
name|childQueue
operator|+
literal|" being removed has non zero capacity."
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|CSQueue
argument_list|>
name|qiter
init|=
name|childQueues
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|qiter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSQueue
name|cs
init|=
name|qiter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|equals
argument_list|(
name|childQueue
argument_list|)
condition|)
block|{
name|qiter
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed child queue: {}"
operator|+
name|cs
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove the specified child queue.    * @param childQueueName name of the child queue to be removed    * @throws SchedulerDynamicEditException    */
DECL|method|removeChildQueue (String childQueueName)
specifier|public
name|CSQueue
name|removeChildQueue
parameter_list|(
name|String
name|childQueueName
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|CSQueue
name|childQueue
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|childQueue
operator|=
name|this
operator|.
name|csContext
operator|.
name|getCapacitySchedulerQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|childQueueName
argument_list|)
expr_stmt|;
if|if
condition|(
name|childQueue
operator|!=
literal|null
condition|)
block|{
name|removeChildQueue
argument_list|(
name|childQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Cannot find queue to delete "
operator|+
literal|": "
operator|+
name|childQueueName
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|childQueue
return|;
block|}
DECL|method|sumOfChildCapacities ()
specifier|protected
name|float
name|sumOfChildCapacities
parameter_list|()
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|float
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CSQueue
name|l
range|:
name|childQueues
control|)
block|{
name|ret
operator|+=
name|l
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sumOfChildAbsCapacities ()
specifier|protected
name|float
name|sumOfChildAbsCapacities
parameter_list|()
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|float
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CSQueue
name|l
range|:
name|childQueues
control|)
block|{
name|ret
operator|+=
name|l
operator|.
name|getAbsoluteCapacity
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AutoCreatedLeafQueueTemplate
specifier|public
specifier|static
class|class
name|AutoCreatedLeafQueueTemplate
block|{
DECL|field|queueCapacities
specifier|private
name|QueueCapacities
name|queueCapacities
decl_stmt|;
DECL|field|maxApps
specifier|private
name|int
name|maxApps
decl_stmt|;
DECL|field|maxAppsPerUser
specifier|private
name|int
name|maxAppsPerUser
decl_stmt|;
DECL|field|userLimit
specifier|private
name|int
name|userLimit
decl_stmt|;
DECL|field|userLimitFactor
specifier|private
name|float
name|userLimitFactor
decl_stmt|;
DECL|method|AutoCreatedLeafQueueTemplate (Builder builder)
name|AutoCreatedLeafQueueTemplate
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|maxApps
operator|=
name|builder
operator|.
name|maxApps
expr_stmt|;
name|this
operator|.
name|maxAppsPerUser
operator|=
name|builder
operator|.
name|maxAppsPerUser
expr_stmt|;
name|this
operator|.
name|userLimit
operator|=
name|builder
operator|.
name|userLimit
expr_stmt|;
name|this
operator|.
name|userLimitFactor
operator|=
name|builder
operator|.
name|userLimitFactor
expr_stmt|;
name|this
operator|.
name|queueCapacities
operator|=
name|builder
operator|.
name|queueCapacities
expr_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|maxApps
specifier|private
name|int
name|maxApps
decl_stmt|;
DECL|field|maxAppsPerUser
specifier|private
name|int
name|maxAppsPerUser
decl_stmt|;
DECL|field|userLimit
specifier|private
name|int
name|userLimit
decl_stmt|;
DECL|field|userLimitFactor
specifier|private
name|float
name|userLimitFactor
decl_stmt|;
DECL|field|queueCapacities
specifier|private
name|QueueCapacities
name|queueCapacities
decl_stmt|;
DECL|method|maxApps (int maxApplications)
name|Builder
name|maxApps
parameter_list|(
name|int
name|maxApplications
parameter_list|)
block|{
name|this
operator|.
name|maxApps
operator|=
name|maxApplications
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxAppsPerUser (int maxApplicationsPerUser)
name|Builder
name|maxAppsPerUser
parameter_list|(
name|int
name|maxApplicationsPerUser
parameter_list|)
block|{
name|this
operator|.
name|maxAppsPerUser
operator|=
name|maxApplicationsPerUser
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|userLimit (int usrLimit)
name|Builder
name|userLimit
parameter_list|(
name|int
name|usrLimit
parameter_list|)
block|{
name|this
operator|.
name|userLimit
operator|=
name|usrLimit
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|userLimitFactor (float ulf)
name|Builder
name|userLimitFactor
parameter_list|(
name|float
name|ulf
parameter_list|)
block|{
name|this
operator|.
name|userLimitFactor
operator|=
name|ulf
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|capacities (QueueCapacities capacities)
name|Builder
name|capacities
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|)
block|{
name|this
operator|.
name|queueCapacities
operator|=
name|capacities
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
name|AutoCreatedLeafQueueTemplate
name|build
parameter_list|()
block|{
return|return
operator|new
name|AutoCreatedLeafQueueTemplate
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|getUserLimit ()
specifier|public
name|int
name|getUserLimit
parameter_list|()
block|{
return|return
name|userLimit
return|;
block|}
DECL|method|getUserLimitFactor ()
specifier|public
name|float
name|getUserLimitFactor
parameter_list|()
block|{
return|return
name|userLimitFactor
return|;
block|}
DECL|method|getQueueCapacities ()
specifier|public
name|QueueCapacities
name|getQueueCapacities
parameter_list|()
block|{
return|return
name|queueCapacities
return|;
block|}
DECL|method|getMaxApps ()
specifier|public
name|int
name|getMaxApps
parameter_list|()
block|{
return|return
name|maxApps
return|;
block|}
DECL|method|getMaxAppsPerUser ()
specifier|public
name|int
name|getMaxAppsPerUser
parameter_list|()
block|{
return|return
name|maxAppsPerUser
return|;
block|}
block|}
DECL|method|getLeafQueueTemplate ()
specifier|public
name|AutoCreatedLeafQueueTemplate
name|getLeafQueueTemplate
parameter_list|()
block|{
return|return
name|leafQueueTemplate
return|;
block|}
block|}
end_class

end_unit

