begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|RMNodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerLeafQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|PartitionQueueCapacitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|PartitionResourcesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|AppBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ResponseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|SubView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|DIV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|LI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|UL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|InfoBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_class
DECL|class|CapacitySchedulerPage
class|class
name|CapacitySchedulerPage
extends|extends
name|RmView
block|{
DECL|field|_Q
specifier|static
specifier|final
name|String
name|_Q
init|=
literal|".ui-state-default.ui-corner-all"
decl_stmt|;
DECL|field|Q_MAX_WIDTH
specifier|static
specifier|final
name|float
name|Q_MAX_WIDTH
init|=
literal|0.8f
decl_stmt|;
DECL|field|Q_STATS_POS
specifier|static
specifier|final
name|float
name|Q_STATS_POS
init|=
name|Q_MAX_WIDTH
operator|+
literal|0.05f
decl_stmt|;
DECL|field|Q_END
specifier|static
specifier|final
name|String
name|Q_END
init|=
literal|"left:101%"
decl_stmt|;
DECL|field|Q_GIVEN
specifier|static
specifier|final
name|String
name|Q_GIVEN
init|=
literal|"left:0%;background:none;border:1px dashed #BFBFBF"
decl_stmt|;
DECL|field|Q_AUTO_CREATED
specifier|static
specifier|final
name|String
name|Q_AUTO_CREATED
init|=
literal|"background:#F4F0CB"
decl_stmt|;
DECL|field|Q_OVER
specifier|static
specifier|final
name|String
name|Q_OVER
init|=
literal|"background:#FFA333"
decl_stmt|;
DECL|field|Q_UNDER
specifier|static
specifier|final
name|String
name|Q_UNDER
init|=
literal|"background:#5BD75B"
decl_stmt|;
DECL|field|ACTIVE_USER
specifier|static
specifier|final
name|String
name|ACTIVE_USER
init|=
literal|"background:#FFFF00"
decl_stmt|;
comment|// Yellow highlight
annotation|@
name|RequestScoped
DECL|class|CSQInfo
specifier|static
class|class
name|CSQInfo
block|{
DECL|field|csinfo
name|CapacitySchedulerInfo
name|csinfo
decl_stmt|;
DECL|field|qinfo
name|CapacitySchedulerQueueInfo
name|qinfo
decl_stmt|;
DECL|field|label
name|String
name|label
decl_stmt|;
DECL|field|isExclusiveNodeLabel
name|boolean
name|isExclusiveNodeLabel
decl_stmt|;
block|}
DECL|class|LeafQueueInfoBlock
specifier|static
class|class
name|LeafQueueInfoBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|lqinfo
specifier|final
name|CapacitySchedulerLeafQueueInfo
name|lqinfo
decl_stmt|;
DECL|field|nodeLabel
specifier|private
name|String
name|nodeLabel
decl_stmt|;
DECL|method|LeafQueueInfoBlock (ViewContext ctx, CSQInfo info)
annotation|@
name|Inject
name|LeafQueueInfoBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|,
name|CSQInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|lqinfo
operator|=
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|info
operator|.
name|qinfo
expr_stmt|;
name|nodeLabel
operator|=
name|info
operator|.
name|label
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
if|if
condition|(
name|nodeLabel
operator|==
literal|null
condition|)
block|{
name|renderLeafQueueInfoWithoutParition
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|renderLeafQueueInfoWithPartition
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderLeafQueueInfoWithPartition (Block html)
specifier|private
name|void
name|renderLeafQueueInfoWithPartition
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|nodeLabelDisplay
init|=
name|nodeLabel
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|nodeLabel
decl_stmt|;
comment|// first display the queue's label specific details :
name|ResponseInfo
name|ri
init|=
name|info
argument_list|(
literal|"\'"
operator|+
name|lqinfo
operator|.
name|getQueuePath
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|+
literal|"\' Queue Status for Partition \'"
operator|+
name|nodeLabelDisplay
operator|+
literal|"\'"
argument_list|)
decl_stmt|;
name|renderQueueCapacityInfo
argument_list|(
name|ri
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
name|html
operator|.
name|__
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// clear the info contents so this queue's info doesn't accumulate into
comment|// another queue's info
name|ri
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// second display the queue specific details :
name|ri
operator|=
name|info
argument_list|(
literal|"\'"
operator|+
name|lqinfo
operator|.
name|getQueuePath
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|+
literal|"\' Queue Status"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Queue State:"
argument_list|,
name|lqinfo
operator|.
name|getQueueState
argument_list|()
argument_list|)
expr_stmt|;
name|renderCommonLeafQueueInfo
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|html
operator|.
name|__
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// clear the info contents so this queue's info doesn't accumulate into
comment|// another queue's info
name|ri
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|renderLeafQueueInfoWithoutParition (Block html)
specifier|private
name|void
name|renderLeafQueueInfoWithoutParition
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|ResponseInfo
name|ri
init|=
name|info
argument_list|(
literal|"\'"
operator|+
name|lqinfo
operator|.
name|getQueuePath
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|+
literal|"\' Queue Status"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Queue State:"
argument_list|,
name|lqinfo
operator|.
name|getQueueState
argument_list|()
argument_list|)
decl_stmt|;
name|renderQueueCapacityInfo
argument_list|(
name|ri
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|renderCommonLeafQueueInfo
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|html
operator|.
name|__
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// clear the info contents so this queue's info doesn't accumulate into
comment|// another queue's info
name|ri
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|renderQueueCapacityInfo (ResponseInfo ri, String label)
specifier|private
name|void
name|renderQueueCapacityInfo
parameter_list|(
name|ResponseInfo
name|ri
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|PartitionQueueCapacitiesInfo
name|capacities
init|=
name|lqinfo
operator|.
name|getCapacities
argument_list|()
operator|.
name|getPartitionQueueCapacitiesInfo
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|PartitionResourcesInfo
name|resourceUsages
init|=
name|lqinfo
operator|.
name|getResources
argument_list|()
operator|.
name|getPartitionResourceUsageInfo
argument_list|(
name|label
argument_list|)
decl_stmt|;
comment|// Get UserInfo from first user to calculate AM Resource Limit per user.
name|ResourceInfo
name|userAMResourceLimit
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|UserInfo
argument_list|>
name|usersList
init|=
name|lqinfo
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|usersList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|userAMResourceLimit
operator|=
name|resourceUsages
operator|.
name|getUserAmLimit
argument_list|()
expr_stmt|;
block|}
comment|// If no users are present or if AM limit per user doesn't exist, retrieve
comment|// AM Limit for that queue.
if|if
condition|(
name|userAMResourceLimit
operator|==
literal|null
condition|)
block|{
name|userAMResourceLimit
operator|=
name|resourceUsages
operator|.
name|getAMLimit
argument_list|()
expr_stmt|;
block|}
name|ResourceInfo
name|amUsed
init|=
operator|(
name|resourceUsages
operator|.
name|getAmUsed
argument_list|()
operator|==
literal|null
operator|)
condition|?
operator|new
name|ResourceInfo
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
else|:
name|resourceUsages
operator|.
name|getAmUsed
argument_list|()
decl_stmt|;
name|ri
operator|.
name|__
argument_list|(
literal|"Used Capacity:"
argument_list|,
name|appendPercent
argument_list|(
name|resourceUsages
operator|.
name|getUsed
argument_list|()
argument_list|,
name|capacities
operator|.
name|getUsedCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Configured Capacity:"
argument_list|,
name|capacities
operator|.
name|getConfiguredMinResource
argument_list|()
operator|==
literal|null
condition|?
name|Resources
operator|.
name|none
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|capacities
operator|.
name|getConfiguredMinResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Configured Max Capacity:"
argument_list|,
operator|(
name|capacities
operator|.
name|getConfiguredMaxResource
argument_list|()
operator|==
literal|null
operator|||
name|capacities
operator|.
name|getConfiguredMaxResource
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
operator|)
condition|?
literal|"unlimited"
else|:
name|capacities
operator|.
name|getConfiguredMaxResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Effective Capacity:"
argument_list|,
name|appendPercent
argument_list|(
name|capacities
operator|.
name|getEffectiveMinResource
argument_list|()
argument_list|,
name|capacities
operator|.
name|getCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Effective Max Capacity:"
argument_list|,
name|appendPercent
argument_list|(
name|capacities
operator|.
name|getEffectiveMaxResource
argument_list|()
argument_list|,
name|capacities
operator|.
name|getMaxCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Absolute Used Capacity:"
argument_list|,
name|percent
argument_list|(
name|capacities
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Absolute Configured Capacity:"
argument_list|,
name|percent
argument_list|(
name|capacities
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Absolute Configured Max Capacity:"
argument_list|,
name|percent
argument_list|(
name|capacities
operator|.
name|getAbsoluteMaxCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Used Resources:"
argument_list|,
name|resourceUsages
operator|.
name|getUsed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Configured Max Application Master Limit:"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|capacities
operator|.
name|getMaxAMLimitPercentage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max Application Master Resources:"
argument_list|,
name|resourceUsages
operator|.
name|getAMLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Used Application Master Resources:"
argument_list|,
name|amUsed
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max Application Master Resources Per User:"
argument_list|,
name|userAMResourceLimit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|renderCommonLeafQueueInfo (ResponseInfo ri)
specifier|private
name|void
name|renderCommonLeafQueueInfo
parameter_list|(
name|ResponseInfo
name|ri
parameter_list|)
block|{
name|ri
operator|.
name|__
argument_list|(
literal|"Num Schedulable Applications:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Num Non-Schedulable Applications:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Num Containers:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getNumContainers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max Applications:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getMaxApplications
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max Applications Per User:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Configured Minimum User Limit Percent:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getUserLimit
argument_list|()
argument_list|)
operator|+
literal|"%"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Configured User Limit Factor:"
argument_list|,
name|lqinfo
operator|.
name|getUserLimitFactor
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Accessible Node Labels:"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|lqinfo
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"Ordering Policy: "
argument_list|,
name|lqinfo
operator|.
name|getOrderingPolicyDisplayName
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Preemption:"
argument_list|,
name|lqinfo
operator|.
name|getPreemptionDisabled
argument_list|()
condition|?
literal|"disabled"
else|:
literal|"enabled"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Intra-queue Preemption:"
argument_list|,
name|lqinfo
operator|.
name|getIntraQueuePreemptionDisabled
argument_list|()
condition|?
literal|"disabled"
else|:
literal|"enabled"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Default Node Label Expression:"
argument_list|,
name|lqinfo
operator|.
name|getDefaultNodeLabelExpression
argument_list|()
operator|==
literal|null
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|lqinfo
operator|.
name|getDefaultNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|__
argument_list|(
literal|"Default Application Priority:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lqinfo
operator|.
name|getDefaultApplicationPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|QueueUsersInfoBlock
specifier|static
class|class
name|QueueUsersInfoBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|lqinfo
specifier|final
name|CapacitySchedulerLeafQueueInfo
name|lqinfo
decl_stmt|;
DECL|field|nodeLabel
specifier|private
name|String
name|nodeLabel
decl_stmt|;
annotation|@
name|Inject
DECL|method|QueueUsersInfoBlock (ViewContext ctx, CSQInfo info)
name|QueueUsersInfoBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|,
name|CSQInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|lqinfo
operator|=
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|info
operator|.
name|qinfo
expr_stmt|;
name|nodeLabel
operator|=
name|info
operator|.
name|label
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#userinfo"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-widget-header"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"User Name"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max Resource"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Weight"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Used Resource"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max AM Resource"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Used AM Resource"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Schedulable Apps"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Non-Schedulable Apps"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|PartitionResourcesInfo
name|queueUsageResources
init|=
name|lqinfo
operator|.
name|getResources
argument_list|()
operator|.
name|getPartitionResourceUsageInfo
argument_list|(
name|nodeLabel
operator|==
literal|null
condition|?
literal|""
else|:
name|nodeLabel
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|UserInfo
argument_list|>
name|users
init|=
name|lqinfo
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
decl_stmt|;
for|for
control|(
name|UserInfo
name|userInfo
range|:
name|users
control|)
block|{
name|ResourceInfo
name|resourcesUsed
init|=
name|userInfo
operator|.
name|getResourcesUsed
argument_list|()
decl_stmt|;
name|ResourceInfo
name|userAMLimitPerPartition
init|=
name|queueUsageResources
operator|.
name|getUserAmLimit
argument_list|()
decl_stmt|;
comment|// If AM limit per user is null, use the AM limit for the queue level.
if|if
condition|(
name|userAMLimitPerPartition
operator|==
literal|null
condition|)
block|{
name|userAMLimitPerPartition
operator|=
name|queueUsageResources
operator|.
name|getAMLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|userInfo
operator|.
name|getUserWeight
argument_list|()
operator|!=
literal|1.0
condition|)
block|{
name|userAMLimitPerPartition
operator|=
operator|new
name|ResourceInfo
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|userAMLimitPerPartition
operator|.
name|getResource
argument_list|()
argument_list|,
name|userInfo
operator|.
name|getUserWeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeLabel
operator|!=
literal|null
condition|)
block|{
name|resourcesUsed
operator|=
name|userInfo
operator|.
name|getResourceUsageInfo
argument_list|()
operator|.
name|getPartitionResourceUsageInfo
argument_list|(
name|nodeLabel
argument_list|)
operator|.
name|getUsed
argument_list|()
expr_stmt|;
block|}
name|ResourceInfo
name|amUsed
init|=
name|userInfo
operator|.
name|getAMResourcesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|amUsed
operator|==
literal|null
condition|)
block|{
name|amUsed
operator|=
operator|new
name|ResourceInfo
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|highlightIfAsking
init|=
name|userInfo
operator|.
name|getIsActive
argument_list|()
condition|?
name|ACTIVE_USER
else|:
literal|null
decl_stmt|;
name|tbody
operator|.
name|tr
argument_list|()
operator|.
name|$style
argument_list|(
name|highlightIfAsking
argument_list|)
operator|.
name|td
argument_list|(
name|userInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|userInfo
operator|.
name|getUserResourceLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|userInfo
operator|.
name|getUserWeight
argument_list|()
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|resourcesUsed
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|userAMLimitPerPartition
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|amUsed
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|userInfo
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|userInfo
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|html
operator|.
name|div
argument_list|()
operator|.
name|$class
argument_list|(
literal|"usersinfo"
argument_list|)
operator|.
name|h5
argument_list|(
literal|"Active Users Info"
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|tbody
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|QueueBlock
specifier|public
specifier|static
class|class
name|QueueBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|csqinfo
specifier|final
name|CSQInfo
name|csqinfo
decl_stmt|;
DECL|method|QueueBlock (CSQInfo info)
annotation|@
name|Inject
name|QueueBlock
parameter_list|(
name|CSQInfo
name|info
parameter_list|)
block|{
name|csqinfo
operator|=
name|info
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|public
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|CapacitySchedulerQueueInfo
argument_list|>
name|subQueues
init|=
operator|(
name|csqinfo
operator|.
name|qinfo
operator|==
literal|null
operator|)
condition|?
name|csqinfo
operator|.
name|csinfo
operator|.
name|getQueues
argument_list|()
operator|.
name|getQueueInfoList
argument_list|()
else|:
name|csqinfo
operator|.
name|qinfo
operator|.
name|getQueues
argument_list|()
operator|.
name|getQueueInfoList
argument_list|()
decl_stmt|;
name|UL
argument_list|<
name|Hamlet
argument_list|>
name|ul
init|=
name|html
operator|.
name|ul
argument_list|(
literal|"#pq"
argument_list|)
decl_stmt|;
name|float
name|used
decl_stmt|;
name|float
name|absCap
decl_stmt|;
name|float
name|absMaxCap
decl_stmt|;
name|float
name|absUsedCap
decl_stmt|;
for|for
control|(
name|CapacitySchedulerQueueInfo
name|info
range|:
name|subQueues
control|)
block|{
name|String
name|nodeLabel
init|=
operator|(
name|csqinfo
operator|.
name|label
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|csqinfo
operator|.
name|label
decl_stmt|;
comment|//DEFAULT_NODE_LABEL_PARTITION is accessible to all queues
comment|//other exclsiveNodeLabels are accessible only if configured
if|if
condition|(
operator|!
name|nodeLabel
operator|.
name|isEmpty
argument_list|()
comment|// i.e. its DEFAULT_NODE_LABEL_PARTITION
operator|&&
name|csqinfo
operator|.
name|isExclusiveNodeLabel
operator|&&
operator|!
name|info
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
operator|&&
operator|!
name|info
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|nodeLabel
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PartitionQueueCapacitiesInfo
name|partitionQueueCapsInfo
init|=
name|info
operator|.
name|getCapacities
argument_list|()
operator|.
name|getPartitionQueueCapacitiesInfo
argument_list|(
name|nodeLabel
argument_list|)
decl_stmt|;
name|used
operator|=
name|partitionQueueCapsInfo
operator|.
name|getUsedCapacity
argument_list|()
operator|/
literal|100
expr_stmt|;
name|absCap
operator|=
name|partitionQueueCapsInfo
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|/
literal|100
expr_stmt|;
name|absMaxCap
operator|=
name|partitionQueueCapsInfo
operator|.
name|getAbsoluteMaxCapacity
argument_list|()
operator|/
literal|100
expr_stmt|;
name|absUsedCap
operator|=
name|partitionQueueCapsInfo
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
operator|/
literal|100
expr_stmt|;
name|boolean
name|isAutoCreatedLeafQueue
init|=
name|info
operator|.
name|isLeafQueue
argument_list|()
condition|?
operator|(
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|info
operator|)
operator|.
name|isAutoCreatedLeafQueue
argument_list|()
else|:
literal|false
decl_stmt|;
name|float
name|capPercent
init|=
name|absMaxCap
operator|==
literal|0
condition|?
literal|0
else|:
name|absCap
operator|/
name|absMaxCap
decl_stmt|;
name|float
name|usedCapPercent
init|=
name|absMaxCap
operator|==
literal|0
condition|?
literal|0
else|:
name|absUsedCap
operator|/
name|absMaxCap
decl_stmt|;
name|String
name|Q_WIDTH
init|=
name|width
argument_list|(
name|absMaxCap
operator|*
name|Q_MAX_WIDTH
argument_list|)
decl_stmt|;
name|LI
argument_list|<
name|UL
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|li
init|=
name|ul
operator|.
name|li
argument_list|()
operator|.
name|a
argument_list|(
name|_Q
argument_list|)
operator|.
name|$style
argument_list|(
name|isAutoCreatedLeafQueue
condition|?
name|join
argument_list|(
name|Q_AUTO_CREATED
argument_list|,
literal|";"
argument_list|,
name|Q_WIDTH
argument_list|)
else|:
name|Q_WIDTH
argument_list|)
operator|.
name|$title
argument_list|(
name|join
argument_list|(
literal|"Absolute Capacity:"
argument_list|,
name|percent
argument_list|(
name|absCap
argument_list|)
argument_list|)
argument_list|)
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
name|join
argument_list|(
name|Q_GIVEN
argument_list|,
literal|";font-size:1px;"
argument_list|,
name|width
argument_list|(
name|capPercent
argument_list|)
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|'.'
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
name|join
argument_list|(
name|width
argument_list|(
name|usedCapPercent
argument_list|)
argument_list|,
literal|";font-size:1px;left:0%;"
argument_list|,
name|absUsedCap
operator|>
name|absCap
condition|?
name|Q_OVER
else|:
name|Q_UNDER
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|'.'
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|(
literal|".q"
argument_list|,
literal|"Queue: "
operator|+
name|info
operator|.
name|getQueuePath
argument_list|()
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qstats"
argument_list|)
operator|.
name|$style
argument_list|(
name|left
argument_list|(
name|Q_STATS_POS
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
name|join
argument_list|(
name|percent
argument_list|(
name|used
argument_list|)
argument_list|,
literal|" used"
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
decl_stmt|;
name|csqinfo
operator|.
name|qinfo
operator|=
name|info
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|isLeafQueue
argument_list|()
condition|)
block|{
name|li
operator|.
name|ul
argument_list|(
literal|"#lq"
argument_list|)
operator|.
name|li
argument_list|()
operator|.
name|__
argument_list|(
name|LeafQueueInfoBlock
operator|.
name|class
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
name|li
operator|.
name|ul
argument_list|(
literal|"#lq"
argument_list|)
operator|.
name|li
argument_list|()
operator|.
name|__
argument_list|(
name|QueueUsersInfoBlock
operator|.
name|class
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|li
operator|.
name|__
argument_list|(
name|QueueBlock
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|li
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|ul
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|QueuesBlock
specifier|static
class|class
name|QueuesBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|cs
specifier|final
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|csqinfo
specifier|final
name|CSQInfo
name|csqinfo
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|nodeLabelsInfo
specifier|private
name|List
argument_list|<
name|RMNodeLabel
argument_list|>
name|nodeLabelsInfo
decl_stmt|;
DECL|method|QueuesBlock (ResourceManager rm, CSQInfo info)
annotation|@
name|Inject
name|QueuesBlock
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|CSQInfo
name|info
parameter_list|)
block|{
name|cs
operator|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|csqinfo
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|RMNodeLabelsManager
name|nodeLabelManager
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|nodeLabelsInfo
operator|=
name|nodeLabelManager
operator|.
name|pullRMNodeLabelsInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|public
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|html
operator|.
name|__
argument_list|(
name|MetricsOverviewTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|this
operator|.
name|getCallerUGI
argument_list|()
decl_stmt|;
name|boolean
name|isAdmin
init|=
literal|false
decl_stmt|;
name|ApplicationACLsManager
name|aclsManager
init|=
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|aclsManager
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
name|aclsManager
operator|.
name|isAdmin
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|isAdmin
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|isAdmin
operator|=
literal|true
expr_stmt|;
block|}
comment|// only show button to dump CapacityScheduler debug logs to admins
if|if
condition|(
name|isAdmin
condition|)
block|{
name|html
operator|.
name|div
argument_list|()
operator|.
name|button
argument_list|()
operator|.
name|$style
argument_list|(
literal|"border-style: solid; border-color: #000000; border-width: 1px;"
operator|+
literal|" cursor: hand; cursor: pointer; border-radius: 4px"
argument_list|)
operator|.
name|$onclick
argument_list|(
literal|"confirmAction()"
argument_list|)
operator|.
name|b
argument_list|(
literal|"Dump scheduler logs"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|select
argument_list|()
operator|.
name|$id
argument_list|(
literal|"time"
argument_list|)
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"60"
argument_list|)
operator|.
name|__
argument_list|(
literal|"1 min"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"300"
argument_list|)
operator|.
name|__
argument_list|(
literal|"5 min"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"600"
argument_list|)
operator|.
name|__
argument_list|(
literal|"10 min"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
name|StringBuilder
name|script
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|script
operator|.
name|append
argument_list|(
literal|"function confirmAction() {"
argument_list|)
operator|.
name|append
argument_list|(
literal|" b = confirm(\"Are you sure you wish to generate"
operator|+
literal|" scheduler logs?\");"
argument_list|)
operator|.
name|append
argument_list|(
literal|" if (b == true) {"
argument_list|)
operator|.
name|append
argument_list|(
literal|" var timePeriod = $(\"#time\").val();"
argument_list|)
operator|.
name|append
argument_list|(
literal|" $.ajax({"
argument_list|)
operator|.
name|append
argument_list|(
literal|" type: 'POST',"
argument_list|)
operator|.
name|append
argument_list|(
literal|" url: '/ws/v1/cluster/scheduler/logs',"
argument_list|)
operator|.
name|append
argument_list|(
literal|" contentType: 'text/plain',"
argument_list|)
operator|.
name|append
argument_list|(
name|AppBlock
operator|.
name|getCSRFHeaderString
argument_list|(
name|rm
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" data: 'time=' + timePeriod,"
argument_list|)
operator|.
name|append
argument_list|(
literal|" dataType: 'text'"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }).done(function(data){"
argument_list|)
operator|.
name|append
argument_list|(
literal|" setTimeout(function(){"
argument_list|)
operator|.
name|append
argument_list|(
literal|" alert(\"Scheduler log is being generated.\");"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }, 1000);"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }).fail(function(data){"
argument_list|)
operator|.
name|append
argument_list|(
literal|" alert(\"Scheduler log generation failed. Please check the"
operator|+
literal|" ResourceManager log for more information.\");"
argument_list|)
operator|.
name|append
argument_list|(
literal|" console.log(data);"
argument_list|)
operator|.
name|append
argument_list|(
literal|" });"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|__
argument_list|(
name|script
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|UL
argument_list|<
name|DIV
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|ul
init|=
name|html
operator|.
name|div
argument_list|(
literal|"#cs-wrapper.ui-widget"
argument_list|)
operator|.
name|div
argument_list|(
literal|".ui-widget-header.ui-corner-top"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Application Queues"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|div
argument_list|(
literal|"#cs.ui-widget-content.ui-corner-bottom"
argument_list|)
operator|.
name|ul
argument_list|()
decl_stmt|;
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
name|ul
operator|.
name|li
argument_list|()
operator|.
name|a
argument_list|(
name|_Q
argument_list|)
operator|.
name|$style
argument_list|(
name|width
argument_list|(
name|Q_MAX_WIDTH
argument_list|)
argument_list|)
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
name|Q_END
argument_list|)
operator|.
name|__
argument_list|(
literal|"100% "
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|(
literal|".q"
argument_list|,
literal|"default"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ul
operator|.
name|li
argument_list|()
operator|.
name|$style
argument_list|(
literal|"margin-bottom: 1em"
argument_list|)
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
literal|"font-weight: bold"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Legend:"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qlegend ui-corner-all"
argument_list|)
operator|.
name|$style
argument_list|(
name|Q_GIVEN
argument_list|)
operator|.
name|__
argument_list|(
literal|"Capacity"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qlegend ui-corner-all"
argument_list|)
operator|.
name|$style
argument_list|(
name|Q_UNDER
argument_list|)
operator|.
name|__
argument_list|(
literal|"Used"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qlegend ui-corner-all"
argument_list|)
operator|.
name|$style
argument_list|(
name|Q_OVER
argument_list|)
operator|.
name|__
argument_list|(
literal|"Used (over capacity)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qlegend ui-corner-all ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Max Capacity"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qlegend ui-corner-all"
argument_list|)
operator|.
name|$style
argument_list|(
name|ACTIVE_USER
argument_list|)
operator|.
name|__
argument_list|(
literal|"Users Requesting Resources"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qlegend ui-corner-all"
argument_list|)
operator|.
name|$style
argument_list|(
name|Q_AUTO_CREATED
argument_list|)
operator|.
name|__
argument_list|(
literal|"Auto Created Queues"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
name|float
name|used
init|=
literal|0
decl_stmt|;
name|CSQueue
name|root
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CapacitySchedulerInfo
name|sinfo
init|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|root
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|csqinfo
operator|.
name|csinfo
operator|=
name|sinfo
expr_stmt|;
name|boolean
name|hasAnyLabelLinkedToNM
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|nodeLabelsInfo
condition|)
block|{
for|for
control|(
name|RMNodeLabel
name|label
range|:
name|nodeLabelsInfo
control|)
block|{
if|if
condition|(
name|label
operator|.
name|getLabelName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Skip DEFAULT_LABEL
continue|continue;
block|}
if|if
condition|(
name|label
operator|.
name|getNumActiveNMs
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasAnyLabelLinkedToNM
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasAnyLabelLinkedToNM
condition|)
block|{
name|used
operator|=
name|sinfo
operator|.
name|getUsedCapacity
argument_list|()
operator|/
literal|100
expr_stmt|;
comment|//label is not enabled in the cluster or there's only "default" label,
name|ul
operator|.
name|li
argument_list|()
operator|.
name|a
argument_list|(
name|_Q
argument_list|)
operator|.
name|$style
argument_list|(
name|width
argument_list|(
name|Q_MAX_WIDTH
argument_list|)
argument_list|)
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
name|join
argument_list|(
name|width
argument_list|(
name|used
argument_list|)
argument_list|,
literal|";left:0%;"
argument_list|,
name|used
operator|>
literal|1
condition|?
name|Q_OVER
else|:
name|Q_UNDER
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"."
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|(
literal|".q"
argument_list|,
literal|"Queue: root"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qstats"
argument_list|)
operator|.
name|$style
argument_list|(
name|left
argument_list|(
name|Q_STATS_POS
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
name|join
argument_list|(
name|percent
argument_list|(
name|used
argument_list|)
argument_list|,
literal|" used"
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|(
name|QueueBlock
operator|.
name|class
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RMNodeLabel
name|label
range|:
name|nodeLabelsInfo
control|)
block|{
name|csqinfo
operator|.
name|qinfo
operator|=
literal|null
expr_stmt|;
name|csqinfo
operator|.
name|label
operator|=
name|label
operator|.
name|getLabelName
argument_list|()
expr_stmt|;
name|csqinfo
operator|.
name|isExclusiveNodeLabel
operator|=
name|label
operator|.
name|getIsExclusive
argument_list|()
expr_stmt|;
name|String
name|nodeLabelDisplay
init|=
name|csqinfo
operator|.
name|label
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|csqinfo
operator|.
name|label
decl_stmt|;
name|PartitionQueueCapacitiesInfo
name|capacities
init|=
name|sinfo
operator|.
name|getCapacities
argument_list|()
operator|.
name|getPartitionQueueCapacitiesInfo
argument_list|(
name|csqinfo
operator|.
name|label
argument_list|)
decl_stmt|;
name|used
operator|=
name|capacities
operator|.
name|getUsedCapacity
argument_list|()
operator|/
literal|100
expr_stmt|;
name|String
name|partitionUiTag
init|=
literal|"Partition: "
operator|+
name|nodeLabelDisplay
operator|+
literal|" "
operator|+
name|label
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|ul
operator|.
name|li
argument_list|()
operator|.
name|a
argument_list|(
name|_Q
argument_list|)
operator|.
name|$style
argument_list|(
name|width
argument_list|(
name|Q_MAX_WIDTH
argument_list|)
argument_list|)
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
name|join
argument_list|(
name|width
argument_list|(
name|used
argument_list|)
argument_list|,
literal|";left:0%;"
argument_list|,
name|used
operator|>
literal|1
condition|?
name|Q_OVER
else|:
name|Q_UNDER
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"."
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|(
literal|".q"
argument_list|,
name|partitionUiTag
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qstats"
argument_list|)
operator|.
name|$style
argument_list|(
name|left
argument_list|(
name|Q_STATS_POS
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
name|join
argument_list|(
name|percent
argument_list|(
name|used
argument_list|)
argument_list|,
literal|" used"
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
comment|//for the queue hierarchy under label
name|UL
argument_list|<
name|Hamlet
argument_list|>
name|underLabel
init|=
name|html
operator|.
name|ul
argument_list|(
literal|"#pq"
argument_list|)
decl_stmt|;
name|underLabel
operator|.
name|li
argument_list|()
operator|.
name|a
argument_list|(
name|_Q
argument_list|)
operator|.
name|$style
argument_list|(
name|width
argument_list|(
name|Q_MAX_WIDTH
argument_list|)
argument_list|)
operator|.
name|span
argument_list|()
operator|.
name|$style
argument_list|(
name|join
argument_list|(
name|width
argument_list|(
name|used
argument_list|)
argument_list|,
literal|";left:0%;"
argument_list|,
name|used
operator|>
literal|1
condition|?
name|Q_OVER
else|:
name|Q_UNDER
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
literal|"."
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|(
literal|".q"
argument_list|,
literal|"Queue: root"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|span
argument_list|()
operator|.
name|$class
argument_list|(
literal|"qstats"
argument_list|)
operator|.
name|$style
argument_list|(
name|left
argument_list|(
name|Q_STATS_POS
argument_list|)
argument_list|)
operator|.
name|__
argument_list|(
name|join
argument_list|(
name|percent
argument_list|(
name|used
argument_list|)
argument_list|,
literal|" used"
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|(
name|QueueBlock
operator|.
name|class
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|ul
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|__
argument_list|(
literal|"$('#cs').hide();"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|(
name|RMAppsBlock
operator|.
name|class
argument_list|)
expr_stmt|;
name|html
operator|.
name|__
argument_list|(
name|HealthBlock
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HealthBlock
specifier|public
specifier|static
class|class
name|HealthBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|cs
specifier|final
name|CapacityScheduler
name|cs
decl_stmt|;
annotation|@
name|Inject
DECL|method|HealthBlock (ResourceManager rm)
name|HealthBlock
parameter_list|(
name|ResourceManager
name|rm
parameter_list|)
block|{
name|cs
operator|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (HtmlBlock.Block html)
specifier|public
name|void
name|render
parameter_list|(
name|HtmlBlock
operator|.
name|Block
name|html
parameter_list|)
block|{
name|SchedulerHealth
name|healthInfo
init|=
name|cs
operator|.
name|getSchedulerHealth
argument_list|()
decl_stmt|;
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|html
operator|.
name|div
argument_list|(
literal|"#health"
argument_list|)
decl_stmt|;
name|div
operator|.
name|h4
argument_list|(
literal|"Aggregate scheduler counts"
argument_list|)
expr_stmt|;
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|tbody
init|=
name|div
operator|.
name|table
argument_list|(
literal|"#lastrun"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-widget-header"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Total Container Allocations(count)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Total Container Releases(count)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Total Fulfilled Reservations(count)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Total Container Preemptions(count)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|tbody
operator|.
name|$class
argument_list|(
literal|"ui-widget-content"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|cs
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAggregateAllocatedContainers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|cs
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAggegatedReleasedContainers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|healthInfo
operator|.
name|getAggregateFulFilledReservationsCount
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|healthInfo
operator|.
name|getAggregatePreemptionCount
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
name|div
operator|.
name|h4
argument_list|(
literal|"Last scheduler run"
argument_list|)
expr_stmt|;
name|tbody
operator|=
name|div
operator|.
name|table
argument_list|(
literal|"#lastrun"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-widget-header"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Time"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Allocations(count - resources)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Reservations(count - resources)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Releases(count - resources)"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|tbody
argument_list|()
expr_stmt|;
name|tbody
operator|.
name|$class
argument_list|(
literal|"ui-widget-content"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|td
argument_list|(
name|Times
operator|.
name|format
argument_list|(
name|healthInfo
operator|.
name|getLastSchedulerRunTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|healthInfo
operator|.
name|getAllocationCount
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
name|healthInfo
operator|.
name|getResourcesAllocated
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|healthInfo
operator|.
name|getReservationCount
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
name|healthInfo
operator|.
name|getResourcesReserved
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|td
argument_list|(
name|healthInfo
operator|.
name|getReleaseCount
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
name|healthInfo
operator|.
name|getResourcesReleased
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchedulerHealth
operator|.
name|DetailedInformation
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"Allocation"
argument_list|,
name|healthInfo
operator|.
name|getLastAllocationDetails
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"Reservation"
argument_list|,
name|healthInfo
operator|.
name|getLastReservationDetails
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"Release"
argument_list|,
name|healthInfo
operator|.
name|getLastReleaseDetails
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"Preemption"
argument_list|,
name|healthInfo
operator|.
name|getLastPreemptionDetails
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SchedulerHealth
operator|.
name|DetailedInformation
argument_list|>
name|entry
range|:
name|info
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|containerId
init|=
literal|"N/A"
decl_stmt|;
name|String
name|nodeId
init|=
literal|"N/A"
decl_stmt|;
name|String
name|queue
init|=
literal|"N/A"
decl_stmt|;
name|String
name|table
init|=
literal|"#"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|div
operator|.
name|h4
argument_list|(
literal|"Last "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|tbody
operator|=
name|div
operator|.
name|table
argument_list|(
name|table
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-widget-header"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Time"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Container Id"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Node Id"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|__
argument_list|(
literal|"Queue"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|tbody
argument_list|()
expr_stmt|;
name|SchedulerHealth
operator|.
name|DetailedInformation
name|di
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|di
operator|.
name|getContainerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|containerId
operator|=
name|di
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|di
operator|.
name|getNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nodeId
operator|=
name|di
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|queue
operator|=
name|di
operator|.
name|getQueue
argument_list|()
expr_stmt|;
block|}
name|tbody
operator|.
name|$class
argument_list|(
literal|"ui-widget-content"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|td
argument_list|(
name|Times
operator|.
name|format
argument_list|(
name|di
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|containerId
argument_list|)
operator|.
name|td
argument_list|(
name|nodeId
argument_list|)
operator|.
name|td
argument_list|(
name|queue
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|div
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|postHead (Page.HTML<__> html)
annotation|@
name|Override
specifier|protected
name|void
name|postHead
parameter_list|(
name|Page
operator|.
name|HTML
argument_list|<
name|__
argument_list|>
name|html
parameter_list|)
block|{
name|html
operator|.
name|style
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/css"
argument_list|)
operator|.
name|__
argument_list|(
literal|"#cs { padding: 0.5em 0 1em 0; margin-bottom: 1em; position: relative }"
argument_list|,
literal|"#cs ul { list-style: none }"
argument_list|,
literal|"#cs a { font-weight: normal; margin: 2px; position: relative }"
argument_list|,
literal|"#cs a span { font-weight: normal; font-size: 80% }"
argument_list|,
literal|"#cs-wrapper .ui-widget-header { padding: 0.2em 0.5em }"
argument_list|,
literal|".qstats { font-weight: normal; font-size: 80%; position: absolute }"
argument_list|,
literal|".qlegend { font-weight: normal; padding: 0 1em; margin: 1em }"
argument_list|,
literal|"table.info tr th {width: 50%}"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
comment|// to center info table
name|script
argument_list|(
literal|"/static/jt/jquery.jstree.js"
argument_list|)
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|__
argument_list|(
literal|"$(function() {"
argument_list|,
literal|"  $('#cs a span').addClass('ui-corner-all').css('position', 'absolute');"
argument_list|,
literal|"  $('#cs').bind('loaded.jstree', function (e, data) {"
argument_list|,
literal|"    var callback = { call:reopenQueryNodes }"
argument_list|,
literal|"    data.inst.open_node('#pq', callback);"
argument_list|,
literal|"   })."
argument_list|,
literal|"    jstree({"
argument_list|,
literal|"    core: { animation: 188, html_titles: true },"
argument_list|,
literal|"    plugins: ['themeroller', 'html_data', 'ui'],"
argument_list|,
literal|"    themeroller: { item_open: 'ui-icon-minus',"
argument_list|,
literal|"      item_clsd: 'ui-icon-plus', item_leaf: 'ui-icon-gear'"
argument_list|,
literal|"    }"
argument_list|,
literal|"  });"
argument_list|,
literal|"  $('#cs').bind('select_node.jstree', function(e, data) {"
argument_list|,
literal|"    var q = $('.q', data.rslt.obj).first().text();"
argument_list|,
literal|"    if (q == 'Queue: root') q = '';"
argument_list|,
literal|"    else {"
argument_list|,
literal|"      q = q.substr(q.lastIndexOf(':') + 2);"
argument_list|,
literal|"      q = '^' + q.substr(q.lastIndexOf('.') + 1) + '$';"
argument_list|,
literal|"    }"
argument_list|,
literal|"    $('#apps').dataTable().fnFilter(q, 4, true);"
argument_list|,
literal|"  });"
argument_list|,
literal|"  $('#cs').show();"
argument_list|,
literal|"});"
argument_list|)
operator|.
name|__
argument_list|()
operator|.
name|__
argument_list|(
name|SchedulerPageUtil
operator|.
name|QueueBlockUtil
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|content ()
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|content
parameter_list|()
block|{
return|return
name|QueuesBlock
operator|.
name|class
return|;
block|}
DECL|method|appendPercent (ResourceInfo resourceInfo, float f)
specifier|static
name|String
name|appendPercent
parameter_list|(
name|ResourceInfo
name|resourceInfo
parameter_list|,
name|float
name|f
parameter_list|)
block|{
if|if
condition|(
name|resourceInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|resourceInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|f
argument_list|,
literal|1
argument_list|)
operator|+
literal|")"
return|;
block|}
DECL|method|percent (float f)
specifier|static
name|String
name|percent
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|f
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|width (float f)
specifier|static
name|String
name|width
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|format
argument_list|(
literal|"width:%.1f%%"
argument_list|,
name|f
operator|*
literal|100
argument_list|)
return|;
block|}
DECL|method|left (float f)
specifier|static
name|String
name|left
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|format
argument_list|(
literal|"left:%.1f%%"
argument_list|,
name|f
operator|*
literal|100
argument_list|)
return|;
block|}
block|}
end_class

end_unit

