begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|ConfigurableResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FairSharePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Converts a Fair Schedule queue hierarchy to Capacity Scheduler  * configuration.  *  */
end_comment

begin_class
DECL|class|FSQueueConverter
specifier|public
class|class
name|FSQueueConverter
block|{
DECL|field|MAX_RUNNING_APPS_UNSET
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RUNNING_APPS_UNSET
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|leafQueueNames
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueueNames
decl_stmt|;
DECL|field|ruleHandler
specifier|private
specifier|final
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
decl_stmt|;
DECL|field|capacitySchedulerConfig
specifier|private
name|Configuration
name|capacitySchedulerConfig
decl_stmt|;
DECL|field|preemptionEnabled
specifier|private
specifier|final
name|boolean
name|preemptionEnabled
decl_stmt|;
DECL|field|sizeBasedWeight
specifier|private
specifier|final
name|boolean
name|sizeBasedWeight
decl_stmt|;
DECL|field|clusterResource
specifier|private
specifier|final
name|Resource
name|clusterResource
decl_stmt|;
DECL|field|queueMaxAMShareDefault
specifier|private
specifier|final
name|float
name|queueMaxAMShareDefault
decl_stmt|;
DECL|field|autoCreateChildQueues
specifier|private
specifier|final
name|boolean
name|autoCreateChildQueues
decl_stmt|;
DECL|field|queueMaxAppsDefault
specifier|private
specifier|final
name|int
name|queueMaxAppsDefault
decl_stmt|;
DECL|field|fifoOrFairSharePolicyUsed
specifier|private
name|boolean
name|fifoOrFairSharePolicyUsed
decl_stmt|;
DECL|field|drfPolicyUsedOnQueueLevel
specifier|private
name|boolean
name|drfPolicyUsedOnQueueLevel
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|FSQueueConverter (FSConfigToCSConfigRuleHandler ruleHandler, Configuration capacitySchedulerConfig, boolean preemptionEnabled, boolean sizeBasedWeight, boolean autoCreateChildQueues, Resource clusterResource, float queueMaxAMShareDefault, int queueMaxAppsDefault)
specifier|public
name|FSQueueConverter
parameter_list|(
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
parameter_list|,
name|Configuration
name|capacitySchedulerConfig
parameter_list|,
name|boolean
name|preemptionEnabled
parameter_list|,
name|boolean
name|sizeBasedWeight
parameter_list|,
name|boolean
name|autoCreateChildQueues
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|float
name|queueMaxAMShareDefault
parameter_list|,
name|int
name|queueMaxAppsDefault
parameter_list|)
block|{
name|this
operator|.
name|leafQueueNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|ruleHandler
operator|=
name|ruleHandler
expr_stmt|;
name|this
operator|.
name|capacitySchedulerConfig
operator|=
name|capacitySchedulerConfig
expr_stmt|;
name|this
operator|.
name|preemptionEnabled
operator|=
name|preemptionEnabled
expr_stmt|;
name|this
operator|.
name|sizeBasedWeight
operator|=
name|sizeBasedWeight
expr_stmt|;
name|this
operator|.
name|clusterResource
operator|=
name|clusterResource
expr_stmt|;
name|this
operator|.
name|queueMaxAMShareDefault
operator|=
name|queueMaxAMShareDefault
expr_stmt|;
name|this
operator|.
name|autoCreateChildQueues
operator|=
name|autoCreateChildQueues
expr_stmt|;
name|this
operator|.
name|queueMaxAppsDefault
operator|=
name|queueMaxAppsDefault
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:linelength"
argument_list|)
DECL|method|convertQueueHierarchy (FSQueue queue)
specifier|public
name|void
name|convertQueueHierarchy
parameter_list|(
name|FSQueue
name|queue
parameter_list|)
block|{
name|List
argument_list|<
name|FSQueue
argument_list|>
name|children
init|=
name|queue
operator|.
name|getChildQueues
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
name|queue
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|instanceof
name|FSLeafQueue
condition|)
block|{
name|String
name|shortName
init|=
name|getQueueShortName
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|leafQueueNames
operator|.
name|add
argument_list|(
name|shortName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
literal|"Leaf queues must be unique, "
operator|+
name|shortName
operator|+
literal|" is defined at least twice"
argument_list|)
throw|;
block|}
block|}
name|emitChildQueues
argument_list|(
name|queueName
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|emitMaxAMShare
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|emitMaxRunningApps
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|emitMaxAllocations
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|emitPreemptionDisabled
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
comment|// TODO: COULD BE incorrect! Needs further clarifications
name|emitChildCapacity
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|emitMaximumCapacity
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|emitAutoCreateChildQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|emitSizeBasedWeight
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|emitOrderingPolicy
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|checkMaxChildCapacitySetting
argument_list|(
name|queue
argument_list|)
expr_stmt|;
for|for
control|(
name|FSQueue
name|childQueue
range|:
name|children
control|)
block|{
name|convertQueueHierarchy
argument_list|(
name|childQueue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isFifoOrFairSharePolicyUsed ()
specifier|public
name|boolean
name|isFifoOrFairSharePolicyUsed
parameter_list|()
block|{
return|return
name|fifoOrFairSharePolicyUsed
return|;
block|}
DECL|method|isDrfPolicyUsedOnQueueLevel ()
specifier|public
name|boolean
name|isDrfPolicyUsedOnQueueLevel
parameter_list|()
block|{
return|return
name|drfPolicyUsedOnQueueLevel
return|;
block|}
comment|/**    * Generates yarn.scheduler.capacity.&lt;queue-name&gt;.queues.    * @param queueName    * @param children    */
DECL|method|emitChildQueues (String queueName, List<FSQueue> children)
specifier|private
name|void
name|emitChildQueues
parameter_list|(
name|String
name|queueName
parameter_list|,
name|List
argument_list|<
name|FSQueue
argument_list|>
name|children
parameter_list|)
block|{
name|ruleHandler
operator|.
name|handleChildQueueCount
argument_list|(
name|queueName
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|childQueues
init|=
name|children
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|child
lambda|->
name|getQueueShortName
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".queues"
argument_list|,
name|childQueues
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *&lt;maxAMShare&gt;     * ==> yarn.scheduler.capacity.&lt;queue-name&gt;.maximum-am-resource-percent.    * @param queueName    * @param queue    */
DECL|method|emitMaxAMShare (String queueName, FSQueue queue)
specifier|private
name|void
name|emitMaxAMShare
parameter_list|(
name|String
name|queueName
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
name|float
name|queueMaxAmShare
init|=
name|queue
operator|.
name|getMaxAMShare
argument_list|()
decl_stmt|;
comment|// Direct floating point comparison is OK here
if|if
condition|(
name|queueMaxAmShare
operator|!=
literal|0.0f
operator|&&
name|queueMaxAmShare
operator|!=
name|queueMaxAMShareDefault
operator|&&
name|queueMaxAmShare
operator|!=
operator|-
literal|1.0f
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".maximum-am-resource-percent"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|queueMaxAmShare
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queueMaxAmShare
operator|==
operator|-
literal|1.0f
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".maximum-am-resource-percent"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *&lt;maxRunningApps&gt;    * ==> yarn.scheduler.capacity.&lt;queue-name&gt;.maximum-applications.    * @param queueName    * @param queue    */
DECL|method|emitMaxRunningApps (String queueName, FSQueue queue)
specifier|private
name|void
name|emitMaxRunningApps
parameter_list|(
name|String
name|queueName
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|getMaxRunningApps
argument_list|()
operator|!=
name|MAX_RUNNING_APPS_UNSET
operator|&&
name|queue
operator|.
name|getMaxRunningApps
argument_list|()
operator|!=
name|queueMaxAppsDefault
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".maximum-applications"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|queue
operator|.
name|getMaxRunningApps
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *&lt;maxResources&gt;    * ==> yarn.scheduler.capacity.&lt;queue-name&gt;.maximum-capacity.    * @param queueName    * @param queue    */
DECL|method|emitMaximumCapacity (String queueName, FSQueue queue)
specifier|private
name|void
name|emitMaximumCapacity
parameter_list|(
name|String
name|queueName
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
name|ConfigurableResource
name|rawMaxShare
init|=
name|queue
operator|.
name|getRawMaxShare
argument_list|()
decl_stmt|;
specifier|final
name|Resource
name|maxResource
init|=
name|rawMaxShare
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|long
name|memSize
init|=
literal|0
decl_stmt|;
name|long
name|vCores
init|=
literal|0
decl_stmt|;
name|boolean
name|defined
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|maxResource
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|rawMaxShare
operator|.
name|getPercentages
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clusterResource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<maxResources> defined in percentages for"
operator|+
literal|" queue %s, but cluster resource parameter is not"
operator|+
literal|" defined via CLI!"
argument_list|,
name|queueName
argument_list|)
argument_list|)
throw|;
block|}
name|ruleHandler
operator|.
name|handleMaxCapacityPercentage
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|double
index|[]
name|percentages
init|=
name|rawMaxShare
operator|.
name|getPercentages
argument_list|()
decl_stmt|;
name|int
name|memIndex
init|=
name|ResourceUtils
operator|.
name|getResourceTypeIndex
argument_list|()
operator|.
name|get
argument_list|(
literal|"memory-mb"
argument_list|)
decl_stmt|;
name|int
name|vcoreIndex
init|=
name|ResourceUtils
operator|.
name|getResourceTypeIndex
argument_list|()
operator|.
name|get
argument_list|(
literal|"vcores"
argument_list|)
decl_stmt|;
name|memSize
operator|=
call|(
name|long
call|)
argument_list|(
name|percentages
index|[
name|memIndex
index|]
operator|*
name|clusterResource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|vCores
operator|=
call|(
name|long
call|)
argument_list|(
name|percentages
index|[
name|vcoreIndex
index|]
operator|*
name|clusterResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|defined
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
literal|"Illegal ConfigurableResource = "
operator|+
name|rawMaxShare
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|isNotUnboundedResource
argument_list|(
name|maxResource
argument_list|)
condition|)
block|{
name|memSize
operator|=
name|maxResource
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|vCores
operator|=
name|maxResource
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|defined
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|defined
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".maximum-capacity"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"[memory=%d, vcores=%d]"
argument_list|,
name|memSize
argument_list|,
name|vCores
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *&lt;maxContainerAllocation&gt;    * ==> yarn.scheduler.capacity.&lt;queue-name&gt;.maximum-allocation-mb    * / vcores.    * @param queueName    * @param queue    */
DECL|method|emitMaxAllocations (String queueName, FSQueue queue)
specifier|private
name|void
name|emitMaxAllocations
parameter_list|(
name|String
name|queueName
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
name|Resource
name|maxAllocation
init|=
name|queue
operator|.
name|getMaximumContainerAllocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotUnboundedResource
argument_list|(
name|maxAllocation
argument_list|)
condition|)
block|{
name|long
name|parentMaxVcores
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|parentMaxMemory
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FSQueue
name|parent
init|=
name|queue
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Resource
name|parentMaxAllocation
init|=
name|parent
operator|.
name|getMaximumContainerAllocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotUnboundedResource
argument_list|(
name|parentMaxAllocation
argument_list|)
condition|)
block|{
name|parentMaxVcores
operator|=
name|parentMaxAllocation
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|parentMaxMemory
operator|=
name|parentMaxAllocation
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|maxVcores
init|=
name|maxAllocation
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|long
name|maxMemory
init|=
name|maxAllocation
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
comment|// only emit max allocation if it differs from the parent's setting
if|if
condition|(
name|maxVcores
operator|!=
name|parentMaxVcores
operator|||
name|maxMemory
operator|!=
name|parentMaxMemory
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".maximum-allocation-mb"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxMemory
argument_list|)
argument_list|)
expr_stmt|;
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".maximum-allocation-vcores"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxVcores
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    *&lt;allowPreemptionFrom&gt;    * ==> yarn.scheduler.capacity.&lt;queue-name&gt;.disable_preemption.    * @param queueName    * @param queue    */
DECL|method|emitPreemptionDisabled (String queueName, FSQueue queue)
specifier|private
name|void
name|emitPreemptionDisabled
parameter_list|(
name|String
name|queueName
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|preemptionEnabled
operator|&&
operator|!
name|queue
operator|.
name|isPreemptable
argument_list|()
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".disable_preemption"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * yarn.scheduler.fair.allow-undeclared-pools    * ==> yarn.scheduler.capacity.&lt;queue-name&gt;    * .auto-create-child-queue.enabled.    * @param queueName    */
DECL|method|emitAutoCreateChildQueue (String queueName)
specifier|private
name|void
name|emitAutoCreateChildQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
if|if
condition|(
name|autoCreateChildQueues
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|setBoolean
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".auto-create-child-queue.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * yarn.scheduler.fair.sizebasedweight ==>    * yarn.scheduler.capacity.&lt;queue-path&gt;    * .ordering-policy.fair.enable-size-based-weight.    * @param queueName    */
DECL|method|emitSizeBasedWeight (String queueName)
specifier|private
name|void
name|emitSizeBasedWeight
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
if|if
condition|(
name|sizeBasedWeight
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|setBoolean
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".ordering-policy.fair.enable-size-based-weight"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *&lt;schedulingPolicy&gt;    * ==> yarn.scheduler.capacity.&lt;queue-path&gt;.ordering-policy.    * @param queueName    * @param queue    */
DECL|method|emitOrderingPolicy (String queueName, FSQueue queue)
specifier|private
name|void
name|emitOrderingPolicy
parameter_list|(
name|String
name|queueName
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
name|String
name|policy
init|=
name|queue
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|policy
condition|)
block|{
case|case
name|FairSharePolicy
operator|.
name|NAME
case|:
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".ordering-policy"
argument_list|,
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|fifoOrFairSharePolicyUsed
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|FifoPolicy
operator|.
name|NAME
case|:
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queueName
operator|+
literal|".ordering-policy"
argument_list|,
name|FifoPolicy
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|fifoOrFairSharePolicyUsed
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|DominantResourceFairnessPolicy
operator|.
name|NAME
case|:
comment|// DRF is not supported on a queue level,
comment|// it has to be global
name|drfPolicyUsedOnQueueLevel
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ConversionException
argument_list|(
literal|"Unexpected ordering policy "
operator|+
literal|"on queue "
operator|+
name|queueName
operator|+
literal|": "
operator|+
name|policy
argument_list|)
throw|;
block|}
block|}
comment|/**    * weight + minResources    * ==> yarn.scheduler.capacity.&lt;queue-name&gt;.capacity.    * @param queue    */
DECL|method|emitChildCapacity (FSQueue queue)
specifier|private
name|void
name|emitChildCapacity
parameter_list|(
name|FSQueue
name|queue
parameter_list|)
block|{
name|List
argument_list|<
name|FSQueue
argument_list|>
name|children
init|=
name|queue
operator|.
name|getChildQueues
argument_list|()
decl_stmt|;
name|int
name|totalWeight
init|=
name|getTotalWeight
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Capacity
argument_list|>
name|capacities
init|=
name|getCapacities
argument_list|(
name|totalWeight
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|capacities
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|key
operator|+
literal|".capacity"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Missing feature, "leaf-queue-template.capacity" only accepts a single    * pct value.    * @param queue    */
DECL|method|checkMaxChildCapacitySetting (FSQueue queue)
specifier|private
name|void
name|checkMaxChildCapacitySetting
parameter_list|(
name|FSQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|getMaxChildQueueResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Resource
name|resource
init|=
name|queue
operator|.
name|getMaxChildQueueResource
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|resource
operator|!=
literal|null
operator|&&
name|isNotUnboundedResource
argument_list|(
name|resource
argument_list|)
operator|)
operator|||
name|queue
operator|.
name|getMaxChildQueueResource
argument_list|()
operator|.
name|getPercentages
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Maximum child resource is defined
name|ruleHandler
operator|.
name|handleMaxChildCapacity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCapacities (int totalWeight, List<FSQueue> children)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Capacity
argument_list|>
name|getCapacities
parameter_list|(
name|int
name|totalWeight
parameter_list|,
name|List
argument_list|<
name|FSQueue
argument_list|>
name|children
parameter_list|)
block|{
specifier|final
name|BigDecimal
name|hundred
init|=
operator|new
name|BigDecimal
argument_list|(
literal|100
argument_list|)
operator|.
name|setScale
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Capacity
argument_list|>
name|capacity
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|capacity
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|Capacity
operator|.
name|newCapacity
argument_list|(
name|hundred
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|capacity
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Capacity
argument_list|>
name|capacities
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BigDecimal
argument_list|>
name|bdCapacities
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MutableBoolean
name|needVerifySum
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|children
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|queue
lambda|->
block|{
name|BigDecimal
name|total
init|=
operator|new
name|BigDecimal
argument_list|(
name|totalWeight
argument_list|)
decl_stmt|;
name|BigDecimal
name|weight
init|=
operator|new
name|BigDecimal
argument_list|(
name|queue
operator|.
name|getWeight
argument_list|()
argument_list|)
decl_stmt|;
name|BigDecimal
name|pct
init|=
name|weight
operator|.
name|setScale
argument_list|(
literal|5
argument_list|)
operator|.
name|divide
argument_list|(
name|total
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
operator|.
name|multiply
argument_list|(
name|hundred
argument_list|)
operator|.
name|setScale
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|//<minResources> defined?
if|if
condition|(
name|Resources
operator|.
name|none
argument_list|()
operator|.
name|compareTo
argument_list|(
name|queue
operator|.
name|getMinShare
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|needVerifySum
operator|.
name|setFalse
argument_list|()
expr_stmt|;
comment|/* TODO: Needs discussion.                *                * Probably it's not entirely correct this way!                * Eg. root.queue1 in FS translates to 33%                * capacity, but minResources is defined as 1vcore,8GB                * which is less than 33%.                *                * Therefore max(calculatedCapacity, minResource) is                * more sound.                */
name|Resource
name|minShare
init|=
name|queue
operator|.
name|getMinShare
argument_list|()
decl_stmt|;
comment|// TODO: in Phase-2, we have to deal with other resources as well
name|String
name|capacity
init|=
name|String
operator|.
name|format
argument_list|(
literal|"[memory=%d,vcores=%d]"
argument_list|,
name|minShare
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|minShare
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
decl_stmt|;
name|capacities
operator|.
name|put
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|,
name|Capacity
operator|.
name|newCapacity
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|capacities
operator|.
name|put
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|,
name|Capacity
operator|.
name|newCapacity
argument_list|(
name|pct
argument_list|)
argument_list|)
expr_stmt|;
name|bdCapacities
operator|.
name|put
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|,
name|pct
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|needVerifySum
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|BigDecimal
name|totalPct
init|=
operator|new
name|BigDecimal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BigDecimal
argument_list|>
name|entry
range|:
name|bdCapacities
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|totalPct
operator|=
name|totalPct
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// fix last value if total != 100.000
if|if
condition|(
operator|!
name|totalPct
operator|.
name|equals
argument_list|(
name|hundred
argument_list|)
condition|)
block|{
name|BigDecimal
name|tmp
init|=
operator|new
name|BigDecimal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|tmp
operator|=
name|tmp
operator|.
name|add
argument_list|(
name|bdCapacities
operator|.
name|get
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|lastQueue
init|=
name|children
operator|.
name|get
argument_list|(
name|children
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|BigDecimal
name|corrected
init|=
name|hundred
operator|.
name|subtract
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|capacities
operator|.
name|put
argument_list|(
name|lastQueue
argument_list|,
name|Capacity
operator|.
name|newCapacity
argument_list|(
name|corrected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|capacities
return|;
block|}
block|}
DECL|method|getTotalWeight (List<FSQueue> children)
specifier|private
name|int
name|getTotalWeight
parameter_list|(
name|List
argument_list|<
name|FSQueue
argument_list|>
name|children
parameter_list|)
block|{
name|double
name|sum
init|=
name|children
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getWeight
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|sum
return|;
block|}
DECL|method|getQueueShortName (String queueName)
specifier|private
name|String
name|getQueueShortName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|int
name|lastDot
init|=
name|queueName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
return|return
name|queueName
operator|.
name|substring
argument_list|(
name|lastDot
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|isNotUnboundedResource (Resource res)
specifier|private
name|boolean
name|isNotUnboundedResource
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
return|return
name|Resources
operator|.
name|unbounded
argument_list|()
operator|.
name|compareTo
argument_list|(
name|res
argument_list|)
operator|!=
literal|0
return|;
block|}
comment|/*    * Represents a queue capacity in either percentage    * or in absolute resources    */
DECL|class|Capacity
specifier|private
specifier|static
class|class
name|Capacity
block|{
DECL|field|percentage
specifier|private
name|BigDecimal
name|percentage
decl_stmt|;
DECL|field|absoluteResource
specifier|private
name|String
name|absoluteResource
decl_stmt|;
DECL|method|newCapacity (BigDecimal pct)
specifier|public
specifier|static
name|Capacity
name|newCapacity
parameter_list|(
name|BigDecimal
name|pct
parameter_list|)
block|{
name|Capacity
name|capacity
init|=
operator|new
name|Capacity
argument_list|()
decl_stmt|;
name|capacity
operator|.
name|percentage
operator|=
name|pct
expr_stmt|;
name|capacity
operator|.
name|absoluteResource
operator|=
literal|null
expr_stmt|;
return|return
name|capacity
return|;
block|}
DECL|method|newCapacity (String absoluteResource)
specifier|public
specifier|static
name|Capacity
name|newCapacity
parameter_list|(
name|String
name|absoluteResource
parameter_list|)
block|{
name|Capacity
name|capacity
init|=
operator|new
name|Capacity
argument_list|()
decl_stmt|;
name|capacity
operator|.
name|percentage
operator|=
literal|null
expr_stmt|;
name|capacity
operator|.
name|absoluteResource
operator|=
name|absoluteResource
expr_stmt|;
return|return
name|capacity
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|percentage
operator|!=
literal|null
condition|)
block|{
return|return
name|percentage
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|absoluteResource
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

