begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|MismatchedUserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningQuotaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|ResourceOverCommitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * This policy enforces a time-extended notion of Capacity. In particular it  * guarantees that the allocation received in input when combined with all  * previous allocation for the user does not violate an instantaneous max limit  * on the resources received, and that for every window of time of length  * validWindow, the integral of the allocations for a user (sum of the currently  * submitted allocation and all prior allocations for the user) does not exceed  * validWindow * maxAvg.  *   * This allows flexibility, in the sense that an allocation can instantaneously  * use large portions of the available capacity, but prevents abuses by bounding  * the average use over time.  *   * By controlling maxInst, maxAvg, validWindow the administrator configuring  * this policy can obtain a behavior ranging from instantaneously enforced  * capacity (akin to existing queues), or fully flexible allocations (likely  * reserved to super-users, or trusted systems).  */
end_comment

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
annotation|@
name|Unstable
DECL|class|CapacityOverTimePolicy
specifier|public
class|class
name|CapacityOverTimePolicy
implements|implements
name|SharingPolicy
block|{
DECL|field|conf
specifier|private
name|CapacitySchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|validWindow
specifier|private
name|long
name|validWindow
decl_stmt|;
DECL|field|maxInst
specifier|private
name|float
name|maxInst
decl_stmt|;
DECL|field|maxAvg
specifier|private
name|float
name|maxAvg
decl_stmt|;
comment|// For now this is CapacityScheduler specific, but given a hierarchy in the
comment|// configuration structure of the schedulers (e.g., SchedulerConfiguration)
comment|// it should be easy to remove this limitation
annotation|@
name|Override
DECL|method|init (String reservationQueuePath, Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|reservationQueuePath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|conf
operator|instanceof
name|CapacitySchedulerConfiguration
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected conf type: "
operator|+
name|conf
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" only supported conf is: "
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
operator|(
name|CapacitySchedulerConfiguration
operator|)
name|conf
expr_stmt|;
name|validWindow
operator|=
name|this
operator|.
name|conf
operator|.
name|getReservationWindow
argument_list|(
name|reservationQueuePath
argument_list|)
expr_stmt|;
name|maxInst
operator|=
name|this
operator|.
name|conf
operator|.
name|getInstantaneousMaxCapacity
argument_list|(
name|reservationQueuePath
argument_list|)
operator|/
literal|100
expr_stmt|;
name|maxAvg
operator|=
name|this
operator|.
name|conf
operator|.
name|getAverageCapacity
argument_list|(
name|reservationQueuePath
argument_list|)
operator|/
literal|100
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|validate (Plan plan, ReservationAllocation reservation)
specifier|public
name|void
name|validate
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationAllocation
name|reservation
parameter_list|)
throws|throws
name|PlanningException
block|{
comment|// this is entire method invoked under a write-lock on the plan, no need
comment|// to synchronize accesses to the plan further
comment|// Try to verify whether there is already a reservation with this ID in
comment|// the system (remove its contribution during validation to simulate a
comment|// try-n-swap
comment|// update).
name|ReservationAllocation
name|oldReservation
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// sanity check that the update of a reservation is not changing username
if|if
condition|(
name|oldReservation
operator|!=
literal|null
operator|&&
operator|!
name|oldReservation
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|reservation
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MismatchedUserException
argument_list|(
literal|"Updating an existing reservation with mismatched user:"
operator|+
name|oldReservation
operator|.
name|getUser
argument_list|()
operator|+
literal|" != "
operator|+
name|reservation
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|startTime
init|=
name|reservation
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|endTime
init|=
name|reservation
operator|.
name|getEndTime
argument_list|()
decl_stmt|;
name|long
name|step
init|=
name|plan
operator|.
name|getStep
argument_list|()
decl_stmt|;
name|Resource
name|planTotalCapacity
init|=
name|plan
operator|.
name|getTotalCapacity
argument_list|()
decl_stmt|;
name|Resource
name|maxAvgRes
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|planTotalCapacity
argument_list|,
name|maxAvg
argument_list|)
decl_stmt|;
name|Resource
name|maxInsRes
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|planTotalCapacity
argument_list|,
name|maxInst
argument_list|)
decl_stmt|;
comment|// define variable that will store integral of resources (need diff class to
comment|// avoid overflow issues for long/large allocations)
name|IntegralResource
name|runningTot
init|=
operator|new
name|IntegralResource
argument_list|(
literal|0L
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|IntegralResource
name|maxAllowed
init|=
operator|new
name|IntegralResource
argument_list|(
name|maxAvgRes
argument_list|)
decl_stmt|;
name|maxAllowed
operator|.
name|multiplyBy
argument_list|(
name|validWindow
operator|/
name|step
argument_list|)
expr_stmt|;
comment|// check that the resources offered to the user during any window of length
comment|// "validWindow" overlapping this allocation are within maxAllowed
comment|// also enforce instantaneous and physical constraints during this pass
for|for
control|(
name|long
name|t
init|=
name|startTime
operator|-
name|validWindow
init|;
name|t
operator|<
name|endTime
operator|+
name|validWindow
condition|;
name|t
operator|+=
name|step
control|)
block|{
name|Resource
name|currExistingAllocTot
init|=
name|plan
operator|.
name|getTotalCommittedResources
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Resource
name|currExistingAllocForUser
init|=
name|plan
operator|.
name|getConsumptionForUser
argument_list|(
name|reservation
operator|.
name|getUser
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|Resource
name|currNewAlloc
init|=
name|reservation
operator|.
name|getResourcesAtTime
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Resource
name|currOldAlloc
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldReservation
operator|!=
literal|null
condition|)
block|{
name|currOldAlloc
operator|=
name|oldReservation
operator|.
name|getResourcesAtTime
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// throw exception if the cluster is overcommitted
comment|// tot_allocated - old + new> capacity
name|Resource
name|inst
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|currExistingAllocTot
argument_list|,
name|currNewAlloc
argument_list|)
argument_list|,
name|currOldAlloc
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|planTotalCapacity
argument_list|,
name|inst
argument_list|,
name|planTotalCapacity
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceOverCommitException
argument_list|(
literal|" Resources at time "
operator|+
name|t
operator|+
literal|" would be overcommitted ("
operator|+
name|inst
operator|+
literal|" over "
operator|+
name|plan
operator|.
name|getTotalCapacity
argument_list|()
operator|+
literal|") by accepting reservation: "
operator|+
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
throw|;
block|}
comment|// throw exception if instantaneous limits are violated
comment|// tot_alloc_to_this_user - old + new> inst_limit
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|planTotalCapacity
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|currExistingAllocForUser
argument_list|,
name|currNewAlloc
argument_list|)
argument_list|,
name|currOldAlloc
argument_list|)
argument_list|,
name|maxInsRes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PlanningQuotaException
argument_list|(
literal|"Instantaneous quota capacity "
operator|+
name|maxInst
operator|+
literal|" would be passed at time "
operator|+
name|t
operator|+
literal|" by accepting reservation: "
operator|+
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
throw|;
block|}
comment|// throw exception if the running integral of utilization over validWindow
comment|// is violated. We perform a delta check, adding/removing instants at the
comment|// boundary of the window from runningTot.
comment|// runningTot = previous_runningTot + currExistingAllocForUser +
comment|// currNewAlloc - currOldAlloc - pastNewAlloc - pastOldAlloc;
comment|// Where:
comment|// 1) currNewAlloc, currExistingAllocForUser represent the contribution of
comment|// the instant in time added in this pass.
comment|// 2) pastNewAlloc, pastOldAlloc are the contributions relative to time
comment|// instants that are being retired from the the window
comment|// 3) currOldAlloc is the contribution (if any) of the previous version of
comment|// this reservation (the one we are updating)
name|runningTot
operator|.
name|add
argument_list|(
name|currExistingAllocForUser
argument_list|)
expr_stmt|;
name|runningTot
operator|.
name|add
argument_list|(
name|currNewAlloc
argument_list|)
expr_stmt|;
name|runningTot
operator|.
name|subtract
argument_list|(
name|currOldAlloc
argument_list|)
expr_stmt|;
comment|// expire contributions from instant in time before (t - validWindow)
if|if
condition|(
name|t
operator|>
name|startTime
condition|)
block|{
name|Resource
name|pastOldAlloc
init|=
name|plan
operator|.
name|getConsumptionForUser
argument_list|(
name|reservation
operator|.
name|getUser
argument_list|()
argument_list|,
name|t
operator|-
name|validWindow
argument_list|)
decl_stmt|;
name|Resource
name|pastNewAlloc
init|=
name|reservation
operator|.
name|getResourcesAtTime
argument_list|(
name|t
operator|-
name|validWindow
argument_list|)
decl_stmt|;
comment|// runningTot = runningTot - pastExistingAlloc - pastNewAlloc;
name|runningTot
operator|.
name|subtract
argument_list|(
name|pastOldAlloc
argument_list|)
expr_stmt|;
name|runningTot
operator|.
name|subtract
argument_list|(
name|pastNewAlloc
argument_list|)
expr_stmt|;
block|}
comment|// check integral
comment|// runningTot> maxAvg * validWindow
comment|// NOTE: we need to use comparator of IntegralResource directly, as
comment|// Resource and ResourceCalculator assume "int" amount of resources,
comment|// which is not sufficient when comparing integrals (out-of-bound)
if|if
condition|(
name|maxAllowed
operator|.
name|compareTo
argument_list|(
name|runningTot
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|PlanningQuotaException
argument_list|(
literal|"Integral (avg over time) quota capacity "
operator|+
name|maxAvg
operator|+
literal|" over a window of "
operator|+
name|validWindow
operator|/
literal|1000
operator|+
literal|" seconds, "
operator|+
literal|" would be passed at time "
operator|+
name|t
operator|+
literal|"("
operator|+
operator|new
name|Date
argument_list|(
name|t
argument_list|)
operator|+
literal|") by accepting reservation: "
operator|+
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getValidWindow ()
specifier|public
name|long
name|getValidWindow
parameter_list|()
block|{
return|return
name|validWindow
return|;
block|}
comment|/**    * This class provides support for Resource-like book-keeping, based on    * long(s), as using Resource to store the "integral" of the allocation over    * time leads to integer overflows for large allocations/clusters. (Evolving    * Resource to use long is too disruptive at this point.)    *     * The comparison/multiplication behaviors of IntegralResource are consistent    * with the DefaultResourceCalculator.    */
DECL|class|IntegralResource
specifier|private
specifier|static
class|class
name|IntegralResource
block|{
DECL|field|memory
name|long
name|memory
decl_stmt|;
DECL|field|vcores
name|long
name|vcores
decl_stmt|;
DECL|method|IntegralResource (Resource resource)
specifier|public
name|IntegralResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|memory
operator|=
name|resource
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|this
operator|.
name|vcores
operator|=
name|resource
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
block|}
DECL|method|IntegralResource (long mem, long vcores)
specifier|public
name|IntegralResource
parameter_list|(
name|long
name|mem
parameter_list|,
name|long
name|vcores
parameter_list|)
block|{
name|this
operator|.
name|memory
operator|=
name|mem
expr_stmt|;
name|this
operator|.
name|vcores
operator|=
name|vcores
expr_stmt|;
block|}
DECL|method|add (Resource r)
specifier|public
name|void
name|add
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|memory
operator|+=
name|r
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|vcores
operator|+=
name|r
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
block|}
DECL|method|subtract (Resource r)
specifier|public
name|void
name|subtract
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|memory
operator|-=
name|r
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|vcores
operator|-=
name|r
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
block|}
DECL|method|multiplyBy (long window)
specifier|public
name|void
name|multiplyBy
parameter_list|(
name|long
name|window
parameter_list|)
block|{
name|memory
operator|=
name|memory
operator|*
name|window
expr_stmt|;
name|vcores
operator|=
name|vcores
operator|*
name|window
expr_stmt|;
block|}
DECL|method|compareTo (IntegralResource other)
specifier|public
name|long
name|compareTo
parameter_list|(
name|IntegralResource
name|other
parameter_list|)
block|{
name|long
name|diff
init|=
name|memory
operator|-
name|other
operator|.
name|memory
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|vcores
operator|-
name|other
operator|.
name|vcores
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<memory:"
operator|+
name|memory
operator|+
literal|", vCores:"
operator|+
name|vcores
operator|+
literal|">"
return|;
block|}
block|}
block|}
end_class

end_unit

