begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|CapacitySchedulerPreemptionUtils
specifier|public
class|class
name|CapacitySchedulerPreemptionUtils
block|{
DECL|method|getResToObtainByPartitionForLeafQueue ( CapacitySchedulerPreemptionContext context, String queueName, Resource clusterResource)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getResToObtainByPartitionForLeafQueue
parameter_list|(
name|CapacitySchedulerPreemptionContext
name|context
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// compute resToObtainByPartition considered inter-queue preemption
for|for
control|(
name|TempQueuePerPartition
name|qT
range|:
name|context
operator|.
name|getQueuePartitions
argument_list|(
name|queueName
argument_list|)
control|)
block|{
if|if
condition|(
name|qT
operator|.
name|preemptionDisabled
condition|)
block|{
continue|continue;
block|}
comment|//  Only add resToObtainByPartition when actuallyToBePreempted resource>= 0
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|context
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|qT
operator|.
name|actuallyToBePreempted
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|resToObtainByPartition
operator|.
name|put
argument_list|(
name|qT
operator|.
name|partition
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|qT
operator|.
name|actuallyToBePreempted
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resToObtainByPartition
return|;
block|}
DECL|method|isContainerAlreadySelected (RMContainer container, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates)
specifier|public
specifier|static
name|boolean
name|isContainerAlreadySelected
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|selectedCandidates
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
name|selectedCandidates
operator|.
name|get
argument_list|(
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containers
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|containers
operator|.
name|contains
argument_list|(
name|container
argument_list|)
return|;
block|}
block|}
end_class

end_unit

