begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingEditPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerPreemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|PreemptableResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * This class implement a {@link SchedulingEditPolicy} that is designed to be  * paired with the {@code CapacityScheduler}. At every invocation of {@code  * editSchedule()} it computes the ideal amount of resources assigned to each  * queue (for each queue in the hierarchy), and determines whether preemption  * is needed. Overcapacity is distributed among queues in a weighted fair manner,  * where the weight is the amount of guaranteed capacity for the queue.  * Based on this ideal assignment it determines whether preemption is required  * and select a set of containers from each application that would be killed if  * the corresponding amount of resources is not freed up by the application.  *  * If not in {@code observeOnly} mode, it triggers preemption requests via a  * {@link ContainerPreemptEvent} that the {@code ResourceManager} will ensure  * to deliver to the application (or to execute).  *  * If the deficit of resources is persistent over a long enough period of time  * this policy will trigger forced termination of containers (again by generating  * {@link ContainerPreemptEvent}).  */
end_comment

begin_class
DECL|class|ProportionalCapacityPreemptionPolicy
specifier|public
class|class
name|ProportionalCapacityPreemptionPolicy
implements|implements
name|SchedulingEditPolicy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProportionalCapacityPreemptionPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** If true, run the policy but do not affect the cluster with preemption and    * kill events. */
DECL|field|OBSERVE_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|OBSERVE_ONLY
init|=
literal|"yarn.resourcemanager.monitor.capacity.preemption.observe_only"
decl_stmt|;
comment|/** Time in milliseconds between invocations of this policy */
DECL|field|MONITORING_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|MONITORING_INTERVAL
init|=
literal|"yarn.resourcemanager.monitor.capacity.preemption.monitoring_interval"
decl_stmt|;
comment|/** Time in milliseconds between requesting a preemption from an application    * and killing the container. */
DECL|field|WAIT_TIME_BEFORE_KILL
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_TIME_BEFORE_KILL
init|=
literal|"yarn.resourcemanager.monitor.capacity.preemption.max_wait_before_kill"
decl_stmt|;
comment|/** Maximum percentage of resources preempted in a single round. By    * controlling this value one can throttle the pace at which containers are    * reclaimed from the cluster. After computing the total desired preemption,    * the policy scales it back within this limit. */
DECL|field|TOTAL_PREEMPTION_PER_ROUND
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_PREEMPTION_PER_ROUND
init|=
literal|"yarn.resourcemanager.monitor.capacity.preemption.total_preemption_per_round"
decl_stmt|;
comment|/** Maximum amount of resources above the target capacity ignored for    * preemption. This defines a deadzone around the target capacity that helps    * prevent thrashing and oscillations around the computed target balance.    * High values would slow the time to capacity and (absent natural    * completions) it might prevent convergence to guaranteed capacity. */
DECL|field|MAX_IGNORED_OVER_CAPACITY
specifier|public
specifier|static
specifier|final
name|String
name|MAX_IGNORED_OVER_CAPACITY
init|=
literal|"yarn.resourcemanager.monitor.capacity.preemption.max_ignored_over_capacity"
decl_stmt|;
comment|/**    * Given a computed preemption target, account for containers naturally    * expiring and preempt only this percentage of the delta. This determines    * the rate of geometric convergence into the deadzone ({@link    * #MAX_IGNORED_OVER_CAPACITY}). For example, a termination factor of 0.5    * will reclaim almost 95% of resources within 5 * {@link    * #WAIT_TIME_BEFORE_KILL}, even absent natural termination. */
DECL|field|NATURAL_TERMINATION_FACTOR
specifier|public
specifier|static
specifier|final
name|String
name|NATURAL_TERMINATION_FACTOR
init|=
literal|"yarn.resourcemanager.monitor.capacity.preemption.natural_termination_factor"
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|maxIgnoredOverCapacity
specifier|private
name|double
name|maxIgnoredOverCapacity
decl_stmt|;
DECL|field|maxWaitTime
specifier|private
name|long
name|maxWaitTime
decl_stmt|;
DECL|field|scheduler
specifier|private
name|CapacityScheduler
name|scheduler
decl_stmt|;
DECL|field|monitoringInterval
specifier|private
name|long
name|monitoringInterval
decl_stmt|;
DECL|field|preempted
specifier|private
specifier|final
name|Map
argument_list|<
name|RMContainer
argument_list|,
name|Long
argument_list|>
name|preempted
init|=
operator|new
name|HashMap
argument_list|<
name|RMContainer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|percentageClusterPreemptionAllowed
specifier|private
name|float
name|percentageClusterPreemptionAllowed
decl_stmt|;
DECL|field|naturalTerminationFactor
specifier|private
name|double
name|naturalTerminationFactor
decl_stmt|;
DECL|field|observeOnly
specifier|private
name|boolean
name|observeOnly
decl_stmt|;
DECL|field|queueToPartitions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TempQueuePerPartition
argument_list|>
argument_list|>
name|queueToPartitions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nlm
specifier|private
name|RMNodeLabelsManager
name|nlm
decl_stmt|;
DECL|method|ProportionalCapacityPreemptionPolicy ()
specifier|public
name|ProportionalCapacityPreemptionPolicy
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|SystemClock
argument_list|()
expr_stmt|;
block|}
DECL|method|ProportionalCapacityPreemptionPolicy (Configuration config, RMContext context, CapacityScheduler scheduler)
specifier|public
name|ProportionalCapacityPreemptionPolicy
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|CapacityScheduler
name|scheduler
parameter_list|)
block|{
name|this
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|scheduler
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ProportionalCapacityPreemptionPolicy (Configuration config, RMContext context, CapacityScheduler scheduler, Clock clock)
specifier|public
name|ProportionalCapacityPreemptionPolicy
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|CapacityScheduler
name|scheduler
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|init
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
DECL|method|init (Configuration config, RMContext context, PreemptableResourceScheduler sched)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|PreemptableResourceScheduler
name|sched
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preemption monitor:"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
literal|null
operator|==
name|scheduler
operator|:
literal|"Unexpected duplicate call to init"
assert|;
if|if
condition|(
operator|!
operator|(
name|sched
operator|instanceof
name|CapacityScheduler
operator|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class "
operator|+
name|sched
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" not instance of "
operator|+
name|CapacityScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
name|rmContext
operator|=
name|context
expr_stmt|;
name|scheduler
operator|=
operator|(
name|CapacityScheduler
operator|)
name|sched
expr_stmt|;
name|maxIgnoredOverCapacity
operator|=
name|config
operator|.
name|getDouble
argument_list|(
name|MAX_IGNORED_OVER_CAPACITY
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|naturalTerminationFactor
operator|=
name|config
operator|.
name|getDouble
argument_list|(
name|NATURAL_TERMINATION_FACTOR
argument_list|,
literal|0.2
argument_list|)
expr_stmt|;
name|maxWaitTime
operator|=
name|config
operator|.
name|getLong
argument_list|(
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
name|monitoringInterval
operator|=
name|config
operator|.
name|getLong
argument_list|(
name|MONITORING_INTERVAL
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|percentageClusterPreemptionAllowed
operator|=
name|config
operator|.
name|getFloat
argument_list|(
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
operator|(
name|float
operator|)
literal|0.1
argument_list|)
expr_stmt|;
name|observeOnly
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
name|OBSERVE_ONLY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rc
operator|=
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
name|nlm
operator|=
name|scheduler
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getResourceCalculator ()
specifier|public
name|ResourceCalculator
name|getResourceCalculator
parameter_list|()
block|{
return|return
name|rc
return|;
block|}
annotation|@
name|Override
DECL|method|editSchedule ()
specifier|public
name|void
name|editSchedule
parameter_list|()
block|{
name|CSQueue
name|root
init|=
name|scheduler
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|Resource
name|clusterResources
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
decl_stmt|;
name|containerBasedPreemptOrKill
argument_list|(
name|root
argument_list|,
name|clusterResources
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method selects and tracks containers to be preempted. If a container    * is in the target list for more than maxWaitTime it is killed.    *    * @param root the root of the CapacityScheduler queue hierarchy    * @param clusterResources the total amount of resources in the cluster    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerBasedPreemptOrKill (CSQueue root, Resource clusterResources)
specifier|private
name|void
name|containerBasedPreemptOrKill
parameter_list|(
name|CSQueue
name|root
parameter_list|,
name|Resource
name|clusterResources
parameter_list|)
block|{
comment|// All partitions to look at
name|Set
argument_list|<
name|String
argument_list|>
name|allPartitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|allPartitions
operator|.
name|addAll
argument_list|(
name|scheduler
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getClusterNodeLabelNames
argument_list|()
argument_list|)
expr_stmt|;
name|allPartitions
operator|.
name|add
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
comment|// extract a summary of the queues from scheduler
synchronized|synchronized
init|(
name|scheduler
init|)
block|{
name|queueToPartitions
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|partitionToLookAt
range|:
name|allPartitions
control|)
block|{
name|cloneQueues
argument_list|(
name|root
argument_list|,
name|nlm
operator|.
name|getResourceByLabel
argument_list|(
name|partitionToLookAt
argument_list|,
name|clusterResources
argument_list|)
argument_list|,
name|partitionToLookAt
argument_list|)
expr_stmt|;
block|}
block|}
comment|// compute total preemption allowed
name|Resource
name|totalPreemptionAllowed
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResources
argument_list|,
name|percentageClusterPreemptionAllowed
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueueNames
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|partition
range|:
name|allPartitions
control|)
block|{
name|TempQueuePerPartition
name|tRoot
init|=
name|getQueueByPartition
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|partition
argument_list|)
decl_stmt|;
comment|// compute the ideal distribution of resources among queues
comment|// updates cloned queues state accordingly
name|tRoot
operator|.
name|idealAssigned
operator|=
name|tRoot
operator|.
name|guaranteed
expr_stmt|;
name|leafQueueNames
operator|=
name|recursivelyComputeIdealAssignment
argument_list|(
name|tRoot
argument_list|,
name|totalPreemptionAllowed
argument_list|)
expr_stmt|;
block|}
comment|// based on ideal allocation select containers to be preempted from each
comment|// queue and each application
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|toPreempt
init|=
name|getContainersToPreempt
argument_list|(
name|leafQueueNames
argument_list|,
name|clusterResources
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logToCSV
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|leafQueueNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if we are in observeOnly mode return before any action is taken
if|if
condition|(
name|observeOnly
condition|)
block|{
return|return;
block|}
comment|// preempt (or kill) the selected containers
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|e
range|:
name|toPreempt
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Send to scheduler: in app="
operator|+
name|appAttemptId
operator|+
literal|" #containers-to-be-preempted="
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RMContainer
name|container
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
comment|// if we tried to preempt this for more than maxWaitTime
if|if
condition|(
name|preempted
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|!=
literal|null
operator|&&
name|preempted
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|+
name|maxWaitTime
operator|<
name|clock
operator|.
name|getTime
argument_list|()
condition|)
block|{
comment|// kill it
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPreemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|container
argument_list|,
name|SchedulerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|preempted
operator|.
name|remove
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//otherwise just send preemption events
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPreemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|container
argument_list|,
name|SchedulerEventType
operator|.
name|PREEMPT_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|preempted
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|==
literal|null
condition|)
block|{
name|preempted
operator|.
name|put
argument_list|(
name|container
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Keep the preempted list clean
for|for
control|(
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|i
init|=
name|preempted
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RMContainer
name|id
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// garbage collect containers that are irrelevant for preemption
if|if
condition|(
name|preempted
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|2
operator|*
name|maxWaitTime
operator|<
name|clock
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method recursively computes the ideal assignment of resources to each    * level of the hierarchy. This ensures that leafs that are over-capacity but    * with parents within capacity will not be preempted. Preemptions are allowed    * within each subtree according to local over/under capacity.    *    * @param root the root of the cloned queue hierachy    * @param totalPreemptionAllowed maximum amount of preemption allowed    * @return a list of leaf queues updated with preemption targets    */
DECL|method|recursivelyComputeIdealAssignment ( TempQueuePerPartition root, Resource totalPreemptionAllowed)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|recursivelyComputeIdealAssignment
parameter_list|(
name|TempQueuePerPartition
name|root
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueueNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
operator|&&
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// compute ideal distribution at this level
name|computeIdealResourceDistribution
argument_list|(
name|rc
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|,
name|totalPreemptionAllowed
argument_list|,
name|root
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
comment|// compute recursively for lower levels and build list of leafs
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|leafQueueNames
operator|.
name|addAll
argument_list|(
name|recursivelyComputeIdealAssignment
argument_list|(
name|t
argument_list|,
name|totalPreemptionAllowed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we are in a leaf nothing to do, just return yourself
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|root
operator|.
name|queueName
argument_list|)
return|;
block|}
return|return
name|leafQueueNames
return|;
block|}
comment|/**    * This method computes (for a single level in the tree, passed as a {@code    * List<TempQueue>}) the ideal assignment of resources. This is done    * recursively to allocate capacity fairly across all queues with pending    * demands. It terminates when no resources are left to assign, or when all    * demand is satisfied.    *    * @param rc resource calculator    * @param queues a list of cloned queues to be assigned capacity to (this is    * an out param)    * @param totalPreemptionAllowed total amount of preemption we allow    * @param tot_guarant the amount of capacity assigned to this pool of queues    */
DECL|method|computeIdealResourceDistribution (ResourceCalculator rc, List<TempQueuePerPartition> queues, Resource totalPreemptionAllowed, Resource tot_guarant)
specifier|private
name|void
name|computeIdealResourceDistribution
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|List
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|queues
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|,
name|Resource
name|tot_guarant
parameter_list|)
block|{
comment|// qAlloc tracks currently active queues (will decrease progressively as
comment|// demand is met)
name|List
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|qAlloc
init|=
operator|new
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
argument_list|(
name|queues
argument_list|)
decl_stmt|;
comment|// unassigned tracks how much resources are still to assign, initialized
comment|// with the total capacity for this set of queues
name|Resource
name|unassigned
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|tot_guarant
argument_list|)
decl_stmt|;
comment|// group queues based on whether they have non-zero guaranteed capacity
name|Set
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|nonZeroGuarQueues
init|=
operator|new
name|HashSet
argument_list|<
name|TempQueuePerPartition
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|zeroGuarQueues
init|=
operator|new
name|HashSet
argument_list|<
name|TempQueuePerPartition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|qAlloc
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|q
operator|.
name|guaranteed
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|nonZeroGuarQueues
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zeroGuarQueues
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// first compute the allocation as a fixpoint based on guaranteed capacity
name|computeFixpointAllocation
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|nonZeroGuarQueues
argument_list|,
name|unassigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if any capacity is left unassigned, distributed among zero-guarantee
comment|// queues uniformly (i.e., not based on guaranteed capacity, as this is zero)
if|if
condition|(
operator|!
name|zeroGuarQueues
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|unassigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|computeFixpointAllocation
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|zeroGuarQueues
argument_list|,
name|unassigned
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// based on ideal assignment computed above and current assignment we derive
comment|// how much preemption is required overall
name|Resource
name|totPreemptionNeeded
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|queues
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|t
operator|.
name|current
argument_list|,
name|t
operator|.
name|idealAssigned
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totPreemptionNeeded
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|t
operator|.
name|current
argument_list|,
name|t
operator|.
name|idealAssigned
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we need to preempt more than is allowed, compute a factor (0<f<1)
comment|// that is used to scale down how much we ask back from each queue
name|float
name|scalingFactor
init|=
literal|1.0F
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|totPreemptionNeeded
argument_list|,
name|totalPreemptionAllowed
argument_list|)
condition|)
block|{
name|scalingFactor
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|totalPreemptionAllowed
argument_list|,
name|totPreemptionNeeded
argument_list|)
expr_stmt|;
block|}
comment|// assign to each queue the amount of actual preemption based on local
comment|// information of ideal preemption and scaling factor
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|queues
control|)
block|{
name|t
operator|.
name|assignPreemption
argument_list|(
name|scalingFactor
argument_list|,
name|rc
argument_list|,
name|tot_guarant
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|queues
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|time
operator|+
literal|": "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Given a set of queues compute the fix-point distribution of unassigned    * resources among them. As pending request of a queue are exhausted, the    * queue is removed from the set and remaining capacity redistributed among    * remaining queues. The distribution is weighted based on guaranteed    * capacity, unless asked to ignoreGuarantee, in which case resources are    * distributed uniformly.    */
DECL|method|computeFixpointAllocation (ResourceCalculator rc, Resource tot_guarant, Collection<TempQueuePerPartition> qAlloc, Resource unassigned, boolean ignoreGuarantee)
specifier|private
name|void
name|computeFixpointAllocation
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|tot_guarant
parameter_list|,
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|qAlloc
parameter_list|,
name|Resource
name|unassigned
parameter_list|,
name|boolean
name|ignoreGuarantee
parameter_list|)
block|{
comment|// Prior to assigning the unused resources, process each queue as follows:
comment|// If current> guaranteed, idealAssigned = guaranteed + untouchable extra
comment|// Else idealAssigned = current;
comment|// Subtract idealAssigned resources from unassigned.
comment|// If the queue has all of its needs met (that is, if
comment|// idealAssigned>= current + pending), remove it from consideration.
comment|// Sort queues from most under-guaranteed to most over-guaranteed.
name|TQComparator
name|tqComparator
init|=
operator|new
name|TQComparator
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|)
decl_stmt|;
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|orderedByNeed
init|=
operator|new
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
argument_list|(
literal|10
argument_list|,
name|tqComparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|i
init|=
name|qAlloc
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TempQueuePerPartition
name|q
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|q
operator|.
name|current
argument_list|,
name|q
operator|.
name|guaranteed
argument_list|)
condition|)
block|{
name|q
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|q
operator|.
name|guaranteed
argument_list|,
name|q
operator|.
name|untouchableExtra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|q
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unassigned
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
comment|// If idealAssigned< (current + pending), q needs more resources, so
comment|// add it to the list of underserved queues, ordered by need.
name|Resource
name|curPlusPend
init|=
name|Resources
operator|.
name|add
argument_list|(
name|q
operator|.
name|current
argument_list|,
name|q
operator|.
name|pending
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|,
name|curPlusPend
argument_list|)
condition|)
block|{
name|orderedByNeed
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|//assign all cluster resources until no more demand, or no resources are left
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|unassigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|wQassigned
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// we compute normalizedGuarantees capacity based on currently active
comment|// queues
name|resetCapacity
argument_list|(
name|rc
argument_list|,
name|unassigned
argument_list|,
name|orderedByNeed
argument_list|,
name|ignoreGuarantee
argument_list|)
expr_stmt|;
comment|// For each underserved queue (or set of queues if multiple are equally
comment|// underserved), offer its share of the unassigned resources based on its
comment|// normalized guarantee. After the offer, if the queue is not satisfied,
comment|// place it back in the ordered list of queues, recalculating its place
comment|// in the order of most under-guaranteed to most over-guaranteed. In this
comment|// way, the most underserved queue(s) are always given resources first.
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|underserved
init|=
name|getMostUnderservedQueues
argument_list|(
name|orderedByNeed
argument_list|,
name|tqComparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|i
init|=
name|underserved
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TempQueuePerPartition
name|sub
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|wQavail
init|=
name|Resources
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|rc
argument_list|,
name|unassigned
argument_list|,
name|sub
operator|.
name|normalizedGuarantee
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|wQidle
init|=
name|sub
operator|.
name|offer
argument_list|(
name|wQavail
argument_list|,
name|rc
argument_list|,
name|tot_guarant
argument_list|)
decl_stmt|;
name|Resource
name|wQdone
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|wQavail
argument_list|,
name|wQidle
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|wQdone
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// The queue is still asking for more. Put it back in the priority
comment|// queue, recalculating its order based on need.
name|orderedByNeed
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|wQassigned
argument_list|,
name|wQdone
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unassigned
argument_list|,
name|wQassigned
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Take the most underserved TempQueue (the one on the head). Collect and
comment|// return the list of all queues that have the same idealAssigned
comment|// percentage of guaranteed.
DECL|method|getMostUnderservedQueues ( PriorityQueue<TempQueuePerPartition> orderedByNeed, TQComparator tqComparator)
specifier|protected
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|getMostUnderservedQueues
parameter_list|(
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|orderedByNeed
parameter_list|,
name|TQComparator
name|tqComparator
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|underserved
init|=
operator|new
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TempQueuePerPartition
name|q1
init|=
name|orderedByNeed
operator|.
name|remove
argument_list|()
decl_stmt|;
name|underserved
operator|.
name|add
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|TempQueuePerPartition
name|q2
init|=
name|orderedByNeed
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// q1's pct of guaranteed won't be larger than q2's. If it's less, then
comment|// return what has already been collected. Otherwise, q1's pct of
comment|// guaranteed == that of q2, so add q2 to underserved list during the
comment|// next pass.
if|if
condition|(
name|q2
operator|==
literal|null
operator|||
name|tqComparator
operator|.
name|compare
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|underserved
return|;
block|}
block|}
return|return
name|underserved
return|;
block|}
comment|/**    * Computes a normalizedGuaranteed capacity based on active queues    * @param rc resource calculator    * @param clusterResource the total amount of resources in the cluster    * @param queues the list of queues to consider    */
DECL|method|resetCapacity (ResourceCalculator rc, Resource clusterResource, Collection<TempQueuePerPartition> queues, boolean ignoreGuar)
specifier|private
name|void
name|resetCapacity
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|queues
parameter_list|,
name|boolean
name|ignoreGuar
parameter_list|)
block|{
name|Resource
name|activeCap
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoreGuar
condition|)
block|{
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|q
operator|.
name|normalizedGuarantee
operator|=
operator|(
name|float
operator|)
literal|1.0f
operator|/
operator|(
operator|(
name|float
operator|)
name|queues
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|activeCap
argument_list|,
name|q
operator|.
name|guaranteed
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|q
operator|.
name|normalizedGuarantee
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|q
operator|.
name|guaranteed
argument_list|,
name|activeCap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPartitionByNodeId (NodeId nodeId)
specifier|private
name|String
name|getPartitionByNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId
argument_list|)
operator|.
name|getPartition
argument_list|()
return|;
block|}
comment|/**    * Return should we preempt rmContainer. If we should, deduct from    *<code>resourceToObtainByPartition</code>    */
DECL|method|tryPreemptContainerAndDeductResToObtain ( Map<String, Resource> resourceToObtainByPartitions, RMContainer rmContainer, Resource clusterResource, Map<ApplicationAttemptId, Set<RMContainer>> preemptMap)
specifier|private
name|boolean
name|tryPreemptContainerAndDeductResToObtain
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resourceToObtainByPartitions
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
parameter_list|)
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|rmContainer
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// We will not account resource of a container twice or more
if|if
condition|(
name|preemptMapContains
argument_list|(
name|preemptMap
argument_list|,
name|attemptId
argument_list|,
name|rmContainer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|nodePartition
init|=
name|getPartitionByNodeId
argument_list|(
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|toObtainByPartition
init|=
name|resourceToObtainByPartitions
operator|.
name|get
argument_list|(
name|nodePartition
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|toObtainByPartition
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|toObtainByPartition
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|toObtainByPartition
argument_list|,
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// When we have no more resource need to obtain, remove from map.
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|toObtainByPartition
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|resourceToObtainByPartitions
operator|.
name|remove
argument_list|(
name|nodePartition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Marked container="
operator|+
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" in partition="
operator|+
name|nodePartition
operator|+
literal|" will be preempted"
argument_list|)
expr_stmt|;
block|}
comment|// Add to preemptMap
name|addToPreemptMap
argument_list|(
name|preemptMap
argument_list|,
name|attemptId
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|preemptMapContains ( Map<ApplicationAttemptId, Set<RMContainer>> preemptMap, ApplicationAttemptId attemptId, RMContainer rmContainer)
specifier|private
name|boolean
name|preemptMapContains
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
decl_stmt|;
if|if
condition|(
literal|null
operator|==
operator|(
name|rmContainers
operator|=
name|preemptMap
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|rmContainers
operator|.
name|contains
argument_list|(
name|rmContainer
argument_list|)
return|;
block|}
DECL|method|addToPreemptMap ( Map<ApplicationAttemptId, Set<RMContainer>> preemptMap, ApplicationAttemptId appAttemptId, RMContainer containerToPreempt)
specifier|private
name|void
name|addToPreemptMap
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RMContainer
name|containerToPreempt
parameter_list|)
block|{
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
literal|null
operator|==
operator|(
name|set
operator|=
name|preemptMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
operator|)
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
expr_stmt|;
name|preemptMap
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|containerToPreempt
argument_list|)
expr_stmt|;
block|}
comment|/**    * Based a resource preemption target drop reservations of containers and    * if necessary select containers for preemption from applications in each    * over-capacity queue. It uses {@link #NATURAL_TERMINATION_FACTOR} to    * account for containers that will naturally complete.    *    * @param queues set of leaf queues to preempt from    * @param clusterResource total amount of cluster resources    * @return a map of applciationID to set of containers to preempt    */
DECL|method|getContainersToPreempt ( Set<String> leafQueueNames, Resource clusterResource)
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|getContainersToPreempt
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueueNames
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|skippedAMContainerlist
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
comment|// Loop all leaf queues
for|for
control|(
name|String
name|queueName
range|:
name|leafQueueNames
control|)
block|{
comment|// check if preemption disabled for the queue
if|if
condition|(
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|.
name|preemptionDisabled
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"skipping from queue="
operator|+
name|queueName
operator|+
literal|" because it's a non-preemptable queue"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// compute resToObtainByPartition considered inter-queue preemption
name|LeafQueue
name|leafQueue
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|qT
range|:
name|getQueuePartitions
argument_list|(
name|queueName
argument_list|)
control|)
block|{
name|leafQueue
operator|=
name|qT
operator|.
name|leafQueue
expr_stmt|;
comment|// we act only if we are violating balance by more than
comment|// maxIgnoredOverCapacity
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|qT
operator|.
name|current
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|qT
operator|.
name|guaranteed
argument_list|,
literal|1.0
operator|+
name|maxIgnoredOverCapacity
argument_list|)
argument_list|)
condition|)
block|{
comment|// we introduce a dampening factor naturalTerminationFactor that
comment|// accounts for natural termination of containers
name|Resource
name|resToObtain
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|qT
operator|.
name|toBePreempted
argument_list|,
name|naturalTerminationFactor
argument_list|)
decl_stmt|;
comment|// Only add resToObtain when it>= 0
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|resToObtain
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|resToObtainByPartition
operator|.
name|put
argument_list|(
name|qT
operator|.
name|partition
argument_list|,
name|resToObtain
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queue="
operator|+
name|queueName
operator|+
literal|" partition="
operator|+
name|qT
operator|.
name|partition
operator|+
literal|" resource-to-obtain="
operator|+
name|resToObtain
argument_list|)
expr_stmt|;
block|}
block|}
name|qT
operator|.
name|actuallyPreempted
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|resToObtain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qT
operator|.
name|actuallyPreempted
operator|=
name|Resources
operator|.
name|none
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|leafQueue
init|)
block|{
comment|// go through all ignore-partition-exclusivity containers first to make
comment|// sure such containers will be preempted first
name|Map
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|ignorePartitionExclusivityContainers
init|=
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partition
range|:
name|resToObtainByPartition
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ignorePartitionExclusivityContainers
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
init|=
name|ignorePartitionExclusivityContainers
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
comment|// We will check container from reverse order, so latter submitted
comment|// application's containers will be preempted first.
for|for
control|(
name|RMContainer
name|c
range|:
name|rmContainers
operator|.
name|descendingSet
argument_list|()
control|)
block|{
name|boolean
name|preempted
init|=
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|preemptMap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|preempted
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// preempt other containers
name|Resource
name|skippedAMSize
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|desc
init|=
name|leafQueue
operator|.
name|getOrderingPolicy
argument_list|()
operator|.
name|getPreemptionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|desc
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FiCaSchedulerApp
name|fc
init|=
name|desc
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// When we complete preempt from one partition, we will remove from
comment|// resToObtainByPartition, so when it becomes empty, we can get no
comment|// more preemption is needed
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|preemptFrom
argument_list|(
name|fc
argument_list|,
name|clusterResource
argument_list|,
name|resToObtainByPartition
argument_list|,
name|skippedAMContainerlist
argument_list|,
name|skippedAMSize
argument_list|,
name|preemptMap
argument_list|)
expr_stmt|;
block|}
comment|// Can try preempting AMContainers (still saving atmost
comment|// maxAMCapacityForThisQueue AMResource's) if more resources are
comment|// required to be preempted from this Queue.
name|Resource
name|maxAMCapacityForThisQueue
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
name|leafQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
argument_list|,
name|leafQueue
operator|.
name|getMaxAMResourcePerQueuePercent
argument_list|()
argument_list|)
decl_stmt|;
name|preemptAMContainers
argument_list|(
name|clusterResource
argument_list|,
name|preemptMap
argument_list|,
name|skippedAMContainerlist
argument_list|,
name|resToObtainByPartition
argument_list|,
name|skippedAMSize
argument_list|,
name|maxAMCapacityForThisQueue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|preemptMap
return|;
block|}
comment|/**    * As more resources are needed for preemption, saved AMContainers has to be    * rescanned. Such AMContainers can be preempted based on resToObtain, but     * maxAMCapacityForThisQueue resources will be still retained.    *      * @param clusterResource    * @param preemptMap    * @param skippedAMContainerlist    * @param resToObtain    * @param skippedAMSize    * @param maxAMCapacityForThisQueue    */
DECL|method|preemptAMContainers (Resource clusterResource, Map<ApplicationAttemptId, Set<RMContainer>> preemptMap, List<RMContainer> skippedAMContainerlist, Map<String, Resource> resToObtainByPartition, Resource skippedAMSize, Resource maxAMCapacityForThisQueue)
specifier|private
name|void
name|preemptAMContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|skippedAMContainerlist
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
parameter_list|,
name|Resource
name|skippedAMSize
parameter_list|,
name|Resource
name|maxAMCapacityForThisQueue
parameter_list|)
block|{
for|for
control|(
name|RMContainer
name|c
range|:
name|skippedAMContainerlist
control|)
block|{
comment|// Got required amount of resources for preemption, can stop now
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Once skippedAMSize reaches down to maxAMCapacityForThisQueue,
comment|// container selection iteration for preemption will be stopped.
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|skippedAMSize
argument_list|,
name|maxAMCapacityForThisQueue
argument_list|)
condition|)
block|{
break|break;
block|}
name|boolean
name|preempted
init|=
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|preemptMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|preempted
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|skippedAMSize
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|skippedAMContainerlist
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Given a target preemption for a specific application, select containers    * to preempt (after unreserving all reservation for that app).    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|preemptFrom (FiCaSchedulerApp app, Resource clusterResource, Map<String, Resource> resToObtainByPartition, List<RMContainer> skippedAMContainerlist, Resource skippedAMSize, Map<ApplicationAttemptId, Set<RMContainer>> preemptMap)
specifier|private
name|void
name|preemptFrom
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|skippedAMContainerlist
parameter_list|,
name|Resource
name|skippedAMSize
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
parameter_list|)
block|{
name|ApplicationAttemptId
name|appId
init|=
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking at application="
operator|+
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" resourceToObtain="
operator|+
name|resToObtainByPartition
argument_list|)
expr_stmt|;
block|}
comment|// first drop reserved containers towards rsrcPreempt
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|reservedContainers
control|)
block|{
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Try to preempt this container
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|preemptMap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|observeOnly
condition|)
block|{
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPreemptEvent
argument_list|(
name|appId
argument_list|,
name|c
argument_list|,
name|SchedulerEventType
operator|.
name|DROP_RESERVATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if more resources are to be freed go through all live containers in
comment|// reverse priority and reverse allocation order and mark them for
comment|// preemption
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|(
name|app
operator|.
name|getLiveContainers
argument_list|()
argument_list|)
decl_stmt|;
name|sortContainers
argument_list|(
name|liveContainers
argument_list|)
expr_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|liveContainers
control|)
block|{
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Skip AM Container from preemption for now.
if|if
condition|(
name|c
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
name|skippedAMContainerlist
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|skippedAMSize
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Try to preempt this container
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|preemptMap
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compare by reversed priority order first, and then reversed containerId    * order    * @param containers    */
annotation|@
name|VisibleForTesting
DECL|method|sortContainers (List<RMContainer> containers)
specifier|static
name|void
name|sortContainers
parameter_list|(
name|List
argument_list|<
name|RMContainer
argument_list|>
name|containers
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|containers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RMContainer
name|a
parameter_list|,
name|RMContainer
name|b
parameter_list|)
block|{
name|Comparator
argument_list|<
name|Priority
argument_list|>
name|c
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|Comparator
argument_list|()
decl_stmt|;
name|int
name|priorityComp
init|=
name|c
operator|.
name|compare
argument_list|(
name|b
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|a
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorityComp
operator|!=
literal|0
condition|)
block|{
return|return
name|priorityComp
return|;
block|}
return|return
name|b
operator|.
name|getContainerId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMonitoringInterval ()
specifier|public
name|long
name|getMonitoringInterval
parameter_list|()
block|{
return|return
name|monitoringInterval
return|;
block|}
annotation|@
name|Override
DECL|method|getPolicyName ()
specifier|public
name|String
name|getPolicyName
parameter_list|()
block|{
return|return
literal|"ProportionalCapacityPreemptionPolicy"
return|;
block|}
comment|/**    * This method walks a tree of CSQueue and clones the portion of the state    * relevant for preemption in TempQueue(s). It also maintains a pointer to    * the leaves. Finally it aggregates pending resources in each queue and rolls    * it up to higher levels.    *    * @param curQueue current queue which I'm looking at now    * @param partitionResource the total amount of resources in the cluster    * @return the root of the cloned queue hierarchy    */
DECL|method|cloneQueues (CSQueue curQueue, Resource partitionResource, String partitionToLookAt)
specifier|private
name|TempQueuePerPartition
name|cloneQueues
parameter_list|(
name|CSQueue
name|curQueue
parameter_list|,
name|Resource
name|partitionResource
parameter_list|,
name|String
name|partitionToLookAt
parameter_list|)
block|{
name|TempQueuePerPartition
name|ret
decl_stmt|;
synchronized|synchronized
init|(
name|curQueue
init|)
block|{
name|String
name|queueName
init|=
name|curQueue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|QueueCapacities
name|qc
init|=
name|curQueue
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|float
name|absCap
init|=
name|qc
operator|.
name|getAbsoluteCapacity
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|float
name|absMaxCap
init|=
name|qc
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|boolean
name|preemptionDisabled
init|=
name|curQueue
operator|.
name|getPreemptionDisabled
argument_list|()
decl_stmt|;
name|Resource
name|current
init|=
name|curQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|Resource
name|guaranteed
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|partitionResource
argument_list|,
name|absCap
argument_list|)
decl_stmt|;
name|Resource
name|maxCapacity
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|partitionResource
argument_list|,
name|absMaxCap
argument_list|)
decl_stmt|;
comment|// when partition is a non-exclusive partition, the actual maxCapacity
comment|// could more than specified maxCapacity
try|try
block|{
if|if
condition|(
operator|!
name|scheduler
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|isExclusiveNodeLabel
argument_list|(
name|partitionToLookAt
argument_list|)
condition|)
block|{
name|maxCapacity
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|rc
argument_list|,
name|partitionResource
argument_list|,
name|maxCapacity
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// This may cause by partition removed when running capacity monitor,
comment|// just ignore the error, this will be corrected when doing next check.
block|}
name|Resource
name|extra
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|partitionResource
argument_list|,
name|current
argument_list|,
name|guaranteed
argument_list|)
condition|)
block|{
name|extra
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|current
argument_list|,
name|guaranteed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curQueue
operator|instanceof
name|LeafQueue
condition|)
block|{
name|LeafQueue
name|l
init|=
operator|(
name|LeafQueue
operator|)
name|curQueue
decl_stmt|;
name|Resource
name|pending
init|=
name|l
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|new
name|TempQueuePerPartition
argument_list|(
name|queueName
argument_list|,
name|current
argument_list|,
name|pending
argument_list|,
name|guaranteed
argument_list|,
name|maxCapacity
argument_list|,
name|preemptionDisabled
argument_list|,
name|partitionToLookAt
argument_list|)
expr_stmt|;
if|if
condition|(
name|preemptionDisabled
condition|)
block|{
name|ret
operator|.
name|untouchableExtra
operator|=
name|extra
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|preemptableExtra
operator|=
name|extra
expr_stmt|;
block|}
name|ret
operator|.
name|setLeafQueue
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Resource
name|pending
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|new
name|TempQueuePerPartition
argument_list|(
name|curQueue
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|current
argument_list|,
name|pending
argument_list|,
name|guaranteed
argument_list|,
name|maxCapacity
argument_list|,
literal|false
argument_list|,
name|partitionToLookAt
argument_list|)
expr_stmt|;
name|Resource
name|childrensPreemptable
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|CSQueue
name|c
range|:
name|curQueue
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
name|TempQueuePerPartition
name|subq
init|=
name|cloneQueues
argument_list|(
name|c
argument_list|,
name|partitionResource
argument_list|,
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|childrensPreemptable
argument_list|,
name|subq
operator|.
name|preemptableExtra
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addChild
argument_list|(
name|subq
argument_list|)
expr_stmt|;
block|}
comment|// untouchableExtra = max(extra - childrenPreemptable, 0)
if|if
condition|(
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|rc
argument_list|,
name|partitionResource
argument_list|,
name|childrensPreemptable
argument_list|,
name|extra
argument_list|)
condition|)
block|{
name|ret
operator|.
name|untouchableExtra
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|untouchableExtra
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|extra
argument_list|,
name|childrensPreemptable
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|preemptableExtra
operator|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|partitionResource
argument_list|,
name|childrensPreemptable
argument_list|,
name|extra
argument_list|)
expr_stmt|;
block|}
block|}
name|addTempQueuePartition
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|// simple printout function that reports internal queue state (useful for
comment|// plotting)
DECL|method|logToCSV (List<String> leafQueueNames)
specifier|private
name|void
name|logToCSV
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|leafQueueNames
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|leafQueueNames
argument_list|)
expr_stmt|;
name|String
name|queueState
init|=
literal|" QUEUESTATE: "
operator|+
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|queueState
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|queueName
range|:
name|leafQueueNames
control|)
block|{
name|TempQueuePerPartition
name|tq
init|=
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|tq
operator|.
name|appendLogString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addTempQueuePartition (TempQueuePerPartition queuePartition)
specifier|private
name|void
name|addTempQueuePartition
parameter_list|(
name|TempQueuePerPartition
name|queuePartition
parameter_list|)
block|{
name|String
name|queueName
init|=
name|queuePartition
operator|.
name|queueName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TempQueuePerPartition
argument_list|>
name|queuePartitions
decl_stmt|;
if|if
condition|(
literal|null
operator|==
operator|(
name|queuePartitions
operator|=
name|queueToPartitions
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
operator|)
condition|)
block|{
name|queuePartitions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TempQueuePerPartition
argument_list|>
argument_list|()
expr_stmt|;
name|queueToPartitions
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|queuePartitions
argument_list|)
expr_stmt|;
block|}
name|queuePartitions
operator|.
name|put
argument_list|(
name|queuePartition
operator|.
name|partition
argument_list|,
name|queuePartition
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get queue partition by given queueName and partitionName    */
DECL|method|getQueueByPartition (String queueName, String partition)
specifier|private
name|TempQueuePerPartition
name|getQueueByPartition
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TempQueuePerPartition
argument_list|>
name|partitionToQueues
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
operator|(
name|partitionToQueues
operator|=
name|queueToPartitions
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|partitionToQueues
operator|.
name|get
argument_list|(
name|partition
argument_list|)
return|;
block|}
comment|/**    * Get all queue partitions by given queueName    */
DECL|method|getQueuePartitions (String queueName)
specifier|private
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|getQueuePartitions
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|queueToPartitions
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|queueToPartitions
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**    * Temporary data-structure tracking resource availability, pending resource    * need, current utilization. This is per-queue-per-partition data structure    */
DECL|class|TempQueuePerPartition
specifier|static
class|class
name|TempQueuePerPartition
block|{
DECL|field|queueName
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|current
specifier|final
name|Resource
name|current
decl_stmt|;
DECL|field|pending
specifier|final
name|Resource
name|pending
decl_stmt|;
DECL|field|guaranteed
specifier|final
name|Resource
name|guaranteed
decl_stmt|;
DECL|field|maxCapacity
specifier|final
name|Resource
name|maxCapacity
decl_stmt|;
DECL|field|partition
specifier|final
name|String
name|partition
decl_stmt|;
DECL|field|idealAssigned
name|Resource
name|idealAssigned
decl_stmt|;
DECL|field|toBePreempted
name|Resource
name|toBePreempted
decl_stmt|;
comment|// For logging purpose
DECL|field|actuallyPreempted
name|Resource
name|actuallyPreempted
decl_stmt|;
DECL|field|untouchableExtra
name|Resource
name|untouchableExtra
decl_stmt|;
DECL|field|preemptableExtra
name|Resource
name|preemptableExtra
decl_stmt|;
DECL|field|normalizedGuarantee
name|double
name|normalizedGuarantee
decl_stmt|;
DECL|field|children
specifier|final
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|children
decl_stmt|;
DECL|field|leafQueue
name|LeafQueue
name|leafQueue
decl_stmt|;
DECL|field|preemptionDisabled
name|boolean
name|preemptionDisabled
decl_stmt|;
DECL|method|TempQueuePerPartition (String queueName, Resource current, Resource pending, Resource guaranteed, Resource maxCapacity, boolean preemptionDisabled, String partition)
name|TempQueuePerPartition
parameter_list|(
name|String
name|queueName
parameter_list|,
name|Resource
name|current
parameter_list|,
name|Resource
name|pending
parameter_list|,
name|Resource
name|guaranteed
parameter_list|,
name|Resource
name|maxCapacity
parameter_list|,
name|boolean
name|preemptionDisabled
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
name|this
operator|.
name|guaranteed
operator|=
name|guaranteed
expr_stmt|;
name|this
operator|.
name|maxCapacity
operator|=
name|maxCapacity
expr_stmt|;
name|this
operator|.
name|idealAssigned
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|actuallyPreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|toBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|normalizedGuarantee
operator|=
name|Float
operator|.
name|NaN
expr_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|untouchableExtra
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|preemptableExtra
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|preemptionDisabled
operator|=
name|preemptionDisabled
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
block|}
DECL|method|setLeafQueue (LeafQueue l)
specifier|public
name|void
name|setLeafQueue
parameter_list|(
name|LeafQueue
name|l
parameter_list|)
block|{
assert|assert
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
assert|;
name|this
operator|.
name|leafQueue
operator|=
name|l
expr_stmt|;
block|}
comment|/**      * When adding a child we also aggregate its pending resource needs.      * @param q the child queue to add to this queue      */
DECL|method|addChild (TempQueuePerPartition q)
specifier|public
name|void
name|addChild
parameter_list|(
name|TempQueuePerPartition
name|q
parameter_list|)
block|{
assert|assert
name|leafQueue
operator|==
literal|null
assert|;
name|children
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|pending
argument_list|,
name|q
operator|.
name|pending
argument_list|)
expr_stmt|;
block|}
DECL|method|addChildren (ArrayList<TempQueuePerPartition> queues)
specifier|public
name|void
name|addChildren
parameter_list|(
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|queues
parameter_list|)
block|{
assert|assert
name|leafQueue
operator|==
literal|null
assert|;
name|children
operator|.
name|addAll
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildren ()
specifier|public
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
comment|// This function "accepts" all the resources it can (pending) and return
comment|// the unused ones
DECL|method|offer (Resource avail, ResourceCalculator rc, Resource clusterResource)
name|Resource
name|offer
parameter_list|(
name|Resource
name|avail
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|Resource
name|absMaxCapIdealAssignedDelta
init|=
name|Resources
operator|.
name|componentwiseMax
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|maxCapacity
argument_list|,
name|idealAssigned
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// remain = avail - min(avail, (max - assigned), (current + pending - assigned))
name|Resource
name|accepted
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|absMaxCapIdealAssignedDelta
argument_list|,
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|avail
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|current
argument_list|,
name|pending
argument_list|)
argument_list|,
name|idealAssigned
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|remain
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|avail
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|idealAssigned
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
return|return
name|remain
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" NAME: "
operator|+
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|" CUR: "
argument_list|)
operator|.
name|append
argument_list|(
name|current
argument_list|)
operator|.
name|append
argument_list|(
literal|" PEN: "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
argument_list|)
operator|.
name|append
argument_list|(
literal|" GAR: "
argument_list|)
operator|.
name|append
argument_list|(
name|guaranteed
argument_list|)
operator|.
name|append
argument_list|(
literal|" NORM: "
argument_list|)
operator|.
name|append
argument_list|(
name|normalizedGuarantee
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_ASSIGNED: "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
argument_list|)
operator|.
name|append
argument_list|(
literal|" ACTUAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|actuallyPreempted
argument_list|)
operator|.
name|append
argument_list|(
literal|" UNTOUCHABLE: "
argument_list|)
operator|.
name|append
argument_list|(
name|untouchableExtra
argument_list|)
operator|.
name|append
argument_list|(
literal|" PREEMPTABLE: "
argument_list|)
operator|.
name|append
argument_list|(
name|preemptableExtra
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|printAll ()
specifier|public
name|void
name|printAll
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|sub
range|:
name|this
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|sub
operator|.
name|printAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assignPreemption (float scalingFactor, ResourceCalculator rc, Resource clusterResource)
specifier|public
name|void
name|assignPreemption
parameter_list|(
name|float
name|scalingFactor
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|current
argument_list|,
name|idealAssigned
argument_list|)
condition|)
block|{
name|toBePreempted
operator|=
name|Resources
operator|.
name|multiply
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|current
argument_list|,
name|idealAssigned
argument_list|)
argument_list|,
name|scalingFactor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toBePreempted
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendLogString (StringBuilder sb)
name|void
name|appendLogString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|current
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|current
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|guaranteed
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|guaranteed
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|actuallyPreempted
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|actuallyPreempted
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TQComparator
specifier|static
class|class
name|TQComparator
implements|implements
name|Comparator
argument_list|<
name|TempQueuePerPartition
argument_list|>
block|{
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|clusterRes
specifier|private
name|Resource
name|clusterRes
decl_stmt|;
DECL|method|TQComparator (ResourceCalculator rc, Resource clusterRes)
name|TQComparator
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterRes
parameter_list|)
block|{
name|this
operator|.
name|rc
operator|=
name|rc
expr_stmt|;
name|this
operator|.
name|clusterRes
operator|=
name|clusterRes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (TempQueuePerPartition tq1, TempQueuePerPartition tq2)
specifier|public
name|int
name|compare
parameter_list|(
name|TempQueuePerPartition
name|tq1
parameter_list|,
name|TempQueuePerPartition
name|tq2
parameter_list|)
block|{
if|if
condition|(
name|getIdealPctOfGuaranteed
argument_list|(
name|tq1
argument_list|)
operator|<
name|getIdealPctOfGuaranteed
argument_list|(
name|tq2
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|getIdealPctOfGuaranteed
argument_list|(
name|tq1
argument_list|)
operator|>
name|getIdealPctOfGuaranteed
argument_list|(
name|tq2
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|// Calculates idealAssigned / guaranteed
comment|// TempQueues with 0 guarantees are always considered the most over
comment|// capacity and therefore considered last for resources.
DECL|method|getIdealPctOfGuaranteed (TempQueuePerPartition q)
specifier|private
name|double
name|getIdealPctOfGuaranteed
parameter_list|(
name|TempQueuePerPartition
name|q
parameter_list|)
block|{
name|double
name|pctOver
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterRes
argument_list|,
name|q
operator|.
name|guaranteed
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|pctOver
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterRes
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|,
name|q
operator|.
name|guaranteed
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|pctOver
operator|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getQueuePartitions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TempQueuePerPartition
argument_list|>
argument_list|>
name|getQueuePartitions
parameter_list|()
block|{
return|return
name|queueToPartitions
return|;
block|}
block|}
end_class

end_unit

