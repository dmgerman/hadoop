begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseNMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|NMTokenSecretManagerInRM
specifier|public
class|class
name|NMTokenSecretManagerInRM
extends|extends
name|BaseNMTokenSecretManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NMTokenSecretManagerInRM
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nextMasterKey
specifier|private
name|MasterKeyData
name|nextMasterKey
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
DECL|field|rollingInterval
specifier|private
specifier|final
name|long
name|rollingInterval
decl_stmt|;
DECL|field|activationDelay
specifier|private
specifier|final
name|long
name|activationDelay
decl_stmt|;
DECL|field|appAttemptToNodeKeyMap
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|appAttemptToNodeKeyMap
decl_stmt|;
DECL|method|NMTokenSecretManagerInRM (Configuration conf)
specifier|public
name|NMTokenSecretManagerInRM
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|timer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|rollingInterval
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|)
operator|*
literal|1000
expr_stmt|;
comment|// Add an activation delay. This is to address the following race: RM may
comment|// roll over master-key, scheduling may happen at some point of time, an
comment|// NMToken created with a password generated off new master key, but NM
comment|// might not have come again to RM to update the shared secret: so AM has a
comment|// valid password generated off new secret but NM doesn't know about the
comment|// secret yet.
comment|// Adding delay = 1.5 * expiry interval makes sure that all active NMs get
comment|// the updated shared-key.
name|this
operator|.
name|activationDelay
operator|=
call|(
name|long
call|)
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
operator|*
literal|1.5
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NMTokenKeyRollingInterval: "
operator|+
name|this
operator|.
name|rollingInterval
operator|+
literal|"ms and NMTokenKeyActivationDelay: "
operator|+
name|this
operator|.
name|activationDelay
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rollingInterval
operator|<=
name|activationDelay
operator|*
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
operator|+
literal|" should be more than 3 X "
operator|+
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
throw|;
block|}
name|appAttemptToNodeKeyMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a new master-key and sets it as the primary.    */
annotation|@
name|Private
DECL|method|rollMasterKey ()
specifier|public
name|void
name|rollMasterKey
parameter_list|()
block|{
name|super
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling master-key for nm-tokens"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|currentMasterKey
operator|==
literal|null
condition|)
block|{
comment|// Setting up for the first time.
name|this
operator|.
name|currentMasterKey
operator|=
name|createNewMasterKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nextMasterKey
operator|=
name|createNewMasterKey
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to activate master-key with key-id "
operator|+
name|this
operator|.
name|nextMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|+
literal|" in "
operator|+
name|this
operator|.
name|activationDelay
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|schedule
argument_list|(
operator|new
name|NextKeyActivator
argument_list|()
argument_list|,
name|this
operator|.
name|activationDelay
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|getNextKey ()
specifier|public
name|MasterKey
name|getNextKey
parameter_list|()
block|{
name|super
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|nextMasterKey
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|nextMasterKey
operator|.
name|getMasterKey
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Activate the new master-key    */
annotation|@
name|Private
DECL|method|activateNextMasterKey ()
specifier|public
name|void
name|activateNextMasterKey
parameter_list|()
block|{
name|super
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Activating next master key with id: "
operator|+
name|this
operator|.
name|nextMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentMasterKey
operator|=
name|this
operator|.
name|nextMasterKey
expr_stmt|;
name|this
operator|.
name|nextMasterKey
operator|=
literal|null
expr_stmt|;
name|clearApplicationNMTokenKeys
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clearNodeSetForAttempt (ApplicationAttemptId attemptId)
specifier|public
name|void
name|clearNodeSetForAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|super
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|nodeSet
init|=
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeSet
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Clear node set for "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
name|nodeSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clearApplicationNMTokenKeys ()
specifier|private
name|void
name|clearApplicationNMTokenKeys
parameter_list|()
block|{
comment|// We should clear all node entries from this set.
comment|// TODO : Once we have per node master key then it will change to only
comment|// remove specific node from it.
name|Iterator
argument_list|<
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|nodeSetI
init|=
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeSetI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nodeSetI
operator|.
name|next
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|rollMasterKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|MasterKeyRoller
argument_list|()
argument_list|,
name|rollingInterval
argument_list|,
name|rollingInterval
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
DECL|class|MasterKeyRoller
specifier|private
class|class
name|MasterKeyRoller
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|rollMasterKey
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NextKeyActivator
specifier|private
class|class
name|NextKeyActivator
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Activation will happen after an absolute time interval. It will be good
comment|// if we can force activation after an NM updates and acknowledges a
comment|// roll-over. But that is only possible when we move to per-NM keys. TODO:
name|activateNextMasterKey
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createAndGetNMToken (String applicationSubmitter, ApplicationAttemptId appAttemptId, Container container)
specifier|public
name|NMToken
name|createAndGetNMToken
parameter_list|(
name|String
name|applicationSubmitter
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|nodeSet
init|=
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|NMToken
name|nmToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodeSet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|nodeSet
operator|.
name|contains
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending NMToken for nodeId : "
operator|+
name|container
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" for container : "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|createNMToken
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|applicationSubmitter
argument_list|)
decl_stmt|;
name|nmToken
operator|=
name|NMToken
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|nodeSet
operator|.
name|add
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nmToken
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|registerApplicationAttempt (ApplicationAttemptId appAttemptId)
specifier|public
name|void
name|registerApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|isApplicationAttemptRegistered ( ApplicationAttemptId appAttemptId)
specifier|public
name|boolean
name|isApplicationAttemptRegistered
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|containsKey
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|isApplicationAttemptNMTokenPresent ( ApplicationAttemptId appAttemptId, NodeId nodeId)
specifier|public
name|boolean
name|isApplicationAttemptNMTokenPresent
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|nodes
init|=
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
operator|&&
name|nodes
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unregisterApplicationAttempt (ApplicationAttemptId appAttemptId)
specifier|public
name|void
name|unregisterApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|remove
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This is to be called when NodeManager reconnects or goes down. This will    * remove if NMTokens if present for any running application from cache.    * @param nodeId    */
DECL|method|removeNodeKey (NodeId nodeId)
specifier|public
name|void
name|removeNodeKey
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|appNodeKeySetIterator
init|=
name|this
operator|.
name|appAttemptToNodeKeyMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|appNodeKeySetIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|appNodeKeySetIterator
operator|.
name|next
argument_list|()
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

