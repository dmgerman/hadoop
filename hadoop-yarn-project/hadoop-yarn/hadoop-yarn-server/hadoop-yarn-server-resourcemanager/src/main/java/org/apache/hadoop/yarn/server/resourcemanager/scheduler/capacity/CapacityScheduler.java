begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRejectedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|UpdatedContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|PreemptableResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerExpiredSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
annotation|@
name|Evolving
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|CapacityScheduler
specifier|public
class|class
name|CapacityScheduler
implements|implements
name|PreemptableResourceScheduler
implements|,
name|CapacitySchedulerContext
implements|,
name|Configurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|root
specifier|private
name|CSQueue
name|root
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|queueComparator
specifier|static
specifier|final
name|Comparator
argument_list|<
name|CSQueue
argument_list|>
name|queueComparator
init|=
operator|new
name|Comparator
argument_list|<
name|CSQueue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CSQueue
name|q1
parameter_list|,
name|CSQueue
name|q2
parameter_list|)
block|{
if|if
condition|(
name|q1
operator|.
name|getUsedCapacity
argument_list|()
operator|<
name|q2
operator|.
name|getUsedCapacity
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|q1
operator|.
name|getUsedCapacity
argument_list|()
operator|>
name|q2
operator|.
name|getUsedCapacity
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|q1
operator|.
name|getQueuePath
argument_list|()
operator|.
name|compareTo
argument_list|(
name|q2
operator|.
name|getQueuePath
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|applicationComparator
specifier|static
specifier|final
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|applicationComparator
init|=
operator|new
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FiCaSchedulerApp
name|a1
parameter_list|,
name|FiCaSchedulerApp
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|yarnConf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|validateConf (Configuration conf)
specifier|private
name|void
name|validateConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// validate scheduler memory allocation setting
name|int
name|minMem
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|int
name|maxMem
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
if|if
condition|(
name|minMem
operator|<=
literal|0
operator|||
name|minMem
operator|>
name|maxMem
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid resource scheduler memory"
operator|+
literal|" allocation configuration"
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|minMem
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|maxMem
operator|+
literal|", min and max should be greater than 0"
operator|+
literal|", max should be no smaller than min."
argument_list|)
throw|;
block|}
comment|// validate scheduler vcores allocation setting
name|int
name|minVcores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|int
name|maxVcores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
if|if
condition|(
name|minVcores
operator|<=
literal|0
operator|||
name|minVcores
operator|>
name|maxVcores
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid resource scheduler vcores"
operator|+
literal|" allocation configuration"
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
operator|+
literal|"="
operator|+
name|minVcores
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
operator|+
literal|"="
operator|+
name|maxVcores
operator|+
literal|", min and max should be greater than 0"
operator|+
literal|", max should be no smaller than min."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|yarnConf
return|;
block|}
DECL|field|conf
specifier|private
name|CapacitySchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|yarnConf
specifier|private
name|Configuration
name|yarnConf
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|queues
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nodes
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|FiCaSchedulerNode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|clusterResource
specifier|private
name|Resource
name|clusterResource
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numNodeManagers
specifier|private
name|int
name|numNodeManagers
init|=
literal|0
decl_stmt|;
DECL|field|minimumAllocation
specifier|private
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|maximumAllocation
specifier|private
name|Resource
name|maximumAllocation
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|applications
specifier|protected
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
name|applications
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
DECL|field|calculator
specifier|private
name|ResourceCalculator
name|calculator
decl_stmt|;
DECL|field|usePortForNodeName
specifier|private
name|boolean
name|usePortForNodeName
decl_stmt|;
DECL|method|CapacityScheduler ()
specifier|public
name|CapacityScheduler
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|getRootQueueMetrics ()
specifier|public
name|QueueMetrics
name|getRootQueueMetrics
parameter_list|()
block|{
return|return
name|root
operator|.
name|getMetrics
argument_list|()
return|;
block|}
DECL|method|getRootQueue ()
specifier|public
name|CSQueue
name|getRootQueue
parameter_list|()
block|{
return|return
name|root
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|CapacitySchedulerConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerTokenSecretManager ()
specifier|public
name|RMContainerTokenSecretManager
name|getContainerTokenSecretManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimumResourceCapability ()
specifier|public
name|Resource
name|getMinimumResourceCapability
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability ()
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|()
block|{
return|return
name|maximumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationComparator ()
specifier|public
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|getApplicationComparator
parameter_list|()
block|{
return|return
name|applicationComparator
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceCalculator ()
specifier|public
name|ResourceCalculator
name|getResourceCalculator
parameter_list|()
block|{
return|return
name|calculator
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueComparator ()
specifier|public
name|Comparator
argument_list|<
name|CSQueue
argument_list|>
name|getQueueComparator
parameter_list|()
block|{
return|return
name|queueComparator
return|;
block|}
annotation|@
name|Override
DECL|method|getNumClusterNodes ()
specifier|public
specifier|synchronized
name|int
name|getNumClusterNodes
parameter_list|()
block|{
return|return
name|numNodeManagers
return|;
block|}
annotation|@
name|Override
DECL|method|getRMContext ()
specifier|public
name|RMContext
name|getRMContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmContext
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterResources ()
specifier|public
name|Resource
name|getClusterResources
parameter_list|()
block|{
return|return
name|clusterResource
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
DECL|method|reinitialize (Configuration conf, RMContext rmContext)
name|reinitialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|validateConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|minimumAllocation
operator|=
name|this
operator|.
name|conf
operator|.
name|getMinimumAllocation
argument_list|()
expr_stmt|;
name|this
operator|.
name|maximumAllocation
operator|=
name|this
operator|.
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
expr_stmt|;
name|this
operator|.
name|calculator
operator|=
name|this
operator|.
name|conf
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
name|this
operator|.
name|usePortForNodeName
operator|=
name|this
operator|.
name|conf
operator|.
name|getUsePortForNodeName
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|initializeQueues
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized CapacityScheduler with "
operator|+
literal|"calculator="
operator|+
name|getResourceCalculator
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|", "
operator|+
literal|"minimumAllocation=<"
operator|+
name|getMinimumResourceCapability
argument_list|()
operator|+
literal|">, "
operator|+
literal|"maximumAllocation=<"
operator|+
name|getMaximumResourceCapability
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CapacitySchedulerConfiguration
name|oldConf
init|=
name|this
operator|.
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|validateConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-initializing queues..."
argument_list|)
expr_stmt|;
name|reinitializeQueues
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|oldConf
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to re-init queues"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Private
DECL|field|ROOT_QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_QUEUE
init|=
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
decl_stmt|;
DECL|class|QueueHook
specifier|static
class|class
name|QueueHook
block|{
DECL|method|hook (CSQueue queue)
specifier|public
name|CSQueue
name|hook
parameter_list|(
name|CSQueue
name|queue
parameter_list|)
block|{
return|return
name|queue
return|;
block|}
block|}
DECL|field|noop
specifier|private
specifier|static
specifier|final
name|QueueHook
name|noop
init|=
operator|new
name|QueueHook
argument_list|()
decl_stmt|;
annotation|@
name|Lock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
DECL|method|initializeQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|initializeQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|root
operator|=
name|parseQueue
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|noop
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized root queue "
operator|+
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Lock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
DECL|method|reinitializeQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|reinitializeQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Parse new queues
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|newQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|newRoot
init|=
name|parseQueue
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|newQueues
argument_list|,
name|queues
argument_list|,
name|noop
argument_list|)
decl_stmt|;
comment|// Ensure all existing queues are still present
name|validateExistingQueues
argument_list|(
name|queues
argument_list|,
name|newQueues
argument_list|)
expr_stmt|;
comment|// Add new queues
name|addNewQueues
argument_list|(
name|queues
argument_list|,
name|newQueues
argument_list|)
expr_stmt|;
comment|// Re-configure queues
name|root
operator|.
name|reinitialize
argument_list|(
name|newRoot
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure all existing queues are present. Queues cannot be deleted    * @param queues existing queues    * @param newQueues new queues    */
annotation|@
name|Lock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
DECL|method|validateExistingQueues ( Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)
specifier|private
name|void
name|validateExistingQueues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|newQueues
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|queue
range|:
name|queues
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newQueues
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|queue
operator|+
literal|" cannot be found during refresh!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Add the new queues (only) to our list of queues...    * ... be careful, do not overwrite existing queues.    * @param queues    * @param newQueues    */
annotation|@
name|Lock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
DECL|method|addNewQueues ( Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)
specifier|private
name|void
name|addNewQueues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|newQueues
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|e
range|:
name|newQueues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|queueName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|queues
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|queues
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Lock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
DECL|method|parseQueue ( CapacitySchedulerContext csContext, CapacitySchedulerConfiguration conf, CSQueue parent, String queueName, Map<String, CSQueue> queues, Map<String, CSQueue> oldQueues, QueueHook hook)
specifier|static
name|CSQueue
name|parseQueue
parameter_list|(
name|CapacitySchedulerContext
name|csContext
parameter_list|,
name|CapacitySchedulerConfiguration
name|conf
parameter_list|,
name|CSQueue
name|parent
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|oldQueues
parameter_list|,
name|QueueHook
name|hook
parameter_list|)
throws|throws
name|IOException
block|{
name|CSQueue
name|queue
decl_stmt|;
name|String
index|[]
name|childQueueNames
init|=
name|conf
operator|.
name|getQueues
argument_list|(
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
name|queueName
else|:
operator|(
name|parent
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|"."
operator|+
name|queueName
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childQueueNames
operator|==
literal|null
operator|||
name|childQueueNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|parent
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Queue configuration missing child queue names for "
operator|+
name|queueName
argument_list|)
throw|;
block|}
name|queue
operator|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|oldQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Used only for unit tests
name|queue
operator|=
name|hook
operator|.
name|hook
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParentQueue
name|parentQueue
init|=
operator|new
name|ParentQueue
argument_list|(
name|csContext
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|oldQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Used only for unit tests
name|queue
operator|=
name|hook
operator|.
name|hook
argument_list|(
name|parentQueue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|childQueues
init|=
operator|new
name|ArrayList
argument_list|<
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|childQueueName
range|:
name|childQueueNames
control|)
block|{
name|CSQueue
name|childQueue
init|=
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|conf
argument_list|,
name|queue
argument_list|,
name|childQueueName
argument_list|,
name|queues
argument_list|,
name|oldQueues
argument_list|,
name|hook
argument_list|)
decl_stmt|;
name|childQueues
operator|.
name|add
argument_list|(
name|childQueue
argument_list|)
expr_stmt|;
block|}
name|parentQueue
operator|.
name|setChildQueues
argument_list|(
name|childQueues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queue
operator|instanceof
name|LeafQueue
operator|==
literal|true
operator|&&
name|queues
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
operator|&&
name|queues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
operator|instanceof
name|LeafQueue
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Two leaf queues were named "
operator|+
name|queueName
operator|+
literal|". Leaf queue names must be distinct"
argument_list|)
throw|;
block|}
name|queues
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized queue: "
operator|+
name|queue
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
DECL|method|getQueue (String queueName)
specifier|synchronized
name|CSQueue
name|getQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
return|;
block|}
DECL|method|addApplication (ApplicationId applicationId, String queueName, String user)
specifier|private
specifier|synchronized
name|void
name|addApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|user
parameter_list|)
block|{
comment|// santiy checks.
name|CSQueue
name|queue
init|=
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" submitted by user "
operator|+
name|user
operator|+
literal|" to unknown queue: "
operator|+
name|queueName
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRejectedEvent
argument_list|(
name|applicationId
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|queue
operator|instanceof
name|LeafQueue
operator|)
condition|)
block|{
name|String
name|message
init|=
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" submitted by user "
operator|+
name|user
operator|+
literal|" to non-leaf queue: "
operator|+
name|queueName
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRejectedEvent
argument_list|(
name|applicationId
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Submit to the queue
try|try
block|{
name|queue
operator|.
name|submitApplication
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to submit application "
operator|+
name|applicationId
operator|+
literal|" to queue "
operator|+
name|queueName
operator|+
literal|" from user "
operator|+
name|user
argument_list|,
name|ace
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRejectedEvent
argument_list|(
name|applicationId
argument_list|,
name|ace
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|SchedulerApplication
name|application
init|=
operator|new
name|SchedulerApplication
argument_list|(
name|queue
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|applications
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Accepted application "
operator|+
name|applicationId
operator|+
literal|" from user: "
operator|+
name|user
operator|+
literal|", in queue: "
operator|+
name|queueName
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addApplicationAttempt ( ApplicationAttemptId applicationAttemptId, boolean transferStateFromPreviousAttempt)
specifier|private
specifier|synchronized
name|void
name|addApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|boolean
name|transferStateFromPreviousAttempt
parameter_list|)
block|{
name|SchedulerApplication
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|CSQueue
name|queue
init|=
operator|(
name|CSQueue
operator|)
name|application
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|attempt
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|applicationAttemptId
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|transferStateFromPreviousAttempt
condition|)
block|{
name|attempt
operator|.
name|transferStateFromPreviousAttempt
argument_list|(
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|setCurrentAppAttempt
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|attempt
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added Application Attempt "
operator|+
name|applicationAttemptId
operator|+
literal|" to scheduler from user "
operator|+
name|application
operator|.
name|getUser
argument_list|()
operator|+
literal|" in queue "
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doneApplication (ApplicationId applicationId, RMAppState finalState)
specifier|private
specifier|synchronized
name|void
name|doneApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|RMAppState
name|finalState
parameter_list|)
block|{
name|SchedulerApplication
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
comment|// The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,
comment|// ignore it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't find application "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
return|return;
block|}
name|CSQueue
name|queue
init|=
operator|(
name|CSQueue
operator|)
name|application
operator|.
name|getQueue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|queue
operator|instanceof
name|LeafQueue
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot finish application "
operator|+
literal|"from non-leaf queue: "
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|finishApplication
argument_list|(
name|applicationId
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|stop
argument_list|(
name|finalState
argument_list|)
expr_stmt|;
name|applications
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
DECL|method|doneApplicationAttempt ( ApplicationAttemptId applicationAttemptId, RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)
specifier|private
specifier|synchronized
name|void
name|doneApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|,
name|boolean
name|keepContainers
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application Attempt "
operator|+
name|applicationAttemptId
operator|+
literal|" is done."
operator|+
literal|" finalState="
operator|+
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
name|SchedulerApplication
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
operator|||
name|attempt
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|applicationAttemptId
operator|+
literal|" has completed!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Release all the allocated, acquired, running containers
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|attempt
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|keepContainers
operator|&&
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
comment|// do not kill the running container in the case of work-preserving AM
comment|// restart.
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip killing "
operator|+
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|COMPLETED_APPLICATION
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Release all reserved containers
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|attempt
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|"Application Complete"
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Clean up pending requests, metrics etc.
name|attempt
operator|.
name|stop
argument_list|(
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
comment|// Inform the queue
name|String
name|queueName
init|=
name|attempt
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|queue
operator|instanceof
name|LeafQueue
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot finish application "
operator|+
literal|"from non-leaf queue: "
operator|+
name|queueName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|attempt
argument_list|,
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_ALLOCATION
specifier|private
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|allocate (ApplicationAttemptId applicationAttemptId, List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling allocate on removed "
operator|+
literal|"or non existant application "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
return|return
name|EMPTY_ALLOCATION
return|;
block|}
comment|// Sanity check
name|SchedulerUtils
operator|.
name|normalizeRequests
argument_list|(
name|ask
argument_list|,
name|getResourceCalculator
argument_list|()
argument_list|,
name|getClusterResources
argument_list|()
argument_list|,
name|getMinimumResourceCapability
argument_list|()
argument_list|,
name|maximumAllocation
argument_list|)
expr_stmt|;
comment|// Release containers
for|for
control|(
name|ContainerId
name|releasedContainerId
range|:
name|release
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|releasedContainerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"CapacityScheduler"
argument_list|,
literal|"Trying to release container not owned by app or with invalid id"
argument_list|,
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|releasedContainerId
argument_list|)
expr_stmt|;
block|}
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|releasedContainerId
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|application
init|)
block|{
comment|// make sure we aren't stopping/removing the application
comment|// when the allocate comes in
if|if
condition|(
name|application
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling allocate on a stopped "
operator|+
literal|"application "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
return|return
name|EMPTY_ALLOCATION
return|;
block|}
if|if
condition|(
operator|!
name|ask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: pre-update"
operator|+
literal|" applicationAttemptId="
operator|+
name|applicationAttemptId
operator|+
literal|" application="
operator|+
name|application
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
comment|// Update application requests
name|application
operator|.
name|updateResourceRequests
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: post-update"
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate:"
operator|+
literal|" applicationAttemptId="
operator|+
name|applicationAttemptId
operator|+
literal|" #ask="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
return|return
name|application
operator|.
name|getAllocation
argument_list|(
name|getResourceCalculator
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|getMinimumResourceCapability
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|getQueueInfo (String queueName, boolean includeChildQueues, boolean recursive)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|CSQueue
name|queue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|queue
operator|=
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown queue: "
operator|+
name|queueName
argument_list|)
throw|;
block|}
return|return
name|queue
operator|.
name|getQueueInfo
argument_list|(
name|includeChildQueues
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|getQueueUserAclInfo ()
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|()
block|{
name|UserGroupInformation
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// should never happen
return|return
operator|new
name|ArrayList
argument_list|<
name|QueueUserACLInfo
argument_list|>
argument_list|()
return|;
block|}
return|return
name|root
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
return|;
block|}
DECL|method|nodeUpdate (RMNode nm)
specifier|private
specifier|synchronized
name|void
name|nodeUpdate
parameter_list|(
name|RMNode
name|nm
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"nodeUpdate: "
operator|+
name|nm
operator|+
literal|" clusterResources: "
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update resource if any change
name|SchedulerUtils
operator|.
name|updateResourceIfChanged
argument_list|(
name|node
argument_list|,
name|nm
argument_list|,
name|clusterResource
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|containerInfoList
init|=
name|nm
operator|.
name|pullContainerUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdatedContainerInfo
name|containerInfo
range|:
name|containerInfoList
control|)
block|{
name|newlyLaunchedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getNewlyLaunchedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|completedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Processing the newly launched containers
for|for
control|(
name|ContainerStatus
name|launchedContainer
range|:
name|newlyLaunchedContainers
control|)
block|{
name|containerLaunchedOnNode
argument_list|(
name|launchedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Process completed containers
for|for
control|(
name|ContainerStatus
name|completedContainer
range|:
name|completedContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|completedContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container FINISHED: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|completedContainer
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|completedContainer
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
comment|// Now node data structures are upto date and ready for scheduling.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node being looked for scheduling "
operator|+
name|nm
operator|+
literal|" availableResource: "
operator|+
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Assign new containers...
comment|// 1. Check for reserved applications
comment|// 2. Schedule if there are no reservations
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|FiCaSchedulerApp
name|reservedApplication
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|reservedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Try to fulfill the reservation
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to fulfill reservation for application "
operator|+
name|reservedApplication
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|nm
argument_list|)
expr_stmt|;
name|LeafQueue
name|queue
init|=
operator|(
operator|(
name|LeafQueue
operator|)
name|reservedApplication
operator|.
name|getQueue
argument_list|()
operator|)
decl_stmt|;
name|CSAssignment
name|assignment
init|=
name|queue
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|RMContainer
name|excessReservation
init|=
name|assignment
operator|.
name|getExcessReservation
argument_list|()
decl_stmt|;
if|if
condition|(
name|excessReservation
operator|!=
literal|null
condition|)
block|{
name|Container
name|container
init|=
name|excessReservation
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|queue
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|assignment
operator|.
name|getApplication
argument_list|()
argument_list|,
name|node
argument_list|,
name|excessReservation
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|UNRESERVED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Try to schedule more if there are no reservations to fulfill
if|if
condition|(
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping scheduling since node "
operator|+
name|nm
operator|+
literal|" is reserved by application "
operator|+
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|containerLaunchedOnNode (ContainerId containerId, FiCaSchedulerNode node)
specifier|private
name|void
name|containerLaunchedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|)
block|{
comment|// Get the application for the finished container
name|FiCaSchedulerApp
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" launched container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|application
operator|.
name|containerLaunchedOnNode
argument_list|(
name|containerId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_ADDED
case|:
block|{
name|NodeAddedSchedulerEvent
name|nodeAddedEvent
init|=
operator|(
name|NodeAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addNode
argument_list|(
name|nodeAddedEvent
operator|.
name|getAddedRMNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NODE_REMOVED
case|:
block|{
name|NodeRemovedSchedulerEvent
name|nodeRemovedEvent
init|=
operator|(
name|NodeRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeNode
argument_list|(
name|nodeRemovedEvent
operator|.
name|getRemovedRMNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NODE_UPDATE
case|:
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdatedEvent
init|=
operator|(
name|NodeUpdateSchedulerEvent
operator|)
name|event
decl_stmt|;
name|nodeUpdate
argument_list|(
name|nodeUpdatedEvent
operator|.
name|getRMNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_ADDED
case|:
block|{
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|(
name|AppAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addApplication
argument_list|(
name|appAddedEvent
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getQueue
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_REMOVED
case|:
block|{
name|AppRemovedSchedulerEvent
name|appRemovedEvent
init|=
operator|(
name|AppRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|doneApplication
argument_list|(
name|appRemovedEvent
operator|.
name|getApplicationID
argument_list|()
argument_list|,
name|appRemovedEvent
operator|.
name|getFinalState
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_ATTEMPT_ADDED
case|:
block|{
name|AppAttemptAddedSchedulerEvent
name|appAttemptAddedEvent
init|=
operator|(
name|AppAttemptAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addApplicationAttempt
argument_list|(
name|appAttemptAddedEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttemptAddedEvent
operator|.
name|getTransferStateFromPreviousAttempt
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_ATTEMPT_REMOVED
case|:
block|{
name|AppAttemptRemovedSchedulerEvent
name|appAttemptRemovedEvent
init|=
operator|(
name|AppAttemptRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|doneApplicationAttempt
argument_list|(
name|appAttemptRemovedEvent
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|,
name|appAttemptRemovedEvent
operator|.
name|getFinalAttemptState
argument_list|()
argument_list|,
name|appAttemptRemovedEvent
operator|.
name|getKeepContainersAcrossAppAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CONTAINER_EXPIRED
case|:
block|{
name|ContainerExpiredSchedulerEvent
name|containerExpiredEvent
init|=
operator|(
name|ContainerExpiredSchedulerEvent
operator|)
name|event
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|containerExpiredEvent
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|completedContainer
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerId
argument_list|,
name|SchedulerUtils
operator|.
name|EXPIRED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid eventtype "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|". Ignoring!"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addNode (RMNode nodeManager)
specifier|private
specifier|synchronized
name|void
name|addNode
parameter_list|(
name|RMNode
name|nodeManager
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|.
name|put
argument_list|(
name|nodeManager
operator|.
name|getNodeID
argument_list|()
argument_list|,
operator|new
name|FiCaSchedulerNode
argument_list|(
name|nodeManager
argument_list|,
name|usePortForNodeName
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterResource
argument_list|,
name|nodeManager
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|updateClusterResource
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
operator|++
name|numNodeManagers
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added node "
operator|+
name|nodeManager
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" clusterResource: "
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNode (RMNode nodeInfo)
specifier|private
specifier|synchronized
name|void
name|removeNode
parameter_list|(
name|RMNode
name|nodeInfo
parameter_list|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|this
operator|.
name|nodes
operator|.
name|get
argument_list|(
name|nodeInfo
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|clusterResource
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|updateClusterResource
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
operator|--
name|numNodeManagers
expr_stmt|;
comment|// Remove running containers
name|List
argument_list|<
name|RMContainer
argument_list|>
name|runningContainers
init|=
name|node
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|runningContainers
control|)
block|{
name|completedContainer
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Remove reservations, if any
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|completedContainer
argument_list|(
name|reservedContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|reservedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodes
operator|.
name|remove
argument_list|(
name|nodeInfo
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed node "
operator|+
name|nodeInfo
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" clusterResource: "
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Lock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
DECL|method|completedContainer (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|private
specifier|synchronized
name|void
name|completedContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Null container completed..."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// Get the application for the finished container
name|FiCaSchedulerApp
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|container
operator|+
literal|" of"
operator|+
literal|" unknown application "
operator|+
name|appId
operator|+
literal|" completed with event "
operator|+
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get the node on which the container was allocated
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Inform the queue
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|application
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application attempt "
operator|+
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" released container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|node
operator|+
literal|" with event: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|getApplicationAttempt ( ApplicationAttemptId applicationAttemptId)
name|FiCaSchedulerApp
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|SchedulerApplication
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|FiCaSchedulerApp
operator|)
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerAppInfo ( ApplicationAttemptId applicationAttemptId)
specifier|public
name|SchedulerAppReport
name|getSchedulerAppInfo
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|FiCaSchedulerApp
name|app
init|=
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
return|return
name|app
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerAppReport
argument_list|(
name|app
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAppResourceUsageReport ( ApplicationAttemptId applicationAttemptId)
specifier|public
name|ApplicationResourceUsageReport
name|getAppResourceUsageReport
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|FiCaSchedulerApp
name|app
init|=
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
return|return
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getResourceUsageReport
argument_list|()
return|;
block|}
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|getNode (NodeId nodeId)
name|FiCaSchedulerNode
name|getNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRMContainer (ContainerId containerId)
specifier|public
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|FiCaSchedulerApp
name|attempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
operator|(
name|attempt
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|attempt
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentAttemptForContainer ( ContainerId containerId)
specifier|public
name|FiCaSchedulerApp
name|getCurrentAttemptForContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|SchedulerApplication
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|FiCaSchedulerApp
operator|)
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOT IMPLEMENTED
block|}
annotation|@
name|Override
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerNodeReport
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|dropContainerReservation (RMContainer container)
specifier|public
name|void
name|dropContainerReservation
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DROP_RESERVATION:"
operator|+
name|container
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|completedContainer
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|UNRESERVED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preemptContainer (ApplicationAttemptId aid, RMContainer cont)
specifier|public
name|void
name|preemptContainer
parameter_list|(
name|ApplicationAttemptId
name|aid
parameter_list|,
name|RMContainer
name|cont
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PREEMPT_CONTAINER: application:"
operator|+
name|aid
operator|.
name|toString
argument_list|()
operator|+
literal|" container: "
operator|+
name|cont
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FiCaSchedulerApp
name|app
init|=
name|getApplicationAttempt
argument_list|(
name|aid
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|addPreemptContainer
argument_list|(
name|cont
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|killContainer (RMContainer cont)
specifier|public
name|void
name|killContainer
parameter_list|(
name|RMContainer
name|cont
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"KILL_CONTAINER: container"
operator|+
name|cont
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|completedContainer
argument_list|(
name|cont
argument_list|,
name|SchedulerUtils
operator|.
name|createPreemptedContainerStatus
argument_list|(
name|cont
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|"Container being forcibly preempted:"
operator|+
name|cont
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, QueueACL acl, String queueName)
specifier|public
specifier|synchronized
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|CSQueue
name|queue
init|=
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ACL not found for queue access-type "
operator|+
name|acl
operator|+
literal|" for queue "
operator|+
name|queueName
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
name|queue
operator|.
name|hasAccess
argument_list|(
name|acl
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAppsInQueue (String queueName)
specifier|public
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|getAppsInQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|CSQueue
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|collectSchedulerApplications
argument_list|(
name|apps
argument_list|)
expr_stmt|;
return|return
name|apps
return|;
block|}
block|}
end_class

end_unit

