begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_comment
comment|/**  * Utility class for the Fair Scheduler.  */
end_comment

begin_class
DECL|class|FairSchedulerUtilities
specifier|public
specifier|final
class|class
name|FairSchedulerUtilities
block|{
comment|/**    * Table copied from Google Guava v19:    * com/google/common/base/CharMatcher.java    *<p>    * Licensed under the Apache License Version 2.0.    */
DECL|field|WHITESPACE_TABLE
specifier|static
specifier|final
name|String
name|WHITESPACE_TABLE
init|=
literal|"\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000"
operator|+
literal|"\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680"
operator|+
literal|"\u0009\u0020\u2006\u2001\u202F\u00A0\u000C\u2009"
operator|+
literal|"\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000"
decl_stmt|;
DECL|method|FairSchedulerUtilities ()
specifier|private
name|FairSchedulerUtilities
parameter_list|()
block|{
comment|// private constructor because this is a utility class.
block|}
DECL|method|isWhitespace (char c)
specifier|private
specifier|static
name|boolean
name|isWhitespace
parameter_list|(
name|char
name|c
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|WHITESPACE_TABLE
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|WHITESPACE_TABLE
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|c
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|trimQueueName (String name)
specifier|public
specifier|static
name|String
name|trimQueueName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|start
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|name
operator|.
name|length
argument_list|()
operator|&&
name|isWhitespace
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
argument_list|)
operator|&&
name|start
operator|<
name|name
operator|.
name|length
argument_list|()
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
name|int
name|end
init|=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|end
operator|>=
literal|0
operator|&&
name|isWhitespace
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|end
argument_list|)
argument_list|)
operator|&&
name|end
operator|>
name|start
condition|)
block|{
name|end
operator|--
expr_stmt|;
block|}
return|return
name|name
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

