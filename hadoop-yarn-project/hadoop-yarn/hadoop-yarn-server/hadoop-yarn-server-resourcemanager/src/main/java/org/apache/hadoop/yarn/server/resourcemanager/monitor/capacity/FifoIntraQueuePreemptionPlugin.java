begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|IntraQueueCandidatesSelector
operator|.
name|TAPriorityComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * FifoIntraQueuePreemptionPlugin will handle intra-queue preemption for  * priority and user-limit.  */
end_comment

begin_class
DECL|class|FifoIntraQueuePreemptionPlugin
specifier|public
class|class
name|FifoIntraQueuePreemptionPlugin
implements|implements
name|IntraQueuePreemptionComputePlugin
block|{
DECL|field|context
specifier|protected
specifier|final
name|CapacitySchedulerPreemptionContext
name|context
decl_stmt|;
DECL|field|rc
specifier|protected
specifier|final
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FifoIntraQueuePreemptionPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FifoIntraQueuePreemptionPlugin (ResourceCalculator rc, CapacitySchedulerPreemptionContext preemptionContext)
specifier|public
name|FifoIntraQueuePreemptionPlugin
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|preemptionContext
expr_stmt|;
name|this
operator|.
name|rc
operator|=
name|rc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourceDemandFromAppsPerQueue ( String queueName, String partition)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getResourceDemandFromAppsPerQueue
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TempQueuePerPartition
name|tq
init|=
name|context
operator|.
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TempAppPerPartition
argument_list|>
name|appsOrderedByPriority
init|=
name|tq
operator|.
name|getApps
argument_list|()
decl_stmt|;
name|Resource
name|actualPreemptNeeded
init|=
name|resToObtainByPartition
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
comment|// Updating pending resource per-partition level.
if|if
condition|(
name|actualPreemptNeeded
operator|==
literal|null
condition|)
block|{
name|actualPreemptNeeded
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|resToObtainByPartition
operator|.
name|put
argument_list|(
name|partition
argument_list|,
name|actualPreemptNeeded
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TempAppPerPartition
name|a1
range|:
name|appsOrderedByPriority
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|actualPreemptNeeded
argument_list|,
name|a1
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Selected to preempt "
operator|+
name|actualPreemptNeeded
operator|+
literal|" resource from partition:"
operator|+
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|resToObtainByPartition
return|;
block|}
annotation|@
name|Override
DECL|method|computeAppsIdealAllocation (Resource clusterResource, Resource partitionBasedResource, TempQueuePerPartition tq, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource totalPreemptedResourceAllowed, Resource queueReassignableResource, float maxAllowablePreemptLimit)
specifier|public
name|void
name|computeAppsIdealAllocation
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|partitionBasedResource
parameter_list|,
name|TempQueuePerPartition
name|tq
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|totalPreemptedResourceAllowed
parameter_list|,
name|Resource
name|queueReassignableResource
parameter_list|,
name|float
name|maxAllowablePreemptLimit
parameter_list|)
block|{
comment|// 1. AM used resource can be considered as a frozen resource for now.
comment|// Hence such containers in a queue can be omitted from the preemption
comment|// calculation.
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|perUserAMUsed
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Resource
name|amUsed
init|=
name|calculateUsedAMResourcesPerQueue
argument_list|(
name|tq
operator|.
name|partition
argument_list|,
name|tq
operator|.
name|leafQueue
argument_list|,
name|perUserAMUsed
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|queueReassignableResource
argument_list|,
name|amUsed
argument_list|)
expr_stmt|;
comment|// 2. tq.leafQueue will not be null as we validated it in caller side
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
init|=
name|tq
operator|.
name|leafQueue
operator|.
name|getAllApplications
argument_list|()
decl_stmt|;
comment|// We do not need preemption for a single app
if|if
condition|(
name|apps
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
block|}
comment|// 3. Create all tempApps for internal calculation and return a list from
comment|// high priority to low priority order.
name|TAPriorityComparator
name|taComparator
init|=
operator|new
name|TAPriorityComparator
argument_list|()
decl_stmt|;
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedByPriority
init|=
name|createTempAppForResCalculation
argument_list|(
name|tq
operator|.
name|partition
argument_list|,
name|apps
argument_list|,
name|taComparator
argument_list|)
decl_stmt|;
comment|// 4. Calculate idealAssigned per app by checking based on queue's
comment|// unallocated resource.Also return apps arranged from lower priority to
comment|// higher priority.
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
init|=
name|calculateIdealAssignedResourcePerApp
argument_list|(
name|clusterResource
argument_list|,
name|partitionBasedResource
argument_list|,
name|tq
argument_list|,
name|selectedCandidates
argument_list|,
name|queueReassignableResource
argument_list|,
name|orderedByPriority
argument_list|,
name|perUserAMUsed
argument_list|)
decl_stmt|;
comment|// 5. A configurable limit that could define an ideal allowable preemption
comment|// limit. Based on current queue's capacity,defined how much % could become
comment|// preemptable.
name|Resource
name|maxIntraQueuePreemptable
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|tq
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|maxAllowablePreemptLimit
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|maxIntraQueuePreemptable
argument_list|,
name|tq
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|maxIntraQueuePreemptable
argument_list|,
name|tq
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxIntraQueuePreemptable
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// 6. We have two configurations here, one is intra queue limit and second
comment|// one is per-round limit for any time preemption. Take a minimum of these
name|Resource
name|preemptionLimit
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|maxIntraQueuePreemptable
argument_list|,
name|totalPreemptedResourceAllowed
argument_list|)
decl_stmt|;
comment|// 7. From lowest priority app onwards, calculate toBePreempted resource
comment|// based on demand.
name|calculateToBePreemptedResourcePerApp
argument_list|(
name|clusterResource
argument_list|,
name|orderedApps
argument_list|,
name|preemptionLimit
argument_list|)
expr_stmt|;
comment|// Save all apps (low to high) to temp queue for further reference
name|tq
operator|.
name|addAllApps
argument_list|(
name|orderedApps
argument_list|)
expr_stmt|;
comment|// 8. There are chances that we may preempt for the demand from same
comment|// priority level, such cases are to be validated out.
name|validateOutSameAppPriorityFromDemand
argument_list|(
name|clusterResource
argument_list|,
operator|(
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
operator|)
name|tq
operator|.
name|getApps
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queue Name:"
operator|+
name|tq
operator|.
name|queueName
operator|+
literal|", partition:"
operator|+
name|tq
operator|.
name|partition
argument_list|)
expr_stmt|;
for|for
control|(
name|TempAppPerPartition
name|tmpApp
range|:
name|tq
operator|.
name|getApps
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tmpApp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|calculateToBePreemptedResourcePerApp (Resource clusterResource, TreeSet<TempAppPerPartition> orderedApps, Resource preemptionLimit)
specifier|private
name|void
name|calculateToBePreemptedResourcePerApp
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
parameter_list|,
name|Resource
name|preemptionLimit
parameter_list|)
block|{
for|for
control|(
name|TempAppPerPartition
name|tmpApp
range|:
name|orderedApps
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|preemptionLimit
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
operator|||
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|tmpApp
operator|.
name|getUsed
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Resource
name|preemtableFromApp
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpApp
operator|.
name|getUsed
argument_list|()
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|preemtableFromApp
argument_list|,
name|tmpApp
operator|.
name|selected
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|preemtableFromApp
argument_list|,
name|tmpApp
operator|.
name|getAMUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Calculate toBePreempted from apps as follows:
comment|// app.preemptable = min(max(app.used - app.selected - app.ideal, 0),
comment|// intra_q_preemptable)
name|tmpApp
operator|.
name|toBePreempted
operator|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|max
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|preemtableFromApp
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|,
name|preemptionLimit
argument_list|)
expr_stmt|;
name|preemptionLimit
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|preemptionLimit
argument_list|,
name|tmpApp
operator|.
name|toBePreempted
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Algorithm for calculating idealAssigned is as follows:    * For each partition:    *  Q.reassignable = Q.used - Q.selected;    *      * # By default set ideal assigned 0 for app.    * app.idealAssigned as 0    * # get user limit from scheduler.    * userLimitRes = Q.getUserLimit(userName)    *     * # initial all value to 0    * Map<String, Resource> userToAllocated    *     * # Loop from highest priority to lowest priority app to calculate ideal    * for app in sorted-by(priority) {    *  if Q.reassignable< 0:    *    break;    *        *  if (user-to-allocated.get(app.user)< userLimitRes) {    *   idealAssigned = min((userLimitRes - userToAllocated.get(app.user)),     *                      (app.used + app.pending - app.selected))    *   app.idealAssigned = min(Q.reassignable, idealAssigned)    *   userToAllocated.get(app.user) += app.idealAssigned;    *  } else {     *   // skip this app because user-limit reached    *  }    *  Q.reassignable -= app.idealAssigned    * }    *      * @param clusterResource Cluster Resource    * @param partitionBasedResource resource per partition    * @param tq TempQueue    * @param selectedCandidates Already Selected preemption candidates    * @param queueReassignableResource Resource used in a queue    * @param orderedByPriority List of running apps    * @param perUserAMUsed AM used resource    * @return List of temp apps ordered from low to high priority    */
DECL|method|calculateIdealAssignedResourcePerApp ( Resource clusterResource, Resource partitionBasedResource, TempQueuePerPartition tq, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource queueReassignableResource, PriorityQueue<TempAppPerPartition> orderedByPriority, Map<String, Resource> perUserAMUsed)
specifier|private
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|calculateIdealAssignedResourcePerApp
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|partitionBasedResource
parameter_list|,
name|TempQueuePerPartition
name|tq
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|queueReassignableResource
parameter_list|,
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedByPriority
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|perUserAMUsed
parameter_list|)
block|{
name|Comparator
argument_list|<
name|TempAppPerPartition
argument_list|>
name|reverseComp
init|=
name|Collections
operator|.
name|reverseOrder
argument_list|(
operator|new
name|TAPriorityComparator
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|reverseComp
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|userIdealAssignedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|partition
init|=
name|tq
operator|.
name|partition
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|preCalculatedUserLimit
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|orderedByPriority
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Remove app from the next highest remaining priority and process it to
comment|// calculate idealAssigned per app.
name|TempAppPerPartition
name|tmpApp
init|=
name|orderedByPriority
operator|.
name|remove
argument_list|()
decl_stmt|;
name|orderedApps
operator|.
name|add
argument_list|(
name|tmpApp
argument_list|)
expr_stmt|;
comment|// Once unallocated resource is 0, we can stop assigning ideal per app.
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|queueReassignableResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|userName
init|=
name|tmpApp
operator|.
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Resource
name|userLimitResource
init|=
name|preCalculatedUserLimit
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
comment|// Verify whether we already calculated headroom for this user.
if|if
condition|(
name|userLimitResource
operator|==
literal|null
condition|)
block|{
name|userLimitResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|tq
operator|.
name|leafQueue
operator|.
name|getUserLimitPerUser
argument_list|(
name|userName
argument_list|,
name|partitionBasedResource
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|amUsed
init|=
name|perUserAMUsed
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|amUsed
condition|)
block|{
name|amUsed
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Real AM used need not have to be considered for user-limit as well.
name|userLimitResource
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|userLimitResource
argument_list|,
name|amUsed
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Userlimit for user '"
operator|+
name|userName
operator|+
literal|"' is :"
operator|+
name|userLimitResource
operator|+
literal|", and amUsed is:"
operator|+
name|amUsed
argument_list|)
expr_stmt|;
block|}
name|preCalculatedUserLimit
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|userLimitResource
argument_list|)
expr_stmt|;
block|}
name|Resource
name|idealAssignedForUser
init|=
name|userIdealAssignedMapping
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|idealAssignedForUser
operator|==
literal|null
condition|)
block|{
name|idealAssignedForUser
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|userIdealAssignedMapping
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|idealAssignedForUser
argument_list|)
expr_stmt|;
block|}
comment|// Calculate total selected container resources from current app.
name|getAlreadySelectedPreemptionCandidatesResource
argument_list|(
name|selectedCandidates
argument_list|,
name|tmpApp
argument_list|,
name|partition
argument_list|)
expr_stmt|;
comment|// For any app, used+pending will give its idealAssigned. However it will
comment|// be tightly linked to queue's unallocated quota. So lower priority apps
comment|// idealAssigned may fall to 0 if higher priority apps demand is more.
name|Resource
name|appIdealAssigned
init|=
name|Resources
operator|.
name|add
argument_list|(
name|tmpApp
operator|.
name|getUsedDeductAM
argument_list|()
argument_list|,
name|tmpApp
operator|.
name|getPending
argument_list|()
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|appIdealAssigned
argument_list|,
name|tmpApp
operator|.
name|selected
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|idealAssignedForUser
argument_list|,
name|userLimitResource
argument_list|)
condition|)
block|{
name|appIdealAssigned
operator|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|appIdealAssigned
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|userLimitResource
argument_list|,
name|idealAssignedForUser
argument_list|)
argument_list|)
expr_stmt|;
name|tmpApp
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|queueReassignableResource
argument_list|,
name|appIdealAssigned
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|idealAssignedForUser
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
comment|// Also set how much resource is needed by this app from others.
name|Resource
name|appUsedExcludedSelected
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpApp
operator|.
name|getUsedDeductAM
argument_list|()
argument_list|,
name|tmpApp
operator|.
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|,
name|appUsedExcludedSelected
argument_list|)
condition|)
block|{
name|tmpApp
operator|.
name|setToBePreemptFromOther
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpApp
operator|.
name|idealAssigned
argument_list|,
name|appUsedExcludedSelected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|queueReassignableResource
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedApps
return|;
block|}
comment|/*    * Previous policies would have already selected few containers from an    * application. Calculate total resource from these selected containers.    */
DECL|method|getAlreadySelectedPreemptionCandidatesResource ( Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, TempAppPerPartition tmpApp, String partition)
specifier|private
name|void
name|getAlreadySelectedPreemptionCandidatesResource
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|TempAppPerPartition
name|tmpApp
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|tmpApp
operator|.
name|selected
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
name|selectedCandidates
operator|.
name|get
argument_list|(
name|tmpApp
operator|.
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containers
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|RMContainer
name|cont
range|:
name|containers
control|)
block|{
if|if
condition|(
name|partition
operator|.
name|equals
argument_list|(
name|cont
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|tmpApp
operator|.
name|selected
argument_list|,
name|cont
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createTempAppForResCalculation ( String partition, Collection<FiCaSchedulerApp> apps, TAPriorityComparator taComparator)
specifier|private
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|createTempAppForResCalculation
parameter_list|(
name|String
name|partition
parameter_list|,
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
parameter_list|,
name|TAPriorityComparator
name|taComparator
parameter_list|)
block|{
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedByPriority
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
literal|100
argument_list|,
name|taComparator
argument_list|)
decl_stmt|;
comment|// have an internal temp app structure to store intermediate data(priority)
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
name|apps
control|)
block|{
name|Resource
name|used
init|=
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|Resource
name|amUsed
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|app
operator|.
name|isWaitingForAMContainer
argument_list|()
condition|)
block|{
name|amUsed
operator|=
name|app
operator|.
name|getAMResource
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
name|Resource
name|pending
init|=
name|app
operator|.
name|getTotalPendingRequestsPerPartition
argument_list|()
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|Resource
name|reserved
init|=
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|used
operator|=
operator|(
name|used
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|used
expr_stmt|;
name|amUsed
operator|=
operator|(
name|amUsed
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|amUsed
expr_stmt|;
name|pending
operator|=
operator|(
name|pending
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|pending
expr_stmt|;
name|reserved
operator|=
operator|(
name|reserved
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|reserved
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|partitions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getNodePartitionsSet
argument_list|()
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|addAll
argument_list|(
name|app
operator|.
name|getTotalPendingRequestsPerPartition
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create TempAppPerQueue for further calculation.
name|TempAppPerPartition
name|tmpApp
init|=
operator|new
name|TempAppPerPartition
argument_list|(
name|app
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|used
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|amUsed
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|reserved
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|pending
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set ideal allocation of app as 0.
name|tmpApp
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|orderedByPriority
operator|.
name|add
argument_list|(
name|tmpApp
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedByPriority
return|;
block|}
comment|/*    * Fifo+Priority based preemption policy need not have to preempt resources at    * same priority level. Such cases will be validated out.    */
DECL|method|validateOutSameAppPriorityFromDemand (Resource cluster, TreeSet<TempAppPerPartition> appsOrderedfromLowerPriority)
specifier|public
name|void
name|validateOutSameAppPriorityFromDemand
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|appsOrderedfromLowerPriority
parameter_list|)
block|{
name|TempAppPerPartition
index|[]
name|apps
init|=
name|appsOrderedfromLowerPriority
operator|.
name|toArray
argument_list|(
operator|new
name|TempAppPerPartition
index|[
name|appsOrderedfromLowerPriority
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|apps
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|lPriority
init|=
literal|0
decl_stmt|;
name|int
name|hPriority
init|=
name|apps
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|lPriority
operator|<
name|hPriority
operator|&&
operator|!
name|apps
index|[
name|lPriority
index|]
operator|.
name|equals
argument_list|(
name|apps
index|[
name|hPriority
index|]
argument_list|)
operator|&&
name|apps
index|[
name|lPriority
index|]
operator|.
name|getPriority
argument_list|()
operator|<
name|apps
index|[
name|hPriority
index|]
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|Resource
name|toPreemptFromOther
init|=
name|apps
index|[
name|hPriority
index|]
operator|.
name|getToBePreemptFromOther
argument_list|()
decl_stmt|;
name|Resource
name|actuallyToPreempt
init|=
name|apps
index|[
name|lPriority
index|]
operator|.
name|getActuallyToBePreempted
argument_list|()
decl_stmt|;
name|Resource
name|delta
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|toBePreempted
argument_list|,
name|actuallyToPreempt
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|delta
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|toPreempt
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|toPreemptFromOther
argument_list|,
name|delta
argument_list|)
decl_stmt|;
name|apps
index|[
name|hPriority
index|]
operator|.
name|setToBePreemptFromOther
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|toPreemptFromOther
argument_list|,
name|toPreempt
argument_list|)
argument_list|)
expr_stmt|;
name|apps
index|[
name|lPriority
index|]
operator|.
name|setActuallyToBePreempted
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|actuallyToPreempt
argument_list|,
name|toPreempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|apps
index|[
name|lPriority
index|]
operator|.
name|toBePreempted
argument_list|,
name|apps
index|[
name|lPriority
index|]
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
condition|)
block|{
name|lPriority
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|apps
index|[
name|hPriority
index|]
operator|.
name|getToBePreemptFromOther
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|hPriority
operator|--
expr_stmt|;
continue|continue;
block|}
block|}
block|}
DECL|method|calculateUsedAMResourcesPerQueue (String partition, LeafQueue leafQueue, Map<String, Resource> perUserAMUsed)
specifier|private
name|Resource
name|calculateUsedAMResourcesPerQueue
parameter_list|(
name|String
name|partition
parameter_list|,
name|LeafQueue
name|leafQueue
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|perUserAMUsed
parameter_list|)
block|{
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|runningApps
init|=
name|leafQueue
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Resource
name|amUsed
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
name|runningApps
control|)
block|{
name|Resource
name|userAMResource
init|=
name|perUserAMUsed
operator|.
name|get
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|userAMResource
condition|)
block|{
name|userAMResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|perUserAMUsed
operator|.
name|put
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|userAMResource
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|userAMResource
argument_list|,
name|app
operator|.
name|getAMResource
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|amUsed
argument_list|,
name|app
operator|.
name|getAMResource
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|amUsed
return|;
block|}
block|}
end_class

end_unit

