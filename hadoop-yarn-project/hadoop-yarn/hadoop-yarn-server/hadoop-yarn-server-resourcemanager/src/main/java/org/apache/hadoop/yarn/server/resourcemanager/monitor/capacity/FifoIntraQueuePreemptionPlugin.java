begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|IntraQueueCandidatesSelector
operator|.
name|TAFairOrderingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|IntraQueueCandidatesSelector
operator|.
name|TAPriorityComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|IntraQueuePreemptionOrderPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
operator|.
name|FairOrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
operator|.
name|OrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * FifoIntraQueuePreemptionPlugin will handle intra-queue preemption for  * priority and user-limit.  */
end_comment

begin_class
DECL|class|FifoIntraQueuePreemptionPlugin
specifier|public
class|class
name|FifoIntraQueuePreemptionPlugin
implements|implements
name|IntraQueuePreemptionComputePlugin
block|{
DECL|field|context
specifier|protected
specifier|final
name|CapacitySchedulerPreemptionContext
name|context
decl_stmt|;
DECL|field|rc
specifier|protected
specifier|final
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FifoIntraQueuePreemptionPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FifoIntraQueuePreemptionPlugin (ResourceCalculator rc, CapacitySchedulerPreemptionContext preemptionContext)
specifier|public
name|FifoIntraQueuePreemptionPlugin
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|preemptionContext
expr_stmt|;
name|this
operator|.
name|rc
operator|=
name|rc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPreemptableApps (String queueName, String partition)
specifier|public
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|getPreemptableApps
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|TempQueuePerPartition
name|tq
init|=
name|context
operator|.
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
init|=
operator|new
name|ArrayList
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TempAppPerPartition
name|tmpApp
range|:
name|tq
operator|.
name|getApps
argument_list|()
control|)
block|{
comment|// If a lower priority app was not selected to get preempted, mark such
comment|// apps out from preemption candidate selection.
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|tmpApp
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|apps
operator|.
name|add
argument_list|(
name|tmpApp
operator|.
name|app
argument_list|)
expr_stmt|;
block|}
return|return
name|apps
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceDemandFromAppsPerQueue ( String queueName, String partition)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getResourceDemandFromAppsPerQueue
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TempQueuePerPartition
name|tq
init|=
name|context
operator|.
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TempAppPerPartition
argument_list|>
name|appsOrderedByPriority
init|=
name|tq
operator|.
name|getApps
argument_list|()
decl_stmt|;
name|Resource
name|actualPreemptNeeded
init|=
name|resToObtainByPartition
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
comment|// Updating pending resource per-partition level.
if|if
condition|(
name|actualPreemptNeeded
operator|==
literal|null
condition|)
block|{
name|actualPreemptNeeded
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|resToObtainByPartition
operator|.
name|put
argument_list|(
name|partition
argument_list|,
name|actualPreemptNeeded
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TempAppPerPartition
name|a1
range|:
name|appsOrderedByPriority
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|actualPreemptNeeded
argument_list|,
name|a1
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Selected to preempt {} resource from partition:{}"
argument_list|,
name|actualPreemptNeeded
argument_list|,
name|partition
argument_list|)
expr_stmt|;
return|return
name|resToObtainByPartition
return|;
block|}
annotation|@
name|Override
DECL|method|computeAppsIdealAllocation (Resource clusterResource, TempQueuePerPartition tq, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource totalPreemptedResourceAllowed, Resource queueReassignableResource, float maxAllowablePreemptLimit)
specifier|public
name|void
name|computeAppsIdealAllocation
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|TempQueuePerPartition
name|tq
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|totalPreemptedResourceAllowed
parameter_list|,
name|Resource
name|queueReassignableResource
parameter_list|,
name|float
name|maxAllowablePreemptLimit
parameter_list|)
block|{
comment|// 1. AM used resource can be considered as a frozen resource for now.
comment|// Hence such containers in a queue can be omitted from the preemption
comment|// calculation.
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|perUserAMUsed
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Resource
name|amUsed
init|=
name|calculateUsedAMResourcesPerQueue
argument_list|(
name|tq
operator|.
name|partition
argument_list|,
name|tq
operator|.
name|leafQueue
argument_list|,
name|perUserAMUsed
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|queueReassignableResource
argument_list|,
name|amUsed
argument_list|)
expr_stmt|;
comment|// 2. tq.leafQueue will not be null as we validated it in caller side
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
init|=
name|tq
operator|.
name|leafQueue
operator|.
name|getAllApplications
argument_list|()
decl_stmt|;
comment|// We do not need preemption for a single app
if|if
condition|(
name|apps
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
block|}
comment|// 3. Create all tempApps for internal calculation and return a list from
comment|// high priority to low priority order.
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedByPriority
init|=
name|createTempAppForResCalculation
argument_list|(
name|tq
argument_list|,
name|apps
argument_list|,
name|clusterResource
argument_list|,
name|perUserAMUsed
argument_list|)
decl_stmt|;
comment|// 4. Calculate idealAssigned per app by checking based on queue's
comment|// unallocated resource.Also return apps arranged from lower priority to
comment|// higher priority.
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
init|=
name|calculateIdealAssignedResourcePerApp
argument_list|(
name|clusterResource
argument_list|,
name|tq
argument_list|,
name|selectedCandidates
argument_list|,
name|queueReassignableResource
argument_list|,
name|orderedByPriority
argument_list|)
decl_stmt|;
comment|// 5. A configurable limit that could define an ideal allowable preemption
comment|// limit. Based on current queue's capacity,defined how much % could become
comment|// preemptable.
name|Resource
name|maxIntraQueuePreemptable
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|tq
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|maxAllowablePreemptLimit
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|maxIntraQueuePreemptable
argument_list|,
name|tq
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|maxIntraQueuePreemptable
argument_list|,
name|tq
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxIntraQueuePreemptable
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// 6. We have two configurations here, one is intra queue limit and second
comment|// one is per-round limit for any time preemption. Take a minimum of these
name|Resource
name|preemptionLimit
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|maxIntraQueuePreemptable
argument_list|,
name|totalPreemptedResourceAllowed
argument_list|)
decl_stmt|;
comment|// 7. From lowest priority app onwards, calculate toBePreempted resource
comment|// based on demand.
name|calculateToBePreemptedResourcePerApp
argument_list|(
name|clusterResource
argument_list|,
name|orderedApps
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|preemptionLimit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Save all apps (low to high) to temp queue for further reference
name|tq
operator|.
name|addAllApps
argument_list|(
name|orderedApps
argument_list|)
expr_stmt|;
comment|// 8. There are chances that we may preempt for the demand from same
comment|// priority level, such cases are to be validated out.
name|validateOutSameAppPriorityFromDemand
argument_list|(
name|clusterResource
argument_list|,
operator|(
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
operator|)
name|orderedApps
argument_list|,
name|tq
operator|.
name|getUsersPerPartition
argument_list|()
argument_list|,
name|context
operator|.
name|getIntraQueuePreemptionOrderPolicy
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queue Name:"
operator|+
name|tq
operator|.
name|queueName
operator|+
literal|", partition:"
operator|+
name|tq
operator|.
name|partition
argument_list|)
expr_stmt|;
for|for
control|(
name|TempAppPerPartition
name|tmpApp
range|:
name|tq
operator|.
name|getApps
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tmpApp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|calculateToBePreemptedResourcePerApp (Resource clusterResource, TreeSet<TempAppPerPartition> orderedApps, Resource preemptionLimit)
specifier|private
name|void
name|calculateToBePreemptedResourcePerApp
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
parameter_list|,
name|Resource
name|preemptionLimit
parameter_list|)
block|{
for|for
control|(
name|TempAppPerPartition
name|tmpApp
range|:
name|orderedApps
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|preemptionLimit
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
operator|||
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|tmpApp
operator|.
name|getUsed
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Resource
name|preemtableFromApp
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpApp
operator|.
name|getUsed
argument_list|()
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFromNonNegative
argument_list|(
name|preemtableFromApp
argument_list|,
name|tmpApp
operator|.
name|selected
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFromNonNegative
argument_list|(
name|preemtableFromApp
argument_list|,
name|tmpApp
operator|.
name|getAMUsed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getIntraQueuePreemptionOrderPolicy
argument_list|()
operator|.
name|equals
argument_list|(
name|IntraQueuePreemptionOrderPolicy
operator|.
name|USERLIMIT_FIRST
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|subtractFromNonNegative
argument_list|(
name|preemtableFromApp
argument_list|,
name|tmpApp
operator|.
name|getFiCaSchedulerApp
argument_list|()
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getMinimumAllocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Calculate toBePreempted from apps as follows:
comment|// app.preemptable = min(max(app.used - app.selected - app.ideal, 0),
comment|// intra_q_preemptable)
name|tmpApp
operator|.
name|toBePreempted
operator|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|max
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|preemtableFromApp
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|preemptionLimit
argument_list|)
argument_list|)
expr_stmt|;
name|preemptionLimit
operator|=
name|Resources
operator|.
name|subtractFromNonNegative
argument_list|(
name|preemptionLimit
argument_list|,
name|tmpApp
operator|.
name|toBePreempted
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Algorithm for calculating idealAssigned is as follows:    * For each partition:    *  Q.reassignable = Q.used - Q.selected;    *      * # By default set ideal assigned 0 for app.    * app.idealAssigned as 0    * # get user limit from scheduler.    * userLimitRes = Q.getUserLimit(userName)    *     * # initial all value to 0    * Map<String, Resource> userToAllocated    *     * # Loop from highest priority to lowest priority app to calculate ideal    * for app in sorted-by(priority) {    *  if Q.reassignable< 0:    *    break;    *        *  if (user-to-allocated.get(app.user)< userLimitRes) {    *   idealAssigned = min((userLimitRes - userToAllocated.get(app.user)),     *                      (app.used + app.pending - app.selected))    *   app.idealAssigned = min(Q.reassignable, idealAssigned)    *   userToAllocated.get(app.user) += app.idealAssigned;    *  } else {     *   // skip this app because user-limit reached    *  }    *  Q.reassignable -= app.idealAssigned    * }    *      * @param clusterResource Cluster Resource    * @param tq TempQueue    * @param selectedCandidates Already Selected preemption candidates    * @param queueReassignableResource Resource used in a queue    * @param orderedByPriority List of running apps    * @return List of temp apps ordered from low to high priority    */
DECL|method|calculateIdealAssignedResourcePerApp ( Resource clusterResource, TempQueuePerPartition tq, Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource queueReassignableResource, PriorityQueue<TempAppPerPartition> orderedByPriority)
specifier|private
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|calculateIdealAssignedResourcePerApp
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|TempQueuePerPartition
name|tq
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|queueReassignableResource
parameter_list|,
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedByPriority
parameter_list|)
block|{
name|Comparator
argument_list|<
name|TempAppPerPartition
argument_list|>
name|reverseComp
decl_stmt|;
name|OrderingPolicy
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|queueOrderingPolicy
init|=
name|tq
operator|.
name|leafQueue
operator|.
name|getOrderingPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|queueOrderingPolicy
operator|instanceof
name|FairOrderingPolicy
operator|&&
operator|(
name|context
operator|.
name|getIntraQueuePreemptionOrderPolicy
argument_list|()
operator|==
name|IntraQueuePreemptionOrderPolicy
operator|.
name|USERLIMIT_FIRST
operator|)
condition|)
block|{
name|reverseComp
operator|=
name|Collections
operator|.
name|reverseOrder
argument_list|(
operator|new
name|TAFairOrderingComparator
argument_list|(
name|this
operator|.
name|rc
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reverseComp
operator|=
name|Collections
operator|.
name|reverseOrder
argument_list|(
operator|new
name|TAPriorityComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|reverseComp
argument_list|)
decl_stmt|;
name|String
name|partition
init|=
name|tq
operator|.
name|partition
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TempUserPerPartition
argument_list|>
name|usersPerPartition
init|=
name|tq
operator|.
name|getUsersPerPartition
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|orderedByPriority
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Remove app from the next highest remaining priority and process it to
comment|// calculate idealAssigned per app.
name|TempAppPerPartition
name|tmpApp
init|=
name|orderedByPriority
operator|.
name|remove
argument_list|()
decl_stmt|;
name|orderedApps
operator|.
name|add
argument_list|(
name|tmpApp
argument_list|)
expr_stmt|;
comment|// Once unallocated resource is 0, we can stop assigning ideal per app.
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|queueReassignableResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
operator|||
name|rc
operator|.
name|isAnyMajorResourceZeroOrNegative
argument_list|(
name|queueReassignableResource
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|userName
init|=
name|tmpApp
operator|.
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|TempUserPerPartition
name|tmpUser
init|=
name|usersPerPartition
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|Resource
name|userLimitResource
init|=
name|tmpUser
operator|.
name|getUserLimit
argument_list|()
decl_stmt|;
name|Resource
name|idealAssignedForUser
init|=
name|tmpUser
operator|.
name|idealAssigned
decl_stmt|;
comment|// Calculate total selected container resources from current app.
name|getAlreadySelectedPreemptionCandidatesResource
argument_list|(
name|selectedCandidates
argument_list|,
name|tmpApp
argument_list|,
name|tmpUser
argument_list|,
name|partition
argument_list|)
expr_stmt|;
comment|// For any app, used+pending will give its idealAssigned. However it will
comment|// be tightly linked to queue's unallocated quota. So lower priority apps
comment|// idealAssigned may fall to 0 if higher priority apps demand is more.
name|Resource
name|appIdealAssigned
init|=
name|Resources
operator|.
name|add
argument_list|(
name|tmpApp
operator|.
name|getUsedDeductAM
argument_list|()
argument_list|,
name|tmpApp
operator|.
name|getPending
argument_list|()
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|appIdealAssigned
argument_list|,
name|tmpApp
operator|.
name|selected
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|idealAssignedForUser
argument_list|,
name|userLimitResource
argument_list|)
condition|)
block|{
name|Resource
name|idealAssigned
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|appIdealAssigned
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|userLimitResource
argument_list|,
name|idealAssignedForUser
argument_list|)
argument_list|)
decl_stmt|;
name|tmpApp
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|queueReassignableResource
argument_list|,
name|idealAssigned
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|idealAssignedForUser
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
comment|// Also set how much resource is needed by this app from others.
name|Resource
name|appUsedExcludedSelected
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpApp
operator|.
name|getUsedDeductAM
argument_list|()
argument_list|,
name|tmpApp
operator|.
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|,
name|appUsedExcludedSelected
argument_list|)
condition|)
block|{
name|tmpApp
operator|.
name|setToBePreemptFromOther
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpApp
operator|.
name|idealAssigned
argument_list|,
name|appUsedExcludedSelected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFromNonNegative
argument_list|(
name|queueReassignableResource
argument_list|,
name|tmpApp
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedApps
return|;
block|}
comment|/*    * Previous policies would have already selected few containers from an    * application. Calculate total resource from these selected containers.    */
DECL|method|getAlreadySelectedPreemptionCandidatesResource ( Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, TempAppPerPartition tmpApp, TempUserPerPartition tmpUser, String partition)
specifier|private
name|void
name|getAlreadySelectedPreemptionCandidatesResource
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|TempAppPerPartition
name|tmpApp
parameter_list|,
name|TempUserPerPartition
name|tmpUser
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|tmpApp
operator|.
name|selected
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
name|selectedCandidates
operator|.
name|get
argument_list|(
name|tmpApp
operator|.
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containers
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|RMContainer
name|cont
range|:
name|containers
control|)
block|{
if|if
condition|(
name|partition
operator|.
name|equals
argument_list|(
name|cont
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|tmpApp
operator|.
name|selected
argument_list|,
name|cont
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|tmpUser
operator|.
name|selected
argument_list|,
name|cont
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createTempAppForResCalculation ( TempQueuePerPartition tq, Collection<FiCaSchedulerApp> apps, Resource clusterResource, Map<String, Resource> perUserAMUsed)
specifier|private
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|createTempAppForResCalculation
parameter_list|(
name|TempQueuePerPartition
name|tq
parameter_list|,
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|perUserAMUsed
parameter_list|)
block|{
name|Comparator
argument_list|<
name|TempAppPerPartition
argument_list|>
name|taComparator
decl_stmt|;
name|OrderingPolicy
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|orderingPolicy
init|=
name|tq
operator|.
name|leafQueue
operator|.
name|getOrderingPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|orderingPolicy
operator|instanceof
name|FairOrderingPolicy
operator|&&
operator|(
name|context
operator|.
name|getIntraQueuePreemptionOrderPolicy
argument_list|()
operator|==
name|IntraQueuePreemptionOrderPolicy
operator|.
name|USERLIMIT_FIRST
operator|)
condition|)
block|{
name|taComparator
operator|=
operator|new
name|TAFairOrderingComparator
argument_list|(
name|this
operator|.
name|rc
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taComparator
operator|=
operator|new
name|TAPriorityComparator
argument_list|()
expr_stmt|;
block|}
name|PriorityQueue
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedByPriority
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
literal|100
argument_list|,
name|taComparator
argument_list|)
decl_stmt|;
name|String
name|partition
init|=
name|tq
operator|.
name|partition
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TempUserPerPartition
argument_list|>
name|usersPerPartition
init|=
name|tq
operator|.
name|getUsersPerPartition
argument_list|()
decl_stmt|;
comment|// have an internal temp app structure to store intermediate data(priority)
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
name|apps
control|)
block|{
name|Resource
name|used
init|=
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|Resource
name|amUsed
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|app
operator|.
name|isWaitingForAMContainer
argument_list|()
condition|)
block|{
name|amUsed
operator|=
name|app
operator|.
name|getAMResource
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
name|Resource
name|pending
init|=
name|app
operator|.
name|getTotalPendingRequestsPerPartition
argument_list|()
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|Resource
name|reserved
init|=
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|used
operator|=
operator|(
name|used
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|used
expr_stmt|;
name|amUsed
operator|=
operator|(
name|amUsed
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|amUsed
expr_stmt|;
name|pending
operator|=
operator|(
name|pending
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|pending
expr_stmt|;
name|reserved
operator|=
operator|(
name|reserved
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|reserved
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|partitions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getNodePartitionsSet
argument_list|()
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|addAll
argument_list|(
name|app
operator|.
name|getTotalPendingRequestsPerPartition
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create TempAppPerQueue for further calculation.
name|TempAppPerPartition
name|tmpApp
init|=
operator|new
name|TempAppPerPartition
argument_list|(
name|app
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|used
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|amUsed
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|reserved
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|pending
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set ideal allocation of app as 0.
name|tmpApp
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create a TempUserPerPartition structure to hold more information
comment|// regarding each user's entities such as UserLimit etc. This could
comment|// be kept in a user to TempUserPerPartition map for further reference.
name|String
name|userName
init|=
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|TempUserPerPartition
name|tmpUser
init|=
name|usersPerPartition
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpUser
operator|==
literal|null
condition|)
block|{
name|ResourceUsage
name|userResourceUsage
init|=
name|tq
operator|.
name|leafQueue
operator|.
name|getUser
argument_list|(
name|userName
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
decl_stmt|;
comment|// perUserAMUsed was populated with running apps, now we are looping
comment|// through both running and pending apps.
name|Resource
name|userSpecificAmUsed
init|=
name|perUserAMUsed
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|amUsed
operator|=
operator|(
name|userSpecificAmUsed
operator|==
literal|null
operator|)
condition|?
name|Resources
operator|.
name|none
argument_list|()
else|:
name|userSpecificAmUsed
expr_stmt|;
name|tmpUser
operator|=
operator|new
name|TempUserPerPartition
argument_list|(
name|tq
operator|.
name|leafQueue
operator|.
name|getUser
argument_list|(
name|userName
argument_list|)
argument_list|,
name|tq
operator|.
name|queueName
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|userResourceUsage
operator|.
name|getUsed
argument_list|(
name|partition
argument_list|)
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|amUsed
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|userResourceUsage
operator|.
name|getReserved
argument_list|(
name|partition
argument_list|)
argument_list|)
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|userLimitResource
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|tq
operator|.
name|leafQueue
operator|.
name|getResourceLimitForAllUsers
argument_list|(
name|userName
argument_list|,
name|clusterResource
argument_list|,
name|partition
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
decl_stmt|;
comment|// Real AM used need not have to be considered for user-limit as well.
name|userLimitResource
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|userLimitResource
argument_list|,
name|tmpUser
operator|.
name|amUsed
argument_list|)
expr_stmt|;
name|tmpUser
operator|.
name|setUserLimit
argument_list|(
name|userLimitResource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"TempUser:{}"
argument_list|,
name|tmpUser
argument_list|)
expr_stmt|;
name|tmpUser
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tq
operator|.
name|addUserPerPartition
argument_list|(
name|userName
argument_list|,
name|tmpUser
argument_list|)
expr_stmt|;
block|}
name|tmpApp
operator|.
name|setTempUserPerPartition
argument_list|(
name|tmpUser
argument_list|)
expr_stmt|;
name|orderedByPriority
operator|.
name|add
argument_list|(
name|tmpApp
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedByPriority
return|;
block|}
comment|/*    * Fifo+Priority based preemption policy need not have to preempt resources at    * same priority level. Such cases will be validated out. But if the demand is    * from an app of different user, force to preempt resources even if apps are    * at same priority.    */
DECL|method|validateOutSameAppPriorityFromDemand (Resource cluster, TreeSet<TempAppPerPartition> orderedApps, Map<String, TempUserPerPartition> usersPerPartition, IntraQueuePreemptionOrderPolicy intraQueuePreemptionOrder)
specifier|public
name|void
name|validateOutSameAppPriorityFromDemand
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|TreeSet
argument_list|<
name|TempAppPerPartition
argument_list|>
name|orderedApps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TempUserPerPartition
argument_list|>
name|usersPerPartition
parameter_list|,
name|IntraQueuePreemptionOrderPolicy
name|intraQueuePreemptionOrder
parameter_list|)
block|{
name|TempAppPerPartition
index|[]
name|apps
init|=
name|orderedApps
operator|.
name|toArray
argument_list|(
operator|new
name|TempAppPerPartition
index|[
name|orderedApps
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|apps
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|hPriority
init|=
name|apps
operator|.
name|length
operator|-
literal|1
init|;
name|hPriority
operator|>=
literal|0
condition|;
name|hPriority
operator|--
control|)
block|{
comment|// Check whether high priority app with demand needs resource from other
comment|// user.
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|apps
index|[
name|hPriority
index|]
operator|.
name|getToBePreemptFromOther
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// Given we have a demand from a high priority app, we can do a reverse
comment|// scan from lower priority apps to select resources.
comment|// Since idealAssigned of each app has considered user-limit, this logic
comment|// will provide eventual consistency w.r.t user-limit as well.
for|for
control|(
name|int
name|lPriority
init|=
literal|0
init|;
name|lPriority
operator|<
name|apps
operator|.
name|length
condition|;
name|lPriority
operator|++
control|)
block|{
comment|// Check whether app with demand needs resource from other user.
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|apps
index|[
name|lPriority
index|]
operator|.
name|toBePreempted
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// If apps are of same user, and priority is same, then skip.
if|if
condition|(
operator|(
name|apps
index|[
name|hPriority
index|]
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|getUser
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|getPriority
argument_list|()
operator|>=
name|apps
index|[
name|hPriority
index|]
operator|.
name|getPriority
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|apps
index|[
name|lPriority
index|]
operator|.
name|toBePreempted
argument_list|,
name|apps
index|[
name|lPriority
index|]
operator|.
name|getActuallyToBePreempted
argument_list|()
argument_list|)
operator|||
name|Resources
operator|.
name|equals
argument_list|(
name|apps
index|[
name|hPriority
index|]
operator|.
name|getToBePreemptFromOther
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Ideally if any application has a higher priority, then it can
comment|// force to preempt any lower priority app from any user. However
comment|// if admin enforces user-limit over priority, preemption module
comment|// will not choose lower priority apps from usre's who are not yet
comment|// met its user-limit.
name|TempUserPerPartition
name|tmpUser
init|=
name|usersPerPartition
operator|.
name|get
argument_list|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|apps
index|[
name|hPriority
index|]
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|getUser
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|tmpUser
operator|.
name|isUserLimitReached
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|)
operator|)
operator|&&
operator|(
name|intraQueuePreemptionOrder
operator|.
name|equals
argument_list|(
name|IntraQueuePreemptionOrderPolicy
operator|.
name|USERLIMIT_FIRST
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|Resource
name|toPreemptFromOther
init|=
name|apps
index|[
name|hPriority
index|]
operator|.
name|getToBePreemptFromOther
argument_list|()
decl_stmt|;
name|Resource
name|actuallyToPreempt
init|=
name|apps
index|[
name|lPriority
index|]
operator|.
name|getActuallyToBePreempted
argument_list|()
decl_stmt|;
comment|// A lower priority app could offer more resource to preempt, if
comment|// multiple higher priority/under served users needs resources.
comment|// After one iteration, we need to ensure that actuallyToPreempt is
comment|// subtracted from the resource to preempt.
name|Resource
name|preemptableFromLowerPriorityApp
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|toBePreempted
argument_list|,
name|actuallyToPreempt
argument_list|)
decl_stmt|;
comment|// In case of user-limit preemption, when app's are from different
comment|// user and of same priority, we will do user-limit preemption if
comment|// there is a demand from under UL quota app.
comment|// However this under UL quota app's demand may be more.
comment|// Still we should ensure that we are not doing over preemption such
comment|// that only a maximum of (user's used - UL quota) could be
comment|// preempted.
if|if
condition|(
operator|(
operator|!
name|apps
index|[
name|hPriority
index|]
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|getUser
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|apps
index|[
name|lPriority
index|]
operator|.
name|getPriority
argument_list|()
operator|==
name|apps
index|[
name|hPriority
index|]
operator|.
name|getPriority
argument_list|()
operator|)
operator|&&
name|tmpUser
operator|.
name|isUserLimitReached
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|)
condition|)
block|{
name|Resource
name|deltaULQuota
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|tmpUser
operator|.
name|getUsedDeductAM
argument_list|()
argument_list|,
name|tmpUser
operator|.
name|selected
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|deltaULQuota
argument_list|,
name|tmpUser
operator|.
name|getUserLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpUser
operator|.
name|isPreemptionQuotaForULDeltaDone
argument_list|()
condition|)
block|{
name|deltaULQuota
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|deltaULQuota
argument_list|,
name|preemptableFromLowerPriorityApp
argument_list|)
condition|)
block|{
name|tmpUser
operator|.
name|updatePreemptionQuotaForULDeltaAsDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|preemptableFromLowerPriorityApp
operator|=
name|deltaULQuota
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|preemptableFromLowerPriorityApp
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|toPreempt
init|=
name|Resources
operator|.
name|min
argument_list|(
name|rc
argument_list|,
name|cluster
argument_list|,
name|toPreemptFromOther
argument_list|,
name|preemptableFromLowerPriorityApp
argument_list|)
decl_stmt|;
name|apps
index|[
name|hPriority
index|]
operator|.
name|setToBePreemptFromOther
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|toPreemptFromOther
argument_list|,
name|toPreempt
argument_list|)
argument_list|)
expr_stmt|;
name|apps
index|[
name|lPriority
index|]
operator|.
name|setActuallyToBePreempted
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|actuallyToPreempt
argument_list|,
name|toPreempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|calculateUsedAMResourcesPerQueue (String partition, LeafQueue leafQueue, Map<String, Resource> perUserAMUsed)
specifier|private
name|Resource
name|calculateUsedAMResourcesPerQueue
parameter_list|(
name|String
name|partition
parameter_list|,
name|LeafQueue
name|leafQueue
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|perUserAMUsed
parameter_list|)
block|{
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|runningApps
init|=
name|leafQueue
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Resource
name|amUsed
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|leafQueue
init|)
block|{
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
name|runningApps
control|)
block|{
name|Resource
name|userAMResource
init|=
name|perUserAMUsed
operator|.
name|get
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|userAMResource
condition|)
block|{
name|userAMResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|perUserAMUsed
operator|.
name|put
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|userAMResource
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|userAMResource
argument_list|,
name|app
operator|.
name|getAMResource
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|amUsed
argument_list|,
name|app
operator|.
name|getAMResource
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|amUsed
return|;
block|}
annotation|@
name|Override
DECL|method|skipContainerBasedOnIntraQueuePolicy (FiCaSchedulerApp app, Resource clusterResource, Resource usedResource, RMContainer c)
specifier|public
name|boolean
name|skipContainerBasedOnIntraQueuePolicy
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|usedResource
parameter_list|,
name|RMContainer
name|c
parameter_list|)
block|{
comment|// Ensure below checks
comment|// 1. This check must be done only when preemption order is USERLIMIT_FIRST
comment|// 2. By selecting container "c", check whether this user's resource usage
comment|// is going below its user-limit.
comment|// 3. Used resource of user must be always greater than user-limit to
comment|// skip some containers as per this check. If used resource is under user
comment|// limit, then these containers of this user has to be preempted as demand
comment|// might be due to high priority apps running in same user.
name|String
name|partition
init|=
name|context
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|c
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|TempQueuePerPartition
name|tq
init|=
name|context
operator|.
name|getQueueByPartition
argument_list|(
name|app
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|TempUserPerPartition
name|tmpUser
init|=
name|tq
operator|.
name|getUsersPerPartition
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Given user is not present, skip the check.
if|if
condition|(
name|tmpUser
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// For ideal resource computations, user-limit got saved by subtracting am
comment|// used resource in TempUser. Hence it has to be added back here for
comment|// complete check.
name|Resource
name|userLimit
init|=
name|Resources
operator|.
name|add
argument_list|(
name|tmpUser
operator|.
name|getUserLimit
argument_list|()
argument_list|,
name|tmpUser
operator|.
name|amUsed
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|usedResource
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
argument_list|,
name|userLimit
argument_list|)
operator|&&
name|context
operator|.
name|getIntraQueuePreemptionOrderPolicy
argument_list|()
operator|.
name|equals
argument_list|(
name|IntraQueuePreemptionOrderPolicy
operator|.
name|USERLIMIT_FIRST
argument_list|)
return|;
block|}
block|}
end_class

end_unit

