begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_comment
comment|/**  * The service that implements the {@link PlacementConstraintManager} interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PlacementConstraintManagerService
specifier|public
specifier|abstract
class|class
name|PlacementConstraintManagerService
extends|extends
name|AbstractService
implements|implements
name|PlacementConstraintManager
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PlacementConstraintManagerService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|placementConstraintManager
specifier|private
name|PlacementConstraintManager
name|placementConstraintManager
init|=
literal|null
decl_stmt|;
DECL|method|PlacementConstraintManagerService ()
specifier|public
name|PlacementConstraintManagerService
parameter_list|()
block|{
name|super
argument_list|(
name|PlacementConstraintManagerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateConstraint (Set<String> sourceTags, PlacementConstraint placementConstraint)
specifier|public
name|boolean
name|validateConstraint
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|,
name|PlacementConstraint
name|placementConstraint
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateSourceTags
argument_list|(
name|sourceTags
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// TODO: Perform actual validation of the constraint (in YARN-6621).
comment|// TODO: Perform satisfiability check for constraint.
return|return
literal|true
return|;
block|}
comment|/**    * Validates whether the allocation tags that will enable a constraint have    * the expected format. At the moment we support a single allocation tag per    * constraint.    *    * @param sourceTags the source allocation tags    * @return true if the tags have the expected format    */
DECL|method|validateSourceTags (Set<String> sourceTags)
specifier|protected
name|boolean
name|validateSourceTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|)
block|{
if|if
condition|(
name|sourceTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"A placement constraint cannot be associated with an empty "
operator|+
literal|"set of tags."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sourceTags
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Only a single tag can be associated with a placement "
operator|+
literal|"constraint currently."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This method will return a single allocation tag. It should be called after    * validating the tags by calling {@link #validateSourceTags}.    *    * @param sourceTags the source allocation tags    * @return the single source tag    */
DECL|method|getValidSourceTag (Set<String> sourceTags)
specifier|protected
name|String
name|getValidSourceTag
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|)
block|{
return|return
name|sourceTags
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
block|}
end_class

end_unit

