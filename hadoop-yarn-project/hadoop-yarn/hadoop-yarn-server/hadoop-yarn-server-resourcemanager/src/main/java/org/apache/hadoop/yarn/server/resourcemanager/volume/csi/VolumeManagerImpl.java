begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|CsiAdaptorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetPluginInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetPluginInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|NMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|Volume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|provisioner
operator|.
name|VolumeProvisioningResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|provisioner
operator|.
name|VolumeProvisioningTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A service manages all volumes.  */
end_comment

begin_class
DECL|class|VolumeManagerImpl
specifier|public
class|class
name|VolumeManagerImpl
extends|extends
name|AbstractService
implements|implements
name|VolumeManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|volumeStates
specifier|private
specifier|final
name|VolumeStates
name|volumeStates
decl_stmt|;
DECL|field|provisioningExecutor
specifier|private
name|ScheduledExecutorService
name|provisioningExecutor
decl_stmt|;
DECL|field|csiAdaptorMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CsiAdaptorProtocol
argument_list|>
name|csiAdaptorMap
decl_stmt|;
DECL|field|PROVISIONING_TASK_THREAD_POOL_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|PROVISIONING_TASK_THREAD_POOL_SIZE
init|=
literal|10
decl_stmt|;
DECL|method|VolumeManagerImpl ()
specifier|public
name|VolumeManagerImpl
parameter_list|()
block|{
name|super
argument_list|(
name|VolumeManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|volumeStates
operator|=
operator|new
name|VolumeStates
argument_list|()
expr_stmt|;
name|this
operator|.
name|csiAdaptorMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|provisioningExecutor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|PROVISIONING_TASK_THREAD_POOL_SIZE
argument_list|)
expr_stmt|;
block|}
comment|// Init the CSI adaptor cache according to the configuration.
comment|// user only needs to configure a list of adaptor addresses,
comment|// this method extracts each address and init an adaptor client,
comment|// then proceed with a hand-shake by calling adaptor's getPluginInfo
comment|// method to retrieve the driver info. If the driver can be resolved,
comment|// it is then added to the cache. Note, we don't allow two drivers
comment|// specified with same driver-name even version is different.
DECL|method|initCsiAdaptorCache ( final Map<String, CsiAdaptorProtocol> adaptorMap, Configuration conf)
specifier|private
name|void
name|initCsiAdaptorCache
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CsiAdaptorProtocol
argument_list|>
name|adaptorMap
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing cache for csi-driver-adaptors"
argument_list|)
expr_stmt|;
name|String
index|[]
name|addresses
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CSI_ADAPTOR_ADDRESSES
argument_list|)
decl_stmt|;
if|if
condition|(
name|addresses
operator|!=
literal|null
operator|&&
name|addresses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|addr
range|:
name|addresses
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found csi-driver-adaptor socket address: "
operator|+
name|addr
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|CsiAdaptorProtocol
name|adaptorClient
init|=
name|NMProxy
operator|.
name|createNMProxy
argument_list|(
name|conf
argument_list|,
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|,
name|currentUser
argument_list|,
name|rpc
argument_list|,
name|address
argument_list|)
decl_stmt|;
comment|// Attempt to resolve the driver by contacting to
comment|// the diver's identity service on the given address.
comment|// If the call failed, the initialization is also failed
comment|// in order running into inconsistent state.
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieving info from csi-driver-adaptor on address "
operator|+
name|addr
argument_list|)
expr_stmt|;
name|GetPluginInfoResponse
name|response
init|=
name|adaptorClient
operator|.
name|getPluginInfo
argument_list|(
name|GetPluginInfoRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|response
operator|.
name|getDriverName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|driverName
init|=
name|response
operator|.
name|getDriverName
argument_list|()
decl_stmt|;
if|if
condition|(
name|adaptorMap
operator|.
name|containsKey
argument_list|(
name|driverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Duplicate driver adaptor found,"
operator|+
literal|" driver name: "
operator|+
name|driverName
argument_list|)
throw|;
block|}
name|adaptorMap
operator|.
name|put
argument_list|(
name|driverName
argument_list|,
name|adaptorClient
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CSI Adaptor added to the cache, adaptor name: "
operator|+
name|driverName
operator|+
literal|", driver version: "
operator|+
name|response
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns a CsiAdaptorProtocol client by the given driver name,    * returns null if no adaptor is found for the driver, that means    * the driver has not registered to the volume manager yet enhance not valid.    * @param driverName the name of the driver    * @return CsiAdaptorProtocol client or null if driver not registered    */
DECL|method|getAdaptorByDriverName (String driverName)
specifier|public
name|CsiAdaptorProtocol
name|getAdaptorByDriverName
parameter_list|(
name|String
name|driverName
parameter_list|)
block|{
return|return
name|csiAdaptorMap
operator|.
name|get
argument_list|(
name|driverName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|registerCsiDriverAdaptor (String driverName, CsiAdaptorProtocol client)
specifier|public
name|void
name|registerCsiDriverAdaptor
parameter_list|(
name|String
name|driverName
parameter_list|,
name|CsiAdaptorProtocol
name|client
parameter_list|)
block|{
name|this
operator|.
name|csiAdaptorMap
operator|.
name|put
argument_list|(
name|driverName
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initCsiAdaptorCache
argument_list|(
name|csiAdaptorMap
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|provisioningExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVolumeStates ()
specifier|public
name|VolumeStates
name|getVolumeStates
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeStates
return|;
block|}
annotation|@
name|Override
DECL|method|addOrGetVolume (Volume volume)
specifier|public
name|Volume
name|addOrGetVolume
parameter_list|(
name|Volume
name|volume
parameter_list|)
block|{
if|if
condition|(
name|volumeStates
operator|.
name|getVolume
argument_list|(
name|volume
operator|.
name|getVolumeId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// volume already exists
return|return
name|volumeStates
operator|.
name|getVolume
argument_list|(
name|volume
operator|.
name|getVolumeId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|this
operator|.
name|volumeStates
operator|.
name|addVolumeIfAbsent
argument_list|(
name|volume
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|schedule ( VolumeProvisioningTask volumeProvisioningTask, int delaySecond)
specifier|public
name|ScheduledFuture
argument_list|<
name|VolumeProvisioningResults
argument_list|>
name|schedule
parameter_list|(
name|VolumeProvisioningTask
name|volumeProvisioningTask
parameter_list|,
name|int
name|delaySecond
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling provision volume task (with delay "
operator|+
name|delaySecond
operator|+
literal|"s),"
operator|+
literal|" handling "
operator|+
name|volumeProvisioningTask
operator|.
name|getVolumes
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" volume provisioning"
argument_list|)
expr_stmt|;
return|return
name|provisioningExecutor
operator|.
name|schedule
argument_list|(
name|volumeProvisioningTask
argument_list|,
name|delaySecond
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

