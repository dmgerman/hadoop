begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * For two queues with the same priority:  * - The queue with less relative used-capacity goes first - todayâs behavior.  * - The default priority for all queues is 0 and equal. So, we get todayâs  *   behaviour at every level - the queue with the lowest used-capacity  *   percentage gets the resources  *  * For two queues with different priorities:  * - Both the queues are under their guaranteed capacities: The queue with  *   the higher priority gets resources  * - Both the queues are over or meeting their guaranteed capacities:  *   The queue with the higher priority gets resources  * - One of the queues is over or meeting their guaranteed capacities and the  *   other is under: The queue that is under its capacity guarantee gets the  *   resources.  */
end_comment

begin_class
DECL|class|PriorityUtilizationQueueOrderingPolicy
specifier|public
class|class
name|PriorityUtilizationQueueOrderingPolicy
implements|implements
name|QueueOrderingPolicy
block|{
DECL|field|queues
specifier|private
name|List
argument_list|<
name|CSQueue
argument_list|>
name|queues
decl_stmt|;
DECL|field|respectPriority
specifier|private
name|boolean
name|respectPriority
decl_stmt|;
comment|// This makes multiple threads can sort queues at the same time
comment|// For different partitions.
DECL|field|partitionToLookAt
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|partitionToLookAt
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
operator|new
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/**    * Compare two queues with possibly different priority and assigned capacity,    * Will be used by preemption policy as well.    *    * @param relativeAssigned1 relativeAssigned1    * @param relativeAssigned2 relativeAssigned2    * @param priority1 p1    * @param priority2 p2    * @return compared result    */
DECL|method|compare (double relativeAssigned1, double relativeAssigned2, int priority1, int priority2)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|double
name|relativeAssigned1
parameter_list|,
name|double
name|relativeAssigned2
parameter_list|,
name|int
name|priority1
parameter_list|,
name|int
name|priority2
parameter_list|)
block|{
if|if
condition|(
name|priority1
operator|==
name|priority2
condition|)
block|{
comment|// The queue with less relative used-capacity goes first
return|return
name|Double
operator|.
name|compare
argument_list|(
name|relativeAssigned1
argument_list|,
name|relativeAssigned2
argument_list|)
return|;
block|}
else|else
block|{
comment|// When priority is different:
if|if
condition|(
operator|(
name|relativeAssigned1
operator|<
literal|1.0f
operator|&&
name|relativeAssigned2
operator|<
literal|1.0f
operator|)
operator|||
operator|(
name|relativeAssigned1
operator|>=
literal|1.0f
operator|&&
name|relativeAssigned2
operator|>=
literal|1.0f
operator|)
condition|)
block|{
comment|// When both the queues are under their guaranteed capacities,
comment|// Or both the queues are over or meeting their guaranteed capacities
comment|// queue with higher used-capacity goes first
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|priority2
argument_list|,
name|priority1
argument_list|)
return|;
block|}
else|else
block|{
comment|// Otherwise, when one of the queues is over or meeting their
comment|// guaranteed capacities and the other is under: The queue that is
comment|// under its capacity guarantee gets the resources.
return|return
name|Double
operator|.
name|compare
argument_list|(
name|relativeAssigned1
argument_list|,
name|relativeAssigned2
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Comparator that both looks at priority and utilization    */
DECL|class|PriorityQueueComparator
specifier|private
class|class
name|PriorityQueueComparator
implements|implements
name|Comparator
argument_list|<
name|CSQueue
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (CSQueue q1, CSQueue q2)
specifier|public
name|int
name|compare
parameter_list|(
name|CSQueue
name|q1
parameter_list|,
name|CSQueue
name|q2
parameter_list|)
block|{
name|String
name|p
init|=
name|partitionToLookAt
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|rc
init|=
name|compareQueueAccessToPartition
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|rc
condition|)
block|{
return|return
name|rc
return|;
block|}
name|float
name|used1
init|=
name|q1
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getUsedCapacity
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|float
name|used2
init|=
name|q2
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getUsedCapacity
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|int
name|p1
init|=
literal|0
decl_stmt|;
name|int
name|p2
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|respectPriority
condition|)
block|{
name|p1
operator|=
name|q1
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|p2
operator|=
name|q2
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
name|rc
operator|=
name|PriorityUtilizationQueueOrderingPolicy
operator|.
name|compare
argument_list|(
name|used1
argument_list|,
name|used2
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
comment|// For queue with same used ratio / priority, queue with higher configured
comment|// capacity goes first
if|if
condition|(
literal|0
operator|==
name|rc
condition|)
block|{
name|float
name|abs1
init|=
name|q1
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|float
name|abs2
init|=
name|q2
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|Float
operator|.
name|compare
argument_list|(
name|abs2
argument_list|,
name|abs1
argument_list|)
return|;
block|}
return|return
name|rc
return|;
block|}
DECL|method|compareQueueAccessToPartition (CSQueue q1, CSQueue q2, String partition)
specifier|private
name|int
name|compareQueueAccessToPartition
parameter_list|(
name|CSQueue
name|q1
parameter_list|,
name|CSQueue
name|q2
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
comment|// Everybody has access to default partition
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|partition
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|/*        * Check accessible to given partition, if one queue accessible and        * the other not, accessible queue goes first.        */
name|boolean
name|q1Accessible
init|=
name|q1
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|!=
literal|null
operator|&&
name|q1
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|partition
argument_list|)
operator|||
name|q1
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|RMNodeLabelsManager
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|boolean
name|q2Accessible
init|=
name|q2
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|!=
literal|null
operator|&&
name|q2
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|partition
argument_list|)
operator|||
name|q2
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|RMNodeLabelsManager
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|q1Accessible
operator|&&
operator|!
name|q2Accessible
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q1Accessible
operator|&&
name|q2Accessible
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|method|PriorityUtilizationQueueOrderingPolicy (boolean respectPriority)
specifier|public
name|PriorityUtilizationQueueOrderingPolicy
parameter_list|(
name|boolean
name|respectPriority
parameter_list|)
block|{
name|this
operator|.
name|respectPriority
operator|=
name|respectPriority
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setQueues (List<CSQueue> queues)
specifier|public
name|void
name|setQueues
parameter_list|(
name|List
argument_list|<
name|CSQueue
argument_list|>
name|queues
parameter_list|)
block|{
name|this
operator|.
name|queues
operator|=
name|queues
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAssignmentIterator (String partition)
specifier|public
name|Iterator
argument_list|<
name|CSQueue
argument_list|>
name|getAssignmentIterator
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
comment|// Since partitionToLookAt is a thread local variable, and every time we
comment|// copy and sort queues, so it's safe for multi-threading environment.
name|PriorityUtilizationQueueOrderingPolicy
operator|.
name|partitionToLookAt
operator|.
name|set
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|sortedQueue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|queues
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedQueue
argument_list|,
operator|new
name|PriorityQueueComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sortedQueue
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConfigName ()
specifier|public
name|String
name|getConfigName
parameter_list|()
block|{
if|if
condition|(
name|respectPriority
condition|)
block|{
return|return
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
return|;
block|}
else|else
block|{
return|return
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_UTILIZATION_ORDERING_POLICY
return|;
block|}
block|}
block|}
end_class

end_unit

