begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationBaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterUserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LabelsToNodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsEntryList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|RMQueueAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDeleteRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationSubmissionRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationUpdateRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceOptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_comment
comment|/**  *<p>  * The protocol between clients and the<code>ResourceManager</code> to  * submit/abort jobs and to get information on applications, cluster metrics,  * nodes, queues, ACLs and reservations via REST calls.  *</p>  *  * The WebService is reachable by using {@link RMWSConsts#RM_WEB_SERVICE_PATH}  */
end_comment

begin_interface
annotation|@
name|Private
annotation|@
name|Evolving
DECL|interface|RMWebServiceProtocol
specifier|public
interface|interface
name|RMWebServiceProtocol
block|{
comment|/**    * This method retrieves the cluster information, and it is reachable by using    * {@link RMWSConsts#INFO}.    *    * @return the cluster information    */
DECL|method|get ()
name|ClusterInfo
name|get
parameter_list|()
function_decl|;
comment|/**    * This method retrieves the cluster information, and it is reachable by using    * {@link RMWSConsts#INFO}.    *    * @return the cluster information    */
DECL|method|getClusterInfo ()
name|ClusterInfo
name|getClusterInfo
parameter_list|()
function_decl|;
comment|/**    * This method retrieves the cluster user information, and it is reachable by using    * {@link RMWSConsts#CLUSTER_USER_INFO}.    *    * @return the cluster user information    */
DECL|method|getClusterUserInfo (HttpServletRequest hsr)
name|ClusterUserInfo
name|getClusterUserInfo
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
function_decl|;
comment|/**    * This method retrieves the cluster metrics information, and it is reachable    * by using {@link RMWSConsts#METRICS}.    *    * @see ApplicationClientProtocol#getClusterMetrics    * @return the cluster metrics information    */
DECL|method|getClusterMetricsInfo ()
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
function_decl|;
comment|/**    * This method retrieves the current scheduler status, and it is reachable by    * using {@link RMWSConsts#SCHEDULER}.    *    * @return the current scheduler status    */
DECL|method|getSchedulerInfo ()
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
function_decl|;
comment|/**    * This method dumps the scheduler logs for the time got in input, and it is    * reachable by using {@link RMWSConsts#SCHEDULER_LOGS}.    *    * @param time the period of time. It is a FormParam.    * @param hsr the servlet request    * @return the result of the operation    * @throws IOException when it cannot create dump log file    */
DECL|method|dumpSchedulerLogs (String time, HttpServletRequest hsr)
name|String
name|dumpSchedulerLogs
parameter_list|(
name|String
name|time
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method retrieves all the nodes information in the cluster, and it is    * reachable by using {@link RMWSConsts#NODES}.    *    * @see ApplicationClientProtocol#getClusterNodes    * @param states the states we want to filter. It is a QueryParam.    * @return all nodes in the cluster. If the states param is given, returns all    *         nodes that are in the comma-separated list of states    */
DECL|method|getNodes (String states)
name|NodesInfo
name|getNodes
parameter_list|(
name|String
name|states
parameter_list|)
function_decl|;
comment|/**    * This method retrieves a specific node information, and it is reachable by    * using {@link RMWSConsts#NODES_NODEID}.    *    * @param nodeId the node we want to retrieve the information. It is a    *          PathParam.    * @return the information about the node in input    */
DECL|method|getNode (String nodeId)
name|NodeInfo
name|getNode
parameter_list|(
name|String
name|nodeId
parameter_list|)
function_decl|;
comment|/**    * This method changes the resources of a specific node, and it is reachable    * by using {@link RMWSConsts#NODE_RESOURCE}.    *    * @param hsr The servlet request.    * @param nodeId The node we want to retrieve the information for.    *               It is a PathParam.    * @param resourceOption The resource change.    * @throws AuthorizationException If the user is not authorized.    */
DECL|method|updateNodeResource (HttpServletRequest hsr, String nodeId, ResourceOptionInfo resourceOption)
name|ResourceInfo
name|updateNodeResource
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|ResourceOptionInfo
name|resourceOption
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
comment|/**    * This method retrieves all the app reports in the cluster, and it is    * reachable by using {@link RMWSConsts#APPS}.    *    * @see ApplicationClientProtocol#getApplications    * @param hsr the servlet request    * @param stateQuery right now the stateQuery is deprecated. It is a    *          QueryParam.    * @param statesQuery filter the result by states. It is a QueryParam.    * @param finalStatusQuery filter the result by final states. It is a    *          QueryParam.    * @param userQuery filter the result by user. It is a QueryParam.    * @param queueQuery filter the result by queue. It is a QueryParam.    * @param count set a limit of the result. It is a QueryParam.    * @param startedBegin filter the result by started begin time. It is a    *          QueryParam.    * @param startedEnd filter the result by started end time. It is a    *          QueryParam.    * @param finishBegin filter the result by finish begin time. It is a    *          QueryParam.    * @param finishEnd filter the result by finish end time. It is a QueryParam.    * @param applicationTypes filter the result by types. It is a QueryParam.    * @param applicationTags filter the result by tags. It is a QueryParam.    * @param unselectedFields De-selected params to avoid from report. It is a    *          QueryParam.    * @return all apps in the cluster    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|getApps (HttpServletRequest hsr, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes, Set<String> applicationTags, Set<String> unselectedFields)
name|AppsInfo
name|getApps
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|stateQuery
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
name|String
name|finalStatusQuery
parameter_list|,
name|String
name|userQuery
parameter_list|,
name|String
name|queueQuery
parameter_list|,
name|String
name|count
parameter_list|,
name|String
name|startedBegin
parameter_list|,
name|String
name|startedEnd
parameter_list|,
name|String
name|finishBegin
parameter_list|,
name|String
name|finishEnd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
function_decl|;
comment|/**    * This method retrieve all the activities in a specific node, and it is    * reachable by using {@link RMWSConsts#SCHEDULER_ACTIVITIES}.    *    * @param hsr the servlet request    * @param nodeId the node we want to retrieve the activities. It is a    *          QueryParam.    * @return all the activities in the specific node    */
DECL|method|getActivities (HttpServletRequest hsr, String nodeId)
name|ActivitiesInfo
name|getActivities
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|)
function_decl|;
comment|/**    * This method retrieves all the activities for a specific app for a specific    * period of time, and it is reachable by using    * {@link RMWSConsts#SCHEDULER_APP_ACTIVITIES}.    *    * @param hsr the servlet request    * @param appId the applicationId we want to retrieve the activities. It is a    *          QueryParam.    * @param time for how long we want to retrieve the activities. It is a    *          QueryParam.    * @param requestPriorities the request priorities we want to retrieve the    *          activities. It is a QueryParam.    * @param allocationRequestIds the allocation request ids we want to retrieve    *          the activities. It is a QueryParam.    * @return all the activities about a specific app for a specific time    */
DECL|method|getAppActivities (HttpServletRequest hsr, String appId, String time, Set<String> requestPriorities, Set<String> allocationRequestIds)
name|AppActivitiesInfo
name|getAppActivities
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|time
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestPriorities
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationRequestIds
parameter_list|)
function_decl|;
comment|/**    * This method retrieves all the statistics for a specific app, and it is    * reachable by using {@link RMWSConsts#APP_STATISTICS}.    *    * @param hsr the servlet request    * @param stateQueries filter the result by states. It is a QueryParam.    * @param typeQueries filter the result by type names. It is a QueryParam.    * @return the application's statistics for specific states and types    */
DECL|method|getAppStatistics (HttpServletRequest hsr, Set<String> stateQueries, Set<String> typeQueries)
name|ApplicationStatisticsInfo
name|getAppStatistics
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|stateQueries
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeQueries
parameter_list|)
function_decl|;
comment|/**    * This method retrieves the report for a specific app, and it is reachable by    * using {@link RMWSConsts#APPS_APPID}.    *    * @see ApplicationClientProtocol#getApplicationReport    * @param hsr the servlet request    * @param appId the Id of the application we want the report. It is a    *          PathParam.    * @param unselectedFields De-selected param list to avoid from report. It is    *          a QueryParam.    * @return the app report for a specific application    */
DECL|method|getApp (HttpServletRequest hsr, String appId, Set<String> unselectedFields)
name|AppInfo
name|getApp
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
function_decl|;
comment|/**    * This method retrieves the state for a specific app, and it is reachable by    * using {@link RMWSConsts#APPS_APPID_STATE}.    *    * @param hsr the servlet request    * @param appId the Id of the application we want the state. It is a    *          PathParam.    * @return the state for a specific application    * @throws AuthorizationException if the user is not authorized    */
DECL|method|getAppState (HttpServletRequest hsr, String appId)
name|AppState
name|getAppState
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
comment|/**    * This method updates the state of the app in input, and it is reachable by    * using {@link RMWSConsts#APPS_APPID_STATE}.    *    * @param targetState the target state for the app. It is a content param.    * @param hsr the servlet request    * @param appId the Id of the application we want to update the state. It is a    *          PathParam.    * @return Response containing the status code    * @throws AuthorizationException if the user is not authorized to invoke this    *           method    * @throws YarnException if app does not exist    * @throws InterruptedException if interrupted    * @throws IOException if doAs action throws an IOException    */
DECL|method|updateAppState (AppState targetState, HttpServletRequest hsr, String appId)
name|Response
name|updateAppState
parameter_list|(
name|AppState
name|targetState
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
function_decl|;
comment|/**    * This method retrieves all the node labels with the respective nodes in the    * cluster, and it is reachable by using    * {@link RMWSConsts#GET_NODE_TO_LABELS}.    *    * @see ApplicationClientProtocol#getNodeToLabels    * @param hsr the servlet request    * @return all the nodes within a node label    * @throws IOException if an IOException happened    */
DECL|method|getNodeToLabels (HttpServletRequest hsr)
name|NodeToLabelsInfo
name|getNodeToLabels
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method retrieves all the node within multiple node labels in the    * cluster, and it is reachable by using {@link RMWSConsts#LABEL_MAPPINGS}.    *    * @see ApplicationClientProtocol#getLabelsToNodes    * @param labels filter the result by node labels. It is a QueryParam.    * @return all the nodes within multiple node labels    * @throws IOException if an IOException happened    */
DECL|method|getLabelsToNodes (Set<String> labels)
name|LabelsToNodesInfo
name|getLabelsToNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method replaces all the node labels for specific nodes, and it is    * reachable by using {@link RMWSConsts#REPLACE_NODE_TO_LABELS}.    *    * @see ResourceManagerAdministrationProtocol#replaceLabelsOnNode    * @param newNodeToLabels the list of new labels. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws Exception if an exception happened    */
DECL|method|replaceLabelsOnNodes (NodeToLabelsEntryList newNodeToLabels, HttpServletRequest hsr)
name|Response
name|replaceLabelsOnNodes
parameter_list|(
name|NodeToLabelsEntryList
name|newNodeToLabels
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * This method replaces all the node labels for specific node, and it is    * reachable by using {@link RMWSConsts#NODES_NODEID_REPLACE_LABELS}.    *    * @see ResourceManagerAdministrationProtocol#replaceLabelsOnNode    * @param newNodeLabelsName the list of new labels. It is a QueryParam.    * @param hsr the servlet request    * @param nodeId the node we want to replace the node labels. It is a    *          PathParam.    * @return Response containing the status code    * @throws Exception if an exception happened    */
DECL|method|replaceLabelsOnNode (Set<String> newNodeLabelsName, HttpServletRequest hsr, String nodeId)
name|Response
name|replaceLabelsOnNode
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|newNodeLabelsName
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * This method retrieves all the node labels in the cluster, and it is    * reachable by using {@link RMWSConsts#GET_NODE_LABELS}.    *    * @see ApplicationClientProtocol#getClusterNodeLabels    * @param hsr the servlet request    * @return all the node labels in the cluster    * @throws IOException if an IOException happened    */
DECL|method|getClusterNodeLabels (HttpServletRequest hsr)
name|NodeLabelsInfo
name|getClusterNodeLabels
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method adds specific node labels for specific nodes, and it is    * reachable by using {@link RMWSConsts#ADD_NODE_LABELS}.    *    * @see ResourceManagerAdministrationProtocol#addToClusterNodeLabels    * @param newNodeLabels the node labels to add. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws Exception in case of bad request    */
DECL|method|addToClusterNodeLabels (NodeLabelsInfo newNodeLabels, HttpServletRequest hsr)
name|Response
name|addToClusterNodeLabels
parameter_list|(
name|NodeLabelsInfo
name|newNodeLabels
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * This method removes all the node labels for specific nodes, and it is    * reachable by using {@link RMWSConsts#REMOVE_NODE_LABELS}.    *    * @see ResourceManagerAdministrationProtocol#removeFromClusterNodeLabels    * @param oldNodeLabels the node labels to remove. It is a QueryParam.    * @param hsr the servlet request    * @return Response containing the status code    * @throws Exception in case of bad request    */
DECL|method|removeFromCluserNodeLabels (Set<String> oldNodeLabels, HttpServletRequest hsr)
name|Response
name|removeFromCluserNodeLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|oldNodeLabels
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * This method retrieves all the node labels for specific node, and it is    * reachable by using {@link RMWSConsts#NODES_NODEID_GETLABELS}.    *    * @param hsr the servlet request    * @param nodeId the node we want to get all the node labels. It is a    *          PathParam.    * @return all the labels for a specific node.    * @throws IOException if an IOException happened    */
DECL|method|getLabelsOnNode (HttpServletRequest hsr, String nodeId)
name|NodeLabelsInfo
name|getLabelsOnNode
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method retrieves the priority for a specific app, and it is reachable    * by using {@link RMWSConsts#APPS_APPID_PRIORITY}.    *    * @param hsr the servlet request    * @param appId the app we want to get the priority. It is a PathParam.    * @return the priority for a specific application    * @throws AuthorizationException in case of the user is not authorized    */
DECL|method|getAppPriority (HttpServletRequest hsr, String appId)
name|AppPriority
name|getAppPriority
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
comment|/**    * This method updates the priority for a specific application, and it is    * reachable by using {@link RMWSConsts#APPS_APPID_PRIORITY}.    *    * @param targetPriority the priority we want to set for the app. It is a    *          content param.    * @param hsr the servlet request    * @param appId the application we want to update its priority. It is a    *          PathParam.    * @return Response containing the status code    * @throws AuthorizationException if the user is not authenticated    * @throws YarnException if the target is null    * @throws IOException if the update fails.    * @throws InterruptedException if interrupted.    */
DECL|method|updateApplicationPriority (AppPriority targetPriority, HttpServletRequest hsr, String appId)
name|Response
name|updateApplicationPriority
parameter_list|(
name|AppPriority
name|targetPriority
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
function_decl|;
comment|/**    * This method retrieves the queue for a specific app, and it is reachable by    * using {@link RMWSConsts#APPS_APPID_QUEUE}.    *    * @param hsr the servlet request    * @param appId the application we want to retrieve its queue. It is a    *          PathParam.    * @return the Queue for a specific application.    * @throws AuthorizationException if the user is not authenticated    */
DECL|method|getAppQueue (HttpServletRequest hsr, String appId)
name|AppQueue
name|getAppQueue
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
comment|/**    * This method updates the queue for a specific application, and it is    * reachable by using {@link RMWSConsts#APPS_APPID_QUEUE}.    *    * @param targetQueue the queue we want to set. It is a content param.    * @param hsr the servlet request    * @param appId the application we want to change its queue. It is a    *          PathParam.    * @return Response containing the status code    * @throws AuthorizationException if the user is not authenticated    * @throws YarnException if the app is not found    * @throws IOException if the update fails.    * @throws InterruptedException if interrupted.    */
DECL|method|updateAppQueue (AppQueue targetQueue, HttpServletRequest hsr, String appId)
name|Response
name|updateAppQueue
parameter_list|(
name|AppQueue
name|targetQueue
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
function_decl|;
comment|/**    * Generates a new ApplicationId which is then sent to the client. This method    * is reachable by using {@link RMWSConsts#APPS_NEW_APPLICATION}.    *    * @see ApplicationClientProtocol#getNewApplication    *    * @param hsr the servlet request    * @return Response containing the app id and the maximum resource    *         capabilities    * @throws AuthorizationException if the user is not authorized to invoke this    *           method    * @throws IOException if the creation fails    * @throws InterruptedException if interrupted    */
DECL|method|createNewApplication (HttpServletRequest hsr)
name|Response
name|createNewApplication
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Function to submit an app to the RM. This method is reachable by using    * {@link RMWSConsts#APPS}.    *    * @see ApplicationClientProtocol#submitApplication    *    * @param newApp structure containing information to construct the    *          ApplicationSubmissionContext. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException if the user is not authorized to invoke this    *           method    * @throws IOException if the submission failed    * @throws InterruptedException if interrupted    */
DECL|method|submitApplication (ApplicationSubmissionContextInfo newApp, HttpServletRequest hsr)
name|Response
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * This method posts a delegation token from the client, and it is reachable    * by using {@link RMWSConsts#DELEGATION_TOKEN}.    *    * @see ApplicationBaseProtocol#getDelegationToken    * @param tokenData the token to delegate. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException if Kerberos auth failed    * @throws IOException if the delegation failed    * @throws InterruptedException if interrupted    * @throws Exception in case of bad request    */
DECL|method|postDelegationToken (DelegationToken tokenData, HttpServletRequest hsr)
name|Response
name|postDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
function_decl|;
comment|/**    * This method updates the expiration for a delegation token from the client,    * and it is reachable by using    * {@link RMWSConsts#DELEGATION_TOKEN_EXPIRATION}.    *    * @see ApplicationBaseProtocol#renewDelegationToken    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException if Kerberos auth failed    * @throws IOException if the delegation failed    * @throws Exception in case of bad request    */
DECL|method|postDelegationTokenExpiration (HttpServletRequest hsr)
name|Response
name|postDelegationTokenExpiration
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|Exception
function_decl|;
comment|/**    * This method cancel the delegation token from the client, and it is    * reachable by using {@link RMWSConsts#DELEGATION_TOKEN}.    *    * @see ApplicationBaseProtocol#cancelDelegationToken    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException if Kerberos auth failed    * @throws IOException if the delegation failed    * @throws InterruptedException if interrupted    * @throws Exception in case of bad request    */
DECL|method|cancelDelegationToken (HttpServletRequest hsr)
name|Response
name|cancelDelegationToken
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
function_decl|;
comment|/**    * Generates a new ReservationId which is then sent to the client. This method    * is reachable by using {@link RMWSConsts#RESERVATION_NEW}.    *    * @see ApplicationClientProtocol#getNewReservation    *    * @param hsr the servlet request    * @return Response containing the app id and the maximum resource    *         capabilities    * @throws AuthorizationException if the user is not authorized to invoke this    *           method.    * @throws IOException if creation failed    * @throws InterruptedException if interrupted    */
DECL|method|createNewReservation (HttpServletRequest hsr)
name|Response
name|createNewReservation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Function to submit a Reservation to the RM.This method is reachable by    * using {@link RMWSConsts#RESERVATION_SUBMIT}.    *    * @see ApplicationClientProtocol#submitReservation    *    * @param resContext provides information to construct the    *          ReservationSubmissionRequest. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException if the user is not authorized to invoke this    *           method    * @throws IOException if creation failed    * @throws InterruptedException if interrupted    */
DECL|method|submitReservation (ReservationSubmissionRequestInfo resContext, HttpServletRequest hsr)
name|Response
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequestInfo
name|resContext
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Function to update a Reservation to the RM. This method is reachable by    * using {@link RMWSConsts#RESERVATION_UPDATE}.    *    * @see ApplicationClientProtocol#updateReservation    *    * @param resContext provides information to construct the    *          ReservationUpdateRequest. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException if the user is not authorized to invoke this    *           method    * @throws IOException if the operation failed    * @throws InterruptedException if interrupted    */
DECL|method|updateReservation (ReservationUpdateRequestInfo resContext, HttpServletRequest hsr)
name|Response
name|updateReservation
parameter_list|(
name|ReservationUpdateRequestInfo
name|resContext
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Function to delete a Reservation to the RM. This method is reachable by    * using {@link RMWSConsts#RESERVATION_DELETE}.    *    * @see ApplicationClientProtocol#deleteReservation    *    * @param resContext provides information to construct the    *          ReservationDeleteRequest. It is a content param.    * @param hsr the servlet request    * @return Response containing the status code    * @throws AuthorizationException when the user group information cannot be    *           retrieved.    * @throws IOException when a {@link ReservationDeleteRequest} cannot be    *           created from the {@link ReservationDeleteRequestInfo}. This    *           exception is also thrown on    *           {@code ClientRMService.deleteReservation} invokation failure.    * @throws InterruptedException if doAs action throws an InterruptedException.    */
DECL|method|deleteReservation (ReservationDeleteRequestInfo resContext, HttpServletRequest hsr)
name|Response
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequestInfo
name|resContext
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Function to retrieve a list of all the reservations. This method is    * reachable by using {@link RMWSConsts#RESERVATION_LIST}.    *    * @see ApplicationClientProtocol#listReservations    * @param queue filter the result by queue. It is a QueryParam.    * @param reservationId filter the result by reservationId. It is a    *          QueryParam.    * @param startTime filter the result by start time. It is a QueryParam.    * @param endTime filter the result by end time. It is a QueryParam.    * @param includeResourceAllocations true if the resource allocation should be    *          in the result, false otherwise. It is a QueryParam.    * @param hsr the servlet request    * @return Response containing the status code    * @throws Exception in case of bad request    */
DECL|method|listReservation (String queue, String reservationId, long startTime, long endTime, boolean includeResourceAllocations, HttpServletRequest hsr)
name|Response
name|listReservation
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|reservationId
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|boolean
name|includeResourceAllocations
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * This method retrieves the timeout information for a specific app with a    * specific type, and it is reachable by using    * {@link RMWSConsts#APPS_TIMEOUTS_TYPE}.    *    * @param hsr the servlet request    * @param appId the application we want to get the timeout. It is a PathParam.    * @param type the type of the timeouts. It is a PathParam.    * @return the timeout for a specific application with a specific type.    * @throws AuthorizationException if the user is not authorized    */
DECL|method|getAppTimeout (HttpServletRequest hsr, String appId, String type)
name|AppTimeoutInfo
name|getAppTimeout
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
comment|/**    * This method retrieves the timeout information for a specific app, and it is    * reachable by using {@link RMWSConsts#APPS_TIMEOUTS}.    *    * @param hsr the servlet request    * @param appId the application we want to get the timeouts. It is a    *          PathParam.    * @return the timeouts for a specific application    * @throws AuthorizationException if the user is not authorized    */
DECL|method|getAppTimeouts (HttpServletRequest hsr, String appId)
name|AppTimeoutsInfo
name|getAppTimeouts
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
comment|/**    * This method updates the timeout information for a specific app, and it is    * reachable by using {@link RMWSConsts#APPS_TIMEOUT}.    *    * @see ApplicationClientProtocol#updateApplicationTimeouts    * @param appTimeout the appTimeoutInfo. It is a content param.    * @param hsr the servlet request    * @param appId the application we want to update. It is a PathParam.    * @return Response containing the status code    * @throws AuthorizationException if the user is not authorized to invoke this    *           method    * @throws YarnException in case of bad request    * @throws IOException if the operation failed    * @throws InterruptedException if interrupted    */
DECL|method|updateApplicationTimeout (AppTimeoutInfo appTimeout, HttpServletRequest hsr, String appId)
name|Response
name|updateApplicationTimeout
parameter_list|(
name|AppTimeoutInfo
name|appTimeout
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
function_decl|;
comment|/**    * This method retrieves all the attempts information for a specific app, and    * it is reachable by using {@link RMWSConsts#APPS_APPID_APPATTEMPTS}.    *    * @see ApplicationBaseProtocol#getApplicationAttempts    * @param hsr the servlet request    * @param appId the application we want to get the attempts. It is a    *          PathParam.    * @return all the attempts info for a specific application    */
DECL|method|getAppAttempts (HttpServletRequest hsr, String appId)
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
function_decl|;
comment|/**    * This method verifies if an user has access to a specified queue.    *    * @return Response containing the status code.    *    * @param queue queue    * @param username user    * @param queueAclType acl type of queue, it could be    *                     SUBMIT_APPLICATIONS/ADMINISTER_QUEUE    * @param hsr request    *    * @throws AuthorizationException if the user is not authorized to invoke this    *                                method.    */
DECL|method|checkUserAccessToQueue (String queue, String username, String queueAclType, HttpServletRequest hsr)
name|RMQueueAclInfo
name|checkUserAccessToQueue
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|queueAclType
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
function_decl|;
block|}
end_interface

end_unit

