begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivityNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|AppAllocation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  * DAO object to display application allocation detailed information.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|AppAllocationInfo
specifier|public
class|class
name|AppAllocationInfo
block|{
DECL|field|nodeId
specifier|protected
name|String
name|nodeId
decl_stmt|;
DECL|field|queueName
specifier|protected
name|String
name|queueName
decl_stmt|;
DECL|field|appPriority
specifier|protected
name|String
name|appPriority
decl_stmt|;
DECL|field|allocatedContainerId
specifier|protected
name|String
name|allocatedContainerId
decl_stmt|;
DECL|field|allocationState
specifier|protected
name|String
name|allocationState
decl_stmt|;
DECL|field|diagnostic
specifier|protected
name|String
name|diagnostic
decl_stmt|;
DECL|field|timeStamp
specifier|protected
name|String
name|timeStamp
decl_stmt|;
DECL|field|allocationAttempt
specifier|protected
name|List
argument_list|<
name|ActivityNodeInfo
argument_list|>
name|allocationAttempt
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AppAllocationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AppAllocationInfo ()
name|AppAllocationInfo
parameter_list|()
block|{   }
DECL|method|AppAllocationInfo (AppAllocation allocation)
name|AppAllocationInfo
parameter_list|(
name|AppAllocation
name|allocation
parameter_list|)
block|{
name|this
operator|.
name|allocationAttempt
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|allocation
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|allocation
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|this
operator|.
name|appPriority
operator|=
name|allocation
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|this
operator|.
name|allocatedContainerId
operator|=
name|allocation
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|this
operator|.
name|allocationState
operator|=
name|allocation
operator|.
name|getAppState
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|this
operator|.
name|diagnostic
operator|=
name|allocation
operator|.
name|getDiagnostic
argument_list|()
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|allocation
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeStamp
operator|=
name|date
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|ActivityNode
name|attempt
range|:
name|allocation
operator|.
name|getAllocationAttempts
argument_list|()
control|)
block|{
name|ActivityNodeInfo
name|containerInfo
init|=
operator|new
name|ActivityNodeInfo
argument_list|(
name|attempt
argument_list|)
decl_stmt|;
name|this
operator|.
name|allocationAttempt
operator|.
name|add
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

