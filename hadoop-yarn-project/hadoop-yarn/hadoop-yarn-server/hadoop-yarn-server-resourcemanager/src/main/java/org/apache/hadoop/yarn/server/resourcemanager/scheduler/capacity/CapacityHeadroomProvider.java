begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|CapacityHeadroomProvider
specifier|public
class|class
name|CapacityHeadroomProvider
block|{
DECL|field|user
name|LeafQueue
operator|.
name|User
name|user
decl_stmt|;
DECL|field|queue
name|LeafQueue
name|queue
decl_stmt|;
DECL|field|application
name|FiCaSchedulerApp
name|application
decl_stmt|;
DECL|field|queueResourceLimitsInfo
name|LeafQueue
operator|.
name|QueueResourceLimitsInfo
name|queueResourceLimitsInfo
decl_stmt|;
DECL|method|CapacityHeadroomProvider (LeafQueue.User user, LeafQueue queue, FiCaSchedulerApp application, LeafQueue.QueueResourceLimitsInfo queueResourceLimitsInfo)
specifier|public
name|CapacityHeadroomProvider
parameter_list|(
name|LeafQueue
operator|.
name|User
name|user
parameter_list|,
name|LeafQueue
name|queue
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|LeafQueue
operator|.
name|QueueResourceLimitsInfo
name|queueResourceLimitsInfo
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
name|this
operator|.
name|queueResourceLimitsInfo
operator|=
name|queueResourceLimitsInfo
expr_stmt|;
block|}
DECL|method|getHeadroom ()
specifier|public
name|Resource
name|getHeadroom
parameter_list|()
block|{
name|Resource
name|queueCurrentLimit
decl_stmt|;
name|Resource
name|clusterResource
decl_stmt|;
synchronized|synchronized
init|(
name|queueResourceLimitsInfo
init|)
block|{
name|queueCurrentLimit
operator|=
name|queueResourceLimitsInfo
operator|.
name|getQueueCurrentLimit
argument_list|()
expr_stmt|;
name|clusterResource
operator|=
name|queueResourceLimitsInfo
operator|.
name|getClusterResource
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|requestedPartitions
init|=
name|application
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getRequestedPartitions
argument_list|()
decl_stmt|;
name|Resource
name|headroom
decl_stmt|;
if|if
condition|(
name|requestedPartitions
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|requestedPartitions
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|requestedPartitions
operator|.
name|contains
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|)
condition|)
block|{
name|headroom
operator|=
name|queue
operator|.
name|getHeadroom
argument_list|(
name|user
argument_list|,
name|queueCurrentLimit
argument_list|,
name|clusterResource
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headroom
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partition
range|:
name|requestedPartitions
control|)
block|{
name|Resource
name|partitionHeadRoom
init|=
name|queue
operator|.
name|getHeadroom
argument_list|(
name|user
argument_list|,
name|queueCurrentLimit
argument_list|,
name|clusterResource
argument_list|,
name|application
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|headroom
argument_list|,
name|partitionHeadRoom
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Corner case to deal with applications being slightly over-limit
if|if
condition|(
name|headroom
operator|.
name|getMemory
argument_list|()
operator|<
literal|0
condition|)
block|{
name|headroom
operator|.
name|setMemory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|headroom
return|;
block|}
block|}
end_class

end_unit

