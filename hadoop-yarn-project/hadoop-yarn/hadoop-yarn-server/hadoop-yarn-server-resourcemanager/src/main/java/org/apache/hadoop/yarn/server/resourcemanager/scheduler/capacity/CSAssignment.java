begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|AssignmentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|CSAssignment
specifier|public
class|class
name|CSAssignment
block|{
DECL|field|NULL_ASSIGNMENT
specifier|public
specifier|static
specifier|final
name|CSAssignment
name|NULL_ASSIGNMENT
init|=
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
decl_stmt|;
DECL|field|SKIP_ASSIGNMENT
specifier|public
specifier|static
specifier|final
name|CSAssignment
name|SKIP_ASSIGNMENT
init|=
operator|new
name|CSAssignment
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|field|type
specifier|private
name|NodeType
name|type
decl_stmt|;
DECL|field|excessReservation
specifier|private
name|RMContainer
name|excessReservation
decl_stmt|;
DECL|field|application
specifier|private
name|FiCaSchedulerApp
name|application
decl_stmt|;
DECL|field|skipped
specifier|private
specifier|final
name|boolean
name|skipped
decl_stmt|;
DECL|field|fulfilledReservation
specifier|private
name|boolean
name|fulfilledReservation
decl_stmt|;
DECL|field|assignmentInformation
specifier|private
specifier|final
name|AssignmentInformation
name|assignmentInformation
decl_stmt|;
DECL|field|increaseAllocation
specifier|private
name|boolean
name|increaseAllocation
decl_stmt|;
DECL|method|CSAssignment (Resource resource, NodeType type)
specifier|public
name|CSAssignment
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|NodeType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|resource
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CSAssignment (FiCaSchedulerApp application, RMContainer excessReservation)
specifier|public
name|CSAssignment
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|RMContainer
name|excessReservation
parameter_list|)
block|{
name|this
argument_list|(
name|excessReservation
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|excessReservation
argument_list|,
name|application
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CSAssignment (boolean skipped)
specifier|public
name|CSAssignment
parameter_list|(
name|boolean
name|skipped
parameter_list|)
block|{
name|this
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|skipped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CSAssignment (Resource resource, NodeType type, RMContainer excessReservation, FiCaSchedulerApp application, boolean skipped, boolean fulfilledReservation)
specifier|public
name|CSAssignment
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|excessReservation
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|boolean
name|skipped
parameter_list|,
name|boolean
name|fulfilledReservation
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|excessReservation
operator|=
name|excessReservation
expr_stmt|;
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
name|this
operator|.
name|skipped
operator|=
name|skipped
expr_stmt|;
name|this
operator|.
name|fulfilledReservation
operator|=
name|fulfilledReservation
expr_stmt|;
name|this
operator|.
name|assignmentInformation
operator|=
operator|new
name|AssignmentInformation
argument_list|()
expr_stmt|;
block|}
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|setResource (Resource resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|NodeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (NodeType type)
specifier|public
name|void
name|setType
parameter_list|(
name|NodeType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getApplication ()
specifier|public
name|FiCaSchedulerApp
name|getApplication
parameter_list|()
block|{
return|return
name|application
return|;
block|}
DECL|method|setApplication (FiCaSchedulerApp application)
specifier|public
name|void
name|setApplication
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
block|}
DECL|method|getExcessReservation ()
specifier|public
name|RMContainer
name|getExcessReservation
parameter_list|()
block|{
return|return
name|excessReservation
return|;
block|}
DECL|method|setExcessReservation (RMContainer rmContainer)
specifier|public
name|void
name|setExcessReservation
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|excessReservation
operator|=
name|rmContainer
expr_stmt|;
block|}
DECL|method|getSkipped ()
specifier|public
name|boolean
name|getSkipped
parameter_list|()
block|{
return|return
name|skipped
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|"resource:"
operator|+
name|resource
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ret
operator|+=
literal|"; type:"
operator|+
name|type
expr_stmt|;
name|ret
operator|+=
literal|"; excessReservation:"
operator|+
name|excessReservation
expr_stmt|;
name|ret
operator|+=
literal|"; applicationid:"
operator|+
operator|(
name|application
operator|!=
literal|null
condition|?
name|application
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"null"
operator|)
expr_stmt|;
name|ret
operator|+=
literal|"; skipped:"
operator|+
name|skipped
expr_stmt|;
name|ret
operator|+=
literal|"; fulfilled reservation:"
operator|+
name|fulfilledReservation
expr_stmt|;
name|ret
operator|+=
literal|"; allocations(count/resource):"
operator|+
name|assignmentInformation
operator|.
name|getNumAllocations
argument_list|()
operator|+
literal|"/"
operator|+
name|assignmentInformation
operator|.
name|getAllocated
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"; reservations(count/resource):"
operator|+
name|assignmentInformation
operator|.
name|getNumReservations
argument_list|()
operator|+
literal|"/"
operator|+
name|assignmentInformation
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|setFulfilledReservation (boolean fulfilledReservation)
specifier|public
name|void
name|setFulfilledReservation
parameter_list|(
name|boolean
name|fulfilledReservation
parameter_list|)
block|{
name|this
operator|.
name|fulfilledReservation
operator|=
name|fulfilledReservation
expr_stmt|;
block|}
DECL|method|isFulfilledReservation ()
specifier|public
name|boolean
name|isFulfilledReservation
parameter_list|()
block|{
return|return
name|this
operator|.
name|fulfilledReservation
return|;
block|}
DECL|method|getAssignmentInformation ()
specifier|public
name|AssignmentInformation
name|getAssignmentInformation
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignmentInformation
return|;
block|}
DECL|method|isIncreasedAllocation ()
specifier|public
name|boolean
name|isIncreasedAllocation
parameter_list|()
block|{
return|return
name|increaseAllocation
return|;
block|}
DECL|method|setIncreasedAllocation (boolean flag)
specifier|public
name|void
name|setIncreasedAllocation
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|increaseAllocation
operator|=
name|flag
expr_stmt|;
block|}
block|}
end_class

end_unit

