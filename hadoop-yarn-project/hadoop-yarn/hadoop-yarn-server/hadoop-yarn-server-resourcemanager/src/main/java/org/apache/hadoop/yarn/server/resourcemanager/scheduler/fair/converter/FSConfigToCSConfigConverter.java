begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|ConfigurableResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Converts Fair Scheduler configuration (site and fair-scheduler.xml)  * to Capacity Scheduler. The mapping is not 100% perfect due to  * feature gaps. These will be addressed in the future.  */
end_comment

begin_class
DECL|class|FSConfigToCSConfigConverter
specifier|public
class|class
name|FSConfigToCSConfigConverter
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSConfigToCSConfigConverter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|YARN_SITE_XML
specifier|private
specifier|static
specifier|final
name|String
name|YARN_SITE_XML
init|=
literal|"yarn-site.xml"
decl_stmt|;
DECL|field|CAPACITY_SCHEDULER_XML
specifier|private
specifier|static
specifier|final
name|String
name|CAPACITY_SCHEDULER_XML
init|=
literal|"capacity-scheduler.xml"
decl_stmt|;
DECL|field|FAIR_SCHEDULER_XML
specifier|private
specifier|static
specifier|final
name|String
name|FAIR_SCHEDULER_XML
init|=
literal|"fair-scheduler.xml"
decl_stmt|;
DECL|field|WARNING_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|WARNING_TEXT
init|=
literal|"WARNING: This feature is experimental and not intended "
operator|+
literal|"for production use!"
decl_stmt|;
DECL|field|clusterResource
specifier|private
name|Resource
name|clusterResource
decl_stmt|;
DECL|field|preemptionEnabled
specifier|private
name|boolean
name|preemptionEnabled
init|=
literal|false
decl_stmt|;
DECL|field|queueMaxAppsDefault
specifier|private
name|int
name|queueMaxAppsDefault
decl_stmt|;
DECL|field|queueMaxAMShareDefault
specifier|private
name|float
name|queueMaxAMShareDefault
decl_stmt|;
DECL|field|autoCreateChildQueues
specifier|private
name|boolean
name|autoCreateChildQueues
init|=
literal|false
decl_stmt|;
DECL|field|sizeBasedWeight
specifier|private
name|boolean
name|sizeBasedWeight
init|=
literal|false
decl_stmt|;
DECL|field|userAsDefaultQueue
specifier|private
name|boolean
name|userAsDefaultQueue
init|=
literal|false
decl_stmt|;
DECL|field|yarnSiteConfig
specifier|private
name|Configuration
name|yarnSiteConfig
decl_stmt|;
DECL|field|capacitySchedulerConfig
specifier|private
name|Configuration
name|capacitySchedulerConfig
decl_stmt|;
DECL|field|ruleHandler
specifier|private
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
decl_stmt|;
DECL|field|yarnSiteOutputStream
specifier|private
name|OutputStream
name|yarnSiteOutputStream
decl_stmt|;
DECL|field|capacitySchedulerOutputStream
specifier|private
name|OutputStream
name|capacitySchedulerOutputStream
decl_stmt|;
DECL|field|consoleMode
specifier|private
name|boolean
name|consoleMode
init|=
literal|false
decl_stmt|;
DECL|method|FSConfigToCSConfigConverter (FSConfigToCSConfigRuleHandler ruleHandler)
specifier|public
name|FSConfigToCSConfigConverter
parameter_list|(
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
parameter_list|)
block|{
name|this
operator|.
name|ruleHandler
operator|=
name|ruleHandler
expr_stmt|;
name|this
operator|.
name|yarnSiteOutputStream
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|this
operator|.
name|capacitySchedulerOutputStream
operator|=
name|System
operator|.
name|out
expr_stmt|;
block|}
DECL|method|convert (FSConfigToCSConfigConverterParams params)
specifier|public
name|void
name|convert
parameter_list|(
name|FSConfigToCSConfigConverterParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|validateParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|prepareOutputFiles
argument_list|(
name|params
operator|.
name|getOutputDirectory
argument_list|()
argument_list|,
name|params
operator|.
name|isConsole
argument_list|()
argument_list|)
expr_stmt|;
name|loadConversionRules
argument_list|(
name|params
operator|.
name|getConversionRulesConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|handleFairSchedulerConfig
argument_list|(
name|params
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterResource
operator|=
name|getClusterResource
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|convert
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareOutputFiles (String outputDirectory, boolean console)
specifier|private
name|void
name|prepareOutputFiles
parameter_list|(
name|String
name|outputDirectory
parameter_list|,
name|boolean
name|console
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|console
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Console mode is enabled, "
operator|+
name|YARN_SITE_XML
operator|+
literal|" and"
operator|+
literal|" "
operator|+
name|CAPACITY_SCHEDULER_XML
operator|+
literal|" will be only emitted "
operator|+
literal|"to the console!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|consoleMode
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|File
name|yarnSiteXmlOutput
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|YARN_SITE_XML
argument_list|)
decl_stmt|;
name|File
name|schedulerXmlOutput
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|CAPACITY_SCHEDULER_XML
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Output directory for "
operator|+
name|YARN_SITE_XML
operator|+
literal|" and"
operator|+
literal|" "
operator|+
name|CAPACITY_SCHEDULER_XML
operator|+
literal|" is: {}"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
name|this
operator|.
name|yarnSiteOutputStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|yarnSiteXmlOutput
argument_list|)
expr_stmt|;
name|this
operator|.
name|capacitySchedulerOutputStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|schedulerXmlOutput
argument_list|)
expr_stmt|;
block|}
DECL|method|validateParams (FSConfigToCSConfigConverterParams params)
specifier|private
name|void
name|validateParams
parameter_list|(
name|FSConfigToCSConfigConverterParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|.
name|getYarnSiteXmlConfig
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
literal|""
operator|+
name|YARN_SITE_XML
operator|+
literal|" configuration "
operator|+
literal|"is not defined but it is mandatory!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|getOutputDirectory
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|params
operator|.
name|isConsole
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
literal|"Output directory configuration "
operator|+
literal|"is not defined but it is mandatory!"
argument_list|)
throw|;
block|}
block|}
DECL|method|getClusterResource ( FSConfigToCSConfigConverterParams params)
specifier|private
name|Resource
name|getClusterResource
parameter_list|(
name|FSConfigToCSConfigConverterParams
name|params
parameter_list|)
block|{
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getClusterResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ConfigurableResource
name|configurableResource
decl_stmt|;
try|try
block|{
name|configurableResource
operator|=
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|params
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AllocationConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
literal|"Error while parsing resource."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|resource
operator|=
name|configurableResource
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
DECL|method|loadConversionRules (String rulesFile)
specifier|private
name|void
name|loadConversionRules
parameter_list|(
name|String
name|rulesFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rulesFile
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading conversion rules file from: "
operator|+
name|rulesFile
argument_list|)
expr_stmt|;
name|this
operator|.
name|ruleHandler
operator|.
name|loadRulesFromFile
argument_list|(
name|rulesFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Conversion rules file is not defined, "
operator|+
literal|"using default conversion config!"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createConfiguration ( FSConfigToCSConfigConverterParams params)
specifier|private
name|Configuration
name|createConfiguration
parameter_list|(
name|FSConfigToCSConfigConverterParams
name|params
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|params
operator|.
name|getYarnSiteXmlConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MIGRATION_MODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|handleFairSchedulerConfig ( FSConfigToCSConfigConverterParams params, Configuration conf)
specifier|private
name|void
name|handleFairSchedulerConfig
parameter_list|(
name|FSConfigToCSConfigConverterParams
name|params
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|fairSchedulerXmlConfig
init|=
name|params
operator|.
name|getFairSchedulerXmlConfig
argument_list|()
decl_stmt|;
comment|// Don't override allocation file in conf yet, as it would ruin the second
comment|// condition here
if|if
condition|(
name|fairSchedulerXmlConfig
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using explicitly defined "
operator|+
name|FAIR_SCHEDULER_XML
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
name|FAIR_SCHEDULER_XML
operator|+
literal|" defined in "
operator|+
name|YARN_SITE_XML
operator|+
literal|" by key: "
operator|+
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
literal|""
operator|+
name|FAIR_SCHEDULER_XML
operator|+
literal|" is not defined neither in "
operator|+
name|YARN_SITE_XML
operator|+
literal|"(with property: "
operator|+
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
operator|+
literal|") nor directly with its own parameter!"
argument_list|)
throw|;
block|}
comment|// We can now safely override allocation file in conf
if|if
condition|(
name|fairSchedulerXmlConfig
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|params
operator|.
name|getFairSchedulerXmlConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|convert (Configuration conf)
name|void
name|convert
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|WARNING_TEXT
argument_list|)
expr_stmt|;
comment|// initialize Fair Scheduler
name|RMContext
name|ctx
init|=
operator|new
name|RMContextImpl
argument_list|()
decl_stmt|;
name|PlacementManager
name|placementManager
init|=
operator|new
name|PlacementManager
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|setQueuePlacementManager
argument_list|(
name|placementManager
argument_list|)
expr_stmt|;
name|FairScheduler
name|fs
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setRMContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|fs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
name|fs
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
name|queueMaxAppsDefault
operator|=
name|allocConf
operator|.
name|getQueueMaxAppsDefault
argument_list|()
expr_stmt|;
name|queueMaxAMShareDefault
operator|=
name|allocConf
operator|.
name|getQueueMaxAMShareDefault
argument_list|()
expr_stmt|;
name|yarnSiteConfig
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|capacitySchedulerConfig
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkUserMaxApps
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|checkUserMaxAppsDefault
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|convertYarnSiteXml
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|convertCapacitySchedulerXml
argument_list|(
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|consoleMode
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"======= "
operator|+
name|CAPACITY_SCHEDULER_XML
operator|+
literal|" ======="
argument_list|)
expr_stmt|;
block|}
name|capacitySchedulerConfig
operator|.
name|writeXml
argument_list|(
name|capacitySchedulerOutputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|consoleMode
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"======= "
operator|+
name|YARN_SITE_XML
operator|+
literal|" ======="
argument_list|)
expr_stmt|;
block|}
name|yarnSiteConfig
operator|.
name|writeXml
argument_list|(
name|yarnSiteOutputStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setYarnSiteOutputStream (OutputStream out)
name|void
name|setYarnSiteOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|yarnSiteOutputStream
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setCapacitySchedulerConfigOutputStream (OutputStream out)
name|void
name|setCapacitySchedulerConfigOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|capacitySchedulerOutputStream
operator|=
name|out
expr_stmt|;
block|}
DECL|method|convertYarnSiteXml (Configuration conf)
specifier|private
name|void
name|convertYarnSiteXml
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|FSYarnSiteConverter
name|siteConverter
init|=
operator|new
name|FSYarnSiteConverter
argument_list|()
decl_stmt|;
name|siteConverter
operator|.
name|convertSiteProperties
argument_list|(
name|conf
argument_list|,
name|yarnSiteConfig
argument_list|)
expr_stmt|;
name|autoCreateChildQueues
operator|=
name|siteConverter
operator|.
name|isAutoCreateChildQueues
argument_list|()
expr_stmt|;
name|preemptionEnabled
operator|=
name|siteConverter
operator|.
name|isPreemptionEnabled
argument_list|()
expr_stmt|;
name|sizeBasedWeight
operator|=
name|siteConverter
operator|.
name|isSizeBasedWeight
argument_list|()
expr_stmt|;
name|userAsDefaultQueue
operator|=
name|siteConverter
operator|.
name|isUserAsDefaultQueue
argument_list|()
expr_stmt|;
name|checkReservationSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|convertCapacitySchedulerXml (FairScheduler fs)
specifier|private
name|void
name|convertCapacitySchedulerXml
parameter_list|(
name|FairScheduler
name|fs
parameter_list|)
block|{
name|FSParentQueue
name|rootQueue
init|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|emitDefaultMaxApplications
argument_list|()
expr_stmt|;
name|emitDefaultMaxAMShare
argument_list|()
expr_stmt|;
name|FSQueueConverter
name|queueConverter
init|=
operator|new
name|FSQueueConverter
argument_list|(
name|ruleHandler
argument_list|,
name|capacitySchedulerConfig
argument_list|,
name|preemptionEnabled
argument_list|,
name|sizeBasedWeight
argument_list|,
name|autoCreateChildQueues
argument_list|,
name|clusterResource
argument_list|,
name|queueMaxAMShareDefault
argument_list|,
name|queueMaxAppsDefault
argument_list|)
decl_stmt|;
name|queueConverter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|emitACLs
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|PlacementManager
name|placementManager
init|=
name|fs
operator|.
name|getRMContext
argument_list|()
operator|.
name|getQueuePlacementManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|placementManager
operator|.
name|getPlacementRules
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QueuePlacementConverter
name|placementConverter
init|=
operator|new
name|QueuePlacementConverter
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|placementConverter
operator|.
name|convertPlacementPolicy
argument_list|(
name|placementManager
argument_list|,
name|ruleHandler
argument_list|,
name|userAsDefaultQueue
argument_list|)
decl_stmt|;
name|properties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Validate ordering policy
if|if
condition|(
name|queueConverter
operator|.
name|isDrfPolicyUsedOnQueueLevel
argument_list|()
condition|)
block|{
if|if
condition|(
name|queueConverter
operator|.
name|isFifoOrFairSharePolicyUsed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
literal|"DRF ordering policy cannot be used together with fifo/fair"
argument_list|)
throw|;
block|}
else|else
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RESOURCE_CALCULATOR_CLASS
argument_list|,
name|DominantResourceCalculator
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|emitDefaultMaxApplications ()
specifier|private
name|void
name|emitDefaultMaxApplications
parameter_list|()
block|{
if|if
condition|(
name|queueMaxAppsDefault
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_SYSTEM_APPLICATIONS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|queueMaxAppsDefault
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|emitDefaultMaxAMShare ()
specifier|private
name|void
name|emitDefaultMaxAMShare
parameter_list|()
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|queueMaxAMShareDefault
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|emitACLs (FairScheduler fs)
specifier|private
name|void
name|emitACLs
parameter_list|(
name|FairScheduler
name|fs
parameter_list|)
block|{
name|fs
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|getQueueAcls
argument_list|()
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|generateQueueAcl
argument_list|)
expr_stmt|;
block|}
DECL|method|generateQueueAcl (String queue, Map<AccessType, AccessControlList> access)
specifier|private
name|void
name|generateQueueAcl
parameter_list|(
name|String
name|queue
parameter_list|,
name|Map
argument_list|<
name|AccessType
argument_list|,
name|AccessControlList
argument_list|>
name|access
parameter_list|)
block|{
name|AccessControlList
name|submitAcls
init|=
name|access
operator|.
name|get
argument_list|(
name|AccessType
operator|.
name|SUBMIT_APP
argument_list|)
decl_stmt|;
name|AccessControlList
name|adminAcls
init|=
name|access
operator|.
name|get
argument_list|(
name|AccessType
operator|.
name|ADMINISTER_QUEUE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|submitAcls
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|submitAcls
operator|.
name|getUsers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queue
operator|+
literal|".acl_submit_applications"
argument_list|,
name|submitAcls
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|adminAcls
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|adminAcls
operator|.
name|getUsers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|capacitySchedulerConfig
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|queue
operator|+
literal|".acl_administer_queue"
argument_list|,
name|adminAcls
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkReservationSystem (Configuration conf)
specifier|private
name|void
name|checkReservationSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESERVATION_SYSTEM_ENABLE
argument_list|)
condition|)
block|{
name|ruleHandler
operator|.
name|handleReservationSystem
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkUserMaxApps (AllocationConfiguration allocConf)
specifier|private
name|void
name|checkUserMaxApps
parameter_list|(
name|AllocationConfiguration
name|allocConf
parameter_list|)
block|{
if|if
condition|(
name|allocConf
operator|.
name|getUserMaxApps
argument_list|()
operator|!=
literal|null
operator|&&
name|allocConf
operator|.
name|getUserMaxApps
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ruleHandler
operator|.
name|handleUserMaxApps
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkUserMaxAppsDefault (AllocationConfiguration allocConf)
specifier|private
name|void
name|checkUserMaxAppsDefault
parameter_list|(
name|AllocationConfiguration
name|allocConf
parameter_list|)
block|{
if|if
condition|(
name|allocConf
operator|.
name|getUserMaxAppsDefault
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ruleHandler
operator|.
name|handleUserMaxAppsDefault
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getClusterResource ()
name|Resource
name|getClusterResource
parameter_list|()
block|{
return|return
name|clusterResource
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setClusterResource (Resource clusterResource)
specifier|public
name|void
name|setClusterResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
name|this
operator|.
name|clusterResource
operator|=
name|clusterResource
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRuleHandler ()
name|FSConfigToCSConfigRuleHandler
name|getRuleHandler
parameter_list|()
block|{
return|return
name|ruleHandler
return|;
block|}
block|}
end_class

end_unit

