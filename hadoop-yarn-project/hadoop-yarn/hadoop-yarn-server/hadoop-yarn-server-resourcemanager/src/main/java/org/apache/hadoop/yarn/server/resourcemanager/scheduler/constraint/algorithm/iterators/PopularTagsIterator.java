begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.algorithm.iterators
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|algorithm
operator|.
name|iterators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_comment
comment|/**  * Traverse Scheduling requests with the most popular tags (count) first.  * Currently the count is per Batch but could use TagManager for global count.  */
end_comment

begin_class
DECL|class|PopularTagsIterator
specifier|public
class|class
name|PopularTagsIterator
implements|implements
name|Iterator
argument_list|<
name|SchedulingRequest
argument_list|>
block|{
DECL|field|schedulingRequestList
specifier|private
specifier|final
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequestList
decl_stmt|;
DECL|field|cursor
specifier|private
name|int
name|cursor
decl_stmt|;
DECL|method|PopularTagsIterator (Collection<SchedulingRequest> schedulingRequests)
specifier|public
name|PopularTagsIterator
parameter_list|(
name|Collection
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequests
parameter_list|)
block|{
name|this
operator|.
name|schedulingRequestList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|schedulingRequests
argument_list|)
expr_stmt|;
comment|// Most popular First
name|Collections
operator|.
name|sort
argument_list|(
name|schedulingRequestList
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
operator|(
name|int
operator|)
name|getTagPopularity
argument_list|(
name|o2
argument_list|)
operator|-
operator|(
name|int
operator|)
name|getTagPopularity
argument_list|(
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|cursor
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getTagPopularity (SchedulingRequest o1)
specifier|private
name|long
name|getTagPopularity
parameter_list|(
name|SchedulingRequest
name|o1
parameter_list|)
block|{
name|long
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|o1
operator|.
name|getAllocationTags
argument_list|()
control|)
block|{
name|long
name|count
init|=
name|schedulingRequestList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|req
lambda|->
name|req
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|contains
argument_list|(
name|tag
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|count
expr_stmt|;
block|}
block|}
return|return
name|max
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|cursor
operator|<
name|schedulingRequestList
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|SchedulingRequest
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|schedulingRequestList
operator|.
name|get
argument_list|(
name|cursor
operator|++
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

