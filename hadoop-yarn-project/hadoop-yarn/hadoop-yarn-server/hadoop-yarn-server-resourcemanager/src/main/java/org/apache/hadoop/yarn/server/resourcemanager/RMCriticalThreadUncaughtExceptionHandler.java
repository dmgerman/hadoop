begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_comment
comment|/**  * This class either shuts down {@link ResourceManager} or transitions the  * {@link ResourceManager} to standby state if a critical thread throws an  * uncaught exception. It is intended to be installed by calling  * {@code setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)}  * in the thread entry point or after creation of threads.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|RMCriticalThreadUncaughtExceptionHandler
specifier|public
class|class
name|RMCriticalThreadUncaughtExceptionHandler
implements|implements
name|UncaughtExceptionHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMCriticalThreadUncaughtExceptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|RMCriticalThreadUncaughtExceptionHandler (RMContext rmContext)
specifier|public
name|RMCriticalThreadUncaughtExceptionHandler
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncaughtException (Thread t, Throwable e)
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Critical thread "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" crashed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|rmContext
operator|.
name|getResourceManager
argument_list|()
operator|.
name|handleTransitionToStandByInNewThread
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMFatalEvent
argument_list|(
name|RMFatalEventType
operator|.
name|CRITICAL_THREAD_CRASH
argument_list|,
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

