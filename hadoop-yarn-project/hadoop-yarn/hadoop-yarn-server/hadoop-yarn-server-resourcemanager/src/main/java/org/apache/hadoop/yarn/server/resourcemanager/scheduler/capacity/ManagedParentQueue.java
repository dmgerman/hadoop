begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Auto Creation enabled Parent queue. This queue initially does not have any  * children to start with and all child  * leaf queues will be auto created. Currently this does not allow other  * pre-configured leaf or parent queues to  * co-exist along with auto-created leaf queues. The auto creation is limited  * to leaf queues currently.  */
end_comment

begin_class
DECL|class|ManagedParentQueue
specifier|public
class|class
name|ManagedParentQueue
extends|extends
name|AbstractManagedParentQueue
block|{
DECL|field|shouldFailAutoCreationWhenGuaranteedCapacityExceeded
specifier|private
name|boolean
name|shouldFailAutoCreationWhenGuaranteedCapacityExceeded
init|=
literal|false
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManagedParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ManagedParentQueue (final CapacitySchedulerContext cs, final String queueName, final CSQueue parent, final CSQueue old)
specifier|public
name|ManagedParentQueue
parameter_list|(
specifier|final
name|CapacitySchedulerContext
name|cs
parameter_list|,
specifier|final
name|String
name|queueName
parameter_list|,
specifier|final
name|CSQueue
name|parent
parameter_list|,
specifier|final
name|CSQueue
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cs
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|old
argument_list|)
expr_stmt|;
name|String
name|leafQueueTemplateConfPrefix
init|=
name|getLeafQueueConfigPrefix
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|leafQueueTemplate
operator|=
name|initializeLeafQueueConfigs
argument_list|(
name|leafQueueTemplateConfPrefix
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|StringBuffer
name|queueInfo
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|queueInfo
operator|.
name|append
argument_list|(
literal|"Created Managed Parent Queue: "
argument_list|)
operator|.
name|append
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\nwith capacity: ["
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\nwith max capacity: ["
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nwith max apps: ["
argument_list|)
operator|.
name|append
argument_list|(
name|leafQueueTemplate
operator|.
name|getMaxApps
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\nwith max apps per user: ["
argument_list|)
operator|.
name|append
argument_list|(
name|leafQueueTemplate
operator|.
name|getMaxAppsPerUser
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\nwith user limit: ["
argument_list|)
operator|.
name|append
argument_list|(
name|leafQueueTemplate
operator|.
name|getUserLimit
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\nwith user limit factor: ["
argument_list|)
operator|.
name|append
argument_list|(
name|leafQueueTemplate
operator|.
name|getUserLimitFactor
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|queueInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CSQueue newlyParsedQueue, Resource clusterResource)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|newlyParsedQueue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
name|validate
argument_list|(
name|newlyParsedQueue
argument_list|)
expr_stmt|;
name|super
operator|.
name|reinitialize
argument_list|(
name|newlyParsedQueue
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|String
name|leafQueueTemplateConfPrefix
init|=
name|getLeafQueueConfigPrefix
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|leafQueueTemplate
operator|=
name|initializeLeafQueueConfigs
argument_list|(
name|leafQueueTemplateConfPrefix
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeLeafQueueConfigs ( String queuePath)
specifier|protected
name|AutoCreatedLeafQueueTemplate
operator|.
name|Builder
name|initializeLeafQueueConfigs
parameter_list|(
name|String
name|queuePath
parameter_list|)
block|{
name|AutoCreatedLeafQueueTemplate
operator|.
name|Builder
name|leafQueueTemplate
init|=
name|super
operator|.
name|initializeLeafQueueConfigs
argument_list|(
name|queuePath
argument_list|)
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
name|csContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|leafQueueTemplateConfPrefix
init|=
name|getLeafQueueConfigPrefix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|QueueCapacities
name|queueCapacities
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CSQueueUtils
operator|.
name|loadUpdateAndCheckCapacities
argument_list|(
name|leafQueueTemplateConfPrefix
argument_list|,
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|queueCapacities
argument_list|,
name|getQueueCapacities
argument_list|()
argument_list|)
expr_stmt|;
name|leafQueueTemplate
operator|.
name|capacities
argument_list|(
name|queueCapacities
argument_list|)
expr_stmt|;
name|shouldFailAutoCreationWhenGuaranteedCapacityExceeded
operator|=
name|conf
operator|.
name|getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|leafQueueTemplate
return|;
block|}
DECL|method|validate (final CSQueue newlyParsedQueue)
specifier|protected
name|void
name|validate
parameter_list|(
specifier|final
name|CSQueue
name|newlyParsedQueue
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity check
if|if
condition|(
operator|!
operator|(
name|newlyParsedQueue
operator|instanceof
name|ManagedParentQueue
operator|)
operator|||
operator|!
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to reinitialize "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" from "
operator|+
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|addChildQueue (CSQueue childQueue)
specifier|public
name|void
name|addChildQueue
parameter_list|(
name|CSQueue
name|childQueue
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|childQueue
operator|==
literal|null
operator|||
operator|!
operator|(
name|childQueue
operator|instanceof
name|AutoCreatedLeafQueue
operator|)
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Expected child queue to be an instance of AutoCreatedLeafQueue"
argument_list|)
throw|;
block|}
name|CapacitySchedulerConfiguration
name|conf
init|=
name|csContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|childQueue
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|leafQueueName
init|=
name|childQueue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|int
name|maxQueues
init|=
name|conf
operator|.
name|getAutoCreatedQueuesMaxChildQueuesLimit
argument_list|(
name|parentQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|maxQueues
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Cannot auto create leaf queue "
operator|+
name|leafQueueName
operator|+
literal|".Max Child "
operator|+
literal|"Queue limit exceeded which is configured as : "
operator|+
name|maxQueues
operator|+
literal|" and number of child queues is : "
operator|+
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|shouldFailAutoCreationWhenGuaranteedCapacityExceeded
condition|)
block|{
if|if
condition|(
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|+
name|parentQueue
operator|.
name|sumOfChildAbsCapacities
argument_list|()
operator|>
name|parentQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Cannot auto create leaf queue "
operator|+
name|leafQueueName
operator|+
literal|". Child "
operator|+
literal|"queues capacities have reached parent queue : "
operator|+
name|parentQueue
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|" guaranteed capacity"
argument_list|)
throw|;
block|}
block|}
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|childQueue
decl_stmt|;
name|super
operator|.
name|addChildQueue
argument_list|(
name|leafQueue
argument_list|)
expr_stmt|;
comment|//TODO - refresh policy queue after capacity management is added
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLeafQueueConfigPrefix (CapacitySchedulerConfiguration conf)
specifier|private
name|String
name|getLeafQueueConfigPrefix
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getAutoCreatedQueueTemplateConfPrefix
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

