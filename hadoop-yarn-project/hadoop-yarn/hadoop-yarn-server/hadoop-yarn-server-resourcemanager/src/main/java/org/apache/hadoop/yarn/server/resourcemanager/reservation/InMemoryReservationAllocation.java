begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * An in memory implementation of a reservation allocation using the  * {@link RLESparseResourceAllocation}  *  */
end_comment

begin_class
DECL|class|InMemoryReservationAllocation
specifier|public
class|class
name|InMemoryReservationAllocation
implements|implements
name|ReservationAllocation
block|{
DECL|field|planName
specifier|private
specifier|final
name|String
name|planName
decl_stmt|;
DECL|field|reservationID
specifier|private
specifier|final
name|ReservationId
name|reservationID
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|contract
specifier|private
specifier|final
name|ReservationDefinition
name|contract
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
specifier|final
name|long
name|endTime
decl_stmt|;
DECL|field|allocationRequests
specifier|private
specifier|final
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|allocationRequests
decl_stmt|;
DECL|field|hasGang
specifier|private
name|boolean
name|hasGang
init|=
literal|false
decl_stmt|;
DECL|field|acceptedAt
specifier|private
name|long
name|acceptedAt
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|resourcesOverTime
specifier|private
name|RLESparseResourceAllocation
name|resourcesOverTime
decl_stmt|;
DECL|method|InMemoryReservationAllocation (ReservationId reservationID, ReservationDefinition contract, String user, String planName, long startTime, long endTime, Map<ReservationInterval, Resource> allocations, ResourceCalculator calculator, Resource minAlloc)
specifier|public
name|InMemoryReservationAllocation
parameter_list|(
name|ReservationId
name|reservationID
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|planName
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|allocations
parameter_list|,
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|minAlloc
parameter_list|)
block|{
name|this
argument_list|(
name|reservationID
argument_list|,
name|contract
argument_list|,
name|user
argument_list|,
name|planName
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|allocations
argument_list|,
name|calculator
argument_list|,
name|minAlloc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|InMemoryReservationAllocation (ReservationId reservationID, ReservationDefinition contract, String user, String planName, long startTime, long endTime, Map<ReservationInterval, Resource> allocations, ResourceCalculator calculator, Resource minAlloc, boolean hasGang)
specifier|public
name|InMemoryReservationAllocation
parameter_list|(
name|ReservationId
name|reservationID
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|planName
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|allocations
parameter_list|,
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|minAlloc
parameter_list|,
name|boolean
name|hasGang
parameter_list|)
block|{
name|this
operator|.
name|contract
operator|=
name|contract
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
name|this
operator|.
name|reservationID
operator|=
name|reservationID
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|allocationRequests
operator|=
name|allocations
expr_stmt|;
name|this
operator|.
name|planName
operator|=
name|planName
expr_stmt|;
name|this
operator|.
name|hasGang
operator|=
name|hasGang
expr_stmt|;
name|resourcesOverTime
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|calculator
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|r
range|:
name|allocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resourcesOverTime
operator|.
name|addInterval
argument_list|(
name|r
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReservationId ()
specifier|public
name|ReservationId
name|getReservationId
parameter_list|()
block|{
return|return
name|reservationID
return|;
block|}
annotation|@
name|Override
DECL|method|getReservationDefinition ()
specifier|public
name|ReservationDefinition
name|getReservationDefinition
parameter_list|()
block|{
return|return
name|contract
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getEndTime ()
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
annotation|@
name|Override
DECL|method|getAllocationRequests ()
specifier|public
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|getAllocationRequests
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|allocationRequests
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPlanName ()
specifier|public
name|String
name|getPlanName
parameter_list|()
block|{
return|return
name|planName
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|containsGangs ()
specifier|public
name|boolean
name|containsGangs
parameter_list|()
block|{
return|return
name|hasGang
return|;
block|}
annotation|@
name|Override
DECL|method|setAcceptanceTimestamp (long acceptedAt)
specifier|public
name|void
name|setAcceptanceTimestamp
parameter_list|(
name|long
name|acceptedAt
parameter_list|)
block|{
name|this
operator|.
name|acceptedAt
operator|=
name|acceptedAt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAcceptanceTime ()
specifier|public
name|long
name|getAcceptanceTime
parameter_list|()
block|{
return|return
name|acceptedAt
return|;
block|}
annotation|@
name|Override
DECL|method|getResourcesAtTime (long tick)
specifier|public
name|Resource
name|getResourcesAtTime
parameter_list|(
name|long
name|tick
parameter_list|)
block|{
if|if
condition|(
name|tick
operator|<
name|startTime
operator|||
name|tick
operator|>=
name|endTime
condition|)
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|resourcesOverTime
operator|.
name|getCapacityAtTime
argument_list|(
name|tick
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResourcesOverTime ()
specifier|public
name|RLESparseResourceAllocation
name|getResourcesOverTime
parameter_list|()
block|{
return|return
name|resourcesOverTime
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sBuf
operator|.
name|append
argument_list|(
name|getReservationId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" user:"
argument_list|)
operator|.
name|append
argument_list|(
name|getUser
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" startTime: "
argument_list|)
operator|.
name|append
argument_list|(
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" endTime: "
argument_list|)
operator|.
name|append
argument_list|(
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" alloc:\n["
argument_list|)
operator|.
name|append
argument_list|(
name|resourcesOverTime
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
return|return
name|sBuf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ReservationAllocation other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReservationAllocation
name|other
parameter_list|)
block|{
comment|// reverse order of acceptance
if|if
condition|(
name|this
operator|.
name|getAcceptanceTime
argument_list|()
operator|>
name|other
operator|.
name|getAcceptanceTime
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getAcceptanceTime
argument_list|()
operator|<
name|other
operator|.
name|getAcceptanceTime
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|>
name|other
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|other
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|reservationID
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|InMemoryReservationAllocation
name|other
init|=
operator|(
name|InMemoryReservationAllocation
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|reservationID
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getReservationId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

