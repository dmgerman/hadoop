begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Temporary data-structure tracking resource availability, pending resource  * need, current utilization for an application.  */
end_comment

begin_class
DECL|class|TempAppPerPartition
specifier|public
class|class
name|TempAppPerPartition
extends|extends
name|AbstractPreemptionEntity
block|{
comment|// Following fields are settled and used by candidate selection policies
DECL|field|priority
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|tempUser
specifier|private
name|TempUserPerPartition
name|tempUser
decl_stmt|;
DECL|field|app
name|FiCaSchedulerApp
name|app
decl_stmt|;
DECL|method|TempAppPerPartition (FiCaSchedulerApp app, Resource usedPerPartition, Resource amUsedPerPartition, Resource reserved, Resource pendingPerPartition)
name|TempAppPerPartition
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|Resource
name|usedPerPartition
parameter_list|,
name|Resource
name|amUsedPerPartition
parameter_list|,
name|Resource
name|reserved
parameter_list|,
name|Resource
name|pendingPerPartition
parameter_list|)
block|{
name|super
argument_list|(
name|app
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|usedPerPartition
argument_list|,
name|amUsedPerPartition
argument_list|,
name|reserved
argument_list|,
name|pendingPerPartition
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|app
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|app
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|this
operator|.
name|app
operator|=
name|app
expr_stmt|;
block|}
DECL|method|getFiCaSchedulerApp ()
specifier|public
name|FiCaSchedulerApp
name|getFiCaSchedulerApp
parameter_list|()
block|{
return|return
name|app
return|;
block|}
DECL|method|assignPreemption (Resource killable)
specifier|public
name|void
name|assignPreemption
parameter_list|(
name|Resource
name|killable
parameter_list|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|toBePreempted
argument_list|,
name|killable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" NAME: "
operator|+
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" PRIO: "
argument_list|)
operator|.
name|append
argument_list|(
name|priority
argument_list|)
operator|.
name|append
argument_list|(
literal|" CUR: "
argument_list|)
operator|.
name|append
argument_list|(
name|getUsed
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" PEN: "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
argument_list|)
operator|.
name|append
argument_list|(
literal|" RESERVED: "
argument_list|)
operator|.
name|append
argument_list|(
name|reserved
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_ASSIGNED: "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
argument_list|)
operator|.
name|append
argument_list|(
literal|" PREEMPT_OTHER: "
argument_list|)
operator|.
name|append
argument_list|(
name|getToBePreemptFromOther
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" IDEAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
argument_list|)
operator|.
name|append
argument_list|(
literal|" ACTUAL_PREEMPT: "
argument_list|)
operator|.
name|append
argument_list|(
name|getActuallyToBePreempted
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appendLogString (StringBuilder sb)
name|void
name|appendLogString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|getUsed
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|pending
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|idealAssigned
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toBePreempted
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|getActuallyToBePreempted
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|getActuallyToBePreempted
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|app
operator|.
name|getUser
argument_list|()
return|;
block|}
DECL|method|deductActuallyToBePreempted (ResourceCalculator resourceCalculator, Resource cluster, Resource toBeDeduct)
specifier|public
name|void
name|deductActuallyToBePreempted
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|cluster
parameter_list|,
name|Resource
name|toBeDeduct
parameter_list|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|cluster
argument_list|,
name|getActuallyToBePreempted
argument_list|()
argument_list|,
name|toBeDeduct
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|getActuallyToBePreempted
argument_list|()
argument_list|,
name|toBeDeduct
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTempUserPerPartition (TempUserPerPartition tu)
specifier|public
name|void
name|setTempUserPerPartition
parameter_list|(
name|TempUserPerPartition
name|tu
parameter_list|)
block|{
name|tempUser
operator|=
name|tu
expr_stmt|;
block|}
DECL|method|getTempUserPerPartition ()
specifier|public
name|TempUserPerPartition
name|getTempUserPerPartition
parameter_list|()
block|{
return|return
name|tempUser
return|;
block|}
block|}
end_class

end_unit

