begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Manages scheduling monitors.  */
end_comment

begin_class
DECL|class|SchedulingMonitorManager
specifier|public
class|class
name|SchedulingMonitorManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchedulingMonitorManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|runningSchedulingMonitors
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SchedulingMonitor
argument_list|>
name|runningSchedulingMonitors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|updateSchedulingMonitors (Configuration conf, boolean startImmediately)
specifier|private
name|void
name|updateSchedulingMonitors
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|startImmediately
parameter_list|)
throws|throws
name|YarnException
block|{
name|boolean
name|monitorsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ENABLE_MONITORS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|monitorsEnabled
condition|)
block|{
if|if
condition|(
operator|!
name|runningSchedulingMonitors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If monitors disabled while we have some running monitors, we should
comment|// stop them.
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling Monitor disabled, stopping all services"
argument_list|)
expr_stmt|;
name|stopAndRemoveAll
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
comment|// When monitor is enabled, loading policies
name|String
index|[]
name|configuredPolicies
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuredPolicies
operator|==
literal|null
operator|||
name|configuredPolicies
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|configurePoliciesSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|configuredPolicies
control|)
block|{
name|configurePoliciesSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Add new monitor when needed
for|for
control|(
name|String
name|s
range|:
name|configurePoliciesSet
control|)
block|{
if|if
condition|(
operator|!
name|runningSchedulingMonitors
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|policyClass
decl_stmt|;
try|try
block|{
name|policyClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to find class of specified policy="
operator|+
name|s
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|SchedulingEditPolicy
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|policyClass
argument_list|)
condition|)
block|{
name|SchedulingEditPolicy
name|policyInstance
init|=
operator|(
name|SchedulingEditPolicy
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|policyClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SchedulingMonitor
name|mon
init|=
operator|new
name|SchedulingMonitor
argument_list|(
name|rmContext
argument_list|,
name|policyInstance
argument_list|)
decl_stmt|;
name|mon
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|startImmediately
condition|)
block|{
name|mon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|runningSchedulingMonitors
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|mon
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Specified policy="
operator|+
name|s
operator|+
literal|" is not a SchedulingEditPolicy class."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Stop monitor when needed.
name|Set
argument_list|<
name|String
argument_list|>
name|disabledPolicies
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|runningSchedulingMonitors
operator|.
name|keySet
argument_list|()
argument_list|,
name|configurePoliciesSet
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|disabledPolicy
range|:
name|disabledPolicies
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SchedulingEditPolicy="
operator|+
name|disabledPolicy
operator|+
literal|" removed, stopping it now ..."
argument_list|)
expr_stmt|;
name|silentlyStopSchedulingMonitor
argument_list|(
name|disabledPolicy
argument_list|)
expr_stmt|;
name|runningSchedulingMonitors
operator|.
name|remove
argument_list|(
name|disabledPolicy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initialize (RMContext rmContext, Configuration configuration)
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|stopAndRemoveAll
argument_list|()
expr_stmt|;
name|updateSchedulingMonitors
argument_list|(
name|configuration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|reinitialize (RMContext rmContext, Configuration configuration)
specifier|public
specifier|synchronized
name|void
name|reinitialize
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|updateSchedulingMonitors
argument_list|(
name|configuration
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|startAll ()
specifier|public
specifier|synchronized
name|void
name|startAll
parameter_list|()
block|{
for|for
control|(
name|SchedulingMonitor
name|schedulingMonitor
range|:
name|runningSchedulingMonitors
operator|.
name|values
argument_list|()
control|)
block|{
name|schedulingMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|silentlyStopSchedulingMonitor (String name)
specifier|private
name|void
name|silentlyStopSchedulingMonitor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|SchedulingMonitor
name|mon
init|=
name|runningSchedulingMonitors
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|mon
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully stopped monitor="
operator|+
name|mon
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while stopping monitor="
operator|+
name|mon
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopAndRemoveAll ()
specifier|private
name|void
name|stopAndRemoveAll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|runningSchedulingMonitors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|schedulingMonitorName
range|:
name|runningSchedulingMonitors
operator|.
name|keySet
argument_list|()
control|)
block|{
name|silentlyStopSchedulingMonitor
argument_list|(
name|schedulingMonitorName
argument_list|)
expr_stmt|;
block|}
name|runningSchedulingMonitors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isRSMEmpty ()
specifier|public
name|boolean
name|isRSMEmpty
parameter_list|()
block|{
return|return
name|runningSchedulingMonitors
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|isSameConfiguredPolicies (Set<String> configurePoliciesSet)
specifier|public
name|boolean
name|isSameConfiguredPolicies
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|configurePoliciesSet
parameter_list|)
block|{
return|return
name|configurePoliciesSet
operator|.
name|equals
argument_list|(
name|runningSchedulingMonitors
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAvailableSchedulingMonitor ()
specifier|public
name|SchedulingMonitor
name|getAvailableSchedulingMonitor
parameter_list|()
block|{
if|if
condition|(
name|isRSMEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|SchedulingMonitor
name|smon
range|:
name|runningSchedulingMonitors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
operator|instanceof
name|ProportionalCapacityPreemptionPolicy
condition|)
block|{
return|return
name|smon
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|YarnException
block|{
name|stopAndRemoveAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

