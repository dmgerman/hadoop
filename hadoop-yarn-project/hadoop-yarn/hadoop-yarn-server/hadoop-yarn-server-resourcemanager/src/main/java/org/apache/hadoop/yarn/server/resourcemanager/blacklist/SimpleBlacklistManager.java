begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.blacklist
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Maintains a list of failed nodes and returns that as long as number of  * blacklisted nodes is below a threshold percentage of total nodes. If more  * than threshold number of nodes are marked as failure they all are returned  * as removal from blacklist so previous additions are reversed.  */
end_comment

begin_class
DECL|class|SimpleBlacklistManager
specifier|public
class|class
name|SimpleBlacklistManager
implements|implements
name|BlacklistManager
block|{
DECL|field|numberOfNodeManagerHosts
specifier|private
name|int
name|numberOfNodeManagerHosts
decl_stmt|;
DECL|field|blacklistDisableFailureThreshold
specifier|private
specifier|final
name|double
name|blacklistDisableFailureThreshold
decl_stmt|;
DECL|field|blacklistNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_LIST
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|EMPTY_LIST
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleBlacklistManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SimpleBlacklistManager (int numberOfNodeManagerHosts, double blacklistDisableFailureThreshold)
specifier|public
name|SimpleBlacklistManager
parameter_list|(
name|int
name|numberOfNodeManagerHosts
parameter_list|,
name|double
name|blacklistDisableFailureThreshold
parameter_list|)
block|{
name|this
operator|.
name|numberOfNodeManagerHosts
operator|=
name|numberOfNodeManagerHosts
expr_stmt|;
name|this
operator|.
name|blacklistDisableFailureThreshold
operator|=
name|blacklistDisableFailureThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addNode (String node)
specifier|public
name|void
name|addNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|blacklistNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refreshNodeHostCount (int nodeHostCount)
specifier|public
name|void
name|refreshNodeHostCount
parameter_list|(
name|int
name|nodeHostCount
parameter_list|)
block|{
name|this
operator|.
name|numberOfNodeManagerHosts
operator|=
name|nodeHostCount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlacklistUpdates ()
specifier|public
name|ResourceBlacklistRequest
name|getBlacklistUpdates
parameter_list|()
block|{
name|ResourceBlacklistRequest
name|ret
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|blacklistNodes
argument_list|)
decl_stmt|;
specifier|final
name|int
name|currentBlacklistSize
init|=
name|blacklist
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|double
name|failureThreshold
init|=
name|this
operator|.
name|blacklistDisableFailureThreshold
operator|*
name|numberOfNodeManagerHosts
decl_stmt|;
if|if
condition|(
name|currentBlacklistSize
operator|<
name|failureThreshold
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"blacklist size {} is less than failure threshold ratio {}"
operator|+
literal|" out of total usable nodes {}"
argument_list|,
name|currentBlacklistSize
argument_list|,
name|blacklistDisableFailureThreshold
argument_list|,
name|numberOfNodeManagerHosts
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|blacklist
argument_list|,
name|EMPTY_LIST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring Blacklists, blacklist size "
operator|+
name|currentBlacklistSize
operator|+
literal|" is more than failure threshold ratio "
operator|+
name|blacklistDisableFailureThreshold
operator|+
literal|" out of total usable nodes "
operator|+
name|numberOfNodeManagerHosts
argument_list|)
expr_stmt|;
comment|// TODO: After the threshold hits, we will keep sending a long list
comment|// every time a new AM is to be scheduled.
name|ret
operator|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|EMPTY_LIST
argument_list|,
name|blacklist
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

