begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|UpdatedContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerExpiredSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
annotation|@
name|Evolving
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|FifoScheduler
specifier|public
class|class
name|FifoScheduler
implements|implements
name|ResourceScheduler
implements|,
name|Configurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FifoScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|EMPTY_CONTAINER_ARRAY
specifier|private
specifier|final
specifier|static
name|Container
index|[]
name|EMPTY_CONTAINER_ARRAY
init|=
operator|new
name|Container
index|[]
block|{}
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|EMPTY_CONTAINER_ARRAY
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|nodes
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|FiCaSchedulerNode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
decl_stmt|;
DECL|field|minimumAllocation
specifier|private
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|maximumAllocation
specifier|private
name|Resource
name|maximumAllocation
decl_stmt|;
DECL|field|usePortForNodeName
specifier|private
name|boolean
name|usePortForNodeName
decl_stmt|;
comment|// Use ConcurrentSkipListMap because applications need to be ordered
annotation|@
name|VisibleForTesting
DECL|field|applications
specifier|protected
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FiCaSchedulerApp
argument_list|>
name|applications
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FiCaSchedulerApp
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|activeUsersManager
specifier|private
name|ActiveUsersManager
name|activeUsersManager
decl_stmt|;
DECL|field|DEFAULT_QUEUE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE_NAME
init|=
literal|"default"
decl_stmt|;
DECL|field|metrics
specifier|private
name|QueueMetrics
name|metrics
decl_stmt|;
DECL|field|resourceCalculator
specifier|private
specifier|final
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_QUEUE
specifier|private
specifier|final
name|Queue
name|DEFAULT_QUEUE
init|=
operator|new
name|Queue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|DEFAULT_QUEUE_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueueMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|QueueInfo
name|queueInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|queueInfo
operator|.
name|setQueueName
argument_list|(
name|DEFAULT_QUEUE
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|==
literal|0
condition|)
block|{
name|queueInfo
operator|.
name|setCurrentCapacity
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueInfo
operator|.
name|setCurrentCapacity
argument_list|(
operator|(
name|float
operator|)
name|usedResource
operator|.
name|getMemory
argument_list|()
operator|/
name|clusterResource
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queueInfo
operator|.
name|setMaximumCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setChildQueues
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setQueueState
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|queueInfo
return|;
block|}
specifier|public
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|getQueueAcls
parameter_list|()
block|{
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueACL
name|acl
range|:
name|QueueACL
operator|.
name|values
argument_list|()
control|)
block|{
name|acls
operator|.
name|put
argument_list|(
name|acl
argument_list|,
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|acls
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|(
name|UserGroupInformation
name|unused
parameter_list|)
block|{
name|QueueUserACLInfo
name|queueUserAclInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueUserACLInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|queueUserAclInfo
operator|.
name|setQueueName
argument_list|(
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
name|queueUserAclInfo
operator|.
name|setUserAcls
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|QueueACL
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|queueUserAclInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAccess
parameter_list|(
name|QueueACL
name|acl
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
return|return
name|getQueueAcls
argument_list|()
operator|.
name|get
argument_list|(
name|acl
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|user
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|validateConf (Configuration conf)
specifier|private
name|void
name|validateConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// validate scheduler memory allocation setting
name|int
name|minMem
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|int
name|maxMem
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
if|if
condition|(
name|minMem
operator|<=
literal|0
operator|||
name|minMem
operator|>
name|maxMem
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid resource scheduler memory"
operator|+
literal|" allocation configuration"
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|minMem
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|maxMem
operator|+
literal|", min and max should be greater than 0"
operator|+
literal|", max should be no smaller than min."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
specifier|synchronized
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimumResourceCapability ()
specifier|public
name|Resource
name|getMinimumResourceCapability
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getNumClusterNodes ()
specifier|public
name|int
name|getNumClusterNodes
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability ()
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|()
block|{
return|return
name|maximumAllocation
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
DECL|method|reinitialize (Configuration conf, RMContext rmContext)
name|reinitialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|initialized
condition|)
block|{
name|validateConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|minimumAllocation
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maximumAllocation
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|usePortForNodeName
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|QueueMetrics
operator|.
name|forQueue
argument_list|(
name|DEFAULT_QUEUE_NAME
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeUsersManager
operator|=
operator|new
name|ActiveUsersManager
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_ALLOCATION
specifier|private
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|allocate ( ApplicationAttemptId applicationAttemptId, List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Calling allocate on removed "
operator|+
literal|"or non existant application "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
return|return
name|EMPTY_ALLOCATION
return|;
block|}
comment|// Sanity check
name|SchedulerUtils
operator|.
name|normalizeRequests
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|minimumAllocation
argument_list|,
name|maximumAllocation
argument_list|)
expr_stmt|;
comment|// Release containers
for|for
control|(
name|ContainerId
name|releasedContainer
range|:
name|release
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|releasedContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"FifoScheduler"
argument_list|,
literal|"Trying to release container not owned by app or with invalid id"
argument_list|,
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|releasedContainer
argument_list|)
expr_stmt|;
block|}
name|containerCompleted
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|releasedContainer
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|application
init|)
block|{
comment|// make sure we aren't stopping/removing the application
comment|// when the allocate comes in
if|if
condition|(
name|application
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling allocate on a stopped "
operator|+
literal|"application "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
return|return
name|EMPTY_ALLOCATION
return|;
block|}
if|if
condition|(
operator|!
name|ask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: pre-update"
operator|+
literal|" applicationId="
operator|+
name|applicationAttemptId
operator|+
literal|" application="
operator|+
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
comment|// Update application requests
name|application
operator|.
name|updateResourceRequests
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: post-update"
operator|+
literal|" applicationId="
operator|+
name|applicationAttemptId
operator|+
literal|" application="
operator|+
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate:"
operator|+
literal|" applicationId="
operator|+
name|applicationAttemptId
operator|+
literal|" #ask="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
return|return
operator|new
name|Allocation
argument_list|(
name|application
operator|.
name|pullNewlyAllocatedContainers
argument_list|()
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getApplication ( ApplicationAttemptId applicationAttemptId)
name|FiCaSchedulerApp
name|getApplication
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
return|return
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerAppInfo ( ApplicationAttemptId applicationAttemptId)
specifier|public
name|SchedulerAppReport
name|getSchedulerAppInfo
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|FiCaSchedulerApp
name|app
init|=
name|getApplication
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
return|return
name|app
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerAppReport
argument_list|(
name|app
argument_list|)
return|;
block|}
DECL|method|getNode (NodeId nodeId)
specifier|private
name|FiCaSchedulerNode
name|getNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|addApplication (ApplicationAttemptId appAttemptId, String user)
specifier|private
specifier|synchronized
name|void
name|addApplication
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
comment|// TODO: Fix store
name|FiCaSchedulerApp
name|schedulerApp
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId
argument_list|,
name|user
argument_list|,
name|DEFAULT_QUEUE
argument_list|,
name|activeUsersManager
argument_list|,
name|this
operator|.
name|rmContext
argument_list|)
decl_stmt|;
name|applications
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
name|schedulerApp
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|submitApp
argument_list|(
name|user
argument_list|,
name|appAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application Submission: "
operator|+
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" from "
operator|+
name|user
operator|+
literal|", currently active: "
operator|+
name|applications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doneApplication ( ApplicationAttemptId applicationAttemptId, RMAppAttemptState rmAppAttemptFinalState)
specifier|private
specifier|synchronized
name|void
name|doneApplication
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|)
throws|throws
name|IOException
block|{
name|FiCaSchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown application "
operator|+
name|applicationAttemptId
operator|+
literal|" has completed!"
argument_list|)
throw|;
block|}
comment|// Kill all 'live' containers
for|for
control|(
name|RMContainer
name|container
range|:
name|application
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|containerCompleted
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|COMPLETED_APPLICATION
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Inform the activeUsersManager
synchronized|synchronized
init|(
name|application
init|)
block|{
name|activeUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Clean up pending requests, metrics etc.
name|application
operator|.
name|stop
argument_list|(
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
comment|// Remove the application
name|applications
operator|.
name|remove
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Heart of the scheduler...    *     * @param node node on which resources are available to be allocated    */
DECL|method|assignContainers (FiCaSchedulerNode node)
specifier|private
name|void
name|assignContainers
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers:"
operator|+
literal|" node="
operator|+
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" #applications="
operator|+
name|applications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to assign containers to applications in fifo order
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FiCaSchedulerApp
argument_list|>
name|e
range|:
name|applications
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"pre-assignContainers"
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|application
init|)
block|{
comment|// Check if this resource is on the blacklist
if|if
condition|(
name|SchedulerAppUtils
operator|.
name|isBlacklisted
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|LOG
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Priority
name|priority
range|:
name|application
operator|.
name|getPriorities
argument_list|()
control|)
block|{
name|int
name|maxContainers
init|=
name|getMaxAllocatableContainers
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
decl_stmt|;
comment|// Ensure the application needs containers of this priority
if|if
condition|(
name|maxContainers
operator|>
literal|0
condition|)
block|{
name|int
name|assignedContainers
init|=
name|assignContainersOnNode
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|)
decl_stmt|;
comment|// Do not assign out of order w.r.t priorities
if|if
condition|(
name|assignedContainers
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"post-assignContainers"
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
comment|// Done
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|,
name|minimumAllocation
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
comment|// Update the applications' headroom to correctly take into
comment|// account the containers assigned in this update.
for|for
control|(
name|FiCaSchedulerApp
name|application
range|:
name|applications
operator|.
name|values
argument_list|()
control|)
block|{
name|application
operator|.
name|setHeadroom
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|clusterResource
argument_list|,
name|usedResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMaxAllocatableContainers (FiCaSchedulerApp application, Priority priority, FiCaSchedulerNode node, NodeType type)
specifier|private
name|int
name|getMaxAllocatableContainers
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|NodeType
name|type
parameter_list|)
block|{
name|ResourceRequest
name|offSwitchRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|int
name|maxContainers
init|=
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
return|return
name|maxContainers
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
name|ResourceRequest
name|rackLocalRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalRequest
operator|==
literal|null
condition|)
block|{
return|return
name|maxContainers
return|;
block|}
name|maxContainers
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxContainers
argument_list|,
name|rackLocalRequest
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|ResourceRequest
name|nodeLocalRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalRequest
operator|!=
literal|null
condition|)
block|{
name|maxContainers
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxContainers
argument_list|,
name|nodeLocalRequest
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maxContainers
return|;
block|}
DECL|method|assignContainersOnNode (FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority )
specifier|private
name|int
name|assignContainersOnNode
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
comment|// Data-local
name|int
name|nodeLocalContainers
init|=
name|assignNodeLocalContainers
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|)
decl_stmt|;
comment|// Rack-local
name|int
name|rackLocalContainers
init|=
name|assignRackLocalContainers
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|)
decl_stmt|;
comment|// Off-switch
name|int
name|offSwitchContainers
init|=
name|assignOffSwitchContainers
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainersOnNode:"
operator|+
literal|" node="
operator|+
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" #assigned="
operator|+
operator|(
name|nodeLocalContainers
operator|+
name|rackLocalContainers
operator|+
name|offSwitchContainers
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|nodeLocalContainers
operator|+
name|rackLocalContainers
operator|+
name|offSwitchContainers
operator|)
return|;
block|}
DECL|method|assignNodeLocalContainers (FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority)
specifier|private
name|int
name|assignNodeLocalContainers
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|int
name|assignedContainers
init|=
literal|0
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
comment|// Don't allocate on this node if we don't need containers on this rack
name|ResourceRequest
name|rackRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackRequest
operator|==
literal|null
operator|||
name|rackRequest
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|assignableContainers
init|=
name|Math
operator|.
name|min
argument_list|(
name|getMaxAllocatableContainers
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
name|assignedContainers
operator|=
name|assignContainer
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|assignableContainers
argument_list|,
name|request
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
block|}
return|return
name|assignedContainers
return|;
block|}
DECL|method|assignRackLocalContainers (FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority)
specifier|private
name|int
name|assignRackLocalContainers
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|int
name|assignedContainers
init|=
literal|0
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
comment|// Don't allocate on this rack if the application doens't need containers
name|ResourceRequest
name|offSwitchRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|assignableContainers
init|=
name|Math
operator|.
name|min
argument_list|(
name|getMaxAllocatableContainers
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
name|assignedContainers
operator|=
name|assignContainer
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|assignableContainers
argument_list|,
name|request
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
block|}
return|return
name|assignedContainers
return|;
block|}
DECL|method|assignOffSwitchContainers (FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority)
specifier|private
name|int
name|assignOffSwitchContainers
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|int
name|assignedContainers
init|=
literal|0
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|assignedContainers
operator|=
name|assignContainer
argument_list|(
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
block|}
return|return
name|assignedContainers
return|;
block|}
DECL|method|assignContainer (FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, int assignableContainers, ResourceRequest request, NodeType type)
specifier|private
name|int
name|assignContainer
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|int
name|assignableContainers
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|NodeType
name|type
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers:"
operator|+
literal|" node="
operator|+
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" assignableContainers="
operator|+
name|assignableContainers
operator|+
literal|" request="
operator|+
name|request
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|request
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|int
name|availableContainers
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|/
name|capability
operator|.
name|getMemory
argument_list|()
decl_stmt|;
comment|// TODO: A buggy
comment|// application
comment|// with this
comment|// zero would
comment|// crash the
comment|// scheduler.
name|int
name|assignedContainers
init|=
name|Math
operator|.
name|min
argument_list|(
name|assignableContainers
argument_list|,
name|availableContainers
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignedContainers
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignedContainers
condition|;
operator|++
name|i
control|)
block|{
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|application
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
literal|null
decl_stmt|;
name|containerToken
operator|=
name|this
operator|.
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|createContainerToken
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|capability
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerToken
operator|==
literal|null
condition|)
block|{
return|return
name|i
return|;
comment|// Try again later.
block|}
comment|// Create the container
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
comment|// Allocate!
comment|// Inform the application
name|RMContainer
name|rmContainer
init|=
name|application
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
comment|// Inform the node
name|node
operator|.
name|allocateContainer
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Update usage for this container
name|Resources
operator|.
name|addTo
argument_list|(
name|usedResource
argument_list|,
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|assignedContainers
return|;
block|}
DECL|method|nodeUpdate (RMNode rmNode)
specifier|private
specifier|synchronized
name|void
name|nodeUpdate
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|containerInfoList
init|=
name|rmNode
operator|.
name|pullContainerUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdatedContainerInfo
name|containerInfo
range|:
name|containerInfoList
control|)
block|{
name|newlyLaunchedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getNewlyLaunchedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|completedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Processing the newly launched containers
for|for
control|(
name|ContainerStatus
name|launchedContainer
range|:
name|newlyLaunchedContainers
control|)
block|{
name|containerLaunchedOnNode
argument_list|(
name|launchedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Process completed containers
for|for
control|(
name|ContainerStatus
name|completedContainer
range|:
name|completedContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|completedContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container FINISHED: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|containerCompleted
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|completedContainer
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|,
name|minimumAllocation
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node heartbeat "
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" available resource = "
operator|+
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
expr_stmt|;
name|assignContainers
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node after allocation "
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" resource = "
operator|+
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|setAvailableResourcesToQueue
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|clusterResource
argument_list|,
name|usedResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_ADDED
case|:
block|{
name|NodeAddedSchedulerEvent
name|nodeAddedEvent
init|=
operator|(
name|NodeAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addNode
argument_list|(
name|nodeAddedEvent
operator|.
name|getAddedRMNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NODE_REMOVED
case|:
block|{
name|NodeRemovedSchedulerEvent
name|nodeRemovedEvent
init|=
operator|(
name|NodeRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeNode
argument_list|(
name|nodeRemovedEvent
operator|.
name|getRemovedRMNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NODE_UPDATE
case|:
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdatedEvent
init|=
operator|(
name|NodeUpdateSchedulerEvent
operator|)
name|event
decl_stmt|;
name|nodeUpdate
argument_list|(
name|nodeUpdatedEvent
operator|.
name|getRMNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_ADDED
case|:
block|{
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|(
name|AppAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addApplication
argument_list|(
name|appAddedEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_REMOVED
case|:
block|{
name|AppRemovedSchedulerEvent
name|appRemovedEvent
init|=
operator|(
name|AppRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
try|try
block|{
name|doneApplication
argument_list|(
name|appRemovedEvent
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|,
name|appRemovedEvent
operator|.
name|getFinalAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove application "
operator|+
name|appRemovedEvent
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CONTAINER_EXPIRED
case|:
block|{
name|ContainerExpiredSchedulerEvent
name|containerExpiredEvent
init|=
operator|(
name|ContainerExpiredSchedulerEvent
operator|)
name|event
decl_stmt|;
name|ContainerId
name|containerid
init|=
name|containerExpiredEvent
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|containerCompleted
argument_list|(
name|getRMContainer
argument_list|(
name|containerid
argument_list|)
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerid
argument_list|,
name|SchedulerUtils
operator|.
name|EXPIRED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid eventtype "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|". Ignoring!"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|containerLaunchedOnNode (ContainerId containerId, FiCaSchedulerNode node)
specifier|private
name|void
name|containerLaunchedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|)
block|{
comment|// Get the application for the finished container
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application: "
operator|+
name|applicationAttemptId
operator|+
literal|" launched container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
comment|// Some unknown container sneaked into the system. Kill it.
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|application
operator|.
name|containerLaunchedOnNode
argument_list|(
name|containerId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Lock
argument_list|(
name|FifoScheduler
operator|.
name|class
argument_list|)
DECL|method|containerCompleted (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|private
specifier|synchronized
name|void
name|containerCompleted
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Null container completed..."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get the application for the finished container
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
comment|// Get the node on which the container was allocated
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application: "
operator|+
name|applicationAttemptId
operator|+
literal|" released container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|node
operator|+
literal|" with event: "
operator|+
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Inform the application
name|application
operator|.
name|containerCompleted
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// Inform the node
name|node
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
comment|// Update total usage
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|usedResource
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationAttemptId
operator|+
literal|" released container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|node
operator|+
literal|" with event: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
DECL|field|clusterResource
specifier|private
name|Resource
name|clusterResource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|usedResource
specifier|private
name|Resource
name|usedResource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|removeNode (RMNode nodeInfo)
specifier|private
specifier|synchronized
name|void
name|removeNode
parameter_list|(
name|RMNode
name|nodeInfo
parameter_list|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|nodeInfo
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Kill running containers
for|for
control|(
name|RMContainer
name|container
range|:
name|node
operator|.
name|getRunningContainers
argument_list|()
control|)
block|{
name|containerCompleted
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|//Remove the node
name|this
operator|.
name|nodes
operator|.
name|remove
argument_list|(
name|nodeInfo
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update cluster metrics
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|clusterResource
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (String queueName, boolean includeChildQueues, boolean recursive)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
return|return
name|DEFAULT_QUEUE
operator|.
name|getQueueInfo
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAclInfo ()
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|()
block|{
return|return
name|DEFAULT_QUEUE
operator|.
name|getQueueUserAclInfo
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|addNode (RMNode nodeManager)
specifier|private
specifier|synchronized
name|void
name|addNode
parameter_list|(
name|RMNode
name|nodeManager
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|.
name|put
argument_list|(
name|nodeManager
operator|.
name|getNodeID
argument_list|()
argument_list|,
operator|new
name|FiCaSchedulerNode
argument_list|(
name|nodeManager
argument_list|,
name|usePortForNodeName
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterResource
argument_list|,
name|nodeManager
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
block|{
comment|// NOT IMPLEMENTED
block|}
annotation|@
name|Override
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
specifier|synchronized
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerNodeReport
argument_list|(
name|node
argument_list|)
return|;
block|}
DECL|method|getRMContainer (ContainerId containerId)
specifier|private
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|application
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|application
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueueMetrics ()
specifier|public
name|QueueMetrics
name|getRootQueueMetrics
parameter_list|()
block|{
return|return
name|DEFAULT_QUEUE
operator|.
name|getMetrics
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, QueueACL acl, String queueName)
specifier|public
specifier|synchronized
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
return|return
name|DEFAULT_QUEUE
operator|.
name|hasAccess
argument_list|(
name|acl
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
block|}
end_class

end_unit

