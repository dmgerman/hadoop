begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_class
DECL|class|MemStore
specifier|public
class|class
name|MemStore
implements|implements
name|Store
block|{
DECL|field|recordFactory
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|doneWithRecovery
specifier|private
name|boolean
name|doneWithRecovery
init|=
literal|false
decl_stmt|;
DECL|method|MemStore ()
specifier|public
name|MemStore
parameter_list|()
block|{
name|nodeId
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
expr_stmt|;
name|nodeId
operator|.
name|setHost
argument_list|(
literal|"TODO"
argument_list|)
expr_stmt|;
name|nodeId
operator|.
name|setPort
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNode (RMNode node)
specifier|public
name|void
name|storeNode
parameter_list|(
name|RMNode
name|node
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|removeNode (RMNode node)
specifier|public
name|void
name|removeNode
parameter_list|(
name|RMNode
name|node
parameter_list|)
throws|throws
name|IOException
block|{}
DECL|class|ApplicationStoreImpl
specifier|private
class|class
name|ApplicationStoreImpl
implements|implements
name|ApplicationStore
block|{
annotation|@
name|Override
DECL|method|storeContainer (Container container)
specifier|public
name|void
name|storeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|removeContainer (Container container)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|storeMasterContainer (Container container)
specifier|public
name|void
name|storeMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|updateApplicationState ( ApplicationMaster master)
specifier|public
name|void
name|updateApplicationState
parameter_list|(
name|ApplicationMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|isLoggable ()
specifier|public
name|boolean
name|isLoggable
parameter_list|()
block|{
return|return
name|doneWithRecovery
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createApplicationStore (ApplicationId application, ApplicationSubmissionContext context)
specifier|public
name|ApplicationStore
name|createApplicationStore
parameter_list|(
name|ApplicationId
name|application
parameter_list|,
name|ApplicationSubmissionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ApplicationStoreImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId application)
specifier|public
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|application
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|restore ()
specifier|public
name|RMState
name|restore
parameter_list|()
throws|throws
name|IOException
block|{
name|MemRMState
name|state
init|=
operator|new
name|MemRMState
argument_list|()
decl_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|getNextNodeId ()
specifier|public
specifier|synchronized
name|NodeId
name|getNextNodeId
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: FIXMEVinodkv
comment|//    int num = nodeId.getId();
comment|//    num++;
comment|//    nodeId.setId(num);
return|return
name|nodeId
return|;
block|}
DECL|class|MemRMState
specifier|private
class|class
name|MemRMState
implements|implements
name|RMState
block|{
DECL|method|MemRMState ()
specifier|public
name|MemRMState
parameter_list|()
block|{
name|nodeId
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStoredNodeManagers ()
specifier|public
name|List
argument_list|<
name|RMNode
argument_list|>
name|getStoredNodeManagers
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLastLoggedNodeId ()
specifier|public
name|NodeId
name|getLastLoggedNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|getStoredApplications ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationInfo
argument_list|>
name|getStoredApplications
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Store
operator|.
name|ApplicationInfo
argument_list|>
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isLoggable ()
specifier|public
name|boolean
name|isLoggable
parameter_list|()
block|{
return|return
name|doneWithRecovery
return|;
block|}
annotation|@
name|Override
DECL|method|doneWithRecovery ()
specifier|public
name|void
name|doneWithRecovery
parameter_list|()
block|{
name|doneWithRecovery
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

