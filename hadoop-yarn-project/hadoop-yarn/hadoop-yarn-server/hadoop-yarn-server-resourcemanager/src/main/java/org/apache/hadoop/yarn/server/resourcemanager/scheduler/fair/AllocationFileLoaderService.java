begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|AllocationFileLoaderService
specifier|public
class|class
name|AllocationFileLoaderService
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AllocationFileLoaderService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Time to wait between checks of the allocation file */
DECL|field|ALLOC_RELOAD_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|ALLOC_RELOAD_INTERVAL_MS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/**    * Time to wait after the allocation has been modified before reloading it    * (this is done to prevent loading a file that hasn't been fully written).    */
DECL|field|ALLOC_RELOAD_WAIT_MS
specifier|public
specifier|static
specifier|final
name|long
name|ALLOC_RELOAD_WAIT_MS
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|THREAD_JOIN_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|long
name|THREAD_JOIN_TIMEOUT_MS
init|=
literal|1000
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|lastSuccessfulReload
specifier|private
name|long
name|lastSuccessfulReload
decl_stmt|;
comment|// Last time we successfully reloaded queues
DECL|field|lastReloadAttemptFailed
specifier|private
name|boolean
name|lastReloadAttemptFailed
init|=
literal|false
decl_stmt|;
comment|// Path to XML file containing allocations.
DECL|field|allocFile
specifier|private
name|File
name|allocFile
decl_stmt|;
DECL|field|reloadListener
specifier|private
name|Listener
name|reloadListener
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|reloadIntervalMs
name|long
name|reloadIntervalMs
init|=
name|ALLOC_RELOAD_INTERVAL_MS
decl_stmt|;
DECL|field|reloadThread
specifier|private
name|Thread
name|reloadThread
decl_stmt|;
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|method|AllocationFileLoaderService ()
specifier|public
name|AllocationFileLoaderService
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|AllocationFileLoaderService (Clock clock)
specifier|public
name|AllocationFileLoaderService
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|AllocationFileLoaderService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|allocFile
operator|=
name|getAllocationFile
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|reloadThread
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|long
name|time
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|lastModified
init|=
name|allocFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastModified
operator|>
name|lastSuccessfulReload
operator|&&
name|time
operator|>
name|lastModified
operator|+
name|ALLOC_RELOAD_WAIT_MS
condition|)
block|{
try|try
block|{
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lastReloadAttemptFailed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload fair scheduler config file - "
operator|+
literal|"will use existing allocations."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|lastReloadAttemptFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastModified
operator|==
literal|0l
condition|)
block|{
if|if
condition|(
operator|!
name|lastReloadAttemptFailed
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to reload fair scheduler config file because"
operator|+
literal|" last modified returned 0. File exists: "
operator|+
name|allocFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastReloadAttemptFailed
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|reloadIntervalMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while waiting to reload alloc configuration"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|reloadThread
operator|.
name|setName
argument_list|(
literal|"AllocationFileReloader"
argument_list|)
expr_stmt|;
name|reloadThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reloadThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reloadThread
operator|!=
literal|null
condition|)
block|{
name|reloadThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|reloadThread
operator|.
name|join
argument_list|(
name|THREAD_JOIN_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"reloadThread fails to join."
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Path to XML file containing allocations. If the    * path is relative, it is searched for in the    * classpath, but loaded like a regular File.    */
DECL|method|getAllocationFile (Configuration conf)
specifier|public
name|File
name|getAllocationFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|allocFilePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_ALLOCATION_FILE
argument_list|)
decl_stmt|;
name|File
name|allocFile
init|=
operator|new
name|File
argument_list|(
name|allocFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allocFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|allocFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|allocFilePath
operator|+
literal|" not found on the classpath."
argument_list|)
expr_stmt|;
name|allocFile
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Allocation file "
operator|+
name|url
operator|+
literal|" found on the classpath is not on the local filesystem."
argument_list|)
throw|;
block|}
else|else
block|{
name|allocFile
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allocFile
return|;
block|}
DECL|method|setReloadListener (Listener reloadListener)
specifier|public
specifier|synchronized
name|void
name|setReloadListener
parameter_list|(
name|Listener
name|reloadListener
parameter_list|)
block|{
name|this
operator|.
name|reloadListener
operator|=
name|reloadListener
expr_stmt|;
block|}
comment|/**    * Updates the allocation list from the allocation config file. This file is    * expected to be in the XML format specified in the design doc.    *    * @throws IOException if the config file cannot be read.    * @throws AllocationConfigurationException if allocations are invalid.    * @throws ParserConfigurationException if XML parser is misconfigured.    * @throws SAXException if config file is malformed.    */
DECL|method|reloadAllocations ()
specifier|public
specifier|synchronized
name|void
name|reloadAllocations
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
block|{
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading allocation file "
operator|+
name|allocFile
argument_list|)
expr_stmt|;
comment|// Create some temporary hashmaps to hold the new allocs, and we only save
comment|// them in our fields if we have parsed the entire allocs file successfully.
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|minQueueResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|maxQueueResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueMaxApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|queueMaxAMShares
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceWeights
argument_list|>
name|queueWeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ResourceWeights
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchedulingPolicy
argument_list|>
name|queuePolicies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchedulingPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|minSharePreemptionTimeouts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
name|queueAcls
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|userMaxAppsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|queueMaxAppsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|queueMaxAMShareDefault
init|=
literal|1.0f
decl_stmt|;
name|long
name|fairSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|defaultMinSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|SchedulingPolicy
name|defaultSchedPolicy
init|=
name|SchedulingPolicy
operator|.
name|DEFAULT_POLICY
decl_stmt|;
name|QueuePlacementPolicy
name|newPlacementPolicy
init|=
literal|null
decl_stmt|;
comment|// Remember all queue names so we can display them on web UI, etc.
comment|// configuredQueues is segregated based on whether it is a leaf queue
comment|// or a parent queue. This information is used for creating queues
comment|// and also for making queue placement decisions(QueuePlacementRule.java).
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
init|=
operator|new
name|HashMap
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FSQueueType
name|queueType
range|:
name|FSQueueType
operator|.
name|values
argument_list|()
control|)
block|{
name|configuredQueues
operator|.
name|put
argument_list|(
name|queueType
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Read and parse the allocations file.
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|allocFile
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"allocations"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Bad fair scheduler config "
operator|+
literal|"file: top-level element not<allocations>"
argument_list|)
throw|;
name|NodeList
name|elements
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|queueElements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|Element
name|placementPolicyElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
literal|"queue"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
literal|"pool"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|queueElements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"user"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
literal|"maxRunningApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxApps
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"userMaxAppsDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxAppsDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fairSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|fairSharePreemptionTimeout
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultMinSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|defaultMinSharePreemptionTimeout
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"queueMaxAppsDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queueMaxAppsDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"queueMaxAMShareDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|float
name|val
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|val
operator|=
name|Math
operator|.
name|min
argument_list|(
name|val
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|queueMaxAMShareDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultQueueSchedulingPolicy"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
literal|"defaultQueueSchedulingMode"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|defaultSchedPolicy
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"queuePlacementPolicy"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|placementPolicyElement
operator|=
name|element
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad element in allocations file: "
operator|+
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Load queue elements.  A root queue can either be included or omitted.  If
comment|// it's included, all other queues must be inside it.
for|for
control|(
name|Element
name|element
range|:
name|queueElements
control|)
block|{
name|String
name|parent
init|=
literal|"root"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"root"
argument_list|)
condition|)
block|{
if|if
condition|(
name|queueElements
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"If configuring root queue,"
operator|+
literal|" no other queues can be placed alongside it."
argument_list|)
throw|;
block|}
name|parent
operator|=
literal|null
expr_stmt|;
block|}
name|loadQueue
argument_list|(
name|parent
argument_list|,
name|element
argument_list|,
name|minQueueResources
argument_list|,
name|maxQueueResources
argument_list|,
name|queueMaxApps
argument_list|,
name|userMaxApps
argument_list|,
name|queueMaxAMShares
argument_list|,
name|queueWeights
argument_list|,
name|queuePolicies
argument_list|,
name|minSharePreemptionTimeouts
argument_list|,
name|queueAcls
argument_list|,
name|configuredQueues
argument_list|)
expr_stmt|;
block|}
comment|// Load placement policy and pass it configured queues
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|placementPolicyElement
operator|!=
literal|null
condition|)
block|{
name|newPlacementPolicy
operator|=
name|QueuePlacementPolicy
operator|.
name|fromXml
argument_list|(
name|placementPolicyElement
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPlacementPolicy
operator|=
name|QueuePlacementPolicy
operator|.
name|fromConfiguration
argument_list|(
name|conf
argument_list|,
name|configuredQueues
argument_list|)
expr_stmt|;
block|}
name|AllocationConfiguration
name|info
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|minQueueResources
argument_list|,
name|maxQueueResources
argument_list|,
name|queueMaxApps
argument_list|,
name|userMaxApps
argument_list|,
name|queueWeights
argument_list|,
name|queueMaxAMShares
argument_list|,
name|userMaxAppsDefault
argument_list|,
name|queueMaxAppsDefault
argument_list|,
name|queueMaxAMShareDefault
argument_list|,
name|queuePolicies
argument_list|,
name|defaultSchedPolicy
argument_list|,
name|minSharePreemptionTimeouts
argument_list|,
name|queueAcls
argument_list|,
name|fairSharePreemptionTimeout
argument_list|,
name|defaultMinSharePreemptionTimeout
argument_list|,
name|newPlacementPolicy
argument_list|,
name|configuredQueues
argument_list|)
decl_stmt|;
name|lastSuccessfulReload
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|lastReloadAttemptFailed
operator|=
literal|false
expr_stmt|;
name|reloadListener
operator|.
name|onReload
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Loads a queue from a queue element in the configuration file    */
DECL|method|loadQueue (String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues)
specifier|private
name|void
name|loadQueue
parameter_list|(
name|String
name|parentName
parameter_list|,
name|Element
name|element
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|minQueueResources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|maxQueueResources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueMaxApps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxApps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|queueMaxAMShares
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceWeights
argument_list|>
name|queueWeights
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchedulingPolicy
argument_list|>
name|queuePolicies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|minSharePreemptionTimeouts
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
name|queueAcls
parameter_list|,
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|String
name|queueName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentName
operator|!=
literal|null
condition|)
block|{
name|queueName
operator|=
name|parentName
operator|+
literal|"."
operator|+
name|queueName
expr_stmt|;
block|}
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|boolean
name|isLeaf
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
literal|"minResources"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Resource
name|val
init|=
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|minQueueResources
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxResources"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Resource
name|val
init|=
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|maxQueueResources
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxRunningApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queueMaxApps
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxAMShare"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|float
name|val
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|val
operator|=
name|Math
operator|.
name|min
argument_list|(
name|val
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|queueMaxAMShares
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weight"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|double
name|val
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queueWeights
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
operator|new
name|ResourceWeights
argument_list|(
operator|(
name|float
operator|)
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"minSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|minSharePreemptionTimeouts
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"schedulingPolicy"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
literal|"schedulingMode"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|SchedulingPolicy
name|policy
init|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queuePolicies
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"aclSubmitApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"aclAdministerApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"queue"
operator|.
name|endsWith
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
literal|"pool"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|loadQueue
argument_list|(
name|queueName
argument_list|,
name|field
argument_list|,
name|minQueueResources
argument_list|,
name|maxQueueResources
argument_list|,
name|queueMaxApps
argument_list|,
name|userMaxApps
argument_list|,
name|queueMaxAMShares
argument_list|,
name|queueWeights
argument_list|,
name|queuePolicies
argument_list|,
name|minSharePreemptionTimeouts
argument_list|,
name|queueAcls
argument_list|,
name|configuredQueues
argument_list|)
expr_stmt|;
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|isLeaf
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isLeaf
condition|)
block|{
comment|// if a leaf in the alloc file is marked as type='parent'
comment|// then store it under 'parent'
if|if
condition|(
literal|"parent"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
name|queueAcls
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|acls
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxQueueResources
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
operator|&&
name|minQueueResources
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
operator|&&
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|minQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|,
name|maxQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue %s has max resources %s less than min resources %s"
argument_list|,
name|queueName
argument_list|,
name|maxQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|,
name|minQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|Listener
specifier|public
interface|interface
name|Listener
block|{
DECL|method|onReload (AllocationConfiguration info)
specifier|public
name|void
name|onReload
parameter_list|(
name|AllocationConfiguration
name|info
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

