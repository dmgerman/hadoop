begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|MemoryRMStateStore
specifier|public
class|class
name|MemoryRMStateStore
extends|extends
name|RMStateStore
block|{
DECL|field|state
name|RMState
name|state
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|getState ()
specifier|public
name|RMState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
specifier|synchronized
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// return a copy of the state to allow for modification of the real state
name|RMState
name|returnState
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
name|returnState
operator|.
name|appState
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|appState
argument_list|)
expr_stmt|;
return|return
name|returnState
return|;
block|}
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|protected
specifier|synchronized
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Override
DECL|method|storeApplicationState (String appId, ApplicationStateDataPBImpl appStateData)
specifier|public
name|void
name|storeApplicationState
parameter_list|(
name|String
name|appId
parameter_list|,
name|ApplicationStateDataPBImpl
name|appStateData
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationState
name|appState
init|=
operator|new
name|ApplicationState
argument_list|(
name|appStateData
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|appState
operator|.
name|containsKey
argument_list|(
name|appState
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
block|{
name|Exception
name|e
init|=
operator|new
name|IOException
argument_list|(
literal|"App: "
operator|+
name|appId
operator|+
literal|" is already stored."
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|state
operator|.
name|appState
operator|.
name|put
argument_list|(
name|appState
operator|.
name|getAppId
argument_list|()
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeApplicationAttemptState (String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)
specifier|public
specifier|synchronized
name|void
name|storeApplicationAttemptState
parameter_list|(
name|String
name|attemptIdStr
parameter_list|,
name|ApplicationAttemptStateDataPBImpl
name|attemptStateData
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|attemptIdStr
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|dibb
operator|.
name|reset
argument_list|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptState
name|attemptState
init|=
operator|new
name|ApplicationAttemptState
argument_list|(
name|attemptId
argument_list|,
name|attemptStateData
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|ApplicationState
name|appState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|appState
operator|!=
literal|null
assert|;
if|if
condition|(
name|appState
operator|.
name|attempts
operator|.
name|containsKey
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
condition|)
block|{
name|Exception
name|e
init|=
operator|new
name|IOException
argument_list|(
literal|"Attempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for attempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeApplicationState (ApplicationState appState)
specifier|public
specifier|synchronized
name|void
name|removeApplicationState
parameter_list|(
name|ApplicationState
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|ApplicationState
name|removed
init|=
name|state
operator|.
name|appState
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
decl_stmt|;
assert|assert
name|removed
operator|!=
literal|null
assert|;
block|}
block|}
end_class

end_unit

