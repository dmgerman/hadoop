begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.invariants
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|invariants
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Invariant checker that checks certain reservation invariants are respected.  */
end_comment

begin_class
DECL|class|ReservationInvariantsChecker
specifier|public
class|class
name|ReservationInvariantsChecker
extends|extends
name|InvariantsChecker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReservationInvariantsChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clock
specifier|private
name|UTCClock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|editSchedule ()
specifier|public
name|void
name|editSchedule
parameter_list|()
block|{
name|Collection
argument_list|<
name|Plan
argument_list|>
name|plans
init|=
name|getContext
argument_list|()
operator|.
name|getReservationSystem
argument_list|()
operator|.
name|getAllPlans
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Plan
name|plan
range|:
name|plans
control|)
block|{
name|long
name|currReservations
init|=
name|plan
operator|.
name|getReservationsAtTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|numberReservationQueues
init|=
name|getContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|getQueueInfo
argument_list|(
name|plan
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|currReservations
operator|!=
name|numberReservationQueues
operator|-
literal|1
condition|)
block|{
name|logOrThrow
argument_list|(
literal|"Number of reservations ("
operator|+
name|currReservations
operator|+
literal|") does NOT match the number of reservationQueues ("
operator|+
operator|(
name|numberReservationQueues
operator|-
literal|1
operator|)
operator|+
literal|"), while it should."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|InvariantViolationException
argument_list|(
literal|"Issue during invariant check: "
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

