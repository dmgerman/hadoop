begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.distributed
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|distributed
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|QueuedContainersStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClusterMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|TopKNodeSelector
specifier|public
class|class
name|TopKNodeSelector
implements|implements
name|ClusterMonitor
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TopKNodeSelector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|TopKComparator
specifier|public
enum|enum
name|TopKComparator
implements|implements
name|Comparator
argument_list|<
name|ClusterNode
argument_list|>
block|{
DECL|enumConstant|WAIT_TIME
name|WAIT_TIME
block|,
DECL|enumConstant|QUEUE_LENGTH
name|QUEUE_LENGTH
block|;
annotation|@
name|Override
DECL|method|compare (ClusterNode o1, ClusterNode o2)
specifier|public
name|int
name|compare
parameter_list|(
name|ClusterNode
name|o1
parameter_list|,
name|ClusterNode
name|o2
parameter_list|)
block|{
if|if
condition|(
name|getQuant
argument_list|(
name|o1
argument_list|)
operator|==
name|getQuant
argument_list|(
name|o2
argument_list|)
condition|)
block|{
return|return
name|o1
operator|.
name|timestamp
operator|<
name|o2
operator|.
name|timestamp
condition|?
operator|+
literal|1
else|:
operator|-
literal|1
return|;
block|}
return|return
name|getQuant
argument_list|(
name|o1
argument_list|)
operator|>
name|getQuant
argument_list|(
name|o2
argument_list|)
condition|?
operator|+
literal|1
else|:
operator|-
literal|1
return|;
block|}
DECL|method|getQuant (ClusterNode c)
specifier|private
name|int
name|getQuant
parameter_list|(
name|ClusterNode
name|c
parameter_list|)
block|{
return|return
operator|(
name|this
operator|==
name|WAIT_TIME
operator|)
condition|?
name|c
operator|.
name|queueTime
else|:
name|c
operator|.
name|waitQueueLength
return|;
block|}
block|}
DECL|class|ClusterNode
specifier|static
class|class
name|ClusterNode
block|{
DECL|field|queueTime
name|int
name|queueTime
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|waitQueueLength
name|int
name|waitQueueLength
init|=
literal|0
decl_stmt|;
DECL|field|timestamp
name|double
name|timestamp
decl_stmt|;
DECL|field|nodeId
specifier|final
name|NodeId
name|nodeId
decl_stmt|;
DECL|method|ClusterNode (NodeId nodeId)
specifier|public
name|ClusterNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|updateTimestamp
argument_list|()
expr_stmt|;
block|}
DECL|method|setQueueTime (int queueTime)
specifier|public
name|ClusterNode
name|setQueueTime
parameter_list|(
name|int
name|queueTime
parameter_list|)
block|{
name|this
operator|.
name|queueTime
operator|=
name|queueTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setWaitQueueLength (int queueLength)
specifier|public
name|ClusterNode
name|setWaitQueueLength
parameter_list|(
name|int
name|queueLength
parameter_list|)
block|{
name|this
operator|.
name|waitQueueLength
operator|=
name|queueLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|updateTimestamp ()
specifier|public
name|ClusterNode
name|updateTimestamp
parameter_list|()
block|{
name|this
operator|.
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|field|k
specifier|private
specifier|final
name|int
name|k
decl_stmt|;
DECL|field|topKNodes
specifier|private
specifier|final
name|List
argument_list|<
name|NodeId
argument_list|>
name|topKNodes
decl_stmt|;
DECL|field|scheduledExecutor
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduledExecutor
decl_stmt|;
DECL|field|clusterNodes
specifier|private
specifier|final
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|ClusterNode
argument_list|>
name|clusterNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|ClusterNode
argument_list|>
name|comparator
decl_stmt|;
DECL|field|computeTask
name|Runnable
name|computeTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|topKNodes
init|)
block|{
name|topKNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|topKNodes
operator|.
name|addAll
argument_list|(
name|computeTopKNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|TopKNodeSelector (int k, TopKComparator comparator)
name|TopKNodeSelector
parameter_list|(
name|int
name|k
parameter_list|,
name|TopKComparator
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|k
operator|=
name|k
expr_stmt|;
name|this
operator|.
name|topKNodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|scheduledExecutor
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|TopKNodeSelector (int k, long nodeComputationInterval, TopKComparator comparator)
specifier|public
name|TopKNodeSelector
parameter_list|(
name|int
name|k
parameter_list|,
name|long
name|nodeComputationInterval
parameter_list|,
name|TopKComparator
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|k
operator|=
name|k
expr_stmt|;
name|this
operator|.
name|topKNodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduledExecutor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|scheduledExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|computeTask
argument_list|,
name|nodeComputationInterval
argument_list|,
name|nodeComputationInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addNode (List<NMContainerStatus> containerStatuses, RMNode rmNode)
specifier|public
name|void
name|addNode
parameter_list|(
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerStatuses
parameter_list|,
name|RMNode
name|rmNode
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node added event from: "
operator|+
name|rmNode
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ignoring this currently : atleast one NODE_UPDATE heartbeat is
comment|// required to ensure node eligibility.
block|}
annotation|@
name|Override
DECL|method|removeNode (RMNode removedRMNode)
specifier|public
name|void
name|removeNode
parameter_list|(
name|RMNode
name|removedRMNode
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node delete event for: "
operator|+
name|removedRMNode
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|clusterNodes
init|)
block|{
if|if
condition|(
name|this
operator|.
name|clusterNodes
operator|.
name|containsKey
argument_list|(
name|removedRMNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|clusterNodes
operator|.
name|remove
argument_list|(
name|removedRMNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete ClusterNode: "
operator|+
name|removedRMNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node not in list!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nodeUpdate (RMNode rmNode)
specifier|public
name|void
name|nodeUpdate
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node update event from: "
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|QueuedContainersStatus
name|queuedContainersStatus
init|=
name|rmNode
operator|.
name|getQueuedContainersStatus
argument_list|()
decl_stmt|;
name|int
name|estimatedQueueWaitTime
init|=
name|queuedContainersStatus
operator|.
name|getEstimatedQueueWaitTime
argument_list|()
decl_stmt|;
name|int
name|waitQueueLength
init|=
name|queuedContainersStatus
operator|.
name|getWaitQueueLength
argument_list|()
decl_stmt|;
comment|// Add nodes to clusterNodes.. if estimatedQueueTime is -1, Ignore node
comment|// UNLESS comparator is based on queue length, in which case, we should add
synchronized|synchronized
init|(
name|this
operator|.
name|clusterNodes
init|)
block|{
name|ClusterNode
name|currentNode
init|=
name|this
operator|.
name|clusterNodes
operator|.
name|get
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentNode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|estimatedQueueWaitTime
operator|!=
operator|-
literal|1
operator|||
name|comparator
operator|==
name|TopKComparator
operator|.
name|QUEUE_LENGTH
condition|)
block|{
name|this
operator|.
name|clusterNodes
operator|.
name|put
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
operator|new
name|ClusterNode
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|setQueueTime
argument_list|(
name|estimatedQueueWaitTime
argument_list|)
operator|.
name|setWaitQueueLength
argument_list|(
name|waitQueueLength
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Inserting ClusterNode ["
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|"]"
operator|+
literal|"with queue wait time ["
operator|+
name|estimatedQueueWaitTime
operator|+
literal|"] and "
operator|+
literal|"wait queue length ["
operator|+
name|waitQueueLength
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IGNORING ClusterNode ["
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|"]"
operator|+
literal|"with queue wait time ["
operator|+
name|estimatedQueueWaitTime
operator|+
literal|"] and "
operator|+
literal|"wait queue length ["
operator|+
name|waitQueueLength
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|estimatedQueueWaitTime
operator|!=
operator|-
literal|1
operator|||
name|comparator
operator|==
name|TopKComparator
operator|.
name|QUEUE_LENGTH
condition|)
block|{
name|currentNode
operator|.
name|setQueueTime
argument_list|(
name|estimatedQueueWaitTime
argument_list|)
operator|.
name|setWaitQueueLength
argument_list|(
name|waitQueueLength
argument_list|)
operator|.
name|updateTimestamp
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating ClusterNode ["
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|"]"
operator|+
literal|"with queue wait time ["
operator|+
name|estimatedQueueWaitTime
operator|+
literal|"] and "
operator|+
literal|"wait queue length ["
operator|+
name|waitQueueLength
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|clusterNodes
operator|.
name|remove
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting ClusterNode ["
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|"]"
operator|+
literal|"with queue wait time ["
operator|+
name|currentNode
operator|.
name|queueTime
operator|+
literal|"] and "
operator|+
literal|"wait queue length ["
operator|+
name|currentNode
operator|.
name|waitQueueLength
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|updateNodeResource (RMNode rmNode, ResourceOption resourceOption)
specifier|public
name|void
name|updateNodeResource
parameter_list|(
name|RMNode
name|rmNode
parameter_list|,
name|ResourceOption
name|resourceOption
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node resource update event from: "
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ignoring this currently...
block|}
DECL|method|selectNodes ()
specifier|public
name|List
argument_list|<
name|NodeId
argument_list|>
name|selectNodes
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|topKNodes
init|)
block|{
return|return
name|this
operator|.
name|k
operator|<
name|this
operator|.
name|topKNodes
operator|.
name|size
argument_list|()
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|topKNodes
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|k
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|topKNodes
argument_list|)
return|;
block|}
block|}
DECL|method|computeTopKNodes ()
specifier|private
name|List
argument_list|<
name|NodeId
argument_list|>
name|computeTopKNodes
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|clusterNodes
init|)
block|{
name|ArrayList
name|aList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|clusterNodes
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
index|[]
name|nodes
init|=
name|aList
operator|.
name|toArray
argument_list|()
decl_stmt|;
comment|// Collections.sort would do something similar by calling Arrays.sort
comment|// internally but would finally iterate through the input list (aList)
comment|// to reset the value of each element.. Since we don't really care about
comment|// 'aList', we can use the iteration to create the list of nodeIds which
comment|// is what we ultimately care about.
name|Arrays
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|retList
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ClusterNode
operator|)
name|nodes
index|[
name|j
index|]
operator|)
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
return|return
name|retList
return|;
block|}
block|}
block|}
end_class

end_unit

