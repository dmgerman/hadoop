begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.processor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|RejectedSchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|RejectionReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|PlacementConstraintManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|algorithm
operator|.
name|DefaultPlacementAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|PlacedSchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|SchedulingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * An ApplicationMasterService Processor that performs Constrained placement of  * Scheduling Requests. It does the following:  * 1. All initialization.  * 2. Intercepts placement constraints from the register call and adds it to  *    the placement constraint manager.  * 3. Dispatches Scheduling Requests to the Planner.  */
end_comment

begin_class
DECL|class|PlacementProcessor
specifier|public
class|class
name|PlacementProcessor
implements|implements
name|ApplicationMasterServiceProcessor
block|{
comment|/**    * Wrapper over the SchedulingResponse that wires in the placement attempt    * and last attempted Node.    */
DECL|class|Response
specifier|static
specifier|final
class|class
name|Response
extends|extends
name|SchedulingResponse
block|{
DECL|field|placementAttempt
specifier|private
specifier|final
name|int
name|placementAttempt
decl_stmt|;
DECL|field|attemptedNode
specifier|private
specifier|final
name|SchedulerNode
name|attemptedNode
decl_stmt|;
DECL|method|Response (boolean isSuccess, ApplicationId applicationId, SchedulingRequest schedulingRequest, int placementAttempt, SchedulerNode attemptedNode)
specifier|private
name|Response
parameter_list|(
name|boolean
name|isSuccess
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|SchedulingRequest
name|schedulingRequest
parameter_list|,
name|int
name|placementAttempt
parameter_list|,
name|SchedulerNode
name|attemptedNode
parameter_list|)
block|{
name|super
argument_list|(
name|isSuccess
argument_list|,
name|applicationId
argument_list|,
name|schedulingRequest
argument_list|)
expr_stmt|;
name|this
operator|.
name|placementAttempt
operator|=
name|placementAttempt
expr_stmt|;
name|this
operator|.
name|attemptedNode
operator|=
name|attemptedNode
expr_stmt|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PlacementProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|constraintManager
specifier|private
name|PlacementConstraintManager
name|constraintManager
decl_stmt|;
DECL|field|nextAMSProcessor
specifier|private
name|ApplicationMasterServiceProcessor
name|nextAMSProcessor
decl_stmt|;
DECL|field|scheduler
specifier|private
name|AbstractYarnScheduler
name|scheduler
decl_stmt|;
DECL|field|schedulingThreadPool
specifier|private
name|ExecutorService
name|schedulingThreadPool
decl_stmt|;
DECL|field|retryAttempts
specifier|private
name|int
name|retryAttempts
decl_stmt|;
DECL|field|requestsToRetry
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|BatchedRequests
argument_list|>
argument_list|>
name|requestsToRetry
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requestsToReject
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|requestsToReject
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|iteratorType
specifier|private
name|BatchedRequests
operator|.
name|IteratorType
name|iteratorType
decl_stmt|;
DECL|field|placementDispatcher
specifier|private
name|PlacementDispatcher
name|placementDispatcher
decl_stmt|;
annotation|@
name|Override
DECL|method|init (ApplicationMasterServiceContext amsContext, ApplicationMasterServiceProcessor nextProcessor)
specifier|public
name|void
name|init
parameter_list|(
name|ApplicationMasterServiceContext
name|amsContext
parameter_list|,
name|ApplicationMasterServiceProcessor
name|nextProcessor
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Constraint Placement Processor:"
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextAMSProcessor
operator|=
name|nextProcessor
expr_stmt|;
name|this
operator|.
name|constraintManager
operator|=
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
operator|.
name|getPlacementConstraintManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
call|(
name|AbstractYarnScheduler
call|)
argument_list|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
argument_list|)
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
comment|// Only the first class is considered - even if a comma separated
comment|// list is provided. (This is for simplicity, since getInstances does a
comment|// lot of good things by handling things correctly)
name|List
argument_list|<
name|ConstraintPlacementAlgorithm
argument_list|>
name|instances
init|=
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getInstances
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS
argument_list|,
name|ConstraintPlacementAlgorithm
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConstraintPlacementAlgorithm
name|algorithm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|instances
operator|!=
literal|null
operator|&&
operator|!
name|instances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|algorithm
operator|=
name|instances
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|algorithm
operator|=
operator|new
name|DefaultPlacementAlgorithm
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Placement Algorithm [{}]"
argument_list|,
name|algorithm
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|iteratorName
init|=
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR
argument_list|,
name|BatchedRequests
operator|.
name|IteratorType
operator|.
name|SERIAL
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Placement Algorithm Iterator[{}]"
argument_list|,
name|iteratorName
argument_list|)
expr_stmt|;
try|try
block|{
name|iteratorType
operator|=
name|BatchedRequests
operator|.
name|IteratorType
operator|.
name|valueOf
argument_list|(
name|iteratorName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate Placement Algorithm Iterator: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|int
name|algoPSize
init|=
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|placementDispatcher
operator|=
operator|new
name|PlacementDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|placementDispatcher
operator|.
name|init
argument_list|(
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
argument_list|,
name|algorithm
argument_list|,
name|algoPSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Planning Algorithm pool size [{}]"
argument_list|,
name|algoPSize
argument_list|)
expr_stmt|;
name|int
name|schedPSize
init|=
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|schedulingThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|schedPSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduler pool size [{}]"
argument_list|,
name|schedPSize
argument_list|)
expr_stmt|;
comment|// Number of times a request that is not satisfied by the scheduler
comment|// can be retried.
name|this
operator|.
name|retryAttempts
operator|=
operator|(
operator|(
name|RMContextImpl
operator|)
name|amsContext
operator|)
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num retry attempts [{}]"
argument_list|,
name|this
operator|.
name|retryAttempts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster (ApplicationAttemptId appAttemptId, RegisterApplicationMasterRequest request, RegisterApplicationMasterResponse response)
specifier|public
name|void
name|registerApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RegisterApplicationMasterRequest
name|request
parameter_list|,
name|RegisterApplicationMasterResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|appPlacementConstraints
init|=
name|request
operator|.
name|getPlacementConstraints
argument_list|()
decl_stmt|;
name|processPlacementConstraints
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appPlacementConstraints
argument_list|)
expr_stmt|;
name|nextAMSProcessor
operator|.
name|registerApplicationMaster
argument_list|(
name|appAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|processPlacementConstraints (ApplicationId applicationId, Map<Set<String>, PlacementConstraint> appPlacementConstraints)
specifier|private
name|void
name|processPlacementConstraints
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|appPlacementConstraints
parameter_list|)
block|{
if|if
condition|(
name|appPlacementConstraints
operator|!=
literal|null
operator|&&
operator|!
name|appPlacementConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Constraints added for application [{}] against tags [{}]"
argument_list|,
name|applicationId
argument_list|,
name|appPlacementConstraints
argument_list|)
expr_stmt|;
name|constraintManager
operator|.
name|registerApplication
argument_list|(
name|applicationId
argument_list|,
name|appPlacementConstraints
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId appAttemptId, AllocateRequest request, AllocateResponse response)
specifier|public
name|void
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AllocateRequest
name|request
parameter_list|,
name|AllocateResponse
name|response
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequests
init|=
name|request
operator|.
name|getSchedulingRequests
argument_list|()
decl_stmt|;
name|dispatchRequestsForPlacement
argument_list|(
name|appAttemptId
argument_list|,
name|schedulingRequests
argument_list|)
expr_stmt|;
name|reDispatchRetryableRequests
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|schedulePlacedRequests
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|nextAMSProcessor
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|handleRejectedRequests
argument_list|(
name|appAttemptId
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|dispatchRequestsForPlacement (ApplicationAttemptId appAttemptId, List<SchedulingRequest> schedulingRequests)
specifier|private
name|void
name|dispatchRequestsForPlacement
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequests
parameter_list|)
block|{
if|if
condition|(
name|schedulingRequests
operator|!=
literal|null
operator|&&
operator|!
name|schedulingRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|placementDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|BatchedRequests
argument_list|(
name|iteratorType
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|schedulingRequests
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reDispatchRetryableRequests (ApplicationAttemptId appAttId)
specifier|private
name|void
name|reDispatchRetryableRequests
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|)
block|{
name|List
argument_list|<
name|BatchedRequests
argument_list|>
name|reqsToRetry
init|=
name|this
operator|.
name|requestsToRetry
operator|.
name|get
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqsToRetry
operator|!=
literal|null
operator|&&
operator|!
name|reqsToRetry
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|reqsToRetry
init|)
block|{
for|for
control|(
name|BatchedRequests
name|bReq
range|:
name|reqsToRetry
control|)
block|{
name|this
operator|.
name|placementDispatcher
operator|.
name|dispatch
argument_list|(
name|bReq
argument_list|)
expr_stmt|;
block|}
name|reqsToRetry
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|schedulePlacedRequests (ApplicationAttemptId appAttemptId)
specifier|private
name|void
name|schedulePlacedRequests
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PlacedSchedulingRequest
argument_list|>
name|placedSchedulingRequests
init|=
name|this
operator|.
name|placementDispatcher
operator|.
name|pullPlacedRequests
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
for|for
control|(
name|PlacedSchedulingRequest
name|placedReq
range|:
name|placedSchedulingRequests
control|)
block|{
name|SchedulingRequest
name|sReq
init|=
name|placedReq
operator|.
name|getSchedulingRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulerNode
name|node
range|:
name|placedReq
operator|.
name|getNodes
argument_list|()
control|)
block|{
specifier|final
name|SchedulingRequest
name|sReqClone
init|=
name|SchedulingRequest
operator|.
name|newInstance
argument_list|(
name|sReq
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
name|sReq
operator|.
name|getPriority
argument_list|()
argument_list|,
name|sReq
operator|.
name|getExecutionType
argument_list|()
argument_list|,
name|sReq
operator|.
name|getAllocationTags
argument_list|()
argument_list|,
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
name|sReq
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|getResources
argument_list|()
argument_list|)
argument_list|,
name|sReq
operator|.
name|getPlacementConstraint
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerApplicationAttempt
name|applicationAttempt
init|=
name|this
operator|.
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
parameter_list|()
lambda|->
block|{
name|boolean
name|success
init|=
name|scheduler
operator|.
name|attemptAllocationOnNode
argument_list|(
name|applicationAttempt
argument_list|,
name|sReqClone
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsuccessful allocation attempt [{}] for [{}]"
argument_list|,
name|placedReq
operator|.
name|getPlacementAttempt
argument_list|()
argument_list|,
name|sReqClone
argument_list|)
expr_stmt|;
block|}
name|handleSchedulingResponse
argument_list|(
operator|new
name|Response
argument_list|(
name|success
argument_list|,
name|applicationId
argument_list|,
name|sReqClone
argument_list|,
name|placedReq
operator|.
name|getPlacementAttempt
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|this
operator|.
name|schedulingThreadPool
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleRejectedRequests (ApplicationAttemptId appAttemptId, AllocateResponse response)
specifier|private
name|void
name|handleRejectedRequests
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AllocateResponse
name|response
parameter_list|)
block|{
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|rejectedRequests
init|=
name|this
operator|.
name|placementDispatcher
operator|.
name|pullRejectedRequests
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rejectedRequests
operator|!=
literal|null
operator|&&
operator|!
name|rejectedRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Following requests of [{}] were rejected by"
operator|+
literal|" the PlacementAlgorithmOutput Algorithm: {}"
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|rejectedRequests
argument_list|)
expr_stmt|;
name|ApplicationMasterServiceUtils
operator|.
name|addToRejectedSchedulingRequests
argument_list|(
name|response
argument_list|,
name|rejectedRequests
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|sr
lambda|->
name|RejectedSchedulingRequest
operator|.
name|newInstance
argument_list|(
name|RejectionReason
operator|.
name|COULD_NOT_PLACE_ON_NODE
argument_list|,
name|sr
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rejectedRequests
operator|=
name|this
operator|.
name|requestsToReject
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rejectedRequests
operator|!=
literal|null
operator|&&
operator|!
name|rejectedRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|rejectedRequests
init|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Following requests of [{}] exhausted all retry attempts "
operator|+
literal|"trying to schedule on placed node: {}"
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|rejectedRequests
argument_list|)
expr_stmt|;
name|ApplicationMasterServiceUtils
operator|.
name|addToRejectedSchedulingRequests
argument_list|(
name|response
argument_list|,
name|rejectedRequests
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|sr
lambda|->
name|RejectedSchedulingRequest
operator|.
name|newInstance
argument_list|(
name|RejectionReason
operator|.
name|COULD_NOT_SCHEDULE_ON_NODE
argument_list|,
name|sr
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rejectedRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster (ApplicationAttemptId appAttemptId, FinishApplicationMasterRequest request, FinishApplicationMasterResponse response)
specifier|public
name|void
name|finishApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|FinishApplicationMasterRequest
name|request
parameter_list|,
name|FinishApplicationMasterResponse
name|response
parameter_list|)
block|{
name|constraintManager
operator|.
name|unregisterApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|placementDispatcher
operator|.
name|clearApplicationState
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|requestsToReject
operator|.
name|remove
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|requestsToRetry
operator|.
name|remove
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|nextAMSProcessor
operator|.
name|finishApplicationMaster
argument_list|(
name|appAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSchedulingResponse (SchedulingResponse schedulerResponse)
specifier|private
name|void
name|handleSchedulingResponse
parameter_list|(
name|SchedulingResponse
name|schedulerResponse
parameter_list|)
block|{
name|int
name|placementAttempt
init|=
operator|(
operator|(
name|Response
operator|)
name|schedulerResponse
operator|)
operator|.
name|placementAttempt
decl_stmt|;
comment|// Retry this placement as it is not successful and we are still
comment|// under max retry. The req is batched with other unsuccessful
comment|// requests from the same app
if|if
condition|(
operator|!
name|schedulerResponse
operator|.
name|isSuccess
argument_list|()
operator|&&
name|placementAttempt
operator|<
name|retryAttempts
condition|)
block|{
name|List
argument_list|<
name|BatchedRequests
argument_list|>
name|reqsToRetry
init|=
name|requestsToRetry
operator|.
name|computeIfAbsent
argument_list|(
name|schedulerResponse
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|reqsToRetry
init|)
block|{
name|addToRetryList
argument_list|(
name|schedulerResponse
argument_list|,
name|placementAttempt
argument_list|,
name|reqsToRetry
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Going to retry request for application [{}] after [{}]"
operator|+
literal|" attempts: [{}]"
argument_list|,
name|schedulerResponse
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|placementAttempt
argument_list|,
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|schedulerResponse
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not retrying request for application [{}] after [{}]"
operator|+
literal|" attempts: [{}]"
argument_list|,
name|schedulerResponse
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|placementAttempt
argument_list|,
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|reqsToReject
init|=
name|requestsToReject
operator|.
name|computeIfAbsent
argument_list|(
name|schedulerResponse
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|reqsToReject
init|)
block|{
name|reqsToReject
operator|.
name|add
argument_list|(
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addToRetryList (SchedulingResponse schedulerResponse, int placementAttempt, List<BatchedRequests> reqsToRetry)
specifier|private
name|void
name|addToRetryList
parameter_list|(
name|SchedulingResponse
name|schedulerResponse
parameter_list|,
name|int
name|placementAttempt
parameter_list|,
name|List
argument_list|<
name|BatchedRequests
argument_list|>
name|reqsToRetry
parameter_list|)
block|{
name|boolean
name|isAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BatchedRequests
name|br
range|:
name|reqsToRetry
control|)
block|{
if|if
condition|(
name|br
operator|.
name|getPlacementAttempt
argument_list|()
operator|==
name|placementAttempt
operator|+
literal|1
condition|)
block|{
name|br
operator|.
name|addToBatch
argument_list|(
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|addToBlacklist
argument_list|(
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
operator|.
name|getAllocationTags
argument_list|()
argument_list|,
operator|(
operator|(
name|Response
operator|)
name|schedulerResponse
operator|)
operator|.
name|attemptedNode
argument_list|)
expr_stmt|;
name|isAdded
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isAdded
condition|)
block|{
name|BatchedRequests
name|br
init|=
operator|new
name|BatchedRequests
argument_list|(
name|iteratorType
argument_list|,
name|schedulerResponse
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
argument_list|)
argument_list|,
name|placementAttempt
operator|+
literal|1
argument_list|)
decl_stmt|;
name|reqsToRetry
operator|.
name|add
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|br
operator|.
name|addToBlacklist
argument_list|(
name|schedulerResponse
operator|.
name|getSchedulingRequest
argument_list|()
operator|.
name|getAllocationTags
argument_list|()
argument_list|,
operator|(
operator|(
name|Response
operator|)
name|schedulerResponse
operator|)
operator|.
name|attemptedNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

