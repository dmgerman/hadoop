begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerPreemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
DECL|class|FifoCandidatesSelector
specifier|public
class|class
name|FifoCandidatesSelector
extends|extends
name|PreemptionCandidatesSelector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FifoCandidatesSelector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|preemptableAmountCalculator
specifier|private
name|PreemptableResourceCalculator
name|preemptableAmountCalculator
decl_stmt|;
DECL|field|allowQueuesBalanceAfterAllQueuesSatisfied
specifier|private
name|boolean
name|allowQueuesBalanceAfterAllQueuesSatisfied
decl_stmt|;
DECL|method|FifoCandidatesSelector (CapacitySchedulerPreemptionContext preemptionContext, boolean includeReservedResource, boolean allowQueuesBalanceAfterAllQueuesSatisfied)
name|FifoCandidatesSelector
parameter_list|(
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|,
name|boolean
name|includeReservedResource
parameter_list|,
name|boolean
name|allowQueuesBalanceAfterAllQueuesSatisfied
parameter_list|)
block|{
name|super
argument_list|(
name|preemptionContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|allowQueuesBalanceAfterAllQueuesSatisfied
operator|=
name|allowQueuesBalanceAfterAllQueuesSatisfied
expr_stmt|;
name|preemptableAmountCalculator
operator|=
operator|new
name|PreemptableResourceCalculator
argument_list|(
name|preemptionContext
argument_list|,
name|includeReservedResource
argument_list|,
name|allowQueuesBalanceAfterAllQueuesSatisfied
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|selectCandidates ( Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource clusterResource, Resource totalPreemptionAllowed)
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectCandidates
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|curCandidates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Calculate how much resources we need to preempt
name|preemptableAmountCalculator
operator|.
name|computeIdealAllocation
argument_list|(
name|clusterResource
argument_list|,
name|totalPreemptionAllowed
argument_list|)
expr_stmt|;
comment|// Previous selectors (with higher priority) could have already
comment|// selected containers. We need to deduct preemptable resources
comment|// based on already selected candidates.
name|CapacitySchedulerPreemptionUtils
operator|.
name|deductPreemptableResourcesBasedSelectedCandidates
argument_list|(
name|preemptionContext
argument_list|,
name|selectedCandidates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|skippedAMContainerlist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Loop all leaf queues
for|for
control|(
name|String
name|queueName
range|:
name|preemptionContext
operator|.
name|getLeafQueueNames
argument_list|()
control|)
block|{
comment|// check if preemption disabled for the queue
if|if
condition|(
name|preemptionContext
operator|.
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|.
name|preemptionDisabled
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"skipping from queue="
operator|+
name|queueName
operator|+
literal|" because it's a non-preemptable queue"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// compute resToObtainByPartition considered inter-queue preemption
name|LeafQueue
name|leafQueue
init|=
name|preemptionContext
operator|.
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|.
name|leafQueue
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
init|=
name|CapacitySchedulerPreemptionUtils
operator|.
name|getResToObtainByPartitionForLeafQueue
argument_list|(
name|preemptionContext
argument_list|,
name|queueName
argument_list|,
name|clusterResource
argument_list|)
decl_stmt|;
try|try
block|{
name|leafQueue
operator|.
name|getReadLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// go through all ignore-partition-exclusivity containers first to make
comment|// sure such containers will be preemptionCandidates first
name|Map
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|ignorePartitionExclusivityContainers
init|=
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partition
range|:
name|resToObtainByPartition
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ignorePartitionExclusivityContainers
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
init|=
name|ignorePartitionExclusivityContainers
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
comment|// We will check container from reverse order, so latter submitted
comment|// application's containers will be preemptionCandidates first.
for|for
control|(
name|RMContainer
name|c
range|:
name|rmContainers
operator|.
name|descendingSet
argument_list|()
control|)
block|{
if|if
condition|(
name|CapacitySchedulerPreemptionUtils
operator|.
name|isContainerAlreadySelected
argument_list|(
name|c
argument_list|,
name|selectedCandidates
argument_list|)
condition|)
block|{
comment|// Skip already selected containers
continue|continue;
block|}
name|boolean
name|preempted
init|=
name|CapacitySchedulerPreemptionUtils
operator|.
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|rc
argument_list|,
name|preemptionContext
argument_list|,
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|selectedCandidates
argument_list|,
name|curCandidates
argument_list|,
name|totalPreemptionAllowed
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|preempted
condition|)
block|{
continue|continue;
block|}
block|}
block|}
block|}
comment|// preempt other containers
name|Resource
name|skippedAMSize
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|desc
init|=
name|leafQueue
operator|.
name|getOrderingPolicy
argument_list|()
operator|.
name|getPreemptionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|desc
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FiCaSchedulerApp
name|fc
init|=
name|desc
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// When we complete preempt from one partition, we will remove from
comment|// resToObtainByPartition, so when it becomes empty, we can get no
comment|// more preemption is needed
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|preemptFrom
argument_list|(
name|fc
argument_list|,
name|clusterResource
argument_list|,
name|resToObtainByPartition
argument_list|,
name|skippedAMContainerlist
argument_list|,
name|skippedAMSize
argument_list|,
name|selectedCandidates
argument_list|,
name|curCandidates
argument_list|,
name|totalPreemptionAllowed
argument_list|)
expr_stmt|;
block|}
comment|// Can try preempting AMContainers (still saving atmost
comment|// maxAMCapacityForThisQueue AMResource's) if more resources are
comment|// required to be preemptionCandidates from this Queue.
name|Resource
name|maxAMCapacityForThisQueue
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|leafQueue
operator|.
name|getEffectiveCapacity
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|,
name|leafQueue
operator|.
name|getMaxAMResourcePerQueuePercent
argument_list|()
argument_list|)
decl_stmt|;
name|preemptAMContainers
argument_list|(
name|clusterResource
argument_list|,
name|selectedCandidates
argument_list|,
name|curCandidates
argument_list|,
name|skippedAMContainerlist
argument_list|,
name|resToObtainByPartition
argument_list|,
name|skippedAMSize
argument_list|,
name|maxAMCapacityForThisQueue
argument_list|,
name|totalPreemptionAllowed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|leafQueue
operator|.
name|getReadLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|curCandidates
return|;
block|}
comment|/**    * As more resources are needed for preemption, saved AMContainers has to be    * rescanned. Such AMContainers can be preemptionCandidates based on resToObtain, but    * maxAMCapacityForThisQueue resources will be still retained.    *    * @param clusterResource    * @param preemptMap    * @param skippedAMContainerlist    * @param skippedAMSize    * @param maxAMCapacityForThisQueue    */
DECL|method|preemptAMContainers (Resource clusterResource, Map<ApplicationAttemptId, Set<RMContainer>> preemptMap, Map<ApplicationAttemptId, Set<RMContainer>> curCandidates, List<RMContainer> skippedAMContainerlist, Map<String, Resource> resToObtainByPartition, Resource skippedAMSize, Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed)
specifier|private
name|void
name|preemptAMContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|preemptMap
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|curCandidates
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|skippedAMContainerlist
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
parameter_list|,
name|Resource
name|skippedAMSize
parameter_list|,
name|Resource
name|maxAMCapacityForThisQueue
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
for|for
control|(
name|RMContainer
name|c
range|:
name|skippedAMContainerlist
control|)
block|{
comment|// Got required amount of resources for preemption, can stop now
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Once skippedAMSize reaches down to maxAMCapacityForThisQueue,
comment|// container selection iteration for preemption will be stopped.
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|skippedAMSize
argument_list|,
name|maxAMCapacityForThisQueue
argument_list|)
condition|)
block|{
break|break;
block|}
name|boolean
name|preempted
init|=
name|CapacitySchedulerPreemptionUtils
operator|.
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|rc
argument_list|,
name|preemptionContext
argument_list|,
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|preemptMap
argument_list|,
name|curCandidates
argument_list|,
name|totalPreemptionAllowed
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|preempted
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|skippedAMSize
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|skippedAMContainerlist
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Given a target preemption for a specific application, select containers    * to preempt (after unreserving all reservation for that app).    */
DECL|method|preemptFrom (FiCaSchedulerApp app, Resource clusterResource, Map<String, Resource> resToObtainByPartition, List<RMContainer> skippedAMContainerlist, Resource skippedAMSize, Map<ApplicationAttemptId, Set<RMContainer>> selectedContainers, Map<ApplicationAttemptId, Set<RMContainer>> curCandidates, Resource totalPreemptionAllowed)
specifier|private
name|void
name|preemptFrom
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resToObtainByPartition
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|skippedAMContainerlist
parameter_list|,
name|Resource
name|skippedAMSize
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedContainers
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|curCandidates
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
name|ApplicationAttemptId
name|appId
init|=
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// first drop reserved containers towards rsrcPreempt
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|reservedContainers
control|)
block|{
if|if
condition|(
name|CapacitySchedulerPreemptionUtils
operator|.
name|isContainerAlreadySelected
argument_list|(
name|c
argument_list|,
name|selectedContainers
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Try to preempt this container
name|CapacitySchedulerPreemptionUtils
operator|.
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|rc
argument_list|,
name|preemptionContext
argument_list|,
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|selectedContainers
argument_list|,
name|curCandidates
argument_list|,
name|totalPreemptionAllowed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|preemptionContext
operator|.
name|isObserveOnly
argument_list|()
condition|)
block|{
name|preemptionContext
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPreemptEvent
argument_list|(
name|appId
argument_list|,
name|c
argument_list|,
name|SchedulerEventType
operator|.
name|KILL_RESERVED_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if more resources are to be freed go through all live containers in
comment|// reverse priority and reverse allocation order and mark them for
comment|// preemption
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|app
operator|.
name|getLiveContainers
argument_list|()
argument_list|)
decl_stmt|;
name|sortContainers
argument_list|(
name|liveContainers
argument_list|)
expr_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|liveContainers
control|)
block|{
if|if
condition|(
name|resToObtainByPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|CapacitySchedulerPreemptionUtils
operator|.
name|isContainerAlreadySelected
argument_list|(
name|c
argument_list|,
name|selectedContainers
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Skip already marked to killable containers
if|if
condition|(
literal|null
operator|!=
name|preemptionContext
operator|.
name|getKillableContainers
argument_list|()
operator|&&
name|preemptionContext
operator|.
name|getKillableContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Skip AM Container from preemption for now.
if|if
condition|(
name|c
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
name|skippedAMContainerlist
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|skippedAMSize
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Try to preempt this container
name|CapacitySchedulerPreemptionUtils
operator|.
name|tryPreemptContainerAndDeductResToObtain
argument_list|(
name|rc
argument_list|,
name|preemptionContext
argument_list|,
name|resToObtainByPartition
argument_list|,
name|c
argument_list|,
name|clusterResource
argument_list|,
name|selectedContainers
argument_list|,
name|curCandidates
argument_list|,
name|totalPreemptionAllowed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllowQueuesBalanceAfterAllQueuesSatisfied ()
specifier|public
name|boolean
name|getAllowQueuesBalanceAfterAllQueuesSatisfied
parameter_list|()
block|{
return|return
name|allowQueuesBalanceAfterAllQueuesSatisfied
return|;
block|}
block|}
end_class

end_unit

