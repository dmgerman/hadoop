begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_comment
comment|/**  * A {@link WeightAdjuster} implementation that gives a weight boost to new jobs  * for a certain amount of time -- by default, a 3x weight boost for 60 seconds.  * This can be used to make shorter jobs finish faster, emulating Shortest Job  * First scheduling while not starving long jobs.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|NewAppWeightBooster
specifier|public
class|class
name|NewAppWeightBooster
extends|extends
name|Configured
implements|implements
name|WeightAdjuster
block|{
DECL|field|DEFAULT_FACTOR
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_FACTOR
init|=
literal|3
decl_stmt|;
DECL|field|DEFAULT_DURATION
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_DURATION
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
DECL|field|factor
specifier|private
name|float
name|factor
decl_stmt|;
DECL|field|duration
specifier|private
name|long
name|duration
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|factor
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"mapred.newjobweightbooster.factor"
argument_list|,
name|DEFAULT_FACTOR
argument_list|)
expr_stmt|;
name|duration
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"mapred.newjobweightbooster.duration"
argument_list|,
name|DEFAULT_DURATION
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|adjustWeight (AppSchedulable app, double curWeight)
specifier|public
name|double
name|adjustWeight
parameter_list|(
name|AppSchedulable
name|app
parameter_list|,
name|double
name|curWeight
parameter_list|)
block|{
name|long
name|start
init|=
name|app
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|start
operator|<
name|duration
condition|)
block|{
return|return
name|curWeight
operator|*
name|factor
return|;
block|}
else|else
block|{
return|return
name|curWeight
return|;
block|}
block|}
block|}
end_class

end_unit

