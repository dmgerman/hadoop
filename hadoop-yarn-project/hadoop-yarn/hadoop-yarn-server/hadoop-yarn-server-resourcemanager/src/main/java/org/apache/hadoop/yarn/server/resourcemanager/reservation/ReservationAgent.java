begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_comment
comment|/**  * An entity that seeks to acquire resources to satisfy an user's contract  */
end_comment

begin_interface
DECL|interface|ReservationAgent
specifier|public
interface|interface
name|ReservationAgent
block|{
comment|/**    * Create a reservation for the user that abides by the specified contract    *     * @param reservationId the identifier of the reservation to be created.    * @param user the user who wants to create the reservation    * @param plan the Plan to which the reservation must be fitted    * @param contract encapsulates the resources the user requires for his    *          session    *     * @return whether the create operation was successful or not    * @throws PlanningException if the session cannot be fitted into the plan    */
DECL|method|createReservation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract)
specifier|public
name|boolean
name|createReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|)
throws|throws
name|PlanningException
function_decl|;
comment|/**    * Update a reservation for the user that abides by the specified contract    *     * @param reservationId the identifier of the reservation to be updated    * @param user the user who wants to create the session    * @param plan the Plan to which the reservation must be fitted    * @param contract encapsulates the resources the user requires for his    *          reservation    *     * @return whether the update operation was successful or not    * @throws PlanningException if the reservation cannot be fitted into the plan    */
DECL|method|updateReservation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract)
specifier|public
name|boolean
name|updateReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|)
throws|throws
name|PlanningException
function_decl|;
comment|/**    * Delete an user reservation    *     * @param reservationId the identifier of the reservation to be deleted    * @param user the user who wants to create the reservation    * @param plan the Plan to which the session must be fitted    *     * @return whether the delete operation was successful or not    * @throws PlanningException if the reservation cannot be fitted into the plan    */
DECL|method|deleteReservation (ReservationId reservationId, String user, Plan plan)
specifier|public
name|boolean
name|deleteReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|)
throws|throws
name|PlanningException
function_decl|;
block|}
end_interface

end_unit

