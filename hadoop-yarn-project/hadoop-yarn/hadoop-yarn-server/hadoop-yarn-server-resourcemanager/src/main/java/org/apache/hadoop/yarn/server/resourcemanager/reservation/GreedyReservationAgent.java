begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|ContractValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This Agent employs a simple greedy placement strategy, placing the various  * stages of a {@link ReservationRequest} from the deadline moving backward  * towards the arrival. This allows jobs with earlier deadline to be scheduled  * greedily as well. Combined with an opportunistic anticipation of work if the  * cluster is not fully utilized also seems to provide good latency for  * best-effort jobs (i.e., jobs running without a reservation).  *   * This agent does not account for locality and only consider container  * granularity for validation purposes (i.e., you can't exceed max-container  * size).  */
end_comment

begin_class
DECL|class|GreedyReservationAgent
specifier|public
class|class
name|GreedyReservationAgent
implements|implements
name|ReservationAgent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GreedyReservationAgent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createReservation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract)
specifier|public
name|boolean
name|createReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|)
throws|throws
name|PlanningException
block|{
return|return
name|computeAllocation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|,
name|contract
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateReservation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract)
specifier|public
name|boolean
name|updateReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|)
throws|throws
name|PlanningException
block|{
return|return
name|computeAllocation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|,
name|contract
argument_list|,
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation (ReservationId reservationId, String user, Plan plan)
specifier|public
name|boolean
name|deleteReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|)
throws|throws
name|PlanningException
block|{
return|return
name|plan
operator|.
name|deleteReservation
argument_list|(
name|reservationId
argument_list|)
return|;
block|}
DECL|method|computeAllocation (ReservationId reservationId, String user, Plan plan, ReservationDefinition contract, ReservationAllocation oldReservation)
specifier|private
name|boolean
name|computeAllocation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|user
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|,
name|ReservationAllocation
name|oldReservation
parameter_list|)
throws|throws
name|PlanningException
throws|,
name|ContractValidationException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"placing the following ReservationRequest: "
operator|+
name|contract
argument_list|)
expr_stmt|;
name|Resource
name|totalCapacity
init|=
name|plan
operator|.
name|getTotalCapacity
argument_list|()
decl_stmt|;
comment|// Here we can addd logic to adjust the ResourceDefinition to account for
comment|// system "imperfections" (e.g., scheduling delays for large containers).
comment|// Align with plan step conservatively (i.e., ceil arrival, and floor
comment|// deadline)
name|long
name|earliestStart
init|=
name|contract
operator|.
name|getArrival
argument_list|()
decl_stmt|;
name|long
name|step
init|=
name|plan
operator|.
name|getStep
argument_list|()
decl_stmt|;
if|if
condition|(
name|earliestStart
operator|%
name|step
operator|!=
literal|0
condition|)
block|{
name|earliestStart
operator|=
name|earliestStart
operator|+
operator|(
name|step
operator|-
operator|(
name|earliestStart
operator|%
name|step
operator|)
operator|)
expr_stmt|;
block|}
name|long
name|deadline
init|=
name|contract
operator|.
name|getDeadline
argument_list|()
operator|-
name|contract
operator|.
name|getDeadline
argument_list|()
operator|%
name|plan
operator|.
name|getStep
argument_list|()
decl_stmt|;
comment|// setup temporary variables to handle time-relations between stages and
comment|// intermediate answers
name|long
name|curDeadline
init|=
name|deadline
decl_stmt|;
name|long
name|oldDeadline
init|=
operator|-
literal|1
decl_stmt|;
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|allocations
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|tempAssigned
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|plan
operator|.
name|getMinimumAllocation
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReservationRequest
argument_list|>
name|stages
init|=
name|contract
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getReservationResources
argument_list|()
decl_stmt|;
name|ReservationRequestInterpreter
name|type
init|=
name|contract
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getInterpreter
argument_list|()
decl_stmt|;
comment|// Iterate the stages in backward from deadline
for|for
control|(
name|ListIterator
argument_list|<
name|ReservationRequest
argument_list|>
name|li
init|=
name|stages
operator|.
name|listIterator
argument_list|(
name|stages
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|li
operator|.
name|hasPrevious
argument_list|()
condition|;
control|)
block|{
name|ReservationRequest
name|currentReservationStage
init|=
name|li
operator|.
name|previous
argument_list|()
decl_stmt|;
comment|// validate the RR respect basic constraints
name|validateInput
argument_list|(
name|plan
argument_list|,
name|currentReservationStage
argument_list|,
name|totalCapacity
argument_list|)
expr_stmt|;
comment|// run allocation for a single stage
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|curAlloc
init|=
name|placeSingleStage
argument_list|(
name|plan
argument_list|,
name|tempAssigned
argument_list|,
name|currentReservationStage
argument_list|,
name|earliestStart
argument_list|,
name|curDeadline
argument_list|,
name|oldReservation
argument_list|,
name|totalCapacity
argument_list|)
decl_stmt|;
if|if
condition|(
name|curAlloc
operator|==
literal|null
condition|)
block|{
comment|// if we did not find an allocation for the currentReservationStage
comment|// return null, unless the ReservationDefinition we are placing is of
comment|// type ANY
if|if
condition|(
name|type
operator|!=
name|ReservationRequestInterpreter
operator|.
name|R_ANY
condition|)
block|{
throw|throw
operator|new
name|PlanningException
argument_list|(
literal|"The GreedyAgent"
operator|+
literal|" couldn't find a valid allocation for your request"
argument_list|)
throw|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
else|else
block|{
comment|// if we did find an allocation add it to the set of allocations
name|allocations
operator|.
name|putAll
argument_list|(
name|curAlloc
argument_list|)
expr_stmt|;
comment|// if this request is of type ANY we are done searching (greedy)
comment|// and can return the current allocation (break-out of the search)
if|if
condition|(
name|type
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ANY
condition|)
block|{
break|break;
block|}
comment|// if the request is of ORDER or ORDER_NO_GAP we constraint the next
comment|// round of allocation to precede the current allocation, by setting
comment|// curDeadline
if|if
condition|(
name|type
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
operator|||
name|type
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
condition|)
block|{
name|curDeadline
operator|=
name|findEarliestTime
argument_list|(
name|curAlloc
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// for ORDER_NO_GAP verify that the allocation found so far has no
comment|// gap, return null otherwise (the greedy procedure failed to find a
comment|// no-gap
comment|// allocation)
if|if
condition|(
name|type
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
operator|&&
name|oldDeadline
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|oldDeadline
operator|-
name|findLatestTime
argument_list|(
name|curAlloc
operator|.
name|keySet
argument_list|()
argument_list|)
operator|>
name|plan
operator|.
name|getStep
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PlanningException
argument_list|(
literal|"The GreedyAgent"
operator|+
literal|" couldn't find a valid allocation for your request"
argument_list|)
throw|;
block|}
block|}
comment|// keep the variable oldDeadline pointing to the last deadline we
comment|// found
name|oldDeadline
operator|=
name|curDeadline
expr_stmt|;
block|}
block|}
block|}
comment|// / If we got here is because we failed to find an allocation for the
comment|// ReservationDefinition give-up and report failure to the user
if|if
condition|(
name|allocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PlanningException
argument_list|(
literal|"The GreedyAgent"
operator|+
literal|" couldn't find a valid allocation for your request"
argument_list|)
throw|;
block|}
comment|// create reservation with above allocations if not null/empty
name|ReservationRequest
name|ZERO_RES
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|firstStartTime
init|=
name|findEarliestTime
argument_list|(
name|allocations
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// add zero-padding from arrival up to the first non-null allocation
comment|// to guarantee that the reservation exists starting at arrival
if|if
condition|(
name|firstStartTime
operator|>
name|earliestStart
condition|)
block|{
name|allocations
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
name|earliestStart
argument_list|,
name|firstStartTime
argument_list|)
argument_list|,
name|ZERO_RES
argument_list|)
expr_stmt|;
name|firstStartTime
operator|=
name|earliestStart
expr_stmt|;
comment|// consider to add trailing zeros at the end for simmetry
block|}
comment|// Actually add/update the reservation in the plan.
comment|// This is subject to validation as other agents might be placing
comment|// in parallel and there might be sharing policies the agent is not
comment|// aware off.
name|ReservationAllocation
name|capReservation
init|=
operator|new
name|InMemoryReservationAllocation
argument_list|(
name|reservationId
argument_list|,
name|contract
argument_list|,
name|user
argument_list|,
name|plan
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|firstStartTime
argument_list|,
name|findLatestTime
argument_list|(
name|allocations
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|allocations
argument_list|,
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|plan
operator|.
name|getMinimumAllocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldReservation
operator|!=
literal|null
condition|)
block|{
return|return
name|plan
operator|.
name|updateReservation
argument_list|(
name|capReservation
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|plan
operator|.
name|addReservation
argument_list|(
name|capReservation
argument_list|)
return|;
block|}
block|}
DECL|method|validateInput (Plan plan, ReservationRequest rr, Resource totalCapacity)
specifier|private
name|void
name|validateInput
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationRequest
name|rr
parameter_list|,
name|Resource
name|totalCapacity
parameter_list|)
throws|throws
name|ContractValidationException
block|{
if|if
condition|(
name|rr
operator|.
name|getConcurrency
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|ContractValidationException
argument_list|(
literal|"Gang Size should be>= 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ContractValidationException
argument_list|(
literal|"Num containers should be>= 0"
argument_list|)
throw|;
block|}
comment|// check that gangSize and numContainers are compatible
if|if
condition|(
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|%
name|rr
operator|.
name|getConcurrency
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ContractValidationException
argument_list|(
literal|"Parallelism must be an exact multiple of gang size"
argument_list|)
throw|;
block|}
comment|// check that the largest container request does not exceed
comment|// the cluster-wide limit for container sizes
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|totalCapacity
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|plan
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ContractValidationException
argument_list|(
literal|"Individual"
operator|+
literal|" capability requests should not exceed cluster's maxAlloc"
argument_list|)
throw|;
block|}
block|}
comment|/**    * This method actually perform the placement of an atomic stage of the    * reservation. The key idea is to traverse the plan backward for a    * "lease-duration" worth of time, and compute what is the maximum multiple of    * our concurrency (gang) parameter we can fit. We do this and move towards    * previous instant in time until the time-window is exhausted or we placed    * all the user request.    */
DECL|method|placeSingleStage ( Plan plan, RLESparseResourceAllocation tempAssigned, ReservationRequest rr, long earliestStart, long curDeadline, ReservationAllocation oldResAllocation, final Resource totalCapacity)
specifier|private
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|placeSingleStage
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|RLESparseResourceAllocation
name|tempAssigned
parameter_list|,
name|ReservationRequest
name|rr
parameter_list|,
name|long
name|earliestStart
parameter_list|,
name|long
name|curDeadline
parameter_list|,
name|ReservationAllocation
name|oldResAllocation
parameter_list|,
specifier|final
name|Resource
name|totalCapacity
parameter_list|)
block|{
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|allocationRequests
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// compute the gang as a resource and get the duration
name|Resource
name|gang
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getConcurrency
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|dur
init|=
name|rr
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|long
name|step
init|=
name|plan
operator|.
name|getStep
argument_list|()
decl_stmt|;
comment|// ceil the duration to the next multiple of the plan step
if|if
condition|(
name|dur
operator|%
name|step
operator|!=
literal|0
condition|)
block|{
name|dur
operator|+=
operator|(
name|step
operator|-
operator|(
name|dur
operator|%
name|step
operator|)
operator|)
expr_stmt|;
block|}
comment|// we know for sure that this division has no remainder (part of contract
comment|// with user, validate before
name|int
name|gangsToPlace
init|=
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|/
name|rr
operator|.
name|getConcurrency
argument_list|()
decl_stmt|;
name|int
name|maxGang
init|=
literal|0
decl_stmt|;
comment|// loop trying to place until we are done, or we are considering
comment|// an invalid range of times
while|while
condition|(
name|gangsToPlace
operator|>
literal|0
operator|&&
name|curDeadline
operator|-
name|dur
operator|>=
name|earliestStart
condition|)
block|{
comment|// as we run along we remember how many gangs we can fit, and what
comment|// was the most constraining moment in time (we will restart just
comment|// after that to place the next batch)
name|maxGang
operator|=
name|gangsToPlace
expr_stmt|;
name|long
name|minPoint
init|=
name|curDeadline
decl_stmt|;
name|int
name|curMaxGang
init|=
name|maxGang
decl_stmt|;
comment|// start placing at deadline (excluded due to [,) interval semantics and
comment|// move backward
for|for
control|(
name|long
name|t
init|=
name|curDeadline
operator|-
name|plan
operator|.
name|getStep
argument_list|()
init|;
name|t
operator|>=
name|curDeadline
operator|-
name|dur
operator|&&
name|maxGang
operator|>
literal|0
condition|;
name|t
operator|=
name|t
operator|-
name|plan
operator|.
name|getStep
argument_list|()
control|)
block|{
comment|// As we run along we will logically remove the previous allocation for
comment|// this reservation
comment|// if one existed
name|Resource
name|oldResCap
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldResAllocation
operator|!=
literal|null
condition|)
block|{
name|oldResCap
operator|=
name|oldResAllocation
operator|.
name|getResourcesAtTime
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// compute net available resources
name|Resource
name|netAvailableRes
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|totalCapacity
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|netAvailableRes
argument_list|,
name|oldResCap
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|netAvailableRes
argument_list|,
name|plan
operator|.
name|getTotalCommittedResources
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|netAvailableRes
argument_list|,
name|tempAssigned
operator|.
name|getCapacityAtTime
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
comment|// compute maximum number of gangs we could fit
name|curMaxGang
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|totalCapacity
argument_list|,
name|netAvailableRes
argument_list|,
name|gang
argument_list|)
argument_list|)
expr_stmt|;
comment|// pick the minimum between available resources in this instant, and how
comment|// many gangs we have to place
name|curMaxGang
operator|=
name|Math
operator|.
name|min
argument_list|(
name|gangsToPlace
argument_list|,
name|curMaxGang
argument_list|)
expr_stmt|;
comment|// compare with previous max, and set it. also remember *where* we found
comment|// the minimum (useful for next attempts)
if|if
condition|(
name|curMaxGang
operator|<=
name|maxGang
condition|)
block|{
name|maxGang
operator|=
name|curMaxGang
expr_stmt|;
name|minPoint
operator|=
name|t
expr_stmt|;
block|}
block|}
comment|// if we were able to place any gang, record this, and decrement
comment|// gangsToPlace
if|if
condition|(
name|maxGang
operator|>
literal|0
condition|)
block|{
name|gangsToPlace
operator|-=
name|maxGang
expr_stmt|;
name|ReservationInterval
name|reservationInt
init|=
operator|new
name|ReservationInterval
argument_list|(
name|curDeadline
operator|-
name|dur
argument_list|,
name|curDeadline
argument_list|)
decl_stmt|;
name|ReservationRequest
name|reservationRes
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getConcurrency
argument_list|()
operator|*
name|maxGang
argument_list|,
name|rr
operator|.
name|getConcurrency
argument_list|()
argument_list|,
name|rr
operator|.
name|getDuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// remember occupied space (plan is read-only till we find a plausible
comment|// allocation for the entire request). This is needed since we might be
comment|// placing other ReservationRequest within the same
comment|// ReservationDefinition,
comment|// and we must avoid double-counting the available resources
name|tempAssigned
operator|.
name|addInterval
argument_list|(
name|reservationInt
argument_list|,
name|reservationRes
argument_list|)
expr_stmt|;
name|allocationRequests
operator|.
name|put
argument_list|(
name|reservationInt
argument_list|,
name|reservationRes
argument_list|)
expr_stmt|;
block|}
comment|// reset our new starting point (curDeadline) to the most constraining
comment|// point so far, we will look "left" of that to find more places where
comment|// to schedule gangs (for sure nothing on the "right" of this point can
comment|// fit a full gang.
name|curDeadline
operator|=
name|minPoint
expr_stmt|;
block|}
comment|// if no gangs are left to place we succeed and return the allocation
if|if
condition|(
name|gangsToPlace
operator|==
literal|0
condition|)
block|{
return|return
name|allocationRequests
return|;
block|}
else|else
block|{
comment|// If we are here is becasue we did not manage to satisfy this request.
comment|// So we need to remove unwanted side-effect from tempAssigned (needed
comment|// for ANY).
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|tempAllocation
range|:
name|allocationRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tempAssigned
operator|.
name|removeInterval
argument_list|(
name|tempAllocation
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempAllocation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// and return null to signal failure in this allocation
return|return
literal|null
return|;
block|}
block|}
comment|// finds the leftmost point of this set of ReservationInterval
DECL|method|findEarliestTime (Set<ReservationInterval> resInt)
specifier|private
name|long
name|findEarliestTime
parameter_list|(
name|Set
argument_list|<
name|ReservationInterval
argument_list|>
name|resInt
parameter_list|)
block|{
name|long
name|ret
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|ReservationInterval
name|s
range|:
name|resInt
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getStartTime
argument_list|()
operator|<
name|ret
condition|)
block|{
name|ret
operator|=
name|s
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|// finds the rightmost point of this set of ReservationIntervals
DECL|method|findLatestTime (Set<ReservationInterval> resInt)
specifier|private
name|long
name|findLatestTime
parameter_list|(
name|Set
argument_list|<
name|ReservationInterval
argument_list|>
name|resInt
parameter_list|)
block|{
name|long
name|ret
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|ReservationInterval
name|s
range|:
name|resInt
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getEndTime
argument_list|()
operator|>
name|ret
condition|)
block|{
name|ret
operator|=
name|s
operator|.
name|getEndTime
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

