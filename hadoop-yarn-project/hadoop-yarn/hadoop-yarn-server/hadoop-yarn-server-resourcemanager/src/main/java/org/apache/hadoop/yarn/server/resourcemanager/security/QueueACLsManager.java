begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AccessRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|YarnAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|QueueACLsManager
specifier|public
class|class
name|QueueACLsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ResourceScheduler
name|scheduler
decl_stmt|;
DECL|field|isACLsEnable
specifier|private
name|boolean
name|isACLsEnable
decl_stmt|;
DECL|field|authorizer
specifier|private
name|YarnAuthorizationProvider
name|authorizer
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|QueueACLsManager ()
specifier|public
name|QueueACLsManager
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|QueueACLsManager (ResourceScheduler scheduler, Configuration conf)
specifier|public
name|QueueACLsManager
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|isACLsEnable
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ACL_ENABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|authorizer
operator|=
name|YarnAuthorizationProvider
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAccess (UserGroupInformation callerUGI, QueueACL acl, RMApp app, String remoteAddress, List<String> forwardedAddresses)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|String
name|remoteAddress
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|forwardedAddresses
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isACLsEnable
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|scheduler
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CSQueue
name|queue
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
comment|// The application exists but the associated queue does not exist.
comment|// This may be due to a queue that is not defined when the RM restarts.
comment|// At this point we choose to log the fact and allow users to access
comment|// and view the apps in a removed queue. This should only happen on
comment|// application recovery.
name|LOG
operator|.
name|error
argument_list|(
literal|"Queue "
operator|+
name|app
operator|.
name|getQueue
argument_list|()
operator|+
literal|" does not exist for "
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|authorizer
operator|.
name|checkPermission
argument_list|(
operator|new
name|AccessRequest
argument_list|(
name|queue
operator|.
name|getPrivilegedEntity
argument_list|()
argument_list|,
name|callerUGI
argument_list|,
name|SchedulerUtils
operator|.
name|toAccessType
argument_list|(
name|acl
argument_list|)
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|remoteAddress
argument_list|,
name|forwardedAddresses
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|acl
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Check access to a targetQueue in the case of a move of an application.    * The application cannot contain the destination queue since it has not    * been moved yet, thus need to pass it in separately.    *    * @param callerUGI the caller UGI    * @param acl the acl for the Queue to check    * @param app the application to move    * @param remoteAddress server ip address    * @param forwardedAddresses forwarded adresses    * @param targetQueue the name of the queue to move the application to    * @return true: if submission is allowed and queue exists,    *         false: in all other cases (also non existing target queue)    */
DECL|method|checkAccess (UserGroupInformation callerUGI, QueueACL acl, RMApp app, String remoteAddress, List<String> forwardedAddresses, String targetQueue)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|String
name|remoteAddress
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|forwardedAddresses
parameter_list|,
name|String
name|targetQueue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isACLsEnable
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Based on the discussion in YARN-5554 detail on why there are two
comment|// versions:
comment|// The access check inside these calls is currently scheduler dependent.
comment|// This is due to the extra parameters needed for the CS case which are not
comment|// in the version defined in the YarnScheduler interface. The second
comment|// version is added for the moving the application case. The check has
comment|// extra logging to distinguish between the queue not existing in the
comment|// application move request case and the real access denied case.
if|if
condition|(
name|scheduler
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CSQueue
name|queue
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getQueue
argument_list|(
name|targetQueue
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Target queue "
operator|+
name|targetQueue
operator|+
literal|" does not exist while trying to move "
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|authorizer
operator|.
name|checkPermission
argument_list|(
operator|new
name|AccessRequest
argument_list|(
name|queue
operator|.
name|getPrivilegedEntity
argument_list|()
argument_list|,
name|callerUGI
argument_list|,
name|SchedulerUtils
operator|.
name|toAccessType
argument_list|(
name|acl
argument_list|)
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|remoteAddress
argument_list|,
name|forwardedAddresses
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|scheduler
operator|instanceof
name|FairScheduler
condition|)
block|{
name|FSQueue
name|queue
init|=
operator|(
operator|(
name|FairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|targetQueue
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Target queue "
operator|+
name|targetQueue
operator|+
literal|" does not exist while trying to move "
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|scheduler
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|acl
argument_list|,
name|targetQueue
argument_list|)
return|;
block|}
else|else
block|{
comment|// Any other scheduler just try
return|return
name|scheduler
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|acl
argument_list|,
name|targetQueue
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

