begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|lib
operator|.
name|StaticUserWebFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|HttpCrossOriginFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CredentialsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LocalResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LogAggregationContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|http
operator|.
name|RMAuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|http
operator|.
name|RMAuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_comment
comment|/**  * Util class for ResourceManager WebApp.  */
end_comment

begin_class
DECL|class|RMWebAppUtil
specifier|public
specifier|final
class|class
name|RMWebAppUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMWebAppUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Private constructor.    */
DECL|method|RMWebAppUtil ()
specifier|private
name|RMWebAppUtil
parameter_list|()
block|{
comment|// not called
block|}
comment|/**    * Helper method to setup filters and authentication for ResourceManager    * WebServices.    *    * Use the customized yarn filter instead of the standard kerberos filter to    * allow users to authenticate using delegation tokens 4 conditions need to be    * satisfied:    *    * 1. security is enabled.    *    * 2. http auth type is set to kerberos.    *    * 3. "yarn.resourcemanager.webapp.use-yarn-filter" override is set to true.    *    * 4. hadoop.http.filter.initializers container    * AuthenticationFilterInitializer.    *    * @param conf RM configuration.    * @param rmDTSecretManager RM specific delegation token secret manager.    **/
DECL|method|setupSecurityAndFilters (Configuration conf, RMDelegationTokenSecretManager rmDTSecretManager)
specifier|public
specifier|static
name|void
name|setupSecurityAndFilters
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
parameter_list|)
block|{
name|boolean
name|enableCorsFilter
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ENABLE_CORS_FILTER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER
argument_list|)
decl_stmt|;
name|boolean
name|useYarnAuthenticationFilter
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER
argument_list|)
decl_stmt|;
name|String
name|authPrefix
init|=
literal|"hadoop.http.authentication."
decl_stmt|;
name|String
name|authTypeKey
init|=
name|authPrefix
operator|+
literal|"type"
decl_stmt|;
name|String
name|filterInitializerConfKey
init|=
literal|"hadoop.http.filter.initializers"
decl_stmt|;
name|String
name|actualInitializers
init|=
literal|""
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|initializersClasses
init|=
name|conf
operator|.
name|getClasses
argument_list|(
name|filterInitializerConfKey
argument_list|)
decl_stmt|;
comment|// setup CORS
if|if
condition|(
name|enableCorsFilter
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HttpCrossOriginFilterInitializer
operator|.
name|PREFIX
operator|+
name|HttpCrossOriginFilterInitializer
operator|.
name|ENABLED_SUFFIX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasHadoopAuthFilterInitializer
init|=
literal|false
decl_stmt|;
name|boolean
name|hasRMAuthFilterInitializer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|initializersClasses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|initializer
range|:
name|initializersClasses
control|)
block|{
if|if
condition|(
name|initializer
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|hasHadoopAuthFilterInitializer
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|initializer
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|hasRMAuthFilterInitializer
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|useYarnAuthenticationFilter
operator|&&
name|hasHadoopAuthFilterInitializer
operator|&&
name|conf
operator|.
name|get
argument_list|(
name|authTypeKey
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|target
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|filterInitializer
range|:
name|initializersClasses
control|)
block|{
if|if
condition|(
name|filterInitializer
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasRMAuthFilterInitializer
condition|)
block|{
name|target
operator|.
name|add
argument_list|(
name|RMAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|target
operator|.
name|add
argument_list|(
name|filterInitializer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|actualInitializers
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using RM authentication filter(kerberos/delegation-token)"
operator|+
literal|" for RM webapp authentication"
argument_list|)
expr_stmt|;
name|RMAuthenticationFilter
operator|.
name|setDelegationTokenSecretManager
argument_list|(
name|rmDTSecretManager
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|filterInitializerConfKey
argument_list|,
name|actualInitializers
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if security is not enabled and the default filter initializer has not
comment|// been set, set the initializer to include the
comment|// RMAuthenticationFilterInitializer which in turn will set up the simple
comment|// auth filter.
name|String
name|initializers
init|=
name|conf
operator|.
name|get
argument_list|(
name|filterInitializerConfKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|initializersClasses
operator|==
literal|null
operator|||
name|initializersClasses
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|filterInitializerConfKey
argument_list|,
name|RMAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|authTypeKey
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|initializers
operator|.
name|equals
argument_list|(
name|StaticUserWebFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|filterInitializerConfKey
argument_list|,
name|RMAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|initializers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|authTypeKey
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create the actual ApplicationSubmissionContext to be submitted to the RM    * from the information provided by the user.    *    * @param newApp the information provided by the user    * @param conf RM configuration    * @return returns the constructed ApplicationSubmissionContext    * @throws IOException in case of Error    */
DECL|method|createAppSubmissionContext ( ApplicationSubmissionContextInfo newApp, Configuration conf)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|createAppSubmissionContext
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create local resources and app submission context
name|ApplicationId
name|appid
decl_stmt|;
name|String
name|error
init|=
literal|"Could not parse application id "
operator|+
name|newApp
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
try|try
block|{
name|appid
operator|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|newApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|ApplicationSubmissionContext
name|appContext
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|appid
argument_list|,
name|newApp
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|newApp
operator|.
name|getQueue
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|newApp
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|createContainerLaunchContext
argument_list|(
name|newApp
argument_list|)
argument_list|,
name|newApp
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|newApp
operator|.
name|getCancelTokensWhenComplete
argument_list|()
argument_list|,
name|newApp
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|,
name|createAppSubmissionContextResource
argument_list|(
name|newApp
argument_list|,
name|conf
argument_list|)
argument_list|,
name|newApp
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|newApp
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
argument_list|,
name|newApp
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|,
name|newApp
operator|.
name|getAMContainerNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setApplicationTags
argument_list|(
name|newApp
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|newApp
operator|.
name|getAttemptFailuresValidityInterval
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newApp
operator|.
name|getLogAggregationContextInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appContext
operator|.
name|setLogAggregationContext
argument_list|(
name|createLogAggregationContext
argument_list|(
name|newApp
operator|.
name|getLogAggregationContextInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|reservationIdStr
init|=
name|newApp
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservationIdStr
operator|!=
literal|null
operator|&&
operator|!
name|reservationIdStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ReservationId
name|reservationId
init|=
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|reservationIdStr
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setReservationID
argument_list|(
name|reservationId
argument_list|)
expr_stmt|;
block|}
return|return
name|appContext
return|;
block|}
comment|/**    * Create the actual Resource inside the ApplicationSubmissionContextInfo to    * be submitted to the RM from the information provided by the user.    *    * @param newApp the information provided by the user    * @param conf RM configuration    * @return returns the constructed Resource inside the    *         ApplicationSubmissionContextInfo    * @throws BadRequestException    */
DECL|method|createAppSubmissionContextResource ( ApplicationSubmissionContextInfo newApp, Configuration conf)
specifier|private
specifier|static
name|Resource
name|createAppSubmissionContextResource
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getvCores
argument_list|()
operator|>
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Requested more cores than configured max"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|>
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Requested more memory than configured max"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Resource
name|r
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
comment|/**    * Create the ContainerLaunchContext required for the    * ApplicationSubmissionContext. This function takes the user information and    * generates the ByteBuffer structures required by the ContainerLaunchContext    *    * @param newApp the information provided by the user    * @return created context    * @throws BadRequestException    * @throws IOException    */
DECL|method|createContainerLaunchContext ( ApplicationSubmissionContextInfo newApp)
specifier|private
specifier|static
name|ContainerLaunchContext
name|createContainerLaunchContext
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|IOException
block|{
comment|// create container launch context
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|hmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getAuxillaryServiceData
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Base64
name|decoder
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|decoder
operator|.
name|decode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|hmap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|hlr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResourceInfo
argument_list|>
name|entry
range|:
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResourceInfo
name|l
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LocalResource
name|lr
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|l
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|,
name|l
operator|.
name|getType
argument_list|()
argument_list|,
name|l
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|l
operator|.
name|getSize
argument_list|()
argument_list|,
name|l
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|hlr
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|lr
argument_list|)
expr_stmt|;
block|}
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Credentials
name|cs
init|=
name|createCredentials
argument_list|(
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|writeTokenStorageToStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|ctx
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|hlr
argument_list|,
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getCommands
argument_list|()
argument_list|,
name|hmap
argument_list|,
name|tokens
argument_list|,
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getAcls
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ctx
return|;
block|}
comment|/**    * Generate a Credentials object from the information in the CredentialsInfo    * object.    *    * @param credentials the CredentialsInfo provided by the user.    * @return    */
DECL|method|createCredentials (CredentialsInfo credentials)
specifier|private
specifier|static
name|Credentials
name|createCredentials
parameter_list|(
name|CredentialsInfo
name|credentials
parameter_list|)
block|{
name|Credentials
name|ret
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|credentials
operator|.
name|getTokens
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Text
name|alias
init|=
operator|new
name|Text
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addToken
argument_list|(
name|alias
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|credentials
operator|.
name|getSecrets
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Text
name|alias
init|=
operator|new
name|Text
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Base64
name|decoder
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret
init|=
name|decoder
operator|.
name|decode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addSecretKey
argument_list|(
name|alias
argument_list|,
name|secret
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Could not parse credentials data; exception message = "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|createLogAggregationContext ( LogAggregationContextInfo logAggregationContextInfo)
specifier|private
specifier|static
name|LogAggregationContext
name|createLogAggregationContext
parameter_list|(
name|LogAggregationContextInfo
name|logAggregationContextInfo
parameter_list|)
block|{
return|return
name|LogAggregationContext
operator|.
name|newInstance
argument_list|(
name|logAggregationContextInfo
operator|.
name|getIncludePattern
argument_list|()
argument_list|,
name|logAggregationContextInfo
operator|.
name|getExcludePattern
argument_list|()
argument_list|,
name|logAggregationContextInfo
operator|.
name|getRolledLogsIncludePattern
argument_list|()
argument_list|,
name|logAggregationContextInfo
operator|.
name|getRolledLogsExcludePattern
argument_list|()
argument_list|,
name|logAggregationContextInfo
operator|.
name|getLogAggregationPolicyClassName
argument_list|()
argument_list|,
name|logAggregationContextInfo
operator|.
name|getLogAggregationPolicyParameters
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

