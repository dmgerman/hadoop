begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|modes
operator|.
name|FairSchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|modes
operator|.
name|FifoSchedulingMode
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|SchedulingMode
specifier|public
specifier|abstract
class|class
name|SchedulingMode
block|{
DECL|field|instances
specifier|private
specifier|static
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|SchedulingMode
argument_list|>
argument_list|,
name|SchedulingMode
argument_list|>
name|instances
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|SchedulingMode
argument_list|>
argument_list|,
name|SchedulingMode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_MODE
specifier|private
specifier|static
name|SchedulingMode
name|DEFAULT_MODE
init|=
name|getInstance
argument_list|(
name|FairSchedulingMode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getDefault ()
specifier|public
specifier|static
name|SchedulingMode
name|getDefault
parameter_list|()
block|{
return|return
name|DEFAULT_MODE
return|;
block|}
DECL|method|setDefault (String className)
specifier|public
specifier|static
name|void
name|setDefault
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|DEFAULT_MODE
operator|=
name|parse
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a {@link SchedulingMode} instance corresponding to the passed clazz    */
DECL|method|getInstance (Class<? extends SchedulingMode> clazz)
specifier|public
specifier|static
name|SchedulingMode
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SchedulingMode
argument_list|>
name|clazz
parameter_list|)
block|{
name|SchedulingMode
name|mode
init|=
name|instances
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
condition|)
block|{
name|mode
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instances
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
return|return
name|mode
return|;
block|}
comment|/**    * Returns {@link SchedulingMode} instance corresponding to the    * {@link SchedulingMode} passed as a string. The mode can be "fair" for    * FairSchedulingMode of "fifo" for FifoSchedulingMode. For custom    * {@link SchedulingMode}s in the RM classpath, the mode should be canonical    * class name of the {@link SchedulingMode}.    *     * @param mode canonical class name or "fair" or "fifo"    * @throws AllocationConfigurationException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parse (String mode)
specifier|public
specifier|static
name|SchedulingMode
name|parse
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|clazz
decl_stmt|;
name|String
name|text
init|=
name|mode
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"fair"
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|FairSchedulingMode
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"fifo"
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|FifoSchedulingMode
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
name|mode
operator|+
literal|" SchedulingMode class not found!"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|SchedulingMode
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
name|mode
operator|+
literal|" does not extend SchedulingMode"
argument_list|)
throw|;
block|}
return|return
name|getInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**    * @return returns the name of SchedulingMode    */
DECL|method|getName ()
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**    * The comparator returned by this method is to be used for sorting the    * {@link Schedulable}s in that queue.    *     * @return the comparator to sort by    */
DECL|method|getComparator ()
specifier|public
specifier|abstract
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|getComparator
parameter_list|()
function_decl|;
comment|/**    * Computes and updates the shares of {@link Schedulable}s as per the    * SchedulingMode, to be used later at schedule time.    *     * @param schedulables {@link Schedulable}s whose shares are to be updated    * @param totalResources Total {@link Resource}s in the cluster    */
DECL|method|computeShares ( Collection<? extends Schedulable> schedulables, Resource totalResources)
specifier|public
specifier|abstract
name|void
name|computeShares
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Schedulable
argument_list|>
name|schedulables
parameter_list|,
name|Resource
name|totalResources
parameter_list|)
function_decl|;
block|}
end_class

end_unit

