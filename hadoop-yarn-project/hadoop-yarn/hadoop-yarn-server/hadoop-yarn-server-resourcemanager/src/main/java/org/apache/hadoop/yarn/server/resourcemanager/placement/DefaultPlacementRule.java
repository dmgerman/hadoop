begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|assureRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|isValidQueueName
import|;
end_import

begin_comment
comment|/**  * Places apps in the specified default queue. If no default queue is  * specified the app is placed in root.default queue.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DefaultPlacementRule
specifier|public
class|class
name|DefaultPlacementRule
extends|extends
name|FSPlacementRule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultPlacementRule
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|defaultQueueName
specifier|public
name|String
name|defaultQueueName
decl_stmt|;
comment|/**    * Set the rule config from the xml config.    * @param conf An xml element from the {@link FairScheduler#conf}    */
annotation|@
name|Override
DECL|method|setConfig (Element conf)
specifier|public
name|void
name|setConfig
parameter_list|(
name|Element
name|conf
parameter_list|)
block|{
comment|// Get the flag from the config (defaults to true if not set)
name|createQueue
operator|=
name|getCreateFlag
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// No config can be set when no policy is defined and we use defaults
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|defaultQueueName
operator|=
name|conf
operator|.
name|getAttribute
argument_list|(
literal|"queue"
argument_list|)
expr_stmt|;
comment|// A queue read from the config could be illegal check it: fall back to
comment|// the config default if it is the case
comment|// However we cannot clean the name as a nested name is allowed.
if|if
condition|(
operator|!
name|isValidQueueName
argument_list|(
name|defaultQueueName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Default rule configured with an illegal queue name: '{}'"
argument_list|,
name|defaultQueueName
argument_list|)
expr_stmt|;
name|defaultQueueName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// The queue name does not have to be set and we really use "default"
if|if
condition|(
name|defaultQueueName
operator|==
literal|null
operator|||
name|defaultQueueName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultQueueName
operator|=
name|assureRoot
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultQueueName
operator|=
name|assureRoot
argument_list|(
name|defaultQueueName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Default rule instantiated with queue name: {}, "
operator|+
literal|"and create flag: {}"
argument_list|,
name|defaultQueueName
argument_list|,
name|createQueue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the rule config just setting the create flag.    * @param create flag to allow queue creation for this rule    */
annotation|@
name|Override
DECL|method|setConfig (Boolean create)
specifier|public
name|void
name|setConfig
parameter_list|(
name|Boolean
name|create
parameter_list|)
block|{
name|createQueue
operator|=
name|create
expr_stmt|;
comment|// No config so fall back to the real default.
name|defaultQueueName
operator|=
name|assureRoot
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Default rule instantiated with default queue name: {}, "
operator|+
literal|"and create flag: {}"
argument_list|,
name|defaultQueueName
argument_list|,
name|createQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (ResourceScheduler scheduler)
specifier|public
name|boolean
name|initialize
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
if|if
condition|(
name|getParentRule
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parent rule must not be configured for Default rule."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getPlacementForApp ( ApplicationSubmissionContext asc, String user)
specifier|public
name|ApplicationPlacementContext
name|getPlacementForApp
parameter_list|(
name|ApplicationSubmissionContext
name|asc
parameter_list|,
name|String
name|user
parameter_list|)
block|{
comment|// If we can create the queue in the rule or the queue exists return it
if|if
condition|(
name|createQueue
operator|||
name|configuredQueue
argument_list|(
name|defaultQueueName
argument_list|)
condition|)
block|{
return|return
operator|new
name|ApplicationPlacementContext
argument_list|(
name|defaultQueueName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

