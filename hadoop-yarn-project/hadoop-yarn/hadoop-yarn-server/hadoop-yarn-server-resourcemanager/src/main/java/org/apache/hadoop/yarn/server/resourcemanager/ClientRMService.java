begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|LongRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ApplicationsRequestScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMoveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|RMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_comment
comment|/**  * The client interface to the Resource Manager. This module handles all the rpc  * interfaces to the resource manager from the client.  */
end_comment

begin_class
DECL|class|ClientRMService
specifier|public
class|class
name|ClientRMService
extends|extends
name|AbstractService
implements|implements
name|ApplicationClientProtocol
block|{
DECL|field|EMPTY_APPS_REPORT
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
name|EMPTY_APPS_REPORT
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|applicationCounter
specifier|final
specifier|private
name|AtomicInteger
name|applicationCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|final
specifier|private
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|rmContext
specifier|final
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|rmAppManager
specifier|private
specifier|final
name|RMAppManager
name|rmAppManager
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|rmDTSecretManager
specifier|protected
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|clientBindAddress
name|InetSocketAddress
name|clientBindAddress
decl_stmt|;
DECL|field|applicationsACLsManager
specifier|private
specifier|final
name|ApplicationACLsManager
name|applicationsACLsManager
decl_stmt|;
DECL|field|queueACLsManager
specifier|private
specifier|final
name|QueueACLsManager
name|queueACLsManager
decl_stmt|;
comment|// For Reservation APIs
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|field|reservationSystem
specifier|private
name|ReservationSystem
name|reservationSystem
decl_stmt|;
DECL|field|rValidator
specifier|private
name|ReservationInputValidator
name|rValidator
decl_stmt|;
DECL|method|ClientRMService (RMContext rmContext, YarnScheduler scheduler, RMAppManager rmAppManager, ApplicationACLsManager applicationACLsManager, QueueACLsManager queueACLsManager, RMDelegationTokenSecretManager rmDTSecretManager)
specifier|public
name|ClientRMService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|RMAppManager
name|rmAppManager
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|QueueACLsManager
name|queueACLsManager
parameter_list|,
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
parameter_list|)
block|{
name|this
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|rmAppManager
argument_list|,
name|applicationACLsManager
argument_list|,
name|queueACLsManager
argument_list|,
name|rmDTSecretManager
argument_list|,
operator|new
name|UTCClock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ClientRMService (RMContext rmContext, YarnScheduler scheduler, RMAppManager rmAppManager, ApplicationACLsManager applicationACLsManager, QueueACLsManager queueACLsManager, RMDelegationTokenSecretManager rmDTSecretManager, Clock clock)
specifier|public
name|ClientRMService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|RMAppManager
name|rmAppManager
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|QueueACLsManager
name|queueACLsManager
parameter_list|,
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|ClientRMService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|rmAppManager
operator|=
name|rmAppManager
expr_stmt|;
name|this
operator|.
name|applicationsACLsManager
operator|=
name|applicationACLsManager
expr_stmt|;
name|this
operator|.
name|queueACLsManager
operator|=
name|queueACLsManager
expr_stmt|;
name|this
operator|.
name|rmDTSecretManager
operator|=
name|rmDTSecretManager
expr_stmt|;
name|this
operator|.
name|reservationSystem
operator|=
name|rmContext
operator|.
name|getReservationSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|rValidator
operator|=
operator|new
name|ReservationInputValidator
argument_list|(
name|clock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|clientBindAddress
operator|=
name|getBindAddress
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|clientBindAddress
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|rmDTSecretManager
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|InputStream
name|inputStream
init|=
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|RMPolicyProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|clientBindAddress
operator|=
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getBindAddress (Configuration conf)
name|InetSocketAddress
name|getBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|getBindAddress ()
specifier|public
name|InetSocketAddress
name|getBindAddress
parameter_list|()
block|{
return|return
name|clientBindAddress
return|;
block|}
comment|/**    * check if the calling user has the access to application information.    * @param callerUGI    * @param owner    * @param operationPerformed    * @param application    * @return    */
DECL|method|checkAccess (UserGroupInformation callerUGI, String owner, ApplicationAccessType operationPerformed, RMApp application)
specifier|private
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|String
name|owner
parameter_list|,
name|ApplicationAccessType
name|operationPerformed
parameter_list|,
name|RMApp
name|application
parameter_list|)
block|{
return|return
name|applicationsACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|operationPerformed
argument_list|,
name|owner
argument_list|,
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|||
name|queueACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|application
operator|.
name|getQueue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getNewApplicationId ()
name|ApplicationId
name|getNewApplicationId
parameter_list|()
block|{
name|ApplicationId
name|applicationId
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|applicationCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated new applicationId: "
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|applicationId
return|;
block|}
annotation|@
name|Override
DECL|method|getNewApplication ( GetNewApplicationRequest request)
specifier|public
name|GetNewApplicationResponse
name|getNewApplication
parameter_list|(
name|GetNewApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetNewApplicationResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetNewApplicationResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setApplicationId
argument_list|(
name|getNewApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pick up min/max resource from scheduler...
name|response
operator|.
name|setMaximumResourceCapability
argument_list|(
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * It gives response which includes application report if the application    * present otherwise throws ApplicationNotFoundException.    */
annotation|@
name|Override
DECL|method|getApplicationReport ( GetApplicationReportRequest request)
specifier|public
name|GetApplicationReportResponse
name|getApplicationReport
parameter_list|(
name|GetApplicationReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationId
name|applicationId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
comment|// If the RM doesn't have the application, throw
comment|// ApplicationNotFoundException and let client to handle.
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|boolean
name|allowAccess
init|=
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|application
argument_list|)
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|application
operator|.
name|createAndGetApplicationReport
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|,
name|allowAccess
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setApplicationReport
argument_list|(
name|report
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptReport ( GetApplicationAttemptReportRequest request)
specifier|public
name|GetApplicationAttemptReportResponse
name|getApplicationAttemptReport
parameter_list|(
name|GetApplicationAttemptReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|request
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
comment|// If the RM doesn't have the application, throw
comment|// ApplicationNotFoundException and let client to handle.
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|request
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|boolean
name|allowAccess
init|=
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|application
argument_list|)
decl_stmt|;
name|GetApplicationAttemptReportResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowAccess
condition|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|application
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationAttemptNotFoundException
argument_list|(
literal|"ApplicationAttempt with id '"
operator|+
name|appAttemptId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|ApplicationAttemptReport
name|attemptReport
init|=
name|appAttempt
operator|.
name|createApplicationAttemptReport
argument_list|()
decl_stmt|;
name|response
operator|=
name|GetApplicationAttemptReportResponse
operator|.
name|newInstance
argument_list|(
name|attemptReport
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" does not have privilage to see this attempt "
operator|+
name|appAttemptId
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempts ( GetApplicationAttemptsRequest request)
specifier|public
name|GetApplicationAttemptsResponse
name|getApplicationAttempts
parameter_list|(
name|GetApplicationAttemptsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
comment|// If the RM doesn't have the application, throw
comment|// ApplicationNotFoundException and let client to handle.
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|appId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|boolean
name|allowAccess
init|=
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|application
argument_list|)
decl_stmt|;
name|GetApplicationAttemptsResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowAccess
condition|)
block|{
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
name|application
operator|.
name|getAppAttempts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|listAttempts
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
argument_list|>
name|iter
init|=
name|attempts
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|listAttempts
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|createApplicationAttemptReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|GetApplicationAttemptsResponse
operator|.
name|newInstance
argument_list|(
name|listAttempts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" does not have privilage to see this aplication "
operator|+
name|appId
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/*    * (non-Javadoc)    *     * we're going to fix the issue of showing non-running containers of the    * running application in YARN-1794    */
annotation|@
name|Override
DECL|method|getContainerReport ( GetContainerReportRequest request)
specifier|public
name|GetContainerReportResponse
name|getContainerReport
parameter_list|(
name|GetContainerReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ContainerId
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
comment|// If the RM doesn't have the application, throw
comment|// ApplicationNotFoundException and let client to handle.
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|appId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|boolean
name|allowAccess
init|=
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|application
argument_list|)
decl_stmt|;
name|GetContainerReportResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowAccess
condition|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|application
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationAttemptNotFoundException
argument_list|(
literal|"ApplicationAttempt with id '"
operator|+
name|appAttemptId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|RMContainer
name|rmConatiner
init|=
name|this
operator|.
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmConatiner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ContainerNotFoundException
argument_list|(
literal|"Container with id '"
operator|+
name|containerId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|response
operator|=
name|GetContainerReportResponse
operator|.
name|newInstance
argument_list|(
name|rmConatiner
operator|.
name|createContainerReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" does not have privilage to see this aplication "
operator|+
name|appId
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/*    * (non-Javadoc)    *     * we're going to fix the issue of showing non-running containers of the    * running application in YARN-1794"    */
annotation|@
name|Override
DECL|method|getContainers (GetContainersRequest request)
specifier|public
name|GetContainersResponse
name|getContainers
parameter_list|(
name|GetContainersRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|request
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
comment|// If the RM doesn't have the application, throw
comment|// ApplicationNotFoundException and let client to handle.
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|appId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|boolean
name|allowAccess
init|=
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|application
argument_list|)
decl_stmt|;
name|GetContainersResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowAccess
condition|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|application
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationAttemptNotFoundException
argument_list|(
literal|"ApplicationAttempt with id '"
operator|+
name|appAttemptId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|SchedulerAppReport
name|schedulerAppReport
init|=
name|this
operator|.
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerAppInfo
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerAppReport
operator|!=
literal|null
condition|)
block|{
name|rmContainers
operator|=
name|schedulerAppReport
operator|.
name|getLiveContainers
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|listContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|rmContainers
control|)
block|{
name|listContainers
operator|.
name|add
argument_list|(
name|rmContainer
operator|.
name|createContainerReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|GetContainersResponse
operator|.
name|newInstance
argument_list|(
name|listContainers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" does not have privilage to see this aplication "
operator|+
name|appId
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|submitApplication ( SubmitApplicationRequest request)
specifier|public
name|SubmitApplicationResponse
name|submitApplication
parameter_list|(
name|SubmitApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationSubmissionContext
name|submissionContext
init|=
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|submissionContext
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// ApplicationSubmissionContext needs to be validated for safety - only
comment|// those fields that are independent of the RM's configuration will be
comment|// checked here, those that are dependent on RM configuration are validated
comment|// in RMAppManager.
name|String
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Safety
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get the current user."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_APP_REQUEST
argument_list|,
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Exception in submitting application"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
comment|// Check whether app has already been put into rmContext,
comment|// If it is, simply return the response
if|if
condition|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This is an earlier submitted application: "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
return|return
name|SubmitApplicationResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
if|if
condition|(
name|submissionContext
operator|.
name|getQueue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|submissionContext
operator|.
name|setQueue
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submissionContext
operator|.
name|getApplicationName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|submissionContext
operator|.
name|setApplicationName
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submissionContext
operator|.
name|getApplicationType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|submissionContext
operator|.
name|setApplicationType
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|submissionContext
operator|.
name|getApplicationType
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|YarnConfiguration
operator|.
name|APPLICATION_TYPE_LENGTH
condition|)
block|{
name|submissionContext
operator|.
name|setApplicationType
argument_list|(
name|submissionContext
operator|.
name|getApplicationType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|APPLICATION_TYPE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// call RMAppManager to submit application directly
name|rmAppManager
operator|.
name|submitApplication
argument_list|(
name|submissionContext
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application with id "
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
operator|+
literal|" submitted by user "
operator|+
name|user
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_APP_REQUEST
argument_list|,
literal|"ClientRMService"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in submitting application with id "
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_APP_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Exception in submitting application"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|SubmitApplicationResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|SubmitApplicationResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|forceKillApplication ( KillApplicationRequest request)
specifier|public
name|KillApplicationResponse
name|forceKillApplication
parameter_list|(
name|KillApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationId
name|applicationId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Error getting UGI"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Trying to kill an absent application"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Trying to kill an absent"
operator|+
literal|" application "
operator|+
name|applicationId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|application
argument_list|)
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"User doesn't have permissions to "
operator|+
name|ApplicationAccessType
operator|.
name|MODIFY_APP
operator|.
name|toString
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
name|AuditConstants
operator|.
name|UNAUTHORIZED_USER
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" cannot perform operation "
operator|+
name|ApplicationAccessType
operator|.
name|MODIFY_APP
operator|.
name|name
argument_list|()
operator|+
literal|" on "
operator|+
name|applicationId
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|application
operator|.
name|isAppFinalStateStored
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"ClientRMService"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
return|return
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
return|;
block|}
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|// For UnmanagedAMs, return true so they don't retry
return|return
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
name|application
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetrics ( GetClusterMetricsRequest request)
specifier|public
name|GetClusterMetricsResponse
name|getClusterMetrics
parameter_list|(
name|GetClusterMetricsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetClusterMetricsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetClusterMetricsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|YarnClusterMetrics
name|ymetrics
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|YarnClusterMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|ymetrics
operator|.
name|setNumNodeManagers
argument_list|(
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|ymetrics
operator|.
name|setNumDecommissionedNodeManagers
argument_list|(
name|clusterMetrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|ymetrics
operator|.
name|setNumActiveNodeManagers
argument_list|(
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|)
expr_stmt|;
name|ymetrics
operator|.
name|setNumLostNodeManagers
argument_list|(
name|clusterMetrics
operator|.
name|getNumLostNMs
argument_list|()
argument_list|)
expr_stmt|;
name|ymetrics
operator|.
name|setNumUnhealthyNodeManagers
argument_list|(
name|clusterMetrics
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|)
expr_stmt|;
name|ymetrics
operator|.
name|setNumRebootedNodeManagers
argument_list|(
name|clusterMetrics
operator|.
name|getNumRebootedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setClusterMetrics
argument_list|(
name|ymetrics
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ( GetApplicationsRequest request)
specifier|public
name|GetApplicationsResponse
name|getApplications
parameter_list|(
name|GetApplicationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
return|return
name|getApplications
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Get applications matching the {@link GetApplicationsRequest}. If    * caseSensitive is set to false, applicationTypes in    * GetApplicationRequest are expected to be in all-lowercase    */
annotation|@
name|Private
DECL|method|getApplications ( GetApplicationsRequest request, boolean caseSensitive)
specifier|public
name|GetApplicationsResponse
name|getApplications
parameter_list|(
name|GetApplicationsRequest
name|request
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
init|=
name|request
operator|.
name|getApplicationTypes
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
init|=
name|request
operator|.
name|getApplicationStates
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
name|request
operator|.
name|getUsers
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|request
operator|.
name|getQueues
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|request
operator|.
name|getApplicationTags
argument_list|()
decl_stmt|;
name|long
name|limit
init|=
name|request
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|LongRange
name|start
init|=
name|request
operator|.
name|getStartRange
argument_list|()
decl_stmt|;
name|LongRange
name|finish
init|=
name|request
operator|.
name|getFinishRange
argument_list|()
decl_stmt|;
name|ApplicationsRequestScope
name|scope
init|=
name|request
operator|.
name|getScope
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RMApp
argument_list|>
name|appsIter
decl_stmt|;
comment|// If the query filters by queues, we can avoid considering apps outside
comment|// of those queues by asking the scheduler for the apps in those queues.
if|if
condition|(
name|queues
operator|!=
literal|null
operator|&&
operator|!
name|queues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Construct an iterator over apps in given queues
comment|// Collect list of lists to avoid copying all apps
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|>
name|queueAppLists
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInQueue
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|appsInQueue
operator|!=
literal|null
operator|&&
operator|!
name|appsInQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queueAppLists
operator|.
name|add
argument_list|(
name|appsInQueue
argument_list|)
expr_stmt|;
block|}
block|}
name|appsIter
operator|=
operator|new
name|Iterator
argument_list|<
name|RMApp
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|>
name|appListIter
init|=
name|queueAppLists
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|schedAppsIter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|// Because queueAppLists has no empty lists, hasNext is whether the
comment|// current list hasNext or whether there are any remaining lists
return|return
operator|(
name|schedAppsIter
operator|!=
literal|null
operator|&&
name|schedAppsIter
operator|.
name|hasNext
argument_list|()
operator|)
operator|||
name|appListIter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RMApp
name|next
parameter_list|()
block|{
if|if
condition|(
name|schedAppsIter
operator|==
literal|null
operator|||
operator|!
name|schedAppsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|schedAppsIter
operator|=
name|appListIter
operator|.
name|next
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|apps
operator|.
name|get
argument_list|(
name|schedAppsIter
operator|.
name|next
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove not supported"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|appsIter
operator|=
name|apps
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|appsIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|reports
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
block|{
name|RMApp
name|application
init|=
name|appsIter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check if current application falls under the specified scope
name|boolean
name|allowAccess
init|=
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|application
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|==
name|ApplicationsRequestScope
operator|.
name|OWN
operator|&&
operator|!
name|callerUGI
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|scope
operator|==
name|ApplicationsRequestScope
operator|.
name|VIEWABLE
operator|&&
operator|!
name|allowAccess
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|applicationTypes
operator|!=
literal|null
operator|&&
operator|!
name|applicationTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|appTypeToMatch
init|=
name|caseSensitive
condition|?
name|application
operator|.
name|getApplicationType
argument_list|()
else|:
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|application
operator|.
name|getApplicationType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|applicationTypes
operator|.
name|contains
argument_list|(
name|appTypeToMatch
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|applicationStates
operator|!=
literal|null
operator|&&
operator|!
name|applicationStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|applicationStates
operator|.
name|contains
argument_list|(
name|application
operator|.
name|createApplicationState
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|users
operator|!=
literal|null
operator|&&
operator|!
name|users
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|users
operator|.
name|contains
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|start
operator|!=
literal|null
operator|&&
operator|!
name|start
operator|.
name|containsLong
argument_list|(
name|application
operator|.
name|getStartTime
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|finish
operator|!=
literal|null
operator|&&
operator|!
name|finish
operator|.
name|containsLong
argument_list|(
name|application
operator|.
name|getFinishTime
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|tags
operator|!=
literal|null
operator|&&
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
name|application
operator|.
name|getApplicationTags
argument_list|()
decl_stmt|;
if|if
condition|(
name|appTags
operator|==
literal|null
operator|||
name|appTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|appTags
operator|.
name|contains
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
continue|continue;
block|}
block|}
name|reports
operator|.
name|add
argument_list|(
name|application
operator|.
name|createAndGetApplicationReport
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|,
name|allowAccess
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetApplicationsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setApplicationList
argument_list|(
name|reports
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodes (GetClusterNodesRequest request)
specifier|public
name|GetClusterNodesResponse
name|getClusterNodes
parameter_list|(
name|GetClusterNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetClusterNodesResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetClusterNodesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|nodeStates
init|=
name|request
operator|.
name|getNodeStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeStates
operator|==
literal|null
operator|||
name|nodeStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodeStates
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|nodes
init|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|rmContext
argument_list|,
name|nodeStates
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RMNode
name|nodeInfo
range|:
name|nodes
control|)
block|{
name|nodeReports
operator|.
name|add
argument_list|(
name|createNodeReports
argument_list|(
name|nodeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setNodeReports
argument_list|(
name|nodeReports
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (GetQueueInfoRequest request)
specifier|public
name|GetQueueInfoResponse
name|getQueueInfo
parameter_list|(
name|GetQueueInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|GetQueueInfoResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetQueueInfoResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|QueueInfo
name|queueInfo
init|=
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
name|request
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|request
operator|.
name|getIncludeChildQueues
argument_list|()
argument_list|,
name|request
operator|.
name|getRecursive
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
name|EMPTY_APPS_REPORT
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getIncludeApplications
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|request
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|appReports
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|(
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|app
range|:
name|apps
control|)
block|{
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
comment|// Check if user is allowed access to this app
if|if
condition|(
operator|!
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|rmApp
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|rmApp
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|appReports
operator|.
name|add
argument_list|(
name|rmApp
operator|.
name|createAndGetApplicationReport
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|queueInfo
operator|.
name|setApplications
argument_list|(
name|appReports
argument_list|)
expr_stmt|;
name|response
operator|.
name|setQueueInfo
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to getQueueInfo for "
operator|+
name|request
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|createNodeReports (RMNode rmNode)
specifier|private
name|NodeReport
name|createNodeReports
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
name|SchedulerNodeReport
name|schedulerNodeReport
init|=
name|scheduler
operator|.
name|getNodeReport
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|used
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|numContainers
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|schedulerNodeReport
operator|!=
literal|null
condition|)
block|{
name|used
operator|=
name|schedulerNodeReport
operator|.
name|getUsedResource
argument_list|()
expr_stmt|;
name|numContainers
operator|=
name|schedulerNodeReport
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
name|NodeReport
name|report
init|=
name|BuilderUtils
operator|.
name|newNodeReport
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getRackName
argument_list|()
argument_list|,
name|used
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|numContainers
argument_list|,
name|rmNode
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|report
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAcls ( GetQueueUserAclsInfoRequest request)
specifier|public
name|GetQueueUserAclsInfoResponse
name|getQueueUserAcls
parameter_list|(
name|GetQueueUserAclsInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetQueueUserAclsInfoResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetQueueUserAclsInfoResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setUserAclsInfoList
argument_list|(
name|scheduler
operator|.
name|getQueueUserAclInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken ( GetDelegationTokenRequest request)
specifier|public
name|GetDelegationTokenResponse
name|getDelegationToken
parameter_list|(
name|GetDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
comment|// Verify that the connection is kerberos authenticated
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be issued only with kerberos authentication"
argument_list|)
throw|;
block|}
name|GetDelegationTokenResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDelegationTokenResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RMDelegationTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
name|owner
argument_list|,
operator|new
name|Text
argument_list|(
name|request
operator|.
name|getRenewer
argument_list|()
argument_list|)
argument_list|,
name|realUser
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|realRMDTtoken
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenIdentifier
argument_list|,
name|this
operator|.
name|rmDTSecretManager
argument_list|)
decl_stmt|;
name|response
operator|.
name|setRMDelegationToken
argument_list|(
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|realRMDTtoken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|realRMDTtoken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|realRMDTtoken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|realRMDTtoken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|io
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken ( RenewDelegationTokenRequest request)
specifier|public
name|RenewDelegationTokenResponse
name|renewDelegationToken
parameter_list|(
name|RenewDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be renewed only with kerberos authentication"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|protoToken
init|=
name|request
operator|.
name|getDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|protoToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|protoToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|getRenewerForToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|long
name|nextExpTime
init|=
name|rmDTSecretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|RenewDelegationTokenResponse
name|renewResponse
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RenewDelegationTokenResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|renewResponse
operator|.
name|setNextExpirationTime
argument_list|(
name|nextExpTime
argument_list|)
expr_stmt|;
return|return
name|renewResponse
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken ( CancelDelegationTokenRequest request)
specifier|public
name|CancelDelegationTokenResponse
name|cancelDelegationToken
parameter_list|(
name|CancelDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be cancelled only with kerberos authentication"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|protoToken
init|=
name|request
operator|.
name|getDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|protoToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|protoToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|rmDTSecretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|Records
operator|.
name|newRecord
argument_list|(
name|CancelDelegationTokenResponse
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|moveApplicationAcrossQueues ( MoveApplicationAcrossQueuesRequest request)
specifier|public
name|MoveApplicationAcrossQueuesResponse
name|moveApplicationAcrossQueues
parameter_list|(
name|MoveApplicationAcrossQueuesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationId
name|applicationId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting UGI "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Error getting UGI"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Trying to move an absent application"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Trying to move an absent"
operator|+
literal|" application "
operator|+
name|applicationId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|application
argument_list|)
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"User doesn't have permissions to "
operator|+
name|ApplicationAccessType
operator|.
name|MODIFY_APP
operator|.
name|toString
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
name|AuditConstants
operator|.
name|UNAUTHORIZED_USER
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" cannot perform operation "
operator|+
name|ApplicationAccessType
operator|.
name|MODIFY_APP
operator|.
name|name
argument_list|()
operator|+
literal|" on "
operator|+
name|applicationId
argument_list|)
argument_list|)
throw|;
block|}
comment|// Moves only allowed when app is in a state that means it is tracked by
comment|// the scheduler
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
operator|.
name|contains
argument_list|(
name|application
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"App in "
operator|+
name|application
operator|.
name|getState
argument_list|()
operator|+
literal|" state cannot be moved."
decl_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|SettableFuture
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppMoveEvent
argument_list|(
name|applicationId
argument_list|,
name|request
operator|.
name|getTargetQueue
argument_list|()
argument_list|,
name|future
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Futures
operator|.
name|get
argument_list|(
name|future
argument_list|,
name|YarnException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"ClientRMService"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|MoveApplicationAcrossQueuesResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|MoveApplicationAcrossQueuesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
DECL|method|getRenewerForToken (Token<RMDelegationTokenIdentifier> token)
specifier|private
name|String
name|getRenewerForToken
parameter_list|(
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
comment|// we can always renew our own tokens
return|return
name|loginUser
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|?
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|user
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAclWithLoadedConfiguration
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
DECL|method|isAllowedDelegationTokenOp ()
specifier|private
name|boolean
name|isAllowedDelegationTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
argument_list|,
name|AuthenticationMethod
operator|.
name|CERTIFICATE
argument_list|)
operator|.
name|contains
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getRealAuthenticationMethod
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServer ()
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|server
return|;
block|}
annotation|@
name|Override
DECL|method|submitReservation ( ReservationSubmissionRequest request)
specifier|public
name|ReservationSubmissionResponse
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Check if reservation system is enabled
name|checkReservationSytem
argument_list|(
name|AuditConstants
operator|.
name|SUBMIT_RESERVATION_REQUEST
argument_list|)
expr_stmt|;
name|ReservationSubmissionResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ReservationSubmissionResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create a new Reservation Id
name|ReservationId
name|reservationId
init|=
name|reservationSystem
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
comment|// Validate the input
name|Plan
name|plan
init|=
name|rValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|reservationSystem
argument_list|,
name|request
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
comment|// Check ACLs
name|String
name|queueName
init|=
name|request
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|checkReservationACLs
argument_list|(
name|queueName
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_RESERVATION_REQUEST
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Try to place the reservation using the agent
name|boolean
name|result
init|=
name|plan
operator|.
name|getReservationAgent
argument_list|()
operator|.
name|createReservation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|,
name|request
operator|.
name|getReservationDefinition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
comment|// add the reservation id to valid ones maintained by reservation
comment|// system
name|reservationSystem
operator|.
name|setQueueForReservation
argument_list|(
name|reservationId
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
comment|// create the reservation synchronously if required
name|refreshScheduler
argument_list|(
name|queueName
argument_list|,
name|request
operator|.
name|getReservationDefinition
argument_list|()
argument_list|,
name|reservationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// return the reservation id
name|response
operator|.
name|setReservationId
argument_list|(
name|reservationId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_RESERVATION_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Unable to create the reservation: "
operator|+
name|reservationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_RESERVATION_REQUEST
argument_list|,
literal|"ClientRMService: "
operator|+
name|reservationId
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|updateReservation ( ReservationUpdateRequest request)
specifier|public
name|ReservationUpdateResponse
name|updateReservation
parameter_list|(
name|ReservationUpdateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Check if reservation system is enabled
name|checkReservationSytem
argument_list|(
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|)
expr_stmt|;
name|ReservationUpdateResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ReservationUpdateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Validate the input
name|Plan
name|plan
init|=
name|rValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|reservationSystem
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationId
init|=
name|request
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|reservationSystem
operator|.
name|getQueueForReservation
argument_list|(
name|reservationId
argument_list|)
decl_stmt|;
comment|// Check ACLs
name|String
name|user
init|=
name|checkReservationACLs
argument_list|(
name|queueName
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|)
decl_stmt|;
comment|// Try to update the reservation using default agent
try|try
block|{
name|boolean
name|result
init|=
name|plan
operator|.
name|getReservationAgent
argument_list|()
operator|.
name|updateReservation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|,
name|request
operator|.
name|getReservationDefinition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Unable to update reservation: "
operator|+
name|reservationId
decl_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|,
name|errMsg
argument_list|,
literal|"ClientRMService"
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Unable to update the reservation: "
operator|+
name|reservationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|,
literal|"ClientRMService: "
operator|+
name|reservationId
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation ( ReservationDeleteRequest request)
specifier|public
name|ReservationDeleteResponse
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Check if reservation system is enabled
name|checkReservationSytem
argument_list|(
name|AuditConstants
operator|.
name|DELETE_RESERVATION_REQUEST
argument_list|)
expr_stmt|;
name|ReservationDeleteResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ReservationDeleteResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Validate the input
name|Plan
name|plan
init|=
name|rValidator
operator|.
name|validateReservationDeleteRequest
argument_list|(
name|reservationSystem
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationId
init|=
name|request
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|reservationSystem
operator|.
name|getQueueForReservation
argument_list|(
name|reservationId
argument_list|)
decl_stmt|;
comment|// Check ACLs
name|String
name|user
init|=
name|checkReservationACLs
argument_list|(
name|queueName
argument_list|,
name|AuditConstants
operator|.
name|DELETE_RESERVATION_REQUEST
argument_list|)
decl_stmt|;
comment|// Try to update the reservation using default agent
try|try
block|{
name|boolean
name|result
init|=
name|plan
operator|.
name|getReservationAgent
argument_list|()
operator|.
name|deleteReservation
argument_list|(
name|reservationId
argument_list|,
name|user
argument_list|,
name|plan
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Could not delete reservation: "
operator|+
name|reservationId
decl_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|DELETE_RESERVATION_REQUEST
argument_list|,
name|errMsg
argument_list|,
literal|"ClientRMService"
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|DELETE_RESERVATION_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Unable to delete the reservation: "
operator|+
name|reservationId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|DELETE_RESERVATION_REQUEST
argument_list|,
literal|"ClientRMService: "
operator|+
name|reservationId
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeToLabels ( GetNodesToLabelsRequest request)
specifier|public
name|GetNodesToLabelsResponse
name|getNodeToLabels
parameter_list|(
name|GetNodesToLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|GetNodesToLabelsResponse
name|response
init|=
name|GetNodesToLabelsResponse
operator|.
name|newInstance
argument_list|(
name|labelsMgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes ( GetLabelsToNodesRequest request)
specifier|public
name|GetLabelsToNodesResponse
name|getLabelsToNodes
parameter_list|(
name|GetLabelsToNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getNodeLabels
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|GetLabelsToNodesResponse
operator|.
name|newInstance
argument_list|(
name|labelsMgr
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|GetLabelsToNodesResponse
operator|.
name|newInstance
argument_list|(
name|labelsMgr
operator|.
name|getLabelsToNodes
argument_list|(
name|request
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getClusterNodeLabels ( GetClusterNodeLabelsRequest request)
specifier|public
name|GetClusterNodeLabelsResponse
name|getClusterNodeLabels
parameter_list|(
name|GetClusterNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|GetClusterNodeLabelsResponse
name|response
init|=
name|GetClusterNodeLabelsResponse
operator|.
name|newInstance
argument_list|(
name|labelsMgr
operator|.
name|getClusterNodeLabels
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
DECL|method|checkReservationSytem (String auditConstant)
specifier|private
name|void
name|checkReservationSytem
parameter_list|(
name|String
name|auditConstant
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Check if reservation is enabled
if|if
condition|(
name|reservationSystem
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Reservation is not enabled."
operator|+
literal|" Please enable& try again"
argument_list|)
throw|;
block|}
block|}
DECL|method|refreshScheduler (String planName, ReservationDefinition contract, String reservationId)
specifier|private
name|void
name|refreshScheduler
parameter_list|(
name|String
name|planName
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|,
name|String
name|reservationId
parameter_list|)
block|{
if|if
condition|(
operator|(
name|contract
operator|.
name|getArrival
argument_list|()
operator|-
name|clock
operator|.
name|getTime
argument_list|()
operator|)
operator|<
name|reservationSystem
operator|.
name|getPlanFollowerTimeStep
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Reservation {0} is within threshold so attempting to create synchronously."
argument_list|,
name|reservationId
argument_list|)
argument_list|)
expr_stmt|;
name|reservationSystem
operator|.
name|synchronizePlan
argument_list|(
name|planName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Created reservation {0} synchronously."
argument_list|,
name|reservationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkReservationACLs (String queueName, String auditConstant)
specifier|private
name|String
name|checkReservationACLs
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|auditConstant
parameter_list|)
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
name|queueName
argument_list|,
literal|"ClientRMService"
argument_list|,
literal|"Error getting UGI"
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
comment|// Check if user has access on the managed queue
if|if
condition|(
operator|!
name|queueACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|queueName
argument_list|)
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|auditConstant
argument_list|,
literal|"User doesn't have permissions to "
operator|+
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
operator|.
name|toString
argument_list|()
argument_list|,
literal|"ClientRMService"
argument_list|,
name|AuditConstants
operator|.
name|UNAUTHORIZED_USER
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" cannot perform operation "
operator|+
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
operator|.
name|name
argument_list|()
operator|+
literal|" on queue"
operator|+
name|queueName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

