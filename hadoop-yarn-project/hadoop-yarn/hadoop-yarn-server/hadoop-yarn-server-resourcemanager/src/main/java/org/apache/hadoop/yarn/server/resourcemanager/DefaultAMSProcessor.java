begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|CollectorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|StrictPreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidContainerReleaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceBlacklistRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|SchedulerInvalidResoureRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceProfilesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptStatusupdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUnregistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
operator|.
name|GREATER_THEN_MAX_ALLOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
operator|.
name|LESS_THAN_ZERO
import|;
end_import

begin_comment
comment|/**  * This is the default Application Master Service processor. It has be the  * last processor in the @{@link AMSProcessingChain}.  */
end_comment

begin_class
DECL|class|DefaultAMSProcessor
specifier|final
class|class
name|DefaultAMSProcessor
implements|implements
name|ApplicationMasterServiceProcessor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultAMSProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ALLOCATION
specifier|protected
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|resourceProfilesManager
specifier|private
name|ResourceProfilesManager
name|resourceProfilesManager
decl_stmt|;
DECL|field|timelineServiceV2Enabled
specifier|private
name|boolean
name|timelineServiceV2Enabled
decl_stmt|;
DECL|field|nodelabelsEnabled
specifier|private
name|boolean
name|nodelabelsEnabled
decl_stmt|;
annotation|@
name|Override
DECL|method|init (ApplicationMasterServiceContext amsContext, ApplicationMasterServiceProcessor nextProcessor)
specifier|public
name|void
name|init
parameter_list|(
name|ApplicationMasterServiceContext
name|amsContext
parameter_list|,
name|ApplicationMasterServiceProcessor
name|nextProcessor
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
operator|(
name|RMContext
operator|)
name|amsContext
expr_stmt|;
name|this
operator|.
name|resourceProfilesManager
operator|=
name|rmContext
operator|.
name|getResourceProfilesManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|timelineServiceV2Enabled
operator|=
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodelabelsEnabled
operator|=
name|YarnConfiguration
operator|.
name|areNodeLabelsEnabled
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( ApplicationAttemptId applicationAttemptId, RegisterApplicationMasterRequest request, RegisterApplicationMasterResponse response)
specifier|public
name|void
name|registerApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RegisterApplicationMasterRequest
name|request
parameter_list|,
name|RegisterApplicationMasterResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|RMApp
name|app
init|=
name|getRmContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AM registration "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|getRmContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptRegistrationEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
operator|.
name|getHost
argument_list|()
argument_list|,
name|request
operator|.
name|getRpcPort
argument_list|()
argument_list|,
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|RMAuditLogger
operator|.
name|AuditConstants
operator|.
name|REGISTER_AM
argument_list|,
literal|"ApplicationMasterService"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaximumResourceCapability
argument_list|(
name|getScheduler
argument_list|()
operator|.
name|getMaximumResourceCapability
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setApplicationACLs
argument_list|(
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting client token master key"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setClientToAMTokenMasterKey
argument_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|getRmContext
argument_list|()
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|getMasterKey
argument_list|(
name|applicationAttemptId
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// For work-preserving AM restart, retrieve previous attempts' containers
comment|// and corresponding NM tokens.
if|if
condition|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|transferredContainers
init|=
name|getScheduler
argument_list|()
operator|.
name|getTransferredContainers
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|transferredContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|setContainersFromPreviousAttempts
argument_list|(
name|transferredContainers
argument_list|)
expr_stmt|;
comment|// Clear the node set remembered by the secret manager. Necessary
comment|// for UAM restart because we use the same attemptId.
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|clearNodeSetForAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|transferredContainers
control|)
block|{
try|try
block|{
name|NMToken
name|token
init|=
name|getRmContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|createAndGetNMToken
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|applicationAttemptId
argument_list|,
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|token
condition|)
block|{
name|nmTokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// if it's a DNS issue, throw UnknowHostException directly and
comment|// that
comment|// will be automatically retried by RMProxy in RPC layer.
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|UnknownHostException
condition|)
block|{
throw|throw
operator|(
name|UnknownHostException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
name|response
operator|.
name|setNMTokensFromPreviousAttempts
argument_list|(
name|nmTokens
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" retrieved "
operator|+
name|transferredContainers
operator|.
name|size
argument_list|()
operator|+
literal|" containers from previous"
operator|+
literal|" attempts and "
operator|+
name|nmTokens
operator|.
name|size
argument_list|()
operator|+
literal|" NM tokens."
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setSchedulerResourceTypes
argument_list|(
name|getScheduler
argument_list|()
operator|.
name|getSchedulingResourceTypes
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResourceTypes
argument_list|(
name|ResourceUtils
operator|.
name|getResourcesTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRmContext
argument_list|()
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_PROFILES_ENABLED
argument_list|)
condition|)
block|{
name|response
operator|.
name|setResourceProfiles
argument_list|(
name|resourceProfilesManager
operator|.
name|getResourceProfiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId appAttemptId, AllocateRequest request, AllocateResponse response)
specifier|public
name|void
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AllocateRequest
name|request
parameter_list|,
name|AllocateResponse
name|response
parameter_list|)
throws|throws
name|YarnException
block|{
name|handleProgress
argument_list|(
name|appAttemptId
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
name|request
operator|.
name|getAskList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
name|request
operator|.
name|getReleaseList
argument_list|()
decl_stmt|;
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|(
name|blacklistRequest
operator|!=
literal|null
operator|)
condition|?
name|blacklistRequest
operator|.
name|getBlacklistAdditions
argument_list|()
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
operator|(
name|blacklistRequest
operator|!=
literal|null
operator|)
condition|?
name|blacklistRequest
operator|.
name|getBlacklistRemovals
argument_list|()
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
name|getRmContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// set label expression for Resource Requests if resourceName=ANY
name|ApplicationSubmissionContext
name|asc
init|=
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|ask
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
operator|&&
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|req
operator|.
name|setNodeLabelExpression
argument_list|(
name|asc
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|SchedulerUtils
operator|.
name|enforcePartitionExclusivity
argument_list|(
name|req
argument_list|,
name|getRmContext
argument_list|()
operator|.
name|getExclusiveEnforcedPartitions
argument_list|()
argument_list|,
name|asc
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Resource
name|maximumCapacity
init|=
name|getScheduler
argument_list|()
operator|.
name|getMaximumResourceCapability
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
decl_stmt|;
comment|// sanity check
try|try
block|{
name|RMServerUtils
operator|.
name|normalizeAndValidateRequests
argument_list|(
name|ask
argument_list|,
name|maximumCapacity
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|getScheduler
argument_list|()
argument_list|,
name|getRmContext
argument_list|()
argument_list|,
name|nodelabelsEnabled
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|RMAppAttempt
name|rmAppAttempt
init|=
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|handleInvalidResourceException
argument_list|(
name|e
argument_list|,
name|rmAppAttempt
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|RMServerUtils
operator|.
name|validateBlacklistRequest
argument_list|(
name|blacklistRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceBlacklistRequestException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid blacklist request by application "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// In the case of work-preserving AM restart, it's possible for the
comment|// AM to release containers from the earlier attempt.
if|if
condition|(
operator|!
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
condition|)
block|{
try|try
block|{
name|RMServerUtils
operator|.
name|validateContainerReleaseRequest
argument_list|(
name|release
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidContainerReleaseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid container release by application "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// Split Update Resource Requests into increase and decrease.
comment|// No Exceptions are thrown here. All update errors are aggregated
comment|// and returned to the AM.
name|List
argument_list|<
name|UpdateContainerError
argument_list|>
name|updateErrors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerUpdates
name|containerUpdateRequests
init|=
name|RMServerUtils
operator|.
name|validateAndSplitUpdateResourceRequests
argument_list|(
name|getRmContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|maximumCapacity
argument_list|,
name|updateErrors
argument_list|)
decl_stmt|;
comment|// Send new requests to appAttempt.
name|Allocation
name|allocation
decl_stmt|;
name|RMAppAttemptState
name|state
init|=
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
operator|||
name|app
operator|.
name|isAppFinalStateStored
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|appAttemptId
operator|+
literal|" is in "
operator|+
name|state
operator|+
literal|" state, ignore container allocate request."
argument_list|)
expr_stmt|;
name|allocation
operator|=
name|EMPTY_ALLOCATION
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|allocation
operator|=
name|getScheduler
argument_list|()
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
name|request
operator|.
name|getSchedulingRequests
argument_list|()
argument_list|,
name|release
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|,
name|containerUpdateRequests
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerInvalidResoureRequestException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exceptions caught when scheduler handling requests"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|blacklistAdditions
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|blacklistRemovals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"blacklist are updated in Scheduler."
operator|+
literal|"blacklistAdditions: "
operator|+
name|blacklistAdditions
operator|+
literal|", "
operator|+
literal|"blacklistRemovals: "
operator|+
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
name|RMAppAttempt
name|appAttempt
init|=
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|getNMTokens
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|allocation
operator|.
name|getNMTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|setNMTokens
argument_list|(
name|allocation
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Notify the AM of container update errors
name|ApplicationMasterServiceUtils
operator|.
name|addToUpdateContainerErrors
argument_list|(
name|response
argument_list|,
name|updateErrors
argument_list|)
expr_stmt|;
comment|// update the response with the deltas of node status changes
name|handleNodeUpdates
argument_list|(
name|app
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|ApplicationMasterServiceUtils
operator|.
name|addToAllocatedContainers
argument_list|(
name|response
argument_list|,
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCompletedContainersStatuses
argument_list|(
name|appAttempt
operator|.
name|pullJustFinishedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAvailableResources
argument_list|(
name|allocation
operator|.
name|getResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|addToContainerUpdates
argument_list|(
name|response
argument_list|,
name|allocation
argument_list|,
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|getScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|pullUpdateContainerErrors
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNumClusterNodes
argument_list|(
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// add collector address for this application
if|if
condition|(
name|timelineServiceV2Enabled
condition|)
block|{
name|CollectorInfo
name|collectorInfo
init|=
name|app
operator|.
name|getCollectorInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectorInfo
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setCollectorInfo
argument_list|(
name|collectorInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add preemption to the allocateResponse message (if any)
name|response
operator|.
name|setPreemptionMessage
argument_list|(
name|generatePreemptionMessage
argument_list|(
name|allocation
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set application priority
name|response
operator|.
name|setApplicationPriority
argument_list|(
name|app
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContainersFromPreviousAttempts
argument_list|(
name|allocation
operator|.
name|getPreviousAttemptContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleInvalidResourceException (InvalidResourceRequestException e, RMAppAttempt rmAppAttempt)
specifier|private
name|void
name|handleInvalidResourceException
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|,
name|RMAppAttempt
name|rmAppAttempt
parameter_list|)
throws|throws
name|InvalidResourceRequestException
block|{
if|if
condition|(
name|e
operator|.
name|getInvalidResourceType
argument_list|()
operator|==
name|LESS_THAN_ZERO
operator|||
name|e
operator|.
name|getInvalidResourceType
argument_list|()
operator|==
name|GREATER_THEN_MAX_ALLOCATION
condition|)
block|{
name|rmAppAttempt
operator|.
name|updateAMLaunchDiagnostics
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid resource ask by application "
operator|+
name|rmAppAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
DECL|method|handleNodeUpdates (RMApp app, AllocateResponse allocateResponse)
specifier|private
name|void
name|handleNodeUpdates
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|AllocateResponse
name|allocateResponse
parameter_list|)
block|{
name|Map
argument_list|<
name|RMNode
argument_list|,
name|NodeUpdateType
argument_list|>
name|updatedNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|pullRMNodeUpdates
argument_list|(
name|updatedNodes
argument_list|)
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|updatedNodeReports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RMNode
argument_list|,
name|NodeUpdateType
argument_list|>
name|rmNodeEntry
range|:
name|updatedNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RMNode
name|rmNode
init|=
name|rmNodeEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SchedulerNodeReport
name|schedulerNodeReport
init|=
name|getScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|used
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|numContainers
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|schedulerNodeReport
operator|!=
literal|null
condition|)
block|{
name|used
operator|=
name|schedulerNodeReport
operator|.
name|getUsedResource
argument_list|()
expr_stmt|;
name|numContainers
operator|=
name|schedulerNodeReport
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
name|NodeId
name|nodeId
init|=
name|rmNode
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|NodeReport
name|report
init|=
name|BuilderUtils
operator|.
name|newNodeReport
argument_list|(
name|nodeId
argument_list|,
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getRackName
argument_list|()
argument_list|,
name|used
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|numContainers
argument_list|,
name|rmNode
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getDecommissioningTimeout
argument_list|()
argument_list|,
name|rmNodeEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|updatedNodeReports
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setUpdatedNodes
argument_list|(
name|updatedNodeReports
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleProgress (ApplicationAttemptId appAttemptId, AllocateRequest request)
specifier|private
name|void
name|handleProgress
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AllocateRequest
name|request
parameter_list|)
block|{
comment|//filter illegal progress values
name|float
name|filteredProgress
init|=
name|request
operator|.
name|getProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|isNaN
argument_list|(
name|filteredProgress
argument_list|)
operator|||
name|filteredProgress
operator|==
name|Float
operator|.
name|NEGATIVE_INFINITY
operator|||
name|filteredProgress
operator|<
literal|0
condition|)
block|{
name|request
operator|.
name|setProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filteredProgress
operator|>
literal|1
operator|||
name|filteredProgress
operator|==
name|Float
operator|.
name|POSITIVE_INFINITY
condition|)
block|{
name|request
operator|.
name|setProgress
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Send the status update to the appAttempt.
name|getRmContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptStatusupdateEvent
argument_list|(
name|appAttemptId
argument_list|,
name|request
operator|.
name|getProgress
argument_list|()
argument_list|,
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( ApplicationAttemptId applicationAttemptId, FinishApplicationMasterRequest request, FinishApplicationMasterResponse response)
specifier|public
name|void
name|finishApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|FinishApplicationMasterRequest
name|request
parameter_list|,
name|FinishApplicationMasterResponse
name|response
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|getRmContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// For UnmanagedAMs, return true so they don't retry
name|response
operator|.
name|setIsUnregistered
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
expr_stmt|;
name|getRmContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|request
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|request
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generatePreemptionMessage (Allocation allocation)
specifier|private
name|PreemptionMessage
name|generatePreemptionMessage
parameter_list|(
name|Allocation
name|allocation
parameter_list|)
block|{
name|PreemptionMessage
name|pMsg
init|=
literal|null
decl_stmt|;
comment|// assemble strict preemption request
if|if
condition|(
name|allocation
operator|.
name|getStrictContainerPreemptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pMsg
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
expr_stmt|;
name|StrictPreemptionContract
name|pStrict
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StrictPreemptionContract
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PreemptionContainer
argument_list|>
name|pCont
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|allocation
operator|.
name|getStrictContainerPreemptions
argument_list|()
control|)
block|{
name|PreemptionContainer
name|pc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|pCont
operator|.
name|add
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|pStrict
operator|.
name|setContainers
argument_list|(
name|pCont
argument_list|)
expr_stmt|;
name|pMsg
operator|.
name|setStrictContract
argument_list|(
name|pStrict
argument_list|)
expr_stmt|;
block|}
comment|// assemble negotiable preemption request
if|if
condition|(
name|allocation
operator|.
name|getResourcePreemptions
argument_list|()
operator|!=
literal|null
operator|&&
name|allocation
operator|.
name|getResourcePreemptions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
operator|!=
literal|null
operator|&&
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pMsg
operator|==
literal|null
condition|)
block|{
name|pMsg
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|PreemptionContract
name|contract
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContract
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PreemptionContainer
argument_list|>
name|pCont
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
control|)
block|{
name|PreemptionContainer
name|pc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|pCont
operator|.
name|add
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PreemptionResourceRequest
argument_list|>
name|pRes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|crr
range|:
name|allocation
operator|.
name|getResourcePreemptions
argument_list|()
control|)
block|{
name|PreemptionResourceRequest
name|prr
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|prr
operator|.
name|setResourceRequest
argument_list|(
name|crr
argument_list|)
expr_stmt|;
name|pRes
operator|.
name|add
argument_list|(
name|prr
argument_list|)
expr_stmt|;
block|}
name|contract
operator|.
name|setContainers
argument_list|(
name|pCont
argument_list|)
expr_stmt|;
name|contract
operator|.
name|setResourceRequest
argument_list|(
name|pRes
argument_list|)
expr_stmt|;
name|pMsg
operator|.
name|setContract
argument_list|(
name|contract
argument_list|)
expr_stmt|;
block|}
return|return
name|pMsg
return|;
block|}
DECL|method|getRmContext ()
specifier|protected
name|RMContext
name|getRmContext
parameter_list|()
block|{
return|return
name|rmContext
return|;
block|}
DECL|method|getScheduler ()
specifier|protected
name|YarnScheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|rmContext
operator|.
name|getScheduler
argument_list|()
return|;
block|}
DECL|method|addToContainerUpdates (AllocateResponse allocateResponse, Allocation allocation, List<UpdateContainerError> updateContainerErrors)
specifier|private
specifier|static
name|void
name|addToContainerUpdates
parameter_list|(
name|AllocateResponse
name|allocateResponse
parameter_list|,
name|Allocation
name|allocation
parameter_list|,
name|List
argument_list|<
name|UpdateContainerError
argument_list|>
name|updateContainerErrors
parameter_list|)
block|{
comment|// Handling increased containers
name|ApplicationMasterServiceUtils
operator|.
name|addToUpdatedContainers
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|allocation
operator|.
name|getIncreasedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Handling decreased containers
name|ApplicationMasterServiceUtils
operator|.
name|addToUpdatedContainers
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|allocation
operator|.
name|getDecreasedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Handling promoted containers
name|ApplicationMasterServiceUtils
operator|.
name|addToUpdatedContainers
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
name|allocation
operator|.
name|getPromotedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Handling demoted containers
name|ApplicationMasterServiceUtils
operator|.
name|addToUpdatedContainers
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
argument_list|,
name|allocation
operator|.
name|getDemotedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationMasterServiceUtils
operator|.
name|addToUpdateContainerErrors
argument_list|(
name|allocateResponse
argument_list|,
name|updateContainerErrors
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

