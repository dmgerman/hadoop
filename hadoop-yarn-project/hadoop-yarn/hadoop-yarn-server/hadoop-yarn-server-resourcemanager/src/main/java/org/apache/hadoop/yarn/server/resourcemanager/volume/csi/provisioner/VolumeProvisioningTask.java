begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi.provisioner
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|provisioner
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|event
operator|.
name|ControllerPublishVolumeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|event
operator|.
name|ValidateVolumeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|Volume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A provisioning task encapsulates all the logic required by a storage system  * to provision a volume. This class is the common implementation, it might  * be override if the provisioning behavior of a certain storage system  * is not completely align with this implementation.  */
end_comment

begin_class
DECL|class|VolumeProvisioningTask
specifier|public
class|class
name|VolumeProvisioningTask
implements|implements
name|VolumeProvisioner
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeProvisioningTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|volumes
specifier|private
name|List
argument_list|<
name|Volume
argument_list|>
name|volumes
decl_stmt|;
DECL|method|VolumeProvisioningTask (List<Volume> volumes)
specifier|public
name|VolumeProvisioningTask
parameter_list|(
name|List
argument_list|<
name|Volume
argument_list|>
name|volumes
parameter_list|)
block|{
name|this
operator|.
name|volumes
operator|=
name|volumes
expr_stmt|;
block|}
DECL|method|getVolumes ()
specifier|public
name|List
argument_list|<
name|Volume
argument_list|>
name|getVolumes
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumes
return|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|VolumeProvisioningResults
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|VolumeProvisioningResults
name|vpr
init|=
operator|new
name|VolumeProvisioningResults
argument_list|()
decl_stmt|;
comment|// Wait all volumes are reaching expected state
for|for
control|(
name|Volume
name|vs
range|:
name|volumes
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Provisioning volume : {}"
argument_list|,
name|vs
operator|.
name|getVolumeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|vs
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|vs
argument_list|)
argument_list|)
expr_stmt|;
name|vs
operator|.
name|handle
argument_list|(
operator|new
name|ControllerPublishVolumeEvent
argument_list|(
name|vs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// collect results
name|volumes
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|v
lambda|->
name|vpr
operator|.
name|addResult
argument_list|(
name|v
operator|.
name|getVolumeId
argument_list|()
argument_list|,
name|v
operator|.
name|getVolumeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|vpr
return|;
block|}
block|}
end_class

end_unit

