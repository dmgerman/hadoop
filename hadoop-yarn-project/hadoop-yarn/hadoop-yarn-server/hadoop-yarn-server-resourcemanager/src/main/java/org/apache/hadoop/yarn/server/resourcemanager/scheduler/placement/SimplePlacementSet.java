begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A simple PlacementSet which keeps an unordered map  */
end_comment

begin_class
DECL|class|SimplePlacementSet
specifier|public
class|class
name|SimplePlacementSet
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
implements|implements
name|PlacementSet
argument_list|<
name|N
argument_list|>
block|{
DECL|field|map
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|map
decl_stmt|;
DECL|field|partition
specifier|private
name|String
name|partition
decl_stmt|;
DECL|method|SimplePlacementSet (N node)
specifier|public
name|SimplePlacementSet
parameter_list|(
name|N
name|node
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|node
condition|)
block|{
comment|// Only one node in the initial PlacementSet
name|this
operator|.
name|map
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|node
operator|.
name|getPartition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|map
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
expr_stmt|;
block|}
block|}
DECL|method|SimplePlacementSet (Map<NodeId, N> map, String partition)
specifier|public
name|SimplePlacementSet
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|map
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllNodes ()
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|getAllNodes
parameter_list|()
block|{
return|return
name|map
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
DECL|method|getPartition ()
specifier|public
name|String
name|getPartition
parameter_list|()
block|{
return|return
name|partition
return|;
block|}
block|}
end_class

end_unit

