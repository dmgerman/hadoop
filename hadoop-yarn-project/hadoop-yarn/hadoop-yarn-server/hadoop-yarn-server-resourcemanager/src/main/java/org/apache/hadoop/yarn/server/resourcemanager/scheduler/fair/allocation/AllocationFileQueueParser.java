begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.allocation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Responsible for loading queue configuration properties  * from a list of {@link Element}s containing queues.  */
end_comment

begin_class
DECL|class|AllocationFileQueueParser
specifier|public
class|class
name|AllocationFileQueueParser
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AllocationFileQueueParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|public
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"root"
decl_stmt|;
DECL|field|EVERYBODY_ACL
specifier|public
specifier|static
specifier|final
name|AccessControlList
name|EVERYBODY_ACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
DECL|field|NOBODY_ACL
specifier|static
specifier|final
name|AccessControlList
name|NOBODY_ACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
DECL|field|MIN_RESOURCES
specifier|private
specifier|static
specifier|final
name|String
name|MIN_RESOURCES
init|=
literal|"minResources"
decl_stmt|;
DECL|field|MAX_RESOURCES
specifier|private
specifier|static
specifier|final
name|String
name|MAX_RESOURCES
init|=
literal|"maxResources"
decl_stmt|;
DECL|field|MAX_CHILD_RESOURCES
specifier|private
specifier|static
specifier|final
name|String
name|MAX_CHILD_RESOURCES
init|=
literal|"maxChildResources"
decl_stmt|;
DECL|field|MAX_RUNNING_APPS
specifier|private
specifier|static
specifier|final
name|String
name|MAX_RUNNING_APPS
init|=
literal|"maxRunningApps"
decl_stmt|;
DECL|field|MAX_AMSHARE
specifier|private
specifier|static
specifier|final
name|String
name|MAX_AMSHARE
init|=
literal|"maxAMShare"
decl_stmt|;
DECL|field|WEIGHT
specifier|private
specifier|static
specifier|final
name|String
name|WEIGHT
init|=
literal|"weight"
decl_stmt|;
DECL|field|MIN_SHARE_PREEMPTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|MIN_SHARE_PREEMPTION_TIMEOUT
init|=
literal|"minSharePreemptionTimeout"
decl_stmt|;
DECL|field|FAIR_SHARE_PREEMPTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|FAIR_SHARE_PREEMPTION_TIMEOUT
init|=
literal|"fairSharePreemptionTimeout"
decl_stmt|;
DECL|field|FAIR_SHARE_PREEMPTION_THRESHOLD
specifier|private
specifier|static
specifier|final
name|String
name|FAIR_SHARE_PREEMPTION_THRESHOLD
init|=
literal|"fairSharePreemptionThreshold"
decl_stmt|;
DECL|field|SCHEDULING_POLICY
specifier|private
specifier|static
specifier|final
name|String
name|SCHEDULING_POLICY
init|=
literal|"schedulingPolicy"
decl_stmt|;
DECL|field|SCHEDULING_MODE
specifier|private
specifier|static
specifier|final
name|String
name|SCHEDULING_MODE
init|=
literal|"schedulingMode"
decl_stmt|;
DECL|field|ACL_SUBMIT_APPS
specifier|private
specifier|static
specifier|final
name|String
name|ACL_SUBMIT_APPS
init|=
literal|"aclSubmitApps"
decl_stmt|;
DECL|field|ACL_ADMINISTER_APPS
specifier|private
specifier|static
specifier|final
name|String
name|ACL_ADMINISTER_APPS
init|=
literal|"aclAdministerApps"
decl_stmt|;
DECL|field|ACL_ADMINISTER_RESERVATIONS
specifier|private
specifier|static
specifier|final
name|String
name|ACL_ADMINISTER_RESERVATIONS
init|=
literal|"aclAdministerReservations"
decl_stmt|;
DECL|field|ACL_LIST_RESERVATIONS
specifier|private
specifier|static
specifier|final
name|String
name|ACL_LIST_RESERVATIONS
init|=
literal|"aclListReservations"
decl_stmt|;
DECL|field|ACL_SUBMIT_RESERVATIONS
specifier|private
specifier|static
specifier|final
name|String
name|ACL_SUBMIT_RESERVATIONS
init|=
literal|"aclSubmitReservations"
decl_stmt|;
DECL|field|RESERVATION
specifier|private
specifier|static
specifier|final
name|String
name|RESERVATION
init|=
literal|"reservation"
decl_stmt|;
DECL|field|ALLOW_PREEMPTION_FROM
specifier|private
specifier|static
specifier|final
name|String
name|ALLOW_PREEMPTION_FROM
init|=
literal|"allowPreemptionFrom"
decl_stmt|;
DECL|field|QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE
init|=
literal|"queue"
decl_stmt|;
DECL|field|POOL
specifier|private
specifier|static
specifier|final
name|String
name|POOL
init|=
literal|"pool"
decl_stmt|;
DECL|field|elements
specifier|private
specifier|final
name|List
argument_list|<
name|Element
argument_list|>
name|elements
decl_stmt|;
DECL|method|AllocationFileQueueParser (List<Element> elements)
specifier|public
name|AllocationFileQueueParser
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
comment|// Load queue elements. A root queue can either be included or omitted. If
comment|// it's included, all other queues must be inside it.
DECL|method|parse ()
specifier|public
name|QueueProperties
name|parse
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
name|QueueProperties
operator|.
name|Builder
name|queuePropertiesBuilder
init|=
operator|new
name|QueueProperties
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|elements
control|)
block|{
name|String
name|parent
init|=
name|ROOT
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
if|if
condition|(
name|elements
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"If configuring root queue,"
operator|+
literal|" no other queues can be placed alongside it."
argument_list|)
throw|;
block|}
name|parent
operator|=
literal|null
expr_stmt|;
block|}
name|loadQueue
argument_list|(
name|parent
argument_list|,
name|element
argument_list|,
name|queuePropertiesBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|queuePropertiesBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Loads a queue from a queue element in the configuration file.    */
DECL|method|loadQueue (String parentName, Element element, QueueProperties.Builder builder)
specifier|private
name|void
name|loadQueue
parameter_list|(
name|String
name|parentName
parameter_list|,
name|Element
name|element
parameter_list|,
name|QueueProperties
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|String
name|queueName
init|=
name|FairSchedulerUtilities
operator|.
name|trimQueueName
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Bad fair scheduler config "
operator|+
literal|"file: queue name ("
operator|+
name|queueName
operator|+
literal|") shouldn't contain period."
argument_list|)
throw|;
block|}
if|if
condition|(
name|queueName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Bad fair scheduler config "
operator|+
literal|"file: queue name shouldn't be empty or "
operator|+
literal|"consist only of whitespace."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentName
operator|!=
literal|null
condition|)
block|{
name|queueName
operator|=
name|parentName
operator|+
literal|"."
operator|+
name|queueName
expr_stmt|;
block|}
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|boolean
name|isLeaf
init|=
literal|true
decl_stmt|;
name|boolean
name|isReservable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
block|{
continue|continue;
block|}
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
name|MIN_RESOURCES
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ConfigurableResource
name|val
init|=
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|builder
operator|.
name|minQueueResources
argument_list|(
name|queueName
argument_list|,
name|val
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MAX_RESOURCES
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ConfigurableResource
name|val
init|=
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|builder
operator|.
name|maxQueueResources
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MAX_CHILD_RESOURCES
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ConfigurableResource
name|val
init|=
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|builder
operator|.
name|maxChildQueueResources
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MAX_RUNNING_APPS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|builder
operator|.
name|queueMaxApps
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MAX_AMSHARE
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|float
name|val
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|val
operator|=
name|Math
operator|.
name|min
argument_list|(
name|val
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|builder
operator|.
name|queueMaxAMShares
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WEIGHT
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|double
name|val
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|builder
operator|.
name|queueWeights
argument_list|(
name|queueName
argument_list|,
operator|(
name|float
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MIN_SHARE_PREEMPTION_TIMEOUT
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|builder
operator|.
name|minSharePreemptionTimeouts
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FAIR_SHARE_PREEMPTION_TIMEOUT
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|builder
operator|.
name|fairSharePreemptionTimeouts
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FAIR_SHARE_PREEMPTION_THRESHOLD
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|float
name|val
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|val
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|val
argument_list|,
literal|1.0f
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|builder
operator|.
name|fairSharePreemptionThresholds
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SCHEDULING_POLICY
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
name|SCHEDULING_MODE
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|SchedulingPolicy
name|policy
init|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|builder
operator|.
name|queuePolicies
argument_list|(
name|queueName
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ACL_SUBMIT_APPS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|builder
operator|.
name|queueAcls
argument_list|(
name|queueName
argument_list|,
name|AccessType
operator|.
name|SUBMIT_APP
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ACL_ADMINISTER_APPS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|builder
operator|.
name|queueAcls
argument_list|(
name|queueName
argument_list|,
name|AccessType
operator|.
name|ADMINISTER_QUEUE
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ACL_ADMINISTER_RESERVATIONS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|builder
operator|.
name|reservationAcls
argument_list|(
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|ADMINISTER_RESERVATIONS
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ACL_LIST_RESERVATIONS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|builder
operator|.
name|reservationAcls
argument_list|(
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|LIST_RESERVATIONS
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ACL_SUBMIT_RESERVATIONS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|builder
operator|.
name|reservationAcls
argument_list|(
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|SUBMIT_RESERVATIONS
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RESERVATION
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|isReservable
operator|=
literal|true
expr_stmt|;
name|builder
operator|.
name|reservableQueues
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|configuredQueues
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ALLOW_PREEMPTION_FROM
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nonPreemptableQueues
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|QUEUE
operator|.
name|endsWith
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
name|POOL
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|loadQueue
argument_list|(
name|queueName
argument_list|,
name|field
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|isLeaf
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// if a leaf in the alloc file is marked as type='parent'
comment|// then store it as a parent queue
if|if
condition|(
name|isLeaf
operator|&&
operator|!
literal|"parent"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
comment|// reservable queue has been already configured as parent
if|if
condition|(
operator|!
name|isReservable
condition|)
block|{
name|builder
operator|.
name|configuredQueues
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isReservable
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"The configuration settings"
operator|+
literal|" for "
operator|+
name|queueName
operator|+
literal|" are invalid. A queue element that "
operator|+
literal|"contains child queue elements or that has the type='parent' "
operator|+
literal|"attribute cannot also include a reservation element."
argument_list|)
throw|;
block|}
name|builder
operator|.
name|configuredQueues
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
comment|// Set default acls if not defined
comment|// The root queue defaults to all access
for|for
control|(
name|QueueACL
name|acl
range|:
name|QueueACL
operator|.
name|values
argument_list|()
control|)
block|{
name|AccessType
name|accessType
init|=
name|SchedulerUtils
operator|.
name|toAccessType
argument_list|(
name|acl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|builder
operator|.
name|isAclDefinedForAccessType
argument_list|(
name|queueName
argument_list|,
name|accessType
argument_list|)
condition|)
block|{
name|AccessControlList
name|defaultAcl
init|=
name|queueName
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|?
name|EVERYBODY_ACL
else|:
name|NOBODY_ACL
decl_stmt|;
name|builder
operator|.
name|queueAcls
argument_list|(
name|queueName
argument_list|,
name|accessType
argument_list|,
name|defaultAcl
argument_list|)
expr_stmt|;
block|}
block|}
name|checkMinAndMaxResource
argument_list|(
name|builder
operator|.
name|getMinQueueResources
argument_list|()
argument_list|,
name|builder
operator|.
name|getMaxQueueResources
argument_list|()
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
DECL|method|getTrimmedTextData (Element element)
specifier|private
name|String
name|getTrimmedTextData
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|checkMinAndMaxResource (Map<String, Resource> minResources, Map<String, ConfigurableResource> maxResources, String queueName)
specifier|private
name|void
name|checkMinAndMaxResource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|minResources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ConfigurableResource
argument_list|>
name|maxResources
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|ConfigurableResource
name|maxConfigurableResource
init|=
name|maxResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Resource
name|minResource
init|=
name|minResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxConfigurableResource
operator|!=
literal|null
operator|&&
name|minResource
operator|!=
literal|null
condition|)
block|{
name|Resource
name|maxResource
init|=
name|maxConfigurableResource
operator|.
name|getResource
argument_list|()
decl_stmt|;
comment|// check whether max resource is greater or equals to min resource when
comment|// max resource are absolute values
if|if
condition|(
name|maxResource
operator|!=
literal|null
operator|&&
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|minResource
argument_list|,
name|maxResource
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue %s has max resources %s less than "
operator|+
literal|"min resources %s"
argument_list|,
name|queueName
argument_list|,
name|maxResource
argument_list|,
name|minResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

