begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Calculate how much resources need to be preempted for each queue,  * will be used by {@link PreemptionCandidatesSelector}  */
end_comment

begin_class
DECL|class|PreemptableResourceCalculator
specifier|public
class|class
name|PreemptableResourceCalculator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PreemptableResourceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|CapacitySchedulerPreemptionContext
name|context
decl_stmt|;
DECL|field|rc
specifier|private
specifier|final
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|isReservedPreemptionCandidatesSelector
specifier|private
name|boolean
name|isReservedPreemptionCandidatesSelector
decl_stmt|;
DECL|class|TQComparator
specifier|static
class|class
name|TQComparator
implements|implements
name|Comparator
argument_list|<
name|TempQueuePerPartition
argument_list|>
block|{
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|field|clusterRes
specifier|private
name|Resource
name|clusterRes
decl_stmt|;
DECL|method|TQComparator (ResourceCalculator rc, Resource clusterRes)
name|TQComparator
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterRes
parameter_list|)
block|{
name|this
operator|.
name|rc
operator|=
name|rc
expr_stmt|;
name|this
operator|.
name|clusterRes
operator|=
name|clusterRes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (TempQueuePerPartition tq1, TempQueuePerPartition tq2)
specifier|public
name|int
name|compare
parameter_list|(
name|TempQueuePerPartition
name|tq1
parameter_list|,
name|TempQueuePerPartition
name|tq2
parameter_list|)
block|{
if|if
condition|(
name|getIdealPctOfGuaranteed
argument_list|(
name|tq1
argument_list|)
operator|<
name|getIdealPctOfGuaranteed
argument_list|(
name|tq2
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|getIdealPctOfGuaranteed
argument_list|(
name|tq1
argument_list|)
operator|>
name|getIdealPctOfGuaranteed
argument_list|(
name|tq2
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|// Calculates idealAssigned / guaranteed
comment|// TempQueues with 0 guarantees are always considered the most over
comment|// capacity and therefore considered last for resources.
DECL|method|getIdealPctOfGuaranteed (TempQueuePerPartition q)
specifier|private
name|double
name|getIdealPctOfGuaranteed
parameter_list|(
name|TempQueuePerPartition
name|q
parameter_list|)
block|{
name|double
name|pctOver
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterRes
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|pctOver
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterRes
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|pctOver
operator|)
return|;
block|}
block|}
comment|/**    * PreemptableResourceCalculator constructor    *    * @param preemptionContext    * @param isReservedPreemptionCandidatesSelector this will be set by    * different implementation of candidate selectors, please refer to    * TempQueuePerPartition#offer for details.    */
DECL|method|PreemptableResourceCalculator ( CapacitySchedulerPreemptionContext preemptionContext, boolean isReservedPreemptionCandidatesSelector)
specifier|public
name|PreemptableResourceCalculator
parameter_list|(
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|,
name|boolean
name|isReservedPreemptionCandidatesSelector
parameter_list|)
block|{
name|context
operator|=
name|preemptionContext
expr_stmt|;
name|rc
operator|=
name|preemptionContext
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
name|this
operator|.
name|isReservedPreemptionCandidatesSelector
operator|=
name|isReservedPreemptionCandidatesSelector
expr_stmt|;
block|}
comment|/**    * Computes a normalizedGuaranteed capacity based on active queues    * @param rc resource calculator    * @param clusterResource the total amount of resources in the cluster    * @param queues the list of queues to consider    */
DECL|method|resetCapacity (ResourceCalculator rc, Resource clusterResource, Collection<TempQueuePerPartition> queues, boolean ignoreGuar)
specifier|private
name|void
name|resetCapacity
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|queues
parameter_list|,
name|boolean
name|ignoreGuar
parameter_list|)
block|{
name|Resource
name|activeCap
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoreGuar
condition|)
block|{
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|q
operator|.
name|normalizedGuarantee
operator|=
literal|1.0f
operator|/
name|queues
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|activeCap
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|queues
control|)
block|{
name|q
operator|.
name|normalizedGuarantee
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|activeCap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Take the most underserved TempQueue (the one on the head). Collect and
comment|// return the list of all queues that have the same idealAssigned
comment|// percentage of guaranteed.
DECL|method|getMostUnderservedQueues ( PriorityQueue<TempQueuePerPartition> orderedByNeed, TQComparator tqComparator)
specifier|protected
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|getMostUnderservedQueues
parameter_list|(
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|orderedByNeed
parameter_list|,
name|TQComparator
name|tqComparator
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|underserved
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TempQueuePerPartition
name|q1
init|=
name|orderedByNeed
operator|.
name|remove
argument_list|()
decl_stmt|;
name|underserved
operator|.
name|add
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|TempQueuePerPartition
name|q2
init|=
name|orderedByNeed
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// q1's pct of guaranteed won't be larger than q2's. If it's less, then
comment|// return what has already been collected. Otherwise, q1's pct of
comment|// guaranteed == that of q2, so add q2 to underserved list during the
comment|// next pass.
if|if
condition|(
name|q2
operator|==
literal|null
operator|||
name|tqComparator
operator|.
name|compare
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|underserved
return|;
block|}
block|}
return|return
name|underserved
return|;
block|}
comment|/**    * Given a set of queues compute the fix-point distribution of unassigned    * resources among them. As pending request of a queue are exhausted, the    * queue is removed from the set and remaining capacity redistributed among    * remaining queues. The distribution is weighted based on guaranteed    * capacity, unless asked to ignoreGuarantee, in which case resources are    * distributed uniformly.    */
DECL|method|computeFixpointAllocation (ResourceCalculator rc, Resource tot_guarant, Collection<TempQueuePerPartition> qAlloc, Resource unassigned, boolean ignoreGuarantee)
specifier|private
name|void
name|computeFixpointAllocation
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|tot_guarant
parameter_list|,
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|qAlloc
parameter_list|,
name|Resource
name|unassigned
parameter_list|,
name|boolean
name|ignoreGuarantee
parameter_list|)
block|{
comment|// Prior to assigning the unused resources, process each queue as follows:
comment|// If current> guaranteed, idealAssigned = guaranteed + untouchable extra
comment|// Else idealAssigned = current;
comment|// Subtract idealAssigned resources from unassigned.
comment|// If the queue has all of its needs met (that is, if
comment|// idealAssigned>= current + pending), remove it from consideration.
comment|// Sort queues from most under-guaranteed to most over-guaranteed.
name|TQComparator
name|tqComparator
init|=
operator|new
name|TQComparator
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|)
decl_stmt|;
name|PriorityQueue
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|orderedByNeed
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
literal|10
argument_list|,
name|tqComparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|i
init|=
name|qAlloc
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TempQueuePerPartition
name|q
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|used
init|=
name|q
operator|.
name|getUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|used
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|q
operator|.
name|untouchableExtra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|.
name|idealAssigned
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|used
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unassigned
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
comment|// If idealAssigned< (allocated + used + pending), q needs more resources, so
comment|// add it to the list of underserved queues, ordered by need.
name|Resource
name|curPlusPend
init|=
name|Resources
operator|.
name|add
argument_list|(
name|q
operator|.
name|getUsed
argument_list|()
argument_list|,
name|q
operator|.
name|pending
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|q
operator|.
name|idealAssigned
argument_list|,
name|curPlusPend
argument_list|)
condition|)
block|{
name|orderedByNeed
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|//assign all cluster resources until no more demand, or no resources are left
while|while
condition|(
operator|!
name|orderedByNeed
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|unassigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|wQassigned
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// we compute normalizedGuarantees capacity based on currently active
comment|// queues
name|resetCapacity
argument_list|(
name|rc
argument_list|,
name|unassigned
argument_list|,
name|orderedByNeed
argument_list|,
name|ignoreGuarantee
argument_list|)
expr_stmt|;
comment|// For each underserved queue (or set of queues if multiple are equally
comment|// underserved), offer its share of the unassigned resources based on its
comment|// normalized guarantee. After the offer, if the queue is not satisfied,
comment|// place it back in the ordered list of queues, recalculating its place
comment|// in the order of most under-guaranteed to most over-guaranteed. In this
comment|// way, the most underserved queue(s) are always given resources first.
name|Collection
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|underserved
init|=
name|getMostUnderservedQueues
argument_list|(
name|orderedByNeed
argument_list|,
name|tqComparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|i
init|=
name|underserved
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TempQueuePerPartition
name|sub
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|wQavail
init|=
name|Resources
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|rc
argument_list|,
name|unassigned
argument_list|,
name|sub
operator|.
name|normalizedGuarantee
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|wQidle
init|=
name|sub
operator|.
name|offer
argument_list|(
name|wQavail
argument_list|,
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|isReservedPreemptionCandidatesSelector
argument_list|)
decl_stmt|;
name|Resource
name|wQdone
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|wQavail
argument_list|,
name|wQidle
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|wQdone
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// The queue is still asking for more. Put it back in the priority
comment|// queue, recalculating its order based on need.
name|orderedByNeed
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|wQassigned
argument_list|,
name|wQdone
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|unassigned
argument_list|,
name|wQassigned
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method computes (for a single level in the tree, passed as a {@code    * List<TempQueue>}) the ideal assignment of resources. This is done    * recursively to allocate capacity fairly across all queues with pending    * demands. It terminates when no resources are left to assign, or when all    * demand is satisfied.    *    * @param rc resource calculator    * @param queues a list of cloned queues to be assigned capacity to (this is    * an out param)    * @param totalPreemptionAllowed total amount of preemption we allow    * @param tot_guarant the amount of capacity assigned to this pool of queues    */
DECL|method|computeIdealResourceDistribution (ResourceCalculator rc, List<TempQueuePerPartition> queues, Resource totalPreemptionAllowed, Resource tot_guarant)
specifier|private
name|void
name|computeIdealResourceDistribution
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|List
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|queues
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|,
name|Resource
name|tot_guarant
parameter_list|)
block|{
comment|// qAlloc tracks currently active queues (will decrease progressively as
comment|// demand is met)
name|List
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|qAlloc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|queues
argument_list|)
decl_stmt|;
comment|// unassigned tracks how much resources are still to assign, initialized
comment|// with the total capacity for this set of queues
name|Resource
name|unassigned
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|tot_guarant
argument_list|)
decl_stmt|;
comment|// group queues based on whether they have non-zero guaranteed capacity
name|Set
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|nonZeroGuarQueues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TempQueuePerPartition
argument_list|>
name|zeroGuarQueues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|q
range|:
name|qAlloc
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|q
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|nonZeroGuarQueues
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zeroGuarQueues
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// first compute the allocation as a fixpoint based on guaranteed capacity
name|computeFixpointAllocation
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|nonZeroGuarQueues
argument_list|,
name|unassigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if any capacity is left unassigned, distributed among zero-guarantee
comment|// queues uniformly (i.e., not based on guaranteed capacity, as this is zero)
if|if
condition|(
operator|!
name|zeroGuarQueues
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|unassigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|computeFixpointAllocation
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|zeroGuarQueues
argument_list|,
name|unassigned
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// based on ideal assignment computed above and current assignment we derive
comment|// how much preemption is required overall
name|Resource
name|totPreemptionNeeded
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|queues
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|t
operator|.
name|getUsed
argument_list|()
argument_list|,
name|t
operator|.
name|idealAssigned
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|totPreemptionNeeded
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|t
operator|.
name|getUsed
argument_list|()
argument_list|,
name|t
operator|.
name|idealAssigned
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * if we need to preempt more than is allowed, compute a factor (0<f<1)      * that is used to scale down how much we ask back from each queue      */
name|float
name|scalingFactor
init|=
literal|1.0F
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|totPreemptionNeeded
argument_list|,
name|totalPreemptionAllowed
argument_list|)
condition|)
block|{
name|scalingFactor
operator|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot_guarant
argument_list|,
name|totalPreemptionAllowed
argument_list|,
name|totPreemptionNeeded
argument_list|)
expr_stmt|;
block|}
comment|// assign to each queue the amount of actual preemption based on local
comment|// information of ideal preemption and scaling factor
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|queues
control|)
block|{
name|t
operator|.
name|assignPreemption
argument_list|(
name|scalingFactor
argument_list|,
name|rc
argument_list|,
name|tot_guarant
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method recursively computes the ideal assignment of resources to each    * level of the hierarchy. This ensures that leafs that are over-capacity but    * with parents within capacity will not be preemptionCandidates. Preemptions are allowed    * within each subtree according to local over/under capacity.    *    * @param root the root of the cloned queue hierachy    * @param totalPreemptionAllowed maximum amount of preemption allowed    * @return a list of leaf queues updated with preemption targets    */
DECL|method|recursivelyComputeIdealAssignment ( TempQueuePerPartition root, Resource totalPreemptionAllowed)
specifier|private
name|void
name|recursivelyComputeIdealAssignment
parameter_list|(
name|TempQueuePerPartition
name|root
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
operator|&&
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// compute ideal distribution at this level
name|computeIdealResourceDistribution
argument_list|(
name|rc
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|,
name|totalPreemptionAllowed
argument_list|,
name|root
operator|.
name|idealAssigned
argument_list|)
expr_stmt|;
comment|// compute recursively for lower levels and build list of leafs
for|for
control|(
name|TempQueuePerPartition
name|t
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|recursivelyComputeIdealAssignment
argument_list|(
name|t
argument_list|,
name|totalPreemptionAllowed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|calculateResToObtainByPartitionForLeafQueues ( Set<String> leafQueueNames, Resource clusterResource)
specifier|private
name|void
name|calculateResToObtainByPartitionForLeafQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|leafQueueNames
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
comment|// Loop all leaf queues
for|for
control|(
name|String
name|queueName
range|:
name|leafQueueNames
control|)
block|{
comment|// check if preemption disabled for the queue
if|if
condition|(
name|context
operator|.
name|getQueueByPartition
argument_list|(
name|queueName
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|.
name|preemptionDisabled
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"skipping from queue="
operator|+
name|queueName
operator|+
literal|" because it's a non-preemptable queue"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// compute resToObtainByPartition considered inter-queue preemption
for|for
control|(
name|TempQueuePerPartition
name|qT
range|:
name|context
operator|.
name|getQueuePartitions
argument_list|(
name|queueName
argument_list|)
control|)
block|{
comment|// we act only if we are violating balance by more than
comment|// maxIgnoredOverCapacity
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|qT
operator|.
name|getUsed
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|qT
operator|.
name|getGuaranteed
argument_list|()
argument_list|,
literal|1.0
operator|+
name|context
operator|.
name|getMaxIgnoreOverCapacity
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|/*            * We introduce a dampening factor naturalTerminationFactor that            * accounts for natural termination of containers.            *            * This is added to control pace of preemption, let's say:            * If preemption policy calculated a queue *should be* preempted 20 GB            * And the nature_termination_factor set to 0.1. As a result, preemption            * policy will select 20 GB * 0.1 = 2GB containers to be preempted.            *            * However, it doesn't work for YARN-4390:            * For example, if a queue needs to be preempted 20GB for *one single*            * large container, preempt 10% of such resource isn't useful.            * So to make it simple, only apply nature_termination_factor when            * selector is not reservedPreemptionCandidatesSelector.            */
name|Resource
name|resToObtain
init|=
name|qT
operator|.
name|toBePreempted
decl_stmt|;
if|if
condition|(
operator|!
name|isReservedPreemptionCandidatesSelector
condition|)
block|{
name|resToObtain
operator|=
name|Resources
operator|.
name|multiply
argument_list|(
name|qT
operator|.
name|toBePreempted
argument_list|,
name|context
operator|.
name|getNaturalTerminationFactor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Only add resToObtain when it>= 0
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|resToObtain
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queue="
operator|+
name|queueName
operator|+
literal|" partition="
operator|+
name|qT
operator|.
name|partition
operator|+
literal|" resource-to-obtain="
operator|+
name|resToObtain
argument_list|)
expr_stmt|;
block|}
block|}
name|qT
operator|.
name|setActuallyToBePreempted
argument_list|(
name|Resources
operator|.
name|clone
argument_list|(
name|resToObtain
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qT
operator|.
name|setActuallyToBePreempted
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|qT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|updatePreemptableExtras (TempQueuePerPartition cur)
specifier|private
name|void
name|updatePreemptableExtras
parameter_list|(
name|TempQueuePerPartition
name|cur
parameter_list|)
block|{
if|if
condition|(
name|cur
operator|.
name|children
operator|==
literal|null
operator|||
name|cur
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cur
operator|.
name|updatePreemptableExtras
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|TempQueuePerPartition
name|child
range|:
name|cur
operator|.
name|children
control|)
block|{
name|updatePreemptableExtras
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|cur
operator|.
name|updatePreemptableExtras
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|computeIdealAllocation (Resource clusterResource, Resource totalPreemptionAllowed)
specifier|public
name|void
name|computeIdealAllocation
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|totalPreemptionAllowed
parameter_list|)
block|{
for|for
control|(
name|String
name|partition
range|:
name|context
operator|.
name|getAllPartitions
argument_list|()
control|)
block|{
name|TempQueuePerPartition
name|tRoot
init|=
name|context
operator|.
name|getQueueByPartition
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|updatePreemptableExtras
argument_list|(
name|tRoot
argument_list|)
expr_stmt|;
comment|// compute the ideal distribution of resources among queues
comment|// updates cloned queues state accordingly
name|tRoot
operator|.
name|idealAssigned
operator|=
name|tRoot
operator|.
name|getGuaranteed
argument_list|()
expr_stmt|;
name|recursivelyComputeIdealAssignment
argument_list|(
name|tRoot
argument_list|,
name|totalPreemptionAllowed
argument_list|)
expr_stmt|;
block|}
comment|// based on ideal allocation select containers to be preempted from each
comment|// calculate resource-to-obtain by partition for each leaf queues
name|calculateResToObtainByPartitionForLeafQueues
argument_list|(
name|context
operator|.
name|getLeafQueueNames
argument_list|()
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

