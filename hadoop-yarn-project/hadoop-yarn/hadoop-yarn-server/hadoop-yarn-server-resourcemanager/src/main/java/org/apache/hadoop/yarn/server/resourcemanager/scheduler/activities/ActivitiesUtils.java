begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWSConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivityNodeInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Utilities for activities.  */
end_comment

begin_class
DECL|class|ActivitiesUtils
specifier|public
specifier|final
class|class
name|ActivitiesUtils
block|{
DECL|method|ActivitiesUtils ()
specifier|private
name|ActivitiesUtils
parameter_list|()
block|{}
DECL|method|getRequestActivityNodeInfos ( List<ActivityNode> activityNodes, RMWSConsts.ActivitiesGroupBy groupBy)
specifier|public
specifier|static
name|List
argument_list|<
name|ActivityNodeInfo
argument_list|>
name|getRequestActivityNodeInfos
parameter_list|(
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|activityNodes
parameter_list|,
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
name|groupBy
parameter_list|)
block|{
if|if
condition|(
name|activityNodes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|groupBy
operator|==
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
operator|.
name|DIAGNOSTIC
condition|)
block|{
name|Map
argument_list|<
name|ActivityState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|groupingResults
init|=
name|activityNodes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getNodeId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|ActivityNode
operator|::
name|getState
argument_list|,
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|ActivityNode
operator|::
name|getShortDiagnostic
argument_list|,
name|Collectors
operator|.
name|mapping
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getNodeId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
condition|,
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|groupingResults
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|stateMap
lambda|->
name|stateMap
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|diagMap
lambda|->
operator|new
name|ActivityNodeInfo
argument_list|(
name|stateMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|diagMap
operator|.
name|getKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|diagMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|diagMap
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|activityNodes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getNodeId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
operator|new
name|ActivityNodeInfo
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getState
argument_list|()
argument_list|,
name|e
operator|.
name|getDiagnostic
argument_list|()
argument_list|,
name|e
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

