begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRejectedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Service to renew application delegation tokens.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|DelegationTokenRenewer
specifier|public
class|class
name|DelegationTokenRenewer
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelegationTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"hdfs"
decl_stmt|;
comment|// global single timer (daemon)
DECL|field|renewalTimer
specifier|private
name|Timer
name|renewalTimer
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
comment|// delegation token canceler thread
DECL|field|dtCancelThread
specifier|private
name|DelegationTokenCancelThread
name|dtCancelThread
init|=
operator|new
name|DelegationTokenCancelThread
argument_list|()
decl_stmt|;
DECL|field|renewerService
specifier|private
name|ThreadPoolExecutor
name|renewerService
decl_stmt|;
DECL|field|appTokens
specifier|private
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
argument_list|>
name|appTokens
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|delayedRemovalMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|delayedRemovalMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|tokenRemovalDelayMs
specifier|private
name|long
name|tokenRemovalDelayMs
decl_stmt|;
DECL|field|delayedRemovalThread
specifier|private
name|Thread
name|delayedRemovalThread
decl_stmt|;
DECL|field|serviceStateLock
specifier|private
name|ReadWriteLock
name|serviceStateLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|isServiceStarted
specifier|private
specifier|volatile
name|boolean
name|isServiceStarted
decl_stmt|;
DECL|field|pendingEventQueue
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|DelegationTokenRenewerEvent
argument_list|>
name|pendingEventQueue
decl_stmt|;
DECL|field|tokenKeepAliveEnabled
specifier|private
name|boolean
name|tokenKeepAliveEnabled
decl_stmt|;
DECL|field|hasProxyUserPrivileges
specifier|private
name|boolean
name|hasProxyUserPrivileges
decl_stmt|;
DECL|field|credentialsValidTimeRemaining
specifier|private
name|long
name|credentialsValidTimeRemaining
decl_stmt|;
comment|// this config is supposedly not used by end-users.
DECL|field|RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING
specifier|public
specifier|static
specifier|final
name|String
name|RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING
init|=
name|YarnConfiguration
operator|.
name|RM_PREFIX
operator|+
literal|"system-credentials.valid-time-remaining"
decl_stmt|;
DECL|field|DEFAULT_RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING
init|=
literal|10800000
decl_stmt|;
comment|// 3h
DECL|method|DelegationTokenRenewer ()
specifier|public
name|DelegationTokenRenewer
parameter_list|()
block|{
name|super
argument_list|(
name|DelegationTokenRenewer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|hasProxyUserPrivileges
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PRIVILEGES_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PROXY_USER_PRIVILEGES_ENABLED
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenKeepAliveEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenRemovalDelayMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|credentialsValidTimeRemaining
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING
argument_list|,
name|DEFAULT_RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING
argument_list|)
expr_stmt|;
name|setLocalSecretManagerAndServiceAddr
argument_list|()
expr_stmt|;
name|renewerService
operator|=
name|createNewThreadPoolService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|pendingEventQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|DelegationTokenRenewerEvent
argument_list|>
argument_list|()
expr_stmt|;
name|renewalTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewThreadPoolService (Configuration conf)
specifier|protected
name|ThreadPoolExecutor
name|createNewThreadPoolService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|nThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELEGATION_TOKEN_RENEWER_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_DELEGATION_TOKEN_RENEWER_THREAD_COUNT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|tf
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"DelegationTokenRenewer #%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|nThreads
argument_list|,
name|nThreads
argument_list|,
literal|3L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|pool
operator|.
name|setThreadFactory
argument_list|(
name|tf
argument_list|)
expr_stmt|;
name|pool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
comment|// enable RM to short-circuit token operations directly to itself
DECL|method|setLocalSecretManagerAndServiceAddr ()
specifier|private
name|void
name|setLocalSecretManagerAndServiceAddr
parameter_list|()
block|{
name|RMDelegationTokenIdentifier
operator|.
name|Renewer
operator|.
name|setSecretManager
argument_list|(
name|rmContext
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|,
name|rmContext
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|dtCancelThread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|tokenKeepAliveEnabled
condition|)
block|{
name|delayedRemovalThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|DelayedTokenRemovalRunnable
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|,
literal|"DelayedTokenCanceller"
argument_list|)
expr_stmt|;
name|delayedRemovalThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|setLocalSecretManagerAndServiceAddr
argument_list|()
expr_stmt|;
name|serviceStateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isServiceStarted
operator|=
literal|true
expr_stmt|;
name|serviceStateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|pendingEventQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|processDelegationTokenRenewerEvent
argument_list|(
name|pendingEventQueue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
DECL|method|processDelegationTokenRenewerEvent ( DelegationTokenRenewerEvent evt)
specifier|private
name|void
name|processDelegationTokenRenewerEvent
parameter_list|(
name|DelegationTokenRenewerEvent
name|evt
parameter_list|)
block|{
name|serviceStateLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|isServiceStarted
condition|)
block|{
name|renewerService
operator|.
name|execute
argument_list|(
operator|new
name|DelegationTokenRenewerRunnable
argument_list|(
name|evt
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pendingEventQueue
operator|.
name|add
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceStateLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
if|if
condition|(
name|renewalTimer
operator|!=
literal|null
condition|)
block|{
name|renewalTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|appTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|renewerService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dtCancelThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|dtCancelThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tokenKeepAliveEnabled
operator|&&
name|delayedRemovalThread
operator|!=
literal|null
condition|)
block|{
name|delayedRemovalThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|delayedRemovalThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while joining on delayed removal thread."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * class that is used for keeping tracks of DT to renew    *    */
annotation|@
name|VisibleForTesting
DECL|class|DelegationTokenToRenew
specifier|protected
specifier|static
class|class
name|DelegationTokenToRenew
block|{
DECL|field|token
specifier|public
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
decl_stmt|;
DECL|field|applicationId
specifier|public
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|conf
specifier|public
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|expirationDate
specifier|public
name|long
name|expirationDate
decl_stmt|;
DECL|field|timerTask
specifier|public
name|TimerTask
name|timerTask
decl_stmt|;
DECL|field|shouldCancelAtEnd
specifier|public
specifier|final
name|boolean
name|shouldCancelAtEnd
decl_stmt|;
DECL|field|maxDate
specifier|public
name|long
name|maxDate
decl_stmt|;
DECL|field|user
specifier|public
name|String
name|user
decl_stmt|;
DECL|method|DelegationTokenToRenew (ApplicationId jId, Token<?> token, Configuration conf, long expirationDate, boolean shouldCancelAtEnd, String user)
specifier|public
name|DelegationTokenToRenew
parameter_list|(
name|ApplicationId
name|jId
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|expirationDate
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"HDFS_DELEGATION_TOKEN"
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|AbstractDelegationTokenIdentifier
name|identifier
init|=
operator|(
name|AbstractDelegationTokenIdentifier
operator|)
name|token
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|maxDate
operator|=
name|identifier
operator|.
name|getMaxDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|applicationId
operator|=
name|jId
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|expirationDate
operator|=
name|expirationDate
expr_stmt|;
name|this
operator|.
name|timerTask
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|shouldCancelAtEnd
operator|=
name|shouldCancelAtEnd
expr_stmt|;
block|}
DECL|method|setTimerTask (TimerTask tTask)
specifier|public
name|void
name|setTimerTask
parameter_list|(
name|TimerTask
name|tTask
parameter_list|)
block|{
name|timerTask
operator|=
name|tTask
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|token
operator|+
literal|";exp="
operator|+
name|expirationDate
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|DelegationTokenToRenew
operator|&&
name|token
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DelegationTokenToRenew
operator|)
name|obj
operator|)
operator|.
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|token
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|DelegationTokenCancelThread
specifier|private
specifier|static
class|class
name|DelegationTokenCancelThread
extends|extends
name|Thread
block|{
DECL|class|TokenWithConf
specifier|private
specifier|static
class|class
name|TokenWithConf
block|{
DECL|field|token
name|Token
argument_list|<
name|?
argument_list|>
name|token
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|TokenWithConf (Token<?> token, Configuration conf)
name|TokenWithConf
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
DECL|field|queue
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|TokenWithConf
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|TokenWithConf
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DelegationTokenCancelThread ()
specifier|public
name|DelegationTokenCancelThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"Delegation Token Canceler"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|cancelToken (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancelToken
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|TokenWithConf
name|tokenWithConf
init|=
operator|new
name|TokenWithConf
argument_list|(
name|token
argument_list|,
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|offer
argument_list|(
name|tokenWithConf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to add token "
operator|+
name|token
operator|+
literal|" for cancellation. "
operator|+
literal|"Will retry.."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TokenWithConf
name|tokenWithConf
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|tokenWithConf
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
specifier|final
name|TokenWithConf
name|current
init|=
name|tokenWithConf
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelling token "
operator|+
name|tokenWithConf
operator|.
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// need to use doAs so that http can find the kerberos tgt
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|current
operator|.
name|token
operator|.
name|cancel
argument_list|(
name|current
operator|.
name|conf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel token "
operator|+
name|tokenWithConf
operator|.
name|token
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel token "
operator|+
name|tokenWithConf
operator|.
name|token
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
operator|+
literal|". Exiting.."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDelegationTokens ()
specifier|public
name|Set
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDelegationTokens
parameter_list|()
block|{
name|Set
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|tokenList
range|:
name|appTokens
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|DelegationTokenToRenew
name|token
range|:
name|tokenList
control|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|token
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tokens
return|;
block|}
comment|/**    * Asynchronously add application tokens for renewal.    * @param applicationId added application    * @param ts tokens    * @param shouldCancelAtEnd true if tokens should be canceled when the app is    * done else false.     * @param user user    * @throws IOException    */
DECL|method|addApplicationAsync (ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd, String user)
specifier|public
name|void
name|addApplicationAsync
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|processDelegationTokenRenewerEvent
argument_list|(
operator|new
name|DelegationTokenRenewerAppSubmitEvent
argument_list|(
name|applicationId
argument_list|,
name|ts
argument_list|,
name|shouldCancelAtEnd
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Synchronously renew delegation tokens.    * @param user user    */
DECL|method|addApplicationSync (ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd, String user)
specifier|public
name|void
name|addApplicationSync
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|handleAppSubmitEvent
argument_list|(
operator|new
name|DelegationTokenRenewerAppSubmitEvent
argument_list|(
name|applicationId
argument_list|,
name|ts
argument_list|,
name|shouldCancelAtEnd
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|handleAppSubmitEvent (DelegationTokenRenewerAppSubmitEvent evt)
specifier|private
name|void
name|handleAppSubmitEvent
parameter_list|(
name|DelegationTokenRenewerAppSubmitEvent
name|evt
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ApplicationId
name|applicationId
init|=
name|evt
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Credentials
name|ts
init|=
name|evt
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|boolean
name|shouldCancelAtEnd
init|=
name|evt
operator|.
name|shouldCancelAtEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
return|return;
comment|// nothing to add
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering tokens for renewal for:"
operator|+
literal|" appId = "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
name|ts
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// find tokens for renewal, but don't add timers until we know
comment|// all renewable tokens are valid
comment|// At RM restart it is safe to assume that all the previously added tokens
comment|// are valid
name|appTokens
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DelegationTokenToRenew
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|tokenList
init|=
operator|new
name|HashSet
argument_list|<
name|DelegationTokenToRenew
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasHdfsToken
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|isManaged
argument_list|()
condition|)
block|{
name|tokenList
operator|.
name|add
argument_list|(
operator|new
name|DelegationTokenToRenew
argument_list|(
name|applicationId
argument_list|,
name|token
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|now
argument_list|,
name|shouldCancelAtEnd
argument_list|,
name|evt
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"HDFS_DELEGATION_TOKEN"
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|applicationId
operator|+
literal|" found existing hdfs token "
operator|+
name|token
argument_list|)
expr_stmt|;
name|hasHdfsToken
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|tokenList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Renewing token and adding it to timer calls are separated purposefully
comment|// If user provides incorrect token then it should not be added for
comment|// renewal.
for|for
control|(
name|DelegationTokenToRenew
name|dtr
range|:
name|tokenList
control|)
block|{
try|try
block|{
name|renewToken
argument_list|(
name|dtr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to renew token: "
operator|+
name|dtr
operator|.
name|token
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|DelegationTokenToRenew
name|dtr
range|:
name|tokenList
control|)
block|{
name|appTokens
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|add
argument_list|(
name|dtr
argument_list|)
expr_stmt|;
name|setTimerForTokenRenewal
argument_list|(
name|dtr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasHdfsToken
condition|)
block|{
name|requestNewHdfsDelegationToken
argument_list|(
name|applicationId
argument_list|,
name|evt
operator|.
name|getUser
argument_list|()
argument_list|,
name|shouldCancelAtEnd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Task - to renew a token    *    */
DECL|class|RenewalTimerTask
specifier|private
class|class
name|RenewalTimerTask
extends|extends
name|TimerTask
block|{
DECL|field|dttr
specifier|private
name|DelegationTokenToRenew
name|dttr
decl_stmt|;
DECL|field|cancelled
specifier|private
name|AtomicBoolean
name|cancelled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|RenewalTimerTask (DelegationTokenToRenew t)
name|RenewalTimerTask
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
name|dttr
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cancelled
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|dttr
operator|.
name|token
decl_stmt|;
try|try
block|{
name|requestNewHdfsDelegationTokenIfNeeded
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
comment|// if the token is not replaced by a new token, renew the token
if|if
condition|(
name|appTokens
operator|.
name|get
argument_list|(
name|dttr
operator|.
name|applicationId
argument_list|)
operator|.
name|contains
argument_list|(
name|dttr
argument_list|)
condition|)
block|{
name|renewToken
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
name|setTimerForTokenRenewal
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
comment|// set the next one
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The token was removed already. Token = ["
operator|+
name|dttr
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception renewing token"
operator|+
name|token
operator|+
literal|". Not rescheduled"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|removeFailedDelegationToken
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel ()
specifier|public
name|boolean
name|cancel
parameter_list|()
block|{
name|cancelled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|cancel
argument_list|()
return|;
block|}
block|}
comment|/**    * set task to renew the token    */
annotation|@
name|VisibleForTesting
DECL|method|setTimerForTokenRenewal (DelegationTokenToRenew token)
specifier|protected
name|void
name|setTimerForTokenRenewal
parameter_list|(
name|DelegationTokenToRenew
name|token
parameter_list|)
throws|throws
name|IOException
block|{
comment|// calculate timer time
name|long
name|expiresIn
init|=
name|token
operator|.
name|expirationDate
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|renewIn
init|=
name|token
operator|.
name|expirationDate
operator|-
name|expiresIn
operator|/
literal|10
decl_stmt|;
comment|// little bit before the expiration
comment|// need to create new task every time
name|TimerTask
name|tTask
init|=
operator|new
name|RenewalTimerTask
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|token
operator|.
name|setTimerTask
argument_list|(
name|tTask
argument_list|)
expr_stmt|;
comment|// keep reference to the timer
name|renewalTimer
operator|.
name|schedule
argument_list|(
name|token
operator|.
name|timerTask
argument_list|,
operator|new
name|Date
argument_list|(
name|renewIn
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew "
operator|+
name|token
operator|+
literal|" in "
operator|+
name|expiresIn
operator|+
literal|" ms, appId = "
operator|+
name|token
operator|.
name|applicationId
argument_list|)
expr_stmt|;
block|}
comment|// renew a token
annotation|@
name|VisibleForTesting
DECL|method|renewToken (final DelegationTokenToRenew dttr)
specifier|protected
name|void
name|renewToken
parameter_list|(
specifier|final
name|DelegationTokenToRenew
name|dttr
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to use doAs so that http can find the kerberos tgt
comment|// NOTE: token renewers should be responsible for the correct UGI!
try|try
block|{
name|dttr
operator|.
name|expirationDate
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dttr
operator|.
name|token
operator|.
name|renew
argument_list|(
name|dttr
operator|.
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed delegation-token= ["
operator|+
name|dttr
operator|+
literal|"], for "
operator|+
name|dttr
operator|.
name|applicationId
argument_list|)
expr_stmt|;
block|}
comment|// Request new hdfs token if the token is about to expire, and remove the old
comment|// token from the tokenToRenew list
DECL|method|requestNewHdfsDelegationTokenIfNeeded ( final DelegationTokenToRenew dttr)
specifier|private
name|void
name|requestNewHdfsDelegationTokenIfNeeded
parameter_list|(
specifier|final
name|DelegationTokenToRenew
name|dttr
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|hasProxyUserPrivileges
operator|&&
name|dttr
operator|.
name|maxDate
operator|-
name|dttr
operator|.
name|expirationDate
operator|<
name|credentialsValidTimeRemaining
operator|&&
name|dttr
operator|.
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"HDFS_DELEGATION_TOKEN"
argument_list|)
argument_list|)
condition|)
block|{
comment|// remove all old expiring hdfs tokens for this application.
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|tokenSet
init|=
name|appTokens
operator|.
name|get
argument_list|(
name|dttr
operator|.
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenSet
operator|!=
literal|null
operator|&&
operator|!
name|tokenSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|iter
init|=
name|tokenSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|tokenSet
init|)
block|{
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DelegationTokenToRenew
name|t
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"HDFS_DELEGATION_TOKEN"
argument_list|)
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|timerTask
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|timerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed expiring token "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Token= ("
operator|+
name|dttr
operator|+
literal|") is expiring, request new token."
argument_list|)
expr_stmt|;
name|requestNewHdfsDelegationToken
argument_list|(
name|dttr
operator|.
name|applicationId
argument_list|,
name|dttr
operator|.
name|user
argument_list|,
name|dttr
operator|.
name|shouldCancelAtEnd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|requestNewHdfsDelegationToken (ApplicationId applicationId, String user, boolean shouldCancelAtEnd)
specifier|private
name|void
name|requestNewHdfsDelegationToken
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Get new hdfs tokens for this user
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|newTokens
init|=
name|obtainSystemTokensForUser
argument_list|(
name|user
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
comment|// Add new tokens to the toRenew list.
name|LOG
operator|.
name|info
argument_list|(
literal|"Received new tokens for "
operator|+
name|applicationId
operator|+
literal|". Received "
operator|+
name|newTokens
operator|.
name|length
operator|+
literal|" tokens."
argument_list|)
expr_stmt|;
if|if
condition|(
name|newTokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|newTokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|isManaged
argument_list|()
condition|)
block|{
name|DelegationTokenToRenew
name|tokenToRenew
init|=
operator|new
name|DelegationTokenToRenew
argument_list|(
name|applicationId
argument_list|,
name|token
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|shouldCancelAtEnd
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// renew the token to get the next expiration date.
name|renewToken
argument_list|(
name|tokenToRenew
argument_list|)
expr_stmt|;
name|setTimerForTokenRenewal
argument_list|(
name|tokenToRenew
argument_list|)
expr_stmt|;
name|appTokens
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|add
argument_list|(
name|tokenToRenew
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received new token "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
DECL|method|obtainSystemTokensForUser (String user, final Credentials credentials)
specifier|protected
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|obtainSystemTokensForUser
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Get new hdfs tokens on behalf of this user
name|UserGroupInformation
name|proxyUser
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|user
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|newTokens
init|=
name|proxyUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|getConfig
argument_list|()
argument_list|)
operator|.
name|addDelegationTokens
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|credentials
argument_list|)
return|;
block|}
block|}
block|)
function|;
return|return
name|newTokens
return|;
block|}
end_class

begin_comment
comment|// cancel a token
end_comment

begin_function
DECL|method|cancelToken (DelegationTokenToRenew t)
specifier|private
name|void
name|cancelToken
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|shouldCancelAtEnd
condition|)
block|{
name|dtCancelThread
operator|.
name|cancelToken
argument_list|(
name|t
operator|.
name|token
argument_list|,
name|t
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Did not cancel "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * removing failed DT    * @param applicationId    */
end_comment

begin_function
DECL|method|removeFailedDelegationToken (DelegationTokenToRenew t)
specifier|private
name|void
name|removeFailedDelegationToken
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|t
operator|.
name|applicationId
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"removing failed delegation token for appid="
operator|+
name|applicationId
operator|+
literal|";t="
operator|+
name|t
operator|.
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|appTokens
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// cancel the timer
if|if
condition|(
name|t
operator|.
name|timerTask
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|timerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Removing delegation token for completed applications.    * @param applicationId completed application    */
end_comment

begin_function
DECL|method|applicationFinished (ApplicationId applicationId)
specifier|public
name|void
name|applicationFinished
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|processDelegationTokenRenewerEvent
argument_list|(
operator|new
name|DelegationTokenRenewerEvent
argument_list|(
name|applicationId
argument_list|,
name|DelegationTokenRenewerEventType
operator|.
name|FINISH_APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|handleAppFinishEvent (DelegationTokenRenewerEvent evt)
specifier|private
name|void
name|handleAppFinishEvent
parameter_list|(
name|DelegationTokenRenewerEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tokenKeepAliveEnabled
condition|)
block|{
name|removeApplicationFromRenewal
argument_list|(
name|evt
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delayedRemovalMap
operator|.
name|put
argument_list|(
name|evt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|tokenRemovalDelayMs
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Add a list of applications to the keep alive list. If an appId already    * exists, update it's keep-alive time.    *     * @param appIds    *          the list of applicationIds to be kept alive.    *     */
end_comment

begin_function
DECL|method|updateKeepAliveApplications (List<ApplicationId> appIds)
specifier|public
name|void
name|updateKeepAliveApplications
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
block|{
if|if
condition|(
name|tokenKeepAliveEnabled
operator|&&
name|appIds
operator|!=
literal|null
operator|&&
name|appIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|appIds
control|)
block|{
name|delayedRemovalMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|tokenRemovalDelayMs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|removeApplicationFromRenewal (ApplicationId applicationId)
specifier|private
name|void
name|removeApplicationFromRenewal
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|rmContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|tokens
init|=
name|appTokens
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|tokens
init|)
block|{
name|Iterator
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|it
init|=
name|tokens
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DelegationTokenToRenew
name|dttr
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing delegation token for appId="
operator|+
name|applicationId
operator|+
literal|"; token="
operator|+
name|dttr
operator|.
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cancel the timer
if|if
condition|(
name|dttr
operator|.
name|timerTask
operator|!=
literal|null
condition|)
name|dttr
operator|.
name|timerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
comment|// cancel the token
name|cancelToken
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Takes care of cancelling app delegation tokens after the configured    * cancellation delay, taking into consideration keep-alive requests.    *     */
end_comment

begin_class
DECL|class|DelayedTokenRemovalRunnable
specifier|private
class|class
name|DelayedTokenRemovalRunnable
implements|implements
name|Runnable
block|{
DECL|field|waitTimeMs
specifier|private
name|long
name|waitTimeMs
decl_stmt|;
DECL|method|DelayedTokenRemovalRunnable (Configuration conf)
name|DelayedTokenRemovalRunnable
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|waitTimeMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|toCancel
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|>
name|it
init|=
name|delayedRemovalMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|toCancel
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|toCancel
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ApplicationId
name|appId
range|:
name|toCancel
control|)
block|{
name|removeApplicationFromRenewal
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|delayedRemovalMap
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
name|waitTimeMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delayed Deletion Thread Interrupted. Shutting it down"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

begin_function
DECL|method|setRMContext (RMContext rmContext)
specifier|public
name|void
name|setRMContext
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    * This will run as a separate thread and will process individual events. It    * is done in this way to make sure that the token renewal as a part of    * application submission and token removal as a part of application finish    * is asynchronous in nature.    */
end_comment

begin_class
DECL|class|DelegationTokenRenewerRunnable
specifier|private
specifier|final
class|class
name|DelegationTokenRenewerRunnable
implements|implements
name|Runnable
block|{
DECL|field|evt
specifier|private
name|DelegationTokenRenewerEvent
name|evt
decl_stmt|;
DECL|method|DelegationTokenRenewerRunnable (DelegationTokenRenewerEvent evt)
specifier|public
name|DelegationTokenRenewerRunnable
parameter_list|(
name|DelegationTokenRenewerEvent
name|evt
parameter_list|)
block|{
name|this
operator|.
name|evt
operator|=
name|evt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|evt
operator|instanceof
name|DelegationTokenRenewerAppSubmitEvent
condition|)
block|{
name|DelegationTokenRenewerAppSubmitEvent
name|appSubmitEvt
init|=
operator|(
name|DelegationTokenRenewerAppSubmitEvent
operator|)
name|evt
decl_stmt|;
name|handleDTRenewerAppSubmitEvent
argument_list|(
name|appSubmitEvt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|evt
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DelegationTokenRenewerEventType
operator|.
name|FINISH_APPLICATION
argument_list|)
condition|)
block|{
name|DelegationTokenRenewer
operator|.
name|this
operator|.
name|handleAppFinishEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleDTRenewerAppSubmitEvent ( DelegationTokenRenewerAppSubmitEvent event)
specifier|private
name|void
name|handleDTRenewerAppSubmitEvent
parameter_list|(
name|DelegationTokenRenewerAppSubmitEvent
name|event
parameter_list|)
block|{
comment|/*        * For applications submitted with delegation tokens we are not submitting        * the application to scheduler from RMAppManager. Instead we are doing        * it from here. The primary goal is to make token renewal as a part of        * application submission asynchronous so that client thread is not        * blocked during app submission.        */
try|try
block|{
comment|// Setup tokens for renewal
name|DelegationTokenRenewer
operator|.
name|this
operator|.
name|handleAppSubmitEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to add the application to the delegation token renewer."
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Sending APP_REJECTED is fine, since we assume that the
comment|// RMApp is in NEW state and thus we havne't yet informed the
comment|// Scheduler about the existence of the application
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRejectedEvent
argument_list|(
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|DelegationTokenRenewerAppSubmitEvent
specifier|static
class|class
name|DelegationTokenRenewerAppSubmitEvent
extends|extends
name|DelegationTokenRenewerEvent
block|{
DECL|field|credentials
specifier|private
name|Credentials
name|credentials
decl_stmt|;
DECL|field|shouldCancelAtEnd
specifier|private
name|boolean
name|shouldCancelAtEnd
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|method|DelegationTokenRenewerAppSubmitEvent (ApplicationId appId, Credentials credentails, boolean shouldCancelAtEnd, String user)
specifier|public
name|DelegationTokenRenewerAppSubmitEvent
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Credentials
name|credentails
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|appId
argument_list|,
name|DelegationTokenRenewerEventType
operator|.
name|VERIFY_AND_START_APPLICATION
argument_list|)
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentails
expr_stmt|;
name|this
operator|.
name|shouldCancelAtEnd
operator|=
name|shouldCancelAtEnd
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
return|return
name|credentials
return|;
block|}
DECL|method|shouldCancelAtEnd ()
specifier|public
name|boolean
name|shouldCancelAtEnd
parameter_list|()
block|{
return|return
name|shouldCancelAtEnd
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
block|}
end_class

begin_enum
DECL|enum|DelegationTokenRenewerEventType
enum|enum
name|DelegationTokenRenewerEventType
block|{
DECL|enumConstant|VERIFY_AND_START_APPLICATION
name|VERIFY_AND_START_APPLICATION
block|,
DECL|enumConstant|FINISH_APPLICATION
name|FINISH_APPLICATION
block|}
end_enum

begin_class
DECL|class|DelegationTokenRenewerEvent
specifier|private
specifier|static
class|class
name|DelegationTokenRenewerEvent
extends|extends
name|AbstractEvent
argument_list|<
name|DelegationTokenRenewerEventType
argument_list|>
block|{
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
decl_stmt|;
DECL|method|DelegationTokenRenewerEvent (ApplicationId appId, DelegationTokenRenewerEventType type)
specifier|public
name|DelegationTokenRenewerEvent
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|DelegationTokenRenewerEventType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|appId
return|;
block|}
block|}
end_class

unit|}
end_unit

