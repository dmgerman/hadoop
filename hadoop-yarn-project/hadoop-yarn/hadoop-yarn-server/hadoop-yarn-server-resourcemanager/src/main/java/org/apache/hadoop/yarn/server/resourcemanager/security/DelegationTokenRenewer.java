begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_comment
comment|/**  * Service to renew application delegation tokens.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|DelegationTokenRenewer
specifier|public
class|class
name|DelegationTokenRenewer
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelegationTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"hdfs"
decl_stmt|;
comment|// global single timer (daemon)
DECL|field|renewalTimer
specifier|private
name|Timer
name|renewalTimer
decl_stmt|;
comment|// delegation token canceler thread
DECL|field|dtCancelThread
specifier|private
name|DelegationTokenCancelThread
name|dtCancelThread
init|=
operator|new
name|DelegationTokenCancelThread
argument_list|()
decl_stmt|;
comment|// managing the list of tokens using Map
comment|// appId=>List<tokens>
DECL|field|delegationTokens
specifier|private
name|Set
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|delegationTokens
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DelegationTokenToRenew
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|delayedRemovalMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|delayedRemovalMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|tokenRemovalDelayMs
specifier|private
name|long
name|tokenRemovalDelayMs
decl_stmt|;
DECL|field|delayedRemovalThread
specifier|private
name|Thread
name|delayedRemovalThread
decl_stmt|;
DECL|field|tokenKeepAliveEnabled
specifier|private
name|boolean
name|tokenKeepAliveEnabled
decl_stmt|;
DECL|method|DelegationTokenRenewer ()
specifier|public
name|DelegationTokenRenewer
parameter_list|()
block|{
name|super
argument_list|(
name|DelegationTokenRenewer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenKeepAliveEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenRemovalDelayMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|dtCancelThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|renewalTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenKeepAliveEnabled
condition|)
block|{
name|delayedRemovalThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|DelayedTokenRemovalRunnable
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|,
literal|"DelayedTokenCanceller"
argument_list|)
expr_stmt|;
name|delayedRemovalThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|renewalTimer
operator|!=
literal|null
condition|)
block|{
name|renewalTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|delegationTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dtCancelThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|dtCancelThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tokenKeepAliveEnabled
operator|&&
name|delayedRemovalThread
operator|!=
literal|null
condition|)
block|{
name|delayedRemovalThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|delayedRemovalThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while joining on delayed removal thread."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * class that is used for keeping tracks of DT to renew    *    */
DECL|class|DelegationTokenToRenew
specifier|private
specifier|static
class|class
name|DelegationTokenToRenew
block|{
DECL|field|token
specifier|public
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
decl_stmt|;
DECL|field|applicationId
specifier|public
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|conf
specifier|public
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|expirationDate
specifier|public
name|long
name|expirationDate
decl_stmt|;
DECL|field|timerTask
specifier|public
name|TimerTask
name|timerTask
decl_stmt|;
DECL|field|shouldCancelAtEnd
specifier|public
specifier|final
name|boolean
name|shouldCancelAtEnd
decl_stmt|;
DECL|method|DelegationTokenToRenew ( ApplicationId jId, Token<?> token, Configuration conf, long expirationDate, boolean shouldCancelAtEnd)
specifier|public
name|DelegationTokenToRenew
parameter_list|(
name|ApplicationId
name|jId
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|expirationDate
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|jId
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|expirationDate
operator|=
name|expirationDate
expr_stmt|;
name|this
operator|.
name|timerTask
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|shouldCancelAtEnd
operator|=
name|shouldCancelAtEnd
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|token
operator|==
literal|null
operator|||
name|this
operator|.
name|applicationId
operator|==
literal|null
operator|||
name|this
operator|.
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid params to renew token"
operator|+
literal|";token="
operator|+
name|this
operator|.
name|token
operator|+
literal|";appId="
operator|+
name|this
operator|.
name|applicationId
operator|+
literal|";conf="
operator|+
name|this
operator|.
name|conf
argument_list|)
throw|;
block|}
block|}
DECL|method|setTimerTask (TimerTask tTask)
specifier|public
name|void
name|setTimerTask
parameter_list|(
name|TimerTask
name|tTask
parameter_list|)
block|{
name|timerTask
operator|=
name|tTask
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|token
operator|+
literal|";exp="
operator|+
name|expirationDate
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|DelegationTokenToRenew
operator|&&
name|token
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DelegationTokenToRenew
operator|)
name|obj
operator|)
operator|.
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|token
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|DelegationTokenCancelThread
specifier|private
specifier|static
class|class
name|DelegationTokenCancelThread
extends|extends
name|Thread
block|{
DECL|class|TokenWithConf
specifier|private
specifier|static
class|class
name|TokenWithConf
block|{
DECL|field|token
name|Token
argument_list|<
name|?
argument_list|>
name|token
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|TokenWithConf (Token<?> token, Configuration conf)
name|TokenWithConf
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
DECL|field|queue
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|TokenWithConf
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|TokenWithConf
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DelegationTokenCancelThread ()
specifier|public
name|DelegationTokenCancelThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"Delegation Token Canceler"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|cancelToken (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancelToken
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|TokenWithConf
name|tokenWithConf
init|=
operator|new
name|TokenWithConf
argument_list|(
name|token
argument_list|,
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|offer
argument_list|(
name|tokenWithConf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to add token "
operator|+
name|token
operator|+
literal|" for cancellation. "
operator|+
literal|"Will retry.."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TokenWithConf
name|tokenWithConf
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|tokenWithConf
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
specifier|final
name|TokenWithConf
name|current
init|=
name|tokenWithConf
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Canceling token "
operator|+
name|tokenWithConf
operator|.
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// need to use doAs so that http can find the kerberos tgt
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|current
operator|.
name|token
operator|.
name|cancel
argument_list|(
name|current
operator|.
name|conf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel token "
operator|+
name|tokenWithConf
operator|.
name|token
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
operator|+
literal|". Exiting.."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//adding token
DECL|method|addTokenToList (DelegationTokenToRenew t)
specifier|private
name|void
name|addTokenToList
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
name|delegationTokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add application tokens for renewal.    * @param applicationId added application    * @param ts tokens    * @param shouldCancelAtEnd true if tokens should be canceled when the app is    * done else false.     * @throws IOException    */
DECL|method|addApplication ( ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd)
specifier|public
specifier|synchronized
name|void
name|addApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
return|return;
comment|//nothing to add
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering tokens for renewal for:"
operator|+
literal|" appId = "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
name|ts
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
comment|// first renew happens immediately
if|if
condition|(
name|token
operator|.
name|isManaged
argument_list|()
condition|)
block|{
name|DelegationTokenToRenew
name|dtr
init|=
operator|new
name|DelegationTokenToRenew
argument_list|(
name|applicationId
argument_list|,
name|token
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|now
argument_list|,
name|shouldCancelAtEnd
argument_list|)
decl_stmt|;
name|addTokenToList
argument_list|(
name|dtr
argument_list|)
expr_stmt|;
name|setTimerForTokenRenewal
argument_list|(
name|dtr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering token for renewal for:"
operator|+
literal|" service = "
operator|+
name|token
operator|.
name|getService
argument_list|()
operator|+
literal|" for appId = "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Task - to renew a token    *    */
DECL|class|RenewalTimerTask
specifier|private
class|class
name|RenewalTimerTask
extends|extends
name|TimerTask
block|{
DECL|field|dttr
specifier|private
name|DelegationTokenToRenew
name|dttr
decl_stmt|;
DECL|field|cancelled
specifier|private
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
DECL|method|RenewalTimerTask (DelegationTokenToRenew t)
name|RenewalTimerTask
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
name|dttr
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cancelled
condition|)
block|{
return|return;
block|}
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|dttr
operator|.
name|token
decl_stmt|;
try|try
block|{
comment|// need to use doAs so that http can find the kerberos tgt
name|dttr
operator|.
name|expirationDate
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dttr
operator|.
name|token
operator|.
name|renew
argument_list|(
name|dttr
operator|.
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renewing delegation-token for:"
operator|+
name|token
operator|.
name|getService
argument_list|()
operator|+
literal|"; new expiration;"
operator|+
name|dttr
operator|.
name|expirationDate
argument_list|)
expr_stmt|;
block|}
name|setTimerForTokenRenewal
argument_list|(
name|dttr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set the next one
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception renewing token"
operator|+
name|token
operator|+
literal|". Not rescheduled"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|removeFailedDelegationToken
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel ()
specifier|public
specifier|synchronized
name|boolean
name|cancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|cancel
argument_list|()
return|;
block|}
block|}
comment|/**    * set task to renew the token    */
specifier|private
DECL|method|setTimerForTokenRenewal (DelegationTokenToRenew token, boolean firstTime)
name|void
name|setTimerForTokenRenewal
parameter_list|(
name|DelegationTokenToRenew
name|token
parameter_list|,
name|boolean
name|firstTime
parameter_list|)
throws|throws
name|IOException
block|{
comment|// calculate timer time
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|renewIn
decl_stmt|;
if|if
condition|(
name|firstTime
condition|)
block|{
name|renewIn
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
name|long
name|expiresIn
init|=
operator|(
name|token
operator|.
name|expirationDate
operator|-
name|now
operator|)
decl_stmt|;
name|renewIn
operator|=
name|now
operator|+
name|expiresIn
operator|-
name|expiresIn
operator|/
literal|10
expr_stmt|;
comment|// little bit before the expiration
block|}
comment|// need to create new task every time
name|TimerTask
name|tTask
init|=
operator|new
name|RenewalTimerTask
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|token
operator|.
name|setTimerTask
argument_list|(
name|tTask
argument_list|)
expr_stmt|;
comment|// keep reference to the timer
name|renewalTimer
operator|.
name|schedule
argument_list|(
name|token
operator|.
name|timerTask
argument_list|,
operator|new
name|Date
argument_list|(
name|renewIn
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// cancel a token
DECL|method|cancelToken (DelegationTokenToRenew t)
specifier|private
name|void
name|cancelToken
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|shouldCancelAtEnd
condition|)
block|{
name|dtCancelThread
operator|.
name|cancelToken
argument_list|(
name|t
operator|.
name|token
argument_list|,
name|t
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Did not cancel "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * removing failed DT    * @param applicationId    */
DECL|method|removeFailedDelegationToken (DelegationTokenToRenew t)
specifier|private
name|void
name|removeFailedDelegationToken
parameter_list|(
name|DelegationTokenToRenew
name|t
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|t
operator|.
name|applicationId
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing failed delegation token for appid="
operator|+
name|applicationId
operator|+
literal|";t="
operator|+
name|t
operator|.
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|delegationTokens
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// cancel the timer
if|if
condition|(
name|t
operator|.
name|timerTask
operator|!=
literal|null
condition|)
name|t
operator|.
name|timerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
comment|/**    * Removing delegation token for completed applications.    * @param applicationId completed application    */
DECL|method|applicationFinished (ApplicationId applicationId)
specifier|public
name|void
name|applicationFinished
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tokenKeepAliveEnabled
condition|)
block|{
name|removeApplicationFromRenewal
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delayedRemovalMap
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|tokenRemovalDelayMs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a list of applications to the keep alive list. If an appId already    * exists, update it's keep-alive time.    *     * @param appIds    *          the list of applicationIds to be kept alive.    *     */
DECL|method|updateKeepAliveApplications (List<ApplicationId> appIds)
specifier|public
name|void
name|updateKeepAliveApplications
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
block|{
if|if
condition|(
name|tokenKeepAliveEnabled
operator|&&
name|appIds
operator|!=
literal|null
operator|&&
name|appIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|appIds
control|)
block|{
name|delayedRemovalMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|tokenRemovalDelayMs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeApplicationFromRenewal (ApplicationId applicationId)
specifier|private
name|void
name|removeApplicationFromRenewal
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegationTokens
init|)
block|{
name|Iterator
argument_list|<
name|DelegationTokenToRenew
argument_list|>
name|it
init|=
name|delegationTokens
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DelegationTokenToRenew
name|dttr
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dttr
operator|.
name|applicationId
operator|.
name|equals
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing delegation token for appId="
operator|+
name|applicationId
operator|+
literal|"; token="
operator|+
name|dttr
operator|.
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cancel the timer
if|if
condition|(
name|dttr
operator|.
name|timerTask
operator|!=
literal|null
condition|)
name|dttr
operator|.
name|timerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
comment|// cancel the token
name|cancelToken
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Takes care of cancelling app delegation tokens after the configured    * cancellation delay, taking into consideration keep-alive requests.    *     */
DECL|class|DelayedTokenRemovalRunnable
specifier|private
class|class
name|DelayedTokenRemovalRunnable
implements|implements
name|Runnable
block|{
DECL|field|waitTimeMs
specifier|private
name|long
name|waitTimeMs
decl_stmt|;
DECL|method|DelayedTokenRemovalRunnable (Configuration conf)
name|DelayedTokenRemovalRunnable
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|waitTimeMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|toCancel
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|>
name|it
init|=
name|delayedRemovalMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|toCancel
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|toCancel
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ApplicationId
name|appId
range|:
name|toCancel
control|)
block|{
name|removeApplicationFromRenewal
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|delayedRemovalMap
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
name|waitTimeMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delayed Deletion Thread Interrupted. Shutting it down"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

