begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link StageExecutionInterval} which gives each stage  * the maximal possible time interval, given the job constraints. Specifically,  * for ANY and ALL jobs, the interval would be [jobArrival, jobDeadline). For  * ORDER jobs, the stage cannot start before its predecessors (if allocateLeft  * == true) or cannot end before its successors (if allocateLeft == false)  */
end_comment

begin_class
DECL|class|StageExecutionIntervalUnconstrained
specifier|public
class|class
name|StageExecutionIntervalUnconstrained
implements|implements
name|StageExecutionInterval
block|{
annotation|@
name|Override
DECL|method|computeExecutionInterval (Plan plan, ReservationDefinition reservation, ReservationRequest currentReservationStage, boolean allocateLeft, RLESparseResourceAllocation allocations)
specifier|public
name|ReservationInterval
name|computeExecutionInterval
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|reservation
parameter_list|,
name|ReservationRequest
name|currentReservationStage
parameter_list|,
name|boolean
name|allocateLeft
parameter_list|,
name|RLESparseResourceAllocation
name|allocations
parameter_list|)
block|{
name|Long
name|stageArrival
init|=
name|reservation
operator|.
name|getArrival
argument_list|()
decl_stmt|;
name|Long
name|stageDeadline
init|=
name|reservation
operator|.
name|getDeadline
argument_list|()
decl_stmt|;
name|ReservationRequestInterpreter
name|jobType
init|=
name|reservation
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getInterpreter
argument_list|()
decl_stmt|;
comment|// Left to right
if|if
condition|(
name|allocateLeft
condition|)
block|{
comment|// If ORDER job, change the stage arrival time
if|if
condition|(
operator|(
name|jobType
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
operator|)
operator|||
operator|(
name|jobType
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
operator|)
condition|)
block|{
name|Long
name|allocationEndTime
init|=
name|allocations
operator|.
name|getLatestNonNullTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocationEndTime
operator|!=
operator|-
literal|1
condition|)
block|{
name|stageArrival
operator|=
name|allocationEndTime
expr_stmt|;
block|}
block|}
comment|// Right to left
block|}
else|else
block|{
comment|// If ORDER job, change the stage deadline
if|if
condition|(
operator|(
name|jobType
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
operator|)
operator|||
operator|(
name|jobType
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
operator|)
condition|)
block|{
name|Long
name|allocationStartTime
init|=
name|allocations
operator|.
name|getEarliestStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocationStartTime
operator|!=
operator|-
literal|1
condition|)
block|{
name|stageDeadline
operator|=
name|allocationStartTime
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ReservationInterval
argument_list|(
name|stageArrival
argument_list|,
name|stageDeadline
argument_list|)
return|;
block|}
block|}
end_class

end_unit

