begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_class
DECL|class|QueueCapacities
specifier|public
class|class
name|QueueCapacities
block|{
DECL|field|NL
specifier|private
specifier|static
specifier|final
name|String
name|NL
init|=
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
decl_stmt|;
DECL|field|LABEL_DOESNT_EXIST_CAP
specifier|private
specifier|static
specifier|final
name|float
name|LABEL_DOESNT_EXIST_CAP
init|=
literal|0f
decl_stmt|;
DECL|field|capacitiesMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Capacities
argument_list|>
name|capacitiesMap
decl_stmt|;
DECL|field|readLock
specifier|private
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|isRoot
specifier|private
specifier|final
name|boolean
name|isRoot
decl_stmt|;
DECL|method|QueueCapacities (boolean isRoot)
specifier|public
name|QueueCapacities
parameter_list|(
name|boolean
name|isRoot
parameter_list|)
block|{
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|capacitiesMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Capacities
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|isRoot
operator|=
name|isRoot
expr_stmt|;
block|}
comment|// Usage enum here to make implement cleaner
DECL|enum|CapacityType
specifier|private
enum|enum
name|CapacityType
block|{
DECL|enumConstant|USED_CAP
DECL|enumConstant|ABS_USED_CAP
DECL|enumConstant|MAX_CAP
DECL|enumConstant|ABS_MAX_CAP
DECL|enumConstant|CAP
DECL|enumConstant|ABS_CAP
name|USED_CAP
argument_list|(
literal|0
argument_list|)
block|,
name|ABS_USED_CAP
argument_list|(
literal|1
argument_list|)
block|,
name|MAX_CAP
argument_list|(
literal|2
argument_list|)
block|,
name|ABS_MAX_CAP
argument_list|(
literal|3
argument_list|)
block|,
name|CAP
argument_list|(
literal|4
argument_list|)
block|,
name|ABS_CAP
argument_list|(
literal|5
argument_list|)
block|,
DECL|enumConstant|MAX_AM_PERC
DECL|enumConstant|RESERVED_CAP
DECL|enumConstant|ABS_RESERVED_CAP
name|MAX_AM_PERC
argument_list|(
literal|6
argument_list|)
block|,
name|RESERVED_CAP
argument_list|(
literal|7
argument_list|)
block|,
name|ABS_RESERVED_CAP
argument_list|(
literal|8
argument_list|)
block|;
DECL|field|idx
specifier|private
name|int
name|idx
decl_stmt|;
DECL|method|CapacityType (int idx)
specifier|private
name|CapacityType
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|this
operator|.
name|idx
operator|=
name|idx
expr_stmt|;
block|}
block|}
DECL|class|Capacities
specifier|private
specifier|static
class|class
name|Capacities
block|{
DECL|field|capacitiesArr
specifier|private
name|float
index|[]
name|capacitiesArr
decl_stmt|;
DECL|method|Capacities ()
specifier|public
name|Capacities
parameter_list|()
block|{
name|capacitiesArr
operator|=
operator|new
name|float
index|[
name|CapacityType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{used="
operator|+
name|capacitiesArr
index|[
literal|0
index|]
operator|+
literal|"%, "
argument_list|)
operator|.
name|append
argument_list|(
literal|"abs_used="
operator|+
name|capacitiesArr
index|[
literal|1
index|]
operator|+
literal|"%, "
argument_list|)
operator|.
name|append
argument_list|(
literal|"max_cap="
operator|+
name|capacitiesArr
index|[
literal|2
index|]
operator|+
literal|"%, "
argument_list|)
operator|.
name|append
argument_list|(
literal|"abs_max_cap="
operator|+
name|capacitiesArr
index|[
literal|3
index|]
operator|+
literal|"%, "
argument_list|)
operator|.
name|append
argument_list|(
literal|"cap="
operator|+
name|capacitiesArr
index|[
literal|4
index|]
operator|+
literal|"%, "
argument_list|)
operator|.
name|append
argument_list|(
literal|"abs_cap="
operator|+
name|capacitiesArr
index|[
literal|5
index|]
operator|+
literal|"%}"
argument_list|)
operator|.
name|append
argument_list|(
literal|"max_am_perc="
operator|+
name|capacitiesArr
index|[
literal|6
index|]
operator|+
literal|"%}"
argument_list|)
operator|.
name|append
argument_list|(
literal|"reserved_cap="
operator|+
name|capacitiesArr
index|[
literal|7
index|]
operator|+
literal|"%}"
argument_list|)
operator|.
name|append
argument_list|(
literal|"abs_reserved_cap="
operator|+
name|capacitiesArr
index|[
literal|8
index|]
operator|+
literal|"%}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|_get (String label, CapacityType type)
specifier|private
name|float
name|_get
parameter_list|(
name|String
name|label
parameter_list|,
name|CapacityType
name|type
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Capacities
name|cap
init|=
name|capacitiesMap
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cap
condition|)
block|{
return|return
name|LABEL_DOESNT_EXIST_CAP
return|;
block|}
return|return
name|cap
operator|.
name|capacitiesArr
index|[
name|type
operator|.
name|idx
index|]
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|_set (String label, CapacityType type, float value)
specifier|private
name|void
name|_set
parameter_list|(
name|String
name|label
parameter_list|,
name|CapacityType
name|type
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Capacities
name|cap
init|=
name|capacitiesMap
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cap
condition|)
block|{
name|cap
operator|=
operator|new
name|Capacities
argument_list|()
expr_stmt|;
name|capacitiesMap
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|cap
argument_list|)
expr_stmt|;
block|}
name|cap
operator|.
name|capacitiesArr
index|[
name|type
operator|.
name|idx
index|]
operator|=
name|value
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Used Capacity Getter and Setter */
DECL|method|getUsedCapacity ()
specifier|public
name|float
name|getUsedCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|USED_CAP
argument_list|)
return|;
block|}
DECL|method|getUsedCapacity (String label)
specifier|public
name|float
name|getUsedCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|USED_CAP
argument_list|)
return|;
block|}
DECL|method|setUsedCapacity (float value)
specifier|public
name|void
name|setUsedCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|USED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setUsedCapacity (String label, float value)
specifier|public
name|void
name|setUsedCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|USED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Absolute Used Capacity Getter and Setter */
DECL|method|getAbsoluteUsedCapacity ()
specifier|public
name|float
name|getAbsoluteUsedCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_USED_CAP
argument_list|)
return|;
block|}
DECL|method|getAbsoluteUsedCapacity (String label)
specifier|public
name|float
name|getAbsoluteUsedCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_USED_CAP
argument_list|)
return|;
block|}
DECL|method|setAbsoluteUsedCapacity (float value)
specifier|public
name|void
name|setAbsoluteUsedCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_USED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setAbsoluteUsedCapacity (String label, float value)
specifier|public
name|void
name|setAbsoluteUsedCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_USED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Capacity Getter and Setter */
DECL|method|getCapacity ()
specifier|public
name|float
name|getCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|CAP
argument_list|)
return|;
block|}
DECL|method|getCapacity (String label)
specifier|public
name|float
name|getCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|label
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|&&
name|isRoot
condition|)
block|{
return|return
literal|1f
return|;
block|}
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|CAP
argument_list|)
return|;
block|}
DECL|method|setCapacity (float value)
specifier|public
name|void
name|setCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setCapacity (String label, float value)
specifier|public
name|void
name|setCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Absolute Capacity Getter and Setter */
DECL|method|getAbsoluteCapacity ()
specifier|public
name|float
name|getAbsoluteCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_CAP
argument_list|)
return|;
block|}
DECL|method|getAbsoluteCapacity (String label)
specifier|public
name|float
name|getAbsoluteCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|label
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|&&
name|isRoot
condition|)
block|{
return|return
literal|1f
return|;
block|}
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_CAP
argument_list|)
return|;
block|}
DECL|method|setAbsoluteCapacity (float value)
specifier|public
name|void
name|setAbsoluteCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setAbsoluteCapacity (String label, float value)
specifier|public
name|void
name|setAbsoluteCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Maximum Capacity Getter and Setter */
DECL|method|getMaximumCapacity ()
specifier|public
name|float
name|getMaximumCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|MAX_CAP
argument_list|)
return|;
block|}
DECL|method|getMaximumCapacity (String label)
specifier|public
name|float
name|getMaximumCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|MAX_CAP
argument_list|)
return|;
block|}
DECL|method|setMaximumCapacity (float value)
specifier|public
name|void
name|setMaximumCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|MAX_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaximumCapacity (String label, float value)
specifier|public
name|void
name|setMaximumCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|MAX_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Absolute Maximum Capacity Getter and Setter */
DECL|method|getAbsoluteMaximumCapacity ()
specifier|public
name|float
name|getAbsoluteMaximumCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_MAX_CAP
argument_list|)
return|;
block|}
DECL|method|getAbsoluteMaximumCapacity (String label)
specifier|public
name|float
name|getAbsoluteMaximumCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_MAX_CAP
argument_list|)
return|;
block|}
DECL|method|setAbsoluteMaximumCapacity (float value)
specifier|public
name|void
name|setAbsoluteMaximumCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_MAX_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setAbsoluteMaximumCapacity (String label, float value)
specifier|public
name|void
name|setAbsoluteMaximumCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_MAX_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Absolute Maximum AM resource percentage Getter and Setter */
DECL|method|getMaxAMResourcePercentage ()
specifier|public
name|float
name|getMaxAMResourcePercentage
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|MAX_AM_PERC
argument_list|)
return|;
block|}
DECL|method|getMaxAMResourcePercentage (String label)
specifier|public
name|float
name|getMaxAMResourcePercentage
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|MAX_AM_PERC
argument_list|)
return|;
block|}
DECL|method|setMaxAMResourcePercentage (String label, float value)
specifier|public
name|void
name|setMaxAMResourcePercentage
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|MAX_AM_PERC
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxAMResourcePercentage (float value)
specifier|public
name|void
name|setMaxAMResourcePercentage
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|MAX_AM_PERC
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Reserved Capacity Getter and Setter */
DECL|method|getReservedCapacity ()
specifier|public
name|float
name|getReservedCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|RESERVED_CAP
argument_list|)
return|;
block|}
DECL|method|getReservedCapacity (String label)
specifier|public
name|float
name|getReservedCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|RESERVED_CAP
argument_list|)
return|;
block|}
DECL|method|setReservedCapacity (float value)
specifier|public
name|void
name|setReservedCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|RESERVED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setReservedCapacity (String label, float value)
specifier|public
name|void
name|setReservedCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|RESERVED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* Absolute Reserved Capacity Getter and Setter */
DECL|method|getAbsoluteReservedCapacity ()
specifier|public
name|float
name|getAbsoluteReservedCapacity
parameter_list|()
block|{
return|return
name|_get
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_RESERVED_CAP
argument_list|)
return|;
block|}
DECL|method|getAbsoluteReservedCapacity (String label)
specifier|public
name|float
name|getAbsoluteReservedCapacity
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|_get
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_RESERVED_CAP
argument_list|)
return|;
block|}
DECL|method|setAbsoluteReservedCapacity (float value)
specifier|public
name|void
name|setAbsoluteReservedCapacity
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|NL
argument_list|,
name|CapacityType
operator|.
name|ABS_RESERVED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setAbsoluteReservedCapacity (String label, float value)
specifier|public
name|void
name|setAbsoluteReservedCapacity
parameter_list|(
name|String
name|label
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_RESERVED_CAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear configurable fields, like    * (absolute)capacity/(absolute)maximum-capacity, this will be used by queue    * reinitialize, when we reinitialize a queue, we will first clear all    * configurable fields, and load new values    */
DECL|method|clearConfigurableFields ()
specifier|public
name|void
name|clearConfigurableFields
parameter_list|()
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|label
range|:
name|capacitiesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|CAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|MAX_CAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_CAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_set
argument_list|(
name|label
argument_list|,
name|CapacityType
operator|.
name|ABS_MAX_CAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getExistingNodeLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExistingNodeLabels
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|capacitiesMap
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|capacitiesMap
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNodePartitionsSet ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodePartitionsSet
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|capacitiesMap
operator|.
name|keySet
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

