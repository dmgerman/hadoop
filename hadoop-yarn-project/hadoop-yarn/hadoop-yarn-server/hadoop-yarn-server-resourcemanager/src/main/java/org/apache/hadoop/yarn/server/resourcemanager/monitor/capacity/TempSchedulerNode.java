begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class will save necessary information which copied from  * FiCaSchedulerNode. This is added majorly for performance consideration, this  * can be cached to avoid hitting scheduler again and again. In addition,  * we can add some preemption-required fields to the class.  */
end_comment

begin_class
DECL|class|TempSchedulerNode
specifier|public
class|class
name|TempSchedulerNode
block|{
DECL|field|runningContainers
specifier|private
name|List
argument_list|<
name|RMContainer
argument_list|>
name|runningContainers
decl_stmt|;
DECL|field|reservedContainer
specifier|private
name|RMContainer
name|reservedContainer
decl_stmt|;
DECL|field|totalResource
specifier|private
name|Resource
name|totalResource
decl_stmt|;
comment|// excluded reserved resource
DECL|field|allocatedResource
specifier|private
name|Resource
name|allocatedResource
decl_stmt|;
comment|// total - allocated
DECL|field|availableResource
specifier|private
name|Resource
name|availableResource
decl_stmt|;
comment|// just a shortcut of reservedContainer.getResource.
DECL|field|reservedResource
specifier|private
name|Resource
name|reservedResource
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|method|fromSchedulerNode ( FiCaSchedulerNode schedulerNode)
specifier|public
specifier|static
name|TempSchedulerNode
name|fromSchedulerNode
parameter_list|(
name|FiCaSchedulerNode
name|schedulerNode
parameter_list|)
block|{
name|TempSchedulerNode
name|n
init|=
operator|new
name|TempSchedulerNode
argument_list|()
decl_stmt|;
name|n
operator|.
name|totalResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|allocatedResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|runningContainers
operator|=
name|schedulerNode
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
expr_stmt|;
name|n
operator|.
name|reservedContainer
operator|=
name|schedulerNode
operator|.
name|getReservedContainer
argument_list|()
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|n
operator|.
name|reservedResource
operator|=
name|n
operator|.
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|n
operator|.
name|reservedResource
operator|=
name|Resources
operator|.
name|none
argument_list|()
expr_stmt|;
block|}
name|n
operator|.
name|availableResource
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|n
operator|.
name|totalResource
argument_list|,
name|n
operator|.
name|allocatedResource
argument_list|)
expr_stmt|;
name|n
operator|.
name|nodeId
operator|=
name|schedulerNode
operator|.
name|getNodeID
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|getRunningContainers ()
specifier|public
name|List
argument_list|<
name|RMContainer
argument_list|>
name|getRunningContainers
parameter_list|()
block|{
return|return
name|runningContainers
return|;
block|}
DECL|method|setRunningContainers (List<RMContainer> runningContainers)
specifier|public
name|void
name|setRunningContainers
parameter_list|(
name|List
argument_list|<
name|RMContainer
argument_list|>
name|runningContainers
parameter_list|)
block|{
name|this
operator|.
name|runningContainers
operator|=
name|runningContainers
expr_stmt|;
block|}
DECL|method|getReservedContainer ()
specifier|public
name|RMContainer
name|getReservedContainer
parameter_list|()
block|{
return|return
name|reservedContainer
return|;
block|}
DECL|method|setReservedContainer (RMContainer reservedContainer)
specifier|public
name|void
name|setReservedContainer
parameter_list|(
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|this
operator|.
name|reservedContainer
operator|=
name|reservedContainer
expr_stmt|;
block|}
DECL|method|getTotalResource ()
specifier|public
name|Resource
name|getTotalResource
parameter_list|()
block|{
return|return
name|totalResource
return|;
block|}
DECL|method|setTotalResource (Resource totalResource)
specifier|public
name|void
name|setTotalResource
parameter_list|(
name|Resource
name|totalResource
parameter_list|)
block|{
name|this
operator|.
name|totalResource
operator|=
name|totalResource
expr_stmt|;
block|}
DECL|method|getAllocatedResource ()
specifier|public
name|Resource
name|getAllocatedResource
parameter_list|()
block|{
return|return
name|allocatedResource
return|;
block|}
DECL|method|setAllocatedResource (Resource allocatedResource)
specifier|public
name|void
name|setAllocatedResource
parameter_list|(
name|Resource
name|allocatedResource
parameter_list|)
block|{
name|this
operator|.
name|allocatedResource
operator|=
name|allocatedResource
expr_stmt|;
block|}
DECL|method|getAvailableResource ()
specifier|public
name|Resource
name|getAvailableResource
parameter_list|()
block|{
return|return
name|availableResource
return|;
block|}
DECL|method|setAvailableResource (Resource availableResource)
specifier|public
name|void
name|setAvailableResource
parameter_list|(
name|Resource
name|availableResource
parameter_list|)
block|{
name|this
operator|.
name|availableResource
operator|=
name|availableResource
expr_stmt|;
block|}
DECL|method|getReservedResource ()
specifier|public
name|Resource
name|getReservedResource
parameter_list|()
block|{
return|return
name|reservedResource
return|;
block|}
DECL|method|setReservedResource (Resource reservedResource)
specifier|public
name|void
name|setReservedResource
parameter_list|(
name|Resource
name|reservedResource
parameter_list|)
block|{
name|this
operator|.
name|reservedResource
operator|=
name|reservedResource
expr_stmt|;
block|}
block|}
end_class

end_unit

