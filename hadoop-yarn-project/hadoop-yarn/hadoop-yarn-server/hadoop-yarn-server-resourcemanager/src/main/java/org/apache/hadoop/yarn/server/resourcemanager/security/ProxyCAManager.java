begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Recoverable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyCA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_comment
comment|/**  * Manager for {@link ProxyCA}, which contains the Certificate Authority for  * AMs to have certificates for HTTPS communication with the RM Proxy.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ProxyCAManager
specifier|public
class|class
name|ProxyCAManager
extends|extends
name|AbstractService
implements|implements
name|Recoverable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProxyCAManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|proxyCA
specifier|private
name|ProxyCA
name|proxyCA
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|wasRecovered
specifier|private
name|boolean
name|wasRecovered
decl_stmt|;
DECL|method|ProxyCAManager (ProxyCA proxyCA, RMContext rmContext)
specifier|public
name|ProxyCAManager
parameter_list|(
name|ProxyCA
name|proxyCA
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|ProxyCAManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|proxyCA
operator|=
name|proxyCA
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|wasRecovered
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|wasRecovered
condition|)
block|{
name|proxyCA
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
name|wasRecovered
operator|=
literal|false
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeProxyCACert
argument_list|(
name|proxyCA
operator|.
name|getCaCert
argument_list|()
argument_list|,
name|proxyCA
operator|.
name|getCaKeyPair
argument_list|()
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getProxyCA ()
specifier|public
name|ProxyCA
name|getProxyCA
parameter_list|()
block|{
return|return
name|proxyCA
return|;
block|}
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering CA Certificate and Private Key"
argument_list|)
expr_stmt|;
name|X509Certificate
name|caCert
init|=
name|state
operator|.
name|getProxyCAState
argument_list|()
operator|.
name|getCaCert
argument_list|()
decl_stmt|;
name|PrivateKey
name|caPrivateKey
init|=
name|state
operator|.
name|getProxyCAState
argument_list|()
operator|.
name|getCaPrivateKey
argument_list|()
decl_stmt|;
name|proxyCA
operator|.
name|init
argument_list|(
name|caCert
argument_list|,
name|caPrivateKey
argument_list|)
expr_stmt|;
name|wasRecovered
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

