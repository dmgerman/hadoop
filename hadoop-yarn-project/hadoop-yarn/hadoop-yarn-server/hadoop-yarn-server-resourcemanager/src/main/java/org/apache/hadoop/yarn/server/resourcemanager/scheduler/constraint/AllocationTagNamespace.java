begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
operator|.
name|SELF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
operator|.
name|NOT_SELF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
operator|.
name|APP_LABEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
operator|.
name|APP_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
operator|.
name|ALL
import|;
end_import

begin_comment
comment|/**  * Class to describe the namespace of an allocation tag.  * Each namespace can be evaluated against a set of applications.  * After evaluation, the namespace should have an implicit set of  * applications which defines its scope.  */
end_comment

begin_class
DECL|class|AllocationTagNamespace
specifier|public
specifier|abstract
class|class
name|AllocationTagNamespace
implements|implements
name|Evaluable
argument_list|<
name|TargetApplications
argument_list|>
block|{
DECL|field|NAMESPACE_DELIMITER
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_DELIMITER
init|=
literal|"/"
decl_stmt|;
DECL|field|nsType
specifier|private
name|AllocationTagNamespaceType
name|nsType
decl_stmt|;
comment|// Namespace scope value will be delay binding by eval method.
DECL|field|nsScope
specifier|private
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|nsScope
decl_stmt|;
DECL|method|AllocationTagNamespace (AllocationTagNamespaceType allocationTagNamespaceType)
specifier|public
name|AllocationTagNamespace
parameter_list|(
name|AllocationTagNamespaceType
name|allocationTagNamespaceType
parameter_list|)
block|{
name|this
operator|.
name|nsType
operator|=
name|allocationTagNamespaceType
expr_stmt|;
block|}
DECL|method|setScopeIfNotNull (Set<ApplicationId> appIds)
specifier|protected
name|void
name|setScopeIfNotNull
parameter_list|(
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
block|{
if|if
condition|(
name|appIds
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nsScope
operator|=
name|appIds
expr_stmt|;
block|}
block|}
comment|/**    * Get the type of the namespace.    * @return namespace type.    */
DECL|method|getNamespaceType ()
specifier|public
name|AllocationTagNamespaceType
name|getNamespaceType
parameter_list|()
block|{
return|return
name|nsType
return|;
block|}
comment|/**    * Get the scope of the namespace, in form of a set of applications.    *    * @return a set of applications.    */
DECL|method|getNamespaceScope ()
specifier|public
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|getNamespaceScope
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|nsScope
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid namespace scope,"
operator|+
literal|" it is not initialized. Evaluate must be called before"
operator|+
literal|" a namespace can be consumed."
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|nsScope
return|;
block|}
comment|/**    * Evaluate the namespace against given target applications    * if it is necessary. Only self/not-self/app-label namespace types    * require this evaluation step, because they are not binding to a    * specific scope during initiating. So we do lazy binding for them    * in this method.    *    * @param target a generic type target that impacts this evaluation.    * @throws InvalidAllocationTagsQueryException    */
annotation|@
name|Override
DECL|method|evaluate (TargetApplications target)
specifier|public
name|void
name|evaluate
parameter_list|(
name|TargetApplications
name|target
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
comment|// Sub-class needs to override this when it requires the eval step.
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|nsType
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Namespace within application itself.    */
DECL|class|Self
specifier|public
specifier|static
class|class
name|Self
extends|extends
name|AllocationTagNamespace
block|{
DECL|method|Self ()
specifier|public
name|Self
parameter_list|()
block|{
name|super
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evaluate (TargetApplications target)
specifier|public
name|void
name|evaluate
parameter_list|(
name|TargetApplications
name|target
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
if|if
condition|(
name|target
operator|==
literal|null
operator|||
name|target
operator|.
name|getCurrentApplicationId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidAllocationTagsQueryException
argument_list|(
literal|"Namespace Self must"
operator|+
literal|" be evaluated against a single application ID."
argument_list|)
throw|;
block|}
name|ApplicationId
name|applicationId
init|=
name|target
operator|.
name|getCurrentApplicationId
argument_list|()
decl_stmt|;
name|setScopeIfNotNull
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Namespace to all applications except itself.    */
DECL|class|NotSelf
specifier|public
specifier|static
class|class
name|NotSelf
extends|extends
name|AllocationTagNamespace
block|{
DECL|field|applicationId
specifier|private
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|method|NotSelf ()
specifier|public
name|NotSelf
parameter_list|()
block|{
name|super
argument_list|(
name|NOT_SELF
argument_list|)
expr_stmt|;
block|}
comment|/**      * The scope of self namespace is to an application itself,      * the application ID can be delay binding to the namespace.      *      * @param appId application ID.      */
DECL|method|setApplicationId (ApplicationId appId)
specifier|public
name|void
name|setApplicationId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|this
operator|.
name|applicationId
operator|=
name|appId
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationId
return|;
block|}
annotation|@
name|Override
DECL|method|evaluate (TargetApplications target)
specifier|public
name|void
name|evaluate
parameter_list|(
name|TargetApplications
name|target
parameter_list|)
block|{
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|otherAppIds
init|=
name|target
operator|.
name|getOtherApplicationIds
argument_list|()
decl_stmt|;
name|setScopeIfNotNull
argument_list|(
name|otherAppIds
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Namespace to all applications in the cluster.    */
DECL|class|All
specifier|public
specifier|static
class|class
name|All
extends|extends
name|AllocationTagNamespace
block|{
DECL|method|All ()
specifier|public
name|All
parameter_list|()
block|{
name|super
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Namespace to all applications in the cluster.    */
DECL|class|AppLabel
specifier|public
specifier|static
class|class
name|AppLabel
extends|extends
name|AllocationTagNamespace
block|{
DECL|method|AppLabel ()
specifier|public
name|AppLabel
parameter_list|()
block|{
name|super
argument_list|(
name|APP_LABEL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evaluate (TargetApplications target)
specifier|public
name|void
name|evaluate
parameter_list|(
name|TargetApplications
name|target
parameter_list|)
block|{
comment|// TODO Implement app-label namespace evaluation
block|}
block|}
comment|/**    * Namespace defined by a certain application ID.    */
DECL|class|AppID
specifier|public
specifier|static
class|class
name|AppID
extends|extends
name|AllocationTagNamespace
block|{
DECL|field|targetAppId
specifier|private
name|ApplicationId
name|targetAppId
decl_stmt|;
comment|// app-id namespace requires an extra value of an application id.
DECL|method|AppID (ApplicationId applicationId)
specifier|public
name|AppID
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|super
argument_list|(
name|APP_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetAppId
operator|=
name|applicationId
expr_stmt|;
name|setScopeIfNotNull
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|targetAppId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|APP_ID
operator|.
name|toString
argument_list|()
operator|+
name|NAMESPACE_DELIMITER
operator|+
name|this
operator|.
name|targetAppId
return|;
block|}
block|}
comment|/**    * Parse namespace from a string. The string must be in legal format    * defined by each {@link AllocationTagNamespaceType}.    *    * @param namespaceStr namespace string.    * @return an instance of {@link AllocationTagNamespace}.    * @throws InvalidAllocationTagsQueryException    * if given string is not in valid format    */
DECL|method|parse (String namespaceStr)
specifier|public
specifier|static
name|AllocationTagNamespace
name|parse
parameter_list|(
name|String
name|namespaceStr
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
comment|// Return the default namespace if no valid string is given.
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|namespaceStr
argument_list|)
condition|)
block|{
return|return
operator|new
name|Self
argument_list|()
return|;
block|}
comment|// Normalize the input, escape additional chars.
name|List
argument_list|<
name|String
argument_list|>
name|nsValues
init|=
name|normalize
argument_list|(
name|namespaceStr
argument_list|)
decl_stmt|;
comment|// The first string should be the prefix.
name|String
name|nsPrefix
init|=
name|nsValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AllocationTagNamespaceType
name|allocationTagNamespaceType
init|=
name|fromString
argument_list|(
name|nsPrefix
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|allocationTagNamespaceType
condition|)
block|{
case|case
name|SELF
case|:
return|return
operator|new
name|Self
argument_list|()
return|;
case|case
name|NOT_SELF
case|:
return|return
operator|new
name|NotSelf
argument_list|()
return|;
case|case
name|ALL
case|:
return|return
operator|new
name|All
argument_list|()
return|;
case|case
name|APP_ID
case|:
if|if
condition|(
name|nsValues
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|InvalidAllocationTagsQueryException
argument_list|(
literal|"Missing the application ID in the namespace string: "
operator|+
name|namespaceStr
argument_list|)
throw|;
block|}
name|String
name|appIDStr
init|=
name|nsValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|parseAppID
argument_list|(
name|appIDStr
argument_list|)
return|;
case|case
name|APP_LABEL
case|:
return|return
operator|new
name|AppLabel
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|InvalidAllocationTagsQueryException
argument_list|(
literal|"Invalid namespace string "
operator|+
name|namespaceStr
argument_list|)
throw|;
block|}
block|}
DECL|method|fromString (String prefix)
specifier|private
specifier|static
name|AllocationTagNamespaceType
name|fromString
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
for|for
control|(
name|AllocationTagNamespaceType
name|type
range|:
name|AllocationTagNamespaceType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getTypeKeyword
argument_list|()
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|AllocationTagNamespaceType
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|InvalidAllocationTagsQueryException
argument_list|(
literal|"Invalid namespace prefix: "
operator|+
name|prefix
operator|+
literal|", valid values are: "
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|values
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|parseAppID (String appIDStr)
specifier|private
specifier|static
name|AllocationTagNamespace
name|parseAppID
parameter_list|(
name|String
name|appIDStr
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
try|try
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appIDStr
argument_list|)
decl_stmt|;
return|return
operator|new
name|AppID
argument_list|(
name|applicationId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidAllocationTagsQueryException
argument_list|(
literal|"Invalid application ID for "
operator|+
name|APP_ID
operator|.
name|getTypeKeyword
argument_list|()
operator|+
literal|": "
operator|+
name|appIDStr
argument_list|)
throw|;
block|}
block|}
comment|/**    * Valid given namespace string and parse it to a list of sub-strings    * that can be consumed by the parser according to the type of the    * namespace. Currently the size of return list should be either 1 or 2.    * Extra slash is escaped during the normalization.    *    * @param namespaceStr namespace string.    * @return a list of parsed strings.    * @throws InvalidAllocationTagsQueryException    * if namespace format is unexpected.    */
DECL|method|normalize (String namespaceStr)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|normalize
parameter_list|(
name|String
name|namespaceStr
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaceStr
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
name|String
index|[]
name|nsValues
init|=
name|namespaceStr
operator|.
name|split
argument_list|(
name|NAMESPACE_DELIMITER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|nsValues
control|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Currently we only allow 1 or 2 values for a namespace string
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|result
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|InvalidAllocationTagsQueryException
argument_list|(
literal|"Invalid namespace string: "
operator|+
name|namespaceStr
operator|+
literal|", the syntax is<namespace_prefix> or"
operator|+
literal|"<namespace_prefix>/<namespace_value>"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

