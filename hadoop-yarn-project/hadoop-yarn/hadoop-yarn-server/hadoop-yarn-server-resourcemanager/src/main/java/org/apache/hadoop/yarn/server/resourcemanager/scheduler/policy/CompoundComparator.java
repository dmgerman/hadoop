begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|*
import|;
end_import

begin_comment
comment|//Some policies will use multiple comparators joined together
end_comment

begin_class
DECL|class|CompoundComparator
class|class
name|CompoundComparator
implements|implements
name|Comparator
argument_list|<
name|SchedulableEntity
argument_list|>
block|{
DECL|field|comparators
name|List
argument_list|<
name|Comparator
argument_list|<
name|SchedulableEntity
argument_list|>
argument_list|>
name|comparators
decl_stmt|;
DECL|method|CompoundComparator (List<Comparator<SchedulableEntity>> comparators)
name|CompoundComparator
parameter_list|(
name|List
argument_list|<
name|Comparator
argument_list|<
name|SchedulableEntity
argument_list|>
argument_list|>
name|comparators
parameter_list|)
block|{
name|this
operator|.
name|comparators
operator|=
name|comparators
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (final SchedulableEntity r1, final SchedulableEntity r2)
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|SchedulableEntity
name|r1
parameter_list|,
specifier|final
name|SchedulableEntity
name|r2
parameter_list|)
block|{
for|for
control|(
name|Comparator
argument_list|<
name|SchedulableEntity
argument_list|>
name|comparator
range|:
name|comparators
control|)
block|{
name|int
name|result
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
return|return
name|result
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

