begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi.lifecycle
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|CsiAdaptorClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|CsiAdaptorClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|event
operator|.
name|VolumeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|event
operator|.
name|VolumeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|VolumeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * This class maintains the volume states and state transition  * according to the CSI volume lifecycle. Volume states are stored in  * {@link org.apache.hadoop.yarn.server.resourcemanager.volume.csi.VolumeStates}  * class.  */
end_comment

begin_class
DECL|class|VolumeImpl
specifier|public
class|class
name|VolumeImpl
implements|implements
name|Volume
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|VolumeState
argument_list|,
name|VolumeEventType
argument_list|,
name|VolumeEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|field|volumeId
specifier|private
specifier|final
name|VolumeId
name|volumeId
decl_stmt|;
DECL|field|volumeMeta
specifier|private
specifier|final
name|VolumeMetaData
name|volumeMeta
decl_stmt|;
DECL|field|client
specifier|private
name|CsiAdaptorClientProtocol
name|client
decl_stmt|;
DECL|method|VolumeImpl (VolumeMetaData volumeMeta)
specifier|public
name|VolumeImpl
parameter_list|(
name|VolumeMetaData
name|volumeMeta
parameter_list|)
block|{
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|volumeId
operator|=
name|volumeMeta
operator|.
name|getVolumeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|volumeMeta
operator|=
name|volumeMeta
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|createVolumeStateFactory
argument_list|()
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
operator|new
name|CsiAdaptorClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setClient (CsiAdaptorClientProtocol client)
specifier|public
name|void
name|setClient
parameter_list|(
name|CsiAdaptorClientProtocol
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|getClient ()
specifier|public
name|CsiAdaptorClientProtocol
name|getClient
parameter_list|()
block|{
return|return
name|this
operator|.
name|client
return|;
block|}
specifier|private
name|StateMachineFactory
argument_list|<
name|VolumeImpl
argument_list|,
name|VolumeState
argument_list|,
DECL|method|createVolumeStateFactory ()
name|VolumeEventType
argument_list|,
name|VolumeEvent
argument_list|>
name|createVolumeStateFactory
parameter_list|()
block|{
return|return
operator|new
name|StateMachineFactory
argument_list|<
name|VolumeImpl
argument_list|,
name|VolumeState
argument_list|,
name|VolumeEventType
argument_list|,
name|VolumeEvent
argument_list|>
argument_list|(
name|VolumeState
operator|.
name|NEW
argument_list|)
operator|.
name|addTransition
argument_list|(
name|VolumeState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|)
argument_list|,
name|VolumeEventType
operator|.
name|VALIDATE_VOLUME_EVENT
argument_list|,
operator|new
name|ValidateVolumeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|VolumeEventType
operator|.
name|VALIDATE_VOLUME_EVENT
argument_list|)
operator|.
name|addTransition
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|VolumeState
operator|.
name|NODE_READY
argument_list|,
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|)
argument_list|,
name|VolumeEventType
operator|.
name|CONTROLLER_PUBLISH_VOLUME_EVENT
argument_list|,
operator|new
name|ControllerPublishVolumeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|VolumeState
operator|.
name|VALIDATED
argument_list|)
argument_list|,
name|VolumeEventType
operator|.
name|VALIDATE_VOLUME_EVENT
argument_list|,
operator|new
name|ValidateVolumeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|VolumeEventType
operator|.
name|CONTROLLER_PUBLISH_VOLUME_EVENT
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|VolumeState
operator|.
name|NODE_READY
argument_list|,
name|VolumeState
operator|.
name|NODE_READY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|VolumeEventType
operator|.
name|CONTROLLER_PUBLISH_VOLUME_EVENT
argument_list|,
name|VolumeEventType
operator|.
name|VALIDATE_VOLUME_EVENT
argument_list|)
argument_list|)
operator|.
name|installTopology
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getVolumeState ()
specifier|public
name|VolumeState
name|getVolumeState
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getVolumeId ()
specifier|public
name|VolumeId
name|getVolumeId
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|volumeId
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ValidateVolumeTransition
specifier|private
specifier|static
class|class
name|ValidateVolumeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|VolumeImpl
argument_list|,
name|VolumeEvent
argument_list|,
name|VolumeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (VolumeImpl volume, VolumeEvent volumeEvent)
specifier|public
name|VolumeState
name|transition
parameter_list|(
name|VolumeImpl
name|volume
parameter_list|,
name|VolumeEvent
name|volumeEvent
parameter_list|)
block|{
try|try
block|{
comment|// this call could cross node, we should keep the message tight
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|validateVolume
argument_list|()
expr_stmt|;
return|return
name|VolumeState
operator|.
name|VALIDATED
return|;
block|}
catch|catch
parameter_list|(
name|VolumeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception while calling the CSI adaptor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|VolumeState
operator|.
name|UNAVAILABLE
return|;
block|}
block|}
block|}
DECL|class|ControllerPublishVolumeTransition
specifier|private
specifier|static
class|class
name|ControllerPublishVolumeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|VolumeImpl
argument_list|,
name|VolumeEvent
argument_list|,
name|VolumeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (VolumeImpl volume, VolumeEvent volumeEvent)
specifier|public
name|VolumeState
name|transition
parameter_list|(
name|VolumeImpl
name|volume
parameter_list|,
name|VolumeEvent
name|volumeEvent
parameter_list|)
block|{
try|try
block|{
comment|// this call could cross node, we should keep the message tight
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|controllerPublishVolume
argument_list|()
expr_stmt|;
return|return
name|VolumeState
operator|.
name|NODE_READY
return|;
block|}
catch|catch
parameter_list|(
name|VolumeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception while calling the CSI adaptor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|volume
operator|.
name|getVolumeState
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|handle (VolumeEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|VolumeEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|VolumeId
name|volumeId
init|=
name|event
operator|.
name|getVolumeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeId
operator|==
literal|null
condition|)
block|{
comment|// This should not happen, safely ignore the event
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected volume event received, event type is "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|", but the volumeId is null."
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing volume event, type="
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|", volumeId="
operator|+
name|volumeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeState
name|oldState
init|=
literal|null
decl_stmt|;
name|VolumeState
name|newState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oldState
operator|=
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
expr_stmt|;
name|newState
operator|=
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't handle this event at current state: Current: ["
operator|+
name|oldState
operator|+
literal|"], eventType: ["
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|"],"
operator|+
literal|" volumeId: ["
operator|+
name|volumeId
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newState
operator|!=
literal|null
operator|&&
name|oldState
operator|!=
name|newState
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"VolumeImpl "
operator|+
name|volumeId
operator|+
literal|" transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|newState
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

