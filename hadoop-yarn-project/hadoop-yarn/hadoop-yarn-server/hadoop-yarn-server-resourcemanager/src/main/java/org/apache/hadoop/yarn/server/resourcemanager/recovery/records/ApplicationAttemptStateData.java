begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationAttemptStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/*  * Contains the state data that needs to be persisted for an ApplicationAttempt  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ApplicationAttemptStateData
specifier|public
specifier|abstract
class|class
name|ApplicationAttemptStateData
block|{
DECL|method|newInstance ( ApplicationAttemptId attemptId, Container container, ByteBuffer attemptTokens, long startTime, RMAppAttemptState finalState, String finalTrackingUrl, String diagnostics, FinalApplicationStatus amUnregisteredFinalStatus, int exitStatus, long memorySeconds, long vcoreSeconds)
specifier|public
specifier|static
name|ApplicationAttemptStateData
name|newInstance
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Container
name|container
parameter_list|,
name|ByteBuffer
name|attemptTokens
parameter_list|,
name|long
name|startTime
parameter_list|,
name|RMAppAttemptState
name|finalState
parameter_list|,
name|String
name|finalTrackingUrl
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|FinalApplicationStatus
name|amUnregisteredFinalStatus
parameter_list|,
name|int
name|exitStatus
parameter_list|,
name|long
name|memorySeconds
parameter_list|,
name|long
name|vcoreSeconds
parameter_list|)
block|{
name|ApplicationAttemptStateData
name|attemptStateData
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationAttemptStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|attemptStateData
operator|.
name|setAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setMasterContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setAppAttemptTokens
argument_list|(
name|attemptTokens
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setState
argument_list|(
name|finalState
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setFinalTrackingUrl
argument_list|(
name|finalTrackingUrl
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setFinalApplicationStatus
argument_list|(
name|amUnregisteredFinalStatus
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setAMContainerExitStatus
argument_list|(
name|exitStatus
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setMemorySeconds
argument_list|(
name|memorySeconds
argument_list|)
expr_stmt|;
name|attemptStateData
operator|.
name|setVcoreSeconds
argument_list|(
name|vcoreSeconds
argument_list|)
expr_stmt|;
return|return
name|attemptStateData
return|;
block|}
DECL|method|newInstance ( ApplicationAttemptState attemptState)
specifier|public
specifier|static
name|ApplicationAttemptStateData
name|newInstance
parameter_list|(
name|ApplicationAttemptState
name|attemptState
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|credentials
init|=
name|attemptState
operator|.
name|getAppAttemptCredentials
argument_list|()
decl_stmt|;
name|ByteBuffer
name|appAttemptTokens
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|credentials
operator|!=
literal|null
condition|)
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|appAttemptTokens
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newInstance
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|appAttemptTokens
argument_list|,
name|attemptState
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getState
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getProto ()
specifier|public
specifier|abstract
name|ApplicationAttemptStateDataProto
name|getProto
parameter_list|()
function_decl|;
comment|/**    * The ApplicationAttemptId for the application attempt    * @return ApplicationAttemptId for the application attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAttemptId ()
specifier|public
specifier|abstract
name|ApplicationAttemptId
name|getAttemptId
parameter_list|()
function_decl|;
DECL|method|setAttemptId (ApplicationAttemptId attemptId)
specifier|public
specifier|abstract
name|void
name|setAttemptId
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
function_decl|;
comment|/*    * The master container running the application attempt    * @return Container that hosts the attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getMasterContainer ()
specifier|public
specifier|abstract
name|Container
name|getMasterContainer
parameter_list|()
function_decl|;
DECL|method|setMasterContainer (Container container)
specifier|public
specifier|abstract
name|void
name|setMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
function_decl|;
comment|/**    * The application attempt tokens that belong to this attempt    * @return The application attempt tokens that belong to this attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAppAttemptTokens ()
specifier|public
specifier|abstract
name|ByteBuffer
name|getAppAttemptTokens
parameter_list|()
function_decl|;
DECL|method|setAppAttemptTokens (ByteBuffer attemptTokens)
specifier|public
specifier|abstract
name|void
name|setAppAttemptTokens
parameter_list|(
name|ByteBuffer
name|attemptTokens
parameter_list|)
function_decl|;
comment|/**    * Get the final state of the application attempt.    * @return the final state of the application attempt.    */
DECL|method|getState ()
specifier|public
specifier|abstract
name|RMAppAttemptState
name|getState
parameter_list|()
function_decl|;
DECL|method|setState (RMAppAttemptState state)
specifier|public
specifier|abstract
name|void
name|setState
parameter_list|(
name|RMAppAttemptState
name|state
parameter_list|)
function_decl|;
comment|/**    * Get the original not-proxied<em>final tracking url</em> for the    * application. This is intended to only be used by the proxy itself.    *     * @return the original not-proxied<em>final tracking url</em> for the    *         application    */
DECL|method|getFinalTrackingUrl ()
specifier|public
specifier|abstract
name|String
name|getFinalTrackingUrl
parameter_list|()
function_decl|;
comment|/**    * Set the final tracking Url of the AM.    * @param url    */
DECL|method|setFinalTrackingUrl (String url)
specifier|public
specifier|abstract
name|void
name|setFinalTrackingUrl
parameter_list|(
name|String
name|url
parameter_list|)
function_decl|;
comment|/**    * Get the<em>diagnositic information</em> of the attempt     * @return<em>diagnositic information</em> of the attempt    */
DECL|method|getDiagnostics ()
specifier|public
specifier|abstract
name|String
name|getDiagnostics
parameter_list|()
function_decl|;
DECL|method|setDiagnostics (String diagnostics)
specifier|public
specifier|abstract
name|void
name|setDiagnostics
parameter_list|(
name|String
name|diagnostics
parameter_list|)
function_decl|;
comment|/**    * Get the<em>start time</em> of the application.    * @return<em>start time</em> of the application    */
DECL|method|getStartTime ()
specifier|public
specifier|abstract
name|long
name|getStartTime
parameter_list|()
function_decl|;
DECL|method|setStartTime (long startTime)
specifier|public
specifier|abstract
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
function_decl|;
comment|/**    * Get the<em>final finish status</em> of the application.    * @return<em>final finish status</em> of the application    */
DECL|method|getFinalApplicationStatus ()
specifier|public
specifier|abstract
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
function_decl|;
DECL|method|setFinalApplicationStatus ( FinalApplicationStatus finishState)
specifier|public
specifier|abstract
name|void
name|setFinalApplicationStatus
parameter_list|(
name|FinalApplicationStatus
name|finishState
parameter_list|)
function_decl|;
DECL|method|getAMContainerExitStatus ()
specifier|public
specifier|abstract
name|int
name|getAMContainerExitStatus
parameter_list|()
function_decl|;
DECL|method|setAMContainerExitStatus (int exitStatus)
specifier|public
specifier|abstract
name|void
name|setAMContainerExitStatus
parameter_list|(
name|int
name|exitStatus
parameter_list|)
function_decl|;
comment|/**    * Get the<em>memory seconds</em> (in MB seconds) of the application.    * @return<em>memory seconds</em> (in MB seconds) of the application    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getMemorySeconds ()
specifier|public
specifier|abstract
name|long
name|getMemorySeconds
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setMemorySeconds (long memorySeconds)
specifier|public
specifier|abstract
name|void
name|setMemorySeconds
parameter_list|(
name|long
name|memorySeconds
parameter_list|)
function_decl|;
comment|/**    * Get the<em>vcore seconds</em> of the application.    * @return<em>vcore seconds</em> of the application    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getVcoreSeconds ()
specifier|public
specifier|abstract
name|long
name|getVcoreSeconds
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setVcoreSeconds (long vcoreSeconds)
specifier|public
specifier|abstract
name|void
name|setVcoreSeconds
parameter_list|(
name|long
name|vcoreSeconds
parameter_list|)
function_decl|;
block|}
end_class

end_unit

