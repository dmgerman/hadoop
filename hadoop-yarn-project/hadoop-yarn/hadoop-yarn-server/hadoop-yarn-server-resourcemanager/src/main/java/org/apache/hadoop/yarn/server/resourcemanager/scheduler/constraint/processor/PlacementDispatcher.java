begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.processor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithmOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|ConstraintPlacementAlgorithmOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|PlacedSchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|api
operator|.
name|SchedulingRequestWithPlacementAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_comment
comment|/**  * This class initializes the Constraint Placement Algorithm. It dispatches  * input to the algorithm and collects output from it.  */
end_comment

begin_class
DECL|class|PlacementDispatcher
class|class
name|PlacementDispatcher
implements|implements
name|ConstraintPlacementAlgorithmOutputCollector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PlacementDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|algorithm
specifier|private
name|ConstraintPlacementAlgorithm
name|algorithm
decl_stmt|;
DECL|field|algorithmThreadPool
specifier|private
name|ExecutorService
name|algorithmThreadPool
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|PlacedSchedulingRequest
argument_list|>
argument_list|>
DECL|field|placedRequests
name|placedRequests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|SchedulingRequestWithPlacementAttempt
argument_list|>
argument_list|>
DECL|field|rejectedRequests
name|rejectedRequests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|init (RMContext rmContext, ConstraintPlacementAlgorithm placementAlgorithm, int poolSize)
specifier|public
name|void
name|init
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|ConstraintPlacementAlgorithm
name|placementAlgorithm
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Constraint Placement Planner:"
argument_list|)
expr_stmt|;
name|this
operator|.
name|algorithm
operator|=
name|placementAlgorithm
expr_stmt|;
name|this
operator|.
name|algorithm
operator|.
name|init
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|algorithmThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
block|}
DECL|method|dispatch (final BatchedRequests batchedRequests)
name|void
name|dispatch
parameter_list|(
specifier|final
name|BatchedRequests
name|batchedRequests
parameter_list|)
block|{
specifier|final
name|ConstraintPlacementAlgorithmOutputCollector
name|collector
init|=
name|this
decl_stmt|;
name|Runnable
name|placingTask
init|=
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got [{}] requests to place from application [{}].. "
operator|+
literal|"Attempt count [{}]"
argument_list|,
name|batchedRequests
operator|.
name|getSchedulingRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|batchedRequests
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|batchedRequests
operator|.
name|getPlacementAttempt
argument_list|()
argument_list|)
expr_stmt|;
name|algorithm
operator|.
name|place
argument_list|(
name|batchedRequests
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|this
operator|.
name|algorithmThreadPool
operator|.
name|submit
argument_list|(
name|placingTask
argument_list|)
expr_stmt|;
block|}
DECL|method|pullPlacedRequests ( ApplicationId applicationId)
specifier|public
name|List
argument_list|<
name|PlacedSchedulingRequest
argument_list|>
name|pullPlacedRequests
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|List
argument_list|<
name|PlacedSchedulingRequest
argument_list|>
name|placedReqs
init|=
name|this
operator|.
name|placedRequests
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|placedReqs
operator|!=
literal|null
operator|&&
operator|!
name|placedReqs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PlacedSchedulingRequest
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|placedReqs
init|)
block|{
if|if
condition|(
name|placedReqs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|retList
operator|.
name|addAll
argument_list|(
name|placedReqs
argument_list|)
expr_stmt|;
name|placedReqs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retList
return|;
block|}
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
DECL|method|pullRejectedRequests ( ApplicationId applicationId)
specifier|public
name|List
argument_list|<
name|SchedulingRequestWithPlacementAttempt
argument_list|>
name|pullRejectedRequests
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|List
argument_list|<
name|SchedulingRequestWithPlacementAttempt
argument_list|>
name|rejectedReqs
init|=
name|this
operator|.
name|rejectedRequests
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rejectedReqs
operator|!=
literal|null
operator|&&
operator|!
name|rejectedReqs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SchedulingRequestWithPlacementAttempt
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|rejectedReqs
init|)
block|{
if|if
condition|(
name|rejectedReqs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|retList
operator|.
name|addAll
argument_list|(
name|rejectedReqs
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retList
return|;
block|}
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
DECL|method|clearApplicationState (ApplicationId applicationId)
name|void
name|clearApplicationState
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|placedRequests
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|rejectedRequests
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect (ConstraintPlacementAlgorithmOutput placement)
specifier|public
name|void
name|collect
parameter_list|(
name|ConstraintPlacementAlgorithmOutput
name|placement
parameter_list|)
block|{
if|if
condition|(
operator|!
name|placement
operator|.
name|getPlacedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PlacedSchedulingRequest
argument_list|>
name|processed
init|=
name|placedRequests
operator|.
name|computeIfAbsent
argument_list|(
name|placement
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|processed
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Planning Algorithm has placed for application [{}]"
operator|+
literal|" the following [{}]"
argument_list|,
name|placement
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|placement
operator|.
name|getPlacedRequests
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PlacedSchedulingRequest
name|esr
range|:
name|placement
operator|.
name|getPlacedRequests
argument_list|()
control|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|esr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|placement
operator|.
name|getRejectedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SchedulingRequestWithPlacementAttempt
argument_list|>
name|rejected
init|=
name|rejectedRequests
operator|.
name|computeIfAbsent
argument_list|(
name|placement
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Planning Algorithm has rejected for application [{}]"
operator|+
literal|" the following [{}]"
argument_list|,
name|placement
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|placement
operator|.
name|getRejectedRequests
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|rejected
init|)
block|{
name|rejected
operator|.
name|addAll
argument_list|(
name|placement
operator|.
name|getRejectedRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

