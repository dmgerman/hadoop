begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AppSchedulable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueueManager
import|;
end_import

begin_class
DECL|class|FairSchedulerQueueInfo
specifier|public
class|class
name|FairSchedulerQueueInfo
block|{
DECL|field|numPendingApps
specifier|private
name|int
name|numPendingApps
decl_stmt|;
DECL|field|numActiveApps
specifier|private
name|int
name|numActiveApps
decl_stmt|;
DECL|field|fairShare
specifier|private
name|int
name|fairShare
decl_stmt|;
DECL|field|minShare
specifier|private
name|int
name|minShare
decl_stmt|;
DECL|field|maxShare
specifier|private
name|int
name|maxShare
decl_stmt|;
DECL|field|clusterMaxMem
specifier|private
name|int
name|clusterMaxMem
decl_stmt|;
DECL|field|maxApps
specifier|private
name|int
name|maxApps
decl_stmt|;
DECL|field|fractionUsed
specifier|private
name|float
name|fractionUsed
decl_stmt|;
DECL|field|fractionFairShare
specifier|private
name|float
name|fractionFairShare
decl_stmt|;
DECL|field|fractionMinShare
specifier|private
name|float
name|fractionMinShare
decl_stmt|;
DECL|field|minResources
specifier|private
name|Resource
name|minResources
decl_stmt|;
DECL|field|maxResources
specifier|private
name|Resource
name|maxResources
decl_stmt|;
DECL|field|usedResources
specifier|private
name|Resource
name|usedResources
decl_stmt|;
DECL|field|queueName
specifier|private
name|String
name|queueName
decl_stmt|;
DECL|method|FairSchedulerQueueInfo (FSLeafQueue queue, FairScheduler scheduler)
specifier|public
name|FairSchedulerQueueInfo
parameter_list|(
name|FSLeafQueue
name|queue
parameter_list|,
name|FairScheduler
name|scheduler
parameter_list|)
block|{
name|Collection
argument_list|<
name|AppSchedulable
argument_list|>
name|apps
init|=
name|queue
operator|.
name|getAppSchedulables
argument_list|()
decl_stmt|;
for|for
control|(
name|AppSchedulable
name|app
range|:
name|apps
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getApp
argument_list|()
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|numPendingApps
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numActiveApps
operator|++
expr_stmt|;
block|}
block|}
name|QueueManager
name|manager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueName
operator|=
name|queue
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Resource
name|clusterMax
init|=
name|scheduler
operator|.
name|getClusterCapacity
argument_list|()
decl_stmt|;
name|clusterMaxMem
operator|=
name|clusterMax
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|usedResources
operator|=
name|queue
operator|.
name|getResourceUsage
argument_list|()
expr_stmt|;
name|fractionUsed
operator|=
operator|(
name|float
operator|)
name|usedResources
operator|.
name|getMemory
argument_list|()
operator|/
name|clusterMaxMem
expr_stmt|;
name|fairShare
operator|=
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|minResources
operator|=
name|queue
operator|.
name|getMinShare
argument_list|()
expr_stmt|;
name|minShare
operator|=
name|minResources
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|maxResources
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getMaxResources
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxResources
operator|.
name|getMemory
argument_list|()
operator|>
name|clusterMaxMem
condition|)
block|{
name|maxResources
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|clusterMaxMem
argument_list|)
expr_stmt|;
block|}
name|maxShare
operator|=
name|maxResources
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|fractionFairShare
operator|=
operator|(
name|float
operator|)
name|fairShare
operator|/
name|clusterMaxMem
expr_stmt|;
name|fractionMinShare
operator|=
operator|(
name|float
operator|)
name|minShare
operator|/
name|clusterMaxMem
expr_stmt|;
name|maxApps
operator|=
name|manager
operator|.
name|getQueueMaxApps
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the fair share as a fraction of the entire cluster capacity.    */
DECL|method|getFairShareFraction ()
specifier|public
name|float
name|getFairShareFraction
parameter_list|()
block|{
return|return
name|fractionFairShare
return|;
block|}
comment|/**    * Returns the fair share of this queue in megabytes.    */
DECL|method|getFairShare ()
specifier|public
name|int
name|getFairShare
parameter_list|()
block|{
return|return
name|fairShare
return|;
block|}
DECL|method|getNumActiveApplications ()
specifier|public
name|int
name|getNumActiveApplications
parameter_list|()
block|{
return|return
name|numPendingApps
return|;
block|}
DECL|method|getNumPendingApplications ()
specifier|public
name|int
name|getNumPendingApplications
parameter_list|()
block|{
return|return
name|numActiveApps
return|;
block|}
DECL|method|getMinResources ()
specifier|public
name|Resource
name|getMinResources
parameter_list|()
block|{
return|return
name|minResources
return|;
block|}
DECL|method|getMaxResources ()
specifier|public
name|Resource
name|getMaxResources
parameter_list|()
block|{
return|return
name|maxResources
return|;
block|}
DECL|method|getMaxApplications ()
specifier|public
name|int
name|getMaxApplications
parameter_list|()
block|{
return|return
name|maxApps
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
DECL|method|getUsedResources ()
specifier|public
name|Resource
name|getUsedResources
parameter_list|()
block|{
return|return
name|usedResources
return|;
block|}
comment|/**    * Returns the queue's min share in as a fraction of the entire    * cluster capacity.    */
DECL|method|getMinShareFraction ()
specifier|public
name|float
name|getMinShareFraction
parameter_list|()
block|{
return|return
name|fractionMinShare
return|;
block|}
comment|/**    * Returns the memory used by this queue as a fraction of the entire     * cluster capacity.    */
DECL|method|getUsedFraction ()
specifier|public
name|float
name|getUsedFraction
parameter_list|()
block|{
return|return
name|fractionUsed
return|;
block|}
comment|/**    * Returns the capacity of this queue as a fraction of the entire cluster     * capacity.    */
DECL|method|getMaxResourcesFraction ()
specifier|public
name|float
name|getMaxResourcesFraction
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|maxShare
operator|/
name|clusterMaxMem
return|;
block|}
block|}
end_class

end_unit

