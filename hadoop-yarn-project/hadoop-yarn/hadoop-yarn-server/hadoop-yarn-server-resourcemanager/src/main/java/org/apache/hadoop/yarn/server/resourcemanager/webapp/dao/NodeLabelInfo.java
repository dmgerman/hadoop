begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"nodeLabelInfo"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|NodeLabelInfo
specifier|public
class|class
name|NodeLabelInfo
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|exclusivity
specifier|private
name|boolean
name|exclusivity
decl_stmt|;
DECL|method|NodeLabelInfo ()
specifier|public
name|NodeLabelInfo
parameter_list|()
block|{
comment|// JAXB needs this
block|}
DECL|method|NodeLabelInfo (String name)
specifier|public
name|NodeLabelInfo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|exclusivity
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|NodeLabelInfo (String name, boolean exclusivity)
specifier|public
name|NodeLabelInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|exclusivity
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|exclusivity
operator|=
name|exclusivity
expr_stmt|;
block|}
DECL|method|NodeLabelInfo (NodeLabel label)
specifier|public
name|NodeLabelInfo
parameter_list|(
name|NodeLabel
name|label
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|label
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|exclusivity
operator|=
name|label
operator|.
name|isExclusive
argument_list|()
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getExclusivity ()
specifier|public
name|boolean
name|getExclusivity
parameter_list|()
block|{
return|return
name|exclusivity
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeLabelInfo
name|other
init|=
operator|(
name|NodeLabelInfo
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getExclusivity
argument_list|()
operator|!=
name|other
operator|.
name|getExclusivity
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|<<
literal|16
operator|)
operator|+
operator|(
name|getExclusivity
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

