begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerReservedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_comment
comment|/**  * Represents an application attempt from the viewpoint of the scheduler.  * Each running app attempt in the RM corresponds to one instance  * of this class.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SchedulerApplicationAttempt
specifier|public
class|class
name|SchedulerApplicationAttempt
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchedulerApplicationAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appSchedulingInfo
specifier|protected
specifier|final
name|AppSchedulingInfo
name|appSchedulingInfo
decl_stmt|;
DECL|field|liveContainers
specifier|protected
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
name|liveContainers
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reservedContainers
specifier|protected
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
argument_list|>
name|reservedContainers
init|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reReservations
specifier|private
specifier|final
name|Multiset
argument_list|<
name|Priority
argument_list|>
name|reReservations
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|currentReservation
specifier|protected
specifier|final
name|Resource
name|currentReservation
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|resourceLimit
specifier|private
name|Resource
name|resourceLimit
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|currentConsumption
specifier|protected
name|Resource
name|currentConsumption
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|amResource
specifier|private
name|Resource
name|amResource
decl_stmt|;
DECL|field|unmanagedAM
specifier|private
name|boolean
name|unmanagedAM
init|=
literal|true
decl_stmt|;
DECL|field|newlyAllocatedContainers
specifier|protected
name|List
argument_list|<
name|RMContainer
argument_list|>
name|newlyAllocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Count how many times the application has been given an opportunity    * to schedule a task at each priority. Each time the scheduler    * asks the application for a task at this priority, it is incremented,    * and each time the application successfully schedules a task, it    * is reset to 0.    */
DECL|field|schedulingOpportunities
name|Multiset
argument_list|<
name|Priority
argument_list|>
name|schedulingOpportunities
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Time of the last container scheduled at the current allowed level
DECL|field|lastScheduledContainer
specifier|protected
name|Map
argument_list|<
name|Priority
argument_list|,
name|Long
argument_list|>
name|lastScheduledContainer
init|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|queue
specifier|protected
name|Queue
name|queue
decl_stmt|;
DECL|field|isStopped
specifier|protected
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|;
DECL|field|rmContext
specifier|protected
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|SchedulerApplicationAttempt (ApplicationAttemptId applicationAttemptId, String user, Queue queue, ActiveUsersManager activeUsersManager, RMContext rmContext)
specifier|public
name|SchedulerApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|appSchedulingInfo
operator|=
operator|new
name|AppSchedulingInfo
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|activeUsersManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
if|if
condition|(
name|rmContext
operator|!=
literal|null
operator|&&
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|!=
literal|null
operator|&&
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|containsKey
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|ApplicationSubmissionContext
name|appSubmissionContext
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|appSubmissionContext
operator|!=
literal|null
condition|)
block|{
name|amResource
operator|=
name|appSubmissionContext
operator|.
name|getResource
argument_list|()
expr_stmt|;
name|unmanagedAM
operator|=
name|appSubmissionContext
operator|.
name|getUnmanagedAM
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the live containers of the application.    * @return live containers of the application    */
DECL|method|getLiveContainers ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|getLiveContainers
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|(
name|liveContainers
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Is this application pending?    * @return true if it is else false.    */
DECL|method|isPending ()
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|isPending
argument_list|()
return|;
block|}
comment|/**    * Get {@link ApplicationAttemptId} of the application master.    * @return<code>ApplicationAttemptId</code> of the application master    */
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|getApplicationAttemptId
argument_list|()
return|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|getUser
argument_list|()
return|;
block|}
DECL|method|getResourceRequests (Priority priority)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|getResourceRequests
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|appSchedulingInfo
operator|.
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|getNewContainerId ()
specifier|public
name|int
name|getNewContainerId
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|getNewContainerId
argument_list|()
return|;
block|}
DECL|method|getPriorities ()
specifier|public
name|Collection
argument_list|<
name|Priority
argument_list|>
name|getPriorities
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|getPriorities
argument_list|()
return|;
block|}
DECL|method|getResourceRequest (Priority priority, String resourceName)
specifier|public
specifier|synchronized
name|ResourceRequest
name|getResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|this
operator|.
name|appSchedulingInfo
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|resourceName
argument_list|)
return|;
block|}
DECL|method|getTotalRequiredResources (Priority priority)
specifier|public
specifier|synchronized
name|int
name|getTotalRequiredResources
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|getNumContainers
argument_list|()
return|;
block|}
DECL|method|getResource (Priority priority)
specifier|public
specifier|synchronized
name|Resource
name|getResource
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|appSchedulingInfo
operator|.
name|getResource
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|appSchedulingInfo
operator|.
name|getQueueName
argument_list|()
return|;
block|}
DECL|method|getAMResource ()
specifier|public
name|Resource
name|getAMResource
parameter_list|()
block|{
return|return
name|amResource
return|;
block|}
DECL|method|getUnmanagedAM ()
specifier|public
name|boolean
name|getUnmanagedAM
parameter_list|()
block|{
return|return
name|unmanagedAM
return|;
block|}
DECL|method|getRMContainer (ContainerId id)
specifier|public
specifier|synchronized
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|id
parameter_list|)
block|{
return|return
name|liveContainers
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|resetReReservations (Priority priority)
specifier|protected
specifier|synchronized
name|void
name|resetReReservations
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|reReservations
operator|.
name|setCount
argument_list|(
name|priority
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|addReReservation (Priority priority)
specifier|protected
specifier|synchronized
name|void
name|addReReservation
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|reReservations
operator|.
name|add
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
DECL|method|getReReservations (Priority priority)
specifier|public
specifier|synchronized
name|int
name|getReReservations
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|reReservations
operator|.
name|count
argument_list|(
name|priority
argument_list|)
return|;
block|}
comment|/**    * Get total current reservations.    * Used only by unit tests    * @return total current reservations    */
annotation|@
name|Stable
annotation|@
name|Private
DECL|method|getCurrentReservation ()
specifier|public
specifier|synchronized
name|Resource
name|getCurrentReservation
parameter_list|()
block|{
return|return
name|currentReservation
return|;
block|}
DECL|method|getQueue ()
specifier|public
name|Queue
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
DECL|method|updateResourceRequests ( List<ResourceRequest> requests)
specifier|public
specifier|synchronized
name|void
name|updateResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isStopped
condition|)
block|{
name|appSchedulingInfo
operator|.
name|updateResourceRequests
argument_list|(
name|requests
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stop (RMAppAttemptState rmAppAttemptFinalState)
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|(
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|)
block|{
comment|// Cleanup all scheduling information
name|isStopped
operator|=
literal|true
expr_stmt|;
name|appSchedulingInfo
operator|.
name|stop
argument_list|(
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
block|}
DECL|method|isStopped ()
specifier|public
specifier|synchronized
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|isStopped
return|;
block|}
comment|/**    * Get the list of reserved containers    * @return All of the reserved containers.    */
DECL|method|getReservedContainers ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RMContainer
argument_list|>
name|getReservedContainers
parameter_list|()
block|{
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
argument_list|>
name|e
range|:
name|this
operator|.
name|reservedContainers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reservedContainers
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reservedContainers
return|;
block|}
DECL|method|reserve (SchedulerNode node, Priority priority, RMContainer rmContainer, Container container)
specifier|public
specifier|synchronized
name|RMContainer
name|reserve
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Create RMContainer if necessary
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|rmContainer
operator|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|appSchedulingInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|currentReservation
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset the re-reservation count
name|resetReReservations
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Note down the re-reservation
name|addReReservation
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerReservedEvent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|==
literal|null
condition|)
block|{
name|reservedContainers
operator|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|reservedContainers
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|reservedContainers
argument_list|)
expr_stmt|;
block|}
name|reservedContainers
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application attempt "
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" reserved container "
operator|+
name|rmContainer
operator|+
literal|" on node "
operator|+
name|node
operator|+
literal|". This attempt currently has "
operator|+
name|reservedContainers
operator|.
name|size
argument_list|()
operator|+
literal|" reserved containers at priority "
operator|+
name|priority
operator|+
literal|"; currentReservation "
operator|+
name|currentReservation
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rmContainer
return|;
block|}
comment|/**    * Has the application reserved the given<code>node</code> at the    * given<code>priority</code>?    * @param node node to be checked    * @param priority priority of reserved container    * @return true is reserved, false if not    */
DECL|method|isReserved (SchedulerNode node, Priority priority)
specifier|public
specifier|synchronized
name|boolean
name|isReserved
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|!=
literal|null
condition|)
block|{
return|return
name|reservedContainers
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|setHeadroom (Resource globalLimit)
specifier|public
specifier|synchronized
name|void
name|setHeadroom
parameter_list|(
name|Resource
name|globalLimit
parameter_list|)
block|{
name|this
operator|.
name|resourceLimit
operator|=
name|globalLimit
expr_stmt|;
block|}
comment|/**    * Get available headroom in terms of resources for the application's user.    * @return available resource headroom    */
DECL|method|getHeadroom ()
specifier|public
specifier|synchronized
name|Resource
name|getHeadroom
parameter_list|()
block|{
comment|// Corner case to deal with applications being slightly over-limit
if|if
condition|(
name|resourceLimit
operator|.
name|getMemory
argument_list|()
operator|<
literal|0
condition|)
block|{
name|resourceLimit
operator|.
name|setMemory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceLimit
return|;
block|}
DECL|method|getNumReservedContainers (Priority priority)
specifier|public
specifier|synchronized
name|int
name|getNumReservedContainers
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
return|return
operator|(
name|reservedContainers
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|reservedContainers
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerLaunchedOnNode (ContainerId containerId, NodeId nodeId)
specifier|public
specifier|synchronized
name|void
name|containerLaunchedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
comment|// Inform the container
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
comment|// Some unknown container sneaked into the system. Kill it.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|nodeId
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|containerId
argument_list|,
name|RMContainerEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|showRequests ()
specifier|public
specifier|synchronized
name|void
name|showRequests
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Priority
name|priority
range|:
name|getPriorities
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|requests
init|=
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"showRequests:"
operator|+
literal|" application="
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" headRoom="
operator|+
name|getHeadroom
argument_list|()
operator|+
literal|" currentConsumption="
operator|+
name|currentConsumption
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
operator|.
name|values
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"showRequests:"
operator|+
literal|" application="
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" request="
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getCurrentConsumption ()
specifier|public
name|Resource
name|getCurrentConsumption
parameter_list|()
block|{
return|return
name|currentConsumption
return|;
block|}
DECL|class|ContainersAndNMTokensAllocation
specifier|public
specifier|static
class|class
name|ContainersAndNMTokensAllocation
block|{
DECL|field|containerList
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
decl_stmt|;
DECL|field|nmTokenList
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokenList
decl_stmt|;
DECL|method|ContainersAndNMTokensAllocation (List<Container> containerList, List<NMToken> nmTokenList)
specifier|public
name|ContainersAndNMTokensAllocation
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
parameter_list|,
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokenList
parameter_list|)
block|{
name|this
operator|.
name|containerList
operator|=
name|containerList
expr_stmt|;
name|this
operator|.
name|nmTokenList
operator|=
name|nmTokenList
expr_stmt|;
block|}
DECL|method|getContainerList ()
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getContainerList
parameter_list|()
block|{
return|return
name|containerList
return|;
block|}
DECL|method|getNMTokenList ()
specifier|public
name|List
argument_list|<
name|NMToken
argument_list|>
name|getNMTokenList
parameter_list|()
block|{
return|return
name|nmTokenList
return|;
block|}
block|}
comment|// Create container token and NMToken altogether, if either of them fails for
comment|// some reason like DNS unavailable, do not return this container and keep it
comment|// in the newlyAllocatedContainers waiting to be refetched.
specifier|public
specifier|synchronized
name|ContainersAndNMTokensAllocation
DECL|method|pullNewlyAllocatedContainersAndNMTokens ()
name|pullNewlyAllocatedContainersAndNMTokens
parameter_list|()
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|returnContainerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|(
name|newlyAllocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|i
init|=
name|newlyAllocatedContainers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create container token and NMToken altogether.
name|container
operator|.
name|setContainerToken
argument_list|(
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|createContainerToken
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|getUser
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NMToken
name|nmToken
init|=
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|createAndGetNMToken
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|nmToken
operator|!=
literal|null
condition|)
block|{
name|nmTokens
operator|.
name|add
argument_list|(
name|nmToken
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// DNS might be down, skip returning this container.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to assign container token and NM token to"
operator|+
literal|" an allocated container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|returnContainerList
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|RMContainerEventType
operator|.
name|ACQUIRED
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ContainersAndNMTokensAllocation
argument_list|(
name|returnContainerList
argument_list|,
name|nmTokens
argument_list|)
return|;
block|}
DECL|method|updateBlacklist ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
specifier|synchronized
name|void
name|updateBlacklist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isStopped
condition|)
block|{
name|this
operator|.
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isBlacklisted (String resourceName)
specifier|public
name|boolean
name|isBlacklisted
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|this
operator|.
name|appSchedulingInfo
operator|.
name|isBlacklisted
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
DECL|method|addSchedulingOpportunity (Priority priority)
specifier|public
specifier|synchronized
name|void
name|addSchedulingOpportunity
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|schedulingOpportunities
operator|.
name|setCount
argument_list|(
name|priority
argument_list|,
name|schedulingOpportunities
operator|.
name|count
argument_list|(
name|priority
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|subtractSchedulingOpportunity (Priority priority)
specifier|public
specifier|synchronized
name|void
name|subtractSchedulingOpportunity
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|int
name|count
init|=
name|schedulingOpportunities
operator|.
name|count
argument_list|(
name|priority
argument_list|)
operator|-
literal|1
decl_stmt|;
name|this
operator|.
name|schedulingOpportunities
operator|.
name|setCount
argument_list|(
name|priority
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|count
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the number of times the application has been given an opportunity    * to schedule a task at the given priority since the last time it    * successfully did so.    */
DECL|method|getSchedulingOpportunities (Priority priority)
specifier|public
specifier|synchronized
name|int
name|getSchedulingOpportunities
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|schedulingOpportunities
operator|.
name|count
argument_list|(
name|priority
argument_list|)
return|;
block|}
comment|/**    * Should be called when an application has successfully scheduled a container,    * or when the scheduling locality threshold is relaxed.    * Reset various internal counters which affect delay scheduling    *    * @param priority The priority of the container scheduled.    */
DECL|method|resetSchedulingOpportunities (Priority priority)
specifier|public
specifier|synchronized
name|void
name|resetSchedulingOpportunities
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// used for continuous scheduling
DECL|method|resetSchedulingOpportunities (Priority priority, long currentTimeMs)
specifier|public
specifier|synchronized
name|void
name|resetSchedulingOpportunities
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|long
name|currentTimeMs
parameter_list|)
block|{
name|lastScheduledContainer
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|currentTimeMs
argument_list|)
expr_stmt|;
name|schedulingOpportunities
operator|.
name|setCount
argument_list|(
name|priority
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getResourceUsageReport ()
specifier|public
specifier|synchronized
name|ApplicationResourceUsageReport
name|getResourceUsageReport
parameter_list|()
block|{
return|return
name|ApplicationResourceUsageReport
operator|.
name|newInstance
argument_list|(
name|liveContainers
operator|.
name|size
argument_list|()
argument_list|,
name|reservedContainers
operator|.
name|size
argument_list|()
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|currentConsumption
argument_list|)
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|currentReservation
argument_list|)
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|currentConsumption
argument_list|,
name|currentReservation
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLiveContainersMap ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
name|getLiveContainersMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|liveContainers
return|;
block|}
DECL|method|getResourceLimit ()
specifier|public
specifier|synchronized
name|Resource
name|getResourceLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceLimit
return|;
block|}
DECL|method|getLastScheduledContainer ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|Priority
argument_list|,
name|Long
argument_list|>
name|getLastScheduledContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastScheduledContainer
return|;
block|}
DECL|method|transferStateFromPreviousAttempt ( SchedulerApplicationAttempt appAttempt)
specifier|public
specifier|synchronized
name|void
name|transferStateFromPreviousAttempt
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|)
block|{
name|this
operator|.
name|liveContainers
operator|=
name|appAttempt
operator|.
name|getLiveContainersMap
argument_list|()
expr_stmt|;
comment|// this.reReservations = appAttempt.reReservations;
name|this
operator|.
name|currentConsumption
operator|=
name|appAttempt
operator|.
name|getCurrentConsumption
argument_list|()
expr_stmt|;
name|this
operator|.
name|resourceLimit
operator|=
name|appAttempt
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
comment|// this.currentReservation = appAttempt.currentReservation;
comment|// this.newlyAllocatedContainers = appAttempt.newlyAllocatedContainers;
comment|// this.schedulingOpportunities = appAttempt.schedulingOpportunities;
name|this
operator|.
name|lastScheduledContainer
operator|=
name|appAttempt
operator|.
name|getLastScheduledContainer
argument_list|()
expr_stmt|;
name|this
operator|.
name|appSchedulingInfo
operator|.
name|transferStateFromPreviousAppSchedulingInfo
argument_list|(
name|appAttempt
operator|.
name|appSchedulingInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|move (Queue newQueue)
specifier|public
specifier|synchronized
name|void
name|move
parameter_list|(
name|Queue
name|newQueue
parameter_list|)
block|{
name|QueueMetrics
name|oldMetrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|QueueMetrics
name|newMetrics
init|=
name|newQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|getUser
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|liveContainer
range|:
name|liveContainers
operator|.
name|values
argument_list|()
control|)
block|{
name|Resource
name|resource
init|=
name|liveContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|oldMetrics
operator|.
name|releaseResources
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|resource
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|map
range|:
name|reservedContainers
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|RMContainer
name|reservedContainer
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|Resource
name|resource
init|=
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
decl_stmt|;
name|oldMetrics
operator|.
name|unreserveResource
argument_list|(
name|user
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|reserveResource
argument_list|(
name|user
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
name|appSchedulingInfo
operator|.
name|move
argument_list|(
name|newQueue
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|newQueue
expr_stmt|;
block|}
block|}
end_class

end_unit

