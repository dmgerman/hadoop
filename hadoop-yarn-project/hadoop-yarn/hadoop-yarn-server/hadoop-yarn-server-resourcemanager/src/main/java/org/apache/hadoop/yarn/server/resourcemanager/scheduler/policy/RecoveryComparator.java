begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * A Comparator which orders SchedulableEntities by isRecovering flag.  */
end_comment

begin_class
DECL|class|RecoveryComparator
specifier|public
class|class
name|RecoveryComparator
implements|implements
name|Comparator
argument_list|<
name|SchedulableEntity
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (SchedulableEntity se1, SchedulableEntity se2)
specifier|public
name|int
name|compare
parameter_list|(
name|SchedulableEntity
name|se1
parameter_list|,
name|SchedulableEntity
name|se2
parameter_list|)
block|{
name|int
name|val1
init|=
name|se1
operator|.
name|isRecovering
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|val2
init|=
name|se2
operator|.
name|isRecovering
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
name|val2
operator|-
name|val1
return|;
block|}
block|}
end_class

end_unit

