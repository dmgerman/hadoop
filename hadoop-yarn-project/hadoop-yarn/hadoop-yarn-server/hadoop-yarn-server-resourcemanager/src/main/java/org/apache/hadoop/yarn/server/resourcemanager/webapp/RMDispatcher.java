begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HtmlQuoting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|Singleton
DECL|class|RMDispatcher
specifier|public
class|class
name|RMDispatcher
extends|extends
name|Dispatcher
block|{
comment|/**    *    */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Inject
DECL|method|RMDispatcher (WebApp webApp, Injector injector, Router router)
name|RMDispatcher
parameter_list|(
name|WebApp
name|webApp
parameter_list|,
name|Injector
name|injector
parameter_list|,
name|Router
name|router
parameter_list|)
block|{
name|super
argument_list|(
name|webApp
argument_list|,
name|injector
argument_list|,
name|router
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|service (HttpServletRequest req, HttpServletResponse res)
specifier|public
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|res
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
literal|"/"
expr_stmt|;
block|}
name|RMWebApp
name|rmWebApp
init|=
operator|(
name|RMWebApp
operator|)
name|webApp
decl_stmt|;
name|rmWebApp
operator|.
name|checkIfStandbyRM
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmWebApp
operator|.
name|isStandby
argument_list|()
operator|&&
operator|!
name|uri
operator|.
name|equals
argument_list|(
literal|"/"
operator|+
name|rmWebApp
operator|.
name|name
argument_list|()
operator|+
literal|"/cluster"
argument_list|)
condition|)
block|{
name|String
name|redirectPath
init|=
name|rmWebApp
operator|.
name|getRedirectPath
argument_list|()
operator|+
name|uri
decl_stmt|;
if|if
condition|(
name|redirectPath
operator|!=
literal|null
operator|&&
operator|!
name|redirectPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|redirectMsg
init|=
literal|"This is standby RM. Redirecting to the current active RM: "
operator|+
name|redirectPath
decl_stmt|;
name|res
operator|.
name|addHeader
argument_list|(
literal|"Refresh"
argument_list|,
literal|"3; url="
operator|+
name|redirectPath
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|res
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|redirectMsg
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|super
operator|.
name|service
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

