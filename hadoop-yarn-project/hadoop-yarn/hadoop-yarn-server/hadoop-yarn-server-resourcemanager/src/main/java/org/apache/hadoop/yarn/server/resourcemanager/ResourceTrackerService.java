begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UnRegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UnRegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NodeLabelsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|DynamicResourceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppCollectorUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeReconnectEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStatusEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|RMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|YarnServerBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|YarnVersionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|ResourceTrackerService
specifier|public
class|class
name|ResourceTrackerService
extends|extends
name|AbstractService
implements|implements
name|ResourceTracker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceTrackerService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|nodesListManager
specifier|private
specifier|final
name|NodesListManager
name|nodesListManager
decl_stmt|;
DECL|field|nmLivelinessMonitor
specifier|private
specifier|final
name|NMLivelinessMonitor
name|nmLivelinessMonitor
decl_stmt|;
DECL|field|containerTokenSecretManager
specifier|private
specifier|final
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
decl_stmt|;
DECL|field|nmTokenSecretManager
specifier|private
specifier|final
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|nextHeartBeatInterval
specifier|private
name|long
name|nextHeartBeatInterval
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|resourceTrackerAddress
specifier|private
name|InetSocketAddress
name|resourceTrackerAddress
decl_stmt|;
DECL|field|minimumNodeManagerVersion
specifier|private
name|String
name|minimumNodeManagerVersion
decl_stmt|;
DECL|field|minAllocMb
specifier|private
name|int
name|minAllocMb
decl_stmt|;
DECL|field|minAllocVcores
specifier|private
name|int
name|minAllocVcores
decl_stmt|;
DECL|field|isDistributedNodeLabelsConf
specifier|private
name|boolean
name|isDistributedNodeLabelsConf
decl_stmt|;
DECL|field|isDelegatedCentralizedNodeLabelsConf
specifier|private
name|boolean
name|isDelegatedCentralizedNodeLabelsConf
decl_stmt|;
DECL|field|drConf
specifier|private
name|DynamicResourceConfiguration
name|drConf
decl_stmt|;
DECL|method|ResourceTrackerService (RMContext rmContext, NodesListManager nodesListManager, NMLivelinessMonitor nmLivelinessMonitor, RMContainerTokenSecretManager containerTokenSecretManager, NMTokenSecretManagerInRM nmTokenSecretManager)
specifier|public
name|ResourceTrackerService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|NodesListManager
name|nodesListManager
parameter_list|,
name|NMLivelinessMonitor
name|nmLivelinessMonitor
parameter_list|,
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|,
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|ResourceTrackerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|nodesListManager
operator|=
name|nodesListManager
expr_stmt|;
name|this
operator|.
name|nmLivelinessMonitor
operator|=
name|nmLivelinessMonitor
expr_stmt|;
name|this
operator|.
name|containerTokenSecretManager
operator|=
name|containerTokenSecretManager
expr_stmt|;
name|this
operator|.
name|nmTokenSecretManager
operator|=
name|nmTokenSecretManager
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|resourceTrackerAddress
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nextHeartBeatInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextHeartBeatInterval
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid Configuration. "
operator|+
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
operator|+
literal|" should be larger than 0."
argument_list|)
throw|;
block|}
name|minAllocMb
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
expr_stmt|;
name|minAllocVcores
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
expr_stmt|;
name|minimumNodeManagerVersion
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_MINIMUM_VERSION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|areNodeLabelsEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|isDistributedNodeLabelsConf
operator|=
name|YarnConfiguration
operator|.
name|isDistributedNodeLabelConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|isDelegatedCentralizedNodeLabelsConf
operator|=
name|YarnConfiguration
operator|.
name|isDelegatedCentralizedNodeLabelConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|loadDynamicResourceConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load DynamicResourceConfiguration from dynamic-resources.xml.    * @param conf    * @throws IOException    */
DECL|method|loadDynamicResourceConfiguration (Configuration conf)
specifier|public
name|void
name|loadDynamicResourceConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// load dynamic-resources.xml
name|InputStream
name|drInputStream
init|=
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|DR_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
comment|// write lock here on drConfig is unnecessary as here get called at
comment|// ResourceTrackerService get initiated and other read and write
comment|// operations haven't started yet.
if|if
condition|(
name|drInputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|drConf
operator|=
operator|new
name|DynamicResourceConfiguration
argument_list|(
name|conf
argument_list|,
name|drInputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|drConf
operator|=
operator|new
name|DynamicResourceConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Update DynamicResourceConfiguration with new configuration.    * @param conf    */
DECL|method|updateDynamicResourceConfiguration ( DynamicResourceConfiguration conf)
specifier|public
name|void
name|updateDynamicResourceConfiguration
parameter_list|(
name|DynamicResourceConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|drConf
operator|=
name|conf
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
comment|// ResourceTrackerServer authenticates NodeManager via Kerberos if
comment|// security is enabled, so no secretManager.
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ResourceTracker
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|resourceTrackerAddress
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|InputStream
name|inputStream
init|=
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
name|RMPolicyProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper method to handle received ContainerStatus. If this corresponds to    * the completion of a master-container of a managed AM,    * we call the handler for RMAppAttemptContainerFinishedEvent.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|VisibleForTesting
DECL|method|handleNMContainerStatus (NMContainerStatus containerStatus, NodeId nodeId)
name|void
name|handleNMContainerStatus
parameter_list|(
name|NMContainerStatus
name|containerStatus
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|containerStatus
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Received finished container : "
operator|+
name|containerStatus
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" for unknown application "
operator|+
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" Skipping."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring container completion status for unmanaged AM "
operator|+
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|RMAppAttempt
name|rmAppAttempt
init|=
name|rmApp
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmAppAttempt
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring not found attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
return|return;
block|}
name|Container
name|masterContainer
init|=
name|rmAppAttempt
operator|.
name|getMasterContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|&&
name|containerStatus
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|COMPLETE
condition|)
block|{
name|ContainerStatus
name|status
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
decl_stmt|;
comment|// sending master container finished event.
name|RMAppAttemptContainerFinishedEvent
name|evt
init|=
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|appAttemptId
argument_list|,
name|status
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|registerNodeManager ( RegisterNodeManagerRequest request)
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|NodeId
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|nodeId
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|cmPort
init|=
name|nodeId
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|int
name|httpPort
init|=
name|request
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
name|Resource
name|capability
init|=
name|request
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|String
name|nodeManagerVersion
init|=
name|request
operator|.
name|getNMVersion
argument_list|()
decl_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|minimumNodeManagerVersion
operator|.
name|equals
argument_list|(
literal|"NONE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|minimumNodeManagerVersion
operator|.
name|equals
argument_list|(
literal|"EqualToRM"
argument_list|)
condition|)
block|{
name|minimumNodeManagerVersion
operator|=
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|nodeManagerVersion
operator|==
literal|null
operator|)
operator|||
operator|(
name|VersionUtil
operator|.
name|compareVersions
argument_list|(
name|nodeManagerVersion
argument_list|,
name|minimumNodeManagerVersion
argument_list|)
operator|)
operator|<
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Disallowed NodeManager Version "
operator|+
name|nodeManagerVersion
operator|+
literal|", is less than the minimum version "
operator|+
name|minimumNodeManagerVersion
operator|+
literal|" sending SHUTDOWN signal to "
operator|+
literal|"NodeManager."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDiagnosticsMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNodeAction
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
comment|// Check if this node is a 'valid' node
if|if
condition|(
operator|!
name|this
operator|.
name|nodesListManager
operator|.
name|isValidNode
argument_list|(
name|host
argument_list|)
operator|&&
operator|!
name|isNodeInDecommissioning
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Disallowed NodeManager from  "
operator|+
name|host
operator|+
literal|", Sending SHUTDOWN signal to the NodeManager."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDiagnosticsMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNodeAction
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|// check if node's capacity is load from dynamic-resources.xml
name|String
name|nid
init|=
name|nodeId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Resource
name|dynamicLoadCapability
init|=
name|loadNodeResourceFromDRConfiguration
argument_list|(
name|nid
argument_list|)
decl_stmt|;
if|if
condition|(
name|dynamicLoadCapability
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource for node: "
operator|+
name|nid
operator|+
literal|" is adjusted from: "
operator|+
name|capability
operator|+
literal|" to: "
operator|+
name|dynamicLoadCapability
operator|+
literal|" due to settings in dynamic-resources.xml."
argument_list|)
expr_stmt|;
block|}
name|capability
operator|=
name|dynamicLoadCapability
expr_stmt|;
comment|// sync back with new resource.
name|response
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
comment|// Check if this node has minimum allocations
if|if
condition|(
name|capability
operator|.
name|getMemorySize
argument_list|()
operator|<
name|minAllocMb
operator|||
name|capability
operator|.
name|getVirtualCores
argument_list|()
operator|<
name|minAllocVcores
condition|)
block|{
name|String
name|message
init|=
literal|"NodeManager from  "
operator|+
name|host
operator|+
literal|" doesn't satisfy minimum allocations, Sending SHUTDOWN"
operator|+
literal|" signal to the NodeManager."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDiagnosticsMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNodeAction
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|response
operator|.
name|setContainerTokenMasterKey
argument_list|(
name|containerTokenSecretManager
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNMTokenMasterKey
argument_list|(
name|nmTokenSecretManager
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|rmNode
init|=
operator|new
name|RMNodeImpl
argument_list|(
name|nodeId
argument_list|,
name|rmContext
argument_list|,
name|host
argument_list|,
name|cmPort
argument_list|,
name|httpPort
argument_list|,
name|resolve
argument_list|(
name|host
argument_list|)
argument_list|,
name|capability
argument_list|,
name|nodeManagerVersion
argument_list|)
decl_stmt|;
name|RMNode
name|oldNode
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|nodeId
argument_list|,
name|rmNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStartedEvent
argument_list|(
name|nodeId
argument_list|,
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
argument_list|,
name|request
operator|.
name|getRunningApplications
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reconnect from the node at: "
operator|+
name|host
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmLivelinessMonitor
operator|.
name|unregister
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// Reset heartbeat ID since node just restarted.
name|oldNode
operator|.
name|resetLastNodeHeartBeatResponse
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeReconnectEvent
argument_list|(
name|nodeId
argument_list|,
name|rmNode
argument_list|,
name|request
operator|.
name|getRunningApplications
argument_list|()
argument_list|,
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// On every node manager register we will be clearing NMToken keys if
comment|// present for any running application.
name|this
operator|.
name|nmTokenSecretManager
operator|.
name|removeNodeKey
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmLivelinessMonitor
operator|.
name|register
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// Handle received container status, this should be processed after new
comment|// RMNode inserted
if|if
condition|(
operator|!
name|rmContext
operator|.
name|isWorkPreservingRecoveryEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"received container statuses on node manager register :"
operator|+
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NMContainerStatus
name|status
range|:
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
control|)
block|{
name|handleNMContainerStatus
argument_list|(
name|status
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Update node's labels to RM's NodeLabelManager.
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
init|=
name|NodeLabelsUtils
operator|.
name|convertToStringSet
argument_list|(
name|request
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDistributedNodeLabelsConf
operator|&&
name|nodeLabels
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|updateNodeLabelsFromNMReport
argument_list|(
name|nodeLabels
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAreNodeLabelsAcceptedByRM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Ensure the exception is captured in the response
name|response
operator|.
name|setDiagnosticsMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAreNodeLabelsAcceptedByRM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isDelegatedCentralizedNodeLabelsConf
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getRMDelegatedNodeLabelsUpdater
argument_list|()
operator|.
name|updateNodeLabels
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"NodeManager from node "
argument_list|)
operator|.
name|append
argument_list|(
name|host
argument_list|)
operator|.
name|append
argument_list|(
literal|"(cmPort: "
argument_list|)
operator|.
name|append
argument_list|(
name|cmPort
argument_list|)
operator|.
name|append
argument_list|(
literal|" httpPort: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|httpPort
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
operator|.
name|append
argument_list|(
literal|"registered with capability: "
argument_list|)
operator|.
name|append
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|", assigned nodeId "
argument_list|)
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|", node labels { "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeLabels
argument_list|)
operator|+
literal|" } "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNodeAction
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRMIdentifier
argument_list|(
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|nodeHeartbeat (NodeHeartbeatRequest request)
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|NodeStatus
name|remoteNodeStatus
init|=
name|request
operator|.
name|getNodeStatus
argument_list|()
decl_stmt|;
comment|/**      * Here is the node heartbeat sequence...      * 1. Check if it's a valid (i.e. not excluded) node      * 2. Check if it's a registered node      * 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat      * 4. Send healthStatus to RMNode      * 5. Update node's labels if distributed Node Labels configuration is enabled      */
name|NodeId
name|nodeId
init|=
name|remoteNodeStatus
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// 1. Check if it's a valid (i.e. not excluded) node, if not, see if it is
comment|// in decommissioning.
if|if
condition|(
operator|!
name|this
operator|.
name|nodesListManager
operator|.
name|isValidNode
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
operator|!
name|isNodeInDecommissioning
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Disallowed NodeManager nodeId: "
operator|+
name|nodeId
operator|+
literal|" hostname: "
operator|+
name|nodeId
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|YarnServerBuilderUtils
operator|.
name|newNodeHeartbeatResponse
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|// 2. Check if it's a registered node
name|RMNode
name|rmNode
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmNode
operator|==
literal|null
condition|)
block|{
comment|/* node does not exist */
name|String
name|message
init|=
literal|"Node not found resyncing "
operator|+
name|remoteNodeStatus
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|YarnServerBuilderUtils
operator|.
name|newNodeHeartbeatResponse
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|// Send ping
name|this
operator|.
name|nmLivelinessMonitor
operator|.
name|receivedPing
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat
name|NodeHeartbeatResponse
name|lastNodeHeartbeatResponse
init|=
name|rmNode
operator|.
name|getLastNodeHeartBeatResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteNodeStatus
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
operator|==
name|lastNodeHeartbeatResponse
operator|.
name|getResponseId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received duplicate heartbeat from node "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" responseId="
operator|+
name|remoteNodeStatus
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lastNodeHeartbeatResponse
return|;
block|}
elseif|else
if|if
condition|(
name|remoteNodeStatus
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
operator|<
name|lastNodeHeartbeatResponse
operator|.
name|getResponseId
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Too far behind rm response id:"
operator|+
name|lastNodeHeartbeatResponse
operator|.
name|getResponseId
argument_list|()
operator|+
literal|" nm response id:"
operator|+
name|remoteNodeStatus
operator|.
name|getResponseId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// TODO: Just sending reboot is not enough. Think more.
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nodeId
argument_list|,
name|RMNodeEventType
operator|.
name|REBOOTING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|YarnServerBuilderUtils
operator|.
name|newNodeHeartbeatResponse
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|message
argument_list|)
return|;
block|}
name|boolean
name|timelineV2Enabled
init|=
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timelineV2Enabled
condition|)
block|{
comment|// Check& update collectors info from request.
comment|// TODO make sure it won't have race condition issue for AM failed over
comment|// case that the older registration could possible override the newer
comment|// one.
name|updateAppCollectorsMap
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Heartbeat response
name|NodeHeartbeatResponse
name|nodeHeartBeatResponse
init|=
name|YarnServerBuilderUtils
operator|.
name|newNodeHeartbeatResponse
argument_list|(
name|lastNodeHeartbeatResponse
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|nextHeartBeatInterval
argument_list|)
decl_stmt|;
name|rmNode
operator|.
name|updateNodeHeartbeatResponseForCleanup
argument_list|(
name|nodeHeartBeatResponse
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|updateNodeHeartbeatResponseForContainersDecreasing
argument_list|(
name|nodeHeartBeatResponse
argument_list|)
expr_stmt|;
name|populateKeys
argument_list|(
name|request
argument_list|,
name|nodeHeartBeatResponse
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
name|systemCredentials
init|=
name|rmContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|systemCredentials
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodeHeartBeatResponse
operator|.
name|setSystemCredentialsForApps
argument_list|(
name|systemCredentials
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timelineV2Enabled
condition|)
block|{
comment|// Return collectors' map that NM needs to know
name|setAppCollectorsMapToResponse
argument_list|(
name|rmNode
operator|.
name|getRunningApps
argument_list|()
argument_list|,
name|nodeHeartBeatResponse
argument_list|)
expr_stmt|;
block|}
comment|// 4. Send status to RMNode, saving the latest response.
name|RMNodeStatusEvent
name|nodeStatusEvent
init|=
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nodeId
argument_list|,
name|remoteNodeStatus
argument_list|,
name|nodeHeartBeatResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getLogAggregationReportsForApps
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getLogAggregationReportsForApps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodeStatusEvent
operator|.
name|setLogAggregationReportsForApps
argument_list|(
name|request
operator|.
name|getLogAggregationReportsForApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|nodeStatusEvent
argument_list|)
expr_stmt|;
comment|// 5. Update node's labels to RM's NodeLabelManager.
if|if
condition|(
name|isDistributedNodeLabelsConf
operator|&&
name|request
operator|.
name|getNodeLabels
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|updateNodeLabelsFromNMReport
argument_list|(
name|NodeLabelsUtils
operator|.
name|convertToStringSet
argument_list|(
name|request
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|nodeHeartBeatResponse
operator|.
name|setAreNodeLabelsAcceptedByRM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//ensure the error message is captured and sent across in response
name|nodeHeartBeatResponse
operator|.
name|setDiagnosticsMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartBeatResponse
operator|.
name|setAreNodeLabelsAcceptedByRM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 6. check if node's capacity is load from dynamic-resources.xml
comment|// if so, send updated resource back to NM.
name|String
name|nid
init|=
name|nodeId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Resource
name|capability
init|=
name|loadNodeResourceFromDRConfiguration
argument_list|(
name|nid
argument_list|)
decl_stmt|;
comment|// sync back with new resource if not null.
if|if
condition|(
name|capability
operator|!=
literal|null
condition|)
block|{
name|nodeHeartBeatResponse
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
comment|// 7. Send Container Queuing Limits back to the Node. This will be used by
comment|// the node to truncate the number of Containers queued for execution.
if|if
condition|(
name|this
operator|.
name|rmContext
operator|.
name|getNodeManagerQueueLimitCalculator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nodeHeartBeatResponse
operator|.
name|setContainerQueuingLimit
argument_list|(
name|this
operator|.
name|rmContext
operator|.
name|getNodeManagerQueueLimitCalculator
argument_list|()
operator|.
name|createContainerQueuingLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeHeartBeatResponse
return|;
block|}
DECL|method|setAppCollectorsMapToResponse ( List<ApplicationId> runningApps, NodeHeartbeatResponse response)
specifier|private
name|void
name|setAppCollectorsMapToResponse
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApps
parameter_list|,
name|NodeHeartbeatResponse
name|response
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|String
argument_list|>
name|liveAppCollectorsMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|rmApps
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
comment|// Set collectors for all running apps on this node.
for|for
control|(
name|ApplicationId
name|appId
range|:
name|runningApps
control|)
block|{
name|String
name|appCollectorAddr
init|=
name|rmApps
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getCollectorAddr
argument_list|()
decl_stmt|;
if|if
condition|(
name|appCollectorAddr
operator|!=
literal|null
condition|)
block|{
name|liveAppCollectorsMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|appCollectorAddr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Collector for applicaton: "
operator|+
name|appId
operator|+
literal|" hasn't registered yet!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|response
operator|.
name|setAppCollectorsMap
argument_list|(
name|liveAppCollectorsMap
argument_list|)
expr_stmt|;
block|}
DECL|method|updateAppCollectorsMap (NodeHeartbeatRequest request)
specifier|private
name|void
name|updateAppCollectorsMap
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|String
argument_list|>
name|registeredCollectorsMap
init|=
name|request
operator|.
name|getRegisteredCollectors
argument_list|()
decl_stmt|;
if|if
condition|(
name|registeredCollectorsMap
operator|!=
literal|null
operator|&&
operator|!
name|registeredCollectorsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|rmApps
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|registeredCollectorsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationId
name|appId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|collectorAddr
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectorAddr
operator|!=
literal|null
operator|&&
operator|!
name|collectorAddr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RMApp
name|rmApp
init|=
name|rmApps
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot update collector info because application ID: "
operator|+
name|appId
operator|+
literal|" is not found in RMContext!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|previousCollectorAddr
init|=
name|rmApp
operator|.
name|getCollectorAddr
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousCollectorAddr
operator|==
literal|null
operator|||
operator|!
name|previousCollectorAddr
operator|.
name|equals
argument_list|(
name|collectorAddr
argument_list|)
condition|)
block|{
comment|// sending collector update event.
name|RMAppCollectorUpdateEvent
name|event
init|=
operator|new
name|RMAppCollectorUpdateEvent
argument_list|(
name|appId
argument_list|,
name|collectorAddr
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Check if node in decommissioning state.    * @param nodeId    */
DECL|method|isNodeInDecommissioning (NodeId nodeId)
specifier|private
name|boolean
name|isNodeInDecommissioning
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|RMNode
name|rmNode
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmNode
operator|!=
literal|null
operator|&&
name|rmNode
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|unRegisterNodeManager ( UnRegisterNodeManagerRequest request)
specifier|public
name|UnRegisterNodeManagerResponse
name|unRegisterNodeManager
parameter_list|(
name|UnRegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|UnRegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|UnRegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmNode
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node not found, ignoring the unregister from node id : "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Node with node id : "
operator|+
name|nodeId
operator|+
literal|" has shutdown, hence unregistering the node."
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmLivelinessMonitor
operator|.
name|unregister
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nodeId
argument_list|,
name|RMNodeEventType
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|updateNodeLabelsFromNMReport (Set<String> nodeLabels, NodeId nodeId)
specifier|private
name|void
name|updateNodeLabelsFromNMReport
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|labelsUpdate
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|labelsUpdate
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|labelsUpdate
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node Labels {"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeLabels
argument_list|)
operator|+
literal|"} from Node "
operator|+
name|nodeId
operator|+
literal|" were Accepted from RM"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|StringBuilder
name|errorMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errorMessage
operator|.
name|append
argument_list|(
literal|"Node Labels {"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeLabels
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"} reported from NM with ID "
argument_list|)
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
operator|.
name|append
argument_list|(
literal|" was rejected from RM with exception message as : "
argument_list|)
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMessage
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|populateKeys (NodeHeartbeatRequest request, NodeHeartbeatResponse nodeHeartBeatResponse)
specifier|private
name|void
name|populateKeys
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|,
name|NodeHeartbeatResponse
name|nodeHeartBeatResponse
parameter_list|)
block|{
comment|// Check if node's masterKey needs to be updated and if the currentKey has
comment|// roller over, send it across
comment|// ContainerTokenMasterKey
name|MasterKey
name|nextMasterKeyForNode
init|=
name|this
operator|.
name|containerTokenSecretManager
operator|.
name|getNextKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextMasterKeyForNode
operator|!=
literal|null
operator|&&
operator|(
name|request
operator|.
name|getLastKnownContainerTokenMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|nextMasterKeyForNode
operator|.
name|getKeyId
argument_list|()
operator|)
condition|)
block|{
name|nodeHeartBeatResponse
operator|.
name|setContainerTokenMasterKey
argument_list|(
name|nextMasterKeyForNode
argument_list|)
expr_stmt|;
block|}
comment|// NMTokenMasterKey
name|nextMasterKeyForNode
operator|=
name|this
operator|.
name|nmTokenSecretManager
operator|.
name|getNextKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextMasterKeyForNode
operator|!=
literal|null
operator|&&
operator|(
name|request
operator|.
name|getLastKnownNMTokenMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|nextMasterKeyForNode
operator|.
name|getKeyId
argument_list|()
operator|)
condition|)
block|{
name|nodeHeartBeatResponse
operator|.
name|setNMTokenMasterKey
argument_list|(
name|nextMasterKeyForNode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadNodeResourceFromDRConfiguration (String nodeId)
specifier|private
name|Resource
name|loadNodeResourceFromDRConfiguration
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
comment|// check if node's capacity is loaded from dynamic-resources.xml
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|nodes
init|=
name|this
operator|.
name|drConf
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|asList
argument_list|(
name|nodes
argument_list|)
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|drConf
operator|.
name|getMemoryPerNode
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|this
operator|.
name|drConf
operator|.
name|getVcoresPerNode
argument_list|(
name|nodeId
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * resolving the network topology.    * @param hostName the hostname of this node.    * @return the resolved {@link Node} for this nodemanager.    */
DECL|method|resolve (String hostName)
specifier|public
specifier|static
name|Node
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
return|return
name|RackResolver
operator|.
name|resolve
argument_list|(
name|hostName
argument_list|)
return|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAclWithLoadedConfiguration
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServer ()
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|server
return|;
block|}
block|}
end_class

end_unit

