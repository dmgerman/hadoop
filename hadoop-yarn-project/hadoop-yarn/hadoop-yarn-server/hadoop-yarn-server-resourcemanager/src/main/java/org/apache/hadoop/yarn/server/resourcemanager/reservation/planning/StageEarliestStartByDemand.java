begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_comment
comment|/**  * Sets the earliest start time of a stage proportional to the job weight. The  * interval [jobArrival, stageDeadline) is divided as follows. First, each stage  * is guaranteed at least its requested duration. Then, the stage receives a  * fraction of the remaining time. The fraction is calculated as the ratio  * between the weight (total requested resources) of the stage and the total  * weight of all proceeding stages.  */
end_comment

begin_class
DECL|class|StageEarliestStartByDemand
specifier|public
class|class
name|StageEarliestStartByDemand
implements|implements
name|StageEarliestStart
block|{
DECL|field|step
specifier|private
name|long
name|step
decl_stmt|;
annotation|@
name|Override
DECL|method|setEarliestStartTime (Plan plan, ReservationDefinition reservation, int index, ReservationRequest current, long stageDeadline)
specifier|public
name|long
name|setEarliestStartTime
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationDefinition
name|reservation
parameter_list|,
name|int
name|index
parameter_list|,
name|ReservationRequest
name|current
parameter_list|,
name|long
name|stageDeadline
parameter_list|)
block|{
name|step
operator|=
name|plan
operator|.
name|getStep
argument_list|()
expr_stmt|;
comment|// If this is the first stage, don't bother with the computation.
if|if
condition|(
name|index
operator|<
literal|1
condition|)
block|{
return|return
name|reservation
operator|.
name|getArrival
argument_list|()
return|;
block|}
comment|// Get iterator
name|ListIterator
argument_list|<
name|ReservationRequest
argument_list|>
name|li
init|=
name|reservation
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getReservationResources
argument_list|()
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ReservationRequest
name|rr
decl_stmt|;
comment|// Calculate the total weight& total duration
name|double
name|totalWeight
init|=
name|calcWeight
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|long
name|totalDuration
init|=
name|getRoundedDuration
argument_list|(
name|current
argument_list|,
name|plan
argument_list|)
decl_stmt|;
while|while
condition|(
name|li
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|rr
operator|=
name|li
operator|.
name|previous
argument_list|()
expr_stmt|;
name|totalWeight
operator|+=
name|calcWeight
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|totalDuration
operator|+=
name|getRoundedDuration
argument_list|(
name|rr
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
comment|// Compute the weight of the current stage as compared to remaining ones
name|double
name|ratio
init|=
name|calcWeight
argument_list|(
name|current
argument_list|)
operator|/
name|totalWeight
decl_stmt|;
comment|// Estimate an early start time, such that:
comment|// 1. Every stage is guaranteed to receive at least its duration
comment|// 2. The remainder of the window is divided between stages
comment|// proportionally to its workload (total memory consumption)
name|long
name|window
init|=
name|stageDeadline
operator|-
name|reservation
operator|.
name|getArrival
argument_list|()
decl_stmt|;
name|long
name|windowRemainder
init|=
name|window
operator|-
name|totalDuration
decl_stmt|;
name|long
name|earlyStart
init|=
call|(
name|long
call|)
argument_list|(
name|stageDeadline
operator|-
name|getRoundedDuration
argument_list|(
name|current
argument_list|,
name|plan
argument_list|)
operator|-
operator|(
name|windowRemainder
operator|*
name|ratio
operator|)
argument_list|)
decl_stmt|;
comment|// Realign if necessary (since we did some arithmetic)
name|earlyStart
operator|=
name|stepRoundUp
argument_list|(
name|earlyStart
argument_list|,
name|step
argument_list|)
expr_stmt|;
comment|// Return
return|return
name|earlyStart
return|;
block|}
comment|// Weight = total memory consumption of stage
DECL|method|calcWeight (ReservationRequest stage)
specifier|protected
name|double
name|calcWeight
parameter_list|(
name|ReservationRequest
name|stage
parameter_list|)
block|{
return|return
operator|(
name|stage
operator|.
name|getDuration
argument_list|()
operator|*
name|stage
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|)
operator|*
operator|(
name|stage
operator|.
name|getNumContainers
argument_list|()
operator|)
return|;
block|}
DECL|method|getRoundedDuration (ReservationRequest stage, Plan plan)
specifier|protected
name|long
name|getRoundedDuration
parameter_list|(
name|ReservationRequest
name|stage
parameter_list|,
name|Plan
name|plan
parameter_list|)
block|{
return|return
name|stepRoundUp
argument_list|(
name|stage
operator|.
name|getDuration
argument_list|()
argument_list|,
name|step
argument_list|)
return|;
block|}
DECL|method|stepRoundDown (long t, long step)
specifier|protected
specifier|static
name|long
name|stepRoundDown
parameter_list|(
name|long
name|t
parameter_list|,
name|long
name|step
parameter_list|)
block|{
return|return
operator|(
name|t
operator|/
name|step
operator|)
operator|*
name|step
return|;
block|}
DECL|method|stepRoundUp (long t, long step)
specifier|protected
specifier|static
name|long
name|stepRoundUp
parameter_list|(
name|long
name|t
parameter_list|,
name|long
name|step
parameter_list|)
block|{
return|return
operator|(
operator|(
name|t
operator|+
name|step
operator|-
literal|1
operator|)
operator|/
name|step
operator|)
operator|*
name|step
return|;
block|}
block|}
end_class

end_unit

