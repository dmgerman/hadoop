begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMFatalEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMFatalEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|RMStateVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNewSavedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppUpdateSavedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptNewSavedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUpdateSavedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
comment|/**  * Base class to implement storage of ResourceManager state.  * Takes care of asynchronous notifications and interfacing with YARN objects.  * Real store implementations need to derive from it and implement blocking  * store and load methods to actually store and load the state.  */
DECL|class|RMStateStore
specifier|public
specifier|abstract
class|class
name|RMStateStore
extends|extends
name|AbstractService
block|{
comment|// constants for RM App state and RMDTSecretManagerState.
DECL|field|RM_APP_ROOT
specifier|protected
specifier|static
specifier|final
name|String
name|RM_APP_ROOT
init|=
literal|"RMAppRoot"
decl_stmt|;
DECL|field|RM_DT_SECRET_MANAGER_ROOT
specifier|protected
specifier|static
specifier|final
name|String
name|RM_DT_SECRET_MANAGER_ROOT
init|=
literal|"RMDTSecretManagerRoot"
decl_stmt|;
DECL|field|DELEGATION_KEY_PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|DELEGATION_KEY_PREFIX
init|=
literal|"DelegationKey_"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_PREFIX
init|=
literal|"RMDelegationToken_"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
init|=
literal|"RMDTSequenceNumber_"
decl_stmt|;
DECL|field|VERSION_NODE
specifier|protected
specifier|static
specifier|final
name|String
name|VERSION_NODE
init|=
literal|"RMVersionNode"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|RMStateStoreState
specifier|private
enum|enum
name|RMStateStoreState
block|{
DECL|enumConstant|DEFAULT
name|DEFAULT
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreState
argument_list|,
name|RMStateStoreEventType
argument_list|,
name|RMStateStoreEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreState
argument_list|,
name|RMStateStoreEventType
argument_list|,
name|RMStateStoreEvent
argument_list|>
argument_list|(
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreEventType
operator|.
name|STORE_APP
argument_list|,
operator|new
name|StoreAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreEventType
operator|.
name|UPDATE_APP
argument_list|,
operator|new
name|UpdateAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreEventType
operator|.
name|REMOVE_APP
argument_list|,
operator|new
name|RemoveAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreEventType
operator|.
name|STORE_APP_ATTEMPT
argument_list|,
operator|new
name|StoreAppAttemptTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreState
operator|.
name|DEFAULT
argument_list|,
name|RMStateStoreEventType
operator|.
name|UPDATE_APP_ATTEMPT
argument_list|,
operator|new
name|UpdateAppAttemptTransition
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|RMStateStoreState
argument_list|,
name|RMStateStoreEventType
argument_list|,
DECL|field|stateMachine
name|RMStateStoreEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|class|StoreAppTransition
specifier|private
specifier|static
class|class
name|StoreAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMStateStore store, RMStateStoreEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|RMStateStoreAppEvent
operator|)
condition|)
block|{
comment|// should never happen
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationState
name|appState
init|=
operator|(
operator|(
name|RMStateStoreAppEvent
operator|)
name|event
operator|)
operator|.
name|getAppState
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appStateData
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|appState
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing info for app: "
operator|+
name|appId
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|storeApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyDoneStoringApplication
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error storing app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
DECL|class|UpdateAppTransition
specifier|private
specifier|static
class|class
name|UpdateAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMStateStore store, RMStateStoreEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|RMStateUpdateAppEvent
operator|)
condition|)
block|{
comment|// should never happen
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationState
name|appState
init|=
operator|(
operator|(
name|RMStateUpdateAppEvent
operator|)
name|event
operator|)
operator|.
name|getAppState
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appStateData
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|appState
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating info for app: "
operator|+
name|appId
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|updateApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyDoneUpdatingApplication
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error updating app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
DECL|class|RemoveAppTransition
specifier|private
specifier|static
class|class
name|RemoveAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMStateStore store, RMStateStoreEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|RMStateStoreRemoveAppEvent
operator|)
condition|)
block|{
comment|// should never happen
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationState
name|appState
init|=
operator|(
operator|(
name|RMStateStoreRemoveAppEvent
operator|)
name|event
operator|)
operator|.
name|getAppState
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing info for app: "
operator|+
name|appId
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|removeApplicationStateInternal
argument_list|(
name|appState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error removing app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
DECL|class|StoreAppAttemptTransition
specifier|private
specifier|static
class|class
name|StoreAppAttemptTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMStateStore store, RMStateStoreEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|RMStateStoreAppAttemptEvent
operator|)
condition|)
block|{
comment|// should never happen
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationAttemptState
name|attemptState
init|=
operator|(
operator|(
name|RMStateStoreAppAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getAppAttemptState
argument_list|()
decl_stmt|;
try|try
block|{
name|ApplicationAttemptStateData
name|attemptStateData
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|attemptState
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing info for attempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|storeApplicationAttemptStateInternal
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptStateData
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyDoneStoringApplicationAttempt
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error storing appAttempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
DECL|class|UpdateAppAttemptTransition
specifier|private
specifier|static
class|class
name|UpdateAppAttemptTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMStateStore
argument_list|,
name|RMStateStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMStateStore store, RMStateStoreEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|RMStateUpdateAppAttemptEvent
operator|)
condition|)
block|{
comment|// should never happen
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationAttemptState
name|attemptState
init|=
operator|(
operator|(
name|RMStateUpdateAppAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getAppAttemptState
argument_list|()
decl_stmt|;
try|try
block|{
name|ApplicationAttemptStateData
name|attemptStateData
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|attemptState
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating info for attempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|updateApplicationAttemptStateInternal
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptStateData
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyDoneUpdatingApplicationAttempt
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error updating appAttempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|store
operator|.
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
DECL|method|RMStateStore ()
specifier|public
name|RMStateStore
parameter_list|()
block|{
name|super
argument_list|(
name|RMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * State of an application attempt    */
DECL|class|ApplicationAttemptState
specifier|public
specifier|static
class|class
name|ApplicationAttemptState
block|{
DECL|field|attemptId
specifier|final
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
DECL|field|masterContainer
specifier|final
name|Container
name|masterContainer
decl_stmt|;
DECL|field|appAttemptCredentials
specifier|final
name|Credentials
name|appAttemptCredentials
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
init|=
literal|0
decl_stmt|;
comment|// fields set when attempt completes
DECL|field|state
name|RMAppAttemptState
name|state
decl_stmt|;
DECL|field|finalTrackingUrl
name|String
name|finalTrackingUrl
init|=
literal|"N/A"
decl_stmt|;
DECL|field|diagnostics
name|String
name|diagnostics
decl_stmt|;
DECL|field|exitStatus
name|int
name|exitStatus
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
DECL|field|amUnregisteredFinalStatus
name|FinalApplicationStatus
name|amUnregisteredFinalStatus
decl_stmt|;
DECL|method|ApplicationAttemptState (ApplicationAttemptId attemptId, Container masterContainer, Credentials appAttemptCredentials, long startTime)
specifier|public
name|ApplicationAttemptState
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Container
name|masterContainer
parameter_list|,
name|Credentials
name|appAttemptCredentials
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
argument_list|(
name|attemptId
argument_list|,
name|masterContainer
argument_list|,
name|appAttemptCredentials
argument_list|,
name|startTime
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|)
expr_stmt|;
block|}
DECL|method|ApplicationAttemptState (ApplicationAttemptId attemptId, Container masterContainer, Credentials appAttemptCredentials, long startTime, RMAppAttemptState state, String finalTrackingUrl, String diagnostics, FinalApplicationStatus amUnregisteredFinalStatus, int exitStatus)
specifier|public
name|ApplicationAttemptState
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Container
name|masterContainer
parameter_list|,
name|Credentials
name|appAttemptCredentials
parameter_list|,
name|long
name|startTime
parameter_list|,
name|RMAppAttemptState
name|state
parameter_list|,
name|String
name|finalTrackingUrl
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|FinalApplicationStatus
name|amUnregisteredFinalStatus
parameter_list|,
name|int
name|exitStatus
parameter_list|)
block|{
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
name|this
operator|.
name|masterContainer
operator|=
name|masterContainer
expr_stmt|;
name|this
operator|.
name|appAttemptCredentials
operator|=
name|appAttemptCredentials
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|finalTrackingUrl
operator|=
name|finalTrackingUrl
expr_stmt|;
name|this
operator|.
name|diagnostics
operator|=
name|diagnostics
operator|==
literal|null
condition|?
literal|""
else|:
name|diagnostics
expr_stmt|;
name|this
operator|.
name|amUnregisteredFinalStatus
operator|=
name|amUnregisteredFinalStatus
expr_stmt|;
name|this
operator|.
name|exitStatus
operator|=
name|exitStatus
expr_stmt|;
block|}
DECL|method|getMasterContainer ()
specifier|public
name|Container
name|getMasterContainer
parameter_list|()
block|{
return|return
name|masterContainer
return|;
block|}
DECL|method|getAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getAttemptId
parameter_list|()
block|{
return|return
name|attemptId
return|;
block|}
DECL|method|getAppAttemptCredentials ()
specifier|public
name|Credentials
name|getAppAttemptCredentials
parameter_list|()
block|{
return|return
name|appAttemptCredentials
return|;
block|}
DECL|method|getState ()
specifier|public
name|RMAppAttemptState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getFinalTrackingUrl ()
specifier|public
name|String
name|getFinalTrackingUrl
parameter_list|()
block|{
return|return
name|finalTrackingUrl
return|;
block|}
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
return|return
name|diagnostics
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getFinalApplicationStatus ()
specifier|public
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
block|{
return|return
name|amUnregisteredFinalStatus
return|;
block|}
DECL|method|getAMContainerExitStatus ()
specifier|public
name|int
name|getAMContainerExitStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|exitStatus
return|;
block|}
block|}
comment|/**    * State of an application application    */
DECL|class|ApplicationState
specifier|public
specifier|static
class|class
name|ApplicationState
block|{
DECL|field|context
specifier|final
name|ApplicationSubmissionContext
name|context
decl_stmt|;
DECL|field|submitTime
specifier|final
name|long
name|submitTime
decl_stmt|;
DECL|field|startTime
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|attempts
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptState
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptState
argument_list|>
argument_list|()
decl_stmt|;
comment|// fields set when application completes.
DECL|field|state
name|RMAppState
name|state
decl_stmt|;
DECL|field|diagnostics
name|String
name|diagnostics
decl_stmt|;
DECL|field|finishTime
name|long
name|finishTime
decl_stmt|;
DECL|method|ApplicationState (long submitTime, long startTime, ApplicationSubmissionContext context, String user)
specifier|public
name|ApplicationState
parameter_list|(
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|ApplicationSubmissionContext
name|context
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
argument_list|(
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|context
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|ApplicationState (long submitTime, long startTime,ApplicationSubmissionContext context, String user, RMAppState state, String diagnostics, long finishTime)
specifier|public
name|ApplicationState
parameter_list|(
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|ApplicationSubmissionContext
name|context
parameter_list|,
name|String
name|user
parameter_list|,
name|RMAppState
name|state
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|long
name|finishTime
parameter_list|)
block|{
name|this
operator|.
name|submitTime
operator|=
name|submitTime
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|diagnostics
operator|=
name|diagnostics
operator|==
literal|null
condition|?
literal|""
else|:
name|diagnostics
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
block|}
DECL|method|getAppId ()
specifier|public
name|ApplicationId
name|getAppId
parameter_list|()
block|{
return|return
name|context
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
DECL|method|getSubmitTime ()
specifier|public
name|long
name|getSubmitTime
parameter_list|()
block|{
return|return
name|submitTime
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getAttemptCount ()
specifier|public
name|int
name|getAttemptCount
parameter_list|()
block|{
return|return
name|attempts
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getApplicationSubmissionContext ()
specifier|public
name|ApplicationSubmissionContext
name|getApplicationSubmissionContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getAttempt (ApplicationAttemptId attemptId)
specifier|public
name|ApplicationAttemptState
name|getAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getState ()
specifier|public
name|RMAppState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
return|return
name|diagnostics
return|;
block|}
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
block|}
DECL|class|RMDTSecretManagerState
specifier|public
specifier|static
class|class
name|RMDTSecretManagerState
block|{
comment|// DTIdentifier -> renewDate
DECL|field|delegationTokenState
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|delegationTokenState
init|=
operator|new
name|HashMap
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|masterKeyState
name|Set
argument_list|<
name|DelegationKey
argument_list|>
name|masterKeyState
init|=
operator|new
name|HashSet
argument_list|<
name|DelegationKey
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dtSequenceNumber
name|int
name|dtSequenceNumber
init|=
literal|0
decl_stmt|;
DECL|method|getTokenState ()
specifier|public
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|getTokenState
parameter_list|()
block|{
return|return
name|delegationTokenState
return|;
block|}
DECL|method|getMasterKeyState ()
specifier|public
name|Set
argument_list|<
name|DelegationKey
argument_list|>
name|getMasterKeyState
parameter_list|()
block|{
return|return
name|masterKeyState
return|;
block|}
DECL|method|getDTSequenceNumber ()
specifier|public
name|int
name|getDTSequenceNumber
parameter_list|()
block|{
return|return
name|dtSequenceNumber
return|;
block|}
block|}
comment|/**    * State of the ResourceManager    */
DECL|class|RMState
specifier|public
specifier|static
class|class
name|RMState
block|{
DECL|field|appState
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|appState
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rmSecretManagerState
name|RMDTSecretManagerState
name|rmSecretManagerState
init|=
operator|new
name|RMDTSecretManagerState
argument_list|()
decl_stmt|;
DECL|method|getApplicationState ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|getApplicationState
parameter_list|()
block|{
return|return
name|appState
return|;
block|}
DECL|method|getRMDTSecretManagerState ()
specifier|public
name|RMDTSecretManagerState
name|getRMDTSecretManagerState
parameter_list|()
block|{
return|return
name|rmSecretManagerState
return|;
block|}
block|}
DECL|field|rmDispatcher
specifier|private
name|Dispatcher
name|rmDispatcher
decl_stmt|;
comment|/**    * Dispatcher used to send state operation completion events to     * ResourceManager services    */
DECL|method|setRMDispatcher (Dispatcher dispatcher)
specifier|public
name|void
name|setRMDispatcher
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|)
block|{
name|this
operator|.
name|rmDispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
DECL|field|dispatcher
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create async handler
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMStateStoreEventType
operator|.
name|class
argument_list|,
operator|new
name|ForwardingEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|initInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|startInternal
argument_list|()
expr_stmt|;
block|}
comment|/**    * Derived classes initialize themselves using this method.    */
DECL|method|initInternal (Configuration conf)
specifier|protected
specifier|abstract
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Derived classes start themselves using this method.    * The base class is started and the event dispatcher is ready to use at    * this point    */
DECL|method|startInternal ()
specifier|protected
specifier|abstract
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|closeInternal
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Derived classes close themselves using this method.    * The base class will be closed and the event dispatcher will be shutdown     * after this    */
DECL|method|closeInternal ()
specifier|protected
specifier|abstract
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * 1) Versioning scheme: major.minor. For e.g. 1.0, 1.1, 1.2...1.25, 2.0 etc.    * 2) Any incompatible change of state-store is a major upgrade, and any    *    compatible change of state-store is a minor upgrade.    * 3) If theres's no version, treat it as 1.0.    * 4) Within a minor upgrade, say 1.1 to 1.2:    *    overwrite the version info and proceed as normal.    * 5) Within a major upgrade, say 1.2 to 2.0:    *    throw exception and indicate user to use a separate upgrade tool to    *    upgrade RM state.    */
DECL|method|checkVersion ()
specifier|public
name|void
name|checkVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|RMStateVersion
name|loadedVersion
init|=
name|loadVersion
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded RM state version info "
operator|+
name|loadedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadedVersion
operator|!=
literal|null
operator|&&
name|loadedVersion
operator|.
name|equals
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// if there is no version info, treat it as 1.0;
if|if
condition|(
name|loadedVersion
operator|==
literal|null
condition|)
block|{
name|loadedVersion
operator|=
name|RMStateVersion
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadedVersion
operator|.
name|isCompatibleTo
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing RM state version info "
operator|+
name|getCurrentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|storeVersion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RMStateVersionIncompatibleException
argument_list|(
literal|"Expecting RM state version "
operator|+
name|getCurrentVersion
argument_list|()
operator|+
literal|", but loading version "
operator|+
name|loadedVersion
argument_list|)
throw|;
block|}
block|}
comment|/**    * Derived class use this method to load the version information from state    * store.    */
DECL|method|loadVersion ()
specifier|protected
specifier|abstract
name|RMStateVersion
name|loadVersion
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Derived class use this method to store the version information.    */
DECL|method|storeVersion ()
specifier|protected
specifier|abstract
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Get the current version of the underlying state store.    */
DECL|method|getCurrentVersion ()
specifier|protected
specifier|abstract
name|RMStateVersion
name|getCurrentVersion
parameter_list|()
function_decl|;
comment|/**    * Blocking API    * The derived class must recover state from the store and return a new     * RMState object populated with that state    * This must not be called on the dispatcher thread    */
DECL|method|loadState ()
specifier|public
specifier|abstract
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Non-Blocking API    * ResourceManager services use this to store the application's state    * This does not block the dispatcher threads    * RMAppStoredEvent will be sent on completion to notify the RMApp    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|storeNewApplication (RMApp app)
specifier|public
specifier|synchronized
name|void
name|storeNewApplication
parameter_list|(
name|RMApp
name|app
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
assert|assert
name|context
operator|instanceof
name|ApplicationSubmissionContextPBImpl
assert|;
name|ApplicationState
name|appState
init|=
operator|new
name|ApplicationState
argument_list|(
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|context
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMStateStoreAppEvent
argument_list|(
name|appState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|updateApplicationState (ApplicationState appState)
specifier|public
specifier|synchronized
name|void
name|updateApplicationState
parameter_list|(
name|ApplicationState
name|appState
parameter_list|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMStateUpdateAppEvent
argument_list|(
name|appState
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to store the state of an     * application.    */
DECL|method|storeApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateData)
specifier|protected
specifier|abstract
name|void
name|storeApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateData
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|updateApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateData)
specifier|protected
specifier|abstract
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateData
parameter_list|)
throws|throws
name|Exception
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|/**    * Non-blocking API    * ResourceManager services call this to store state on an application attempt    * This does not block the dispatcher threads    * RMAppAttemptStoredEvent will be sent on completion to notify the RMAppAttempt    */
DECL|method|storeNewApplicationAttempt (RMAppAttempt appAttempt)
specifier|public
specifier|synchronized
name|void
name|storeNewApplicationAttempt
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|)
block|{
name|Credentials
name|credentials
init|=
name|getCredentialsFromAppAttempt
argument_list|(
name|appAttempt
argument_list|)
decl_stmt|;
name|ApplicationAttemptState
name|attemptState
init|=
operator|new
name|ApplicationAttemptState
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|credentials
argument_list|,
name|appAttempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMStateStoreAppAttemptEvent
argument_list|(
name|attemptState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|updateApplicationAttemptState ( ApplicationAttemptState attemptState)
specifier|public
specifier|synchronized
name|void
name|updateApplicationAttemptState
parameter_list|(
name|ApplicationAttemptState
name|attemptState
parameter_list|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMStateUpdateAppAttemptEvent
argument_list|(
name|attemptState
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to store the state of an     * application attempt    */
DECL|method|storeApplicationAttemptStateInternal ( ApplicationAttemptId attemptId, ApplicationAttemptStateData attemptStateData)
specifier|protected
specifier|abstract
name|void
name|storeApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateData
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|updateApplicationAttemptStateInternal ( ApplicationAttemptId attemptId, ApplicationAttemptStateData attemptStateData)
specifier|protected
specifier|abstract
name|void
name|updateApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateData
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * RMDTSecretManager call this to store the state of a delegation token    * and sequence number    */
DECL|method|storeRMDelegationTokenAndSequenceNumber ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|public
specifier|synchronized
name|void
name|storeRMDelegationTokenAndSequenceNumber
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
block|{
try|try
block|{
name|storeRMDelegationTokenAndSequenceNumberState
argument_list|(
name|rmDTIdentifier
argument_list|,
name|renewDate
argument_list|,
name|latestSequenceNumber
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to store the state of    * RMDelegationToken and sequence number    */
DECL|method|storeRMDelegationTokenAndSequenceNumberState ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|protected
specifier|abstract
name|void
name|storeRMDelegationTokenAndSequenceNumberState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * RMDTSecretManager call this to remove the state of a delegation token    */
DECL|method|removeRMDelegationToken ( RMDelegationTokenIdentifier rmDTIdentifier, int sequenceNumber)
specifier|public
specifier|synchronized
name|void
name|removeRMDelegationToken
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|int
name|sequenceNumber
parameter_list|)
block|{
try|try
block|{
name|removeRMDelegationTokenState
argument_list|(
name|rmDTIdentifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to remove the state of RMDelegationToken    */
DECL|method|removeRMDelegationTokenState ( RMDelegationTokenIdentifier rmDTIdentifier)
specifier|protected
specifier|abstract
name|void
name|removeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * RMDTSecretManager call this to update the state of a delegation token    * and sequence number    */
DECL|method|updateRMDelegationTokenAndSequenceNumber ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|public
specifier|synchronized
name|void
name|updateRMDelegationTokenAndSequenceNumber
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
block|{
try|try
block|{
name|updateRMDelegationTokenAndSequenceNumberInternal
argument_list|(
name|rmDTIdentifier
argument_list|,
name|renewDate
argument_list|,
name|latestSequenceNumber
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to update the state of    * RMDelegationToken and sequence number    */
DECL|method|updateRMDelegationTokenAndSequenceNumberInternal ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|protected
specifier|abstract
name|void
name|updateRMDelegationTokenAndSequenceNumberInternal
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * RMDTSecretManager call this to store the state of a master key    */
DECL|method|storeRMDTMasterKey (DelegationKey delegationKey)
specifier|public
specifier|synchronized
name|void
name|storeRMDTMasterKey
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
block|{
try|try
block|{
name|storeRMDTMasterKeyState
argument_list|(
name|delegationKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to store the state of    * DelegationToken Master Key    */
DECL|method|storeRMDTMasterKeyState (DelegationKey delegationKey)
specifier|protected
specifier|abstract
name|void
name|storeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * RMDTSecretManager call this to remove the state of a master key    */
DECL|method|removeRMDTMasterKey (DelegationKey delegationKey)
specifier|public
specifier|synchronized
name|void
name|removeRMDTMasterKey
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
block|{
try|try
block|{
name|removeRMDTMasterKeyState
argument_list|(
name|delegationKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to remove the state of    * DelegationToken Master Key    */
DECL|method|removeRMDTMasterKeyState (DelegationKey delegationKey)
specifier|protected
specifier|abstract
name|void
name|removeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Non-blocking API    * ResourceManager services call this to remove an application from the state    * store    * This does not block the dispatcher threads    * There is no notification of completion for this operation.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeApplication (RMApp app)
specifier|public
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|RMApp
name|app
parameter_list|)
block|{
name|ApplicationState
name|appState
init|=
operator|new
name|ApplicationState
argument_list|(
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|appAttempt
range|:
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Credentials
name|credentials
init|=
name|getCredentialsFromAppAttempt
argument_list|(
name|appAttempt
argument_list|)
decl_stmt|;
name|ApplicationAttemptState
name|attemptState
init|=
operator|new
name|ApplicationAttemptState
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|credentials
argument_list|,
name|appAttempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMStateStoreRemoveAppEvent
argument_list|(
name|appState
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Blocking API    * Derived classes must implement this method to remove the state of an     * application and its attempts    */
DECL|method|removeApplicationStateInternal ( ApplicationState appState)
specifier|protected
specifier|abstract
name|void
name|removeApplicationStateInternal
parameter_list|(
name|ApplicationState
name|appState
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|// TODO: This should eventually become cluster-Id + "AM_RM_TOKEN_SERVICE". See
comment|// YARN-1779
DECL|field|AM_RM_TOKEN_SERVICE
specifier|public
specifier|static
specifier|final
name|Text
name|AM_RM_TOKEN_SERVICE
init|=
operator|new
name|Text
argument_list|(
literal|"AM_RM_TOKEN_SERVICE"
argument_list|)
decl_stmt|;
DECL|field|AM_CLIENT_TOKEN_MASTER_KEY_NAME
specifier|public
specifier|static
specifier|final
name|Text
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
init|=
operator|new
name|Text
argument_list|(
literal|"YARN_CLIENT_TOKEN_MASTER_KEY"
argument_list|)
decl_stmt|;
DECL|method|getCredentialsFromAppAttempt (RMAppAttempt appAttempt)
specifier|public
name|Credentials
name|getCredentialsFromAppAttempt
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|)
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appToken
init|=
name|appAttempt
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|appToken
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|.
name|addToken
argument_list|(
name|AM_RM_TOKEN_SERVICE
argument_list|,
name|appToken
argument_list|)
expr_stmt|;
block|}
name|SecretKey
name|clientTokenMasterKey
init|=
name|appAttempt
operator|.
name|getClientTokenMasterKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientTokenMasterKey
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|,
name|clientTokenMasterKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|credentials
return|;
block|}
comment|// Dispatcher related code
DECL|method|handleStoreEvent (RMStateStoreEvent event)
specifier|protected
name|void
name|handleStoreEvent
parameter_list|(
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|/**    * This method is called to notify the ResourceManager that the store    * operation has failed.    * @param failureCause the exception due to which the operation failed    */
DECL|method|notifyStoreOperationFailed (Exception failureCause)
specifier|protected
name|void
name|notifyStoreOperationFailed
parameter_list|(
name|Exception
name|failureCause
parameter_list|)
block|{
name|RMFatalEventType
name|type
decl_stmt|;
if|if
condition|(
name|failureCause
operator|instanceof
name|StoreFencedException
condition|)
block|{
name|type
operator|=
name|RMFatalEventType
operator|.
name|STATE_STORE_FENCED
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|RMFatalEventType
operator|.
name|STATE_STORE_OP_FAILED
expr_stmt|;
block|}
name|rmDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMFatalEvent
argument_list|(
name|type
argument_list|,
name|failureCause
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|/**    * In (@link handleStoreEvent}, this method is called to notify the    * application that new application is stored in state store    * @param appId id of the application that has been saved    * @param storedException the exception that is thrown when storing the    * application    */
DECL|method|notifyDoneStoringApplication (ApplicationId appId, Exception storedException)
specifier|private
name|void
name|notifyDoneStoringApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Exception
name|storedException
parameter_list|)
block|{
name|rmDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppNewSavedEvent
argument_list|(
name|appId
argument_list|,
name|storedException
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|notifyDoneUpdatingApplication (ApplicationId appId, Exception storedException)
specifier|private
name|void
name|notifyDoneUpdatingApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Exception
name|storedException
parameter_list|)
block|{
name|rmDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppUpdateSavedEvent
argument_list|(
name|appId
argument_list|,
name|storedException
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|/**    * In (@link handleStoreEvent}, this method is called to notify the    * application attempt that new attempt is stored in state store    * @param appAttempt attempt that has been saved    */
DECL|method|notifyDoneStoringApplicationAttempt (ApplicationAttemptId attemptId, Exception storedException)
specifier|private
name|void
name|notifyDoneStoringApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Exception
name|storedException
parameter_list|)
block|{
name|rmDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptNewSavedEvent
argument_list|(
name|attemptId
argument_list|,
name|storedException
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|notifyDoneUpdatingApplicationAttempt (ApplicationAttemptId attemptId, Exception updatedException)
specifier|private
name|void
name|notifyDoneUpdatingApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Exception
name|updatedException
parameter_list|)
block|{
name|rmDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUpdateSavedEvent
argument_list|(
name|attemptId
argument_list|,
name|updatedException
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * EventHandler implementation which forward events to the FSRMStateStore    * This hides the EventHandle methods of the store from its public interface     */
DECL|class|ForwardingEventHandler
specifier|private
specifier|final
class|class
name|ForwardingEventHandler
implements|implements
name|EventHandler
argument_list|<
name|RMStateStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMStateStoreEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
name|handleStoreEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

