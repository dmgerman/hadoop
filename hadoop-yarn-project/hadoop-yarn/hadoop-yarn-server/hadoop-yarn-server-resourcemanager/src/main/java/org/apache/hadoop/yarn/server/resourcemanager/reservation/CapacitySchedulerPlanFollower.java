begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|PlanQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ReservationQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class implements a {@link PlanFollower}. This is invoked on a timer, and  * it is in charge to publish the state of the {@link Plan}s to the underlying  * {@link CapacityScheduler}. This implementation does so, by  * adding/removing/resizing leaf queues in the scheduler, thus affecting the  * dynamic behavior of the scheduler in a way that is consistent with the  * content of the plan. It also updates the plan's view on how much resources  * are available in the cluster.  *   * This implementation of PlanFollower is relatively stateless, and it can  * synchronize schedulers and Plans that have arbitrary changes (performing set  * differences among existing queues). This makes it resilient to frequency of  * synchronization, and RM restart issues (no "catch up" is necessary).  */
end_comment

begin_class
DECL|class|CapacitySchedulerPlanFollower
specifier|public
class|class
name|CapacitySchedulerPlanFollower
extends|extends
name|AbstractSchedulerPlanFollower
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CapacitySchedulerPlanFollower
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cs
specifier|private
name|CapacityScheduler
name|cs
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Clock clock, ResourceScheduler sched, Collection<Plan> plans)
specifier|public
name|void
name|init
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|ResourceScheduler
name|sched
parameter_list|,
name|Collection
argument_list|<
name|Plan
argument_list|>
name|plans
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|clock
argument_list|,
name|sched
argument_list|,
name|plans
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Plan Follower Policy:"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sched
operator|instanceof
name|CapacityScheduler
operator|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"CapacitySchedulerPlanFollower can only work with CapacityScheduler"
argument_list|)
throw|;
block|}
name|this
operator|.
name|cs
operator|=
operator|(
name|CapacityScheduler
operator|)
name|sched
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPlanQueue (String planQueueName)
specifier|protected
name|Queue
name|getPlanQueue
parameter_list|(
name|String
name|planQueueName
parameter_list|)
block|{
name|CSQueue
name|queue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|planQueueName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|queue
operator|instanceof
name|PlanQueue
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The Plan is not an PlanQueue!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|queue
return|;
block|}
annotation|@
name|Override
DECL|method|getChildReservationQueues (Queue queue)
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Queue
argument_list|>
name|getChildReservationQueues
parameter_list|(
name|Queue
name|queue
parameter_list|)
block|{
name|PlanQueue
name|planQueue
init|=
operator|(
name|PlanQueue
operator|)
name|queue
decl_stmt|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|childQueues
init|=
name|planQueue
operator|.
name|getChildQueues
argument_list|()
decl_stmt|;
return|return
name|childQueues
return|;
block|}
annotation|@
name|Override
DECL|method|addReservationQueue ( String planQueueName, Queue queue, String currResId)
specifier|protected
name|void
name|addReservationQueue
parameter_list|(
name|String
name|planQueueName
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|String
name|currResId
parameter_list|)
block|{
name|PlanQueue
name|planQueue
init|=
operator|(
name|PlanQueue
operator|)
name|queue
decl_stmt|;
try|try
block|{
name|ReservationQueue
name|resQueue
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
name|currResId
argument_list|,
name|planQueue
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|resQueue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while trying to activate reservation: {} for plan: {}"
argument_list|,
name|currResId
argument_list|,
name|planQueueName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while trying to activate reservation: {} for plan: {}"
argument_list|,
name|currResId
argument_list|,
name|planQueueName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createDefaultReservationQueue ( String planQueueName, Queue queue, String defReservationId)
specifier|protected
name|void
name|createDefaultReservationQueue
parameter_list|(
name|String
name|planQueueName
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|String
name|defReservationId
parameter_list|)
block|{
name|PlanQueue
name|planQueue
init|=
operator|(
name|PlanQueue
operator|)
name|queue
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|getQueue
argument_list|(
name|defReservationId
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ReservationQueue
name|defQueue
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
name|defReservationId
argument_list|,
name|planQueue
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|defQueue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while trying to create default reservation queue for plan: {}"
argument_list|,
name|planQueueName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while trying to create default reservation queue for "
operator|+
literal|"plan: {}"
argument_list|,
name|planQueueName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getPlanResources ( Plan plan, Queue queue, Resource clusterResources)
specifier|protected
name|Resource
name|getPlanResources
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|Resource
name|clusterResources
parameter_list|)
block|{
name|PlanQueue
name|planQueue
init|=
operator|(
name|PlanQueue
operator|)
name|queue
decl_stmt|;
name|float
name|planAbsCap
init|=
name|planQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
decl_stmt|;
name|Resource
name|planResources
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResources
argument_list|,
name|planAbsCap
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setTotalCapacity
argument_list|(
name|planResources
argument_list|)
expr_stmt|;
return|return
name|planResources
return|;
block|}
annotation|@
name|Override
DECL|method|getReservationQueueResourceIfExists (Plan plan, ReservationId reservationId)
specifier|protected
name|Resource
name|getReservationQueueResourceIfExists
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|)
block|{
name|CSQueue
name|resQueue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|reservationId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|reservationResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resQueue
operator|!=
literal|null
condition|)
block|{
name|reservationResource
operator|=
name|Resources
operator|.
name|multiply
argument_list|(
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|resQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reservationResource
return|;
block|}
block|}
end_class

end_unit

