begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_comment
comment|/**  * Main class that invokes the FS-&gt;CS converter.  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:hideutilityclassconstructor"
argument_list|)
DECL|class|FSConfigToCSConfigConverterMain
specifier|public
class|class
name|FSConfigToCSConfigConverterMain
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSConfigToCSConfigConverterMain
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FATAL
specifier|private
specifier|static
specifier|final
name|Marker
name|FATAL
init|=
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
literal|"FATAL"
argument_list|)
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
init|=
operator|new
name|FSConfigToCSConfigRuleHandler
argument_list|()
decl_stmt|;
name|FSConfigToCSConfigConverter
name|converter
init|=
operator|new
name|FSConfigToCSConfigConverter
argument_list|(
name|ruleHandler
argument_list|)
decl_stmt|;
name|FSConfigToCSConfigArgumentHandler
name|fsConfigConversionArgumentHandler
init|=
operator|new
name|FSConfigToCSConfigArgumentHandler
argument_list|(
name|converter
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|fsConfigConversionArgumentHandler
operator|.
name|parseAndConvert
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|FATAL
argument_list|,
literal|"Error while starting FS configuration conversion, "
operator|+
literal|"see previous error messages for details!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|FATAL
argument_list|,
literal|"Error while starting FS configuration conversion!"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

