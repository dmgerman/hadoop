begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|RMNodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AbstractCSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"capacityScheduler"
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|name
operator|=
literal|"capacityScheduler"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|CapacitySchedulerInfo
specifier|public
class|class
name|CapacitySchedulerInfo
extends|extends
name|SchedulerInfo
block|{
DECL|field|capacity
specifier|protected
name|float
name|capacity
decl_stmt|;
DECL|field|usedCapacity
specifier|protected
name|float
name|usedCapacity
decl_stmt|;
DECL|field|maxCapacity
specifier|protected
name|float
name|maxCapacity
decl_stmt|;
DECL|field|queueName
specifier|protected
name|String
name|queueName
decl_stmt|;
DECL|field|queues
specifier|protected
name|CapacitySchedulerQueueInfoList
name|queues
decl_stmt|;
DECL|field|health
specifier|protected
name|CapacitySchedulerHealthInfo
name|health
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|EPSILON
specifier|static
specifier|final
name|float
name|EPSILON
init|=
literal|1e-8f
decl_stmt|;
DECL|method|CapacitySchedulerInfo ()
specifier|public
name|CapacitySchedulerInfo
parameter_list|()
block|{   }
comment|// JAXB needs this
DECL|method|CapacitySchedulerInfo (CSQueue parent, CapacityScheduler cs, RMNodeLabel nodeLabel)
specifier|public
name|CapacitySchedulerInfo
parameter_list|(
name|CSQueue
name|parent
parameter_list|,
name|CapacityScheduler
name|cs
parameter_list|,
name|RMNodeLabel
name|nodeLabel
parameter_list|)
block|{
name|String
name|label
init|=
name|nodeLabel
operator|.
name|getLabelName
argument_list|()
decl_stmt|;
name|QueueCapacities
name|parentQueueCapacities
init|=
name|parent
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|this
operator|.
name|queueName
operator|=
name|parent
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|this
operator|.
name|usedCapacity
operator|=
name|parentQueueCapacities
operator|.
name|getUsedCapacity
argument_list|(
name|label
argument_list|)
operator|*
literal|100
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|parentQueueCapacities
operator|.
name|getCapacity
argument_list|(
name|label
argument_list|)
operator|*
literal|100
expr_stmt|;
name|float
name|max
init|=
name|parentQueueCapacities
operator|.
name|getMaximumCapacity
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
argument_list|<
name|EPSILON
operator|||
name|max
argument_list|>
literal|1f
condition|)
name|max
operator|=
literal|1f
expr_stmt|;
name|this
operator|.
name|maxCapacity
operator|=
name|max
operator|*
literal|100
expr_stmt|;
name|queues
operator|=
name|getQueues
argument_list|(
name|parent
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
name|health
operator|=
operator|new
name|CapacitySchedulerHealthInfo
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
DECL|method|getCapacity ()
specifier|public
name|float
name|getCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|capacity
return|;
block|}
DECL|method|getUsedCapacity ()
specifier|public
name|float
name|getUsedCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|usedCapacity
return|;
block|}
DECL|method|getMaxCapacity ()
specifier|public
name|float
name|getMaxCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxCapacity
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueName
return|;
block|}
DECL|method|getQueues ()
specifier|public
name|CapacitySchedulerQueueInfoList
name|getQueues
parameter_list|()
block|{
return|return
name|this
operator|.
name|queues
return|;
block|}
DECL|method|getQueues (CSQueue parent, RMNodeLabel nodeLabel)
specifier|protected
name|CapacitySchedulerQueueInfoList
name|getQueues
parameter_list|(
name|CSQueue
name|parent
parameter_list|,
name|RMNodeLabel
name|nodeLabel
parameter_list|)
block|{
name|CSQueue
name|parentQueue
init|=
name|parent
decl_stmt|;
name|CapacitySchedulerQueueInfoList
name|queuesInfo
init|=
operator|new
name|CapacitySchedulerQueueInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|CSQueue
name|queue
range|:
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeLabel
operator|.
name|getIsExclusive
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|AbstractCSQueue
operator|)
name|queue
operator|)
operator|.
name|accessibleToPartition
argument_list|(
name|nodeLabel
operator|.
name|getLabelName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Skip displaying the hierarchy for the queues for which the exclusive
comment|// labels are not accessible
continue|continue;
block|}
name|CapacitySchedulerQueueInfo
name|info
decl_stmt|;
if|if
condition|(
name|queue
operator|instanceof
name|LeafQueue
condition|)
block|{
name|info
operator|=
operator|new
name|CapacitySchedulerLeafQueueInfo
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queue
argument_list|,
name|nodeLabel
operator|.
name|getLabelName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
operator|new
name|CapacitySchedulerQueueInfo
argument_list|(
name|queue
argument_list|,
name|nodeLabel
operator|.
name|getLabelName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|queues
operator|=
name|getQueues
argument_list|(
name|queue
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
name|queuesInfo
operator|.
name|addToQueueInfoList
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|queuesInfo
return|;
block|}
block|}
end_class

end_unit

