begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|pjoin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientToAMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
operator|.
name|BlacklistManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
operator|.
name|DisabledBlacklistManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Recoverable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppFailedAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptStatusupdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUnregistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeFinishedContainersPulledByAMEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
operator|.
name|AMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyUriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|RMAppAttemptImpl
specifier|public
class|class
name|RMAppAttemptImpl
implements|implements
name|RMAppAttempt
implements|,
name|Recoverable
block|{
DECL|field|STATE_CHANGE_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|STATE_CHANGE_MESSAGE
init|=
literal|"%s State change from %s to %s on event = %s"
decl_stmt|;
DECL|field|RECOVERY_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|RECOVERY_MESSAGE
init|=
literal|"Recovering attempt: %s with final state = %s"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppAttemptImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|AM_CONTAINER_PRIORITY
specifier|public
specifier|final
specifier|static
name|Priority
name|AM_CONTAINER_PRIORITY
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|AM_CONTAINER_PRIORITY
operator|.
name|setPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|RMAppAttemptState
argument_list|,
name|RMAppAttemptEventType
argument_list|,
DECL|field|stateMachine
name|RMAppAttemptEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|eventHandler
specifier|private
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|masterService
specifier|private
specifier|final
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|submissionContext
specifier|private
specifier|final
name|ApplicationSubmissionContext
name|submissionContext
decl_stmt|;
DECL|field|amrmToken
specifier|private
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
literal|null
decl_stmt|;
DECL|field|amrmTokenKeyId
specifier|private
specifier|volatile
name|Integer
name|amrmTokenKeyId
init|=
literal|null
decl_stmt|;
DECL|field|clientTokenMasterKey
specifier|private
name|SecretKey
name|clientTokenMasterKey
init|=
literal|null
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
DECL|field|justFinishedContainers
name|justFinishedContainers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks the previous finished containers that are waiting to be
comment|// verified as received by the AM. If the AM sends the next allocate
comment|// request it implicitly acks this list.
specifier|private
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
DECL|field|finishedContainersSentToAM
name|finishedContainersSentToAM
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|masterContainer
specifier|private
specifier|volatile
name|Container
name|masterContainer
decl_stmt|;
DECL|field|progress
specifier|private
name|float
name|progress
init|=
literal|0
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|"N/A"
decl_stmt|;
DECL|field|rpcPort
specifier|private
name|int
name|rpcPort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|originalTrackingUrl
specifier|private
name|String
name|originalTrackingUrl
init|=
literal|"N/A"
decl_stmt|;
DECL|field|proxiedTrackingUrl
specifier|private
name|String
name|proxiedTrackingUrl
init|=
literal|"N/A"
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
init|=
literal|0
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
init|=
literal|0
decl_stmt|;
DECL|field|launchAMStartTime
specifier|private
name|long
name|launchAMStartTime
init|=
literal|0
decl_stmt|;
DECL|field|launchAMEndTime
specifier|private
name|long
name|launchAMEndTime
init|=
literal|0
decl_stmt|;
comment|// Set to null initially. Will eventually get set
comment|// if an RMAppAttemptUnregistrationEvent occurs
DECL|field|finalStatus
specifier|private
name|FinalApplicationStatus
name|finalStatus
init|=
literal|null
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|StringBuilder
name|diagnostics
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|amContainerExitStatus
specifier|private
name|int
name|amContainerExitStatus
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// Since AM preemption, hardware error and NM resync are not counted towards
comment|// AM failure count, even if this flag is true, a new attempt can still be
comment|// re-created if this attempt is eventually failed because of preemption,
comment|// hardware error or NM resync. So this flag indicates that this may be
comment|// last attempt.
DECL|field|maybeLastAttempt
specifier|private
specifier|final
name|boolean
name|maybeLastAttempt
decl_stmt|;
DECL|field|EXPIRED_TRANSITION
specifier|private
specifier|static
specifier|final
name|ExpiredTransition
name|EXPIRED_TRANSITION
init|=
operator|new
name|ExpiredTransition
argument_list|()
decl_stmt|;
DECL|field|FAILED_TRANSITION
specifier|private
specifier|static
specifier|final
name|AttemptFailedTransition
name|FAILED_TRANSITION
init|=
operator|new
name|AttemptFailedTransition
argument_list|()
decl_stmt|;
DECL|field|eventCausingFinalSaving
specifier|private
name|RMAppAttemptEvent
name|eventCausingFinalSaving
decl_stmt|;
DECL|field|targetedFinalState
specifier|private
name|RMAppAttemptState
name|targetedFinalState
decl_stmt|;
DECL|field|recoveredFinalState
specifier|private
name|RMAppAttemptState
name|recoveredFinalState
decl_stmt|;
DECL|field|stateBeforeFinalSaving
specifier|private
name|RMAppAttemptState
name|stateBeforeFinalSaving
decl_stmt|;
DECL|field|transitionTodo
specifier|private
name|Object
name|transitionTodo
decl_stmt|;
DECL|field|attemptMetrics
specifier|private
name|RMAppAttemptMetrics
name|attemptMetrics
init|=
literal|null
decl_stmt|;
DECL|field|amReq
specifier|private
name|ResourceRequest
name|amReq
init|=
literal|null
decl_stmt|;
DECL|field|blacklistedNodesForAM
specifier|private
name|BlacklistManager
name|blacklistedNodesForAM
init|=
literal|null
decl_stmt|;
DECL|field|amLaunchDiagnostics
specifier|private
name|String
name|amLaunchDiagnostics
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptState
argument_list|,
name|RMAppAttemptEventType
argument_list|,
name|RMAppAttemptEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptState
argument_list|,
name|RMAppAttemptEventType
argument_list|,
name|RMAppAttemptEvent
argument_list|>
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|START
argument_list|,
operator|new
name|AttemptStartedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|UnexpectedAMRegisteredTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|RECOVER
argument_list|,
operator|new
name|AttemptRecoveredTransition
argument_list|()
argument_list|)
comment|// Transitions from SUBMITTED state
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|,
operator|new
name|ScheduleTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|UnexpectedAMRegisteredTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from SCHEDULED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
operator|new
name|AMContainerAllocatedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AMContainerCrashedBeforeRunningTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from ALLOCATED_SAVING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_NEW_SAVED
argument_list|,
operator|new
name|AttemptStoredTransition
argument_list|()
argument_list|)
comment|// App could be killed by the client. So need to handle this.
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AMContainerCrashedBeforeRunningTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from LAUNCHED_UNMANAGED_SAVING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_NEW_SAVED
argument_list|,
operator|new
name|UnmanagedAMAttemptSavedTransition
argument_list|()
argument_list|)
comment|// attempt should not try to register in this state
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|UnexpectedAMRegisteredTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// App could be killed by the client. So need to handle this.
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from ALLOCATED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|,
operator|new
name|AMLaunchedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|LaunchFailedTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|KillAllocatedAMTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AMContainerCrashedBeforeRunningTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from LAUNCHED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|AMRegisteredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedTransition
argument_list|(
operator|new
name|AMContainerCrashedBeforeRunningTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|EXPIRED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from RUNNING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
operator|new
name|AMUnregisteredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedTransition
argument_list|(
operator|new
name|AMContainerCrashedAtRunningTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|EXPIRED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FAILED_TRANSITION
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from FINAL_SAVING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_UPDATE_SAVED
argument_list|,
operator|new
name|FinalStateSavedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedAtFinalSavingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|AMExpiredAtFinalSavingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
comment|// should be fixed to reject container allocate request at Final
comment|// Saving in scheduler
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_NEW_SAVED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|)
argument_list|)
comment|// Transitions from FAILED State
comment|// For work-preserving AM restart, failed attempt are still capturing
comment|// CONTAINER_FINISHED event and record the finished containers for the
comment|// use by the next new attempt.
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedAtFinalStateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
argument_list|)
comment|// Transitions from FINISHING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|AMFinishingContainerFinishedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
comment|// ignore Kill as we have already saved the final Finished state in
comment|// state store.
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|)
argument_list|)
comment|// Transitions from FINISHED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedAtFinalStateTransition
argument_list|()
argument_list|)
comment|// Transitions from KILLED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedAtFinalStateTransition
argument_list|()
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|method|RMAppAttemptImpl (ApplicationAttemptId appAttemptId, RMContext rmContext, YarnScheduler scheduler, ApplicationMasterService masterService, ApplicationSubmissionContext submissionContext, Configuration conf, boolean maybeLastAttempt, ResourceRequest amReq)
specifier|public
name|RMAppAttemptImpl
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|maybeLastAttempt
parameter_list|,
name|ResourceRequest
name|amReq
parameter_list|)
block|{
name|this
argument_list|(
name|appAttemptId
argument_list|,
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
name|conf
argument_list|,
name|maybeLastAttempt
argument_list|,
name|amReq
argument_list|,
operator|new
name|DisabledBlacklistManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RMAppAttemptImpl (ApplicationAttemptId appAttemptId, RMContext rmContext, YarnScheduler scheduler, ApplicationMasterService masterService, ApplicationSubmissionContext submissionContext, Configuration conf, boolean maybeLastAttempt, ResourceRequest amReq, BlacklistManager amBlacklistManager)
specifier|public
name|RMAppAttemptImpl
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|maybeLastAttempt
parameter_list|,
name|ResourceRequest
name|amReq
parameter_list|,
name|BlacklistManager
name|amBlacklistManager
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|applicationAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|submissionContext
operator|=
name|submissionContext
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|masterService
operator|=
name|masterService
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxiedTrackingUrl
operator|=
name|generateProxyUriWithScheme
argument_list|()
expr_stmt|;
name|this
operator|.
name|maybeLastAttempt
operator|=
name|maybeLastAttempt
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptMetrics
operator|=
operator|new
name|RMAppAttemptMetrics
argument_list|(
name|applicationAttemptId
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|amReq
operator|=
name|amReq
expr_stmt|;
name|this
operator|.
name|blacklistedNodesForAM
operator|=
name|amBlacklistManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAppAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationAttemptId
return|;
block|}
annotation|@
name|Override
DECL|method|getSubmissionContext ()
specifier|public
name|ApplicationSubmissionContext
name|getSubmissionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|submissionContext
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalApplicationStatus ()
specifier|public
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|finalStatus
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAppAttemptState ()
specifier|public
name|RMAppAttemptState
name|getAppAttemptState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|host
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRpcPort ()
specifier|public
name|int
name|getRpcPort
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|rpcPort
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTrackingUrl ()
specifier|public
name|String
name|getTrackingUrl
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|getSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
operator|)
condition|?
name|this
operator|.
name|originalTrackingUrl
else|:
name|this
operator|.
name|proxiedTrackingUrl
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOriginalTrackingUrl ()
specifier|public
name|String
name|getOriginalTrackingUrl
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|originalTrackingUrl
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWebProxyBase ()
specifier|public
name|String
name|getWebProxyBase
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|generateProxyUriWithScheme ()
specifier|private
name|String
name|generateProxyUriWithScheme
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|scheme
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|proxy
init|=
name|WebAppUtils
operator|.
name|getProxyHostAndPort
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URI
name|proxyUri
init|=
name|ProxyUriUtils
operator|.
name|getUriFromAMUrl
argument_list|(
name|scheme
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
name|URI
name|result
init|=
name|ProxyUriUtils
operator|.
name|getProxyUri
argument_list|(
literal|null
argument_list|,
name|proxyUri
argument_list|,
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toASCIIString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not proxify the uri for "
operator|+
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setTrackingUrlToRMAppPage (RMAppAttemptState stateToBeStored)
specifier|private
name|void
name|setTrackingUrlToRMAppPage
parameter_list|(
name|RMAppAttemptState
name|stateToBeStored
parameter_list|)
block|{
name|originalTrackingUrl
operator|=
name|pjoin
argument_list|(
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|stateToBeStored
condition|)
block|{
case|case
name|KILLED
case|:
case|case
name|FAILED
case|:
name|proxiedTrackingUrl
operator|=
name|originalTrackingUrl
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|setTrackingUrlToAHSPage (RMAppAttemptState stateToBeStored)
specifier|private
name|void
name|setTrackingUrlToAHSPage
parameter_list|(
name|RMAppAttemptState
name|stateToBeStored
parameter_list|)
block|{
name|originalTrackingUrl
operator|=
name|pjoin
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"applicationhistory"
argument_list|,
literal|"app"
argument_list|,
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|stateToBeStored
condition|)
block|{
case|case
name|KILLED
case|:
case|case
name|FAILED
case|:
name|proxiedTrackingUrl
operator|=
name|originalTrackingUrl
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|invalidateAMHostAndPort ()
specifier|private
name|void
name|invalidateAMHostAndPort
parameter_list|()
block|{
name|this
operator|.
name|host
operator|=
literal|"N/A"
expr_stmt|;
name|this
operator|.
name|rpcPort
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// This is only used for RMStateStore. Normal operation must invoke the secret
comment|// manager to get the key and not use the local key directly.
annotation|@
name|Override
DECL|method|getClientTokenMasterKey ()
specifier|public
name|SecretKey
name|getClientTokenMasterKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|clientTokenMasterKey
return|;
block|}
annotation|@
name|Override
DECL|method|getAMRMToken ()
specifier|public
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|getAMRMToken
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|amrmToken
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|setAMRMToken (Token<AMRMTokenIdentifier> lastToken)
specifier|public
name|void
name|setAMRMToken
parameter_list|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|lastToken
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|amrmToken
operator|=
name|lastToken
expr_stmt|;
name|this
operator|.
name|amrmTokenKeyId
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|getAMRMTokenKeyId ()
specifier|public
name|int
name|getAMRMTokenKeyId
parameter_list|()
block|{
name|Integer
name|keyId
init|=
name|this
operator|.
name|amrmTokenKeyId
decl_stmt|;
if|if
condition|(
name|keyId
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|amrmToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Missing AMRM token for "
operator|+
name|this
operator|.
name|applicationAttemptId
argument_list|)
throw|;
block|}
name|keyId
operator|=
name|this
operator|.
name|amrmToken
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
expr_stmt|;
name|this
operator|.
name|amrmTokenKeyId
operator|=
name|keyId
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"AMRM token decode error for "
operator|+
name|this
operator|.
name|applicationAttemptId
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|keyId
return|;
block|}
annotation|@
name|Override
DECL|method|createClientToken (String client)
specifier|public
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|createClientToken
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
name|ClientToAMTokenSecretManagerInRM
name|secretMgr
init|=
name|this
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
operator|&&
name|secretMgr
operator|.
name|getMasterKey
argument_list|(
name|this
operator|.
name|applicationAttemptId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
operator|new
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
argument_list|(
operator|new
name|ClientToAMTokenIdentifier
argument_list|(
name|this
operator|.
name|applicationAttemptId
argument_list|,
name|client
argument_list|)
argument_list|,
name|secretMgr
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|diagnostics
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|amLaunchDiagnostics
operator|!=
literal|null
condition|)
block|{
return|return
name|amLaunchDiagnostics
return|;
block|}
return|return
name|this
operator|.
name|diagnostics
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAMContainerExitStatus ()
specifier|public
name|int
name|getAMContainerExitStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|amContainerExitStatus
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|progress
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|getJustFinishedContainers ()
specifier|public
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getJustFinishedContainers
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatusList
range|:
name|justFinishedContainers
operator|.
name|values
argument_list|()
control|)
block|{
name|returnList
operator|.
name|addAll
argument_list|(
name|containerStatusList
argument_list|)
expr_stmt|;
block|}
return|return
name|returnList
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
DECL|method|getJustFinishedContainersReference ()
name|getJustFinishedContainersReference
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|justFinishedContainers
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
DECL|method|getFinishedContainersSentToAMReference ()
name|getFinishedContainersSentToAMReference
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|finishedContainersSentToAM
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|pullJustFinishedContainers ()
specifier|public
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|pullJustFinishedContainers
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// A new allocate means the AM received the previously sent
comment|// finishedContainers. We can ack this to NM now
name|sendFinishedContainersToNM
argument_list|()
expr_stmt|;
comment|// Mark every containerStatus as being sent to AM though we may return
comment|// only the ones that belong to the current attempt
name|boolean
name|keepContainersAcrossAppAttempts
init|=
name|this
operator|.
name|submissionContext
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|entry
range|:
name|justFinishedContainers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|finishedContainers
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|finishedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|keepContainersAcrossAppAttempts
condition|)
block|{
name|returnList
operator|.
name|addAll
argument_list|(
name|finishedContainers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Filter out containers from previous attempt
for|for
control|(
name|ContainerStatus
name|containerStatus
range|:
name|finishedContainers
control|)
block|{
if|if
condition|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
condition|)
block|{
name|returnList
operator|.
name|add
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|finishedContainersSentToAM
operator|.
name|putIfAbsent
argument_list|(
name|nodeId
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|finishedContainersSentToAM
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|addAll
argument_list|(
name|finishedContainers
argument_list|)
expr_stmt|;
block|}
name|justFinishedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|returnList
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMasterContainer ()
specifier|public
name|Container
name|getMasterContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|masterContainer
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setMasterContainer (Container container)
specifier|public
name|void
name|setMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|masterContainer
operator|=
name|container
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationAttemptId
name|appAttemptID
init|=
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing event for "
operator|+
name|appAttemptID
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RMAppAttemptState
name|oldState
init|=
name|getAppAttemptState
argument_list|()
decl_stmt|;
try|try
block|{
comment|/* keep the master in sync with the state machine */
name|this
operator|.
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|/* TODO fail the application on the failed transition */
block|}
comment|// Log at INFO if we're not recovering or not in a terminal state.
comment|// Log at DEBUG otherwise.
if|if
condition|(
operator|(
name|oldState
operator|!=
name|getAppAttemptState
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|recoveredFinalState
operator|==
literal|null
operator|)
operator|||
operator|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|RMAppAttemptEventType
operator|.
name|RECOVER
operator|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|STATE_CHANGE_MESSAGE
argument_list|,
name|appAttemptID
argument_list|,
name|oldState
argument_list|,
name|getAppAttemptState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|oldState
operator|!=
name|getAppAttemptState
argument_list|()
operator|)
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|STATE_CHANGE_MESSAGE
argument_list|,
name|appAttemptID
argument_list|,
name|oldState
argument_list|,
name|getAppAttemptState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationResourceUsageReport ()
specifier|public
name|ApplicationResourceUsageReport
name|getApplicationResourceUsageReport
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationResourceUsageReport
name|report
init|=
name|scheduler
operator|.
name|getAppResourceUsageReport
argument_list|(
name|this
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|report
operator|==
literal|null
condition|)
block|{
name|report
operator|=
name|RMServerUtils
operator|.
name|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
expr_stmt|;
block|}
name|AggregateAppResourceUsage
name|resUsage
init|=
name|this
operator|.
name|attemptMetrics
operator|.
name|getAggregateAppResourceUsage
argument_list|()
decl_stmt|;
name|report
operator|.
name|setMemorySeconds
argument_list|(
name|resUsage
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setVcoreSeconds
argument_list|(
name|resUsage
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setPreemptedMemorySeconds
argument_list|(
name|this
operator|.
name|attemptMetrics
operator|.
name|getPreemptedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setPreemptedVcoreSeconds
argument_list|(
name|this
operator|.
name|attemptMetrics
operator|.
name|getPreemptedVcore
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
block|{
name|ApplicationStateData
name|appState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateData
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|attemptState
operator|!=
literal|null
assert|;
if|if
condition|(
name|attemptState
operator|.
name|getState
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RECOVERY_MESSAGE
argument_list|,
name|getAppAttemptId
argument_list|()
argument_list|,
literal|"NONE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RECOVERY_MESSAGE
argument_list|,
name|getAppAttemptId
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|diagnostics
operator|.
name|append
argument_list|(
literal|"Attempt recovered after RM restart"
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|append
argument_list|(
name|attemptState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|amContainerExitStatus
operator|=
name|attemptState
operator|.
name|getAMContainerExitStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|amContainerExitStatus
operator|==
name|ContainerExitStatus
operator|.
name|PREEMPTED
condition|)
block|{
name|this
operator|.
name|attemptMetrics
operator|.
name|setIsPreempted
argument_list|()
expr_stmt|;
block|}
name|Credentials
name|credentials
init|=
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
decl_stmt|;
name|setMasterContainer
argument_list|(
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|recoverAppAttemptCredentials
argument_list|(
name|credentials
argument_list|,
name|attemptState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoveredFinalState
operator|=
name|attemptState
operator|.
name|getState
argument_list|()
expr_stmt|;
name|this
operator|.
name|originalTrackingUrl
operator|=
name|attemptState
operator|.
name|getFinalTrackingUrl
argument_list|()
expr_stmt|;
name|this
operator|.
name|finalStatus
operator|=
name|attemptState
operator|.
name|getFinalApplicationStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|attemptState
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|attemptState
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|attemptMetrics
operator|.
name|updateAggregateAppResourceUsage
argument_list|(
name|attemptState
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptMetrics
operator|.
name|updateAggregatePreemptedAppResourceUsage
argument_list|(
name|attemptState
operator|.
name|getPreemptedMemorySeconds
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getPreemptedVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|transferStateFromAttempt (RMAppAttempt attempt)
specifier|public
name|void
name|transferStateFromAttempt
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|)
block|{
name|this
operator|.
name|justFinishedContainers
operator|=
name|attempt
operator|.
name|getJustFinishedContainersReference
argument_list|()
expr_stmt|;
name|this
operator|.
name|finishedContainersSentToAM
operator|=
name|attempt
operator|.
name|getFinishedContainersSentToAMReference
argument_list|()
expr_stmt|;
comment|// container complete msg was moved from justFinishedContainers to
comment|// finishedContainersSentToAM in ApplicationMasterService#allocate,
comment|// if am crashed and not received this response, we should resend
comment|// this msg again after am restart
if|if
condition|(
operator|!
name|this
operator|.
name|finishedContainersSentToAM
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NodeId
name|nodeId
range|:
name|this
operator|.
name|finishedContainersSentToAM
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|this
operator|.
name|finishedContainersSentToAM
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|this
operator|.
name|justFinishedContainers
operator|.
name|putIfAbsent
argument_list|(
name|nodeId
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|justFinishedContainers
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|addAll
argument_list|(
name|containerStatuses
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|finishedContainersSentToAM
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|recoverAppAttemptCredentials (Credentials appAttemptTokens, RMAppAttemptState state)
specifier|private
name|void
name|recoverAppAttemptCredentials
parameter_list|(
name|Credentials
name|appAttemptTokens
parameter_list|,
name|RMAppAttemptState
name|state
parameter_list|)
block|{
if|if
condition|(
name|appAttemptTokens
operator|==
literal|null
operator|||
name|state
operator|==
name|RMAppAttemptState
operator|.
name|FAILED
operator|||
name|state
operator|==
name|RMAppAttemptState
operator|.
name|FINISHED
operator|||
name|state
operator|==
name|RMAppAttemptState
operator|.
name|KILLED
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|byte
index|[]
name|clientTokenMasterKeyBytes
init|=
name|appAttemptTokens
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientTokenMasterKeyBytes
operator|!=
literal|null
condition|)
block|{
name|clientTokenMasterKey
operator|=
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|registerMasterKey
argument_list|(
name|applicationAttemptId
argument_list|,
name|clientTokenMasterKeyBytes
argument_list|)
expr_stmt|;
block|}
block|}
name|setAMRMToken
argument_list|(
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|createAndGetAMRMToken
argument_list|(
name|applicationAttemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|BaseTransition
specifier|private
specifier|static
class|class
name|BaseTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|class|AttemptStartedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AttemptStartedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|boolean
name|transferStateFromPreviousAttempt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|RMAppStartAttemptEvent
condition|)
block|{
name|transferStateFromPreviousAttempt
operator|=
operator|(
operator|(
name|RMAppStartAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTransferStateFromPreviousAttempt
argument_list|()
expr_stmt|;
block|}
name|appAttempt
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Register with the ApplicationMasterService
name|appAttempt
operator|.
name|masterService
operator|.
name|registerAppAttempt
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|appAttempt
operator|.
name|clientTokenMasterKey
operator|=
name|appAttempt
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|createMasterKey
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|// Add the applicationAttempt to the scheduler and inform the scheduler
comment|// whether to transfer the state from previous attempt.
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|transferStateFromPreviousAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_CONTAINER_RELEASE_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ContainerId
argument_list|>
name|EMPTY_CONTAINER_RELEASE_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_CONTAINER_REQUEST_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|EMPTY_CONTAINER_REQUEST_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|class|ScheduleTransition
specifier|public
specifier|static
specifier|final
class|class
name|ScheduleTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|subCtx
init|=
name|appAttempt
operator|.
name|submissionContext
decl_stmt|;
if|if
condition|(
operator|!
name|subCtx
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// Need reset #containers before create new attempt, because this request
comment|// will be passed to scheduler, and scheduler will deduct the number after
comment|// AM container allocated
comment|// Currently, following fields are all hard code,
comment|// TODO: change these fields when we want to support
comment|// priority/resource-name/relax-locality specification for AM containers
comment|// allocation.
name|appAttempt
operator|.
name|amReq
operator|.
name|setNumContainers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|amReq
operator|.
name|setPriority
argument_list|(
name|AM_CONTAINER_PRIORITY
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|amReq
operator|.
name|setResourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|amReq
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|getAMBlacklistManager
argument_list|()
operator|.
name|refreshNodeHostCount
argument_list|(
name|appAttempt
operator|.
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceBlacklistRequest
name|amBlacklist
init|=
name|appAttempt
operator|.
name|getAMBlacklistManager
argument_list|()
operator|.
name|getBlacklistUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using blacklist for AM: additions("
operator|+
name|amBlacklist
operator|.
name|getBlacklistAdditions
argument_list|()
operator|+
literal|") and removals("
operator|+
name|amBlacklist
operator|.
name|getBlacklistRemovals
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// AM resource has been checked when submission
name|Allocation
name|amContainerAllocation
init|=
name|appAttempt
operator|.
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|appAttempt
operator|.
name|amReq
argument_list|)
argument_list|,
name|EMPTY_CONTAINER_RELEASE_LIST
argument_list|,
name|amBlacklist
operator|.
name|getBlacklistAdditions
argument_list|()
argument_list|,
name|amBlacklist
operator|.
name|getBlacklistRemovals
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|amContainerAllocation
operator|!=
literal|null
operator|&&
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|(
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
return|return
name|RMAppAttemptState
operator|.
name|SCHEDULED
return|;
block|}
else|else
block|{
comment|// save state and then go to LAUNCHED state
name|appAttempt
operator|.
name|storeAttempt
argument_list|()
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
return|;
block|}
block|}
block|}
DECL|class|AMContainerAllocatedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMContainerAllocatedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Acquire the AM container from the scheduler.
name|Allocation
name|amContainerAllocation
init|=
name|appAttempt
operator|.
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|EMPTY_CONTAINER_REQUEST_LIST
argument_list|,
name|EMPTY_CONTAINER_RELEASE_LIST
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// There must be at least one container allocated, because a
comment|// CONTAINER_ALLOCATED is emitted after an RMContainer is constructed,
comment|// and is put in SchedulerApplication#newlyAllocatedContainers.
comment|// Note that YarnScheduler#allocate is not guaranteed to be able to
comment|// fetch it since container may not be fetchable for some reason like
comment|// DNS unavailable causing container token not generated. As such, we
comment|// return to the previous state and keep retry until am container is
comment|// fetched.
if|if
condition|(
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|appAttempt
operator|.
name|retryFetchingAMContainer
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|SCHEDULED
return|;
block|}
comment|// Set the masterContainer
name|appAttempt
operator|.
name|setMasterContainer
argument_list|(
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainerImpl
name|rmMasterContainer
init|=
operator|(
name|RMContainerImpl
operator|)
name|appAttempt
operator|.
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|rmMasterContainer
operator|.
name|setAMContainer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The node set in NMTokenSecrentManager is used for marking whether the
comment|// NMToken has been issued for this node to the AM.
comment|// When AM container was allocated to RM itself, the node which allocates
comment|// this AM container was marked as the NMToken already sent. Thus,
comment|// clear this node set so that the following allocate requests from AM are
comment|// able to retrieve the corresponding NMToken.
name|appAttempt
operator|.
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|clearNodeSetForAttempt
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|setResource
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|storeAttempt
argument_list|()
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
return|;
block|}
block|}
DECL|method|retryFetchingAMContainer (final RMAppAttemptImpl appAttempt)
specifier|private
name|void
name|retryFetchingAMContainer
parameter_list|(
specifier|final
name|RMAppAttemptImpl
name|appAttempt
parameter_list|)
block|{
comment|// start a new thread so that we are not blocking main dispatcher thread.
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting to resend the"
operator|+
literal|" ContainerAllocated Event."
argument_list|)
expr_stmt|;
block|}
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|class|AttemptStoredTransition
specifier|private
specifier|static
specifier|final
class|class
name|AttemptStoredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|launchAttempt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AttemptRecoveredTransition
specifier|private
specifier|static
class|class
name|AttemptRecoveredTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMApp
name|rmApp
init|=
name|appAttempt
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|/*        * If last attempt recovered final state is null .. it means attempt was        * started but AM container may or may not have started / finished.        * Therefore we should wait for it to finish.        */
if|if
condition|(
name|appAttempt
operator|.
name|recoveredFinalState
operator|!=
literal|null
condition|)
block|{
name|appAttempt
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
operator|&&
operator|!
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
operator|&&
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|!=
name|appAttempt
condition|)
block|{
name|appAttempt
operator|.
name|transferStateFromAttempt
argument_list|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We will replay the final attempt only if last attempt is in final
comment|// state but application is not in final state.
if|if
condition|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|==
name|appAttempt
operator|&&
operator|!
name|RMAppImpl
operator|.
name|isAppInFinalState
argument_list|(
name|rmApp
argument_list|)
condition|)
block|{
comment|// Add the previous finished attempt to scheduler synchronously so
comment|// that scheduler knows the previous attempt.
name|appAttempt
operator|.
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|new
name|BaseFinalTransition
argument_list|(
name|appAttempt
operator|.
name|recoveredFinalState
argument_list|)
operator|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttempt
operator|.
name|recoveredFinalState
return|;
block|}
elseif|else
if|if
condition|(
name|RMAppImpl
operator|.
name|isAppInFinalState
argument_list|(
name|rmApp
argument_list|)
condition|)
block|{
comment|// Somehow attempt final state was not saved but app final state was saved.
comment|// Skip adding the attempt into scheduler
name|RMAppState
name|appState
init|=
operator|(
operator|(
name|RMAppImpl
operator|)
name|rmApp
operator|)
operator|.
name|getRecoveredFinalState
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" final state ("
operator|+
name|appState
operator|+
literal|") was recorded, but "
operator|+
name|appAttempt
operator|.
name|applicationAttemptId
operator|+
literal|" final state ("
operator|+
name|appAttempt
operator|.
name|recoveredFinalState
operator|+
literal|") was not recorded."
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|appState
condition|)
block|{
case|case
name|FINISHED
case|:
return|return
name|RMAppAttemptState
operator|.
name|FINISHED
return|;
case|case
name|FAILED
case|:
return|return
name|RMAppAttemptState
operator|.
name|FAILED
return|;
case|case
name|KILLED
case|:
return|return
name|RMAppAttemptState
operator|.
name|KILLED
return|;
block|}
return|return
name|RMAppAttemptState
operator|.
name|FAILED
return|;
block|}
else|else
block|{
comment|// Add the current attempt to the scheduler.
if|if
condition|(
name|appAttempt
operator|.
name|rmContext
operator|.
name|isWorkPreservingRecoveryEnabled
argument_list|()
condition|)
block|{
comment|// Need to register an app attempt before AM can register
name|appAttempt
operator|.
name|masterService
operator|.
name|registerAppAttempt
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
comment|// Add attempt to scheduler synchronously to guarantee scheduler
comment|// knows attempts before AM or NM re-registers.
name|appAttempt
operator|.
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*          * Since the application attempt's final state is not saved that means          * for AM container (previous attempt) state must be one of these.          * 1) AM container may not have been launched (RM failed right before          * this).          * 2) AM container was successfully launched but may or may not have          * registered / unregistered.          * In whichever case we will wait (by moving attempt into LAUNCHED          * state) and mark this attempt failed (assuming non work preserving          * restart) only after          * 1) Node manager during re-registration heart beats back saying          * am container finished.          * 2) OR AMLivelinessMonitor expires this attempt (when am doesn't          * heart beat back).            */
operator|(
operator|new
name|AMLaunchedTransition
argument_list|()
operator|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|LAUNCHED
return|;
block|}
block|}
block|}
DECL|method|rememberTargetTransitions (RMAppAttemptEvent event, Object transitionToDo, RMAppAttemptState targetFinalState)
specifier|private
name|void
name|rememberTargetTransitions
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|,
name|Object
name|transitionToDo
parameter_list|,
name|RMAppAttemptState
name|targetFinalState
parameter_list|)
block|{
name|transitionTodo
operator|=
name|transitionToDo
expr_stmt|;
name|targetedFinalState
operator|=
name|targetFinalState
expr_stmt|;
name|eventCausingFinalSaving
operator|=
name|event
expr_stmt|;
block|}
DECL|method|rememberTargetTransitionsAndStoreState (RMAppAttemptEvent event, Object transitionToDo, RMAppAttemptState targetFinalState, RMAppAttemptState stateToBeStored)
specifier|private
name|void
name|rememberTargetTransitionsAndStoreState
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|,
name|Object
name|transitionToDo
parameter_list|,
name|RMAppAttemptState
name|targetFinalState
parameter_list|,
name|RMAppAttemptState
name|stateToBeStored
parameter_list|)
block|{
name|rememberTargetTransitions
argument_list|(
name|event
argument_list|,
name|transitionToDo
argument_list|,
name|targetFinalState
argument_list|)
expr_stmt|;
name|stateBeforeFinalSaving
operator|=
name|getState
argument_list|()
expr_stmt|;
comment|// As of today, finalState, diagnostics, final-tracking-url and
comment|// finalAppStatus are the only things that we store into the StateStore
comment|// AFTER the initial saving on app-attempt-start
comment|// These fields can be visible from outside only after they are saved in
comment|// StateStore
name|String
name|diags
init|=
literal|null
decl_stmt|;
comment|// don't leave the tracking URL pointing to a non-existent AM
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_HISTORY_ENABLED
argument_list|)
condition|)
block|{
name|setTrackingUrlToAHSPage
argument_list|(
name|stateToBeStored
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTrackingUrlToRMAppPage
argument_list|(
name|stateToBeStored
argument_list|)
expr_stmt|;
block|}
name|String
name|finalTrackingUrl
init|=
name|getOriginalTrackingUrl
argument_list|()
decl_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
literal|null
decl_stmt|;
name|int
name|exitStatus
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LAUNCH_FAILED
case|:
name|diags
operator|=
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
expr_stmt|;
break|break;
case|case
name|REGISTERED
case|:
name|diags
operator|=
name|getUnexpectedAMRegisteredDiagnostics
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNREGISTERED
case|:
name|RMAppAttemptUnregistrationEvent
name|unregisterEvent
init|=
operator|(
name|RMAppAttemptUnregistrationEvent
operator|)
name|event
decl_stmt|;
name|diags
operator|=
name|unregisterEvent
operator|.
name|getDiagnosticMsg
argument_list|()
expr_stmt|;
comment|// reset finalTrackingUrl to url sent by am
name|finalTrackingUrl
operator|=
name|sanitizeTrackingUrl
argument_list|(
name|unregisterEvent
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|finalStatus
operator|=
name|unregisterEvent
operator|.
name|getFinalApplicationStatus
argument_list|()
expr_stmt|;
break|break;
case|case
name|CONTAINER_FINISHED
case|:
name|RMAppAttemptContainerFinishedEvent
name|finishEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|diags
operator|=
name|getAMContainerCrashedDiagnostics
argument_list|(
name|finishEvent
argument_list|)
expr_stmt|;
name|exitStatus
operator|=
name|finishEvent
operator|.
name|getContainerStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
expr_stmt|;
break|break;
case|case
name|KILL
case|:
break|break;
case|case
name|FAIL
case|:
name|diags
operator|=
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXPIRE
case|:
name|diags
operator|=
name|getAMExpiredDiagnostics
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|AggregateAppResourceUsage
name|resUsage
init|=
name|this
operator|.
name|attemptMetrics
operator|.
name|getAggregateAppResourceUsage
argument_list|()
decl_stmt|;
name|RMStateStore
name|rmStore
init|=
name|rmContext
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|setFinishTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|attemptState
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|applicationAttemptId
argument_list|,
name|getMasterContainer
argument_list|()
argument_list|,
name|rmStore
operator|.
name|getCredentialsFromAppAttempt
argument_list|(
name|this
argument_list|)
argument_list|,
name|startTime
argument_list|,
name|stateToBeStored
argument_list|,
name|finalTrackingUrl
argument_list|,
name|diags
argument_list|,
name|finalStatus
argument_list|,
name|exitStatus
argument_list|,
name|getFinishTime
argument_list|()
argument_list|,
name|resUsage
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|resUsage
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|,
name|this
operator|.
name|attemptMetrics
operator|.
name|getPreemptedMemory
argument_list|()
argument_list|,
name|this
operator|.
name|attemptMetrics
operator|.
name|getPreemptedVcore
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating application attempt "
operator|+
name|applicationAttemptId
operator|+
literal|" with final state: "
operator|+
name|targetedFinalState
operator|+
literal|", and exit status: "
operator|+
name|exitStatus
argument_list|)
expr_stmt|;
name|rmStore
operator|.
name|updateApplicationAttemptState
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
block|}
DECL|class|FinalSavingTransition
specifier|private
specifier|static
class|class
name|FinalSavingTransition
extends|extends
name|BaseTransition
block|{
DECL|field|transitionToDo
name|Object
name|transitionToDo
decl_stmt|;
DECL|field|targetedFinalState
name|RMAppAttemptState
name|targetedFinalState
decl_stmt|;
DECL|method|FinalSavingTransition (Object transitionToDo, RMAppAttemptState targetedFinalState)
specifier|public
name|FinalSavingTransition
parameter_list|(
name|Object
name|transitionToDo
parameter_list|,
name|RMAppAttemptState
name|targetedFinalState
parameter_list|)
block|{
name|this
operator|.
name|transitionToDo
operator|=
name|transitionToDo
expr_stmt|;
name|this
operator|.
name|targetedFinalState
operator|=
name|targetedFinalState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// For cases Killed/Failed, targetedFinalState is the same as the state to
comment|// be stored
name|appAttempt
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
name|transitionToDo
argument_list|,
name|targetedFinalState
argument_list|,
name|targetedFinalState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FinalStateSavedTransition
specifier|private
specifier|static
class|class
name|FinalStateSavedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptEvent
name|causeEvent
init|=
name|appAttempt
operator|.
name|eventCausingFinalSaving
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|transitionTodo
operator|instanceof
name|SingleArcTransition
condition|)
block|{
operator|(
operator|(
name|SingleArcTransition
operator|)
name|appAttempt
operator|.
name|transitionTodo
operator|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|causeEvent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|appAttempt
operator|.
name|transitionTodo
operator|instanceof
name|MultipleArcTransition
condition|)
block|{
operator|(
operator|(
name|MultipleArcTransition
operator|)
name|appAttempt
operator|.
name|transitionTodo
operator|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|causeEvent
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttempt
operator|.
name|targetedFinalState
return|;
block|}
block|}
DECL|class|BaseFinalTransition
specifier|private
specifier|static
class|class
name|BaseFinalTransition
extends|extends
name|BaseTransition
block|{
DECL|field|finalAttemptState
specifier|private
specifier|final
name|RMAppAttemptState
name|finalAttemptState
decl_stmt|;
DECL|method|BaseFinalTransition (RMAppAttemptState finalAttemptState)
specifier|public
name|BaseFinalTransition
parameter_list|(
name|RMAppAttemptState
name|finalAttemptState
parameter_list|)
block|{
name|this
operator|.
name|finalAttemptState
operator|=
name|finalAttemptState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
comment|// Tell the AMS. Unregister from the ApplicationMasterService
name|appAttempt
operator|.
name|masterService
operator|.
name|unregisterAttempt
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
comment|// Tell the application and the scheduler
name|ApplicationId
name|applicationId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMAppEvent
name|appEvent
init|=
literal|null
decl_stmt|;
name|boolean
name|keepContainersAcrossAppAttempts
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|finalAttemptState
condition|)
block|{
case|case
name|FINISHED
case|:
block|{
name|appEvent
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|KILLED
case|:
block|{
name|appAttempt
operator|.
name|invalidateAMHostAndPort
argument_list|()
expr_stmt|;
comment|// Forward diagnostics received in attempt kill event.
name|appEvent
operator|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|,
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FAILED
case|:
block|{
name|appAttempt
operator|.
name|invalidateAMHostAndPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
operator|&&
operator|!
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// See if we should retain containers for non-unmanaged applications
if|if
condition|(
operator|!
name|appAttempt
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
condition|)
block|{
comment|// Premption, hardware failures, NM resync doesn't count towards
comment|// app-failures and so we should retain containers.
name|keepContainersAcrossAppAttempts
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|appAttempt
operator|.
name|maybeLastAttempt
condition|)
block|{
comment|// Not preemption, hardware failures or NM resync.
comment|// Not last-attempt too - keep containers.
name|keepContainersAcrossAppAttempts
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|appEvent
operator|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|keepContainersAcrossAppAttempts
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get this state!! Error!!"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|appEvent
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|appAttemptId
argument_list|,
name|finalAttemptState
argument_list|,
name|keepContainersAcrossAppAttempts
argument_list|)
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|removeCredentials
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|applicationAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|finalAttemptState
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|appAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|finalAttemptState
argument_list|,
name|appAttempt
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AttemptFailedTransition
specifier|private
specifier|static
class|class
name|AttemptFailedTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|AttemptFailedTransition ()
specifier|public
name|AttemptFailedTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMLaunchedTransition
specifier|private
specifier|static
class|class
name|AMLaunchedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
condition|)
block|{
name|appAttempt
operator|.
name|launchAMEndTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|long
name|delay
init|=
name|appAttempt
operator|.
name|launchAMEndTime
operator|-
name|appAttempt
operator|.
name|launchAMStartTime
decl_stmt|;
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|addAMLaunchDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
name|appAttempt
operator|.
name|updateAMLaunchDiagnostics
argument_list|(
name|AMState
operator|.
name|LAUNCHED
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register with AMLivelinessMonitor
name|appAttempt
operator|.
name|attemptLaunched
argument_list|()
expr_stmt|;
comment|// register the ClientTokenMasterKey after it is saved in the store,
comment|// otherwise client may hold an invalid ClientToken after RM restarts.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|appAttempt
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|registerApplication
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|shouldCountTowardsMaxAttemptRetry ()
specifier|public
name|boolean
name|shouldCountTowardsMaxAttemptRetry
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|int
name|exitStatus
init|=
name|getAMContainerExitStatus
argument_list|()
decl_stmt|;
return|return
operator|!
operator|(
name|exitStatus
operator|==
name|ContainerExitStatus
operator|.
name|PREEMPTED
operator|||
name|exitStatus
operator|==
name|ContainerExitStatus
operator|.
name|ABORTED
operator|||
name|exitStatus
operator|==
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
operator|||
name|exitStatus
operator|==
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
operator|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shouldCountTowardsNodeBlacklisting (int exitStatus)
specifier|private
specifier|static
name|boolean
name|shouldCountTowardsNodeBlacklisting
parameter_list|(
name|int
name|exitStatus
parameter_list|)
block|{
switch|switch
condition|(
name|exitStatus
condition|)
block|{
case|case
name|ContainerExitStatus
operator|.
name|PREEMPTED
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_AFTER_APP_COMPLETION
case|:
case|case
name|ContainerExitStatus
operator|.
name|ABORTED
case|:
comment|// Neither the app's fault nor the system's fault. This happens by design,
comment|// so no need for skipping nodes
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
case|:
comment|// This container is marked with this exit-status means that the node is
comment|// already marked as unhealthy given that most of the disks failed. So, no
comment|// need for any explicit skipping of nodes.
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|KILLED_EXCEEDED_VMEM
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_EXCEEDED_PMEM
case|:
comment|// No point in skipping the node as it's not the system's fault
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|SUCCESS
case|:
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|INVALID
case|:
comment|// Ideally, this shouldn't be considered for skipping a node. But in
comment|// reality, it seems like there are cases where we are not setting
comment|// exit-code correctly and so it's better to be conservative. See
comment|// YARN-4284.
return|return
literal|true
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
DECL|class|UnmanagedAMAttemptSavedTransition
specifier|private
specifier|static
specifier|final
class|class
name|UnmanagedAMAttemptSavedTransition
extends|extends
name|AMLaunchedTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// create AMRMToken
name|appAttempt
operator|.
name|amrmToken
operator|=
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|createAndGetAMRMToken
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LaunchFailedTransition
specifier|private
specifier|static
specifier|final
class|class
name|LaunchFailedTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|LaunchFailedTransition ()
specifier|public
name|LaunchFailedTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Use diagnostic from launcher
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tell the app, scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillAllocatedAMTransition
specifier|private
specifier|static
specifier|final
class|class
name|KillAllocatedAMTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|KillAllocatedAMTransition ()
specifier|public
name|KillAllocatedAMTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Tell the application and scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// Tell the launcher to cleanup.
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AMLauncherEvent
argument_list|(
name|AMLauncherEventType
operator|.
name|CLEANUP
argument_list|,
name|appAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMRegisteredTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMRegisteredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|long
name|delay
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|appAttempt
operator|.
name|launchAMEndTime
decl_stmt|;
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|addAMRegisterDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|RMAppAttemptRegistrationEvent
name|registrationEvent
init|=
operator|(
name|RMAppAttemptRegistrationEvent
operator|)
name|event
decl_stmt|;
name|appAttempt
operator|.
name|host
operator|=
name|registrationEvent
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|appAttempt
operator|.
name|rpcPort
operator|=
name|registrationEvent
operator|.
name|getRpcport
argument_list|()
expr_stmt|;
name|appAttempt
operator|.
name|originalTrackingUrl
operator|=
name|sanitizeTrackingUrl
argument_list|(
name|registrationEvent
operator|.
name|getTrackingurl
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset AMLaunchDiagnostics once AM Registers with RM
name|appAttempt
operator|.
name|updateAMLaunchDiagnostics
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Let the app know
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO:FIXME: Note for future. Unfortunately we only do a state-store
comment|// write at AM launch time, so we don't save the AM's tracking URL anywhere
comment|// as that would mean an extra state-store write. For now, we hope that in
comment|// work-preserving restart, AMs are forced to reregister.
name|appAttempt
operator|.
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|applicationAttemptStarted
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|appAttemptRegistered
argument_list|(
name|appAttempt
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMContainerCrashedBeforeRunningTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMContainerCrashedBeforeRunningTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|AMContainerCrashedBeforeRunningTransition ()
specifier|public
name|AMContainerCrashedBeforeRunningTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|finishEvent
init|=
operator|(
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
operator|)
decl_stmt|;
comment|// UnRegister from AMLivelinessMonitor
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup diagnostic message and exit status
name|appAttempt
operator|.
name|setAMContainerCrashedDiagnosticsAndExitStatus
argument_list|(
name|finishEvent
argument_list|)
expr_stmt|;
comment|// Tell the app, scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|finishEvent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setAMContainerCrashedDiagnosticsAndExitStatus ( RMAppAttemptContainerFinishedEvent finishEvent)
specifier|private
name|void
name|setAMContainerCrashedDiagnosticsAndExitStatus
parameter_list|(
name|RMAppAttemptContainerFinishedEvent
name|finishEvent
parameter_list|)
block|{
name|ContainerStatus
name|status
init|=
name|finishEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
name|String
name|diagnostics
init|=
name|getAMContainerCrashedDiagnostics
argument_list|(
name|finishEvent
argument_list|)
decl_stmt|;
name|this
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|this
operator|.
name|amContainerExitStatus
operator|=
name|status
operator|.
name|getExitStatus
argument_list|()
expr_stmt|;
block|}
DECL|method|getAMContainerCrashedDiagnostics ( RMAppAttemptContainerFinishedEvent finishEvent)
specifier|private
name|String
name|getAMContainerCrashedDiagnostics
parameter_list|(
name|RMAppAttemptContainerFinishedEvent
name|finishEvent
parameter_list|)
block|{
name|ContainerStatus
name|status
init|=
name|finishEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
name|StringBuilder
name|diagnosticsBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|diagnosticsBuilder
operator|.
name|append
argument_list|(
literal|"AM Container for "
argument_list|)
operator|.
name|append
argument_list|(
name|finishEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" exited with "
argument_list|)
operator|.
name|append
argument_list|(
literal|" exitCode: "
argument_list|)
operator|.
name|append
argument_list|(
name|status
operator|.
name|getExitStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|diagnosticsBuilder
operator|.
name|append
argument_list|(
literal|"Failing this attempt."
argument_list|)
operator|.
name|append
argument_list|(
literal|"Diagnostics: "
argument_list|)
operator|.
name|append
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getTrackingUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|diagnosticsBuilder
operator|.
name|append
argument_list|(
literal|"For more detailed output,"
argument_list|)
operator|.
name|append
argument_list|(
literal|" check the application tracking page: "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Then click on links to logs of each attempt.\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|diagnosticsBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|FinalTransition
specifier|private
specifier|static
class|class
name|FinalTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|FinalTransition (RMAppAttemptState finalAttemptState)
specifier|public
name|FinalTransition
parameter_list|(
name|RMAppAttemptState
name|finalAttemptState
parameter_list|)
block|{
name|super
argument_list|(
name|finalAttemptState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
comment|// Tell the app and the scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// UnRegister from AMLivelinessMonitor. Perhaps for
comment|// FAILING/KILLED/UnManaged AMs
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMFinishingMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// Tell the launcher to cleanup.
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AMLauncherEvent
argument_list|(
name|AMLauncherEventType
operator|.
name|CLEANUP
argument_list|,
name|appAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ExpiredTransition
specifier|private
specifier|static
class|class
name|ExpiredTransition
extends|extends
name|FinalTransition
block|{
DECL|method|ExpiredTransition ()
specifier|public
name|ExpiredTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|getAMExpiredDiagnostics
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAMExpiredDiagnostics (RMAppAttemptEvent event)
specifier|private
specifier|static
name|String
name|getAMExpiredDiagnostics
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|String
name|diag
init|=
literal|"ApplicationMaster for attempt "
operator|+
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" timed out"
decl_stmt|;
return|return
name|diag
return|;
block|}
DECL|class|UnexpectedAMRegisteredTransition
specifier|private
specifier|static
class|class
name|UnexpectedAMRegisteredTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|UnexpectedAMRegisteredTransition ()
specifier|public
name|UnexpectedAMRegisteredTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
assert|assert
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
assert|;
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|getUnexpectedAMRegisteredDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getUnexpectedAMRegisteredDiagnostics ()
specifier|private
specifier|static
name|String
name|getUnexpectedAMRegisteredDiagnostics
parameter_list|()
block|{
return|return
literal|"Unmanaged AM must register after AM attempt reaches LAUNCHED state."
return|;
block|}
DECL|class|StatusUpdateTransition
specifier|private
specifier|static
specifier|final
class|class
name|StatusUpdateTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptStatusupdateEvent
name|statusUpdateEvent
init|=
operator|(
name|RMAppAttemptStatusupdateEvent
operator|)
name|event
decl_stmt|;
comment|// Update progress
name|appAttempt
operator|.
name|progress
operator|=
name|statusUpdateEvent
operator|.
name|getProgress
argument_list|()
expr_stmt|;
comment|// Ping to AMLivelinessMonitor
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|receivedPing
argument_list|(
name|statusUpdateEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMUnregisteredTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMUnregisteredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Tell the app
if|if
condition|(
name|appAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// YARN-1815: Saving the attempt final state so that we do not recover
comment|// the finished Unmanaged AM post RM failover
comment|// Unmanaged AMs have no container to wait for, so they skip
comment|// the FINISHING state and go straight to FINISHED.
name|appAttempt
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
operator|new
name|AMFinishedAfterFinalSavingTransition
argument_list|(
name|event
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Saving the attempt final state
name|appAttempt
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
operator|new
name|FinalStateSavedAfterAMUnregisterTransition
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
name|ApplicationId
name|applicationId
init|=
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Tell the app immediately that AM is unregistering so that app itself
comment|// can save its state as soon as possible. Whether we do it like this, or
comment|// we wait till AppAttempt is saved, it doesn't make any difference on the
comment|// app side w.r.t failure conditions. The only event going out of
comment|// AppAttempt to App after this point of time is AM/AppAttempt Finished.
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_UNREGISTERED
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|class|FinalStateSavedAfterAMUnregisterTransition
specifier|private
specifier|static
class|class
name|FinalStateSavedAfterAMUnregisterTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
specifier|public
name|void
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Unregister from the AMlivenessMonitor and register with AMFinishingMonitor
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMFinishingMonitor
argument_list|()
operator|.
name|register
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
comment|// Do not make any more changes to this transition code. Make all changes
comment|// to the following method. Unless you are absolutely sure that you have
comment|// stuff to do that shouldn't be used by the callers of the following
comment|// method.
name|appAttempt
operator|.
name|updateInfoOnAMUnregister
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateInfoOnAMUnregister (RMAppAttemptEvent event)
specifier|private
name|void
name|updateInfoOnAMUnregister
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|progress
operator|=
literal|1.0f
expr_stmt|;
name|RMAppAttemptUnregistrationEvent
name|unregisterEvent
init|=
operator|(
name|RMAppAttemptUnregistrationEvent
operator|)
name|event
decl_stmt|;
name|diagnostics
operator|.
name|append
argument_list|(
name|unregisterEvent
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
name|originalTrackingUrl
operator|=
name|sanitizeTrackingUrl
argument_list|(
name|unregisterEvent
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|finalStatus
operator|=
name|unregisterEvent
operator|.
name|getFinalApplicationStatus
argument_list|()
expr_stmt|;
block|}
DECL|class|ContainerFinishedTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerFinishedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
comment|// The transition To Do after attempt final state is saved.
DECL|field|transitionToDo
specifier|private
name|BaseTransition
name|transitionToDo
decl_stmt|;
DECL|field|currentState
specifier|private
name|RMAppAttemptState
name|currentState
decl_stmt|;
DECL|method|ContainerFinishedTransition (BaseTransition transitionToDo, RMAppAttemptState currentState)
specifier|public
name|ContainerFinishedTransition
parameter_list|(
name|BaseTransition
name|transitionToDo
parameter_list|,
name|RMAppAttemptState
name|currentState
parameter_list|)
block|{
name|this
operator|.
name|transitionToDo
operator|=
name|transitionToDo
expr_stmt|;
name|this
operator|.
name|currentState
operator|=
name|currentState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
comment|// Is this container the AmContainer? If the finished container is same as
comment|// the AMContainer, AppAttempt fails
if|if
condition|(
name|appAttempt
operator|.
name|masterContainer
operator|!=
literal|null
operator|&&
name|appAttempt
operator|.
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|appAttempt
operator|.
name|amContainerFinished
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
comment|// Remember the follow up transition and save the final attempt state.
name|appAttempt
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
name|transitionToDo
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
return|;
block|}
comment|// Add all finished containers so that they can be acked to NM
name|addJustFinishedContainer
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|currentState
return|;
block|}
block|}
comment|// Ack NM to remove finished AM container, not waiting for
comment|// new appattempt to pull am container complete msg, new  appattempt
comment|// may launch fail and leaves too many completed container in NM
DECL|method|sendFinishedAMContainerToNM (NodeId nodeId, ContainerId containerId)
specifier|private
name|void
name|sendFinishedAMContainerToNM
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIdList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|containerIdList
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeFinishedContainersPulledByAMEvent
argument_list|(
name|nodeId
argument_list|,
name|containerIdList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Ack NM to remove finished containers from context.
DECL|method|sendFinishedContainersToNM ()
specifier|private
name|void
name|sendFinishedContainersToNM
parameter_list|()
block|{
for|for
control|(
name|NodeId
name|nodeId
range|:
name|finishedContainersSentToAM
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// Clear and get current values
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|currentSentContainers
init|=
name|finishedContainersSentToAM
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIdList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|currentSentContainers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|containerStatus
range|:
name|currentSentContainers
control|)
block|{
name|containerIdList
operator|.
name|add
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeFinishedContainersPulledByAMEvent
argument_list|(
name|nodeId
argument_list|,
name|containerIdList
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|finishedContainersSentToAM
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Add am container to the list so that am container instance will be
comment|// removed from NMContext.
DECL|method|amContainerFinished (RMAppAttemptImpl appAttempt, RMAppAttemptContainerFinishedEvent containerFinishedEvent)
specifier|private
specifier|static
name|void
name|amContainerFinished
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|containerFinishedEvent
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerStatus
operator|!=
literal|null
condition|)
block|{
name|int
name|exitStatus
init|=
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldCountTowardsNodeBlacklisting
argument_list|(
name|exitStatus
argument_list|)
condition|)
block|{
name|appAttempt
operator|.
name|addAMNodeToBlackList
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No ContainerStatus in containerFinishedEvent"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
condition|)
block|{
name|appAttempt
operator|.
name|finishedContainersSentToAM
operator|.
name|putIfAbsent
argument_list|(
name|nodeId
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|finishedContainersSentToAM
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|add
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|sendFinishedContainersToNM
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appAttempt
operator|.
name|sendFinishedAMContainerToNM
argument_list|(
name|nodeId
argument_list|,
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addAMNodeToBlackList (NodeId nodeId)
specifier|private
name|void
name|addAMNodeToBlackList
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|SchedulerNode
name|schedulerNode
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerNode
operator|!=
literal|null
condition|)
block|{
name|blacklistedNodesForAM
operator|.
name|addNode
argument_list|(
name|schedulerNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|nodeId
operator|+
literal|" is not added to AM blacklist for "
operator|+
name|applicationAttemptId
operator|+
literal|", because it has been removed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAMBlacklistManager ()
specifier|public
name|BlacklistManager
name|getAMBlacklistManager
parameter_list|()
block|{
return|return
name|blacklistedNodesForAM
return|;
block|}
DECL|method|addJustFinishedContainer (RMAppAttemptImpl appAttempt, RMAppAttemptContainerFinishedEvent containerFinishedEvent)
specifier|private
specifier|static
name|void
name|addJustFinishedContainer
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
parameter_list|)
block|{
name|appAttempt
operator|.
name|justFinishedContainers
operator|.
name|putIfAbsent
argument_list|(
name|containerFinishedEvent
operator|.
name|getNodeId
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|justFinishedContainers
operator|.
name|get
argument_list|(
name|containerFinishedEvent
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ContainerFinishedAtFinalStateTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerFinishedAtFinalStateTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
specifier|public
name|void
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
comment|// Normal container. Add it in completed containers list
name|addJustFinishedContainer
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMContainerCrashedAtRunningTransition
specifier|private
specifier|static
class|class
name|AMContainerCrashedAtRunningTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
specifier|public
name|void
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|finishEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
comment|// container associated with AM. must not be unmanaged
assert|assert
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
operator|==
literal|false
assert|;
comment|// Setup diagnostic message and exit status
name|appAttempt
operator|.
name|setAMContainerCrashedDiagnosticsAndExitStatus
argument_list|(
name|finishEvent
argument_list|)
expr_stmt|;
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMFinishingContainerFinishedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMFinishingContainerFinishedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
comment|// Is this container the ApplicationMaster container?
if|if
condition|(
name|appAttempt
operator|.
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|amContainerFinished
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINISHED
return|;
block|}
comment|// Add all finished containers so that they can be acked to NM.
name|addJustFinishedContainer
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINISHING
return|;
block|}
block|}
DECL|class|ContainerFinishedAtFinalSavingTransition
specifier|private
specifier|static
class|class
name|ContainerFinishedAtFinalSavingTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
specifier|public
name|void
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
comment|// If this is the AM container, it means the AM container is finished,
comment|// but we are not yet acknowledged that the final state has been saved.
comment|// Thus, we still return FINAL_SAVING state here.
if|if
condition|(
name|appAttempt
operator|.
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|appAttempt
operator|.
name|amContainerFinished
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|targetedFinalState
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
operator|||
name|appAttempt
operator|.
name|targetedFinalState
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
condition|)
block|{
comment|// ignore Container_Finished Event if we were supposed to reach
comment|// FAILED/KILLED state.
return|return;
block|}
comment|// pass in the earlier AMUnregistered Event also, as this is needed for
comment|// AMFinishedAfterFinalSavingTransition later on
name|appAttempt
operator|.
name|rememberTargetTransitions
argument_list|(
name|event
argument_list|,
operator|new
name|AMFinishedAfterFinalSavingTransition
argument_list|(
name|appAttempt
operator|.
name|eventCausingFinalSaving
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Add all finished containers so that they can be acked to NM.
name|addJustFinishedContainer
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMFinishedAfterFinalSavingTransition
specifier|private
specifier|static
class|class
name|AMFinishedAfterFinalSavingTransition
extends|extends
name|BaseTransition
block|{
DECL|field|amUnregisteredEvent
name|RMAppAttemptEvent
name|amUnregisteredEvent
decl_stmt|;
DECL|method|AMFinishedAfterFinalSavingTransition ( RMAppAttemptEvent amUnregisteredEvent)
specifier|public
name|AMFinishedAfterFinalSavingTransition
parameter_list|(
name|RMAppAttemptEvent
name|amUnregisteredEvent
parameter_list|)
block|{
name|this
operator|.
name|amUnregisteredEvent
operator|=
name|amUnregisteredEvent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|updateInfoOnAMUnregister
argument_list|(
name|amUnregisteredEvent
argument_list|)
expr_stmt|;
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMExpiredAtFinalSavingTransition
specifier|private
specifier|static
class|class
name|AMExpiredAtFinalSavingTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
specifier|public
name|void
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|appAttempt
operator|.
name|targetedFinalState
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
operator|||
name|appAttempt
operator|.
name|targetedFinalState
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
condition|)
block|{
comment|// ignore Container_Finished Event if we were supposed to reach
comment|// FAILED/KILLED state.
return|return;
block|}
comment|// pass in the earlier AMUnregistered Event also, as this is needed for
comment|// AMFinishedAfterFinalSavingTransition later on
name|appAttempt
operator|.
name|rememberTargetTransitions
argument_list|(
name|event
argument_list|,
operator|new
name|AMFinishedAfterFinalSavingTransition
argument_list|(
name|appAttempt
operator|.
name|eventCausingFinalSaving
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|RMAppAttemptState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createApplicationAttemptState ()
specifier|public
name|YarnApplicationAttemptState
name|createApplicationAttemptState
parameter_list|()
block|{
name|RMAppAttemptState
name|state
init|=
name|getState
argument_list|()
decl_stmt|;
comment|// If AppAttempt is in FINAL_SAVING state, return its previous state.
if|if
condition|(
name|state
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|)
condition|)
block|{
name|state
operator|=
name|stateBeforeFinalSaving
expr_stmt|;
block|}
return|return
name|RMServerUtils
operator|.
name|createApplicationAttemptState
argument_list|(
name|state
argument_list|)
return|;
block|}
DECL|method|launchAttempt ()
specifier|private
name|void
name|launchAttempt
parameter_list|()
block|{
name|launchAMStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Send event to launch the AM Container
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AMLauncherEvent
argument_list|(
name|AMLauncherEventType
operator|.
name|LAUNCH
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|attemptLaunched ()
specifier|private
name|void
name|attemptLaunched
parameter_list|()
block|{
comment|// Register with AMLivelinessMonitor
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|register
argument_list|(
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|storeAttempt ()
specifier|private
name|void
name|storeAttempt
parameter_list|()
block|{
comment|// store attempt data in a non-blocking manner to prevent dispatcher
comment|// thread starvation and wait for state to be saved
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing attempt: AppId: "
operator|+
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" AttemptId: "
operator|+
name|getAppAttemptId
argument_list|()
operator|+
literal|" MasterContainer: "
operator|+
name|masterContainer
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeNewApplicationAttempt
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|removeCredentials (RMAppAttemptImpl appAttempt)
specifier|private
name|void
name|removeCredentials
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|)
block|{
comment|// Unregister from the ClientToAMTokenSecretManager
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|appAttempt
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|unRegisterApplication
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove the AppAttempt from the AMRMTokenSecretManager
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|applicationMasterFinished
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sanitizeTrackingUrl (String url)
specifier|private
specifier|static
name|String
name|sanitizeTrackingUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|"N/A"
else|:
name|url
return|;
block|}
annotation|@
name|Override
DECL|method|createApplicationAttemptReport ()
specifier|public
name|ApplicationAttemptReport
name|createApplicationAttemptReport
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ApplicationAttemptReport
name|attemptReport
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// AM container maybe not yet allocated. and also unmangedAM doesn't have
comment|// am container.
name|ContainerId
name|amId
init|=
name|masterContainer
operator|==
literal|null
condition|?
literal|null
else|:
name|masterContainer
operator|.
name|getId
argument_list|()
decl_stmt|;
name|attemptReport
operator|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|this
operator|.
name|getHost
argument_list|()
argument_list|,
name|this
operator|.
name|getRpcPort
argument_list|()
argument_list|,
name|this
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|this
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|,
name|this
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|createApplicationAttemptState
argument_list|()
argument_list|,
name|amId
argument_list|,
name|this
operator|.
name|startTime
argument_list|,
name|this
operator|.
name|finishTime
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|attemptReport
return|;
block|}
comment|// for testing
DECL|method|mayBeLastAttempt ()
specifier|public
name|boolean
name|mayBeLastAttempt
parameter_list|()
block|{
return|return
name|maybeLastAttempt
return|;
block|}
annotation|@
name|Override
DECL|method|getRMAppAttemptMetrics ()
specifier|public
name|RMAppAttemptMetrics
name|getRMAppAttemptMetrics
parameter_list|()
block|{
comment|// didn't use read/write lock here because RMAppAttemptMetrics has its own
comment|// lock
return|return
name|attemptMetrics
return|;
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|finishTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setFinishTime (long finishTime)
specifier|private
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateAMLaunchDiagnostics (String amLaunchDiagnostics)
specifier|public
name|void
name|updateAMLaunchDiagnostics
parameter_list|(
name|String
name|amLaunchDiagnostics
parameter_list|)
block|{
name|this
operator|.
name|amLaunchDiagnostics
operator|=
name|amLaunchDiagnostics
expr_stmt|;
block|}
DECL|method|getRecoveredFinalState ()
specifier|public
name|RMAppAttemptState
name|getRecoveredFinalState
parameter_list|()
block|{
return|return
name|recoveredFinalState
return|;
block|}
DECL|method|setRecoveredFinalState (RMAppAttemptState finalState)
specifier|public
name|void
name|setRecoveredFinalState
parameter_list|(
name|RMAppAttemptState
name|finalState
parameter_list|)
block|{
name|this
operator|.
name|recoveredFinalState
operator|=
name|finalState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlacklistedNodes ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlacklistedNodes
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|instanceof
name|AbstractYarnScheduler
condition|)
block|{
name|AbstractYarnScheduler
name|ayScheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|scheduler
decl_stmt|;
name|SchedulerApplicationAttempt
name|attempt
init|=
name|ayScheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getBlacklistedNodes
argument_list|()
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
block|}
end_class

end_unit

