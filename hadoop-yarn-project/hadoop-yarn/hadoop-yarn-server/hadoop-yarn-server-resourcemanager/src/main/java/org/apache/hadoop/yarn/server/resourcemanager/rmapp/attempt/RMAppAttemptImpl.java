begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|pjoin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientToAMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Recoverable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppFailedAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppFinishedAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRejectedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerAcquiredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptLaunchFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRejectedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptStatusupdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptStoredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUnregistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyUriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|RMAppAttemptImpl
specifier|public
class|class
name|RMAppAttemptImpl
implements|implements
name|RMAppAttempt
implements|,
name|Recoverable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppAttemptImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|AM_CONTAINER_PRIORITY
specifier|public
specifier|final
specifier|static
name|Priority
name|AM_CONTAINER_PRIORITY
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|AM_CONTAINER_PRIORITY
operator|.
name|setPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|RMAppAttemptState
argument_list|,
name|RMAppAttemptEventType
argument_list|,
DECL|field|stateMachine
name|RMAppAttemptEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|eventHandler
specifier|private
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|masterService
specifier|private
specifier|final
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|submissionContext
specifier|private
specifier|final
name|ApplicationSubmissionContext
name|submissionContext
decl_stmt|;
DECL|field|amrmToken
specifier|private
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
literal|null
decl_stmt|;
DECL|field|clientTokenMasterKey
specifier|private
name|SecretKey
name|clientTokenMasterKey
init|=
literal|null
decl_stmt|;
comment|//nodes on while this attempt's containers ran
DECL|field|ranNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|NodeId
argument_list|>
name|ranNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|justFinishedContainers
specifier|private
specifier|final
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|justFinishedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|masterContainer
specifier|private
name|Container
name|masterContainer
decl_stmt|;
DECL|field|progress
specifier|private
name|float
name|progress
init|=
literal|0
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|"N/A"
decl_stmt|;
DECL|field|rpcPort
specifier|private
name|int
name|rpcPort
decl_stmt|;
DECL|field|origTrackingUrl
specifier|private
name|String
name|origTrackingUrl
init|=
literal|"N/A"
decl_stmt|;
DECL|field|proxiedTrackingUrl
specifier|private
name|String
name|proxiedTrackingUrl
init|=
literal|"N/A"
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
init|=
literal|0
decl_stmt|;
comment|// Set to null initially. Will eventually get set
comment|// if an RMAppAttemptUnregistrationEvent occurs
DECL|field|finalStatus
specifier|private
name|FinalApplicationStatus
name|finalStatus
init|=
literal|null
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|StringBuilder
name|diagnostics
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|EXPIRED_TRANSITION
specifier|private
specifier|static
specifier|final
name|ExpiredTransition
name|EXPIRED_TRANSITION
init|=
operator|new
name|ExpiredTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptState
argument_list|,
name|RMAppAttemptEventType
argument_list|,
name|RMAppAttemptEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptState
argument_list|,
name|RMAppAttemptEventType
argument_list|,
name|RMAppAttemptEvent
argument_list|>
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|START
argument_list|,
operator|new
name|AttemptStartedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|UnexpectedAMRegisteredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|RMAppAttemptState
operator|.
name|RECOVERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|RECOVER
argument_list|)
comment|// Transitions from SUBMITTED state
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_ACCEPTED
argument_list|,
operator|new
name|ScheduleTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|UnexpectedAMRegisteredTransition
argument_list|()
argument_list|)
comment|// Transitions from SCHEDULED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
operator|new
name|AMContainerAllocatedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
comment|// Transitions from ALLOCATED_SAVING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_SAVED
argument_list|,
operator|new
name|AttemptStoredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ACQUIRED
argument_list|,
operator|new
name|ContainerAcquiredTransition
argument_list|()
argument_list|)
comment|// App could be killed by the client. So need to handle this.
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
comment|// Transitions from LAUNCHED_UNMANAGED_SAVING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_SAVED
argument_list|,
operator|new
name|UnmanagedAMAttemptSavedTransition
argument_list|()
argument_list|)
comment|// attempt should not try to register in this state
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|UnexpectedAMRegisteredTransition
argument_list|()
argument_list|)
comment|// App could be killed by the client. So need to handle this.
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|BaseFinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
comment|// Transitions from ALLOCATED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ACQUIRED
argument_list|,
operator|new
name|ContainerAcquiredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|,
operator|new
name|AMLaunchedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
operator|new
name|LaunchFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAllocatedAMTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|AMContainerCrashedTransition
argument_list|()
argument_list|)
comment|// Transitions from LAUNCHED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
operator|new
name|AMRegisteredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|AMContainerCrashedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|EXPIRED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
comment|// Transitions from RUNNING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
operator|new
name|AMUnregisteredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ACQUIRED
argument_list|,
operator|new
name|ContainerAcquiredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|ContainerFinishedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|EXPIRED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
argument_list|)
comment|// Transitions from FAILED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|)
argument_list|)
comment|// Transitions from FINISHING State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
operator|new
name|AMFinishingContainerFinishedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from FINISHED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from KILLED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|APP_ACCEPTED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_REJECTED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_SAVED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|)
argument_list|)
comment|// Transitions from RECOVERED State
operator|.
name|addTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|RECOVERED
argument_list|,
name|RMAppAttemptState
operator|.
name|RECOVERED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppAttemptEventType
operator|.
name|START
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_ACCEPTED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_REJECTED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ACQUIRED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_SAVED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_FINISHED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|RMAppAttemptEventType
operator|.
name|STATUS_UPDATE
argument_list|)
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|method|RMAppAttemptImpl (ApplicationAttemptId appAttemptId, RMContext rmContext, YarnScheduler scheduler, ApplicationMasterService masterService, ApplicationSubmissionContext submissionContext, Configuration conf, String user)
specifier|public
name|RMAppAttemptImpl
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|applicationAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|submissionContext
operator|=
name|submissionContext
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|masterService
operator|=
name|masterService
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxiedTrackingUrl
operator|=
name|generateProxyUriWithoutScheme
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAppAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationAttemptId
return|;
block|}
annotation|@
name|Override
DECL|method|getSubmissionContext ()
specifier|public
name|ApplicationSubmissionContext
name|getSubmissionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|submissionContext
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalApplicationStatus ()
specifier|public
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|finalStatus
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAppAttemptState ()
specifier|public
name|RMAppAttemptState
name|getAppAttemptState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|host
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRpcPort ()
specifier|public
name|int
name|getRpcPort
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|rpcPort
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTrackingUrl ()
specifier|public
name|String
name|getTrackingUrl
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|getSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
operator|)
condition|?
name|this
operator|.
name|origTrackingUrl
else|:
name|this
operator|.
name|proxiedTrackingUrl
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOriginalTrackingUrl ()
specifier|public
name|String
name|getOriginalTrackingUrl
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|origTrackingUrl
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWebProxyBase ()
specifier|public
name|String
name|getWebProxyBase
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|generateProxyUriWithoutScheme ()
specifier|private
name|String
name|generateProxyUriWithoutScheme
parameter_list|()
block|{
return|return
name|generateProxyUriWithoutScheme
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|generateProxyUriWithoutScheme ( final String trackingUriWithoutScheme)
specifier|private
name|String
name|generateProxyUriWithoutScheme
parameter_list|(
specifier|final
name|String
name|trackingUriWithoutScheme
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|URI
name|trackingUri
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|trackingUriWithoutScheme
argument_list|)
condition|?
literal|null
else|:
name|ProxyUriUtils
operator|.
name|getUriFromAMUrl
argument_list|(
name|trackingUriWithoutScheme
argument_list|)
decl_stmt|;
name|String
name|proxy
init|=
name|YarnConfiguration
operator|.
name|getProxyHostAndPort
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URI
name|proxyUri
init|=
name|ProxyUriUtils
operator|.
name|getUriFromAMUrl
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|URI
name|result
init|=
name|ProxyUriUtils
operator|.
name|getProxyUri
argument_list|(
name|trackingUri
argument_list|,
name|proxyUri
argument_list|,
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|//We need to strip off the scheme to have it match what was there before
return|return
name|result
operator|.
name|toASCIIString
argument_list|()
operator|.
name|substring
argument_list|(
name|HttpConfig
operator|.
name|getSchemePrefix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not proxify "
operator|+
name|trackingUriWithoutScheme
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|trackingUriWithoutScheme
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setTrackingUrlToRMAppPage ()
specifier|private
name|void
name|setTrackingUrlToRMAppPage
parameter_list|()
block|{
name|origTrackingUrl
operator|=
name|pjoin
argument_list|(
name|YarnConfiguration
operator|.
name|getRMWebAppHostAndPort
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|proxiedTrackingUrl
operator|=
name|origTrackingUrl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getClientTokenMasterKey ()
specifier|public
name|SecretKey
name|getClientTokenMasterKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|clientTokenMasterKey
return|;
block|}
annotation|@
name|Override
DECL|method|getAMRMToken ()
specifier|public
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|getAMRMToken
parameter_list|()
block|{
return|return
name|this
operator|.
name|amrmToken
return|;
block|}
annotation|@
name|Override
DECL|method|createClientToken (String client)
specifier|public
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|createClientToken
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
name|ClientToAMTokenSecretManagerInRM
name|secretMgr
init|=
name|this
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
operator|&&
name|secretMgr
operator|.
name|getMasterKey
argument_list|(
name|this
operator|.
name|applicationAttemptId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
operator|new
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
argument_list|(
operator|new
name|ClientToAMTokenIdentifier
argument_list|(
name|this
operator|.
name|applicationAttemptId
argument_list|,
name|client
argument_list|)
argument_list|,
name|secretMgr
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|diagnostics
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setDiagnostics (String message)
specifier|public
name|void
name|setDiagnostics
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|progress
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getJustFinishedContainers ()
specifier|public
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getJustFinishedContainers
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|justFinishedContainers
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|pullJustFinishedContainers ()
specifier|public
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|pullJustFinishedContainers
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|(
name|this
operator|.
name|justFinishedContainers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|returnList
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|justFinishedContainers
argument_list|)
expr_stmt|;
name|this
operator|.
name|justFinishedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|returnList
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRanNodes ()
specifier|public
name|Set
argument_list|<
name|NodeId
argument_list|>
name|getRanNodes
parameter_list|()
block|{
return|return
name|ranNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getMasterContainer ()
specifier|public
name|Container
name|getMasterContainer
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|masterContainer
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setMasterContainer (Container container)
specifier|private
name|void
name|setMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|masterContainer
operator|=
name|container
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationAttemptId
name|appAttemptID
init|=
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing event for "
operator|+
name|appAttemptID
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RMAppAttemptState
name|oldState
init|=
name|getAppAttemptState
argument_list|()
decl_stmt|;
try|try
block|{
comment|/* keep the master in sync with the state machine */
name|this
operator|.
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|/* TODO fail the application on the failed transition */
block|}
if|if
condition|(
name|oldState
operator|!=
name|getAppAttemptState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|appAttemptID
operator|+
literal|" State change from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationResourceUsageReport ()
specifier|public
name|ApplicationResourceUsageReport
name|getApplicationResourceUsageReport
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|numUsedContainers
init|=
literal|0
decl_stmt|;
name|int
name|numReservedContainers
init|=
literal|0
decl_stmt|;
name|Resource
name|currentConsumption
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|reservedResources
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerAppReport
name|schedApp
init|=
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|this
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
decl_stmt|;
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
decl_stmt|;
if|if
condition|(
name|schedApp
operator|!=
literal|null
condition|)
block|{
name|liveContainers
operator|=
name|schedApp
operator|.
name|getLiveContainers
argument_list|()
expr_stmt|;
name|reservedContainers
operator|=
name|schedApp
operator|.
name|getReservedContainers
argument_list|()
expr_stmt|;
if|if
condition|(
name|liveContainers
operator|!=
literal|null
condition|)
block|{
name|numUsedContainers
operator|=
name|liveContainers
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|RMContainer
name|lc
range|:
name|liveContainers
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|currentConsumption
argument_list|,
name|lc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reservedContainers
operator|!=
literal|null
condition|)
block|{
name|numReservedContainers
operator|=
name|reservedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|RMContainer
name|rc
range|:
name|reservedContainers
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|reservedResources
argument_list|,
name|rc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|BuilderUtils
operator|.
name|newApplicationResourceUsageReport
argument_list|(
name|numUsedContainers
argument_list|,
name|numReservedContainers
argument_list|,
name|currentConsumption
argument_list|,
name|reservedResources
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|currentConsumption
argument_list|,
name|reservedResources
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationState
name|appState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptState
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|attemptState
operator|!=
literal|null
assert|;
name|setMasterContainer
argument_list|(
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|recoverAppAttemptCredentials
argument_list|(
name|attemptState
operator|.
name|getAppAttemptCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered attempt: AppId: "
operator|+
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" AttemptId: "
operator|+
name|getAppAttemptId
argument_list|()
operator|+
literal|" MasterContainer: "
operator|+
name|masterContainer
argument_list|)
expr_stmt|;
name|setDiagnostics
argument_list|(
literal|"Attempt recovered after RM restart"
argument_list|)
expr_stmt|;
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|RECOVER
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|recoverAppAttemptCredentials (Credentials appAttemptTokens)
specifier|private
name|void
name|recoverAppAttemptCredentials
parameter_list|(
name|Credentials
name|appAttemptTokens
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|appAttemptTokens
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|byte
index|[]
name|clientTokenMasterKeyBytes
init|=
name|appAttemptTokens
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
decl_stmt|;
name|clientTokenMasterKey
operator|=
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|registerMasterKey
argument_list|(
name|applicationAttemptId
argument_list|,
name|clientTokenMasterKeyBytes
argument_list|)
expr_stmt|;
block|}
comment|// Only one AMRMToken is stored per-attempt, so this should be fine. Can't
comment|// use TokenSelector as service may change - think fail-over.
name|this
operator|.
name|amrmToken
operator|=
operator|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
operator|)
name|appAttemptTokens
operator|.
name|getToken
argument_list|(
name|RMStateStore
operator|.
name|AM_RM_TOKEN_SERVICE
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|addPersistedPassword
argument_list|(
name|this
operator|.
name|amrmToken
argument_list|)
expr_stmt|;
block|}
DECL|class|BaseTransition
specifier|private
specifier|static
class|class
name|BaseTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|class|AttemptStartedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AttemptStartedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Register with the ApplicationMasterService
name|appAttempt
operator|.
name|masterService
operator|.
name|registerAppAttempt
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|appAttempt
operator|.
name|clientTokenMasterKey
operator|=
name|appAttempt
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|registerApplication
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|// create AMRMToken
name|AMRMTokenIdentifier
name|id
init|=
operator|new
name|AMRMTokenIdentifier
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
decl_stmt|;
name|appAttempt
operator|.
name|amrmToken
operator|=
operator|new
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
name|id
argument_list|,
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the application to the scheduler
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getQueue
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AppRejectedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AppRejectedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptRejectedEvent
name|rejectedEvent
init|=
operator|(
name|RMAppAttemptRejectedEvent
operator|)
name|event
decl_stmt|;
comment|// Tell the AMS. Unregister from the ApplicationMasterService
name|appAttempt
operator|.
name|masterService
operator|.
name|unregisterAttempt
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|)
expr_stmt|;
comment|// Save the diagnostic message
name|String
name|message
init|=
name|rejectedEvent
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|appAttempt
operator|.
name|setDiagnostics
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Send the rejection event to app
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRejectedEvent
argument_list|(
name|rejectedEvent
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|removeCredentials
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_CONTAINER_RELEASE_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ContainerId
argument_list|>
name|EMPTY_CONTAINER_RELEASE_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_CONTAINER_REQUEST_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|EMPTY_CONTAINER_REQUEST_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|ScheduleTransition
specifier|private
specifier|static
specifier|final
class|class
name|ScheduleTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// Send the acceptance to the app
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Request a container for the AM.
name|ResourceRequest
name|request
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|AM_CONTAINER_PRIORITY
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|appAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// SchedulerUtils.validateResourceRequests is not necessary because
comment|// AM resource has been checked when submission
name|Allocation
name|amContainerAllocation
init|=
name|appAttempt
operator|.
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|request
argument_list|)
argument_list|,
name|EMPTY_CONTAINER_RELEASE_LIST
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|amContainerAllocation
operator|!=
literal|null
operator|&&
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|(
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
return|return
name|RMAppAttemptState
operator|.
name|SCHEDULED
return|;
block|}
else|else
block|{
comment|// RM not allocating container. AM is self launched.
name|RMStateStore
name|store
init|=
name|appAttempt
operator|.
name|rmContext
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
comment|// save state and then go to LAUNCHED state
name|appAttempt
operator|.
name|storeAttempt
argument_list|(
name|store
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
return|;
block|}
block|}
block|}
DECL|class|AMContainerAllocatedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMContainerAllocatedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Acquire the AM container from the scheduler.
name|Allocation
name|amContainerAllocation
init|=
name|appAttempt
operator|.
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttempt
operator|.
name|applicationAttemptId
argument_list|,
name|EMPTY_CONTAINER_REQUEST_LIST
argument_list|,
name|EMPTY_CONTAINER_RELEASE_LIST
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// There must be at least one container allocated, because a
comment|// CONTAINER_ALLOCATED is emitted after an RMContainer is constructed,
comment|// and is put in SchedulerApplication#newlyAllocatedContainers. Then,
comment|// YarnScheduler#allocate will fetch it.
assert|assert
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
assert|;
comment|// Set the masterContainer
name|appAttempt
operator|.
name|setMasterContainer
argument_list|(
name|amContainerAllocation
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|setResource
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|RMStateStore
name|store
init|=
name|appAttempt
operator|.
name|rmContext
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|appAttempt
operator|.
name|storeAttempt
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AttemptStoredTransition
specifier|private
specifier|static
specifier|final
class|class
name|AttemptStoredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|checkAttemptStoreError
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|launchAttempt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BaseFinalTransition
specifier|private
specifier|static
class|class
name|BaseFinalTransition
extends|extends
name|BaseTransition
block|{
DECL|field|finalAttemptState
specifier|private
specifier|final
name|RMAppAttemptState
name|finalAttemptState
decl_stmt|;
DECL|method|BaseFinalTransition (RMAppAttemptState finalAttemptState)
specifier|public
name|BaseFinalTransition
parameter_list|(
name|RMAppAttemptState
name|finalAttemptState
parameter_list|)
block|{
name|this
operator|.
name|finalAttemptState
operator|=
name|finalAttemptState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
comment|// Tell the AMS. Unregister from the ApplicationMasterService
name|appAttempt
operator|.
name|masterService
operator|.
name|unregisterAttempt
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
comment|// Tell the application and the scheduler
name|ApplicationId
name|applicationId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMAppEvent
name|appEvent
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|finalAttemptState
condition|)
block|{
case|case
name|FINISHED
case|:
block|{
name|appEvent
operator|=
operator|new
name|RMAppFinishedAttemptEvent
argument_list|(
name|applicationId
argument_list|,
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|KILLED
case|:
block|{
comment|// don't leave the tracking URL pointing to a non-existent AM
name|appAttempt
operator|.
name|setTrackingUrlToRMAppPage
argument_list|()
expr_stmt|;
name|appEvent
operator|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|,
literal|"Application killed by user."
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FAILED
case|:
block|{
comment|// don't leave the tracking URL pointing to a non-existent AM
name|appAttempt
operator|.
name|setTrackingUrlToRMAppPage
argument_list|()
expr_stmt|;
name|appEvent
operator|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get this state!! Error!!"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|appEvent
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AppRemovedSchedulerEvent
argument_list|(
name|appAttemptId
argument_list|,
name|finalAttemptState
argument_list|)
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|removeCredentials
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMLaunchedTransition
specifier|private
specifier|static
class|class
name|AMLaunchedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Register with AMLivelinessMonitor
name|appAttempt
operator|.
name|attemptLaunched
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|UnmanagedAMAttemptSavedTransition
specifier|private
specifier|static
specifier|final
class|class
name|UnmanagedAMAttemptSavedTransition
extends|extends
name|AMLaunchedTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|checkAttemptStoreError
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// Send the acceptance to the app
comment|// Ideally this should have been done when the scheduler accepted the app.
comment|// But its here because until the attempt is saved the client should not
comment|// launch the unmanaged AM. Client waits for the app status to be accepted
comment|// before doing so. So we have to delay the accepted state until we have
comment|// completed storing the attempt
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LaunchFailedTransition
specifier|private
specifier|static
specifier|final
class|class
name|LaunchFailedTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|LaunchFailedTransition ()
specifier|public
name|LaunchFailedTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Use diagnostic from launcher
name|RMAppAttemptLaunchFailedEvent
name|launchFaileEvent
init|=
operator|(
name|RMAppAttemptLaunchFailedEvent
operator|)
name|event
decl_stmt|;
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|launchFaileEvent
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tell the app, scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillAllocatedAMTransition
specifier|private
specifier|static
specifier|final
class|class
name|KillAllocatedAMTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|KillAllocatedAMTransition ()
specifier|public
name|KillAllocatedAMTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
comment|// Tell the application and scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// Tell the launcher to cleanup.
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AMLauncherEvent
argument_list|(
name|AMLauncherEventType
operator|.
name|CLEANUP
argument_list|,
name|appAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMRegisteredTransition
specifier|static
specifier|final
class|class
name|AMRegisteredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptRegistrationEvent
name|registrationEvent
init|=
operator|(
name|RMAppAttemptRegistrationEvent
operator|)
name|event
decl_stmt|;
name|appAttempt
operator|.
name|host
operator|=
name|registrationEvent
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|appAttempt
operator|.
name|rpcPort
operator|=
name|registrationEvent
operator|.
name|getRpcport
argument_list|()
expr_stmt|;
name|appAttempt
operator|.
name|origTrackingUrl
operator|=
name|registrationEvent
operator|.
name|getTrackingurl
argument_list|()
expr_stmt|;
name|appAttempt
operator|.
name|proxiedTrackingUrl
operator|=
name|appAttempt
operator|.
name|generateProxyUriWithoutScheme
argument_list|(
name|appAttempt
operator|.
name|origTrackingUrl
argument_list|)
expr_stmt|;
comment|// Let the app know
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMContainerCrashedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMContainerCrashedTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|AMContainerCrashedTransition ()
specifier|public
name|AMContainerCrashedTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|finishEvent
init|=
operator|(
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
operator|)
decl_stmt|;
comment|// UnRegister from AMLivelinessMonitor
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup diagnostic message
name|ContainerStatus
name|status
init|=
name|finishEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|"AM Container for "
operator|+
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|+
literal|" exited with "
operator|+
literal|" exitCode: "
operator|+
name|status
operator|.
name|getExitStatus
argument_list|()
operator|+
literal|" due to: "
operator|+
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|+
literal|"."
operator|+
literal|"Failing this attempt."
argument_list|)
expr_stmt|;
comment|// Tell the app, scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|finishEvent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FinalTransition
specifier|private
specifier|static
class|class
name|FinalTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|FinalTransition (RMAppAttemptState finalAttemptState)
specifier|public
name|FinalTransition
parameter_list|(
name|RMAppAttemptState
name|finalAttemptState
parameter_list|)
block|{
name|super
argument_list|(
name|finalAttemptState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
comment|// Tell the app and the scheduler
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// UnRegister from AMLivelinessMonitor
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMFinishingMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// Tell the launcher to cleanup.
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AMLauncherEvent
argument_list|(
name|AMLauncherEventType
operator|.
name|CLEANUP
argument_list|,
name|appAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ExpiredTransition
specifier|private
specifier|static
class|class
name|ExpiredTransition
extends|extends
name|FinalTransition
block|{
DECL|method|ExpiredTransition ()
specifier|public
name|ExpiredTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|"ApplicationMaster for attempt "
operator|+
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|+
literal|" timed out"
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UnexpectedAMRegisteredTransition
specifier|private
specifier|static
class|class
name|UnexpectedAMRegisteredTransition
extends|extends
name|BaseFinalTransition
block|{
DECL|method|UnexpectedAMRegisteredTransition ()
specifier|public
name|UnexpectedAMRegisteredTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
assert|assert
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
assert|;
name|appAttempt
operator|.
name|setDiagnostics
argument_list|(
literal|"Unmanaged AM must register after AM attempt reaches LAUNCHED state."
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StatusUpdateTransition
specifier|private
specifier|static
specifier|final
class|class
name|StatusUpdateTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptStatusupdateEvent
name|statusUpdateEvent
init|=
operator|(
name|RMAppAttemptStatusupdateEvent
operator|)
name|event
decl_stmt|;
comment|// Update progress
name|appAttempt
operator|.
name|progress
operator|=
name|statusUpdateEvent
operator|.
name|getProgress
argument_list|()
expr_stmt|;
comment|// Ping to AMLivelinessMonitor
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|receivedPing
argument_list|(
name|statusUpdateEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AMUnregisteredTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMUnregisteredTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|unregister
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
name|RMAppAttemptUnregistrationEvent
name|unregisterEvent
init|=
operator|(
name|RMAppAttemptUnregistrationEvent
operator|)
name|event
decl_stmt|;
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|unregisterEvent
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|origTrackingUrl
operator|=
name|unregisterEvent
operator|.
name|getTrackingUrl
argument_list|()
expr_stmt|;
name|appAttempt
operator|.
name|proxiedTrackingUrl
operator|=
name|appAttempt
operator|.
name|generateProxyUriWithoutScheme
argument_list|(
name|appAttempt
operator|.
name|origTrackingUrl
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|finalStatus
operator|=
name|unregisterEvent
operator|.
name|getFinalApplicationStatus
argument_list|()
expr_stmt|;
comment|// Tell the app
if|if
condition|(
name|appAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// Unmanaged AMs have no container to wait for, so they skip
comment|// the FINISHING state and go straight to FINISHED.
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINISHED
return|;
block|}
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMFinishingMonitor
argument_list|()
operator|.
name|register
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|appAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINISHING
return|;
block|}
block|}
DECL|class|ContainerAcquiredTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerAcquiredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerAcquiredEvent
name|acquiredEvent
init|=
operator|(
name|RMAppAttemptContainerAcquiredEvent
operator|)
name|event
decl_stmt|;
name|appAttempt
operator|.
name|ranNodes
operator|.
name|add
argument_list|(
name|acquiredEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ContainerFinishedTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerFinishedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
comment|// Is this container the AmContainer? If the finished container is same as
comment|// the AMContainer, AppAttempt fails
if|if
condition|(
name|appAttempt
operator|.
name|masterContainer
operator|!=
literal|null
operator|&&
name|appAttempt
operator|.
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
comment|// container associated with AM. must not be unmanaged
assert|assert
name|appAttempt
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
operator|==
literal|false
assert|;
comment|// Setup diagnostic message
name|appAttempt
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|"AM Container for "
operator|+
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|+
literal|" exited with "
operator|+
literal|" exitCode: "
operator|+
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
operator|+
literal|" due to: "
operator|+
name|containerStatus
operator|.
name|getDiagnostics
argument_list|()
operator|+
literal|"."
operator|+
literal|"Failing this attempt."
argument_list|)
expr_stmt|;
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FAILED
return|;
block|}
comment|// Normal container.
comment|// Put it in completedcontainers list
name|appAttempt
operator|.
name|justFinishedContainers
operator|.
name|add
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|RUNNING
return|;
block|}
block|}
DECL|class|AMFinishingContainerFinishedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AMFinishingContainerFinishedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppAttemptImpl
argument_list|,
name|RMAppAttemptEvent
argument_list|,
name|RMAppAttemptState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppAttemptImpl appAttempt, RMAppAttemptEvent event)
specifier|public
name|RMAppAttemptState
name|transition
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|,
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptContainerFinishedEvent
name|containerFinishedEvent
init|=
operator|(
name|RMAppAttemptContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerFinishedEvent
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
comment|// Is this container the ApplicationMaster container?
if|if
condition|(
name|appAttempt
operator|.
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
operator|new
name|FinalTransition
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
operator|.
name|transition
argument_list|(
name|appAttempt
argument_list|,
name|containerFinishedEvent
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINISHED
return|;
block|}
comment|// Normal container.
name|appAttempt
operator|.
name|justFinishedContainers
operator|.
name|add
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
return|return
name|RMAppAttemptState
operator|.
name|FINISHING
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|launchAttempt ()
specifier|private
name|void
name|launchAttempt
parameter_list|()
block|{
comment|// Send event to launch the AM Container
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|AMLauncherEvent
argument_list|(
name|AMLauncherEventType
operator|.
name|LAUNCH
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|attemptLaunched ()
specifier|private
name|void
name|attemptLaunched
parameter_list|()
block|{
comment|// Register with AMLivelinessMonitor
name|rmContext
operator|.
name|getAMLivelinessMonitor
argument_list|()
operator|.
name|register
argument_list|(
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAttemptStoreError (RMAppAttemptEvent event)
specifier|private
name|void
name|checkAttemptStoreError
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|RMAppAttemptStoredEvent
name|storeEvent
init|=
operator|(
name|RMAppAttemptStoredEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|storeEvent
operator|.
name|getStoredException
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// This needs to be handled for HA and give up master status if we got
comment|// fenced
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to store attempt: "
operator|+
name|getAppAttemptId
argument_list|()
argument_list|,
name|storeEvent
operator|.
name|getStoredException
argument_list|()
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|storeEvent
operator|.
name|getStoredException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|storeAttempt (RMStateStore store)
specifier|private
name|void
name|storeAttempt
parameter_list|(
name|RMStateStore
name|store
parameter_list|)
block|{
comment|// store attempt data in a non-blocking manner to prevent dispatcher
comment|// thread starvation and wait for state to be saved
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing attempt: AppId: "
operator|+
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" AttemptId: "
operator|+
name|getAppAttemptId
argument_list|()
operator|+
literal|" MasterContainer: "
operator|+
name|masterContainer
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeApplicationAttempt
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|removeCredentials (RMAppAttemptImpl appAttempt)
specifier|private
name|void
name|removeCredentials
parameter_list|(
name|RMAppAttemptImpl
name|appAttempt
parameter_list|)
block|{
comment|// Unregister from the ClientToAMTokenSecretManager
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|appAttempt
operator|.
name|rmContext
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|unRegisterApplication
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove the AppAttempt from the AMRMTokenSecretManager
name|appAttempt
operator|.
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|applicationMasterFinished
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

