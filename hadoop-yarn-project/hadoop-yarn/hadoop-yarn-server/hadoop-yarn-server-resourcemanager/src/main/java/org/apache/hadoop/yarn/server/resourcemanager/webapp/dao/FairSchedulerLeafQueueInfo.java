begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AppSchedulable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_class
DECL|class|FairSchedulerLeafQueueInfo
specifier|public
class|class
name|FairSchedulerLeafQueueInfo
extends|extends
name|FairSchedulerQueueInfo
block|{
DECL|field|numPendingApps
specifier|private
name|int
name|numPendingApps
decl_stmt|;
DECL|field|numActiveApps
specifier|private
name|int
name|numActiveApps
decl_stmt|;
DECL|method|FairSchedulerLeafQueueInfo (FSLeafQueue queue, FairScheduler scheduler)
specifier|public
name|FairSchedulerLeafQueueInfo
parameter_list|(
name|FSLeafQueue
name|queue
parameter_list|,
name|FairScheduler
name|scheduler
parameter_list|)
block|{
name|super
argument_list|(
name|queue
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AppSchedulable
argument_list|>
name|apps
init|=
name|queue
operator|.
name|getAppSchedulables
argument_list|()
decl_stmt|;
for|for
control|(
name|AppSchedulable
name|app
range|:
name|apps
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getApp
argument_list|()
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|numPendingApps
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numActiveApps
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNumActiveApplications ()
specifier|public
name|int
name|getNumActiveApplications
parameter_list|()
block|{
return|return
name|numPendingApps
return|;
block|}
DECL|method|getNumPendingApplications ()
specifier|public
name|int
name|getNumPendingApplications
parameter_list|()
block|{
return|return
name|numActiveApps
return|;
block|}
block|}
end_class

end_unit

