begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AppSchedulable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|FairSchedulerLeafQueueInfo
specifier|public
class|class
name|FairSchedulerLeafQueueInfo
extends|extends
name|FairSchedulerQueueInfo
block|{
DECL|field|numPendingApps
specifier|private
name|int
name|numPendingApps
decl_stmt|;
DECL|field|numActiveApps
specifier|private
name|int
name|numActiveApps
decl_stmt|;
DECL|method|FairSchedulerLeafQueueInfo ()
specifier|public
name|FairSchedulerLeafQueueInfo
parameter_list|()
block|{   }
DECL|method|FairSchedulerLeafQueueInfo (FSLeafQueue queue, FairScheduler scheduler)
specifier|public
name|FairSchedulerLeafQueueInfo
parameter_list|(
name|FSLeafQueue
name|queue
parameter_list|,
name|FairScheduler
name|scheduler
parameter_list|)
block|{
name|super
argument_list|(
name|queue
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AppSchedulable
argument_list|>
name|apps
init|=
name|queue
operator|.
name|getAppSchedulables
argument_list|()
decl_stmt|;
for|for
control|(
name|AppSchedulable
name|app
range|:
name|apps
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getApp
argument_list|()
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|numPendingApps
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numActiveApps
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNumActiveApplications ()
specifier|public
name|int
name|getNumActiveApplications
parameter_list|()
block|{
return|return
name|numActiveApps
return|;
block|}
DECL|method|getNumPendingApplications ()
specifier|public
name|int
name|getNumPendingApplications
parameter_list|()
block|{
return|return
name|numPendingApps
return|;
block|}
block|}
end_class

end_unit

