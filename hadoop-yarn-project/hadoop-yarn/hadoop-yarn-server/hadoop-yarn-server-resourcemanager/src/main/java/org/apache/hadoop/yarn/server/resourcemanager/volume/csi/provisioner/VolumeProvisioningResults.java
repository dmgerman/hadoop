begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi.provisioner
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|provisioner
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|VolumeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Result of volumes' provisioning.  */
end_comment

begin_class
DECL|class|VolumeProvisioningResults
specifier|public
class|class
name|VolumeProvisioningResults
block|{
DECL|field|resultMap
specifier|private
name|Map
argument_list|<
name|VolumeId
argument_list|,
name|VolumeProvisioningResult
argument_list|>
name|resultMap
decl_stmt|;
DECL|method|VolumeProvisioningResults ()
specifier|public
name|VolumeProvisioningResults
parameter_list|()
block|{
name|this
operator|.
name|resultMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|isSuccess ()
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
operator|!
name|resultMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|resultMap
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|subResult
lambda|->
name|subResult
operator|.
name|isSuccess
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBriefMessage ()
specifier|public
name|String
name|getBriefMessage
parameter_list|()
block|{
name|JsonObject
name|obj
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
name|obj
operator|.
name|addProperty
argument_list|(
literal|"TotalVolumes"
argument_list|,
name|resultMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsonObject
name|failed
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
for|for
control|(
name|VolumeProvisioningResult
name|result
range|:
name|resultMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|failed
operator|.
name|addProperty
argument_list|(
name|result
operator|.
name|getVolumeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|getVolumeState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|obj
operator|.
name|add
argument_list|(
literal|"failedVolumesStates"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
return|return
name|obj
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|VolumeProvisioningResult
specifier|static
class|class
name|VolumeProvisioningResult
block|{
DECL|field|volumeId
specifier|private
name|VolumeId
name|volumeId
decl_stmt|;
DECL|field|volumeState
specifier|private
name|VolumeState
name|volumeState
decl_stmt|;
DECL|field|success
specifier|private
name|boolean
name|success
decl_stmt|;
DECL|method|VolumeProvisioningResult (VolumeId volumeId, VolumeState state)
name|VolumeProvisioningResult
parameter_list|(
name|VolumeId
name|volumeId
parameter_list|,
name|VolumeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|volumeId
operator|=
name|volumeId
expr_stmt|;
name|this
operator|.
name|volumeState
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|state
operator|==
name|VolumeState
operator|.
name|NODE_READY
expr_stmt|;
block|}
DECL|method|isSuccess ()
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
DECL|method|getVolumeId ()
specifier|public
name|VolumeId
name|getVolumeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeId
return|;
block|}
DECL|method|getVolumeState ()
specifier|public
name|VolumeState
name|getVolumeState
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeState
return|;
block|}
block|}
DECL|method|addResult (VolumeId volumeId, VolumeState state)
specifier|public
name|void
name|addResult
parameter_list|(
name|VolumeId
name|volumeId
parameter_list|,
name|VolumeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|resultMap
operator|.
name|put
argument_list|(
name|volumeId
argument_list|,
operator|new
name|VolumeProvisioningResult
argument_list|(
name|volumeId
argument_list|,
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

