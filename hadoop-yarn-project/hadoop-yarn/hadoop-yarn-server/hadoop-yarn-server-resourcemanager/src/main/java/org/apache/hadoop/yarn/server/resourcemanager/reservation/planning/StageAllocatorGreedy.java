begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
operator|.
name|RLEOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Computes the stage allocation according to the greedy allocation rule. The  * greedy rule repeatedly allocates requested containers at the rightmost  * (latest) free interval.  */
end_comment

begin_class
DECL|class|StageAllocatorGreedy
specifier|public
class|class
name|StageAllocatorGreedy
implements|implements
name|StageAllocator
block|{
annotation|@
name|Override
DECL|method|computeStageAllocation (Plan plan, RLESparseResourceAllocation planLoads, RLESparseResourceAllocation planModifications, ReservationRequest rr, long stageEarliestStart, long stageDeadline, String user, ReservationId oldId)
specifier|public
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|computeStageAllocation
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|RLESparseResourceAllocation
name|planLoads
parameter_list|,
name|RLESparseResourceAllocation
name|planModifications
parameter_list|,
name|ReservationRequest
name|rr
parameter_list|,
name|long
name|stageEarliestStart
parameter_list|,
name|long
name|stageDeadline
parameter_list|,
name|String
name|user
parameter_list|,
name|ReservationId
name|oldId
parameter_list|)
throws|throws
name|PlanningException
block|{
name|Resource
name|totalCapacity
init|=
name|plan
operator|.
name|getTotalCapacity
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|allocationRequests
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// compute the gang as a resource and get the duration
name|Resource
name|gang
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getConcurrency
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|dur
init|=
name|rr
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|long
name|step
init|=
name|plan
operator|.
name|getStep
argument_list|()
decl_stmt|;
comment|// ceil the duration to the next multiple of the plan step
if|if
condition|(
name|dur
operator|%
name|step
operator|!=
literal|0
condition|)
block|{
name|dur
operator|+=
operator|(
name|step
operator|-
operator|(
name|dur
operator|%
name|step
operator|)
operator|)
expr_stmt|;
block|}
comment|// we know for sure that this division has no remainder (part of contract
comment|// with user, validate before
name|int
name|gangsToPlace
init|=
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|/
name|rr
operator|.
name|getConcurrency
argument_list|()
decl_stmt|;
name|int
name|maxGang
init|=
literal|0
decl_stmt|;
name|RLESparseResourceAllocation
name|netAvailable
init|=
name|plan
operator|.
name|getAvailableResourceOverTime
argument_list|(
name|user
argument_list|,
name|oldId
argument_list|,
name|stageEarliestStart
argument_list|,
name|stageDeadline
argument_list|)
decl_stmt|;
name|netAvailable
operator|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|,
name|netAvailable
argument_list|,
name|planModifications
argument_list|,
name|RLEOperator
operator|.
name|subtract
argument_list|,
name|stageEarliestStart
argument_list|,
name|stageDeadline
argument_list|)
expr_stmt|;
comment|// loop trying to place until we are done, or we are considering
comment|// an invalid range of times
while|while
condition|(
name|gangsToPlace
operator|>
literal|0
operator|&&
name|stageDeadline
operator|-
name|dur
operator|>=
name|stageEarliestStart
condition|)
block|{
comment|// as we run along we remember how many gangs we can fit, and what
comment|// was the most constraining moment in time (we will restart just
comment|// after that to place the next batch)
name|maxGang
operator|=
name|gangsToPlace
expr_stmt|;
name|long
name|minPoint
init|=
name|stageDeadline
decl_stmt|;
name|int
name|curMaxGang
init|=
name|maxGang
decl_stmt|;
comment|// start placing at deadline (excluded due to [,) interval semantics and
comment|// move backward
for|for
control|(
name|long
name|t
init|=
name|stageDeadline
operator|-
name|plan
operator|.
name|getStep
argument_list|()
init|;
name|t
operator|>=
name|stageDeadline
operator|-
name|dur
operator|&&
name|maxGang
operator|>
literal|0
condition|;
name|t
operator|=
name|t
operator|-
name|plan
operator|.
name|getStep
argument_list|()
control|)
block|{
name|Resource
name|netAvailableRes
init|=
name|netAvailable
operator|.
name|getCapacityAtTime
argument_list|(
name|t
argument_list|)
decl_stmt|;
comment|// compute maximum number of gangs we could fit
name|curMaxGang
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|totalCapacity
argument_list|,
name|netAvailableRes
argument_list|,
name|gang
argument_list|)
argument_list|)
expr_stmt|;
comment|// pick the minimum between available resources in this instant, and how
comment|// many gangs we have to place
name|curMaxGang
operator|=
name|Math
operator|.
name|min
argument_list|(
name|gangsToPlace
argument_list|,
name|curMaxGang
argument_list|)
expr_stmt|;
comment|// compare with previous max, and set it. also remember *where* we found
comment|// the minimum (useful for next attempts)
if|if
condition|(
name|curMaxGang
operator|<=
name|maxGang
condition|)
block|{
name|maxGang
operator|=
name|curMaxGang
expr_stmt|;
name|minPoint
operator|=
name|t
expr_stmt|;
block|}
block|}
comment|// if we were able to place any gang, record this, and decrement
comment|// gangsToPlace
if|if
condition|(
name|maxGang
operator|>
literal|0
condition|)
block|{
name|gangsToPlace
operator|-=
name|maxGang
expr_stmt|;
name|ReservationInterval
name|reservationInt
init|=
operator|new
name|ReservationInterval
argument_list|(
name|stageDeadline
operator|-
name|dur
argument_list|,
name|stageDeadline
argument_list|)
decl_stmt|;
name|Resource
name|reservationRes
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getConcurrency
argument_list|()
operator|*
name|maxGang
argument_list|)
decl_stmt|;
comment|// remember occupied space (plan is read-only till we find a plausible
comment|// allocation for the entire request). This is needed since we might be
comment|// placing other ReservationRequest within the same
comment|// ReservationDefinition,
comment|// and we must avoid double-counting the available resources
name|planModifications
operator|.
name|addInterval
argument_list|(
name|reservationInt
argument_list|,
name|reservationRes
argument_list|)
expr_stmt|;
name|allocationRequests
operator|.
name|put
argument_list|(
name|reservationInt
argument_list|,
name|reservationRes
argument_list|)
expr_stmt|;
block|}
comment|// reset our new starting point (curDeadline) to the most constraining
comment|// point so far, we will look "left" of that to find more places where
comment|// to schedule gangs (for sure nothing on the "right" of this point can
comment|// fit a full gang.
name|stageDeadline
operator|=
name|minPoint
expr_stmt|;
block|}
comment|// if no gangs are left to place we succeed and return the allocation
if|if
condition|(
name|gangsToPlace
operator|==
literal|0
condition|)
block|{
return|return
name|allocationRequests
return|;
block|}
else|else
block|{
comment|// If we are here is becasue we did not manage to satisfy this request.
comment|// So we need to remove unwanted side-effect from tempAssigned (needed
comment|// for ANY).
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|tempAllocation
range|:
name|allocationRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|planModifications
operator|.
name|removeInterval
argument_list|(
name|tempAllocation
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempAllocation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// and return null to signal failure in this allocation
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

