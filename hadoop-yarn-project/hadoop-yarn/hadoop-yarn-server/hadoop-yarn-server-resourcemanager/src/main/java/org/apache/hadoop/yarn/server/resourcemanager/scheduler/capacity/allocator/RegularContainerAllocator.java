begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.allocator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|allocator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|AppPlacementAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivityDiagnosticConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivitiesLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivitiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSAMContainerLaunchDiagnosticsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|CandidateNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|CandidateNodeSetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|PendingAsk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Allocate normal (new) containers, considers locality/label, etc. Using  * delayed scheduling mechanism to get better locality allocation.  */
end_comment

begin_class
DECL|class|RegularContainerAllocator
specifier|public
class|class
name|RegularContainerAllocator
extends|extends
name|AbstractContainerAllocator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegularContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RegularContainerAllocator (FiCaSchedulerApp application, ResourceCalculator rc, RMContext rmContext, ActivitiesManager activitiesManager)
specifier|public
name|RegularContainerAllocator
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|ActivitiesManager
name|activitiesManager
parameter_list|)
block|{
name|super
argument_list|(
name|application
argument_list|,
name|rc
argument_list|,
name|rmContext
argument_list|,
name|activitiesManager
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHeadroom (Resource clusterResource, ResourceLimits currentResourceLimits, Resource required, String nodePartition)
specifier|private
name|boolean
name|checkHeadroom
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceLimits
name|currentResourceLimits
parameter_list|,
name|Resource
name|required
parameter_list|,
name|String
name|nodePartition
parameter_list|)
block|{
comment|// If headroom + currentReservation< required, we cannot allocate this
comment|// require
name|Resource
name|resourceCouldBeUnReserved
init|=
name|application
operator|.
name|getCurrentReservation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
operator|||
operator|!
name|nodePartition
operator|.
name|equals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
comment|// If we don't allow reservation continuous looking, OR we're looking at
comment|// non-default node partition, we won't allow to unreserve before
comment|// allocation.
name|resourceCouldBeUnReserved
operator|=
name|Resources
operator|.
name|none
argument_list|()
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|currentResourceLimits
operator|.
name|getHeadroom
argument_list|()
argument_list|,
name|resourceCouldBeUnReserved
argument_list|)
argument_list|,
name|required
argument_list|)
return|;
block|}
comment|/*    * Pre-check if we can allocate a pending resource request    * (given schedulerKey) to a given CandidateNodeSet.    * We will consider stuffs like exclusivity, pending resource, node partition,    * headroom, etc.    */
DECL|method|preCheckForNodeCandidateSet ( Resource clusterResource, CandidateNodeSet<FiCaSchedulerNode> candidates, SchedulingMode schedulingMode, ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey)
specifier|private
name|ContainerAllocation
name|preCheckForNodeCandidateSet
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|CandidateNodeSet
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|candidates
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|resourceLimits
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|schedulerKey
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|FiCaSchedulerNode
name|node
init|=
name|CandidateNodeSetUtils
operator|.
name|getSingleNode
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
name|PendingAsk
name|offswitchPendingAsk
init|=
name|application
operator|.
name|getPendingAsk
argument_list|(
name|schedulerKey
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|offswitchPendingAsk
operator|.
name|getCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|PRIORITY_SKIPPED_BECAUSE_NULL_ANY_REQUEST
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
comment|// Required resource
name|Resource
name|required
init|=
name|offswitchPendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
decl_stmt|;
comment|// Do we need containers at this 'priority'?
if|if
condition|(
name|application
operator|.
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
comment|// AM container allocation doesn't support non-exclusive allocation to
comment|// avoid painful of preempt an AM container
if|if
condition|(
name|schedulingMode
operator|==
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
condition|)
block|{
if|if
condition|(
name|application
operator|.
name|isWaitingForAMContainer
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip allocating AM container to app_attempt="
operator|+
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|", don't allow to allocate AM container in non-exclusive mode"
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|updateAppSkipNodeDiagnostics
argument_list|(
literal|"Skipping assigning to Node in Ignore Exclusivity mode. "
argument_list|)
expr_stmt|;
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_IN_IGNORE_EXCLUSIVITY_MODE
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|APP_SKIPPED
return|;
block|}
block|}
comment|// Is the nodePartition of pending request matches the node's partition
comment|// If not match, jump to next priority.
if|if
condition|(
operator|!
name|appInfo
operator|.
name|precheckNode
argument_list|(
name|schedulerKey
argument_list|,
name|node
argument_list|,
name|schedulingMode
argument_list|)
condition|)
block|{
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|PRIORITY_SKIPPED_BECAUSE_NODE_PARTITION_DOES_NOT_MATCH_REQUEST
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
if|if
condition|(
operator|!
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|shouldAllocOrReserveNewContainer
argument_list|(
name|schedulerKey
argument_list|,
name|required
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"doesn't need containers based on reservation algo!"
argument_list|)
expr_stmt|;
block|}
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|DO_NOT_NEED_ALLOCATIONATTEMPTINFOS
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
block|}
if|if
condition|(
operator|!
name|checkHeadroom
argument_list|(
name|clusterResource
argument_list|,
name|resourceLimits
argument_list|,
name|required
argument_list|,
name|candidates
operator|.
name|getPartition
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cannot allocate required resource="
operator|+
name|required
operator|+
literal|" because of headroom"
argument_list|)
expr_stmt|;
block|}
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|QUEUE_SKIPPED_HEADROOM
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|QUEUE_SKIPPED
return|;
block|}
comment|// Increase missed-non-partitioned-resource-request-opportunity.
comment|// This is to make sure non-partitioned-resource-request will prefer
comment|// to be allocated to non-partitioned nodes
name|int
name|missedNonPartitionedRequestSchedulingOpportunity
init|=
literal|0
decl_stmt|;
comment|// Only do this when request associated with given scheduler key accepts
comment|// NO_LABEL under RESPECT_EXCLUSIVITY mode
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|appInfo
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|)
condition|)
block|{
name|missedNonPartitionedRequestSchedulingOpportunity
operator|=
name|application
operator|.
name|addMissedNonPartitionedRequestSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schedulingMode
operator|==
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
condition|)
block|{
comment|// Before doing allocation, we need to check scheduling opportunity to
comment|// make sure : non-partitioned resource request should be scheduled to
comment|// non-partitioned partition first.
if|if
condition|(
name|missedNonPartitionedRequestSchedulingOpportunity
operator|<
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip app_attempt="
operator|+
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" priority="
operator|+
name|schedulerKey
operator|.
name|getPriority
argument_list|()
operator|+
literal|" because missed-non-partitioned-resource-request"
operator|+
literal|" opportunity under required:"
operator|+
literal|" Now="
operator|+
name|missedNonPartitionedRequestSchedulingOpportunity
operator|+
literal|" required="
operator|+
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|NON_PARTITIONED_PARTITION_FIRST
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|APP_SKIPPED
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkIfNodeBlackListed (FiCaSchedulerNode node, SchedulerRequestKey schedulerKey)
specifier|private
name|ContainerAllocation
name|checkIfNodeBlackListed
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|schedulerKey
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|SchedulerAppUtils
operator|.
name|isPlaceBlacklisted
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|LOG
argument_list|)
condition|)
block|{
name|application
operator|.
name|updateAppSkipNodeDiagnostics
argument_list|(
name|CSAMContainerLaunchDiagnosticsConstants
operator|.
name|SKIP_AM_ALLOCATION_IN_BLACK_LISTED_NODE
argument_list|)
expr_stmt|;
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_BLACK_LISTED_NODE
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|APP_SKIPPED
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|tryAllocateOnNode (Resource clusterResource, FiCaSchedulerNode node, SchedulingMode schedulingMode, ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey, RMContainer reservedContainer)
name|ContainerAllocation
name|tryAllocateOnNode
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|resourceLimits
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|ContainerAllocation
name|result
decl_stmt|;
comment|// Sanity checks before assigning to this node
name|result
operator|=
name|checkIfNodeBlackListed
argument_list|(
name|node
argument_list|,
name|schedulerKey
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Inform the application it is about to get a scheduling opportunity
comment|// TODO, we may need to revisit here to see if we should add scheduling
comment|// opportunity here
name|application
operator|.
name|addSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
comment|// Try to allocate containers on node
name|result
operator|=
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|resourceLimits
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|reservedContainer
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|state
operator|==
name|AllocationState
operator|.
name|PRIORITY_SKIPPED
condition|)
block|{
comment|// Don't count 'skipped nodes' as a scheduling opportunity!
name|application
operator|.
name|subtractSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getLocalityWaitFactor ( SchedulerRequestKey schedulerKey, int clusterNodes)
specifier|public
name|float
name|getLocalityWaitFactor
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|int
name|clusterNodes
parameter_list|)
block|{
comment|// Estimate: Required unique resources (i.e. hosts + racks)
name|int
name|requiredResources
init|=
name|Math
operator|.
name|max
argument_list|(
name|application
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|getUniqueLocationAsks
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// waitFactor can't be more than '1'
comment|// i.e. no point skipping more than clustersize opportunities
return|return
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|float
operator|)
name|requiredResources
operator|/
name|clusterNodes
operator|)
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
DECL|method|getActualNodeLocalityDelay ()
specifier|private
name|int
name|getActualNodeLocalityDelay
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|,
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getNodeLocalityDelay
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getActualRackLocalityDelay ()
specifier|private
name|int
name|getActualRackLocalityDelay
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|,
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getNodeLocalityDelay
argument_list|()
operator|+
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getRackLocalityAdditionalDelay
argument_list|()
argument_list|)
return|;
block|}
DECL|method|canAssign (SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type, RMContainer reservedContainer)
specifier|private
name|boolean
name|canAssign
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
comment|// Clearly we need containers for this application...
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// If there are no nodes in the cluster, return false.
if|if
condition|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If we have only ANY requests for this schedulerKey, we should not
comment|// delay its scheduling.
if|if
condition|(
name|application
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|getUniqueLocationAsks
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// 'Delay' off-switch
name|long
name|missedOpportunities
init|=
name|application
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
comment|// If rack locality additional delay parameter is enabled.
if|if
condition|(
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getRackLocalityAdditionalDelay
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|missedOpportunities
operator|>
name|getActualRackLocalityDelay
argument_list|()
return|;
block|}
else|else
block|{
name|long
name|requiredContainers
init|=
name|application
operator|.
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
name|float
name|localityWaitFactor
init|=
name|getLocalityWaitFactor
argument_list|(
name|schedulerKey
argument_list|,
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Cap the delay by the number of nodes in the cluster.
return|return
operator|(
name|Math
operator|.
name|min
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|,
operator|(
name|requiredContainers
operator|*
name|localityWaitFactor
operator|)
argument_list|)
operator|<
name|missedOpportunities
operator|)
return|;
block|}
block|}
comment|// Check if we need containers on this rack
if|if
condition|(
name|application
operator|.
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If we are here, we do need containers on this rack for RACK_LOCAL req
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
comment|// 'Delay' rack-local just a little bit...
name|long
name|missedOpportunities
init|=
name|application
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
return|return
name|getActualNodeLocalityDelay
argument_list|()
operator|<
name|missedOpportunities
return|;
block|}
comment|// Check if we need containers on this host
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
comment|// Now check if we need containers on this host...
return|return
name|application
operator|.
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|>
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|assignNodeLocalContainers ( Resource clusterResource, PendingAsk nodeLocalAsk, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, RMContainer reservedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|ContainerAllocation
name|assignNodeLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|PendingAsk
name|nodeLocalAsk
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|schedulerKey
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|nodeLocalAsk
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
return|;
block|}
comment|// Skip node-local request, go to rack-local request
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|schedulerKey
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_NODE_LOCAL_REQUEST
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|LOCALITY_SKIPPED
return|;
block|}
DECL|method|assignRackLocalContainers ( Resource clusterResource, PendingAsk rackLocalAsk, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, RMContainer reservedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|ContainerAllocation
name|assignRackLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|PendingAsk
name|rackLocalAsk
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|schedulerKey
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|rackLocalAsk
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
return|;
block|}
comment|// Skip rack-local request, go to off-switch request
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|schedulerKey
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_RACK_LOCAL_REQUEST
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|LOCALITY_SKIPPED
return|;
block|}
DECL|method|assignOffSwitchContainers ( Resource clusterResource, PendingAsk offSwitchAsk, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, RMContainer reservedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|ContainerAllocation
name|assignOffSwitchContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|PendingAsk
name|offSwitchAsk
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|schedulerKey
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|offSwitchAsk
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
return|;
block|}
name|application
operator|.
name|updateAppSkipNodeDiagnostics
argument_list|(
name|CSAMContainerLaunchDiagnosticsConstants
operator|.
name|SKIP_AM_ALLOCATION_DUE_TO_LOCALITY
argument_list|)
expr_stmt|;
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|schedulerKey
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_OFF_SWITCH_REQUEST
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|APP_SKIPPED
return|;
block|}
DECL|method|assignContainersOnNode (Resource clusterResource, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, RMContainer reservedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|ContainerAllocation
name|assignContainersOnNode
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|schedulerKey
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|ContainerAllocation
name|allocation
decl_stmt|;
name|NodeType
name|requestLocalityType
init|=
literal|null
decl_stmt|;
comment|// Data-local
name|PendingAsk
name|nodeLocalAsk
init|=
name|application
operator|.
name|getPendingAsk
argument_list|(
name|schedulerKey
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalAsk
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|requestLocalityType
operator|=
name|NodeType
operator|.
name|NODE_LOCAL
expr_stmt|;
name|allocation
operator|=
name|assignNodeLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|nodeLocalAsk
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|allocation
operator|.
name|getResourceToBeAllocated
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|allocation
operator|.
name|requestLocalityType
operator|=
name|requestLocalityType
expr_stmt|;
return|return
name|allocation
return|;
block|}
block|}
comment|// Rack-local
name|PendingAsk
name|rackLocalAsk
init|=
name|application
operator|.
name|getPendingAsk
argument_list|(
name|schedulerKey
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalAsk
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|appInfo
operator|.
name|canDelayTo
argument_list|(
name|schedulerKey
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
condition|)
block|{
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
name|requestLocalityType
operator|=
name|requestLocalityType
operator|==
literal|null
condition|?
name|NodeType
operator|.
name|RACK_LOCAL
else|:
name|requestLocalityType
expr_stmt|;
name|allocation
operator|=
name|assignRackLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|rackLocalAsk
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|allocation
operator|.
name|getResourceToBeAllocated
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|allocation
operator|.
name|requestLocalityType
operator|=
name|requestLocalityType
expr_stmt|;
return|return
name|allocation
return|;
block|}
block|}
comment|// Off-switch
name|PendingAsk
name|offSwitchAsk
init|=
name|application
operator|.
name|getPendingAsk
argument_list|(
name|schedulerKey
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|offSwitchAsk
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|appInfo
operator|.
name|canDelayTo
argument_list|(
name|schedulerKey
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
name|requestLocalityType
operator|=
name|requestLocalityType
operator|==
literal|null
condition|?
name|NodeType
operator|.
name|OFF_SWITCH
else|:
name|requestLocalityType
expr_stmt|;
name|allocation
operator|=
name|assignOffSwitchContainers
argument_list|(
name|clusterResource
argument_list|,
name|offSwitchAsk
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|reservedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
expr_stmt|;
comment|// When a returned allocation is LOCALITY_SKIPPED, since we're in
comment|// off-switch request now, we will skip this app w.r.t priorities
if|if
condition|(
name|allocation
operator|.
name|state
operator|==
name|AllocationState
operator|.
name|LOCALITY_SKIPPED
condition|)
block|{
name|allocation
operator|.
name|state
operator|=
name|AllocationState
operator|.
name|APP_SKIPPED
expr_stmt|;
block|}
name|allocation
operator|.
name|requestLocalityType
operator|=
name|requestLocalityType
expr_stmt|;
return|return
name|allocation
return|;
block|}
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|PRIORITY_SKIPPED
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
return|;
block|}
DECL|method|assignContainer (Resource clusterResource, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, PendingAsk pendingAsk, NodeType type, RMContainer rmContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|ContainerAllocation
name|assignContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|PendingAsk
name|pendingAsk
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|schedulerKey
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers: node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" priority="
operator|+
name|schedulerKey
operator|.
name|getPriority
argument_list|()
operator|+
literal|" pendingAsk="
operator|+
name|pendingAsk
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|Resource
name|capability
init|=
name|pendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
decl_stmt|;
name|Resource
name|available
init|=
name|node
operator|.
name|getUnallocatedResource
argument_list|()
decl_stmt|;
name|Resource
name|totalResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|capability
argument_list|,
name|totalResource
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node : "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" does not have sufficient resource for ask : "
operator|+
name|pendingAsk
operator|+
literal|" node total capability : "
operator|+
name|node
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skip this locality request
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|NOT_SUFFICIENT_RESOURCE
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|LOCALITY_SKIPPED
return|;
block|}
name|boolean
name|shouldAllocOrReserveNewContainer
init|=
name|shouldAllocOrReserveNewContainer
argument_list|(
name|schedulerKey
argument_list|,
name|capability
argument_list|)
decl_stmt|;
comment|// Can we allocate a container on this node?
name|long
name|availableContainers
init|=
name|rc
operator|.
name|computeAvailableContainers
argument_list|(
name|available
argument_list|,
name|capability
argument_list|)
decl_stmt|;
comment|// How much need to unreserve equals to:
comment|// max(required - headroom, amountNeedUnreserve)
name|Resource
name|resourceNeedToUnReserve
init|=
name|Resources
operator|.
name|max
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|capability
argument_list|,
name|currentResoureLimits
operator|.
name|getHeadroom
argument_list|()
argument_list|)
argument_list|,
name|currentResoureLimits
operator|.
name|getAmountNeededUnreserve
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|needToUnreserve
init|=
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|resourceNeedToUnReserve
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
decl_stmt|;
name|RMContainer
name|unreservedContainer
init|=
literal|null
decl_stmt|;
name|boolean
name|reservationsContinueLooking
init|=
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
decl_stmt|;
comment|// Check if we need to kill some containers to allocate this one
name|List
argument_list|<
name|RMContainer
argument_list|>
name|toKillContainers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|availableContainers
operator|==
literal|0
operator|&&
name|currentResoureLimits
operator|.
name|isAllowPreemption
argument_list|()
condition|)
block|{
name|Resource
name|availableAndKillable
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|available
argument_list|)
decl_stmt|;
for|for
control|(
name|RMContainer
name|killableContainer
range|:
name|node
operator|.
name|getKillableContainers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|toKillContainers
condition|)
block|{
name|toKillContainers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|toKillContainers
operator|.
name|add
argument_list|(
name|killableContainer
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|availableAndKillable
argument_list|,
name|killableContainer
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rc
argument_list|,
name|capability
argument_list|,
name|availableAndKillable
argument_list|)
condition|)
block|{
comment|// Stop if we find enough spaces
name|availableContainers
operator|=
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|availableContainers
operator|>
literal|0
condition|)
block|{
comment|// Allocate...
comment|// We will only do continuous reservation when this is not allocated from
comment|// reserved container
if|if
condition|(
name|rmContainer
operator|==
literal|null
operator|&&
name|reservationsContinueLooking
operator|&&
name|node
operator|.
name|getLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// when reservationsContinueLooking is set, we may need to unreserve
comment|// some containers to meet this queue, its parents', or the users'
comment|// resource limits.
comment|// TODO, need change here when we want to support continuous reservation
comment|// looking for labeled partitions.
if|if
condition|(
operator|!
name|shouldAllocOrReserveNewContainer
operator|||
name|needToUnreserve
condition|)
block|{
if|if
condition|(
operator|!
name|needToUnreserve
condition|)
block|{
comment|// If we shouldn't allocate/reserve new container then we should
comment|// unreserve one the same size we are asking for since the
comment|// currentResoureLimits.getAmountNeededUnreserve could be zero. If
comment|// the limit was hit then use the amount we need to unreserve to be
comment|// under the limit.
name|resourceNeedToUnReserve
operator|=
name|capability
expr_stmt|;
block|}
name|unreservedContainer
operator|=
name|application
operator|.
name|findNodeToUnreserve
argument_list|(
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|resourceNeedToUnReserve
argument_list|)
expr_stmt|;
comment|// When (minimum-unreserved-resource> 0 OR we cannot allocate
comment|// new/reserved
comment|// container (That means we *have to* unreserve some resource to
comment|// continue)). If we failed to unreserve some resource, we can't
comment|// continue.
if|if
condition|(
literal|null
operator|==
name|unreservedContainer
condition|)
block|{
comment|// Skip the locality request
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|LOCALITY_SKIPPED
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|LOCALITY_SKIPPED
return|;
block|}
block|}
block|}
name|ContainerAllocation
name|result
init|=
operator|new
name|ContainerAllocation
argument_list|(
name|unreservedContainer
argument_list|,
name|pendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|AllocationState
operator|.
name|ALLOCATED
argument_list|)
decl_stmt|;
name|result
operator|.
name|containerNodeType
operator|=
name|type
expr_stmt|;
name|result
operator|.
name|setToKillContainers
argument_list|(
name|toKillContainers
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
comment|// if we are allowed to allocate but this node doesn't have space, reserve
comment|// it or if this was an already a reserved container, reserve it again
if|if
condition|(
name|shouldAllocOrReserveNewContainer
operator|||
name|rmContainer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reservationsContinueLooking
operator|&&
name|rmContainer
operator|==
literal|null
condition|)
block|{
comment|// we could possibly ignoring queue capacity or user limits when
comment|// reservationsContinueLooking is set. Make sure we didn't need to
comment|// unreserve one.
if|if
condition|(
name|needToUnreserve
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"we needed to unreserve to be able to allocate"
argument_list|)
expr_stmt|;
block|}
comment|// Skip the locality request
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|LOCALITY_SKIPPED
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|LOCALITY_SKIPPED
return|;
block|}
block|}
name|ContainerAllocation
name|result
init|=
operator|new
name|ContainerAllocation
argument_list|(
literal|null
argument_list|,
name|pendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|AllocationState
operator|.
name|RESERVED
argument_list|)
decl_stmt|;
name|result
operator|.
name|containerNodeType
operator|=
name|type
expr_stmt|;
name|result
operator|.
name|setToKillContainers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Skip the locality request
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|LOCALITY_SKIPPED
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|LOCALITY_SKIPPED
return|;
block|}
block|}
DECL|method|shouldAllocOrReserveNewContainer ( SchedulerRequestKey schedulerKey, Resource required)
name|boolean
name|shouldAllocOrReserveNewContainer
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
name|int
name|requiredContainers
init|=
name|application
operator|.
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
name|int
name|reservedContainers
init|=
name|application
operator|.
name|getNumReservedContainers
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
name|int
name|starvation
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|>
literal|0
condition|)
block|{
name|float
name|nodeFactor
init|=
name|Resources
operator|.
name|ratio
argument_list|(
name|rc
argument_list|,
name|required
argument_list|,
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
decl_stmt|;
comment|// Use percentage of node required to bias against large containers...
comment|// Protect against corner case where you need the whole node with
comment|// Math.min(nodeFactor, minimumAllocationFactor)
name|starvation
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|application
operator|.
name|getReReservations
argument_list|(
name|schedulerKey
argument_list|)
operator|/
operator|(
name|float
operator|)
name|reservedContainers
operator|)
operator|*
operator|(
literal|1.0f
operator|-
operator|(
name|Math
operator|.
name|min
argument_list|(
name|nodeFactor
argument_list|,
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getMinimumAllocationFactor
argument_list|()
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"needsContainers:"
operator|+
literal|" app.#re-reserve="
operator|+
name|application
operator|.
name|getReReservations
argument_list|(
name|schedulerKey
argument_list|)
operator|+
literal|" reserved="
operator|+
name|reservedContainers
operator|+
literal|" nodeFactor="
operator|+
name|nodeFactor
operator|+
literal|" minAllocFactor="
operator|+
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getMinimumAllocationFactor
argument_list|()
operator|+
literal|" starvation="
operator|+
name|starvation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|(
operator|(
name|starvation
operator|+
name|requiredContainers
operator|)
operator|-
name|reservedContainers
operator|)
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|getContainer (RMContainer rmContainer, FiCaSchedulerNode node, Resource capability, SchedulerRequestKey schedulerKey)
specifier|private
name|Container
name|getContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
return|return
operator|(
name|rmContainer
operator|!=
literal|null
operator|)
condition|?
name|rmContainer
operator|.
name|getContainer
argument_list|()
else|:
name|createContainer
argument_list|(
name|node
argument_list|,
name|capability
argument_list|,
name|schedulerKey
argument_list|)
return|;
block|}
DECL|method|createContainer (FiCaSchedulerNode node, Resource capability, SchedulerRequestKey schedulerKey)
specifier|private
name|Container
name|createContainer
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
comment|// Create the container
comment|// Now set the containerId to null first, because it is possible the
comment|// container will be rejected because of concurrent resource allocation.
comment|// new containerId will be generated and assigned to the container
comment|// after confirmed.
return|return
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
literal|null
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|capability
argument_list|,
name|schedulerKey
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|,
name|schedulerKey
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|handleNewContainerAllocation ( ContainerAllocation allocationResult, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, Container container)
specifier|private
name|ContainerAllocation
name|handleNewContainerAllocation
parameter_list|(
name|ContainerAllocation
name|allocationResult
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Inform the application
name|RMContainer
name|allocatedContainer
init|=
name|application
operator|.
name|allocate
argument_list|(
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|allocationResult
operator|.
name|updatedContainer
operator|=
name|allocatedContainer
expr_stmt|;
comment|// Does the application need this resource?
if|if
condition|(
name|allocatedContainer
operator|==
literal|null
condition|)
block|{
comment|// Skip this app if we failed to allocate.
name|ContainerAllocation
name|ret
init|=
operator|new
name|ContainerAllocation
argument_list|(
name|allocationResult
operator|.
name|containerToBeUnreserved
argument_list|,
literal|null
argument_list|,
name|AllocationState
operator|.
name|APP_SKIPPED
argument_list|)
decl_stmt|;
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|schedulerKey
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|FAIL_TO_ALLOCATE
argument_list|,
name|ActivityState
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
name|allocationResult
return|;
block|}
DECL|method|doAllocation (ContainerAllocation allocationResult, FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, RMContainer reservedContainer)
name|ContainerAllocation
name|doAllocation
parameter_list|(
name|ContainerAllocation
name|allocationResult
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
comment|// Create the container if necessary
name|Container
name|container
init|=
name|getContainer
argument_list|(
name|reservedContainer
argument_list|,
name|node
argument_list|,
name|allocationResult
operator|.
name|getResourceToBeAllocated
argument_list|()
argument_list|,
name|schedulerKey
argument_list|)
decl_stmt|;
comment|// something went wrong getting/creating the container
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|application
operator|.
name|updateAppSkipNodeDiagnostics
argument_list|(
literal|"Scheduling of container failed. "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get container for allocation!"
argument_list|)
expr_stmt|;
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|schedulerKey
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|COULD_NOT_GET_CONTAINER
argument_list|,
name|ActivityState
operator|.
name|REJECTED
argument_list|)
expr_stmt|;
return|return
name|ContainerAllocation
operator|.
name|APP_SKIPPED
return|;
block|}
if|if
condition|(
name|allocationResult
operator|.
name|getAllocationState
argument_list|()
operator|==
name|AllocationState
operator|.
name|ALLOCATED
condition|)
block|{
comment|// When allocating container
name|allocationResult
operator|=
name|handleNewContainerAllocation
argument_list|(
name|allocationResult
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When reserving container
name|RMContainer
name|updatedContainer
init|=
name|reservedContainer
decl_stmt|;
if|if
condition|(
name|updatedContainer
operator|==
literal|null
condition|)
block|{
name|updatedContainer
operator|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|schedulerKey
argument_list|,
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|application
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
name|allocationResult
operator|.
name|updatedContainer
operator|=
name|updatedContainer
expr_stmt|;
block|}
comment|// Only reset opportunities when we FIRST allocate the container. (IAW, When
comment|// reservedContainer != null, it's not the first time)
if|if
condition|(
name|reservedContainer
operator|==
literal|null
condition|)
block|{
comment|// Don't reset scheduling opportunities for off-switch assignments
comment|// otherwise the app will be delayed for each non-local assignment.
comment|// This helps apps with many off-cluster requests schedule faster.
if|if
condition|(
name|allocationResult
operator|.
name|containerNodeType
operator|!=
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resetting scheduling opportunities"
argument_list|)
expr_stmt|;
block|}
comment|// Only reset scheduling opportunities for RACK_LOCAL if configured
comment|// to do so. Not resetting means we will continue to schedule
comment|// RACK_LOCAL without delay.
if|if
condition|(
name|allocationResult
operator|.
name|containerNodeType
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
operator|||
name|application
operator|.
name|getCSLeafQueue
argument_list|()
operator|.
name|getRackLocalityFullReset
argument_list|()
condition|)
block|{
name|application
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Non-exclusive scheduling opportunity is different: we need reset
comment|// it when:
comment|// - It allocated on the default partition
comment|//
comment|// This is to make sure non-labeled resource request will be
comment|// most likely allocated on non-labeled nodes first.
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
name|application
operator|.
name|resetMissedNonPartitionedRequestSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allocationResult
return|;
block|}
DECL|method|allocate (Resource clusterResource, CandidateNodeSet<FiCaSchedulerNode> candidates, SchedulingMode schedulingMode, ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey, RMContainer reservedContainer)
specifier|private
name|ContainerAllocation
name|allocate
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|CandidateNodeSet
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|candidates
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|resourceLimits
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
comment|// Do checks before determining which node to allocate
comment|// Directly return if this check fails.
name|ContainerAllocation
name|result
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|preCheckForNodeCandidateSet
argument_list|(
name|clusterResource
argument_list|,
name|candidates
argument_list|,
name|schedulingMode
argument_list|,
name|resourceLimits
argument_list|,
name|schedulerKey
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
else|else
block|{
comment|// pre-check when allocating reserved container
if|if
condition|(
name|application
operator|.
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Release
return|return
operator|new
name|ContainerAllocation
argument_list|(
name|reservedContainer
argument_list|,
literal|null
argument_list|,
name|AllocationState
operator|.
name|QUEUE_SKIPPED
argument_list|)
return|;
block|}
block|}
name|AppPlacementAllocator
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|schedulingPS
init|=
name|application
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
name|result
operator|=
name|ContainerAllocation
operator|.
name|PRIORITY_SKIPPED
expr_stmt|;
name|Iterator
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|iter
init|=
name|schedulingPS
operator|.
name|getPreferredNodeIterator
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|=
name|tryAllocateOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|schedulingMode
argument_list|,
name|resourceLimits
argument_list|,
name|schedulerKey
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|AllocationState
operator|.
name|ALLOCATED
operator|==
name|result
operator|.
name|state
operator|||
name|AllocationState
operator|.
name|RESERVED
operator|==
name|result
operator|.
name|state
condition|)
block|{
name|result
operator|=
name|doAllocation
argument_list|(
name|result
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|assignContainers (Resource clusterResource, CandidateNodeSet<FiCaSchedulerNode> candidates, SchedulingMode schedulingMode, ResourceLimits resourceLimits, RMContainer reservedContainer)
specifier|public
name|CSAssignment
name|assignContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|CandidateNodeSet
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|candidates
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|resourceLimits
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|CandidateNodeSetUtils
operator|.
name|getSingleNode
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|==
literal|null
condition|)
block|{
comment|// Check if application needs more resource, skip if it doesn't need more.
if|if
condition|(
operator|!
name|application
operator|.
name|hasPendingResourceRequest
argument_list|(
name|rc
argument_list|,
name|candidates
operator|.
name|getPartition
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|schedulingMode
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip app_attempt="
operator|+
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|", because it doesn't need more resource, schedulingMode="
operator|+
name|schedulingMode
operator|.
name|name
argument_list|()
operator|+
literal|" node-label="
operator|+
name|candidates
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|application
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|APPLICATION_DO_NOT_NEED_RESOURCE
argument_list|)
expr_stmt|;
return|return
name|CSAssignment
operator|.
name|SKIP_ASSIGNMENT
return|;
block|}
comment|// Schedule in priority order
for|for
control|(
name|SchedulerRequestKey
name|schedulerKey
range|:
name|application
operator|.
name|getSchedulerKeys
argument_list|()
control|)
block|{
name|ContainerAllocation
name|result
init|=
name|allocate
argument_list|(
name|clusterResource
argument_list|,
name|candidates
argument_list|,
name|schedulingMode
argument_list|,
name|resourceLimits
argument_list|,
name|schedulerKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AllocationState
name|allocationState
init|=
name|result
operator|.
name|getAllocationState
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocationState
operator|==
name|AllocationState
operator|.
name|PRIORITY_SKIPPED
condition|)
block|{
continue|continue;
block|}
return|return
name|getCSAssignmentFromAllocateResult
argument_list|(
name|clusterResource
argument_list|,
name|result
argument_list|,
literal|null
argument_list|,
name|node
argument_list|)
return|;
block|}
comment|// We will reach here if we skipped all priorities of the app, so we will
comment|// skip the app.
name|ActivitiesLogger
operator|.
name|APP
operator|.
name|recordSkippedAppActivityWithoutAllocation
argument_list|(
name|activitiesManager
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|application
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ActivityDiagnosticConstant
operator|.
name|SKIPPED_ALL_PRIORITIES
argument_list|)
expr_stmt|;
return|return
name|CSAssignment
operator|.
name|SKIP_ASSIGNMENT
return|;
block|}
else|else
block|{
name|ContainerAllocation
name|result
init|=
name|allocate
argument_list|(
name|clusterResource
argument_list|,
name|candidates
argument_list|,
name|schedulingMode
argument_list|,
name|resourceLimits
argument_list|,
name|reservedContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
argument_list|,
name|reservedContainer
argument_list|)
decl_stmt|;
return|return
name|getCSAssignmentFromAllocateResult
argument_list|(
name|clusterResource
argument_list|,
name|result
argument_list|,
name|reservedContainer
argument_list|,
name|node
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

