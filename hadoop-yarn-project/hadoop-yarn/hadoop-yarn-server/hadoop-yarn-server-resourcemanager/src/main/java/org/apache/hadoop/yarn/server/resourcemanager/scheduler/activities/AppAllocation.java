begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  * It contains allocation information for one application within a period of  * time.  * Each application allocation may have several allocation attempts.  */
end_comment

begin_class
DECL|class|AppAllocation
specifier|public
class|class
name|AppAllocation
block|{
DECL|field|priority
specifier|private
name|Priority
name|priority
init|=
literal|null
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
DECL|field|appState
specifier|private
name|ActivityState
name|appState
init|=
literal|null
decl_stmt|;
DECL|field|diagnostic
specifier|private
name|String
name|diagnostic
init|=
literal|null
decl_stmt|;
DECL|field|queueName
specifier|private
name|String
name|queueName
init|=
literal|null
decl_stmt|;
DECL|field|allocationAttempts
specifier|private
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|allocationAttempts
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|method|AppAllocation (Priority priority, NodeId nodeId, String queueName)
specifier|public
name|AppAllocation
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|allocationAttempts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
DECL|method|updateAppContainerStateAndTime (ContainerId containerId, ActivityState appState, long ts, String diagnostic)
specifier|public
name|void
name|updateAppContainerStateAndTime
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ActivityState
name|appState
parameter_list|,
name|long
name|ts
parameter_list|,
name|String
name|diagnostic
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|ts
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|appState
operator|=
name|appState
expr_stmt|;
name|this
operator|.
name|diagnostic
operator|=
name|diagnostic
expr_stmt|;
block|}
DECL|method|addAppAllocationActivity (String containerId, String priority, ActivityState state, String diagnose, String type, NodeId nId, String allocationRequestId)
specifier|public
name|void
name|addAppAllocationActivity
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|priority
parameter_list|,
name|ActivityState
name|state
parameter_list|,
name|String
name|diagnose
parameter_list|,
name|String
name|type
parameter_list|,
name|NodeId
name|nId
parameter_list|,
name|String
name|allocationRequestId
parameter_list|)
block|{
name|ActivityNode
name|container
init|=
operator|new
name|ActivityNode
argument_list|(
name|containerId
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|,
name|state
argument_list|,
name|diagnose
argument_list|,
name|type
argument_list|,
name|nId
argument_list|,
name|allocationRequestId
argument_list|)
decl_stmt|;
name|this
operator|.
name|allocationAttempts
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|ActivityState
operator|.
name|REJECTED
condition|)
block|{
name|this
operator|.
name|appState
operator|=
name|ActivityState
operator|.
name|SKIPPED
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|appState
operator|=
name|state
expr_stmt|;
block|}
block|}
DECL|method|getNodeId ()
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
operator|==
literal|null
condition|?
literal|null
else|:
name|nodeId
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
DECL|method|getAppState ()
specifier|public
name|ActivityState
name|getAppState
parameter_list|()
block|{
return|return
name|appState
return|;
block|}
DECL|method|getPriority ()
specifier|public
name|String
name|getPriority
parameter_list|()
block|{
if|if
condition|(
name|priority
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|priority
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getContainerId ()
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
if|if
condition|(
name|containerId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|containerId
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDiagnostic ()
specifier|public
name|String
name|getDiagnostic
parameter_list|()
block|{
return|return
name|diagnostic
return|;
block|}
DECL|method|getTime ()
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
DECL|method|getAllocationAttempts ()
specifier|public
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|getAllocationAttempts
parameter_list|()
block|{
return|return
name|allocationAttempts
return|;
block|}
block|}
end_class

end_unit

