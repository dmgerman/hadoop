begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|pajoin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RMHAUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_comment
comment|/**  * The RM webapp  */
end_comment

begin_class
DECL|class|RMWebApp
specifier|public
class|class
name|RMWebApp
extends|extends
name|WebApp
implements|implements
name|YarnWebParams
block|{
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|standby
specifier|private
name|boolean
name|standby
init|=
literal|false
decl_stmt|;
DECL|method|RMWebApp (ResourceManager rm)
specifier|public
name|RMWebApp
parameter_list|(
name|ResourceManager
name|rm
parameter_list|)
block|{
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebApp
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
name|route
argument_list|(
literal|"/"
argument_list|,
name|RmController
operator|.
name|class
argument_list|)
expr_stmt|;
name|route
argument_list|(
name|pajoin
argument_list|(
literal|"/nodes"
argument_list|,
name|NODE_STATE
argument_list|)
argument_list|,
name|RmController
operator|.
name|class
argument_list|,
literal|"nodes"
argument_list|)
expr_stmt|;
name|route
argument_list|(
name|pajoin
argument_list|(
literal|"/apps"
argument_list|,
name|APP_STATE
argument_list|)
argument_list|,
name|RmController
operator|.
name|class
argument_list|)
expr_stmt|;
name|route
argument_list|(
literal|"/cluster"
argument_list|,
name|RmController
operator|.
name|class
argument_list|,
literal|"about"
argument_list|)
expr_stmt|;
name|route
argument_list|(
name|pajoin
argument_list|(
literal|"/app"
argument_list|,
name|APPLICATION_ID
argument_list|)
argument_list|,
name|RmController
operator|.
name|class
argument_list|,
literal|"app"
argument_list|)
expr_stmt|;
name|route
argument_list|(
literal|"/scheduler"
argument_list|,
name|RmController
operator|.
name|class
argument_list|,
literal|"scheduler"
argument_list|)
expr_stmt|;
name|route
argument_list|(
name|pajoin
argument_list|(
literal|"/queue"
argument_list|,
name|QUEUE_NAME
argument_list|)
argument_list|,
name|RmController
operator|.
name|class
argument_list|,
literal|"queue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWebAppFilterClass ()
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|GuiceContainer
argument_list|>
name|getWebAppFilterClass
parameter_list|()
block|{
return|return
name|RMWebAppFilter
operator|.
name|class
return|;
block|}
DECL|method|checkIfStandbyRM ()
specifier|public
name|void
name|checkIfStandbyRM
parameter_list|()
block|{
name|standby
operator|=
operator|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
operator|)
expr_stmt|;
block|}
DECL|method|isStandby ()
specifier|public
name|boolean
name|isStandby
parameter_list|()
block|{
return|return
name|standby
return|;
block|}
annotation|@
name|Override
DECL|method|getRedirectPath ()
specifier|public
name|String
name|getRedirectPath
parameter_list|()
block|{
if|if
condition|(
name|standby
condition|)
block|{
return|return
name|buildRedirectPath
argument_list|()
return|;
block|}
else|else
return|return
name|super
operator|.
name|getRedirectPath
argument_list|()
return|;
block|}
DECL|method|buildRedirectPath ()
specifier|private
name|String
name|buildRedirectPath
parameter_list|()
block|{
comment|// make a copy of the original configuration so not to mutate it. Also use
comment|// an YarnConfiguration to force loading of yarn-site.xml.
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|rm
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|activeRMHAId
init|=
name|RMHAUtils
operator|.
name|findActiveRMHAId
argument_list|(
name|yarnConf
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|activeRMHAId
operator|!=
literal|null
condition|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|activeRMHAId
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|sock
init|=
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|yarnConf
argument_list|)
condition|?
name|yarnConf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_PORT
argument_list|)
else|:
name|yarnConf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_PORT
argument_list|)
decl_stmt|;
name|path
operator|=
name|sock
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|sock
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|yarnConf
argument_list|)
condition|?
literal|"https://"
operator|+
name|path
else|:
literal|"http://"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

