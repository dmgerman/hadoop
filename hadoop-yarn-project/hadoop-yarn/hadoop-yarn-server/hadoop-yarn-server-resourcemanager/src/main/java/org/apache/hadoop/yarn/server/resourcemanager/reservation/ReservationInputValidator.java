begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|ReservationInputValidator
specifier|public
class|class
name|ReservationInputValidator
block|{
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
comment|/**    * Utility class to validate reservation requests.    */
DECL|method|ReservationInputValidator (Clock clock)
specifier|public
name|ReservationInputValidator
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
DECL|method|validateReservation (ReservationSystem reservationSystem, ReservationId reservationId, String auditConstant)
specifier|private
name|Plan
name|validateReservation
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|auditConstant
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// check if the reservation id is valid
if|if
condition|(
name|reservationId
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Missing reservation id."
operator|+
literal|" Please try again by specifying a reservation id."
decl_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|String
name|queue
init|=
name|reservationSystem
operator|.
name|getQueueForReservation
argument_list|(
name|reservationId
argument_list|)
decl_stmt|;
name|String
name|nullQueueErrorMessage
init|=
literal|"The specified reservation with ID: "
operator|+
name|reservationId
operator|+
literal|" is unknown. Please try again with a valid reservation."
decl_stmt|;
name|String
name|nullPlanErrorMessage
init|=
literal|"The specified reservation: "
operator|+
name|reservationId
operator|+
literal|" is not associated with any valid plan."
operator|+
literal|" Please try again with a valid reservation."
decl_stmt|;
return|return
name|getPlanFromQueue
argument_list|(
name|reservationSystem
argument_list|,
name|queue
argument_list|,
name|auditConstant
argument_list|,
name|nullQueueErrorMessage
argument_list|,
name|nullPlanErrorMessage
argument_list|)
return|;
block|}
DECL|method|validateReservationDefinition (ReservationId reservationId, ReservationDefinition contract, Plan plan, String auditConstant)
specifier|private
name|void
name|validateReservationDefinition
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|ReservationDefinition
name|contract
parameter_list|,
name|Plan
name|plan
parameter_list|,
name|String
name|auditConstant
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|message
init|=
literal|""
decl_stmt|;
comment|// check if deadline is in the past
if|if
condition|(
name|contract
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"Missing reservation definition."
operator|+
literal|" Please try again by specifying a reservation definition."
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input definition"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|contract
operator|.
name|getDeadline
argument_list|()
operator|<=
name|clock
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"The specified deadline: "
operator|+
name|contract
operator|.
name|getDeadline
argument_list|()
operator|+
literal|" is the past. Please try again with deadline in the future."
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input definition"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// Check if at least one RR has been specified
name|ReservationRequests
name|resReqs
init|=
name|contract
operator|.
name|getReservationRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|resReqs
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"No resources have been specified to reserve."
operator|+
literal|"Please try again by specifying the resources to reserve."
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input definition"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ReservationRequest
argument_list|>
name|resReq
init|=
name|resReqs
operator|.
name|getReservationResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resReq
operator|==
literal|null
operator|||
name|resReq
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"No resources have been specified to reserve."
operator|+
literal|" Please try again by specifying the resources to reserve."
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input definition"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// compute minimum duration and max gang size
name|long
name|minDuration
init|=
literal|0
decl_stmt|;
name|Resource
name|maxGangSize
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ReservationRequestInterpreter
name|type
init|=
name|contract
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getInterpreter
argument_list|()
decl_stmt|;
for|for
control|(
name|ReservationRequest
name|rr
range|:
name|resReq
control|)
block|{
if|if
condition|(
name|type
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ALL
operator|||
name|type
operator|==
name|ReservationRequestInterpreter
operator|.
name|R_ANY
condition|)
block|{
name|minDuration
operator|=
name|Math
operator|.
name|max
argument_list|(
name|minDuration
argument_list|,
name|rr
operator|.
name|getDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minDuration
operator|+=
name|rr
operator|.
name|getDuration
argument_list|()
expr_stmt|;
block|}
name|maxGangSize
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|,
name|maxGangSize
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getConcurrency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify the allocation is possible (skip for ANY)
if|if
condition|(
name|contract
operator|.
name|getDeadline
argument_list|()
operator|-
name|contract
operator|.
name|getArrival
argument_list|()
operator|<
name|minDuration
operator|&&
name|type
operator|!=
name|ReservationRequestInterpreter
operator|.
name|R_ANY
condition|)
block|{
name|message
operator|=
literal|"The time difference ("
operator|+
operator|(
name|contract
operator|.
name|getDeadline
argument_list|()
operator|-
name|contract
operator|.
name|getArrival
argument_list|()
operator|)
operator|+
literal|") between arrival ("
operator|+
name|contract
operator|.
name|getArrival
argument_list|()
operator|+
literal|") "
operator|+
literal|"and deadline ("
operator|+
name|contract
operator|.
name|getDeadline
argument_list|()
operator|+
literal|") must "
operator|+
literal|" be greater or equal to the minimum resource duration ("
operator|+
name|minDuration
operator|+
literal|")"
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input definition"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// check that the largest gang does not exceed the inventory available
comment|// capacity (skip for ANY)
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|,
name|maxGangSize
argument_list|,
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|)
operator|&&
name|type
operator|!=
name|ReservationRequestInterpreter
operator|.
name|R_ANY
condition|)
block|{
name|message
operator|=
literal|"The size of the largest gang in the reservation refinition ("
operator|+
name|maxGangSize
operator|+
literal|") exceed the capacity available ("
operator|+
name|plan
operator|.
name|getTotalCapacity
argument_list|()
operator|+
literal|" )"
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input definition"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
DECL|method|getPlanFromQueue (ReservationSystem reservationSystem, String queue, String auditConstant)
specifier|private
name|Plan
name|getPlanFromQueue
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|auditConstant
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|nullQueueErrorMessage
init|=
literal|"The queue is not specified."
operator|+
literal|" Please try again with a valid reservable queue."
decl_stmt|;
name|String
name|nullPlanErrorMessage
init|=
literal|"The specified queue: "
operator|+
name|queue
operator|+
literal|" is not managed by reservation system."
operator|+
literal|" Please try again with a valid reservable queue."
decl_stmt|;
return|return
name|getPlanFromQueue
argument_list|(
name|reservationSystem
argument_list|,
name|queue
argument_list|,
name|auditConstant
argument_list|,
name|nullQueueErrorMessage
argument_list|,
name|nullPlanErrorMessage
argument_list|)
return|;
block|}
DECL|method|getPlanFromQueue (ReservationSystem reservationSystem, String queue, String auditConstant, String nullQueueErrorMessage, String nullPlanErrorMessage)
specifier|private
name|Plan
name|getPlanFromQueue
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|auditConstant
parameter_list|,
name|String
name|nullQueueErrorMessage
parameter_list|,
name|String
name|nullPlanErrorMessage
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|queue
operator|==
literal|null
operator|||
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|nullQueueErrorMessage
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|nullQueueErrorMessage
argument_list|)
throw|;
block|}
comment|// check if the associated plan is valid
name|Plan
name|plan
init|=
name|reservationSystem
operator|.
name|getPlan
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|auditConstant
argument_list|,
literal|"validate reservation input"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|nullPlanErrorMessage
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|nullPlanErrorMessage
argument_list|)
throw|;
block|}
return|return
name|plan
return|;
block|}
comment|/**    * Quick validation on the input to check some obvious fail conditions (fail    * fast) the input and returns the appropriate {@link Plan} associated with    * the specified {@link Queue} or throws an exception message illustrating the    * details of any validation check failures    *     * @param reservationSystem the {@link ReservationSystem} to validate against    * @param request the {@link ReservationSubmissionRequest} defining the    *          resources required over time for the request    * @param reservationId the {@link ReservationId} associated with the current    *          request    * @return the {@link Plan} to submit the request to    * @throws YarnException    */
DECL|method|validateReservationSubmissionRequest ( ReservationSystem reservationSystem, ReservationSubmissionRequest request, ReservationId reservationId)
specifier|public
name|Plan
name|validateReservationSubmissionRequest
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|ReservationSubmissionRequest
name|request
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|message
decl_stmt|;
if|if
condition|(
name|reservationId
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"Reservation id cannot be null. Please try again "
operator|+
literal|"specifying a valid reservation id by creating a new reservation id."
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// Check if it is a managed queue
name|String
name|queue
init|=
name|request
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|Plan
name|plan
init|=
name|getPlanFromQueue
argument_list|(
name|reservationSystem
argument_list|,
name|queue
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_RESERVATION_REQUEST
argument_list|)
decl_stmt|;
name|validateReservationDefinition
argument_list|(
name|reservationId
argument_list|,
name|request
operator|.
name|getReservationDefinition
argument_list|()
argument_list|,
name|plan
argument_list|,
name|AuditConstants
operator|.
name|SUBMIT_RESERVATION_REQUEST
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
comment|/**    * Quick validation on the input to check some obvious fail conditions (fail    * fast) the input and returns the appropriate {@link Plan} associated with    * the specified {@link Queue} or throws an exception message illustrating the    * details of any validation check failures    *     * @param reservationSystem the {@link ReservationSystem} to validate against    * @param request the {@link ReservationUpdateRequest} defining the resources    *          required over time for the request    * @return the {@link Plan} to submit the request to    * @throws YarnException    */
DECL|method|validateReservationUpdateRequest ( ReservationSystem reservationSystem, ReservationUpdateRequest request)
specifier|public
name|Plan
name|validateReservationUpdateRequest
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|ReservationUpdateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|ReservationId
name|reservationId
init|=
name|request
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|Plan
name|plan
init|=
name|validateReservation
argument_list|(
name|reservationSystem
argument_list|,
name|reservationId
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|)
decl_stmt|;
name|validateReservationDefinition
argument_list|(
name|reservationId
argument_list|,
name|request
operator|.
name|getReservationDefinition
argument_list|()
argument_list|,
name|plan
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_RESERVATION_REQUEST
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
comment|/**    * Quick validation on the input to check some obvious fail conditions (fail    * fast) the input and returns the appropriate {@link Plan} associated with    * the specified {@link Queue} or throws an exception message illustrating the    * details of any validation check failures.    *    * @param reservationSystem the {@link ReservationSystem} to validate against    * @param request the {@link ReservationListRequest} defining search    *                parameters for reservations in the {@link ReservationSystem}    *                that is being validated against.    * @return the {@link Plan} to list reservations of.    * @throws YarnException    */
DECL|method|validateReservationListRequest ( ReservationSystem reservationSystem, ReservationListRequest request)
specifier|public
name|Plan
name|validateReservationListRequest
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|ReservationListRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|queue
init|=
name|request
operator|.
name|getQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getEndTime
argument_list|()
operator|<
name|request
operator|.
name|getStartTime
argument_list|()
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"The specified end time must be greater than "
operator|+
literal|"the specified start time."
decl_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|AuditConstants
operator|.
name|LIST_RESERVATION_REQUEST
argument_list|,
literal|"validate list reservation input"
argument_list|,
literal|"ClientRMService"
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|// Check if it is a managed queue
return|return
name|getPlanFromQueue
argument_list|(
name|reservationSystem
argument_list|,
name|queue
argument_list|,
name|AuditConstants
operator|.
name|LIST_RESERVATION_REQUEST
argument_list|)
return|;
block|}
comment|/**    * Quick validation on the input to check some obvious fail conditions (fail    * fast) the input and returns the appropriate {@link Plan} associated with    * the specified {@link Queue} or throws an exception message illustrating the    * details of any validation check failures    *     * @param reservationSystem the {@link ReservationSystem} to validate against    * @param request the {@link ReservationDeleteRequest} defining the resources    *          required over time for the request    * @return the {@link Plan} to submit the request to    * @throws YarnException    */
DECL|method|validateReservationDeleteRequest ( ReservationSystem reservationSystem, ReservationDeleteRequest request)
specifier|public
name|Plan
name|validateReservationDeleteRequest
parameter_list|(
name|ReservationSystem
name|reservationSystem
parameter_list|,
name|ReservationDeleteRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
return|return
name|validateReservation
argument_list|(
name|reservationSystem
argument_list|,
name|request
operator|.
name|getReservationId
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|DELETE_RESERVATION_REQUEST
argument_list|)
return|;
block|}
block|}
end_class

end_unit

