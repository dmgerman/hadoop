begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_comment
comment|/**  * Encapsulates Queue entitlement and state updates needed  * for adjusting capacity dynamically  *  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|QueueManagementChange
specifier|public
specifier|abstract
class|class
name|QueueManagementChange
block|{
DECL|field|queue
specifier|private
specifier|final
name|CSQueue
name|queue
decl_stmt|;
comment|/**    * Updating the queue may involve entitlement updates    * and/or QueueState changes    *    * QueueAction can potentially be enhanced    * for adding, removing queues for queue management    */
DECL|enum|QueueAction
specifier|public
enum|enum
name|QueueAction
block|{
DECL|enumConstant|UPDATE_QUEUE
name|UPDATE_QUEUE
block|}
specifier|private
name|AutoCreatedLeafQueueConfig
DECL|field|queueTemplateUpdate
name|queueTemplateUpdate
decl_stmt|;
DECL|field|queueAction
specifier|private
specifier|final
name|QueueAction
name|queueAction
decl_stmt|;
comment|/**    * Updated Queue state with the new entitlement    */
DECL|field|transitionToQueueState
specifier|private
name|QueueState
name|transitionToQueueState
decl_stmt|;
DECL|method|QueueManagementChange (final CSQueue queue, final QueueAction queueAction)
specifier|public
name|QueueManagementChange
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|QueueAction
name|queueAction
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|queueAction
operator|=
name|queueAction
expr_stmt|;
block|}
DECL|method|QueueManagementChange (final CSQueue queue, final QueueAction queueAction, QueueState targetQueueState, final AutoCreatedLeafQueueConfig queueTemplateUpdates)
specifier|public
name|QueueManagementChange
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|QueueAction
name|queueAction
parameter_list|,
name|QueueState
name|targetQueueState
parameter_list|,
specifier|final
name|AutoCreatedLeafQueueConfig
name|queueTemplateUpdates
parameter_list|)
block|{
name|this
argument_list|(
name|queue
argument_list|,
name|queueAction
argument_list|,
name|queueTemplateUpdates
argument_list|)
expr_stmt|;
name|this
operator|.
name|transitionToQueueState
operator|=
name|targetQueueState
expr_stmt|;
block|}
DECL|method|QueueManagementChange (final CSQueue queue, final QueueAction queueAction, final AutoCreatedLeafQueueConfig queueTemplateUpdates)
specifier|public
name|QueueManagementChange
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|QueueAction
name|queueAction
parameter_list|,
specifier|final
name|AutoCreatedLeafQueueConfig
name|queueTemplateUpdates
parameter_list|)
block|{
name|this
argument_list|(
name|queue
argument_list|,
name|queueAction
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueTemplateUpdate
operator|=
name|queueTemplateUpdates
expr_stmt|;
block|}
DECL|method|getTransitionToQueueState ()
specifier|public
name|QueueState
name|getTransitionToQueueState
parameter_list|()
block|{
return|return
name|transitionToQueueState
return|;
block|}
DECL|method|getQueue ()
specifier|public
name|CSQueue
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
DECL|method|getUpdatedQueueTemplate ()
specifier|public
name|AutoCreatedLeafQueueConfig
name|getUpdatedQueueTemplate
parameter_list|()
block|{
return|return
name|queueTemplateUpdate
return|;
block|}
DECL|method|getQueueAction ()
specifier|public
name|QueueAction
name|getQueueAction
parameter_list|()
block|{
return|return
name|queueAction
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|QueueManagementChange
operator|)
condition|)
return|return
literal|false
return|;
name|QueueManagementChange
name|that
init|=
operator|(
name|QueueManagementChange
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|?
operator|!
name|queue
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queue
argument_list|)
else|:
name|that
operator|.
name|queue
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|queueTemplateUpdate
operator|!=
literal|null
condition|?
operator|!
name|queueTemplateUpdate
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queueTemplateUpdate
argument_list|)
else|:
name|that
operator|.
name|queueTemplateUpdate
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|queueAction
operator|!=
name|that
operator|.
name|queueAction
condition|)
return|return
literal|false
return|;
return|return
name|transitionToQueueState
operator|==
name|that
operator|.
name|transitionToQueueState
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|queue
operator|!=
literal|null
condition|?
name|queue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|queueTemplateUpdate
operator|!=
literal|null
condition|?
name|queueTemplateUpdate
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|queueAction
operator|!=
literal|null
condition|?
name|queueAction
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|transitionToQueueState
operator|!=
literal|null
condition|?
name|transitionToQueueState
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"QueueManagementChange{"
operator|+
literal|"queue="
operator|+
name|queue
operator|+
literal|", updatedEntitlementsByPartition="
operator|+
name|queueTemplateUpdate
operator|+
literal|", queueAction="
operator|+
name|queueAction
operator|+
literal|", transitionToQueueState="
operator|+
name|transitionToQueueState
operator|+
literal|'}'
return|;
block|}
DECL|class|UpdateQueue
specifier|public
specifier|static
class|class
name|UpdateQueue
extends|extends
name|QueueManagementChange
block|{
DECL|method|UpdateQueue (final CSQueue queue, QueueState targetQueueState, final AutoCreatedLeafQueueConfig queueTemplateUpdate)
specifier|public
name|UpdateQueue
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
name|QueueState
name|targetQueueState
parameter_list|,
specifier|final
name|AutoCreatedLeafQueueConfig
name|queueTemplateUpdate
parameter_list|)
block|{
name|super
argument_list|(
name|queue
argument_list|,
name|QueueAction
operator|.
name|UPDATE_QUEUE
argument_list|,
name|targetQueueState
argument_list|,
name|queueTemplateUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|UpdateQueue (final CSQueue queue, final AutoCreatedLeafQueueConfig queueTemplateUpdate)
specifier|public
name|UpdateQueue
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|AutoCreatedLeafQueueConfig
name|queueTemplateUpdate
parameter_list|)
block|{
name|super
argument_list|(
name|queue
argument_list|,
name|QueueAction
operator|.
name|UPDATE_QUEUE
argument_list|,
name|queueTemplateUpdate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

