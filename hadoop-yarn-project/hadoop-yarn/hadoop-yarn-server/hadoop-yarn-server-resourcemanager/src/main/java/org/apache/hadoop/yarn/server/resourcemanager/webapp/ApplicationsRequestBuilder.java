begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|WebServices
operator|.
name|parseQueries
import|;
end_import

begin_class
DECL|class|ApplicationsRequestBuilder
specifier|public
class|class
name|ApplicationsRequestBuilder
block|{
DECL|field|statesQuery
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|users
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|queues
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|limit
specifier|private
name|String
name|limit
init|=
literal|null
decl_stmt|;
DECL|field|limitNumber
specifier|private
name|Long
name|limitNumber
decl_stmt|;
comment|// set values suitable in case both of begin/end not specified
DECL|field|startedTimeBegin
specifier|private
name|long
name|startedTimeBegin
init|=
literal|0
decl_stmt|;
DECL|field|startedTimeEnd
specifier|private
name|long
name|startedTimeEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|finishTimeBegin
specifier|private
name|long
name|finishTimeBegin
init|=
literal|0
decl_stmt|;
DECL|field|finishTimeEnd
specifier|private
name|long
name|finishTimeEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|appTypes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|appTags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
DECL|method|ApplicationsRequestBuilder ()
specifier|private
name|ApplicationsRequestBuilder
parameter_list|()
block|{   }
DECL|method|create ()
specifier|public
specifier|static
name|ApplicationsRequestBuilder
name|create
parameter_list|()
block|{
return|return
operator|new
name|ApplicationsRequestBuilder
argument_list|()
return|;
block|}
DECL|method|withStateQuery (String stateQuery)
specifier|public
name|ApplicationsRequestBuilder
name|withStateQuery
parameter_list|(
name|String
name|stateQuery
parameter_list|)
block|{
comment|// stateQuery is deprecated.
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|statesQuery
operator|.
name|add
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withStatesQuery ( Set<String> statesQuery)
specifier|public
name|ApplicationsRequestBuilder
name|withStatesQuery
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|)
block|{
if|if
condition|(
name|statesQuery
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|statesQuery
operator|.
name|addAll
argument_list|(
name|statesQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withUserQuery (String userQuery)
specifier|public
name|ApplicationsRequestBuilder
name|withUserQuery
parameter_list|(
name|String
name|userQuery
parameter_list|)
block|{
if|if
condition|(
name|userQuery
operator|!=
literal|null
operator|&&
operator|!
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|users
operator|.
name|add
argument_list|(
name|userQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withQueueQuery (ResourceManager rm, String queueQuery)
specifier|public
name|ApplicationsRequestBuilder
name|withQueueQuery
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|String
name|queueQuery
parameter_list|)
block|{
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
if|if
condition|(
name|queueQuery
operator|!=
literal|null
operator|&&
operator|!
name|queueQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queues
operator|.
name|add
argument_list|(
name|queueQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withLimit (String limit)
specifier|public
name|ApplicationsRequestBuilder
name|withLimit
parameter_list|(
name|String
name|limit
parameter_list|)
block|{
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
operator|!
name|limit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withStartedTimeBegin ( String startedBegin)
specifier|public
name|ApplicationsRequestBuilder
name|withStartedTimeBegin
parameter_list|(
name|String
name|startedBegin
parameter_list|)
block|{
if|if
condition|(
name|startedBegin
operator|!=
literal|null
operator|&&
operator|!
name|startedBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|startedTimeBegin
operator|=
name|parseLongValue
argument_list|(
name|startedBegin
argument_list|,
literal|"startedTimeBegin"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withStartedTimeEnd (String startedEnd)
specifier|public
name|ApplicationsRequestBuilder
name|withStartedTimeEnd
parameter_list|(
name|String
name|startedEnd
parameter_list|)
block|{
if|if
condition|(
name|startedEnd
operator|!=
literal|null
operator|&&
operator|!
name|startedEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|startedTimeEnd
operator|=
name|parseLongValue
argument_list|(
name|startedEnd
argument_list|,
literal|"startedTimeEnd"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withFinishTimeBegin (String finishBegin)
specifier|public
name|ApplicationsRequestBuilder
name|withFinishTimeBegin
parameter_list|(
name|String
name|finishBegin
parameter_list|)
block|{
if|if
condition|(
name|finishBegin
operator|!=
literal|null
operator|&&
operator|!
name|finishBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finishTimeBegin
operator|=
name|parseLongValue
argument_list|(
name|finishBegin
argument_list|,
literal|"finishedTimeBegin"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withFinishTimeEnd (String finishEnd)
specifier|public
name|ApplicationsRequestBuilder
name|withFinishTimeEnd
parameter_list|(
name|String
name|finishEnd
parameter_list|)
block|{
if|if
condition|(
name|finishEnd
operator|!=
literal|null
operator|&&
operator|!
name|finishEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finishTimeEnd
operator|=
name|parseLongValue
argument_list|(
name|finishEnd
argument_list|,
literal|"finishedTimeEnd"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withApplicationTypes ( Set<String> applicationTypes)
specifier|public
name|ApplicationsRequestBuilder
name|withApplicationTypes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|)
block|{
if|if
condition|(
name|applicationTypes
operator|!=
literal|null
condition|)
block|{
name|appTypes
operator|=
name|parseQueries
argument_list|(
name|applicationTypes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withApplicationTags ( Set<String> applicationTags)
specifier|public
name|ApplicationsRequestBuilder
name|withApplicationTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|)
block|{
if|if
condition|(
name|applicationTags
operator|!=
literal|null
condition|)
block|{
name|appTags
operator|=
name|parseQueries
argument_list|(
name|applicationTags
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|validate ()
specifier|private
name|void
name|validate
parameter_list|()
block|{
name|queues
operator|.
name|forEach
argument_list|(
name|q
lambda|->
name|validateQueueExists
argument_list|(
name|rm
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|validateLimit
argument_list|()
expr_stmt|;
name|validateStartTime
argument_list|()
expr_stmt|;
name|validateFinishTime
argument_list|()
expr_stmt|;
block|}
DECL|method|validateQueueExists (ResourceManager rm, String queueQuery)
specifier|private
name|void
name|validateQueueExists
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|String
name|queueQuery
parameter_list|)
block|{
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
try|try
block|{
name|cs
operator|.
name|getQueueInfo
argument_list|(
name|queueQuery
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|validateLimit ()
specifier|private
name|void
name|validateLimit
parameter_list|()
block|{
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|limitNumber
operator|=
name|parseLongValue
argument_list|(
name|limit
argument_list|,
literal|"limit"
argument_list|)
expr_stmt|;
if|if
condition|(
name|limitNumber
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"limit value must be greater then 0"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|parseLongValue (String strValue, String queryName)
specifier|private
name|long
name|parseLongValue
parameter_list|(
name|String
name|strValue
parameter_list|,
name|String
name|queryName
parameter_list|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|strValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|queryName
operator|+
literal|" value must be a number!"
argument_list|)
throw|;
block|}
block|}
DECL|method|validateStartTime ()
specifier|private
name|void
name|validateStartTime
parameter_list|()
block|{
if|if
condition|(
name|startedTimeBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|startedTimeEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|startedTimeBegin
operator|>
name|startedTimeEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than startTimeBegin"
argument_list|)
throw|;
block|}
block|}
DECL|method|validateFinishTime ()
specifier|private
name|void
name|validateFinishTime
parameter_list|()
block|{
if|if
condition|(
name|finishTimeBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishTimeEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishTimeBegin
operator|>
name|finishTimeEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than finishTimeBegin"
argument_list|)
throw|;
block|}
block|}
DECL|method|build ()
specifier|public
name|GetApplicationsRequest
name|build
parameter_list|()
block|{
name|validate
argument_list|()
expr_stmt|;
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appStates
init|=
name|parseQueries
argument_list|(
name|statesQuery
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setApplicationStates
argument_list|(
name|appStates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|users
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setUsers
argument_list|(
name|users
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limitNumber
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setLimit
argument_list|(
name|limitNumber
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setStartRange
argument_list|(
name|startedTimeBegin
argument_list|,
name|startedTimeEnd
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFinishRange
argument_list|(
name|finishTimeBegin
argument_list|,
name|finishTimeEnd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setApplicationTypes
argument_list|(
name|appTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setApplicationTags
argument_list|(
name|appTags
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
block|}
end_class

end_unit

