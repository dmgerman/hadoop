begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * Helper library that:  * - tracks the state of all cluster {@link SchedulerNode}s  * - provides convenience methods to filter and sort nodes  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClusterNodeTracker
specifier|public
class|class
name|ClusterNodeTracker
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClusterNodeTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|readWriteLock
specifier|private
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|nodes
specifier|private
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nodeNameToNodeMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|N
argument_list|>
name|nodeNameToNodeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nodesPerRack
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|N
argument_list|>
argument_list|>
name|nodesPerRack
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nodesPerLabel
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|N
argument_list|>
argument_list|>
name|nodesPerLabel
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|clusterCapacity
specifier|private
name|Resource
name|clusterCapacity
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|staleClusterCapacity
specifier|private
specifier|volatile
name|Resource
name|staleClusterCapacity
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
decl_stmt|;
comment|// Max allocation
DECL|field|maxAllocation
specifier|private
specifier|final
name|long
index|[]
name|maxAllocation
decl_stmt|;
DECL|field|configuredMaxAllocation
specifier|private
name|Resource
name|configuredMaxAllocation
decl_stmt|;
DECL|field|forceConfiguredMaxAllocation
specifier|private
name|boolean
name|forceConfiguredMaxAllocation
init|=
literal|true
decl_stmt|;
DECL|field|configuredMaxAllocationWaitTime
specifier|private
name|long
name|configuredMaxAllocationWaitTime
decl_stmt|;
DECL|field|reportedMaxAllocation
specifier|private
name|boolean
name|reportedMaxAllocation
init|=
literal|false
decl_stmt|;
DECL|method|ClusterNodeTracker ()
specifier|public
name|ClusterNodeTracker
parameter_list|()
block|{
name|maxAllocation
operator|=
operator|new
name|long
index|[
name|ResourceUtils
operator|.
name|getNumberOfCountableResourceTypes
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|maxAllocation
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|addNode (N node)
specifier|public
name|void
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|nodeNameToNodeMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|N
argument_list|>
name|nodesPerLabels
init|=
name|nodesPerLabel
operator|.
name|get
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesPerLabels
operator|==
literal|null
condition|)
block|{
name|nodesPerLabels
operator|=
operator|new
name|ArrayList
argument_list|<
name|N
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|nodesPerLabels
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// Update new set of nodes for given partition.
name|nodesPerLabel
operator|.
name|put
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|nodesPerLabels
argument_list|)
expr_stmt|;
comment|// Update nodes per rack as well
name|String
name|rackName
init|=
name|node
operator|.
name|getRackName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|N
argument_list|>
name|nodesList
init|=
name|nodesPerRack
operator|.
name|get
argument_list|(
name|rackName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesList
operator|==
literal|null
condition|)
block|{
name|nodesList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|nodesPerRack
operator|.
name|put
argument_list|(
name|rackName
argument_list|,
name|nodesList
argument_list|)
expr_stmt|;
block|}
name|nodesList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// Update cluster capacity
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterCapacity
argument_list|,
name|node
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
name|staleClusterCapacity
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|clusterCapacity
argument_list|)
expr_stmt|;
comment|// Update maximumAllocation
name|updateMaxResources
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|exists (NodeId nodeId)
specifier|public
name|boolean
name|exists
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nodes
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNode (NodeId nodeId)
specifier|public
name|N
name|getNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|N
name|n
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|n
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerNodeReport
argument_list|(
name|n
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|nodeCount ()
specifier|public
name|int
name|nodeCount
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|nodeCount (String rackName)
specifier|public
name|int
name|nodeCount
parameter_list|(
name|String
name|rackName
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|rName
init|=
name|rackName
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|rackName
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|N
argument_list|>
name|nodesList
init|=
name|nodesPerRack
operator|.
name|get
argument_list|(
name|rName
argument_list|)
decl_stmt|;
return|return
name|nodesList
operator|==
literal|null
condition|?
literal|0
else|:
name|nodesList
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getClusterCapacity ()
specifier|public
name|Resource
name|getClusterCapacity
parameter_list|()
block|{
return|return
name|staleClusterCapacity
return|;
block|}
DECL|method|removeNode (NodeId nodeId)
specifier|public
name|N
name|removeNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|N
name|node
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempting to remove a non-existent node "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|nodeNameToNodeMap
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update nodes per rack as well
name|String
name|rackName
init|=
name|node
operator|.
name|getRackName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|N
argument_list|>
name|nodesList
init|=
name|nodesPerRack
operator|.
name|get
argument_list|(
name|rackName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesList
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Attempting to remove node from an empty rack "
operator|+
name|rackName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesList
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesPerRack
operator|.
name|remove
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|N
argument_list|>
name|nodesPerPartition
init|=
name|nodesPerLabel
operator|.
name|get
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|)
decl_stmt|;
name|nodesPerPartition
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// Update new set of nodes for given partition.
if|if
condition|(
name|nodesPerPartition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesPerLabel
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesPerLabel
operator|.
name|put
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|nodesPerPartition
argument_list|)
expr_stmt|;
block|}
comment|// Update cluster capacity
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|clusterCapacity
argument_list|,
name|node
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
name|staleClusterCapacity
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|clusterCapacity
argument_list|)
expr_stmt|;
comment|// Update maximumAllocation
name|updateMaxResources
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setConfiguredMaxAllocation (Resource resource)
specifier|public
name|void
name|setConfiguredMaxAllocation
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|configuredMaxAllocation
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setConfiguredMaxAllocationWaitTime ( long configuredMaxAllocationWaitTime)
specifier|public
name|void
name|setConfiguredMaxAllocationWaitTime
parameter_list|(
name|long
name|configuredMaxAllocationWaitTime
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|configuredMaxAllocationWaitTime
operator|=
name|configuredMaxAllocationWaitTime
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMaxAllowedAllocation ()
specifier|public
name|Resource
name|getMaxAllowedAllocation
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|forceConfiguredMaxAllocation
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
operator|>
name|configuredMaxAllocationWaitTime
condition|)
block|{
name|forceConfiguredMaxAllocation
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|forceConfiguredMaxAllocation
operator|||
operator|!
name|reportedMaxAllocation
condition|)
block|{
return|return
name|configuredMaxAllocation
return|;
block|}
name|Resource
name|ret
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|configuredMaxAllocation
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAllocation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|info
init|=
name|ret
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getValue
argument_list|()
operator|>
name|maxAllocation
index|[
name|i
index|]
condition|)
block|{
name|info
operator|.
name|setValue
argument_list|(
name|maxAllocation
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|setForceConfiguredMaxAllocation (boolean flag)
specifier|public
name|void
name|setForceConfiguredMaxAllocation
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|forceConfiguredMaxAllocation
operator|=
name|flag
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMaxResources (SchedulerNode node, boolean add)
specifier|private
name|void
name|updateMaxResources
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|Resource
name|totalResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
name|ResourceInformation
index|[]
name|totalResources
decl_stmt|;
if|if
condition|(
name|totalResource
operator|!=
literal|null
condition|)
block|{
name|totalResources
operator|=
name|totalResource
operator|.
name|getResources
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" reported in with null resources, which "
operator|+
literal|"indicates a problem in the source code. Please file an issue at "
operator|+
literal|"https://issues.apache.org/jira/secure/CreateIssue!default.jspa"
argument_list|)
expr_stmt|;
return|return;
block|}
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|add
condition|)
block|{
comment|// added node
comment|// If we add a node, we must have a max allocation for all resource
comment|// types
name|reportedMaxAllocation
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAllocation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|value
init|=
name|totalResources
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|maxAllocation
index|[
name|i
index|]
condition|)
block|{
name|maxAllocation
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// removed node
name|boolean
name|recalculate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAllocation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|totalResources
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
operator|==
name|maxAllocation
index|[
name|i
index|]
condition|)
block|{
comment|// No need to set reportedMaxAllocation to false here because we
comment|// will recalculate before we release the lock.
name|maxAllocation
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|recalculate
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// We only have to iterate through the nodes if the current max memory
comment|// or vcores was equal to the removed node's
if|if
condition|(
name|recalculate
condition|)
block|{
comment|// Treat it like an empty cluster and add nodes
name|reportedMaxAllocation
operator|=
literal|false
expr_stmt|;
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|n
lambda|->
name|updateMaxResources
argument_list|(
name|n
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAllNodes ()
specifier|public
name|List
argument_list|<
name|N
argument_list|>
name|getAllNodes
parameter_list|()
block|{
return|return
name|getNodes
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convenience method to filter nodes based on a condition.    *    * @param nodeFilter A {@link NodeFilter} for filtering the nodes    * @return A list of filtered nodes    */
DECL|method|getNodes (NodeFilter nodeFilter)
specifier|public
name|List
argument_list|<
name|N
argument_list|>
name|getNodes
parameter_list|(
name|NodeFilter
name|nodeFilter
parameter_list|)
block|{
name|List
argument_list|<
name|N
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|nodeFilter
operator|==
literal|null
condition|)
block|{
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|N
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeFilter
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|nodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeList
return|;
block|}
DECL|method|getAllNodeIds ()
specifier|public
name|List
argument_list|<
name|NodeId
argument_list|>
name|getAllNodeIds
parameter_list|()
block|{
return|return
name|getNodeIds
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convenience method to filter nodes based on a condition.    *    * @param nodeFilter A {@link NodeFilter} for filtering the nodes    * @return A list of filtered nodes    */
DECL|method|getNodeIds (NodeFilter nodeFilter)
specifier|public
name|List
argument_list|<
name|NodeId
argument_list|>
name|getNodeIds
parameter_list|(
name|NodeFilter
name|nodeFilter
parameter_list|)
block|{
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|nodeFilter
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|N
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|nodeList
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|N
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeFilter
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|nodeList
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeList
return|;
block|}
comment|/**    * Convenience method to sort nodes.    * Nodes can change while being sorted. Using a standard sort will fail    * without locking each node, the TreeSet handles this without locks.    *    * @param comparator the comparator to sort the nodes with    * @return sorted set of nodes in the form of a TreeSet    */
DECL|method|sortedNodeSet (Comparator<N> comparator)
specifier|public
name|TreeSet
argument_list|<
name|N
argument_list|>
name|sortedNodeSet
parameter_list|(
name|Comparator
argument_list|<
name|N
argument_list|>
name|comparator
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|N
argument_list|>
name|sortedSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|sortedSet
operator|.
name|addAll
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|sortedSet
return|;
block|}
comment|/**    * Convenience method to return list of nodes corresponding to resourceName    * passed in the {@link ResourceRequest}.    *    * @param resourceName Host/rack name of the resource, or    * {@link ResourceRequest#ANY}    * @return list of nodes that match the resourceName    */
DECL|method|getNodesByResourceName (final String resourceName)
specifier|public
name|List
argument_list|<
name|N
argument_list|>
name|getNodesByResourceName
parameter_list|(
specifier|final
name|String
name|resourceName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|resourceName
operator|!=
literal|null
operator|&&
operator|!
name|resourceName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|N
argument_list|>
name|retNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|retNodes
operator|.
name|addAll
argument_list|(
name|getAllNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeNameToNodeMap
operator|.
name|containsKey
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|retNodes
operator|.
name|add
argument_list|(
name|nodeNameToNodeMap
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesPerRack
operator|.
name|containsKey
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|retNodes
operator|.
name|addAll
argument_list|(
name|nodesPerRack
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not find a node matching given resourceName "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
block|}
return|return
name|retNodes
return|;
block|}
comment|/**    * Convenience method to return list of {@link NodeId} corresponding to    * resourceName passed in the {@link ResourceRequest}.    *    * @param resourceName Host/rack name of the resource, or    * {@link ResourceRequest#ANY}    * @return list of {@link NodeId} that match the resourceName    */
DECL|method|getNodeIdsByResourceName (final String resourceName)
specifier|public
name|List
argument_list|<
name|NodeId
argument_list|>
name|getNodeIdsByResourceName
parameter_list|(
specifier|final
name|String
name|resourceName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|resourceName
operator|!=
literal|null
operator|&&
operator|!
name|resourceName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|retNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|retNodes
operator|.
name|addAll
argument_list|(
name|getAllNodeIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeNameToNodeMap
operator|.
name|containsKey
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|retNodes
operator|.
name|add
argument_list|(
name|nodeNameToNodeMap
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesPerRack
operator|.
name|containsKey
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
for|for
control|(
name|N
name|node
range|:
name|nodesPerRack
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
control|)
block|{
name|retNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not find a node matching given resourceName "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
block|}
return|return
name|retNodes
return|;
block|}
comment|/**    * update cached nodes per partition on a node label change event.    * @param partition nodeLabel    * @param nodeIds List of Node IDs    */
DECL|method|updateNodesPerPartition (String partition, Set<NodeId> nodeIds)
specifier|public
name|void
name|updateNodesPerPartition
parameter_list|(
name|String
name|partition
parameter_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Clear all entries.
name|nodesPerLabel
operator|.
name|remove
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|N
argument_list|>
name|nodesPerPartition
init|=
operator|new
name|ArrayList
argument_list|<
name|N
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|nodeIds
control|)
block|{
name|N
name|n
init|=
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|nodesPerPartition
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update new set of nodes for given partition.
name|nodesPerLabel
operator|.
name|put
argument_list|(
name|partition
argument_list|,
name|nodesPerPartition
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNodesPerPartition (String partition)
specifier|public
name|List
argument_list|<
name|N
argument_list|>
name|getNodesPerPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|List
argument_list|<
name|N
argument_list|>
name|nodesPerPartition
init|=
literal|null
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|nodesPerLabel
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|nodesPerPartition
operator|=
operator|new
name|ArrayList
argument_list|<
name|N
argument_list|>
argument_list|(
name|nodesPerLabel
operator|.
name|get
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|nodesPerPartition
return|;
block|}
block|}
end_class

end_unit

