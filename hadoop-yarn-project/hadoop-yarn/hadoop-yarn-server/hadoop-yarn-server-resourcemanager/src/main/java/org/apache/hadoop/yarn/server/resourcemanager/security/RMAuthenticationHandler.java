begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_class
DECL|class|RMAuthenticationHandler
specifier|public
class|class
name|RMAuthenticationHandler
extends|extends
name|KerberosAuthenticationHandler
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"kerberos-dt"
decl_stmt|;
DECL|field|HEADER
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"Hadoop-YARN-Auth-Delegation-Token"
decl_stmt|;
DECL|field|secretManager
specifier|static
name|RMDelegationTokenSecretManager
name|secretManager
decl_stmt|;
DECL|field|secretManagerInitialized
specifier|static
name|boolean
name|secretManagerInitialized
init|=
literal|false
decl_stmt|;
DECL|method|RMAuthenticationHandler ()
specifier|public
name|RMAuthenticationHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns authentication type of the handler.    *     * @return<code>kerberos-dt</code>    */
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Authenticates a request looking for the<code>delegation</code> header and    * verifying it is a valid token. If the header is missing, it delegates the    * authentication to the {@link KerberosAuthenticationHandler} unless it is    * disabled.    *     * @param request    *          the HTTP client request.    * @param response    *          the HTTP client response.    *     * @return the authentication token for the authenticated request.    * @throws IOException    *           thrown if an IO error occurred.    * @throws AuthenticationException    *           thrown if the authentication failed.    */
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
decl_stmt|;
name|String
name|delegationParam
init|=
name|this
operator|.
name|getEncodedDelegationTokenFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegationParam
operator|!=
literal|null
condition|)
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|dt
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
name|dt
operator|.
name|decodeFromUrlString
argument_list|(
name|delegationParam
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|this
operator|.
name|verifyToken
argument_list|(
name|dt
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid token"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|shortName
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|token
operator|=
operator|new
name|AuthenticationToken
argument_list|(
name|shortName
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|super
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
comment|// create a token with auth type set correctly
name|token
operator|=
operator|new
name|AuthenticationToken
argument_list|(
name|token
operator|.
name|getUserName
argument_list|()
argument_list|,
name|token
operator|.
name|getName
argument_list|()
argument_list|,
name|super
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|token
return|;
block|}
comment|/**    * Verifies a delegation token.    *     * @param token    *          delegation token to verify.    * @return the UGI for the token; null if the verification fails    * @throws IOException    *           thrown if the token could not be verified.    */
DECL|method|verifyToken ( Token<RMDelegationTokenIdentifier> token)
specifier|protected
name|UserGroupInformation
name|verifyToken
parameter_list|(
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|secretManagerInitialized
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Secret manager not initialized"
argument_list|)
throw|;
block|}
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|id
init|=
name|secretManager
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
try|try
block|{
name|id
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|verifyToken
argument_list|(
name|id
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|id
operator|.
name|getUser
argument_list|()
return|;
block|}
comment|/**    * Extract encoded delegation token from request    *     * @param req    *          HTTPServletRequest object    *     * @return String containing the encoded token; null if encoded token not    *         found    *     */
DECL|method|getEncodedDelegationTokenFromRequest (HttpServletRequest req)
specifier|protected
name|String
name|getEncodedDelegationTokenFromRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|header
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|HEADER
argument_list|)
decl_stmt|;
return|return
name|header
return|;
block|}
DECL|method|setSecretManager (RMDelegationTokenSecretManager manager)
specifier|public
specifier|static
name|void
name|setSecretManager
parameter_list|(
name|RMDelegationTokenSecretManager
name|manager
parameter_list|)
block|{
name|secretManager
operator|=
name|manager
expr_stmt|;
name|secretManagerInitialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

