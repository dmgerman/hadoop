begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Parses arguments passed to the FS-&gt;CS converter.  * If the arguments are valid, it calls the converter itself.  *  */
end_comment

begin_class
DECL|class|FSConfigToCSConfigArgumentHandler
specifier|public
class|class
name|FSConfigToCSConfigArgumentHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSConfigToCSConfigArgumentHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|converter
specifier|private
specifier|final
name|FSConfigToCSConfigConverter
name|converter
decl_stmt|;
DECL|method|FSConfigToCSConfigArgumentHandler (FSConfigToCSConfigConverter converter)
specifier|public
name|FSConfigToCSConfigArgumentHandler
parameter_list|(
name|FSConfigToCSConfigConverter
name|converter
parameter_list|)
block|{
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
block|}
comment|/**    * Represents options for the converter CLI.    *    */
DECL|enum|CliOption
specifier|public
enum|enum
name|CliOption
block|{
DECL|enumConstant|YARN_SITE
name|YARN_SITE
argument_list|(
literal|"yarn-site.xml"
argument_list|,
literal|"y"
argument_list|,
literal|"yarnsiteconfig"
argument_list|,
literal|"Path to a valid yarn-site.xml config file"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
comment|// fair-scheduler.xml is not mandatory
comment|// if FairSchedulerConfiguration.ALLOCATION_FILE is defined in yarn-site.xml
DECL|enumConstant|FAIR_SCHEDULER
name|FAIR_SCHEDULER
argument_list|(
literal|"fair-scheduler.xml"
argument_list|,
literal|"f"
argument_list|,
literal|"fsconfig"
argument_list|,
literal|"Path to a valid fair-scheduler.xml config file"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|CONVERSION_RULES
name|CONVERSION_RULES
argument_list|(
literal|"conversion rules config file"
argument_list|,
literal|"r"
argument_list|,
literal|"rulesconfig"
argument_list|,
literal|"Optional parameter. If given, should specify a valid path to the "
operator|+
literal|"conversion rules file (property format)."
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|CONSOLE_MODE
name|CONSOLE_MODE
argument_list|(
literal|"console mode"
argument_list|,
literal|"p"
argument_list|,
literal|"print"
argument_list|,
literal|"If defined, the converted configuration will "
operator|+
literal|"only be emitted to the console."
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|CLUSTER_RESOURCE
name|CLUSTER_RESOURCE
argument_list|(
literal|"cluster resource"
argument_list|,
literal|"c"
argument_list|,
literal|"cluster-resource"
argument_list|,
literal|"Needs to be given if maxResources is defined as percentages "
operator|+
literal|"for any queue, otherwise this parameter can be omitted."
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|OUTPUT_DIR
name|OUTPUT_DIR
argument_list|(
literal|"output directory"
argument_list|,
literal|"o"
argument_list|,
literal|"output-directory"
argument_list|,
literal|"Output directory for yarn-site.xml and"
operator|+
literal|" capacity-scheduler.xml files."
operator|+
literal|"Must have write permission for user who is running this script."
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|shortSwitch
specifier|private
specifier|final
name|String
name|shortSwitch
decl_stmt|;
DECL|field|longSwitch
specifier|private
specifier|final
name|String
name|longSwitch
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|field|required
specifier|private
specifier|final
name|boolean
name|required
decl_stmt|;
DECL|field|hasArg
specifier|private
specifier|final
name|boolean
name|hasArg
decl_stmt|;
DECL|method|CliOption (String name, String shortSwitch, String longSwitch, String description, boolean required, boolean hasArg)
name|CliOption
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|shortSwitch
parameter_list|,
name|String
name|longSwitch
parameter_list|,
name|String
name|description
parameter_list|,
name|boolean
name|required
parameter_list|,
name|boolean
name|hasArg
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|shortSwitch
operator|=
name|shortSwitch
expr_stmt|;
name|this
operator|.
name|longSwitch
operator|=
name|longSwitch
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|hasArg
operator|=
name|hasArg
expr_stmt|;
block|}
DECL|method|createCommonsCliOption ()
specifier|public
name|Option
name|createCommonsCliOption
parameter_list|()
block|{
name|Option
name|option
init|=
operator|new
name|Option
argument_list|(
name|shortSwitch
argument_list|,
name|longSwitch
argument_list|,
name|hasArg
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|required
argument_list|)
expr_stmt|;
return|return
name|option
return|;
block|}
DECL|method|getAsArgumentString ()
specifier|public
name|String
name|getAsArgumentString
parameter_list|()
block|{
return|return
name|shortSwitch
operator|+
literal|"|"
operator|+
name|longSwitch
operator|+
literal|": "
operator|+
name|description
return|;
block|}
block|}
DECL|method|parseAndConvert (String[] args)
specifier|public
name|int
name|parseAndConvert
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
name|createOptions
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|cliParser
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|checkOptionPresent
argument_list|(
name|cliParser
argument_list|,
name|CliOption
operator|.
name|YARN_SITE
argument_list|)
expr_stmt|;
name|checkOptionPresent
argument_list|(
name|cliParser
argument_list|,
name|CliOption
operator|.
name|OUTPUT_DIR
argument_list|)
expr_stmt|;
name|FSConfigToCSConfigConverterParams
name|params
init|=
name|validateInputFiles
argument_list|(
name|cliParser
argument_list|)
decl_stmt|;
name|converter
operator|.
name|convert
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Missing argument for options"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logAndStdErr
argument_list|(
name|e
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|PreconditionException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot start FS config conversion due to the following"
operator|+
literal|" precondition error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logAndStdErr
argument_list|(
name|e
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedPropertyException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unsupported property/setting encountered during FS config "
operator|+
literal|"conversion: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logAndStdErr
argument_list|(
name|e
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ConversionException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Fatal error during FS config conversion: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logAndStdErr
argument_list|(
name|e
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|logAndStdErr (Exception e, String msg)
specifier|private
name|void
name|logAndStdErr
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|createOptions ()
specifier|private
name|Options
name|createOptions
parameter_list|()
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
for|for
control|(
name|CliOption
name|cliOption
range|:
name|CliOption
operator|.
name|values
argument_list|()
control|)
block|{
name|opts
operator|.
name|addOption
argument_list|(
name|cliOption
operator|.
name|createCommonsCliOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|opts
return|;
block|}
DECL|method|validateInputFiles ( CommandLine cliParser)
specifier|private
name|FSConfigToCSConfigConverterParams
name|validateInputFiles
parameter_list|(
name|CommandLine
name|cliParser
parameter_list|)
block|{
name|String
name|yarnSiteXmlFile
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|CliOption
operator|.
name|YARN_SITE
operator|.
name|shortSwitch
argument_list|)
decl_stmt|;
name|String
name|fairSchedulerXmlFile
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|CliOption
operator|.
name|FAIR_SCHEDULER
operator|.
name|shortSwitch
argument_list|)
decl_stmt|;
name|String
name|conversionRulesFile
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|CliOption
operator|.
name|CONVERSION_RULES
operator|.
name|shortSwitch
argument_list|)
decl_stmt|;
name|String
name|outputDir
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|CliOption
operator|.
name|OUTPUT_DIR
operator|.
name|shortSwitch
argument_list|)
decl_stmt|;
name|checkFile
argument_list|(
name|CliOption
operator|.
name|YARN_SITE
argument_list|,
name|yarnSiteXmlFile
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|CliOption
operator|.
name|FAIR_SCHEDULER
argument_list|,
name|fairSchedulerXmlFile
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|CliOption
operator|.
name|CONVERSION_RULES
argument_list|,
name|conversionRulesFile
argument_list|)
expr_stmt|;
name|checkDirectory
argument_list|(
name|CliOption
operator|.
name|OUTPUT_DIR
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
return|return
name|FSConfigToCSConfigConverterParams
operator|.
name|Builder
operator|.
name|create
argument_list|()
operator|.
name|withYarnSiteXmlConfig
argument_list|(
name|yarnSiteXmlFile
argument_list|)
operator|.
name|withFairSchedulerXmlConfig
argument_list|(
name|fairSchedulerXmlFile
argument_list|)
operator|.
name|withConversionRulesConfig
argument_list|(
name|conversionRulesFile
argument_list|)
operator|.
name|withClusterResource
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|CliOption
operator|.
name|CLUSTER_RESOURCE
operator|.
name|shortSwitch
argument_list|)
argument_list|)
operator|.
name|withConsole
argument_list|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|CliOption
operator|.
name|CONSOLE_MODE
operator|.
name|shortSwitch
argument_list|)
argument_list|)
operator|.
name|withOutputDirectory
argument_list|(
name|outputDir
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|checkOptionPresent (CommandLine cliParser, CliOption cliOption)
specifier|private
specifier|static
name|void
name|checkOptionPresent
parameter_list|(
name|CommandLine
name|cliParser
parameter_list|,
name|CliOption
name|cliOption
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cliParser
operator|.
name|hasOption
argument_list|(
name|cliOption
operator|.
name|shortSwitch
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing %s parameter "
operator|+
literal|"(switch: %s|%s)."
argument_list|,
name|cliOption
operator|.
name|name
argument_list|,
name|cliOption
operator|.
name|shortSwitch
argument_list|,
name|cliOption
operator|.
name|longSwitch
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|checkFile (CliOption cliOption, String filePath)
specifier|private
specifier|static
name|void
name|checkFile
parameter_list|(
name|CliOption
name|cliOption
parameter_list|,
name|String
name|filePath
parameter_list|)
block|{
name|checkFileInternal
argument_list|(
name|cliOption
argument_list|,
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDirectory (CliOption cliOption, String dirPath)
specifier|private
specifier|static
name|void
name|checkDirectory
parameter_list|(
name|CliOption
name|cliOption
parameter_list|,
name|String
name|dirPath
parameter_list|)
block|{
name|checkFileInternal
argument_list|(
name|cliOption
argument_list|,
name|dirPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFileInternal (CliOption cliOption, String filePath, boolean isFile)
specifier|private
specifier|static
name|void
name|checkFileInternal
parameter_list|(
name|CliOption
name|cliOption
parameter_list|,
name|String
name|filePath
parameter_list|,
name|boolean
name|isFile
parameter_list|)
block|{
comment|//We can safely ignore null here as files / dirs were checked before
if|if
condition|(
name|filePath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFile
operator|&&
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Specified path %s is a directory but should be "
operator|+
literal|" a file (As value of parameter %s)"
argument_list|,
name|filePath
argument_list|,
name|cliOption
operator|.
name|name
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isFile
operator|&&
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Specified path %s is not a directory "
operator|+
literal|"(As value of parameter %s)"
argument_list|,
name|filePath
argument_list|,
name|cliOption
operator|.
name|name
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PreconditionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Specified path %s does not exist "
operator|+
literal|"(As value of parameter %s)"
argument_list|,
name|filePath
argument_list|,
name|cliOption
operator|.
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

