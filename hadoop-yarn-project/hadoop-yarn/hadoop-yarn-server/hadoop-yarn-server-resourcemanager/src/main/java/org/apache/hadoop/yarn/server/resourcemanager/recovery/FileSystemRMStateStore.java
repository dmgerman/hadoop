begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|VersionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|AMRMTokenSecretManagerStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationAttemptStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|EpochProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ReservationAllocationStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|AMRMTokenSecretManagerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|Epoch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|RMDelegationTokenIdentifierData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|AMRMTokenSecretManagerStatePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|EpochPBImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
comment|/**  * A simple class for storing RM state in any storage that implements a basic  * FileSystem interface. Does not use directories so that simple key-value  * stores can be used. The retry policy for the real filesystem client must be  * configured separately to enable retry of filesystem operations when needed.  *  * Changes from 1.1 to 1.2, AMRMTokenSecretManager state has been saved  * separately. The currentMasterkey and nextMasterkey have been stored.  * Also, AMRMToken has been removed from ApplicationAttemptState.  *  * Changes from 1.2 to 1.3, Addition of ReservationSystem state.  */
DECL|class|FileSystemRMStateStore
specifier|public
class|class
name|FileSystemRMStateStore
extends|extends
name|RMStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileSystemRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_DIR_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_DIR_NAME
init|=
literal|"FSRMStateRoot"
decl_stmt|;
DECL|field|CURRENT_VERSION_INFO
specifier|protected
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|AMRMTOKEN_SECRET_MANAGER_NODE
specifier|protected
specifier|static
specifier|final
name|String
name|AMRMTOKEN_SECRET_MANAGER_NODE
init|=
literal|"AMRMTokenSecretManagerNode"
decl_stmt|;
DECL|field|UNREADABLE_BY_SUPERUSER_XATTRIB
specifier|private
specifier|static
specifier|final
name|String
name|UNREADABLE_BY_SUPERUSER_XATTRIB
init|=
literal|"security.hdfs.unreadable.by.superuser"
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|fsConf
specifier|protected
name|Configuration
name|fsConf
decl_stmt|;
DECL|field|rootDirPath
specifier|private
name|Path
name|rootDirPath
decl_stmt|;
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|field|rmDTSecretManagerRoot
name|Path
name|rmDTSecretManagerRoot
decl_stmt|;
DECL|field|rmAppRoot
specifier|private
name|Path
name|rmAppRoot
decl_stmt|;
DECL|field|dtSequenceNumberPath
specifier|private
name|Path
name|dtSequenceNumberPath
init|=
literal|null
decl_stmt|;
DECL|field|fsNumRetries
specifier|private
name|int
name|fsNumRetries
decl_stmt|;
DECL|field|fsRetryInterval
specifier|private
name|long
name|fsRetryInterval
decl_stmt|;
DECL|field|intermediateEncryptionEnabled
specifier|private
name|boolean
name|intermediateEncryptionEnabled
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|fsWorkingPath
name|Path
name|fsWorkingPath
decl_stmt|;
DECL|field|amrmTokenSecretManagerRoot
name|Path
name|amrmTokenSecretManagerRoot
decl_stmt|;
DECL|field|reservationRoot
specifier|private
name|Path
name|reservationRoot
decl_stmt|;
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|fsWorkingPath
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_URI
argument_list|)
argument_list|)
expr_stmt|;
name|rootDirPath
operator|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|ROOT_DIR_NAME
argument_list|)
expr_stmt|;
name|rmDTSecretManagerRoot
operator|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|RM_DT_SECRET_MANAGER_ROOT
argument_list|)
expr_stmt|;
name|rmAppRoot
operator|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|RM_APP_ROOT
argument_list|)
expr_stmt|;
name|amrmTokenSecretManagerRoot
operator|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|AMRMTOKEN_SECRET_MANAGER_ROOT
argument_list|)
expr_stmt|;
name|reservationRoot
operator|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|RESERVATION_SYSTEM_ROOT
argument_list|)
expr_stmt|;
name|fsNumRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_NUM_RETRIES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FS_RM_STATE_STORE_NUM_RETRIES
argument_list|)
expr_stmt|;
name|fsRetryInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_RETRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FS_RM_STATE_STORE_RETRY_INTERVAL_MS
argument_list|)
expr_stmt|;
name|intermediateEncryptionEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_INTERMEDIATE_DATA_ENCRYPTION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startInternal ()
specifier|protected
specifier|synchronized
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create filesystem only now, as part of service-start. By this time, RM is
comment|// authenticated with kerberos so we are good to create a file-system
comment|// handle.
name|fsConf
operator|=
operator|new
name|Configuration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|fsConf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.client.retry.policy.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|retryPolicy
init|=
name|fsConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_RETRY_POLICY_SPEC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC
argument_list|)
decl_stmt|;
name|fsConf
operator|.
name|set
argument_list|(
literal|"dfs.client.retry.policy.spec"
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
name|fsWorkingPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
name|scheme
operator|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|fsConf
argument_list|)
operator|.
name|getScheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scheme
operator|!=
literal|null
condition|)
block|{
name|String
name|disableCacheName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"fs.%s.impl.disable.cache"
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
name|fsConf
operator|.
name|setBoolean
argument_list|(
name|disableCacheName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fs
operator|=
name|fsWorkingPath
operator|.
name|getFileSystem
argument_list|(
name|fsConf
argument_list|)
expr_stmt|;
name|mkdirsWithRetries
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
expr_stmt|;
name|mkdirsWithRetries
argument_list|(
name|rmAppRoot
argument_list|)
expr_stmt|;
name|mkdirsWithRetries
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|)
expr_stmt|;
name|mkdirsWithRetries
argument_list|(
name|reservationRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|protected
specifier|synchronized
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|closeWithRetries
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|protected
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
annotation|@
name|Override
DECL|method|loadVersion ()
specifier|protected
specifier|synchronized
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|versionNodePath
init|=
name|getNodePath
argument_list|(
name|rootDirPath
argument_list|,
name|VERSION_NODE
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|getFileStatusWithRetries
argument_list|(
name|versionNodePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|readFileWithRetries
argument_list|(
name|versionNodePath
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
operator|new
name|VersionPBImpl
argument_list|(
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|storeVersion ()
specifier|protected
specifier|synchronized
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|versionNodePath
init|=
name|getNodePath
argument_list|(
name|rootDirPath
argument_list|,
name|VERSION_NODE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|CURRENT_VERSION_INFO
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|versionNodePath
argument_list|)
condition|)
block|{
name|updateFile
argument_list|(
name|versionNodePath
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFileWithRetries
argument_list|(
name|versionNodePath
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAndIncrementEpoch ()
specifier|public
specifier|synchronized
name|long
name|getAndIncrementEpoch
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|epochNodePath
init|=
name|getNodePath
argument_list|(
name|rootDirPath
argument_list|,
name|EPOCH_NODE
argument_list|)
decl_stmt|;
name|long
name|currentEpoch
init|=
literal|0
decl_stmt|;
name|FileStatus
name|status
init|=
name|getFileStatusWithRetries
argument_list|(
name|epochNodePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
comment|// load current epoch
name|byte
index|[]
name|data
init|=
name|readFileWithRetries
argument_list|(
name|epochNodePath
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|Epoch
name|epoch
init|=
operator|new
name|EpochPBImpl
argument_list|(
name|EpochProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|currentEpoch
operator|=
name|epoch
operator|.
name|getEpoch
argument_list|()
expr_stmt|;
comment|// increment epoch and store it
name|byte
index|[]
name|storeData
init|=
name|Epoch
operator|.
name|newInstance
argument_list|(
name|currentEpoch
operator|+
literal|1
argument_list|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|updateFile
argument_list|(
name|epochNodePath
argument_list|,
name|storeData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// initialize epoch file with 1 for the next time.
name|byte
index|[]
name|storeData
init|=
name|Epoch
operator|.
name|newInstance
argument_list|(
name|currentEpoch
operator|+
literal|1
argument_list|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|writeFileWithRetries
argument_list|(
name|epochNodePath
argument_list|,
name|storeData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|currentEpoch
return|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
specifier|synchronized
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
comment|// recover DelegationTokenSecretManager
name|loadRMDTSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover RM applications
name|loadRMAppState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover AMRMTokenSecretManager
name|loadAMRMTokenSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover reservation state
name|loadReservationSystemState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
return|return
name|rmState
return|;
block|}
DECL|method|loadReservationSystemState (RMState rmState)
specifier|private
name|void
name|loadReservationSystemState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|ReservationStateFileProcessor
name|fileProcessor
init|=
operator|new
name|ReservationStateFileProcessor
argument_list|(
name|rmState
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootDirectory
init|=
name|this
operator|.
name|reservationRoot
decl_stmt|;
name|processDirectoriesOfFiles
argument_list|(
name|fileProcessor
argument_list|,
name|rootDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load state."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|loadAMRMTokenSecretManagerState (RMState rmState)
specifier|private
name|void
name|loadAMRMTokenSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|checkAndResumeUpdateOperation
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|)
expr_stmt|;
name|Path
name|amrmTokenSecretManagerStateDataDir
init|=
operator|new
name|Path
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|,
name|AMRMTOKEN_SECRET_MANAGER_NODE
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|getFileStatusWithRetries
argument_list|(
name|amrmTokenSecretManagerStateDataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return;
block|}
assert|assert
name|status
operator|.
name|isFile
argument_list|()
assert|;
name|byte
index|[]
name|data
init|=
name|readFileWithRetries
argument_list|(
name|amrmTokenSecretManagerStateDataDir
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|AMRMTokenSecretManagerStatePBImpl
name|stateData
init|=
operator|new
name|AMRMTokenSecretManagerStatePBImpl
argument_list|(
name|AMRMTokenSecretManagerStateProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|rmState
operator|.
name|amrmTokenSecretManagerState
operator|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|stateData
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|,
name|stateData
operator|.
name|getNextMasterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRMAppState (RMState rmState)
specifier|private
name|void
name|loadRMAppState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|ApplicationAttemptStateData
argument_list|>
name|attempts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RMAppStateFileProcessor
name|rmAppStateFileProcessor
init|=
operator|new
name|RMAppStateFileProcessor
argument_list|(
name|rmState
argument_list|,
name|attempts
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootDirectory
init|=
name|this
operator|.
name|rmAppRoot
decl_stmt|;
name|processDirectoriesOfFiles
argument_list|(
name|rmAppStateFileProcessor
argument_list|,
name|rootDirectory
argument_list|)
expr_stmt|;
comment|// go through all attempts and add them to their apps, Ideally, each
comment|// attempt node must have a corresponding app node, because remove
comment|// directory operation remove both at the same time
for|for
control|(
name|ApplicationAttemptStateData
name|attemptState
range|:
name|attempts
control|)
block|{
name|ApplicationId
name|appId
init|=
name|attemptState
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appState
init|=
name|rmState
operator|.
name|appState
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
assert|assert
name|appState
operator|!=
literal|null
assert|;
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Done loading applications from FS state store"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load state."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|processDirectoriesOfFiles ( RMStateFileProcessor rmAppStateFileProcessor, Path rootDirectory)
specifier|private
name|void
name|processDirectoriesOfFiles
parameter_list|(
name|RMStateFileProcessor
name|rmAppStateFileProcessor
parameter_list|,
name|Path
name|rootDirectory
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|FileStatus
name|dir
range|:
name|listStatusWithRetries
argument_list|(
name|rootDirectory
argument_list|)
control|)
block|{
name|checkAndResumeUpdateOperation
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dirName
init|=
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileNodeStatus
range|:
name|listStatusWithRetries
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
assert|assert
name|fileNodeStatus
operator|.
name|isFile
argument_list|()
assert|;
name|String
name|fileName
init|=
name|fileNodeStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkAndRemovePartialRecordWithRetries
argument_list|(
name|fileNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|fileData
init|=
name|readFileWithRetries
argument_list|(
name|fileNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|fileNodeStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set attribute if not already set
name|setUnreadableBySuperuserXattrib
argument_list|(
name|fileNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|rmAppStateFileProcessor
operator|.
name|processChildNode
argument_list|(
name|dirName
argument_list|,
name|fileName
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkAndRemovePartialRecord (Path record)
specifier|private
name|boolean
name|checkAndRemovePartialRecord
parameter_list|(
name|Path
name|record
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the file ends with .tmp then it shows that it failed
comment|// during saving state into state store. The file will be deleted as a
comment|// part of this call
if|if
condition|(
name|record
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tmp"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"incomplete rm state store entry found :"
operator|+
name|record
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|record
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkAndResumeUpdateOperation (Path path)
specifier|private
name|void
name|checkAndResumeUpdateOperation
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Before loading the state information, check whether .new file exists.
comment|// If it does, the prior updateFile is failed on half way. We need to
comment|// complete replacing the old file first.
name|FileStatus
index|[]
name|newChildNodes
init|=
name|listStatusWithRetries
argument_list|(
name|path
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".new"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|newChildNodeStatus
range|:
name|newChildNodes
control|)
block|{
assert|assert
name|newChildNodeStatus
operator|.
name|isFile
argument_list|()
assert|;
name|String
name|newChildNodeName
init|=
name|newChildNodeStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|childNodeName
init|=
name|newChildNodeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|newChildNodeName
operator|.
name|length
argument_list|()
operator|-
literal|".new"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|childNodePath
init|=
operator|new
name|Path
argument_list|(
name|newChildNodeStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|replaceFile
argument_list|(
name|newChildNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|childNodePath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadRMDTSecretManagerState (RMState rmState)
specifier|private
name|void
name|loadRMDTSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|checkAndResumeUpdateOperation
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|childNodes
init|=
name|listStatusWithRetries
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childNodeStatus
range|:
name|childNodes
control|)
block|{
assert|assert
name|childNodeStatus
operator|.
name|isFile
argument_list|()
assert|;
name|String
name|childNodeName
init|=
name|childNodeStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkAndRemovePartialRecordWithRetries
argument_list|(
name|childNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
argument_list|)
condition|)
block|{
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|dtSequenceNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|childNodeName
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|readFileWithRetries
argument_list|(
name|childNodePath
argument_list|,
name|childNodeStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|childData
argument_list|)
decl_stmt|;
try|try
init|(
name|DataInputStream
name|fsIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
init|)
block|{
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_KEY_PREFIX
argument_list|)
condition|)
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|masterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded delegation key: keyId="
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
operator|+
literal|", expirationDate="
operator|+
name|key
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_PREFIX
argument_list|)
condition|)
block|{
name|RMDelegationTokenIdentifierData
name|identifierData
init|=
operator|new
name|RMDelegationTokenIdentifierData
argument_list|()
decl_stmt|;
name|identifierData
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|RMDelegationTokenIdentifier
name|identifier
init|=
name|identifierData
operator|.
name|getTokenIdentifier
argument_list|()
decl_stmt|;
name|long
name|renewDate
init|=
name|identifierData
operator|.
name|getRenewDate
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|delegationTokenState
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded RMDelegationTokenIdentifier: "
operator|+
name|identifier
operator|+
literal|" renewDate="
operator|+
name|renewDate
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown file for recovering RMDelegationTokenSecretManager"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|mkdirsWithRetries
argument_list|(
name|appDirPath
argument_list|)
expr_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|writeFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|appStateData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|updateFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|appStateData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error updating info for app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationAttemptStateInternal ( ApplicationAttemptId appAttemptId, ApplicationAttemptStateData attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing info for attempt: "
operator|+
name|appAttemptId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|writeFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|attemptStateData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for attempt: "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationAttemptStateInternal ( ApplicationAttemptId appAttemptId, ApplicationAttemptStateData attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|updateApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating info for attempt: "
operator|+
name|appAttemptId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|updateFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|attemptStateData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error updating info for attempt: "
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplicationStateInternal ( ApplicationStateData appState)
specifier|public
specifier|synchronized
name|void
name|removeApplicationStateInternal
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Path
name|nodeRemovePath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeRemovePath
argument_list|)
expr_stmt|;
name|deleteFileWithRetries
argument_list|(
name|nodeRemovePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeRMDelegationTokenState ( RMDelegationTokenIdentifier identifier, Long renewDate)
specifier|public
specifier|synchronized
name|void
name|storeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|identifier
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|Exception
block|{
name|storeOrUpdateRMDelegationTokenState
argument_list|(
name|identifier
argument_list|,
name|renewDate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeRMDelegationTokenState ( RMDelegationTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|void
name|removeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing RMDelegationToken_"
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|deleteFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateRMDelegationTokenState ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)
specifier|protected
specifier|synchronized
name|void
name|updateRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|Exception
block|{
name|storeOrUpdateRMDelegationTokenState
argument_list|(
name|rmDTIdentifier
argument_list|,
name|renewDate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|storeOrUpdateRMDelegationTokenState ( RMDelegationTokenIdentifier identifier, Long renewDate, boolean isUpdate)
specifier|private
name|void
name|storeOrUpdateRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|identifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifierData
name|identifierData
init|=
operator|new
name|RMDelegationTokenIdentifierData
argument_list|(
name|identifier
argument_list|,
name|renewDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUpdate
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating RMDelegationToken_"
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|updateFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|identifierData
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing RMDelegationToken_"
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|writeFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|identifierData
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// store sequence number
name|Path
name|latestSequenceNumberPath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing "
operator|+
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dtSequenceNumberPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|createFileWithRetries
argument_list|(
name|latestSequenceNumberPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to create "
operator|+
name|latestSequenceNumberPath
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|renameFileWithRetries
argument_list|(
name|dtSequenceNumberPath
argument_list|,
name|latestSequenceNumberPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to rename "
operator|+
name|dtSequenceNumberPath
argument_list|)
throw|;
block|}
block|}
name|dtSequenceNumberPath
operator|=
name|latestSequenceNumberPath
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeRMDTMasterKeyState (DelegationKey masterKey)
specifier|public
specifier|synchronized
name|void
name|storeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|fsOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing RMDelegationKey_"
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|masterKey
operator|.
name|write
argument_list|(
name|fsOut
argument_list|)
expr_stmt|;
name|writeFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
DECL|method|removeRMDTMasterKeyState (DelegationKey masterKey)
name|removeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing RMDelegationKey_"
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteStore ()
specifier|public
specifier|synchronized
name|void
name|deleteStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|existsWithRetries
argument_list|(
name|rootDirPath
argument_list|)
condition|)
block|{
name|deleteFileWithRetries
argument_list|(
name|rootDirPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId removeAppId)
specifier|public
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|removeAppId
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeRemovePath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|removeAppId
argument_list|)
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|nodeRemovePath
argument_list|)
condition|)
block|{
name|deleteFileWithRetries
argument_list|(
name|nodeRemovePath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAppDir (Path root, ApplicationId appId)
specifier|private
name|Path
name|getAppDir
parameter_list|(
name|Path
name|root
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|getNodePath
argument_list|(
name|root
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAppDir (ApplicationId appId)
specifier|protected
name|Path
name|getAppDir
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAppAttemptDir (ApplicationAttemptId appAttId)
specifier|protected
name|Path
name|getAppAttemptDir
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|)
block|{
return|return
name|getNodePath
argument_list|(
name|getAppDir
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|,
name|appAttId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// FileSystem related code
DECL|method|checkAndRemovePartialRecordWithRetries (final Path record)
specifier|private
name|boolean
name|checkAndRemovePartialRecordWithRetries
parameter_list|(
specifier|final
name|Path
name|record
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|checkAndRemovePartialRecord
argument_list|(
name|record
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|mkdirsWithRetries (final Path appDirPath)
specifier|private
name|void
name|mkdirsWithRetries
parameter_list|(
specifier|final
name|Path
name|appDirPath
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|appDirPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFileWithRetries (final Path outputPath, final byte[] data, final boolean makeUnreadableByAdmin)
specifier|private
name|void
name|writeFileWithRetries
parameter_list|(
specifier|final
name|Path
name|outputPath
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|boolean
name|makeUnreadableByAdmin
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|writeFile
argument_list|(
name|outputPath
argument_list|,
name|data
argument_list|,
name|makeUnreadableByAdmin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteFileWithRetries (final Path deletePath)
specifier|private
name|void
name|deleteFileWithRetries
parameter_list|(
specifier|final
name|Path
name|deletePath
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteFile
argument_list|(
name|deletePath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|renameFileWithRetries (final Path src, final Path dst)
specifier|private
name|boolean
name|renameFileWithRetries
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|renameFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|createFileWithRetries (final Path newFile)
specifier|private
name|boolean
name|createFileWithRetries
parameter_list|(
specifier|final
name|Path
name|newFile
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createFile
argument_list|(
name|newFile
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|getFileStatusWithRetries (final Path path)
specifier|private
name|FileStatus
name|getFileStatusWithRetries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileStatus
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getFileStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|existsWithRetries (final Path path)
specifier|private
name|boolean
name|existsWithRetries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|readFileWithRetries (final Path inputPath, final long len)
specifier|private
name|byte
index|[]
name|readFileWithRetries
parameter_list|(
specifier|final
name|Path
name|inputPath
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|readFile
argument_list|(
name|inputPath
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|listStatusWithRetries (final Path path)
specifier|private
name|FileStatus
index|[]
name|listStatusWithRetries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|FileStatus
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileStatus
index|[]
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|listStatusWithRetries (final Path path, final PathFilter filter)
specifier|private
name|FileStatus
index|[]
name|listStatusWithRetries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FSAction
argument_list|<
name|FileStatus
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileStatus
index|[]
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|closeWithRetries ()
specifier|private
name|void
name|closeWithRetries
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|class|FSAction
specifier|private
specifier|abstract
class|class
name|FSAction
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|run ()
specifier|abstract
name|T
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runWithRetries ()
name|T
name|runWithRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|run
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception while executing a FS operation."
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|retry
operator|>
name|fsNumRetries
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Maxed out FS retries. Giving up!"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying operation on FS. Retry no. "
operator|+
name|retry
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|fsRetryInterval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|deleteFile (Path deletePath)
specifier|private
name|void
name|deleteFile
parameter_list|(
name|Path
name|deletePath
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|deletePath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to delete "
operator|+
name|deletePath
argument_list|)
throw|;
block|}
block|}
DECL|method|readFile (Path inputPath, long len)
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
name|Path
name|inputPath
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
comment|// state data will not be that "long"
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|fsIn
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fsIn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFileStatus (Path path)
specifier|private
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/*    * In order to make this write atomic as a part of write we will first write    * data to .tmp file and then rename it. Here we are assuming that rename is    * atomic for underlying file system.    */
DECL|method|writeFile (Path outputPath, byte[] data, boolean makeUnradableByAdmin)
specifier|protected
name|void
name|writeFile
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|makeUnradableByAdmin
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|outputPath
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fsOut
init|=
literal|null
decl_stmt|;
comment|// This file will be overwritten when app/attempt finishes for saving the
comment|// final status.
try|try
block|{
name|fsOut
operator|=
name|fs
operator|.
name|create
argument_list|(
name|tempPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|makeUnradableByAdmin
condition|)
block|{
name|setUnreadableBySuperuserXattrib
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
block|}
name|fsOut
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsOut
operator|=
literal|null
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|tempPath
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fsOut
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * In order to make this update atomic as a part of write we will first write    * data to .new file and then rename it. Here we are assuming that rename is    * atomic for underlying file system.    */
DECL|method|updateFile (Path outputPath, byte[] data, boolean makeUnradableByAdmin)
specifier|protected
name|void
name|updateFile
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|makeUnradableByAdmin
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|outputPath
operator|.
name|getName
argument_list|()
operator|+
literal|".new"
argument_list|)
decl_stmt|;
comment|// use writeFileWithRetries to make sure .new file is created atomically
name|writeFileWithRetries
argument_list|(
name|newPath
argument_list|,
name|data
argument_list|,
name|makeUnradableByAdmin
argument_list|)
expr_stmt|;
name|replaceFile
argument_list|(
name|newPath
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
block|}
DECL|method|replaceFile (Path srcPath, Path dstPath)
specifier|protected
name|void
name|replaceFile
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|existsWithRetries
argument_list|(
name|dstPath
argument_list|)
condition|)
block|{
name|deleteFileWithRetries
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"File doesn't exist. Skip deleting the file "
operator|+
name|dstPath
argument_list|)
expr_stmt|;
block|}
name|renameFileWithRetries
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|renameFile (Path src, Path dst)
name|boolean
name|renameFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
return|;
block|}
DECL|method|createFile (Path newFile)
specifier|private
name|boolean
name|createFile
parameter_list|(
name|Path
name|newFile
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|createNewFile
argument_list|(
name|newFile
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getNodePath (Path root, String nodeName)
name|Path
name|getNodePath
parameter_list|(
name|Path
name|root
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|nodeName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|storeOrUpdateAMRMTokenSecretManagerState ( AMRMTokenSecretManagerState amrmTokenSecretManagerState, boolean isUpdate)
specifier|public
specifier|synchronized
name|void
name|storeOrUpdateAMRMTokenSecretManagerState
parameter_list|(
name|AMRMTokenSecretManagerState
name|amrmTokenSecretManagerState
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|,
name|AMRMTOKEN_SECRET_MANAGER_NODE
argument_list|)
decl_stmt|;
name|AMRMTokenSecretManagerState
name|data
init|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|amrmTokenSecretManagerState
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateData
init|=
name|data
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|isUpdate
condition|)
block|{
name|updateFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|stateData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFileWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|stateData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeReservationState ( ReservationAllocationStateProto reservationAllocation, String planName, String reservationIdName)
specifier|protected
name|void
name|storeReservationState
parameter_list|(
name|ReservationAllocationStateProto
name|reservationAllocation
parameter_list|,
name|String
name|planName
parameter_list|,
name|String
name|reservationIdName
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|planCreatePath
init|=
name|getNodePath
argument_list|(
name|reservationRoot
argument_list|,
name|planName
argument_list|)
decl_stmt|;
name|mkdirsWithRetries
argument_list|(
name|planCreatePath
argument_list|)
expr_stmt|;
name|Path
name|reservationPath
init|=
name|getNodePath
argument_list|(
name|planCreatePath
argument_list|,
name|reservationIdName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing state for reservation "
operator|+
name|reservationIdName
operator|+
literal|" from "
operator|+
literal|"plan "
operator|+
name|planName
operator|+
literal|" at path "
operator|+
name|reservationPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|reservationData
init|=
name|reservationAllocation
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|writeFileWithRetries
argument_list|(
name|reservationPath
argument_list|,
name|reservationData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeReservationState ( String planName, String reservationIdName)
specifier|protected
name|void
name|removeReservationState
parameter_list|(
name|String
name|planName
parameter_list|,
name|String
name|reservationIdName
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|planCreatePath
init|=
name|getNodePath
argument_list|(
name|reservationRoot
argument_list|,
name|planName
argument_list|)
decl_stmt|;
name|Path
name|reservationPath
init|=
name|getNodePath
argument_list|(
name|planCreatePath
argument_list|,
name|reservationIdName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing state for reservation "
operator|+
name|reservationIdName
operator|+
literal|" from "
operator|+
literal|"plan "
operator|+
name|planName
operator|+
literal|" at path "
operator|+
name|reservationPath
argument_list|)
expr_stmt|;
name|deleteFileWithRetries
argument_list|(
name|reservationPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumRetries ()
specifier|public
name|int
name|getNumRetries
parameter_list|()
block|{
return|return
name|fsNumRetries
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRetryInterval ()
specifier|public
name|long
name|getRetryInterval
parameter_list|()
block|{
return|return
name|fsRetryInterval
return|;
block|}
DECL|method|setUnreadableBySuperuserXattrib (Path p)
specifier|private
name|void
name|setUnreadableBySuperuserXattrib
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hdfs"
argument_list|)
operator|&&
name|intermediateEncryptionEnabled
operator|&&
operator|!
name|fs
operator|.
name|getXAttrs
argument_list|(
name|p
argument_list|)
operator|.
name|containsKey
argument_list|(
name|UNREADABLE_BY_SUPERUSER_XATTRIB
argument_list|)
condition|)
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|p
argument_list|,
name|UNREADABLE_BY_SUPERUSER_XATTRIB
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReservationStateFileProcessor
specifier|private
specifier|static
class|class
name|ReservationStateFileProcessor
implements|implements
name|RMStateFileProcessor
block|{
DECL|field|rmState
specifier|private
name|RMState
name|rmState
decl_stmt|;
DECL|method|ReservationStateFileProcessor (RMState state)
specifier|public
name|ReservationStateFileProcessor
parameter_list|(
name|RMState
name|state
parameter_list|)
block|{
name|this
operator|.
name|rmState
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processChildNode (String planName, String childNodeName, byte[] childData)
specifier|public
name|void
name|processChildNode
parameter_list|(
name|String
name|planName
parameter_list|,
name|String
name|childNodeName
parameter_list|,
name|byte
index|[]
name|childData
parameter_list|)
throws|throws
name|IOException
block|{
name|ReservationAllocationStateProto
name|allocationState
init|=
name|ReservationAllocationStateProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rmState
operator|.
name|getReservationState
argument_list|()
operator|.
name|containsKey
argument_list|(
name|planName
argument_list|)
condition|)
block|{
name|rmState
operator|.
name|getReservationState
argument_list|()
operator|.
name|put
argument_list|(
name|planName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ReservationId
argument_list|,
name|ReservationAllocationStateProto
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReservationId
name|reservationId
init|=
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|rmState
operator|.
name|getReservationState
argument_list|()
operator|.
name|get
argument_list|(
name|planName
argument_list|)
operator|.
name|put
argument_list|(
name|reservationId
argument_list|,
name|allocationState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RMAppStateFileProcessor
specifier|private
specifier|static
class|class
name|RMAppStateFileProcessor
implements|implements
name|RMStateFileProcessor
block|{
DECL|field|rmState
specifier|private
name|RMState
name|rmState
decl_stmt|;
DECL|field|attempts
specifier|private
name|List
argument_list|<
name|ApplicationAttemptStateData
argument_list|>
name|attempts
decl_stmt|;
DECL|method|RMAppStateFileProcessor (RMState rmState, List<ApplicationAttemptStateData> attempts)
specifier|public
name|RMAppStateFileProcessor
parameter_list|(
name|RMState
name|rmState
parameter_list|,
name|List
argument_list|<
name|ApplicationAttemptStateData
argument_list|>
name|attempts
parameter_list|)
block|{
name|this
operator|.
name|rmState
operator|=
name|rmState
expr_stmt|;
name|this
operator|.
name|attempts
operator|=
name|attempts
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processChildNode (String appDirName, String childNodeName, byte[] childData)
specifier|public
name|void
name|processChildNode
parameter_list|(
name|String
name|appDirName
parameter_list|,
name|String
name|childNodeName
parameter_list|,
name|byte
index|[]
name|childData
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationId
operator|.
name|appIdStrPrefix
argument_list|)
condition|)
block|{
comment|// application
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading application from node: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
name|ApplicationStateDataPBImpl
name|appState
init|=
operator|new
name|ApplicationStateDataPBImpl
argument_list|(
name|ApplicationStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|appState
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
comment|// attempt
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading application attempt from node: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptStateDataPBImpl
name|attemptState
init|=
operator|new
name|ApplicationAttemptStateDataPBImpl
argument_list|(
name|ApplicationAttemptStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|attempts
operator|.
name|add
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown child node with name: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Interface for common state processing of directory of file layout
DECL|interface|RMStateFileProcessor
specifier|private
interface|interface
name|RMStateFileProcessor
block|{
DECL|method|processChildNode (String appDirName, String childNodeName, byte[] childData)
name|void
name|processChildNode
parameter_list|(
name|String
name|appDirName
parameter_list|,
name|String
name|childNodeName
parameter_list|,
name|byte
index|[]
name|childData
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

