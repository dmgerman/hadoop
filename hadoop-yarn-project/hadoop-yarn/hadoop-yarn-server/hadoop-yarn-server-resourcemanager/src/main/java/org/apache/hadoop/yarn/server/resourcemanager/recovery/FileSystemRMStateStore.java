begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerServiceProtos
operator|.
name|ApplicationAttemptStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerServiceProtos
operator|.
name|ApplicationStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
comment|/**  * A simple class for storing RM state in any storage that implements a basic  * FileSystem interface. Does not use directories so that simple key-value  * stores can be used. The retry policy for the real filesystem client must be  * configured separately to enable retry of filesystem operations when needed.  */
DECL|class|FileSystemRMStateStore
specifier|public
class|class
name|FileSystemRMStateStore
extends|extends
name|RMStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileSystemRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_DIR_NAME
init|=
literal|"FSRMStateRoot"
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|rootDirPath
specifier|private
name|Path
name|rootDirPath
decl_stmt|;
DECL|field|rmDTSecretManagerRoot
specifier|private
name|Path
name|rmDTSecretManagerRoot
decl_stmt|;
DECL|field|rmAppRoot
specifier|private
name|Path
name|rmAppRoot
decl_stmt|;
DECL|field|dtSequenceNumberPath
specifier|private
name|Path
name|dtSequenceNumberPath
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|fsWorkingPath
name|Path
name|fsWorkingPath
decl_stmt|;
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|fsWorkingPath
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_URI
argument_list|)
argument_list|)
expr_stmt|;
name|rootDirPath
operator|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|ROOT_DIR_NAME
argument_list|)
expr_stmt|;
name|rmDTSecretManagerRoot
operator|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|RM_DT_SECRET_MANAGER_ROOT
argument_list|)
expr_stmt|;
name|rmAppRoot
operator|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|RM_APP_ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startInternal ()
specifier|protected
specifier|synchronized
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create filesystem only now, as part of service-start. By this time, RM is
comment|// authenticated with kerberos so we are good to create a file-system
comment|// handle.
name|fs
operator|=
name|fsWorkingPath
operator|.
name|getFileSystem
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|rmAppRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|protected
specifier|synchronized
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
specifier|synchronized
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
comment|// recover DelegationTokenSecretManager
name|loadRMDTSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover RM applications
name|loadRMAppState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
return|return
name|rmState
return|;
block|}
DECL|method|loadRMAppState (RMState rmState)
specifier|private
name|void
name|loadRMAppState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|ApplicationAttemptState
argument_list|>
name|attempts
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|appDir
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|rmAppRoot
argument_list|)
control|)
block|{
for|for
control|(
name|FileStatus
name|childNodeStatus
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|appDir
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
assert|assert
name|childNodeStatus
operator|.
name|isFile
argument_list|()
assert|;
name|String
name|childNodeName
init|=
name|childNodeStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkAndRemovePartialRecord
argument_list|(
name|childNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|childData
init|=
name|readFile
argument_list|(
name|childNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|childNodeStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationId
operator|.
name|appIdStrPrefix
argument_list|)
condition|)
block|{
comment|// application
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading application from node: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|ApplicationStateDataPBImpl
name|appStateData
init|=
operator|new
name|ApplicationStateDataPBImpl
argument_list|(
name|ApplicationStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationState
name|appState
init|=
operator|new
name|ApplicationState
argument_list|(
name|appStateData
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getUser
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getState
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getFinishTime
argument_list|()
argument_list|)
decl_stmt|;
comment|// assert child node name is same as actual applicationId
assert|assert
name|appId
operator|.
name|equals
argument_list|(
name|appState
operator|.
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
assert|;
name|rmState
operator|.
name|appState
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
comment|// attempt
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading application attempt from node: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateDataPBImpl
name|attemptStateData
init|=
operator|new
name|ApplicationAttemptStateDataPBImpl
argument_list|(
name|ApplicationAttemptStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|dibb
operator|.
name|reset
argument_list|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptState
name|attemptState
init|=
operator|new
name|ApplicationAttemptState
argument_list|(
name|attemptId
argument_list|,
name|attemptStateData
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|credentials
argument_list|,
name|attemptStateData
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getState
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
decl_stmt|;
comment|// assert child node name is same as application attempt id
assert|assert
name|attemptId
operator|.
name|equals
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
assert|;
name|attempts
operator|.
name|add
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown child node with name: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// go through all attempts and add them to their apps, Ideally, each
comment|// attempt node must have a corresponding app node, because remove
comment|// directory operation remove both at the same time
for|for
control|(
name|ApplicationAttemptState
name|attemptState
range|:
name|attempts
control|)
block|{
name|ApplicationId
name|appId
init|=
name|attemptState
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|ApplicationState
name|appState
init|=
name|rmState
operator|.
name|appState
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
assert|assert
name|appState
operator|!=
literal|null
assert|;
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load state."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|checkAndRemovePartialRecord (Path record)
specifier|private
name|boolean
name|checkAndRemovePartialRecord
parameter_list|(
name|Path
name|record
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the file ends with .tmp then it shows that it failed
comment|// during saving state into state store. The file will be deleted as a
comment|// part of this call
if|if
condition|(
name|record
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tmp"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"incomplete rm state store entry found :"
operator|+
name|record
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|record
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|loadRMDTSecretManagerState (RMState rmState)
specifier|private
name|void
name|loadRMDTSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|childNodes
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childNodeStatus
range|:
name|childNodes
control|)
block|{
assert|assert
name|childNodeStatus
operator|.
name|isFile
argument_list|()
assert|;
name|String
name|childNodeName
init|=
name|childNodeStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkAndRemovePartialRecord
argument_list|(
name|childNodeStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
argument_list|)
condition|)
block|{
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|dtSequenceNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|childNodeName
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|readFile
argument_list|(
name|childNodePath
argument_list|,
name|childNodeStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|childData
argument_list|)
decl_stmt|;
name|DataInputStream
name|fsIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_KEY_PREFIX
argument_list|)
condition|)
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|masterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_PREFIX
argument_list|)
condition|)
block|{
name|RMDelegationTokenIdentifier
name|identifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|long
name|renewDate
init|=
name|fsIn
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|delegationTokenState
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown file for recovering RMDelegationTokenSecretManager"
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationStateInternal (String appId, ApplicationStateDataPBImpl appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationStateInternal
parameter_list|(
name|String
name|appId
parameter_list|,
name|ApplicationStateDataPBImpl
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|appDirPath
argument_list|)
expr_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|writeFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationStateInternal (String appId, ApplicationStateDataPBImpl appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|updateApplicationStateInternal
parameter_list|(
name|String
name|appId
parameter_list|,
name|ApplicationStateDataPBImpl
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|updateFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error updating info for app: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationAttemptStateInternal ( String attemptId, ApplicationAttemptStateDataPBImpl attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationAttemptStateInternal
parameter_list|(
name|String
name|attemptId
parameter_list|,
name|ApplicationAttemptStateDataPBImpl
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing info for attempt: "
operator|+
name|attemptId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|writeFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|attemptStateData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for attempt: "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationAttemptStateInternal ( String attemptId, ApplicationAttemptStateDataPBImpl attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|updateApplicationAttemptStateInternal
parameter_list|(
name|String
name|attemptId
parameter_list|,
name|ApplicationAttemptStateDataPBImpl
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|Path
name|appDirPath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating info for attempt: "
operator|+
name|attemptId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// currently throw all exceptions. May need to respond differently for HA
comment|// based on whether we have lost the right to write to FS
name|updateFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|attemptStateData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error updating info for attempt: "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplicationState (ApplicationState appState)
specifier|public
specifier|synchronized
name|void
name|removeApplicationState
parameter_list|(
name|ApplicationState
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|nodeRemovePath
init|=
name|getAppDir
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeRemovePath
argument_list|)
expr_stmt|;
name|deleteFile
argument_list|(
name|nodeRemovePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeRMDelegationTokenAndSequenceNumberState ( RMDelegationTokenIdentifier identifier, Long renewDate, int latestSequenceNumber)
specifier|public
specifier|synchronized
name|void
name|storeRMDelegationTokenAndSequenceNumberState
parameter_list|(
name|RMDelegationTokenIdentifier
name|identifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|fsOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing RMDelegationToken_"
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|write
argument_list|(
name|fsOut
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|writeLong
argument_list|(
name|renewDate
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// store sequence number
name|Path
name|latestSequenceNumberPath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
operator|+
name|latestSequenceNumber
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing "
operator|+
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
operator|+
name|latestSequenceNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|dtSequenceNumberPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|createFile
argument_list|(
name|latestSequenceNumberPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to create "
operator|+
name|latestSequenceNumberPath
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|renameFile
argument_list|(
name|dtSequenceNumberPath
argument_list|,
name|latestSequenceNumberPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to rename "
operator|+
name|dtSequenceNumberPath
argument_list|)
throw|;
block|}
block|}
name|dtSequenceNumberPath
operator|=
name|latestSequenceNumberPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeRMDelegationTokenState ( RMDelegationTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|void
name|removeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing RMDelegationToken_"
operator|+
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|deleteFile
argument_list|(
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeRMDTMasterKeyState (DelegationKey masterKey)
specifier|public
specifier|synchronized
name|void
name|storeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|fsOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing RMDelegationKey_"
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|masterKey
operator|.
name|write
argument_list|(
name|fsOut
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|nodeCreatePath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
DECL|method|removeRMDTMasterKeyState (DelegationKey masterKey)
name|removeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|masterKey
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing RMDelegationKey_"
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteFile
argument_list|(
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
DECL|method|getAppDir (Path root, String appId)
specifier|private
name|Path
name|getAppDir
parameter_list|(
name|Path
name|root
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
return|return
name|getNodePath
argument_list|(
name|root
argument_list|,
name|appId
argument_list|)
return|;
block|}
comment|// FileSystem related code
DECL|method|deleteFile (Path deletePath)
specifier|private
name|void
name|deleteFile
parameter_list|(
name|Path
name|deletePath
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|deletePath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to delete "
operator|+
name|deletePath
argument_list|)
throw|;
block|}
block|}
DECL|method|readFile (Path inputPath, long len)
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
name|Path
name|inputPath
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataInputStream
name|fsIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|inputPath
argument_list|)
decl_stmt|;
comment|// state data will not be that "long"
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|fsIn
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/*    * In order to make this write atomic as a part of write we will first write    * data to .tmp file and then rename it. Here we are assuming that rename is    * atomic for underlying file system.    */
DECL|method|writeFile (Path outputPath, byte[] data)
specifier|private
name|void
name|writeFile
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|outputPath
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fsOut
init|=
literal|null
decl_stmt|;
comment|// This file will be overwritten when app/attempt finishes for saving the
comment|// final status.
name|fsOut
operator|=
name|fs
operator|.
name|create
argument_list|(
name|tempPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|tempPath
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
block|}
DECL|method|updateFile (Path outputPath, byte[] data)
specifier|private
name|void
name|updateFile
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|deleteFile
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
block|}
name|writeFile
argument_list|(
name|outputPath
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|renameFile (Path src, Path dst)
specifier|private
name|boolean
name|renameFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
return|;
block|}
DECL|method|createFile (Path newFile)
specifier|private
name|boolean
name|createFile
parameter_list|(
name|Path
name|newFile
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fs
operator|.
name|createNewFile
argument_list|(
name|newFile
argument_list|)
return|;
block|}
DECL|method|getNodePath (Path root, String nodeName)
specifier|private
name|Path
name|getNodePath
parameter_list|(
name|Path
name|root
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|nodeName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

