begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ApplicationSchedulingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|PendingAsk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|AppPlacementAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|PendingAskUpdateResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|SingleConstraintAppPlacementAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * This class keeps track of all the consumption of an application. This also  * keeps track of current running/completed containers for the application.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|AppSchedulingInfo
specifier|public
class|class
name|AppSchedulingInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppSchedulingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|containerIdCounter
specifier|private
specifier|final
name|AtomicLong
name|containerIdCounter
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|queue
specifier|private
name|Queue
name|queue
decl_stmt|;
DECL|field|abstractUsersManager
specifier|private
name|AbstractUsersManager
name|abstractUsersManager
decl_stmt|;
comment|// whether accepted/allocated by scheduler
DECL|field|pending
specifier|private
specifier|volatile
name|boolean
name|pending
init|=
literal|true
decl_stmt|;
DECL|field|appResourceUsage
specifier|private
name|ResourceUsage
name|appResourceUsage
decl_stmt|;
DECL|field|userBlacklistChanged
specifier|private
name|AtomicBoolean
name|userBlacklistChanged
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Set of places (nodes / racks) blacklisted by the system. Today, this only
comment|// has places blacklisted for AM containers.
DECL|field|placesBlacklistedBySystem
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|placesBlacklistedBySystem
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|placesBlacklistedByApp
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|placesBlacklistedByApp
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requestedPartitions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|requestedPartitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|SchedulerRequestKey
argument_list|>
DECL|field|schedulerKeys
name|schedulerKeys
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
argument_list|>
DECL|field|schedulerKeyToAppPlacementAllocator
name|schedulerKeyToAppPlacementAllocator
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|updateContext
specifier|public
specifier|final
name|ContainerUpdateContext
name|updateContext
decl_stmt|;
DECL|field|applicationSchedulingEnvs
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|applicationSchedulingEnvs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|AppSchedulingInfo (ApplicationAttemptId appAttemptId, String user, Queue queue, AbstractUsersManager abstractUsersManager, long epoch, ResourceUsage appResourceUsage, Map<String, String> applicationSchedulingEnvs, RMContext rmContext)
specifier|public
name|AppSchedulingInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|AbstractUsersManager
name|abstractUsersManager
parameter_list|,
name|long
name|epoch
parameter_list|,
name|ResourceUsage
name|appResourceUsage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|applicationSchedulingEnvs
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|applicationAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|abstractUsersManager
operator|=
name|abstractUsersManager
expr_stmt|;
name|this
operator|.
name|containerIdCounter
operator|=
operator|new
name|AtomicLong
argument_list|(
name|epoch
operator|<<
name|ResourceManager
operator|.
name|EPOCH_BIT_SHIFT
argument_list|)
expr_stmt|;
name|this
operator|.
name|appResourceUsage
operator|=
name|appResourceUsage
expr_stmt|;
name|this
operator|.
name|applicationSchedulingEnvs
operator|.
name|putAll
argument_list|(
name|applicationSchedulingEnvs
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|updateContext
operator|=
operator|new
name|ContainerUpdateContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|applicationAttemptId
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getNewContainerId ()
specifier|public
name|long
name|getNewContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerIdCounter
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|queue
operator|.
name|getQueueName
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isPending ()
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
DECL|method|getRequestedPartitions ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRequestedPartitions
parameter_list|()
block|{
return|return
name|requestedPartitions
return|;
block|}
comment|/**    * Clear any pending requests from this application.    */
DECL|method|clearRequests ()
specifier|private
name|void
name|clearRequests
parameter_list|()
block|{
name|schedulerKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|schedulerKeyToAppPlacementAllocator
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" requests cleared"
argument_list|)
expr_stmt|;
block|}
DECL|method|getUpdateContext ()
specifier|public
name|ContainerUpdateContext
name|getUpdateContext
parameter_list|()
block|{
return|return
name|updateContext
return|;
block|}
comment|/**    * The ApplicationMaster is updating resource requirements for the    * application, by asking for more resources and releasing resources acquired    * by the application.    *    * @param resourceRequests resource requests to be allocated    * @param recoverPreemptedRequestForAContainer    *          recover ResourceRequest/SchedulingRequest on preemption    * @return true if any resource was updated, false otherwise    */
DECL|method|updateResourceRequests (List<ResourceRequest> resourceRequests, boolean recoverPreemptedRequestForAContainer)
specifier|public
name|boolean
name|updateResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|,
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|)
block|{
comment|// Flag to track if any incoming requests update "ANY" requests
name|boolean
name|offswitchResourcesUpdated
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Update AppPlacementAllocator by requests
name|offswitchResourcesUpdated
operator|=
name|internalAddResourceRequests
argument_list|(
name|recoverPreemptedRequestForAContainer
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|offswitchResourcesUpdated
return|;
block|}
comment|/**    * The ApplicationMaster is updating resource requirements for the    * application, by asking for more resources and releasing resources acquired    * by the application.    *    * @param dedupRequests (dedup) resource requests to be allocated    * @param recoverPreemptedRequestForAContainer    *          recover ResourceRequest/SchedulingRequest on preemption    * @return true if any resource was updated, false otherwise    */
DECL|method|updateResourceRequests ( Map<SchedulerRequestKey, Map<String, ResourceRequest>> dedupRequests, boolean recoverPreemptedRequestForAContainer)
specifier|public
name|boolean
name|updateResourceRequests
parameter_list|(
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|dedupRequests
parameter_list|,
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|)
block|{
comment|// Flag to track if any incoming requests update "ANY" requests
name|boolean
name|offswitchResourcesUpdated
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Update AppPlacementAllocator by requests
name|offswitchResourcesUpdated
operator|=
name|internalAddResourceRequests
argument_list|(
name|recoverPreemptedRequestForAContainer
argument_list|,
name|dedupRequests
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|offswitchResourcesUpdated
return|;
block|}
comment|/**    * The ApplicationMaster is updating resource requirements for the    * application, by asking for more resources and releasing resources acquired    * by the application.    *    * @param schedulingRequests resource requests to be allocated    * @param recoverPreemptedRequestForAContainer    *          recover ResourceRequest/SchedulingRequest on preemption    * @return true if any resource was updated, false otherwise    */
DECL|method|updateSchedulingRequests ( List<SchedulingRequest> schedulingRequests, boolean recoverPreemptedRequestForAContainer)
specifier|public
name|boolean
name|updateSchedulingRequests
parameter_list|(
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequests
parameter_list|,
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|)
block|{
comment|// Flag to track if any incoming requests update "ANY" requests
name|boolean
name|offswitchResourcesUpdated
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Update AppPlacementAllocator by requests
name|offswitchResourcesUpdated
operator|=
name|addSchedulingRequests
argument_list|(
name|recoverPreemptedRequestForAContainer
argument_list|,
name|schedulingRequests
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|offswitchResourcesUpdated
return|;
block|}
DECL|method|removeAppPlacement (SchedulerRequestKey schedulerRequestKey)
specifier|public
name|void
name|removeAppPlacement
parameter_list|(
name|SchedulerRequestKey
name|schedulerRequestKey
parameter_list|)
block|{
name|schedulerKeyToAppPlacementAllocator
operator|.
name|remove
argument_list|(
name|schedulerRequestKey
argument_list|)
expr_stmt|;
block|}
DECL|method|addSchedulingRequests ( boolean recoverPreemptedRequestForAContainer, List<SchedulingRequest> schedulingRequests)
specifier|private
name|boolean
name|addSchedulingRequests
parameter_list|(
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequests
parameter_list|)
block|{
comment|// Do we need to update pending resource for app/queue, etc.?
name|boolean
name|requireUpdatePendingResource
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SchedulingRequest
name|request
range|:
name|schedulingRequests
control|)
block|{
name|SchedulerRequestKey
name|schedulerRequestKey
init|=
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|AppPlacementAllocator
name|appPlacementAllocator
init|=
name|getAndAddAppPlacementAllocatorIfNotExist
argument_list|(
name|schedulerRequestKey
argument_list|,
name|SingleConstraintAppPlacementAllocator
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update AppPlacementAllocator
name|PendingAskUpdateResult
name|pendingAmountChanges
init|=
name|appPlacementAllocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|request
argument_list|,
name|recoverPreemptedRequestForAContainer
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|pendingAmountChanges
condition|)
block|{
name|updatePendingResources
argument_list|(
name|pendingAmountChanges
argument_list|,
name|schedulerRequestKey
argument_list|,
name|queue
operator|.
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|requireUpdatePendingResource
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|requireUpdatePendingResource
return|;
block|}
comment|/**    * Get and insert AppPlacementAllocator if it doesn't exist, this should be    * protected by write lock.    * @param schedulerRequestKey schedulerRequestKey    * @param placementTypeClass placementTypeClass    * @return AppPlacementAllocator    */
DECL|method|getAndAddAppPlacementAllocatorIfNotExist ( SchedulerRequestKey schedulerRequestKey, String placementTypeClass)
specifier|private
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
name|getAndAddAppPlacementAllocatorIfNotExist
parameter_list|(
name|SchedulerRequestKey
name|schedulerRequestKey
parameter_list|,
name|String
name|placementTypeClass
parameter_list|)
block|{
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
name|appPlacementAllocator
decl_stmt|;
if|if
condition|(
operator|(
name|appPlacementAllocator
operator|=
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerRequestKey
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|appPlacementAllocator
operator|=
name|ApplicationPlacementAllocatorFactory
operator|.
name|getAppPlacementAllocator
argument_list|(
name|placementTypeClass
argument_list|,
name|this
argument_list|,
name|schedulerRequestKey
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|schedulerKeyToAppPlacementAllocator
operator|.
name|put
argument_list|(
name|schedulerRequestKey
argument_list|,
name|appPlacementAllocator
argument_list|)
expr_stmt|;
block|}
return|return
name|appPlacementAllocator
return|;
block|}
DECL|method|internalAddResourceRequests ( boolean recoverPreemptedRequestForAContainer, Map<SchedulerRequestKey, Map<String, ResourceRequest>> dedupRequests)
specifier|private
name|boolean
name|internalAddResourceRequests
parameter_list|(
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|,
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|dedupRequests
parameter_list|)
block|{
name|boolean
name|offswitchResourcesUpdated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|entry
range|:
name|dedupRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SchedulerRequestKey
name|schedulerRequestKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
name|appPlacementAllocator
init|=
name|getAndAddAppPlacementAllocatorIfNotExist
argument_list|(
name|schedulerRequestKey
argument_list|,
name|applicationSchedulingEnvs
operator|.
name|get
argument_list|(
name|ApplicationSchedulingConfig
operator|.
name|ENV_APPLICATION_PLACEMENT_TYPE_CLASS
argument_list|)
argument_list|)
decl_stmt|;
comment|// Update AppPlacementAllocator
name|PendingAskUpdateResult
name|pendingAmountChanges
init|=
name|appPlacementAllocator
operator|.
name|updatePendingAsk
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|recoverPreemptedRequestForAContainer
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|pendingAmountChanges
condition|)
block|{
name|updatePendingResources
argument_list|(
name|pendingAmountChanges
argument_list|,
name|schedulerRequestKey
argument_list|,
name|queue
operator|.
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|offswitchResourcesUpdated
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|offswitchResourcesUpdated
return|;
block|}
DECL|method|internalAddResourceRequests (boolean recoverPreemptedRequestForAContainer, List<ResourceRequest> resourceRequests)
specifier|private
name|boolean
name|internalAddResourceRequests
parameter_list|(
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|resourceRequests
operator|||
name|resourceRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// A map to group resource requests and dedup
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|dedupRequests
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Group resource request by schedulerRequestKey and resourceName
for|for
control|(
name|ResourceRequest
name|request
range|:
name|resourceRequests
control|)
block|{
name|SchedulerRequestKey
name|schedulerKey
init|=
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dedupRequests
operator|.
name|containsKey
argument_list|(
name|schedulerKey
argument_list|)
condition|)
block|{
name|dedupRequests
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dedupRequests
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|put
argument_list|(
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|internalAddResourceRequests
argument_list|(
name|recoverPreemptedRequestForAContainer
argument_list|,
name|dedupRequests
argument_list|)
return|;
block|}
DECL|method|updatePendingResources (PendingAskUpdateResult updateResult, SchedulerRequestKey schedulerKey, QueueMetrics metrics)
specifier|private
name|void
name|updatePendingResources
parameter_list|(
name|PendingAskUpdateResult
name|updateResult
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|QueueMetrics
name|metrics
parameter_list|)
block|{
name|PendingAsk
name|lastPendingAsk
init|=
name|updateResult
operator|.
name|getLastPendingAsk
argument_list|()
decl_stmt|;
name|PendingAsk
name|newPendingAsk
init|=
name|updateResult
operator|.
name|getNewPendingAsk
argument_list|()
decl_stmt|;
name|String
name|lastNodePartition
init|=
name|updateResult
operator|.
name|getLastNodePartition
argument_list|()
decl_stmt|;
name|String
name|newNodePartition
init|=
name|updateResult
operator|.
name|getNewNodePartition
argument_list|()
decl_stmt|;
name|int
name|lastRequestContainers
init|=
operator|(
name|lastPendingAsk
operator|!=
literal|null
operator|)
condition|?
name|lastPendingAsk
operator|.
name|getCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|newPendingAsk
operator|.
name|getCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|lastRequestContainers
operator|>=
literal|0
condition|)
block|{
name|schedulerKeys
operator|.
name|remove
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|schedulerKeyToAppPlacementAllocator
operator|.
name|remove
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"checking for deactivate of application :"
operator|+
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|checkForDeactivation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Activate application. Metrics activation is done here.
if|if
condition|(
name|lastRequestContainers
operator|<=
literal|0
condition|)
block|{
name|schedulerKeys
operator|.
name|add
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|abstractUsersManager
operator|.
name|activateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastPendingAsk
operator|!=
literal|null
condition|)
block|{
comment|// Deduct resources from metrics / pending resources of queue/app.
name|metrics
operator|.
name|decrPendingResources
argument_list|(
name|lastNodePartition
argument_list|,
name|user
argument_list|,
name|lastPendingAsk
operator|.
name|getCount
argument_list|()
argument_list|,
name|lastPendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|decreasedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|lastPendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|lastRequestContainers
argument_list|)
decl_stmt|;
name|queue
operator|.
name|decPendingResource
argument_list|(
name|lastNodePartition
argument_list|,
name|decreasedResource
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|lastNodePartition
argument_list|,
name|decreasedResource
argument_list|)
expr_stmt|;
block|}
comment|// Increase resources to metrics / pending resources of queue/app.
name|metrics
operator|.
name|incrPendingResources
argument_list|(
name|newNodePartition
argument_list|,
name|user
argument_list|,
name|newPendingAsk
operator|.
name|getCount
argument_list|()
argument_list|,
name|newPendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|increasedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|newPendingAsk
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|newPendingAsk
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|incPendingResource
argument_list|(
name|newNodePartition
argument_list|,
name|increasedResource
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|incPending
argument_list|(
name|newNodePartition
argument_list|,
name|increasedResource
argument_list|)
expr_stmt|;
block|}
DECL|method|addRequestedPartition (String partition)
specifier|public
name|void
name|addRequestedPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|requestedPartitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
DECL|method|decPendingResource (String partition, Resource toDecrease)
specifier|public
name|void
name|decPendingResource
parameter_list|(
name|String
name|partition
parameter_list|,
name|Resource
name|toDecrease
parameter_list|)
block|{
name|queue
operator|.
name|decPendingResource
argument_list|(
name|partition
argument_list|,
name|toDecrease
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|partition
argument_list|,
name|toDecrease
argument_list|)
expr_stmt|;
block|}
comment|/**    * The ApplicationMaster is updating the placesBlacklistedByApp used for    * containers other than AMs.    *    * @param blacklistAdditions    *          resources to be added to the userBlacklist    * @param blacklistRemovals    *          resources to be removed from the userBlacklist    */
DECL|method|updatePlacesBlacklistedByApp ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updatePlacesBlacklistedByApp
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
if|if
condition|(
name|updateBlacklistedPlaces
argument_list|(
name|placesBlacklistedByApp
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
condition|)
block|{
name|userBlacklistChanged
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the list of places that are blacklisted by the system. Today the    * system only blacklists places when it sees that AMs failed there    *    * @param blacklistAdditions    *          resources to be added to placesBlacklistedBySystem    * @param blacklistRemovals    *          resources to be removed from placesBlacklistedBySystem    */
DECL|method|updatePlacesBlacklistedBySystem ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updatePlacesBlacklistedBySystem
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|updateBlacklistedPlaces
argument_list|(
name|placesBlacklistedBySystem
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
DECL|method|updateBlacklistedPlaces (Set<String> blacklist, List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|private
specifier|static
name|boolean
name|updateBlacklistedPlaces
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|blacklist
init|)
block|{
if|if
condition|(
name|blacklistAdditions
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
name|blacklist
operator|.
name|addAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blacklistRemovals
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
name|blacklist
operator|.
name|removeAll
argument_list|(
name|blacklistRemovals
argument_list|)
operator|||
name|changed
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|getAndResetBlacklistChanged ()
specifier|public
name|boolean
name|getAndResetBlacklistChanged
parameter_list|()
block|{
return|return
name|userBlacklistChanged
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|getSchedulerKeys ()
specifier|public
name|Collection
argument_list|<
name|SchedulerRequestKey
argument_list|>
name|getSchedulerKeys
parameter_list|()
block|{
return|return
name|schedulerKeys
return|;
block|}
comment|/**    * Used by REST API to fetch ResourceRequest    * @return All pending ResourceRequests.    */
DECL|method|getAllResourceRequests ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getAllResourceRequests
parameter_list|()
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|AppPlacementAllocator
name|ap
range|:
name|schedulerKeyToAppPlacementAllocator
operator|.
name|values
argument_list|()
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|ap
operator|.
name|getResourceRequests
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getNextPendingAsk ()
specifier|public
name|PendingAsk
name|getNextPendingAsk
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|SchedulerRequestKey
name|firstRequestKey
init|=
name|schedulerKeys
operator|.
name|first
argument_list|()
decl_stmt|;
return|return
name|getPendingAsk
argument_list|(
name|firstRequestKey
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPendingAsk (SchedulerRequestKey schedulerKey)
specifier|public
name|PendingAsk
name|getPendingAsk
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
return|return
name|getPendingAsk
argument_list|(
name|schedulerKey
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
return|;
block|}
DECL|method|getPendingAsk (SchedulerRequestKey schedulerKey, String resourceName)
specifier|public
name|PendingAsk
name|getPendingAsk
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|AppPlacementAllocator
name|ap
init|=
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|ap
operator|==
literal|null
operator|)
condition|?
name|PendingAsk
operator|.
name|ZERO
else|:
name|ap
operator|.
name|getPendingAsk
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns if the place (node/rack today) is either blacklisted by the    * application (user) or the system.    *    * @param resourceName    *          the resourcename    * @param blacklistedBySystem    *          true if it should check amBlacklist    * @return true if its blacklisted    */
DECL|method|isPlaceBlacklisted (String resourceName, boolean blacklistedBySystem)
specifier|public
name|boolean
name|isPlaceBlacklisted
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|boolean
name|blacklistedBySystem
parameter_list|)
block|{
if|if
condition|(
name|blacklistedBySystem
condition|)
block|{
synchronized|synchronized
init|(
name|placesBlacklistedBySystem
init|)
block|{
return|return
name|placesBlacklistedBySystem
operator|.
name|contains
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|placesBlacklistedByApp
init|)
block|{
return|return
name|placesBlacklistedByApp
operator|.
name|contains
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|allocate (NodeType type, SchedulerNode node, SchedulerRequestKey schedulerKey, Container containerAllocated)
specifier|public
name|ContainerRequest
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Container
name|containerAllocated
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|containerAllocated
condition|)
block|{
name|updateMetricsForAllocatedContainer
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|containerAllocated
argument_list|)
expr_stmt|;
block|}
return|return
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|allocate
argument_list|(
name|schedulerKey
argument_list|,
name|type
argument_list|,
name|node
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkForDeactivation ()
specifier|public
name|void
name|checkForDeactivation
parameter_list|()
block|{
if|if
condition|(
name|schedulerKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|abstractUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|move (Queue newQueue)
specifier|public
name|void
name|move
parameter_list|(
name|Queue
name|newQueue
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QueueMetrics
name|oldMetrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|QueueMetrics
name|newMetrics
init|=
name|newQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|AppPlacementAllocator
name|ap
range|:
name|schedulerKeyToAppPlacementAllocator
operator|.
name|values
argument_list|()
control|)
block|{
name|PendingAsk
name|ask
init|=
name|ap
operator|.
name|getPendingAsk
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|ask
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|oldMetrics
operator|.
name|decrPendingResources
argument_list|(
name|ap
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|,
name|user
argument_list|,
name|ask
operator|.
name|getCount
argument_list|()
argument_list|,
name|ask
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|incrPendingResources
argument_list|(
name|ap
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|,
name|user
argument_list|,
name|ask
operator|.
name|getCount
argument_list|()
argument_list|,
name|ask
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|delta
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|ask
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|ask
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update Queue
name|queue
operator|.
name|decPendingResource
argument_list|(
name|ap
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|newQueue
operator|.
name|incPendingResource
argument_list|(
name|ap
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
name|oldMetrics
operator|.
name|moveAppFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|moveAppTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|abstractUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|abstractUsersManager
operator|=
name|newQueue
operator|.
name|getAbstractUsersManager
argument_list|()
expr_stmt|;
name|abstractUsersManager
operator|.
name|activateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|newQueue
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|// clear pending resources metrics for the application
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|AppPlacementAllocator
name|ap
range|:
name|schedulerKeyToAppPlacementAllocator
operator|.
name|values
argument_list|()
control|)
block|{
name|PendingAsk
name|ask
init|=
name|ap
operator|.
name|getPendingAsk
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|ask
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metrics
operator|.
name|decrPendingResources
argument_list|(
name|ap
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|,
name|user
argument_list|,
name|ask
operator|.
name|getCount
argument_list|()
argument_list|,
name|ask
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Queue
name|queue
operator|.
name|decPendingResource
argument_list|(
name|ap
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|ask
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|ask
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|finishAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|pending
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// Clear requests themselves
name|clearRequests
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setQueue (Queue queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|Queue
name|queue
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBlackList ()
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getBlackList
parameter_list|()
block|{
return|return
name|this
operator|.
name|placesBlacklistedByApp
return|;
block|}
DECL|method|getBlackListCopy ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlackListCopy
parameter_list|()
block|{
synchronized|synchronized
init|(
name|placesBlacklistedByApp
init|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|this
operator|.
name|placesBlacklistedByApp
argument_list|)
return|;
block|}
block|}
DECL|method|transferStateFromPreviousAppSchedulingInfo ( AppSchedulingInfo appInfo)
specifier|public
name|void
name|transferStateFromPreviousAppSchedulingInfo
parameter_list|(
name|AppSchedulingInfo
name|appInfo
parameter_list|)
block|{
comment|// This should not require locking the placesBlacklistedByApp since it will
comment|// not be used by this instance until after setCurrentAppAttempt.
name|this
operator|.
name|placesBlacklistedByApp
operator|=
name|appInfo
operator|.
name|getBlackList
argument_list|()
expr_stmt|;
block|}
DECL|method|recoverContainer (RMContainer rmContainer, String partition)
specifier|public
name|void
name|recoverContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|.
name|getExecutionType
argument_list|()
operator|!=
name|ExecutionType
operator|.
name|GUARANTEED
condition|)
block|{
return|return;
block|}
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
condition|)
block|{
comment|// If there was any container to recover, the application was
comment|// running from scheduler's POV.
name|pending
operator|=
literal|false
expr_stmt|;
name|metrics
operator|.
name|runAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|// Container is completed. Skip recovering resources.
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
condition|)
block|{
return|return;
block|}
name|metrics
operator|.
name|allocateResources
argument_list|(
name|partition
argument_list|,
name|user
argument_list|,
literal|1
argument_list|,
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * In async environment, pending resource request could be updated during    * scheduling, this method checks pending request before allocating    */
DECL|method|checkAllocation (NodeType type, SchedulerNode node, SchedulerRequestKey schedulerKey)
specifier|public
name|boolean
name|checkAllocation
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|AppPlacementAllocator
name|ap
init|=
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ap
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|ap
operator|.
name|canAllocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMetricsForAllocatedContainer (NodeType type, SchedulerNode node, Container containerAllocated)
specifier|private
name|void
name|updateMetricsForAllocatedContainer
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Container
name|containerAllocated
parameter_list|)
block|{
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
condition|)
block|{
comment|// once an allocation is done we assume the application is
comment|// running from scheduler's POV.
name|pending
operator|=
literal|false
expr_stmt|;
name|metrics
operator|.
name|runAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|containerAllocated
operator|.
name|getId
argument_list|()
operator|+
literal|" host="
operator|+
name|containerAllocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|containerAllocated
operator|.
name|getResource
argument_list|()
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|allocateResources
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|user
argument_list|,
literal|1
argument_list|,
name|containerAllocated
operator|.
name|getResource
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incrNodeTypeAggregations
argument_list|(
name|user
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|// Get AppPlacementAllocator by specified schedulerKey
DECL|method|getAppPlacementAllocator ( SchedulerRequestKey schedulerkey)
specifier|public
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
name|AppPlacementAllocator
argument_list|<
name|N
argument_list|>
name|getAppPlacementAllocator
parameter_list|(
name|SchedulerRequestKey
name|schedulerkey
parameter_list|)
block|{
return|return
operator|(
name|AppPlacementAllocator
argument_list|<
name|N
argument_list|>
operator|)
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerkey
argument_list|)
return|;
block|}
comment|/**    * Can delay to next?.    *    * @param schedulerKey schedulerKey    * @param resourceName resourceName    *    * @return If request exists, return {relaxLocality}    *         Otherwise, return true.    */
DECL|method|canDelayTo ( SchedulerRequestKey schedulerKey, String resourceName)
specifier|public
name|boolean
name|canDelayTo
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|AppPlacementAllocator
name|ap
init|=
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|ap
operator|==
literal|null
operator|)
operator|||
name|ap
operator|.
name|canDelayTo
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Pre-check node to see if it satisfy the given schedulerKey and    * scheduler mode.    *    * @param schedulerKey schedulerKey    * @param schedulerNode schedulerNode    * @param schedulingMode schedulingMode    * @return can use the node or not.    */
DECL|method|precheckNode (SchedulerRequestKey schedulerKey, SchedulerNode schedulerNode, SchedulingMode schedulingMode)
specifier|public
name|boolean
name|precheckNode
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|SchedulerNode
name|schedulerNode
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|AppPlacementAllocator
name|ap
init|=
name|schedulerKeyToAppPlacementAllocator
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|ap
operator|!=
literal|null
operator|)
operator|&&
name|ap
operator|.
name|precheckNode
argument_list|(
name|schedulerNode
argument_list|,
name|schedulingMode
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

