begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|LocalitySchedulingPlacementSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|ResourceRequestUpdateResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|SchedulingPlacementSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * This class keeps track of all the consumption of an application. This also  * keeps track of current running/completed containers for the application.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|AppSchedulingInfo
specifier|public
class|class
name|AppSchedulingInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppSchedulingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|containerIdCounter
specifier|private
specifier|final
name|AtomicLong
name|containerIdCounter
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|queue
specifier|private
name|Queue
name|queue
decl_stmt|;
DECL|field|activeUsersManager
specifier|private
name|ActiveUsersManager
name|activeUsersManager
decl_stmt|;
comment|// whether accepted/allocated by scheduler
DECL|field|pending
specifier|private
specifier|volatile
name|boolean
name|pending
init|=
literal|true
decl_stmt|;
DECL|field|appResourceUsage
specifier|private
name|ResourceUsage
name|appResourceUsage
decl_stmt|;
DECL|field|userBlacklistChanged
specifier|private
name|AtomicBoolean
name|userBlacklistChanged
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Set of places (nodes / racks) blacklisted by the system. Today, this only
comment|// has places blacklisted for AM containers.
DECL|field|placesBlacklistedBySystem
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|placesBlacklistedBySystem
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|placesBlacklistedByApp
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|placesBlacklistedByApp
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requestedPartitions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|requestedPartitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Integer
argument_list|>
DECL|field|schedulerKeys
name|schedulerKeys
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|SchedulingPlacementSet
argument_list|<
name|SchedulerNode
argument_list|>
argument_list|>
DECL|field|schedulerKeyToPlacementSets
name|schedulerKeyToPlacementSets
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
DECL|field|containerIncreaseRequestMap
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
argument_list|>
name|containerIncreaseRequestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|updateContext
specifier|public
specifier|final
name|ContainerUpdateContext
name|updateContext
decl_stmt|;
DECL|method|AppSchedulingInfo (ApplicationAttemptId appAttemptId, String user, Queue queue, ActiveUsersManager activeUsersManager, long epoch, ResourceUsage appResourceUsage)
specifier|public
name|AppSchedulingInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|long
name|epoch
parameter_list|,
name|ResourceUsage
name|appResourceUsage
parameter_list|)
block|{
name|this
operator|.
name|applicationAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|activeUsersManager
operator|=
name|activeUsersManager
expr_stmt|;
name|this
operator|.
name|containerIdCounter
operator|=
operator|new
name|AtomicLong
argument_list|(
name|epoch
operator|<<
name|ResourceManager
operator|.
name|EPOCH_BIT_SHIFT
argument_list|)
expr_stmt|;
name|this
operator|.
name|appResourceUsage
operator|=
name|appResourceUsage
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|updateContext
operator|=
operator|new
name|ContainerUpdateContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|applicationAttemptId
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getNewContainerId ()
specifier|public
name|long
name|getNewContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerIdCounter
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|queue
operator|.
name|getQueueName
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isPending ()
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
DECL|method|getRequestedPartitions ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRequestedPartitions
parameter_list|()
block|{
return|return
name|requestedPartitions
return|;
block|}
comment|/**    * Clear any pending requests from this application.    */
DECL|method|clearRequests ()
specifier|private
name|void
name|clearRequests
parameter_list|()
block|{
name|schedulerKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|schedulerKeyToPlacementSets
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" requests cleared"
argument_list|)
expr_stmt|;
block|}
DECL|method|hasIncreaseRequest (NodeId nodeId)
specifier|public
name|boolean
name|hasIncreaseRequest
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|containerIncreaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|requestsOnNode
operator|==
literal|null
condition|?
literal|false
else|:
name|requestsOnNode
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
DECL|method|getIncreaseRequests (NodeId nodeId, SchedulerRequestKey schedulerKey)
name|getIncreaseRequests
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|containerIncreaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|requestsOnNode
operator|==
literal|null
condition|?
literal|null
else|:
name|requestsOnNode
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * return true if any of the existing increase requests are updated,    *        false if none of them are updated    */
DECL|method|updateIncreaseRequests ( List<SchedContainerChangeRequest> increaseRequests)
specifier|public
name|boolean
name|updateIncreaseRequests
parameter_list|(
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
name|increaseRequests
parameter_list|)
block|{
name|boolean
name|resourceUpdated
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedContainerChangeRequest
name|r
range|:
name|increaseRequests
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|RMContainerState
operator|.
name|RUNNING
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"rmContainer's state is not RUNNING, for increase request"
operator|+
literal|" with container-id="
operator|+
name|r
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|RMServerUtils
operator|.
name|checkSchedContainerChangeRequest
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error happens when checking increase request, Ignoring.."
operator|+
literal|" exception="
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeId
name|nodeId
init|=
name|r
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|containerIncreaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
name|requestsOnNode
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|containerIncreaseRequestMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|requestsOnNode
argument_list|)
expr_stmt|;
block|}
name|SchedContainerChangeRequest
name|prevChangeRequest
init|=
name|getIncreaseRequest
argument_list|(
name|nodeId
argument_list|,
name|r
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedSchedulerKey
argument_list|()
argument_list|,
name|r
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|prevChangeRequest
condition|)
block|{
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|prevChangeRequest
operator|.
name|getTargetCapacity
argument_list|()
argument_list|,
name|r
operator|.
name|getTargetCapacity
argument_list|()
argument_list|)
condition|)
block|{
comment|// increase request hasn't changed
continue|continue;
block|}
comment|// remove the old one, as we will use the new one going forward
name|removeIncreaseRequest
argument_list|(
name|nodeId
argument_list|,
name|prevChangeRequest
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedSchedulerKey
argument_list|()
argument_list|,
name|prevChangeRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getTargetCapacity
argument_list|()
argument_list|,
name|r
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to increase container "
operator|+
name|r
operator|.
name|getContainerId
argument_list|()
operator|+
literal|", target capacity = previous capacity = "
operator|+
name|prevChangeRequest
operator|+
literal|". Will ignore this increase request."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// add the new one
name|resourceUpdated
operator|=
literal|true
expr_stmt|;
name|insertIncreaseRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceUpdated
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Insert increase request, adding any missing items in the data-structure    * hierarchy.    */
DECL|method|insertIncreaseRequest (SchedContainerChangeRequest request)
specifier|private
name|void
name|insertIncreaseRequest
parameter_list|(
name|SchedContainerChangeRequest
name|request
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|SchedulerRequestKey
name|schedulerKey
init|=
name|request
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedSchedulerKey
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|containerIncreaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
name|requestsOnNode
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|containerIncreaseRequestMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|requestsOnNode
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|requestsOnNodeWithPriority
init|=
name|requestsOnNode
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNodeWithPriority
condition|)
block|{
name|requestsOnNodeWithPriority
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|requestsOnNode
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
name|requestsOnNodeWithPriority
argument_list|)
expr_stmt|;
name|incrementSchedulerKeyReference
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
name|requestsOnNodeWithPriority
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// update resources
name|String
name|partition
init|=
name|request
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|Resource
name|delta
init|=
name|request
operator|.
name|getDeltaCapacity
argument_list|()
decl_stmt|;
name|appResourceUsage
operator|.
name|incPending
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|queue
operator|.
name|incPendingResource
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added increase request:"
operator|+
name|request
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" delta="
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|incrementSchedulerKeyReference ( SchedulerRequestKey schedulerKey)
specifier|private
name|void
name|incrementSchedulerKeyReference
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|Integer
name|schedulerKeyCount
init|=
name|schedulerKeys
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerKeyCount
operator|==
literal|null
condition|)
block|{
name|schedulerKeys
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schedulerKeys
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
name|schedulerKeyCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decrementSchedulerKeyReference ( SchedulerRequestKey schedulerKey)
specifier|public
name|void
name|decrementSchedulerKeyReference
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|Integer
name|schedulerKeyCount
init|=
name|schedulerKeys
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerKeyCount
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|schedulerKeyCount
operator|>
literal|1
condition|)
block|{
name|schedulerKeys
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
name|schedulerKeyCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schedulerKeys
operator|.
name|remove
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeIncreaseRequest (NodeId nodeId, SchedulerRequestKey schedulerKey, ContainerId containerId)
specifier|public
name|boolean
name|removeIncreaseRequest
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|containerIncreaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|requestsOnNodeWithPriority
init|=
name|requestsOnNode
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNodeWithPriority
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SchedContainerChangeRequest
name|request
init|=
name|requestsOnNodeWithPriority
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
comment|// remove hierarchies if it becomes empty
if|if
condition|(
name|requestsOnNodeWithPriority
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestsOnNode
operator|.
name|remove
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|decrementSchedulerKeyReference
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestsOnNode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containerIncreaseRequestMap
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// update queue's pending resource if request exists
name|String
name|partition
init|=
name|request
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|Resource
name|delta
init|=
name|request
operator|.
name|getDeltaCapacity
argument_list|()
decl_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|queue
operator|.
name|decPendingResource
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"remove increase request:"
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getIncreaseRequest (NodeId nodeId, SchedulerRequestKey schedulerKey, ContainerId containerId)
specifier|public
name|SchedContainerChangeRequest
name|getIncreaseRequest
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|containerIncreaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|requestsOnNodeWithPriority
init|=
name|requestsOnNode
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
return|return
name|requestsOnNodeWithPriority
operator|==
literal|null
condition|?
literal|null
else|:
name|requestsOnNodeWithPriority
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getUpdateContext ()
specifier|public
name|ContainerUpdateContext
name|getUpdateContext
parameter_list|()
block|{
return|return
name|updateContext
return|;
block|}
comment|/**    * The ApplicationMaster is updating resource requirements for the    * application, by asking for more resources and releasing resources acquired    * by the application.    *    * @param requests    *          resources to be acquired    * @param recoverPreemptedRequestForAContainer    *          recover ResourceRequest on preemption    * @return true if any resource was updated, false otherwise    */
DECL|method|updateResourceRequests (List<ResourceRequest> requests, boolean recoverPreemptedRequestForAContainer)
specifier|public
name|boolean
name|updateResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
parameter_list|,
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|requests
operator|||
name|requests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Flag to track if any incoming requests update "ANY" requests
name|boolean
name|offswitchResourcesUpdated
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// A map to group resource requests and dedup
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|dedupRequests
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Group resource request by schedulerRequestKey and resourceName
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
name|SchedulerRequestKey
name|schedulerKey
init|=
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dedupRequests
operator|.
name|containsKey
argument_list|(
name|schedulerKey
argument_list|)
condition|)
block|{
name|dedupRequests
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dedupRequests
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|put
argument_list|(
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Update scheduling placement set
name|offswitchResourcesUpdated
operator|=
name|addToPlacementSets
argument_list|(
name|recoverPreemptedRequestForAContainer
argument_list|,
name|dedupRequests
argument_list|)
expr_stmt|;
return|return
name|offswitchResourcesUpdated
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addToPlacementSets ( boolean recoverPreemptedRequestForAContainer, Map<SchedulerRequestKey, Map<String, ResourceRequest>> dedupRequests)
name|boolean
name|addToPlacementSets
parameter_list|(
name|boolean
name|recoverPreemptedRequestForAContainer
parameter_list|,
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|dedupRequests
parameter_list|)
block|{
name|boolean
name|offswitchResourcesUpdated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|entry
range|:
name|dedupRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SchedulerRequestKey
name|schedulerRequestKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|schedulerKeyToPlacementSets
operator|.
name|containsKey
argument_list|(
name|schedulerRequestKey
argument_list|)
condition|)
block|{
name|schedulerKeyToPlacementSets
operator|.
name|put
argument_list|(
name|schedulerRequestKey
argument_list|,
operator|new
name|LocalitySchedulingPlacementSet
argument_list|<>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update placement set
name|ResourceRequestUpdateResult
name|pendingAmountChanges
init|=
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerRequestKey
argument_list|)
operator|.
name|updateResourceRequests
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|recoverPreemptedRequestForAContainer
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|pendingAmountChanges
condition|)
block|{
name|updatePendingResources
argument_list|(
name|pendingAmountChanges
operator|.
name|getLastAnyResourceRequest
argument_list|()
argument_list|,
name|pendingAmountChanges
operator|.
name|getNewResourceRequest
argument_list|()
argument_list|,
name|schedulerRequestKey
argument_list|,
name|queue
operator|.
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|offswitchResourcesUpdated
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|offswitchResourcesUpdated
return|;
block|}
DECL|method|updatePendingResources (ResourceRequest lastRequest, ResourceRequest request, SchedulerRequestKey schedulerKey, QueueMetrics metrics)
specifier|private
name|void
name|updatePendingResources
parameter_list|(
name|ResourceRequest
name|lastRequest
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|QueueMetrics
name|metrics
parameter_list|)
block|{
name|int
name|lastRequestContainers
init|=
operator|(
name|lastRequest
operator|!=
literal|null
operator|)
condition|?
name|lastRequest
operator|.
name|getNumContainers
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|lastRequestContainers
operator|>=
literal|0
condition|)
block|{
name|decrementSchedulerKeyReference
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"checking for deactivate of application :"
operator|+
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|checkForDeactivation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Activate application. Metrics activation is done here.
if|if
condition|(
name|lastRequestContainers
operator|<=
literal|0
condition|)
block|{
name|incrementSchedulerKeyReference
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|activeUsersManager
operator|.
name|activateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
name|Resource
name|lastRequestCapability
init|=
name|lastRequest
operator|!=
literal|null
condition|?
name|lastRequest
operator|.
name|getCapability
argument_list|()
else|:
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|lastRequestContainers
argument_list|,
name|lastRequestCapability
argument_list|)
expr_stmt|;
comment|// update queue:
name|Resource
name|increasedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|incPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|increasedResource
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|incPending
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|increasedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
condition|)
block|{
name|Resource
name|decreasedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|lastRequestCapability
argument_list|,
name|lastRequestContainers
argument_list|)
decl_stmt|;
name|queue
operator|.
name|decPendingResource
argument_list|(
name|lastRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|decreasedResource
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|lastRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|decreasedResource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRequestedPartition (String partition)
specifier|public
name|void
name|addRequestedPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|requestedPartitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
DECL|method|decPendingResource (String partition, Resource toDecrease)
specifier|public
name|void
name|decPendingResource
parameter_list|(
name|String
name|partition
parameter_list|,
name|Resource
name|toDecrease
parameter_list|)
block|{
name|queue
operator|.
name|decPendingResource
argument_list|(
name|partition
argument_list|,
name|toDecrease
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|partition
argument_list|,
name|toDecrease
argument_list|)
expr_stmt|;
block|}
DECL|method|hasRequestLabelChanged (ResourceRequest requestOne, ResourceRequest requestTwo)
specifier|private
name|boolean
name|hasRequestLabelChanged
parameter_list|(
name|ResourceRequest
name|requestOne
parameter_list|,
name|ResourceRequest
name|requestTwo
parameter_list|)
block|{
name|String
name|requestOneLabelExp
init|=
name|requestOne
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|String
name|requestTwoLabelExp
init|=
name|requestTwo
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
comment|// First request label expression can be null and second request
comment|// is not null then we have to consider it as changed.
if|if
condition|(
operator|(
literal|null
operator|==
name|requestOneLabelExp
operator|)
operator|&&
operator|(
literal|null
operator|!=
name|requestTwoLabelExp
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// If the label is not matching between both request when
comment|// requestOneLabelExp is not null.
return|return
operator|(
operator|(
literal|null
operator|!=
name|requestOneLabelExp
operator|)
operator|&&
operator|!
operator|(
name|requestOneLabelExp
operator|.
name|equals
argument_list|(
name|requestTwoLabelExp
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/**    * The ApplicationMaster is updating the placesBlacklistedByApp used for    * containers other than AMs.    *    * @param blacklistAdditions    *          resources to be added to the userBlacklist    * @param blacklistRemovals    *          resources to be removed from the userBlacklist    */
DECL|method|updatePlacesBlacklistedByApp ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updatePlacesBlacklistedByApp
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
if|if
condition|(
name|updateBlacklistedPlaces
argument_list|(
name|placesBlacklistedByApp
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
condition|)
block|{
name|userBlacklistChanged
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the list of places that are blacklisted by the system. Today the    * system only blacklists places when it sees that AMs failed there    *    * @param blacklistAdditions    *          resources to be added to placesBlacklistedBySystem    * @param blacklistRemovals    *          resources to be removed from placesBlacklistedBySystem    */
DECL|method|updatePlacesBlacklistedBySystem ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updatePlacesBlacklistedBySystem
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|updateBlacklistedPlaces
argument_list|(
name|placesBlacklistedBySystem
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
DECL|method|updateBlacklistedPlaces (Set<String> blacklist, List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|private
specifier|static
name|boolean
name|updateBlacklistedPlaces
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|blacklist
init|)
block|{
if|if
condition|(
name|blacklistAdditions
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
name|blacklist
operator|.
name|addAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blacklistRemovals
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
name|blacklist
operator|.
name|removeAll
argument_list|(
name|blacklistRemovals
argument_list|)
operator|||
name|changed
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|getAndResetBlacklistChanged ()
specifier|public
name|boolean
name|getAndResetBlacklistChanged
parameter_list|()
block|{
return|return
name|userBlacklistChanged
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|getSchedulerKeys ()
specifier|public
name|Collection
argument_list|<
name|SchedulerRequestKey
argument_list|>
name|getSchedulerKeys
parameter_list|()
block|{
return|return
name|schedulerKeys
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getResourceRequests ( SchedulerRequestKey schedulerKey)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|getResourceRequests
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|SchedulingPlacementSet
name|ps
init|=
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ps
condition|)
block|{
return|return
name|ps
operator|.
name|getResourceRequests
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
DECL|method|getAllResourceRequests ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getAllResourceRequests
parameter_list|()
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulingPlacementSet
name|ps
range|:
name|schedulerKeyToPlacementSets
operator|.
name|values
argument_list|()
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|ps
operator|.
name|getResourceRequests
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getResourceRequest (SchedulerRequestKey schedulerKey, String resourceName)
specifier|public
name|ResourceRequest
name|getResourceRequest
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|SchedulingPlacementSet
name|ps
init|=
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|ps
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ps
operator|.
name|getResourceRequest
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getResource (SchedulerRequestKey schedulerKey)
specifier|public
name|Resource
name|getResource
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ResourceRequest
name|request
init|=
name|getResourceRequest
argument_list|(
name|schedulerKey
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getCapability
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Method to return the next resource request to be serviced.    *    * In the initial implementation, we just pick any {@link ResourceRequest}    * corresponding to the highest priority.    *    * @return next {@link ResourceRequest} to allocate resources for.    */
annotation|@
name|Unstable
DECL|method|getNextResourceRequest ()
specifier|public
specifier|synchronized
name|ResourceRequest
name|getNextResourceRequest
parameter_list|()
block|{
name|SchedulingPlacementSet
argument_list|<
name|SchedulerNode
argument_list|>
name|ps
init|=
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerKeys
operator|.
name|firstKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ps
condition|)
block|{
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|ps
operator|.
name|getResourceRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
return|return
name|rr
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns if the place (node/rack today) is either blacklisted by the    * application (user) or the system    *    * @param resourceName    *          the resourcename    * @param blacklistedBySystem    *          true if it should check amBlacklist    * @return true if its blacklisted    */
DECL|method|isPlaceBlacklisted (String resourceName, boolean blacklistedBySystem)
specifier|public
name|boolean
name|isPlaceBlacklisted
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|boolean
name|blacklistedBySystem
parameter_list|)
block|{
if|if
condition|(
name|blacklistedBySystem
condition|)
block|{
synchronized|synchronized
init|(
name|placesBlacklistedBySystem
init|)
block|{
return|return
name|placesBlacklistedBySystem
operator|.
name|contains
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|placesBlacklistedByApp
init|)
block|{
return|return
name|placesBlacklistedByApp
operator|.
name|contains
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|increaseContainer (SchedContainerChangeRequest increaseRequest)
specifier|public
name|void
name|increaseContainer
parameter_list|(
name|SchedContainerChangeRequest
name|increaseRequest
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|increaseRequest
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|SchedulerRequestKey
name|schedulerKey
init|=
name|increaseRequest
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedSchedulerKey
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|increaseRequest
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Resource
name|deltaCapacity
init|=
name|increaseRequest
operator|.
name|getDeltaCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocated increase request : applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|containerId
operator|+
literal|" host="
operator|+
name|increaseRequest
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|deltaCapacity
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Set queue metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
name|deltaCapacity
argument_list|)
expr_stmt|;
comment|// remove the increase request from pending increase request map
name|removeIncreaseRequest
argument_list|(
name|nodeId
argument_list|,
name|schedulerKey
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// update usage
name|appResourceUsage
operator|.
name|incUsed
argument_list|(
name|increaseRequest
operator|.
name|getNodePartition
argument_list|()
argument_list|,
name|deltaCapacity
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decreaseContainer (SchedContainerChangeRequest decreaseRequest)
specifier|public
name|void
name|decreaseContainer
parameter_list|(
name|SchedContainerChangeRequest
name|decreaseRequest
parameter_list|)
block|{
comment|// Delta is negative when it's a decrease request
name|Resource
name|absDelta
init|=
name|Resources
operator|.
name|negate
argument_list|(
name|decreaseRequest
operator|.
name|getDeltaCapacity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decrease container : applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|decreaseRequest
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" host="
operator|+
name|decreaseRequest
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|absDelta
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Set queue metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|releaseResources
argument_list|(
name|user
argument_list|,
name|absDelta
argument_list|)
expr_stmt|;
comment|// update usage
name|appResourceUsage
operator|.
name|decUsed
argument_list|(
name|decreaseRequest
operator|.
name|getNodePartition
argument_list|()
argument_list|,
name|absDelta
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|allocate (NodeType type, SchedulerNode node, SchedulerRequestKey schedulerKey, ResourceRequest request, Container containerAllocated)
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|Container
name|containerAllocated
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|containerAllocated
condition|)
block|{
name|updateMetricsForAllocatedContainer
argument_list|(
name|type
argument_list|,
name|containerAllocated
argument_list|)
expr_stmt|;
block|}
return|return
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
operator|.
name|allocate
argument_list|(
name|schedulerKey
argument_list|,
name|type
argument_list|,
name|node
argument_list|,
name|request
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|allocate (NodeType type, SchedulerNode node, SchedulerRequestKey schedulerKey, Container containerAllocated)
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Container
name|containerAllocated
parameter_list|)
block|{
return|return
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|schedulerKey
argument_list|,
literal|null
argument_list|,
name|containerAllocated
argument_list|)
return|;
block|}
DECL|method|checkForDeactivation ()
specifier|public
name|void
name|checkForDeactivation
parameter_list|()
block|{
if|if
condition|(
name|schedulerKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|activeUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|move (Queue newQueue)
specifier|public
name|void
name|move
parameter_list|(
name|Queue
name|newQueue
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QueueMetrics
name|oldMetrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|QueueMetrics
name|newMetrics
init|=
name|newQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingPlacementSet
name|ps
range|:
name|schedulerKeyToPlacementSets
operator|.
name|values
argument_list|()
control|)
block|{
name|ResourceRequest
name|request
init|=
name|ps
operator|.
name|getResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|oldMetrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|incrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|delta
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update Queue
name|queue
operator|.
name|decPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|newQueue
operator|.
name|incPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
name|oldMetrics
operator|.
name|moveAppFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|moveAppTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|activeUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|activeUsersManager
operator|=
name|newQueue
operator|.
name|getActiveUsersManager
argument_list|()
expr_stmt|;
name|activeUsersManager
operator|.
name|activateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|newQueue
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|// clear pending resources metrics for the application
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingPlacementSet
name|ps
range|:
name|schedulerKeyToPlacementSets
operator|.
name|values
argument_list|()
control|)
block|{
name|ResourceRequest
name|request
init|=
name|ps
operator|.
name|getResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Queue
name|queue
operator|.
name|decPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|finishAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|pending
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// Clear requests themselves
name|clearRequests
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setQueue (Queue queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|Queue
name|queue
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBlackList ()
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getBlackList
parameter_list|()
block|{
return|return
name|this
operator|.
name|placesBlacklistedByApp
return|;
block|}
DECL|method|getBlackListCopy ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlackListCopy
parameter_list|()
block|{
synchronized|synchronized
init|(
name|placesBlacklistedByApp
init|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|this
operator|.
name|placesBlacklistedByApp
argument_list|)
return|;
block|}
block|}
DECL|method|transferStateFromPreviousAppSchedulingInfo ( AppSchedulingInfo appInfo)
specifier|public
name|void
name|transferStateFromPreviousAppSchedulingInfo
parameter_list|(
name|AppSchedulingInfo
name|appInfo
parameter_list|)
block|{
comment|// This should not require locking the placesBlacklistedByApp since it will
comment|// not be used by this instance until after setCurrentAppAttempt.
name|this
operator|.
name|placesBlacklistedByApp
operator|=
name|appInfo
operator|.
name|getBlackList
argument_list|()
expr_stmt|;
block|}
DECL|method|recoverContainer (RMContainer rmContainer)
specifier|public
name|void
name|recoverContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
condition|)
block|{
comment|// If there was any container to recover, the application was
comment|// running from scheduler's POV.
name|pending
operator|=
literal|false
expr_stmt|;
name|metrics
operator|.
name|runAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|// Container is completed. Skip recovering resources.
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
condition|)
block|{
return|return;
block|}
name|metrics
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * In async environment, pending resource request could be updated during    * scheduling, this method checks pending request before allocating    */
DECL|method|checkAllocation (NodeType type, SchedulerNode node, SchedulerRequestKey schedulerKey)
specifier|public
name|boolean
name|checkAllocation
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|SchedulingPlacementSet
name|ps
init|=
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ps
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|ps
operator|.
name|canAllocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMetricsForAllocatedContainer ( NodeType type, Container containerAllocated)
specifier|private
name|void
name|updateMetricsForAllocatedContainer
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|Container
name|containerAllocated
parameter_list|)
block|{
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
condition|)
block|{
comment|// once an allocation is done we assume the application is
comment|// running from scheduler's POV.
name|pending
operator|=
literal|false
expr_stmt|;
name|metrics
operator|.
name|runAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|containerAllocated
operator|.
name|getId
argument_list|()
operator|+
literal|" host="
operator|+
name|containerAllocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|containerAllocated
operator|.
name|getResource
argument_list|()
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|containerAllocated
operator|.
name|getResource
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrNodeTypeAggregations
argument_list|(
name|user
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|// Get placement-set by specified schedulerKey
comment|// Now simply return all node of the input clusterPlacementSet
DECL|method|getSchedulingPlacementSet ( SchedulerRequestKey schedulerkey)
specifier|public
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
name|SchedulingPlacementSet
argument_list|<
name|N
argument_list|>
name|getSchedulingPlacementSet
parameter_list|(
name|SchedulerRequestKey
name|schedulerkey
parameter_list|)
block|{
return|return
operator|(
name|SchedulingPlacementSet
argument_list|<
name|N
argument_list|>
operator|)
name|schedulerKeyToPlacementSets
operator|.
name|get
argument_list|(
name|schedulerkey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

