begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * This class keeps track of all the consumption of an application. This also  * keeps track of current running/completed containers for the application.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|AppSchedulingInfo
specifier|public
class|class
name|AppSchedulingInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppSchedulingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|applicationId
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|queueName
specifier|private
name|String
name|queueName
decl_stmt|;
DECL|field|queue
name|Queue
name|queue
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
decl_stmt|;
comment|// TODO making containerIdCounter long
DECL|field|containerIdCounter
specifier|private
specifier|final
name|AtomicLong
name|containerIdCounter
decl_stmt|;
DECL|field|EPOCH_BIT_SHIFT
specifier|private
specifier|final
name|int
name|EPOCH_BIT_SHIFT
init|=
literal|40
decl_stmt|;
DECL|field|priorities
specifier|final
name|Set
argument_list|<
name|Priority
argument_list|>
name|priorities
init|=
operator|new
name|TreeSet
argument_list|<
name|Priority
argument_list|>
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|Comparator
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|resourceRequestMap
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|resourceRequestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
DECL|field|increaseRequestMap
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
argument_list|>
name|increaseRequestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|userBlacklist
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|userBlacklist
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|amBlacklist
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|amBlacklist
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|//private final ApplicationStore store;
DECL|field|activeUsersManager
specifier|private
name|ActiveUsersManager
name|activeUsersManager
decl_stmt|;
comment|/* Allocated by scheduler */
DECL|field|pending
name|boolean
name|pending
init|=
literal|true
decl_stmt|;
comment|// for app metrics
DECL|field|appResourceUsage
specifier|private
name|ResourceUsage
name|appResourceUsage
decl_stmt|;
DECL|method|AppSchedulingInfo (ApplicationAttemptId appAttemptId, String user, Queue queue, ActiveUsersManager activeUsersManager, long epoch, ResourceUsage appResourceUsage)
specifier|public
name|AppSchedulingInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|long
name|epoch
parameter_list|,
name|ResourceUsage
name|appResourceUsage
parameter_list|)
block|{
name|this
operator|.
name|applicationAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queue
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|activeUsersManager
operator|=
name|activeUsersManager
expr_stmt|;
name|this
operator|.
name|containerIdCounter
operator|=
operator|new
name|AtomicLong
argument_list|(
name|epoch
operator|<<
name|EPOCH_BIT_SHIFT
argument_list|)
expr_stmt|;
name|this
operator|.
name|appResourceUsage
operator|=
name|appResourceUsage
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|applicationAttemptId
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|isPending ()
specifier|public
specifier|synchronized
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
comment|/**    * Clear any pending requests from this application.    */
DECL|method|clearRequests ()
specifier|private
specifier|synchronized
name|void
name|clearRequests
parameter_list|()
block|{
name|priorities
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourceRequestMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" requests cleared"
argument_list|)
expr_stmt|;
block|}
DECL|method|getNewContainerId ()
specifier|public
name|long
name|getNewContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerIdCounter
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|hasIncreaseRequest (NodeId nodeId)
specifier|public
name|boolean
name|hasIncreaseRequest
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|increaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|requestsOnNode
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
DECL|method|getIncreaseRequests (NodeId nodeId, Priority priority)
name|getIncreaseRequests
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|increaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|requestsOnNode
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|updateIncreaseRequests ( List<SchedContainerChangeRequest> increaseRequests)
specifier|public
specifier|synchronized
name|boolean
name|updateIncreaseRequests
parameter_list|(
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
name|increaseRequests
parameter_list|)
block|{
name|boolean
name|resourceUpdated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SchedContainerChangeRequest
name|r
range|:
name|increaseRequests
control|)
block|{
name|NodeId
name|nodeId
init|=
name|r
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|increaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
name|requestsOnNode
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|increaseRequestMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|requestsOnNode
argument_list|)
expr_stmt|;
block|}
name|SchedContainerChangeRequest
name|prevChangeRequest
init|=
name|getIncreaseRequest
argument_list|(
name|nodeId
argument_list|,
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|prevChangeRequest
condition|)
block|{
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|prevChangeRequest
operator|.
name|getTargetCapacity
argument_list|()
argument_list|,
name|r
operator|.
name|getTargetCapacity
argument_list|()
argument_list|)
condition|)
block|{
comment|// New target capacity is as same as what we have, just ignore the new
comment|// one
continue|continue;
block|}
comment|// remove the old one
name|removeIncreaseRequest
argument_list|(
name|nodeId
argument_list|,
name|prevChangeRequest
operator|.
name|getPriority
argument_list|()
argument_list|,
name|prevChangeRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getTargetCapacity
argument_list|()
argument_list|,
name|r
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to increase/decrease container, "
operator|+
literal|"target capacity = previous capacity = "
operator|+
name|prevChangeRequest
operator|+
literal|" for container="
operator|+
name|r
operator|.
name|getContainerId
argument_list|()
operator|+
literal|". Will ignore this increase request"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// add the new one
name|resourceUpdated
operator|=
literal|true
expr_stmt|;
name|insertIncreaseRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceUpdated
return|;
block|}
comment|// insert increase request and add missing hierarchy if missing
DECL|method|insertIncreaseRequest (SchedContainerChangeRequest request)
specifier|private
name|void
name|insertIncreaseRequest
parameter_list|(
name|SchedContainerChangeRequest
name|request
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|Priority
name|priority
init|=
name|request
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|increaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
name|requestsOnNode
operator|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|increaseRequestMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|requestsOnNode
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|requestsOnNodeWithPriority
init|=
name|requestsOnNode
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNodeWithPriority
condition|)
block|{
name|requestsOnNodeWithPriority
operator|=
operator|new
name|TreeMap
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|()
expr_stmt|;
name|requestsOnNode
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|requestsOnNodeWithPriority
argument_list|)
expr_stmt|;
block|}
name|requestsOnNodeWithPriority
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// update resources
name|String
name|partition
init|=
name|request
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|Resource
name|delta
init|=
name|request
operator|.
name|getDeltaCapacity
argument_list|()
decl_stmt|;
name|appResourceUsage
operator|.
name|incPending
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|queue
operator|.
name|incPendingResource
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added increase request:"
operator|+
name|request
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" delta="
operator|+
name|request
operator|.
name|getDeltaCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// update priorities
name|priorities
operator|.
name|add
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
DECL|method|removeIncreaseRequest (NodeId nodeId, Priority priority, ContainerId containerId)
specifier|public
specifier|synchronized
name|boolean
name|removeIncreaseRequest
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|increaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|requestsOnNodeWithPriority
init|=
name|requestsOnNode
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNodeWithPriority
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SchedContainerChangeRequest
name|request
init|=
name|requestsOnNodeWithPriority
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
comment|// remove hierarchies if it becomes empty
if|if
condition|(
name|requestsOnNodeWithPriority
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestsOnNode
operator|.
name|remove
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestsOnNode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|increaseRequestMap
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// update queue's pending resource if request exists
name|String
name|partition
init|=
name|request
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|Resource
name|delta
init|=
name|request
operator|.
name|getDeltaCapacity
argument_list|()
decl_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|queue
operator|.
name|decPendingResource
argument_list|(
name|partition
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"remove increase request:"
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getIncreaseRequest (NodeId nodeId, Priority priority, ContainerId containerId)
specifier|public
name|SchedContainerChangeRequest
name|getIncreaseRequest
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
argument_list|>
name|requestsOnNode
init|=
name|increaseRequestMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNode
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|requestsOnNodeWithPriority
init|=
name|requestsOnNode
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|requestsOnNodeWithPriority
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|requestsOnNodeWithPriority
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
comment|/**    * The ApplicationMaster is updating resource requirements for the    * application, by asking for more resources and releasing resources acquired    * by the application.    *    * @param requests resources to be acquired    * @param recoverPreemptedRequest recover Resource Request on preemption    * @return true if any resource was updated, false else    */
DECL|method|updateResourceRequests ( List<ResourceRequest> requests, boolean recoverPreemptedRequest)
specifier|synchronized
specifier|public
name|boolean
name|updateResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
parameter_list|,
name|boolean
name|recoverPreemptedRequest
parameter_list|)
block|{
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|boolean
name|anyResourcesUpdated
init|=
literal|false
decl_stmt|;
comment|// Update resource requests
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
name|Priority
name|priority
init|=
name|request
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|String
name|resourceName
init|=
name|request
operator|.
name|getResourceName
argument_list|()
decl_stmt|;
name|boolean
name|updatePendingResources
init|=
literal|false
decl_stmt|;
name|ResourceRequest
name|lastRequest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceName
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"update:"
operator|+
literal|" application="
operator|+
name|applicationId
operator|+
literal|" request="
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
name|updatePendingResources
operator|=
literal|true
expr_stmt|;
name|anyResourcesUpdated
operator|=
literal|true
expr_stmt|;
comment|// Premature optimization?
comment|// Assumes that we won't see more than one priority request updated
comment|// in one call, reasonable assumption... however, it's totally safe
comment|// to activate same application more than once.
comment|// Thus we don't need another loop ala the one in decrementOutstanding()
comment|// which is needed during deactivate.
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|activeUsersManager
operator|.
name|activateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
name|ResourceRequest
name|previousAnyRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|resourceName
argument_list|)
decl_stmt|;
comment|// When there is change in ANY request label expression, we should
comment|// update label for all resource requests already added of same
comment|// priority as ANY resource request.
if|if
condition|(
operator|(
literal|null
operator|==
name|previousAnyRequest
operator|)
operator|||
name|isRequestLabelChanged
argument_list|(
name|previousAnyRequest
argument_list|,
name|request
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|resourceRequest
init|=
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceRequest
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ResourceRequest
name|r
range|:
name|resourceRequest
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|r
operator|.
name|setNodeLabelExpression
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|ResourceRequest
name|anyRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|anyRequest
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setNodeLabelExpression
argument_list|(
name|anyRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|asks
init|=
name|this
operator|.
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|asks
operator|==
literal|null
condition|)
block|{
name|asks
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|resourceRequestMap
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|asks
argument_list|)
expr_stmt|;
name|this
operator|.
name|priorities
operator|.
name|add
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|lastRequest
operator|=
name|asks
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoverPreemptedRequest
operator|&&
name|lastRequest
operator|!=
literal|null
condition|)
block|{
comment|// Increment the number of containers to 1, as it is recovering a
comment|// single container.
name|request
operator|.
name|setNumContainers
argument_list|(
name|lastRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|asks
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatePendingResources
condition|)
block|{
comment|// Similarly, deactivate application?
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"checking for deactivate of application :"
operator|+
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|checkForDeactivation
argument_list|()
expr_stmt|;
block|}
name|int
name|lastRequestContainers
init|=
name|lastRequest
operator|!=
literal|null
condition|?
name|lastRequest
operator|.
name|getNumContainers
argument_list|()
else|:
literal|0
decl_stmt|;
name|Resource
name|lastRequestCapability
init|=
name|lastRequest
operator|!=
literal|null
condition|?
name|lastRequest
operator|.
name|getCapability
argument_list|()
else|:
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|lastRequestContainers
argument_list|,
name|lastRequestCapability
argument_list|)
expr_stmt|;
comment|// update queue:
name|Resource
name|increasedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|incPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|increasedResource
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|incPending
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|increasedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
condition|)
block|{
name|Resource
name|decreasedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|lastRequestCapability
argument_list|,
name|lastRequestContainers
argument_list|)
decl_stmt|;
name|queue
operator|.
name|decPendingResource
argument_list|(
name|lastRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|decreasedResource
argument_list|)
expr_stmt|;
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|lastRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|decreasedResource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|anyResourcesUpdated
return|;
block|}
DECL|method|isRequestLabelChanged (ResourceRequest requestOne, ResourceRequest requestTwo)
specifier|private
name|boolean
name|isRequestLabelChanged
parameter_list|(
name|ResourceRequest
name|requestOne
parameter_list|,
name|ResourceRequest
name|requestTwo
parameter_list|)
block|{
name|String
name|requestOneLabelExp
init|=
name|requestOne
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|String
name|requestTwoLabelExp
init|=
name|requestTwo
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
return|return
operator|(
operator|!
operator|(
name|requestOneLabelExp
operator|.
name|equals
argument_list|(
name|requestTwoLabelExp
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/**    * The ApplicationMaster is updating the userBlacklist used for containers    * other than AMs.    *    * @param blacklistAdditions resources to be added to the userBlacklist    * @param blacklistRemovals resources to be removed from the userBlacklist    */
DECL|method|updateBlacklist ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updateBlacklist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|updateUserOrAMBlacklist
argument_list|(
name|userBlacklist
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
comment|/**    * RM is updating blacklist for AM containers.    * @param blacklistAdditions resources to be added to the amBlacklist    * @param blacklistRemovals resources to be added to the amBlacklist    */
DECL|method|updateAMBlacklist ( List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updateAMBlacklist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|updateUserOrAMBlacklist
argument_list|(
name|amBlacklist
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
DECL|method|updateUserOrAMBlacklist (Set<String> blacklist, List<String> blacklistAdditions, List<String> blacklistRemovals)
name|void
name|updateUserOrAMBlacklist
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
synchronized|synchronized
init|(
name|blacklist
init|)
block|{
if|if
condition|(
name|blacklistAdditions
operator|!=
literal|null
condition|)
block|{
name|blacklist
operator|.
name|addAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blacklistRemovals
operator|!=
literal|null
condition|)
block|{
name|blacklist
operator|.
name|removeAll
argument_list|(
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPriorities ()
specifier|synchronized
specifier|public
name|Collection
argument_list|<
name|Priority
argument_list|>
name|getPriorities
parameter_list|()
block|{
return|return
name|priorities
return|;
block|}
DECL|method|getResourceRequests ( Priority priority)
specifier|synchronized
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|getResourceRequests
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
return|return
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|getAllResourceRequests ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getAllResourceRequests
parameter_list|()
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|r
range|:
name|resourceRequestMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|r
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getResourceRequest (Priority priority, String resourceName)
specifier|synchronized
specifier|public
name|ResourceRequest
name|getResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|nodeRequests
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodeRequests
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|nodeRequests
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
DECL|method|getResource (Priority priority)
specifier|public
specifier|synchronized
name|Resource
name|getResource
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getCapability
argument_list|()
return|;
block|}
comment|/**    * Returns if the node is either blacklisted by the user or the system    * @param resourceName the resourcename    * @param useAMBlacklist true if it should check amBlacklist    * @return true if its blacklisted    */
DECL|method|isBlacklisted (String resourceName, boolean useAMBlacklist)
specifier|public
name|boolean
name|isBlacklisted
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|boolean
name|useAMBlacklist
parameter_list|)
block|{
if|if
condition|(
name|useAMBlacklist
condition|)
block|{
synchronized|synchronized
init|(
name|amBlacklist
init|)
block|{
return|return
name|amBlacklist
operator|.
name|contains
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|userBlacklist
init|)
block|{
return|return
name|userBlacklist
operator|.
name|contains
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|increaseContainer ( SchedContainerChangeRequest increaseRequest)
specifier|public
specifier|synchronized
name|void
name|increaseContainer
parameter_list|(
name|SchedContainerChangeRequest
name|increaseRequest
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|increaseRequest
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|Priority
name|priority
init|=
name|increaseRequest
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|increaseRequest
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocated increase request : applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|containerId
operator|+
literal|" host="
operator|+
name|increaseRequest
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|increaseRequest
operator|.
name|getDeltaCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set queue metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
literal|0
argument_list|,
name|increaseRequest
operator|.
name|getDeltaCapacity
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// remove the increase request from pending increase request map
name|removeIncreaseRequest
argument_list|(
name|nodeId
argument_list|,
name|priority
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// update usage
name|appResourceUsage
operator|.
name|incUsed
argument_list|(
name|increaseRequest
operator|.
name|getNodePartition
argument_list|()
argument_list|,
name|increaseRequest
operator|.
name|getDeltaCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|decreaseContainer ( SchedContainerChangeRequest decreaseRequest)
specifier|public
specifier|synchronized
name|void
name|decreaseContainer
parameter_list|(
name|SchedContainerChangeRequest
name|decreaseRequest
parameter_list|)
block|{
comment|// Delta is negative when it's a decrease request
name|Resource
name|absDelta
init|=
name|Resources
operator|.
name|negate
argument_list|(
name|decreaseRequest
operator|.
name|getDeltaCapacity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decrease container : applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|decreaseRequest
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" host="
operator|+
name|decreaseRequest
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|absDelta
argument_list|)
expr_stmt|;
block|}
comment|// Set queue metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|releaseResources
argument_list|(
name|user
argument_list|,
literal|0
argument_list|,
name|absDelta
argument_list|)
expr_stmt|;
comment|// update usage
name|appResourceUsage
operator|.
name|decUsed
argument_list|(
name|decreaseRequest
operator|.
name|getNodePartition
argument_list|()
argument_list|,
name|absDelta
argument_list|)
expr_stmt|;
block|}
comment|/**    * Resources have been allocated to this application by the resource    * scheduler. Track them.    *     * @param type    *          the type of the node    * @param node    *          the nodeinfo of the node    * @param priority    *          the priority of the request.    * @param request    *          the request    * @param container    *          the containers allocated.    */
DECL|method|allocate (NodeType type, SchedulerNode node, Priority priority, ResourceRequest request, Container container)
specifier|synchronized
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|allocateNodeLocal
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
name|allocateRackLocal
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocateOffSwitch
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
condition|)
block|{
comment|// once an allocation is done we assume the application is
comment|// running from scheduler's POV.
name|pending
operator|=
literal|false
expr_stmt|;
name|metrics
operator|.
name|runAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationId="
operator|+
name|applicationId
operator|+
literal|" container="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" host="
operator|+
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" user="
operator|+
name|user
operator|+
literal|" resource="
operator|+
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|resourceRequests
return|;
block|}
comment|/**    * The {@link ResourceScheduler} is allocating data-local resources to the    * application.    *     * @param allocatedContainers    *          resources allocated to the application    */
DECL|method|allocateNodeLocal (SchedulerNode node, Priority priority, ResourceRequest nodeLocalRequest, Container container, List<ResourceRequest> resourceRequests)
specifier|synchronized
specifier|private
name|void
name|allocateNodeLocal
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|nodeLocalRequest
parameter_list|,
name|Container
name|container
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
comment|// Update future requirements
name|decResourceRequest
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|priority
argument_list|,
name|nodeLocalRequest
argument_list|)
expr_stmt|;
name|ResourceRequest
name|rackLocalRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
name|decResourceRequest
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|priority
argument_list|,
name|rackLocalRequest
argument_list|)
expr_stmt|;
name|ResourceRequest
name|offRackRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|decrementOutstanding
argument_list|(
name|offRackRequest
argument_list|)
expr_stmt|;
comment|// Update cloned NodeLocal, RackLocal and OffRack requests for recovery
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|nodeLocalRequest
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|rackLocalRequest
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|offRackRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decResourceRequest (String resourceName, Priority priority, ResourceRequest request)
specifier|private
name|void
name|decResourceRequest
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|)
block|{
name|request
operator|.
name|setNumContainers
argument_list|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|remove
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The {@link ResourceScheduler} is allocating data-local resources to the    * application.    *     * @param allocatedContainers    *          resources allocated to the application    */
DECL|method|allocateRackLocal (SchedulerNode node, Priority priority, ResourceRequest rackLocalRequest, Container container, List<ResourceRequest> resourceRequests)
specifier|synchronized
specifier|private
name|void
name|allocateRackLocal
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|rackLocalRequest
parameter_list|,
name|Container
name|container
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
comment|// Update future requirements
name|decResourceRequest
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|priority
argument_list|,
name|rackLocalRequest
argument_list|)
expr_stmt|;
name|ResourceRequest
name|offRackRequest
init|=
name|resourceRequestMap
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|decrementOutstanding
argument_list|(
name|offRackRequest
argument_list|)
expr_stmt|;
comment|// Update cloned RackLocal and OffRack requests for recovery
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|rackLocalRequest
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|offRackRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The {@link ResourceScheduler} is allocating data-local resources to the    * application.    *     * @param allocatedContainers    *          resources allocated to the application    */
DECL|method|allocateOffSwitch (SchedulerNode node, Priority priority, ResourceRequest offSwitchRequest, Container container, List<ResourceRequest> resourceRequests)
specifier|synchronized
specifier|private
name|void
name|allocateOffSwitch
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|offSwitchRequest
parameter_list|,
name|Container
name|container
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|)
block|{
comment|// Update future requirements
name|decrementOutstanding
argument_list|(
name|offSwitchRequest
argument_list|)
expr_stmt|;
comment|// Update cloned OffRack requests for recovery
name|resourceRequests
operator|.
name|add
argument_list|(
name|cloneResourceRequest
argument_list|(
name|offSwitchRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decrementOutstanding ( ResourceRequest offSwitchRequest)
specifier|synchronized
specifier|private
name|void
name|decrementOutstanding
parameter_list|(
name|ResourceRequest
name|offSwitchRequest
parameter_list|)
block|{
name|int
name|numOffSwitchContainers
init|=
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// Do not remove ANY
name|offSwitchRequest
operator|.
name|setNumContainers
argument_list|(
name|numOffSwitchContainers
argument_list|)
expr_stmt|;
comment|// Do we have any outstanding requests?
comment|// If there is nothing, we need to deactivate this application
if|if
condition|(
name|numOffSwitchContainers
operator|==
literal|0
condition|)
block|{
name|checkForDeactivation
argument_list|()
expr_stmt|;
block|}
name|appResourceUsage
operator|.
name|decPending
argument_list|(
name|offSwitchRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|offSwitchRequest
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|decPendingResource
argument_list|(
name|offSwitchRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|offSwitchRequest
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkForDeactivation ()
specifier|synchronized
specifier|private
name|void
name|checkForDeactivation
parameter_list|()
block|{
name|boolean
name|deactivate
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Priority
name|priority
range|:
name|getPriorities
argument_list|()
control|)
block|{
name|ResourceRequest
name|request
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|deactivate
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// also we need to check increase request
if|if
condition|(
operator|!
name|deactivate
condition|)
block|{
name|deactivate
operator|=
name|increaseRequestMap
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deactivate
condition|)
block|{
name|activeUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|move (Queue newQueue)
specifier|synchronized
specifier|public
name|void
name|move
parameter_list|(
name|Queue
name|newQueue
parameter_list|)
block|{
name|QueueMetrics
name|oldMetrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|QueueMetrics
name|newMetrics
init|=
name|newQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|asks
range|:
name|resourceRequestMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ResourceRequest
name|request
init|=
name|asks
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|oldMetrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|incrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|delta
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update Queue
name|queue
operator|.
name|decPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|newQueue
operator|.
name|incPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
name|oldMetrics
operator|.
name|moveAppFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|newMetrics
operator|.
name|moveAppTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|activeUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|activeUsersManager
operator|=
name|newQueue
operator|.
name|getActiveUsersManager
argument_list|()
expr_stmt|;
name|activeUsersManager
operator|.
name|activateApplication
argument_list|(
name|user
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|newQueue
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|newQueue
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
block|}
DECL|method|stop (RMAppAttemptState rmAppAttemptFinalState)
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|(
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|)
block|{
comment|// clear pending resources metrics for the application
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|asks
range|:
name|resourceRequestMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ResourceRequest
name|request
init|=
name|asks
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Queue
name|queue
operator|.
name|decPendingResource
argument_list|(
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|finishAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|pending
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// Clear requests themselves
name|clearRequests
argument_list|()
expr_stmt|;
block|}
DECL|method|setQueue (Queue queue)
specifier|public
specifier|synchronized
name|void
name|setQueue
parameter_list|(
name|Queue
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|getBlackList ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlackList
parameter_list|()
block|{
return|return
name|this
operator|.
name|userBlacklist
return|;
block|}
DECL|method|getBlackListCopy ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlackListCopy
parameter_list|()
block|{
synchronized|synchronized
init|(
name|userBlacklist
init|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|this
operator|.
name|userBlacklist
argument_list|)
return|;
block|}
block|}
DECL|method|transferStateFromPreviousAppSchedulingInfo ( AppSchedulingInfo appInfo)
specifier|public
specifier|synchronized
name|void
name|transferStateFromPreviousAppSchedulingInfo
parameter_list|(
name|AppSchedulingInfo
name|appInfo
parameter_list|)
block|{
comment|//    this.priorities = appInfo.getPriorities();
comment|//    this.requests = appInfo.getRequests();
comment|// This should not require locking the userBlacklist since it will not be
comment|// used by this instance until after setCurrentAppAttempt.
comment|// Should cleanup this to avoid sharing between instances and can
comment|// then remove getBlacklist as well.
name|this
operator|.
name|userBlacklist
operator|=
name|appInfo
operator|.
name|getBlackList
argument_list|()
expr_stmt|;
block|}
DECL|method|recoverContainer (RMContainer rmContainer)
specifier|public
specifier|synchronized
name|void
name|recoverContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|QueueMetrics
name|metrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
condition|)
block|{
comment|// If there was any container to recover, the application was
comment|// running from scheduler's POV.
name|pending
operator|=
literal|false
expr_stmt|;
name|metrics
operator|.
name|runAppAttempt
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|// Container is completed. Skip recovering resources.
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
condition|)
block|{
return|return;
block|}
name|metrics
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|cloneResourceRequest (ResourceRequest request)
specifier|public
name|ResourceRequest
name|cloneResourceRequest
parameter_list|(
name|ResourceRequest
name|request
parameter_list|)
block|{
name|ResourceRequest
name|newRequest
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
literal|1
argument_list|,
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newRequest
return|;
block|}
block|}
end_class

end_unit

