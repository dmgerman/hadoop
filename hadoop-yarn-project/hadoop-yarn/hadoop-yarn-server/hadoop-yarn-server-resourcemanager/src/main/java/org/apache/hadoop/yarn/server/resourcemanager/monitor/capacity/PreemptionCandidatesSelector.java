begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|PreemptionCandidatesSelector
specifier|public
specifier|abstract
class|class
name|PreemptionCandidatesSelector
block|{
DECL|field|preemptionContext
specifier|protected
name|CapacitySchedulerPreemptionContext
name|preemptionContext
decl_stmt|;
DECL|field|rc
specifier|protected
name|ResourceCalculator
name|rc
decl_stmt|;
DECL|method|PreemptionCandidatesSelector ( CapacitySchedulerPreemptionContext preemptionContext)
name|PreemptionCandidatesSelector
parameter_list|(
name|CapacitySchedulerPreemptionContext
name|preemptionContext
parameter_list|)
block|{
name|this
operator|.
name|preemptionContext
operator|=
name|preemptionContext
expr_stmt|;
name|this
operator|.
name|rc
operator|=
name|preemptionContext
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get preemption candidates from computed resource sharing and already    * selected candidates.    *    * @param selectedCandidates already selected candidates from previous policies    * @param clusterResource    * @param totalPreemptedResourceAllowed how many resources allowed to be    *                                      preempted in this round    * @return merged selected candidates.    */
DECL|method|selectCandidates ( Map<ApplicationAttemptId, Set<RMContainer>> selectedCandidates, Resource clusterResource, Resource totalPreemptedResourceAllowed)
specifier|public
specifier|abstract
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectCandidates
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Set
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|selectedCandidates
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|totalPreemptedResourceAllowed
parameter_list|)
function_decl|;
block|}
end_class

end_unit

