begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Generic interface that can be used for collecting diagnostics.  */
end_comment

begin_class
DECL|class|GenericDiagnosticsCollector
specifier|public
class|class
name|GenericDiagnosticsCollector
implements|implements
name|DiagnosticsCollector
block|{
DECL|field|RESOURCE_DIAGNOSTICS_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|RESOURCE_DIAGNOSTICS_PREFIX
init|=
literal|"insufficient resources="
decl_stmt|;
DECL|field|PLACEMENT_CONSTRAINT_DIAGNOSTICS_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|PLACEMENT_CONSTRAINT_DIAGNOSTICS_PREFIX
init|=
literal|"unsatisfied PC expression="
decl_stmt|;
DECL|field|PARTITION_DIAGNOSTICS_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|PARTITION_DIAGNOSTICS_PREFIX
init|=
literal|"unsatisfied node partition="
decl_stmt|;
DECL|field|diagnostics
specifier|private
name|String
name|diagnostics
decl_stmt|;
DECL|field|details
specifier|private
name|String
name|details
decl_stmt|;
DECL|method|collect (String diagnosticsInfo, String detailsInfo)
specifier|public
name|void
name|collect
parameter_list|(
name|String
name|diagnosticsInfo
parameter_list|,
name|String
name|detailsInfo
parameter_list|)
block|{
name|this
operator|.
name|diagnostics
operator|=
name|diagnosticsInfo
expr_stmt|;
name|this
operator|.
name|details
operator|=
name|detailsInfo
expr_stmt|;
block|}
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
return|return
name|diagnostics
return|;
block|}
DECL|method|getDetails ()
specifier|public
name|String
name|getDetails
parameter_list|()
block|{
return|return
name|details
return|;
block|}
DECL|method|collectResourceDiagnostics (ResourceCalculator rc, Resource required, Resource available)
specifier|public
name|void
name|collectResourceDiagnostics
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|required
parameter_list|,
name|Resource
name|available
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|insufficientResourceNames
init|=
name|rc
operator|.
name|getInsufficientResourceNames
argument_list|(
name|required
argument_list|,
name|available
argument_list|)
decl_stmt|;
name|this
operator|.
name|diagnostics
operator|=
operator|new
name|StringBuilder
argument_list|(
name|RESOURCE_DIAGNOSTICS_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|insufficientResourceNames
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|details
operator|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"required="
argument_list|)
operator|.
name|append
argument_list|(
name|required
argument_list|)
operator|.
name|append
argument_list|(
literal|", available="
argument_list|)
operator|.
name|append
argument_list|(
name|available
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|collectPlacementConstraintDiagnostics (PlacementConstraint pc, PlacementConstraint.TargetExpression.TargetType targetType)
specifier|public
name|void
name|collectPlacementConstraintDiagnostics
parameter_list|(
name|PlacementConstraint
name|pc
parameter_list|,
name|PlacementConstraint
operator|.
name|TargetExpression
operator|.
name|TargetType
name|targetType
parameter_list|)
block|{
name|this
operator|.
name|diagnostics
operator|=
operator|new
name|StringBuilder
argument_list|(
name|PLACEMENT_CONSTRAINT_DIAGNOSTICS_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|pc
argument_list|)
operator|.
name|append
argument_list|(
literal|"\", target-type="
argument_list|)
operator|.
name|append
argument_list|(
name|targetType
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|details
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|collectPartitionDiagnostics ( String requiredPartition, String nodePartition)
specifier|public
name|void
name|collectPartitionDiagnostics
parameter_list|(
name|String
name|requiredPartition
parameter_list|,
name|String
name|nodePartition
parameter_list|)
block|{
name|this
operator|.
name|diagnostics
operator|=
operator|new
name|StringBuilder
argument_list|(
name|PARTITION_DIAGNOSTICS_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|nodePartition
argument_list|)
operator|.
name|append
argument_list|(
literal|", required-partition="
argument_list|)
operator|.
name|append
argument_list|(
name|requiredPartition
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|details
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

