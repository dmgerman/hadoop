begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|CallerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|CollectorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientToAMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|AppCollectorData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
operator|.
name|BlacklistManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
operator|.
name|DisabledBlacklistManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
operator|.
name|SimpleBlacklistManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Recoverable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNodeUpdateEvent
operator|.
name|RMAppNodeUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AggregateAppResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppStartAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|AppLevelTimelineCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyUriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|RMAppImpl
specifier|public
class|class
name|RMAppImpl
implements|implements
name|RMApp
implements|,
name|Recoverable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNAVAILABLE
specifier|private
specifier|static
specifier|final
name|String
name|UNAVAILABLE
init|=
literal|"N/A"
decl_stmt|;
DECL|field|UNLIMITED
specifier|private
specifier|static
specifier|final
name|String
name|UNLIMITED
init|=
literal|"UNLIMITED"
decl_stmt|;
DECL|field|UNKNOWN
specifier|private
specifier|static
specifier|final
name|long
name|UNKNOWN
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|COMPLETED_APP_STATES
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|RMAppState
argument_list|>
name|COMPLETED_APP_STATES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|)
decl_stmt|;
DECL|field|STATE_CHANGE_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|STATE_CHANGE_MESSAGE
init|=
literal|"%s State change from %s to %s on event = %s"
decl_stmt|;
DECL|field|RECOVERY_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|RECOVERY_MESSAGE
init|=
literal|"Recovering app: %s with %d attempts and final state = %s"
decl_stmt|;
comment|// Immutable fields
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|submissionContext
specifier|private
specifier|final
name|ApplicationSubmissionContext
name|submissionContext
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|masterService
specifier|private
specifier|final
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|StringBuilder
name|diagnostics
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|maxAppAttempts
specifier|private
specifier|final
name|int
name|maxAppAttempts
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|attempts
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|submitTime
specifier|private
specifier|final
name|long
name|submitTime
decl_stmt|;
DECL|field|updatedNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|RMNode
argument_list|>
name|updatedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|applicationType
specifier|private
specifier|final
name|String
name|applicationType
decl_stmt|;
DECL|field|applicationTags
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
decl_stmt|;
DECL|field|attemptFailuresValidityInterval
specifier|private
specifier|final
name|long
name|attemptFailuresValidityInterval
decl_stmt|;
DECL|field|amBlacklistingEnabled
specifier|private
name|boolean
name|amBlacklistingEnabled
init|=
literal|false
decl_stmt|;
DECL|field|blacklistDisableThreshold
specifier|private
name|float
name|blacklistDisableThreshold
decl_stmt|;
DECL|field|systemClock
specifier|private
name|Clock
name|systemClock
decl_stmt|;
DECL|field|isNumAttemptsBeyondThreshold
specifier|private
name|boolean
name|isNumAttemptsBeyondThreshold
init|=
literal|false
decl_stmt|;
comment|// Mutable fields
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
init|=
literal|0
decl_stmt|;
DECL|field|storedFinishTime
specifier|private
name|long
name|storedFinishTime
init|=
literal|0
decl_stmt|;
DECL|field|firstAttemptIdInStateStore
specifier|private
name|int
name|firstAttemptIdInStateStore
init|=
literal|1
decl_stmt|;
DECL|field|nextAttemptId
specifier|private
name|int
name|nextAttemptId
init|=
literal|1
decl_stmt|;
DECL|field|collectorData
specifier|private
name|AppCollectorData
name|collectorData
decl_stmt|;
DECL|field|collectorInfo
specifier|private
name|CollectorInfo
name|collectorInfo
decl_stmt|;
comment|// This field isn't protected by readlock now.
DECL|field|currentAttempt
specifier|private
specifier|volatile
name|RMAppAttempt
name|currentAttempt
decl_stmt|;
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
DECL|field|handler
specifier|private
name|EventHandler
name|handler
decl_stmt|;
DECL|field|FINISHED_TRANSITION
specifier|private
specifier|static
specifier|final
name|AppFinishedTransition
name|FINISHED_TRANSITION
init|=
operator|new
name|AppFinishedTransition
argument_list|()
decl_stmt|;
DECL|field|ranNodes
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|ranNodes
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logAggregationEnabled
specifier|private
specifier|final
name|boolean
name|logAggregationEnabled
decl_stmt|;
DECL|field|logAggregationStartTime
specifier|private
name|long
name|logAggregationStartTime
init|=
literal|0
decl_stmt|;
DECL|field|logAggregationStatusTimeout
specifier|private
specifier|final
name|long
name|logAggregationStatusTimeout
decl_stmt|;
DECL|field|logAggregationStatus
specifier|private
specifier|final
name|Map
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|logAggregationStatus
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logAggregationStatusForAppReport
specifier|private
specifier|volatile
name|LogAggregationStatus
name|logAggregationStatusForAppReport
decl_stmt|;
DECL|field|logAggregationSucceed
specifier|private
name|int
name|logAggregationSucceed
init|=
literal|0
decl_stmt|;
DECL|field|logAggregationFailed
specifier|private
name|int
name|logAggregationFailed
init|=
literal|0
decl_stmt|;
DECL|field|logAggregationDiagnosticsForNMs
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|logAggregationDiagnosticsForNMs
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logAggregationFailureMessagesForNMs
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|logAggregationFailureMessagesForNMs
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|maxLogAggregationDiagnosticsInMemory
specifier|private
specifier|final
name|int
name|maxLogAggregationDiagnosticsInMemory
decl_stmt|;
DECL|field|applicationTimeouts
specifier|private
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|applicationTimeouts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// These states stored are only valid when app is at killing or final_saving.
DECL|field|stateBeforeKilling
specifier|private
name|RMAppState
name|stateBeforeKilling
decl_stmt|;
DECL|field|stateBeforeFinalSaving
specifier|private
name|RMAppState
name|stateBeforeFinalSaving
decl_stmt|;
DECL|field|eventCausingFinalSaving
specifier|private
name|RMAppEvent
name|eventCausingFinalSaving
decl_stmt|;
DECL|field|targetedFinalState
specifier|private
name|RMAppState
name|targetedFinalState
decl_stmt|;
DECL|field|recoveredFinalState
specifier|private
name|RMAppState
name|recoveredFinalState
decl_stmt|;
DECL|field|amReqs
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|amReqs
decl_stmt|;
DECL|field|callerContext
specifier|private
name|CallerContext
name|callerContext
decl_stmt|;
DECL|field|transitionTodo
name|Object
name|transitionTodo
decl_stmt|;
DECL|field|applicationPriority
specifier|private
name|Priority
name|applicationPriority
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppState
argument_list|,
name|RMAppEventType
argument_list|,
DECL|field|stateMachineFactory
name|RMAppEvent
argument_list|>
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppState
argument_list|,
name|RMAppEventType
argument_list|,
name|RMAppEvent
argument_list|>
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|,
operator|new
name|RMAppNewlySavingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|)
argument_list|,
name|RMAppEventType
operator|.
name|RECOVER
argument_list|,
operator|new
name|RMAppRecoveredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|AppKilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
argument_list|)
comment|// Transitions from NEW_SAVING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_NEW_SAVED
argument_list|,
operator|new
name|AddApplicationToSchedulerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppKilledTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppEventType
operator|.
name|APP_SAVE_FAILED
argument_list|,
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|)
comment|// Transitions from SUBMITTED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|,
operator|new
name|StartAppAttemptTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppKilledTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
argument_list|)
comment|// Transitions from ACCEPTED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|,
operator|new
name|RMAppStateUpdateTransition
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|)
argument_list|,
comment|// ACCEPTED state is possible to receive ATTEMPT_FAILED/ATTEMPT_FINISHED
comment|// event because RMAppRecoveredTransition is returning ACCEPTED state
comment|// directly and waiting for the previous AM to exit.
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
name|FINISHED_TRANSITION
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAttemptTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppKilledTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_UNREGISTERED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AttemptUnregisteredTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
comment|// UnManagedAM directly jumps to finished
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|FINISHED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|)
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAttemptTransition
argument_list|()
argument_list|)
comment|// Transitions from FINAL_SAVING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
argument_list|,
name|RMAppEventType
operator|.
name|APP_UPDATE_SAVED
argument_list|,
operator|new
name|FinalStateSavedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
operator|new
name|AttemptFinishedAtFinalSavingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|RMAppEventType
operator|.
name|APP_NEW_SAVED
argument_list|)
argument_list|)
comment|// Transitions from FINISHING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|FINISHED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
comment|// ignore Kill/Move as we have already saved the final Finished state
comment|// in state store.
name|RMAppEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from KILLING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AppKilledTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_UNREGISTERED
argument_list|,
operator|new
name|FinalSavingTransition
argument_list|(
operator|new
name|AttemptUnregisteredTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
comment|// UnManagedAM directly jumps to finished
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|FINISHED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|)
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|,
name|RMAppEventType
operator|.
name|APP_UPDATE_SAVED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from FINISHED state
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_UNREGISTERED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|)
argument_list|)
comment|// Transitions from KILLED state
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|APP_RUNNING_ON_NODE
argument_list|,
operator|new
name|AppRunningOnNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|)
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|RMAppState
argument_list|,
name|RMAppEventType
argument_list|,
name|RMAppEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|field|DUMMY_APPLICATION_ATTEMPT_NUMBER
specifier|private
specifier|static
specifier|final
name|int
name|DUMMY_APPLICATION_ATTEMPT_NUMBER
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|MINIMUM_AM_BLACKLIST_THRESHOLD_VALUE
specifier|private
specifier|static
specifier|final
name|float
name|MINIMUM_AM_BLACKLIST_THRESHOLD_VALUE
init|=
literal|0.0f
decl_stmt|;
DECL|field|MAXIMUM_AM_BLACKLIST_THRESHOLD_VALUE
specifier|private
specifier|static
specifier|final
name|float
name|MAXIMUM_AM_BLACKLIST_THRESHOLD_VALUE
init|=
literal|1.0f
decl_stmt|;
DECL|method|RMAppImpl (ApplicationId applicationId, RMContext rmContext, Configuration config, String name, String user, String queue, ApplicationSubmissionContext submissionContext, YarnScheduler scheduler, ApplicationMasterService masterService, long submitTime, String applicationType, Set<String> applicationTags, List<ResourceRequest> amReqs)
specifier|public
name|RMAppImpl
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|applicationType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|amReqs
parameter_list|)
block|{
name|this
argument_list|(
name|applicationId
argument_list|,
name|rmContext
argument_list|,
name|config
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|submissionContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submitTime
argument_list|,
name|applicationType
argument_list|,
name|applicationTags
argument_list|,
name|amReqs
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|RMAppImpl (ApplicationId applicationId, RMContext rmContext, Configuration config, String name, String user, String queue, ApplicationSubmissionContext submissionContext, YarnScheduler scheduler, ApplicationMasterService masterService, long submitTime, String applicationType, Set<String> applicationTags, List<ResourceRequest> amReqs, long startTime)
specifier|public
name|RMAppImpl
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|applicationType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|amReqs
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|systemClock
operator|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|rmContext
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|submissionContext
operator|=
name|submissionContext
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|masterService
operator|=
name|masterService
expr_stmt|;
name|this
operator|.
name|submitTime
operator|=
name|submitTime
expr_stmt|;
if|if
condition|(
name|startTime
operator|<=
literal|0
condition|)
block|{
name|this
operator|.
name|startTime
operator|=
name|this
operator|.
name|systemClock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
name|this
operator|.
name|applicationType
operator|=
name|applicationType
expr_stmt|;
name|this
operator|.
name|applicationTags
operator|=
name|applicationTags
expr_stmt|;
name|this
operator|.
name|amReqs
operator|=
name|amReqs
expr_stmt|;
if|if
condition|(
name|submissionContext
operator|.
name|getPriority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|applicationPriority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|submissionContext
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|globalMaxAppAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
name|int
name|individualMaxAppAttempts
init|=
name|submissionContext
operator|.
name|getMaxAppAttempts
argument_list|()
decl_stmt|;
if|if
condition|(
name|individualMaxAppAttempts
operator|<=
literal|0
operator|||
name|individualMaxAppAttempts
operator|>
name|globalMaxAppAttempts
condition|)
block|{
name|this
operator|.
name|maxAppAttempts
operator|=
name|globalMaxAppAttempts
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"The specific max attempts: "
operator|+
name|individualMaxAppAttempts
operator|+
literal|" for application: "
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
operator|+
literal|" is invalid, because it is out of the range [1, "
operator|+
name|globalMaxAppAttempts
operator|+
literal|"]. Use the global max attempts instead."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxAppAttempts
operator|=
name|individualMaxAppAttempts
expr_stmt|;
block|}
name|this
operator|.
name|attemptFailuresValidityInterval
operator|=
name|submissionContext
operator|.
name|getAttemptFailuresValidityInterval
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attemptFailuresValidityInterval
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The attemptFailuresValidityInterval for the application: "
operator|+
name|this
operator|.
name|applicationId
operator|+
literal|" is "
operator|+
name|this
operator|.
name|attemptFailuresValidityInterval
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|callerContext
operator|=
name|CallerContext
operator|.
name|getCurrent
argument_list|()
expr_stmt|;
name|long
name|localLogAggregationStatusTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_STATUS_TIME_OUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS
argument_list|)
decl_stmt|;
if|if
condition|(
name|localLogAggregationStatusTimeout
operator|<=
literal|0
condition|)
block|{
name|this
operator|.
name|logAggregationStatusTimeout
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|logAggregationStatusTimeout
operator|=
name|localLogAggregationStatusTimeout
expr_stmt|;
block|}
name|this
operator|.
name|logAggregationEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|logAggregationEnabled
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|NOT_START
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|DISABLED
expr_stmt|;
block|}
name|maxLogAggregationDiagnosticsInMemory
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
argument_list|)
expr_stmt|;
comment|// amBlacklistingEnabled can be configured globally
comment|// Just use the global values
name|amBlacklistingEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|amBlacklistingEnabled
condition|)
block|{
name|blacklistDisableThreshold
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
argument_list|)
expr_stmt|;
comment|// Verify whether blacklistDisableThreshold is valid. And for invalid
comment|// threshold, reset to global level blacklistDisableThreshold
comment|// configured.
if|if
condition|(
name|blacklistDisableThreshold
argument_list|<
name|MINIMUM_AM_BLACKLIST_THRESHOLD_VALUE
operator|||
name|blacklistDisableThreshold
argument_list|>
name|MAXIMUM_AM_BLACKLIST_THRESHOLD_VALUE
condition|)
block|{
name|blacklistDisableThreshold
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Starts the application level timeline collector for this app. This should    * be used only if the timeline service v.2 is enabled.    */
DECL|method|startTimelineCollector ()
specifier|public
name|void
name|startTimelineCollector
parameter_list|()
block|{
name|AppLevelTimelineCollector
name|collector
init|=
operator|new
name|AppLevelTimelineCollector
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getRMTimelineCollectorManager
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationId
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stops the application level timeline collector for this app. This should be    * used only if the timeline service v.2 is enabled.    */
DECL|method|stopTimelineCollector ()
specifier|public
name|void
name|stopTimelineCollector
parameter_list|()
block|{
name|rmContext
operator|.
name|getRMTimelineCollectorManager
argument_list|()
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationId
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationSubmissionContext ()
specifier|public
name|ApplicationSubmissionContext
name|getApplicationSubmissionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|submissionContext
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalApplicationStatus ()
specifier|public
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
block|{
comment|// finish state is obtained based on the state machine's current state
comment|// as a fall-back in case the application has not been unregistered
comment|// ( or if the app never unregistered itself )
comment|// when the report is requested
if|if
condition|(
name|currentAttempt
operator|!=
literal|null
operator|&&
name|currentAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|currentAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
return|;
block|}
return|return
name|createFinalApplicationStatus
argument_list|(
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|RMAppState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|RMAppAttempt
name|attempt
init|=
name|this
operator|.
name|currentAttempt
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getProgress
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getRMAppAttempt (ApplicationAttemptId appAttemptId)
specifier|public
name|RMAppAttempt
name|getRMAppAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|attempts
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|this
operator|.
name|queue
return|;
block|}
annotation|@
name|Override
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCollectorData ()
specifier|public
name|AppCollectorData
name|getCollectorData
parameter_list|()
block|{
return|return
name|this
operator|.
name|collectorData
return|;
block|}
DECL|method|setCollectorData (AppCollectorData incomingData)
specifier|public
name|void
name|setCollectorData
parameter_list|(
name|AppCollectorData
name|incomingData
parameter_list|)
block|{
name|this
operator|.
name|collectorData
operator|=
name|incomingData
expr_stmt|;
name|this
operator|.
name|collectorInfo
operator|=
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
name|incomingData
operator|.
name|getCollectorAddr
argument_list|()
argument_list|,
name|incomingData
operator|.
name|getCollectorToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCollectorInfo ()
specifier|public
name|CollectorInfo
name|getCollectorInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|collectorInfo
return|;
block|}
DECL|method|removeCollectorData ()
specifier|public
name|void
name|removeCollectorData
parameter_list|()
block|{
name|this
operator|.
name|collectorData
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentAppAttempt ()
specifier|public
name|RMAppAttempt
name|getCurrentAppAttempt
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentAttempt
return|;
block|}
annotation|@
name|Override
DECL|method|getAppAttempts ()
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|getAppAttempts
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|attempts
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFinalApplicationStatus (RMAppState state)
specifier|private
name|FinalApplicationStatus
name|createFinalApplicationStatus
parameter_list|(
name|RMAppState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|NEW_SAVING
case|:
case|case
name|SUBMITTED
case|:
case|case
name|ACCEPTED
case|:
case|case
name|RUNNING
case|:
case|case
name|FINAL_SAVING
case|:
case|case
name|KILLING
case|:
return|return
name|FinalApplicationStatus
operator|.
name|UNDEFINED
return|;
comment|// finished without a proper final state is the same as failed
case|case
name|FINISHING
case|:
case|case
name|FINISHED
case|:
case|case
name|FAILED
case|:
return|return
name|FinalApplicationStatus
operator|.
name|FAILED
return|;
case|case
name|KILLED
case|:
return|return
name|FinalApplicationStatus
operator|.
name|KILLED
return|;
block|}
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown state passed!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|pullRMNodeUpdates (Collection<RMNode> updatedNodes)
specifier|public
name|int
name|pullRMNodeUpdates
parameter_list|(
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|updatedNodes
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|updatedNodeCount
init|=
name|this
operator|.
name|updatedNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|updatedNodes
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|updatedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|updatedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|updatedNodeCount
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createAndGetApplicationReport (String clientUserName, boolean allowAccess)
specifier|public
name|ApplicationReport
name|createAndGetApplicationReport
parameter_list|(
name|String
name|clientUserName
parameter_list|,
name|boolean
name|allowAccess
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationAttemptId
name|currentApplicationAttemptId
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|clientToAMToken
init|=
literal|null
decl_stmt|;
name|String
name|trackingUrl
init|=
name|UNAVAILABLE
decl_stmt|;
name|String
name|host
init|=
name|UNAVAILABLE
decl_stmt|;
name|String
name|origTrackingUrl
init|=
name|UNAVAILABLE
decl_stmt|;
name|LogAggregationStatus
name|logAggregationStatus
init|=
literal|null
decl_stmt|;
name|int
name|rpcPort
init|=
operator|-
literal|1
decl_stmt|;
name|ApplicationResourceUsageReport
name|appUsageReport
init|=
name|RMServerUtils
operator|.
name|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
decl_stmt|;
name|FinalApplicationStatus
name|finishState
init|=
name|getFinalApplicationStatus
argument_list|()
decl_stmt|;
name|String
name|diags
init|=
name|UNAVAILABLE
decl_stmt|;
name|float
name|progress
init|=
literal|0.0f
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|amrmToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowAccess
condition|)
block|{
name|trackingUrl
operator|=
name|getDefaultProxyTrackingUrl
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|currentAttempt
operator|!=
literal|null
condition|)
block|{
name|currentApplicationAttemptId
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
name|trackingUrl
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getTrackingUrl
argument_list|()
expr_stmt|;
name|origTrackingUrl
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// get a token so the client can communicate with the app attempt
comment|// NOTE: token may be unavailable if the attempt is not running
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|attemptClientToAMToken
init|=
name|this
operator|.
name|currentAttempt
operator|.
name|createClientToken
argument_list|(
name|clientUserName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptClientToAMToken
operator|!=
literal|null
condition|)
block|{
name|clientToAMToken
operator|=
name|BuilderUtils
operator|.
name|newClientToAMToken
argument_list|(
name|attemptClientToAMToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|attemptClientToAMToken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptClientToAMToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|attemptClientToAMToken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|host
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|rpcPort
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getRpcPort
argument_list|()
expr_stmt|;
name|appUsageReport
operator|=
name|currentAttempt
operator|.
name|getApplicationResourceUsageReport
argument_list|()
expr_stmt|;
name|progress
operator|=
name|currentAttempt
operator|.
name|getProgress
argument_list|()
expr_stmt|;
name|logAggregationStatus
operator|=
name|this
operator|.
name|getLogAggregationStatusForAppReport
argument_list|()
expr_stmt|;
block|}
comment|//if the diagnostics is not already set get it from attempt
name|diags
operator|=
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentAttempt
operator|!=
literal|null
operator|&&
name|currentAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
name|RMAppAttemptState
operator|.
name|LAUNCHED
condition|)
block|{
if|if
condition|(
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
operator|&&
name|clientUserName
operator|!=
literal|null
operator|&&
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|clientUserName
argument_list|)
condition|)
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|currentAttempt
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|amrmToken
operator|=
name|BuilderUtils
operator|.
name|newAMRMToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|RMAppMetrics
name|rmAppMetrics
init|=
name|getRMAppMetrics
argument_list|()
decl_stmt|;
name|appUsageReport
operator|.
name|setMemorySeconds
argument_list|(
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|appUsageReport
operator|.
name|setVcoreSeconds
argument_list|(
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|appUsageReport
operator|.
name|setPreemptedMemorySeconds
argument_list|(
name|rmAppMetrics
operator|.
name|getPreemptedMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|appUsageReport
operator|.
name|setPreemptedVcoreSeconds
argument_list|(
name|rmAppMetrics
operator|.
name|getPreemptedVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentApplicationAttemptId
operator|==
literal|null
condition|)
block|{
name|currentApplicationAttemptId
operator|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|this
operator|.
name|applicationId
argument_list|,
name|DUMMY_APPLICATION_ATTEMPT_NUMBER
argument_list|)
expr_stmt|;
block|}
name|ApplicationReport
name|report
init|=
name|BuilderUtils
operator|.
name|newApplicationReport
argument_list|(
name|this
operator|.
name|applicationId
argument_list|,
name|currentApplicationAttemptId
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|this
operator|.
name|queue
argument_list|,
name|this
operator|.
name|name
argument_list|,
name|host
argument_list|,
name|rpcPort
argument_list|,
name|clientToAMToken
argument_list|,
name|createApplicationState
argument_list|()
argument_list|,
name|diags
argument_list|,
name|trackingUrl
argument_list|,
name|this
operator|.
name|startTime
argument_list|,
name|this
operator|.
name|finishTime
argument_list|,
name|finishState
argument_list|,
name|appUsageReport
argument_list|,
name|origTrackingUrl
argument_list|,
name|progress
argument_list|,
name|this
operator|.
name|applicationType
argument_list|,
name|amrmToken
argument_list|,
name|applicationTags
argument_list|,
name|this
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
decl_stmt|;
name|report
operator|.
name|setLogAggregationStatus
argument_list|(
name|logAggregationStatus
argument_list|)
expr_stmt|;
name|report
operator|.
name|setUnmanagedApp
argument_list|(
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setAppNodeLabelExpression
argument_list|(
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setAmNodeLabelExpression
argument_list|(
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationTimeout
name|timeout
init|=
name|ApplicationTimeout
operator|.
name|newInstance
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|UNLIMITED
argument_list|,
name|UNKNOWN
argument_list|)
decl_stmt|;
comment|// Currently timeout type supported is LIFETIME. When more timeout types
comment|// are supported in YARN-5692, the below logic need to be changed.
if|if
condition|(
operator|!
name|this
operator|.
name|applicationTimeouts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|timeoutInMillis
init|=
name|applicationTimeouts
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|timeout
operator|.
name|setExpiryTime
argument_list|(
name|Times
operator|.
name|formatISO8601
argument_list|(
name|timeoutInMillis
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAppInCompletedStates
argument_list|()
condition|)
block|{
comment|// if application configured with timeout and finished before timeout
comment|// happens then remaining time should not be calculated.
name|timeout
operator|.
name|setRemainingTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeout
operator|.
name|setRemainingTime
argument_list|(
name|Math
operator|.
name|max
argument_list|(
operator|(
name|timeoutInMillis
operator|-
name|systemClock
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|1000
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|report
operator|.
name|setApplicationTimeouts
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|timeout
operator|.
name|getTimeoutType
argument_list|()
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDefaultProxyTrackingUrl ()
specifier|private
name|String
name|getDefaultProxyTrackingUrl
parameter_list|()
block|{
try|try
block|{
specifier|final
name|String
name|scheme
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|proxy
init|=
name|WebAppUtils
operator|.
name|getProxyHostAndPort
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URI
name|proxyUri
init|=
name|ProxyUriUtils
operator|.
name|getUriFromAMUrl
argument_list|(
name|scheme
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
name|URI
name|result
init|=
name|ProxyUriUtils
operator|.
name|getProxyUri
argument_list|(
literal|null
argument_list|,
name|proxyUri
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toASCIIString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not generate default proxy tracking URL for "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
return|return
name|UNAVAILABLE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|finishTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSubmitTime ()
specifier|public
name|long
name|getSubmitTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|submitTime
return|;
block|}
annotation|@
name|Override
DECL|method|getTrackingUrl ()
specifier|public
name|String
name|getTrackingUrl
parameter_list|()
block|{
name|RMAppAttempt
name|attempt
init|=
name|this
operator|.
name|currentAttempt
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getTrackingUrl
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOriginalTrackingUrl ()
specifier|public
name|String
name|getOriginalTrackingUrl
parameter_list|()
block|{
name|RMAppAttempt
name|attempt
init|=
name|this
operator|.
name|currentAttempt
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|StringBuilder
name|getDiagnostics
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|diagnostics
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|getCurrentAppAttempt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|appAttemptDiagnostics
init|=
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
if|if
condition|(
name|appAttemptDiagnostics
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|appAttemptDiagnostics
argument_list|)
return|;
block|}
block|}
return|return
name|this
operator|.
name|diagnostics
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMaxAppAttempts ()
specifier|public
name|int
name|getMaxAppAttempts
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxAppAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationId
name|appID
init|=
name|event
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing event for "
operator|+
name|appID
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RMAppState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
comment|/* keep the master in sync with the state machine */
name|this
operator|.
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"App: "
operator|+
name|appID
operator|+
literal|" can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|/* TODO fail the application on the failed transition */
block|}
comment|// Log at INFO if we're not recovering or not in a terminal state.
comment|// Log at DEBUG otherwise.
if|if
condition|(
operator|(
name|oldState
operator|!=
name|getState
argument_list|()
operator|)
operator|&&
operator|(
operator|(
operator|(
name|recoveredFinalState
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|RMAppEventType
operator|.
name|RECOVER
operator|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|STATE_CHANGE_MESSAGE
argument_list|,
name|appID
argument_list|,
name|oldState
argument_list|,
name|getState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|oldState
operator|!=
name|getState
argument_list|()
operator|)
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|STATE_CHANGE_MESSAGE
argument_list|,
name|appID
argument_list|,
name|oldState
argument_list|,
name|getState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
block|{
name|ApplicationStateData
name|appState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|recoveredFinalState
operator|=
name|appState
operator|.
name|getState
argument_list|()
expr_stmt|;
if|if
condition|(
name|recoveredFinalState
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RECOVERY_MESSAGE
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|,
literal|"NONE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|RECOVERY_MESSAGE
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|,
name|recoveredFinalState
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|null
operator|==
name|appState
operator|.
name|getDiagnostics
argument_list|()
condition|?
literal|""
else|:
name|appState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedFinishTime
operator|=
name|appState
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|appState
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|callerContext
operator|=
name|appState
operator|.
name|getCallerContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationTimeouts
operator|=
name|appState
operator|.
name|getApplicationTimeouts
argument_list|()
expr_stmt|;
comment|// If interval> 0, some attempts might have been deleted.
if|if
condition|(
name|this
operator|.
name|attemptFailuresValidityInterval
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|firstAttemptIdInStateStore
operator|=
name|appState
operator|.
name|getFirstAttemptId
argument_list|()
expr_stmt|;
name|this
operator|.
name|nextAttemptId
operator|=
name|firstAttemptIdInStateStore
expr_stmt|;
block|}
comment|//TODO recover collector address.
comment|//this.collectorAddr = appState.getCollectorAddr();
comment|// send the ATS create Event during RM recovery.
comment|// NOTE: it could be duplicated with events sent before RM get restarted.
name|sendATSCreateEvent
argument_list|()
expr_stmt|;
name|RMAppAttemptImpl
name|preAttempt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|attemptId
range|:
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|appState
operator|.
name|attempts
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
comment|// create attempt
name|createNewAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMAppAttemptImpl
operator|)
name|this
operator|.
name|currentAttempt
operator|)
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// If previous attempt is not in final state, it means we failed to store
comment|// its final state. We set it to FAILED now because we could not make sure
comment|// about its final state.
if|if
condition|(
name|preAttempt
operator|!=
literal|null
operator|&&
name|preAttempt
operator|.
name|getRecoveredFinalState
argument_list|()
operator|==
literal|null
condition|)
block|{
name|preAttempt
operator|.
name|setRecoveredFinalState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
name|preAttempt
operator|=
operator|(
name|RMAppAttemptImpl
operator|)
name|currentAttempt
expr_stmt|;
block|}
if|if
condition|(
name|currentAttempt
operator|!=
literal|null
condition|)
block|{
name|nextAttemptId
operator|=
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
DECL|method|createNewAttempt ()
specifier|private
name|void
name|createNewAttempt
parameter_list|()
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|nextAttemptId
operator|++
argument_list|)
decl_stmt|;
name|createNewAttempt
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewAttempt (ApplicationAttemptId appAttemptId)
specifier|private
name|void
name|createNewAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|BlacklistManager
name|currentAMBlacklistManager
decl_stmt|;
if|if
condition|(
name|currentAttempt
operator|!=
literal|null
condition|)
block|{
comment|// Transfer over the blacklist from the previous app-attempt.
name|currentAMBlacklistManager
operator|=
name|currentAttempt
operator|.
name|getAMBlacklistManager
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|amBlacklistingEnabled
operator|&&
operator|!
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
name|currentAMBlacklistManager
operator|=
operator|new
name|SimpleBlacklistManager
argument_list|(
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|getAMResourceRequests
argument_list|()
argument_list|)
argument_list|,
name|blacklistDisableThreshold
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentAMBlacklistManager
operator|=
operator|new
name|DisabledBlacklistManager
argument_list|()
expr_stmt|;
block|}
block|}
name|RMAppAttempt
name|attempt
init|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|appAttemptId
argument_list|,
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
name|conf
argument_list|,
name|amReqs
argument_list|,
name|this
argument_list|,
name|currentAMBlacklistManager
argument_list|)
decl_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|currentAttempt
operator|=
name|attempt
expr_stmt|;
block|}
specifier|private
name|void
DECL|method|createAndStartNewAttempt (boolean transferStateFromPreviousAttempt)
name|createAndStartNewAttempt
parameter_list|(
name|boolean
name|transferStateFromPreviousAttempt
parameter_list|)
block|{
name|createNewAttempt
argument_list|()
expr_stmt|;
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppStartAttemptEvent
argument_list|(
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|transferStateFromPreviousAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processNodeUpdate (RMAppNodeUpdateType type, RMNode node)
specifier|private
name|void
name|processNodeUpdate
parameter_list|(
name|RMAppNodeUpdateType
name|type
parameter_list|,
name|RMNode
name|node
parameter_list|)
block|{
name|NodeState
name|nodeState
init|=
name|node
operator|.
name|getState
argument_list|()
decl_stmt|;
name|updatedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received node update event:"
operator|+
name|type
operator|+
literal|" for node:"
operator|+
name|node
operator|+
literal|" with state:"
operator|+
name|nodeState
argument_list|)
expr_stmt|;
block|}
DECL|class|RMAppTransition
specifier|private
specifier|static
class|class
name|RMAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppEvent
argument_list|>
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{     }
empty_stmt|;
block|}
DECL|class|RMAppNodeUpdateTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppNodeUpdateTransition
extends|extends
name|RMAppTransition
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppNodeUpdateEvent
name|nodeUpdateEvent
init|=
operator|(
name|RMAppNodeUpdateEvent
operator|)
name|event
decl_stmt|;
name|app
operator|.
name|processNodeUpdate
argument_list|(
name|nodeUpdateEvent
operator|.
name|getUpdateType
argument_list|()
argument_list|,
name|nodeUpdateEvent
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|RMAppStateUpdateTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppStateUpdateTransition
extends|extends
name|RMAppTransition
block|{
DECL|field|stateToATS
specifier|private
name|YarnApplicationState
name|stateToATS
decl_stmt|;
DECL|method|RMAppStateUpdateTransition (YarnApplicationState state)
specifier|public
name|RMAppStateUpdateTransition
parameter_list|(
name|YarnApplicationState
name|state
parameter_list|)
block|{
name|stateToATS
operator|=
name|state
expr_stmt|;
block|}
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|appStateUpdated
argument_list|(
name|app
argument_list|,
name|stateToATS
argument_list|,
name|app
operator|.
name|systemClock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|AppRunningOnNodeTransition
specifier|private
specifier|static
specifier|final
class|class
name|AppRunningOnNodeTransition
extends|extends
name|RMAppTransition
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppRunningOnNodeEvent
name|nodeAddedEvent
init|=
operator|(
name|RMAppRunningOnNodeEvent
operator|)
name|event
decl_stmt|;
comment|// if final state already stored, notify RMNode
if|if
condition|(
name|isAppInFinalState
argument_list|(
name|app
argument_list|)
condition|)
block|{
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanAppEvent
argument_list|(
name|nodeAddedEvent
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeAddedEvent
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// otherwise, add it to ranNodes for further process
name|app
operator|.
name|ranNodes
operator|.
name|add
argument_list|(
name|nodeAddedEvent
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|app
operator|.
name|logAggregationStatus
operator|.
name|containsKey
argument_list|(
name|nodeAddedEvent
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|app
operator|.
name|logAggregationStatus
operator|.
name|put
argument_list|(
name|nodeAddedEvent
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|LogAggregationReport
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|applicationId
argument_list|,
name|app
operator|.
name|logAggregationEnabled
condition|?
name|LogAggregationStatus
operator|.
name|NOT_START
else|:
name|LogAggregationStatus
operator|.
name|DISABLED
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
comment|// synchronously recover attempt to ensure any incoming external events
comment|// to be processed after the attempt processes the recover event.
DECL|method|recoverAppAttempts ()
specifier|private
name|void
name|recoverAppAttempts
parameter_list|()
block|{
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|attempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|RECOVER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RMAppRecoveredTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppRecoveredTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppEvent
argument_list|,
name|RMAppState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|RMAppState
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppRecoverEvent
name|recoverEvent
init|=
operator|(
name|RMAppRecoverEvent
operator|)
name|event
decl_stmt|;
name|app
operator|.
name|recover
argument_list|(
name|recoverEvent
operator|.
name|getRMState
argument_list|()
argument_list|)
expr_stmt|;
comment|// The app has completed.
if|if
condition|(
name|app
operator|.
name|recoveredFinalState
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|recoverAppAttempts
argument_list|()
expr_stmt|;
operator|new
name|FinalTransition
argument_list|(
name|app
operator|.
name|recoveredFinalState
argument_list|)
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|app
operator|.
name|recoveredFinalState
return|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// asynchronously renew delegation token on recovery.
try|try
block|{
name|app
operator|.
name|rmContext
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|addApplicationAsyncDuringRecovery
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|parseCredentials
argument_list|(
name|app
operator|.
name|submissionContext
argument_list|)
argument_list|,
name|app
operator|.
name|submissionContext
operator|.
name|getCancelTokensWhenComplete
argument_list|()
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|parseTokensConf
argument_list|(
name|app
operator|.
name|submissionContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to fetch user credentials from application:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeout
range|:
name|app
operator|.
name|applicationTimeouts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|app
operator|.
name|rmContext
operator|.
name|getRMAppLifetimeMonitor
argument_list|()
operator|.
name|registerApp
argument_list|(
name|app
operator|.
name|applicationId
argument_list|,
name|timeout
operator|.
name|getKey
argument_list|()
argument_list|,
name|timeout
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|long
name|remainingTime
init|=
name|timeout
operator|.
name|getValue
argument_list|()
operator|-
name|app
operator|.
name|systemClock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application "
operator|+
name|app
operator|.
name|applicationId
operator|+
literal|" is registered for timeout monitor, type="
operator|+
name|timeout
operator|.
name|getKey
argument_list|()
operator|+
literal|" remaining timeout="
operator|+
operator|(
name|remainingTime
operator|>
literal|0
condition|?
name|remainingTime
operator|/
literal|1000
else|:
literal|0
operator|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// No existent attempts means the attempt associated with this app was not
comment|// started or started but not yet saved.
if|if
condition|(
name|app
operator|.
name|attempts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|app
operator|.
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|app
operator|.
name|user
argument_list|,
name|app
operator|.
name|submissionContext
argument_list|,
literal|false
argument_list|,
name|app
operator|.
name|applicationPriority
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|RMAppState
operator|.
name|SUBMITTED
return|;
block|}
comment|// Add application to scheduler synchronously to guarantee scheduler
comment|// knows applications before AM or NM re-registers.
name|app
operator|.
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|app
operator|.
name|user
argument_list|,
name|app
operator|.
name|submissionContext
argument_list|,
literal|true
argument_list|,
name|app
operator|.
name|applicationPriority
argument_list|)
argument_list|)
expr_stmt|;
comment|// recover attempts
name|app
operator|.
name|recoverAppAttempts
argument_list|()
expr_stmt|;
comment|// YARN-1507 is saving the application state after the application is
comment|// accepted. So after YARN-1507, an app is saved meaning it is accepted.
comment|// Thus we return ACCECPTED state on recovery.
return|return
name|RMAppState
operator|.
name|ACCEPTED
return|;
block|}
block|}
DECL|class|AddApplicationToSchedulerTransition
specifier|private
specifier|static
specifier|final
class|class
name|AddApplicationToSchedulerTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|app
operator|.
name|user
argument_list|,
name|app
operator|.
name|submissionContext
argument_list|,
literal|false
argument_list|,
name|app
operator|.
name|applicationPriority
argument_list|)
argument_list|)
expr_stmt|;
comment|// send the ATS create Event
name|app
operator|.
name|sendATSCreateEvent
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StartAppAttemptTransition
specifier|private
specifier|static
specifier|final
class|class
name|StartAppAttemptTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|createAndStartNewAttempt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|FinalStateSavedTransition
specifier|private
specifier|static
specifier|final
class|class
name|FinalStateSavedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppEvent
argument_list|,
name|RMAppState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|RMAppState
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
init|=
name|app
operator|.
name|submissionContext
operator|.
name|getApplicationTimeouts
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeouts
operator|!=
literal|null
operator|&&
name|timeouts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|app
operator|.
name|rmContext
operator|.
name|getRMAppLifetimeMonitor
argument_list|()
operator|.
name|unregisterApp
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|timeouts
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|transitionTodo
operator|instanceof
name|SingleArcTransition
condition|)
block|{
operator|(
operator|(
name|SingleArcTransition
operator|)
name|app
operator|.
name|transitionTodo
operator|)
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|app
operator|.
name|eventCausingFinalSaving
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|app
operator|.
name|transitionTodo
operator|instanceof
name|MultipleArcTransition
condition|)
block|{
operator|(
operator|(
name|MultipleArcTransition
operator|)
name|app
operator|.
name|transitionTodo
operator|)
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|app
operator|.
name|eventCausingFinalSaving
argument_list|)
expr_stmt|;
block|}
return|return
name|app
operator|.
name|targetedFinalState
return|;
block|}
block|}
DECL|class|AttemptFailedFinalStateSavedTransition
specifier|private
specifier|static
class|class
name|AttemptFailedFinalStateSavedTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|RMAppFailedAttemptEvent
condition|)
block|{
name|msg
operator|=
name|app
operator|.
name|getAppAttemptFailedDiagnostics
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Inform the node for app-finish
operator|new
name|FinalTransition
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|)
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAppAttemptFailedDiagnostics (RMAppEvent event)
specifier|private
name|String
name|getAppAttemptFailedDiagnostics
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|String
name|msg
init|=
literal|null
decl_stmt|;
name|RMAppFailedAttemptEvent
name|failedEvent
init|=
operator|(
name|RMAppFailedAttemptEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// RM does not manage the AM. Do not retry
name|msg
operator|=
literal|"Unmanaged application "
operator|+
name|this
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" failed due to "
operator|+
name|failedEvent
operator|.
name|getDiagnosticMsg
argument_list|()
operator|+
literal|". Failing the application."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isNumAttemptsBeyondThreshold
condition|)
block|{
name|int
name|globalLimit
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Application %s failed %d times%s%s due to %s. Failing the application."
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|maxAppAttempts
argument_list|,
operator|(
name|attemptFailuresValidityInterval
operator|<=
literal|0
condition|?
literal|""
else|:
operator|(
literal|" in previous "
operator|+
name|attemptFailuresValidityInterval
operator|+
literal|" milliseconds"
operator|)
operator|)
argument_list|,
operator|(
name|globalLimit
operator|==
name|maxAppAttempts
operator|)
condition|?
literal|""
else|:
operator|(
literal|" (global limit ="
operator|+
name|globalLimit
operator|+
literal|"; local limit is ="
operator|+
name|maxAppAttempts
operator|+
literal|")"
operator|)
argument_list|,
name|failedEvent
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
DECL|class|RMAppNewlySavingTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppNewlySavingTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|long
name|applicationLifetime
init|=
name|app
operator|.
name|getApplicationLifetime
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
decl_stmt|;
name|applicationLifetime
operator|=
name|app
operator|.
name|scheduler
operator|.
name|checkAndGetApplicationLifetime
argument_list|(
name|app
operator|.
name|queue
argument_list|,
name|applicationLifetime
argument_list|)
expr_stmt|;
if|if
condition|(
name|applicationLifetime
operator|>
literal|0
condition|)
block|{
comment|// calculate next timeout value
name|Long
name|newTimeout
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|app
operator|.
name|submitTime
operator|+
operator|(
name|applicationLifetime
operator|*
literal|1000
operator|)
argument_list|)
decl_stmt|;
name|app
operator|.
name|rmContext
operator|.
name|getRMAppLifetimeMonitor
argument_list|()
operator|.
name|registerApp
argument_list|(
name|app
operator|.
name|applicationId
argument_list|,
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|newTimeout
argument_list|)
expr_stmt|;
comment|// update applicationTimeouts with new absolute value.
name|app
operator|.
name|applicationTimeouts
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|newTimeout
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|app
operator|.
name|applicationId
operator|+
literal|" is registered for timeout monitor, type="
operator|+
name|ApplicationTimeoutType
operator|.
name|LIFETIME
operator|+
literal|" value="
operator|+
name|applicationLifetime
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
comment|// If recovery is enabled then store the application information in a
comment|// non-blocking call so make sure that RM has stored the information
comment|// needed to restart the AM after RM restart without further client
comment|// communication
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing application with id "
operator|+
name|app
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|app
operator|.
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeNewApplication
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rememberTargetTransitions (RMAppEvent event, Object transitionToDo, RMAppState targetFinalState)
specifier|private
name|void
name|rememberTargetTransitions
parameter_list|(
name|RMAppEvent
name|event
parameter_list|,
name|Object
name|transitionToDo
parameter_list|,
name|RMAppState
name|targetFinalState
parameter_list|)
block|{
name|transitionTodo
operator|=
name|transitionToDo
expr_stmt|;
name|targetedFinalState
operator|=
name|targetFinalState
expr_stmt|;
name|eventCausingFinalSaving
operator|=
name|event
expr_stmt|;
block|}
DECL|method|rememberTargetTransitionsAndStoreState (RMAppEvent event, Object transitionToDo, RMAppState targetFinalState, RMAppState stateToBeStored)
specifier|private
name|void
name|rememberTargetTransitionsAndStoreState
parameter_list|(
name|RMAppEvent
name|event
parameter_list|,
name|Object
name|transitionToDo
parameter_list|,
name|RMAppState
name|targetFinalState
parameter_list|,
name|RMAppState
name|stateToBeStored
parameter_list|)
block|{
name|rememberTargetTransitions
argument_list|(
name|event
argument_list|,
name|transitionToDo
argument_list|,
name|targetFinalState
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateBeforeFinalSaving
operator|=
name|getState
argument_list|()
expr_stmt|;
name|this
operator|.
name|storedFinishTime
operator|=
name|this
operator|.
name|systemClock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating application "
operator|+
name|this
operator|.
name|applicationId
operator|+
literal|" with final state: "
operator|+
name|this
operator|.
name|targetedFinalState
argument_list|)
expr_stmt|;
comment|// we lost attempt_finished diagnostics in app, because attempt_finished
comment|// diagnostics is sent after app final state is saved. Later on, we will
comment|// create GetApplicationAttemptReport specifically for getting per attempt
comment|// info.
name|String
name|diags
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APP_REJECTED
case|:
case|case
name|ATTEMPT_FINISHED
case|:
case|case
name|ATTEMPT_KILLED
case|:
name|diags
operator|=
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
expr_stmt|;
break|break;
case|case
name|ATTEMPT_FAILED
case|:
name|RMAppFailedAttemptEvent
name|failedEvent
init|=
operator|(
name|RMAppFailedAttemptEvent
operator|)
name|event
decl_stmt|;
name|diags
operator|=
name|getAppAttemptFailedDiagnostics
argument_list|(
name|failedEvent
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|ApplicationStateData
name|appState
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|submitTime
argument_list|,
name|this
operator|.
name|startTime
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|this
operator|.
name|submissionContext
argument_list|,
name|stateToBeStored
argument_list|,
name|diags
argument_list|,
name|this
operator|.
name|storedFinishTime
argument_list|,
name|this
operator|.
name|callerContext
argument_list|)
decl_stmt|;
name|appState
operator|.
name|setApplicationTimeouts
argument_list|(
name|this
operator|.
name|applicationTimeouts
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|updateApplicationState
argument_list|(
name|appState
argument_list|)
expr_stmt|;
block|}
DECL|class|FinalSavingTransition
specifier|private
specifier|static
specifier|final
class|class
name|FinalSavingTransition
extends|extends
name|RMAppTransition
block|{
DECL|field|transitionToDo
name|Object
name|transitionToDo
decl_stmt|;
DECL|field|targetedFinalState
name|RMAppState
name|targetedFinalState
decl_stmt|;
DECL|field|stateToBeStored
name|RMAppState
name|stateToBeStored
decl_stmt|;
DECL|method|FinalSavingTransition (Object transitionToDo, RMAppState targetedFinalState)
specifier|public
name|FinalSavingTransition
parameter_list|(
name|Object
name|transitionToDo
parameter_list|,
name|RMAppState
name|targetedFinalState
parameter_list|)
block|{
name|this
argument_list|(
name|transitionToDo
argument_list|,
name|targetedFinalState
argument_list|,
name|targetedFinalState
argument_list|)
expr_stmt|;
block|}
DECL|method|FinalSavingTransition (Object transitionToDo, RMAppState targetedFinalState, RMAppState stateToBeStored)
specifier|public
name|FinalSavingTransition
parameter_list|(
name|Object
name|transitionToDo
parameter_list|,
name|RMAppState
name|targetedFinalState
parameter_list|,
name|RMAppState
name|stateToBeStored
parameter_list|)
block|{
name|this
operator|.
name|transitionToDo
operator|=
name|transitionToDo
expr_stmt|;
name|this
operator|.
name|targetedFinalState
operator|=
name|targetedFinalState
expr_stmt|;
name|this
operator|.
name|stateToBeStored
operator|=
name|stateToBeStored
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
name|transitionToDo
argument_list|,
name|targetedFinalState
argument_list|,
name|stateToBeStored
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AttemptUnregisteredTransition
specifier|private
specifier|static
class|class
name|AttemptUnregisteredTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|finishTime
operator|=
name|app
operator|.
name|storedFinishTime
expr_stmt|;
block|}
block|}
DECL|class|AppFinishedTransition
specifier|private
specifier|static
class|class
name|AppFinishedTransition
extends|extends
name|FinalTransition
block|{
DECL|method|AppFinishedTransition ()
specifier|public
name|AppFinishedTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|AttemptFinishedAtFinalSavingTransition
specifier|private
specifier|static
class|class
name|AttemptFinishedAtFinalSavingTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|app
operator|.
name|targetedFinalState
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|)
operator|||
name|app
operator|.
name|targetedFinalState
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|)
condition|)
block|{
comment|// Ignore Attempt_Finished event if we were supposed to reach FAILED
comment|// FINISHED state
return|return;
block|}
comment|// pass in the earlier attempt_unregistered event, as it is needed in
comment|// AppFinishedFinalStateSavedTransition later on
name|app
operator|.
name|rememberTargetTransitions
argument_list|(
name|event
argument_list|,
operator|new
name|AppFinishedFinalStateSavedTransition
argument_list|(
name|app
operator|.
name|eventCausingFinalSaving
argument_list|)
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|AppFinishedFinalStateSavedTransition
specifier|private
specifier|static
class|class
name|AppFinishedFinalStateSavedTransition
extends|extends
name|RMAppTransition
block|{
DECL|field|attemptUnregistered
name|RMAppEvent
name|attemptUnregistered
decl_stmt|;
DECL|method|AppFinishedFinalStateSavedTransition (RMAppEvent attemptUnregistered)
specifier|public
name|AppFinishedFinalStateSavedTransition
parameter_list|(
name|RMAppEvent
name|attemptUnregistered
parameter_list|)
block|{
name|this
operator|.
name|attemptUnregistered
operator|=
name|attemptUnregistered
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
operator|new
name|AttemptUnregisteredTransition
argument_list|()
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|attemptUnregistered
argument_list|)
expr_stmt|;
name|FINISHED_TRANSITION
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|/**    * Log the audit event for kill by client.    *    * @param event    *          The {@link RMAppEvent} to be logged    */
DECL|method|auditLogKillEvent (RMAppEvent event)
specifier|static
name|void
name|auditLogKillEvent
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|RMAppKillByClientEvent
condition|)
block|{
name|RMAppKillByClientEvent
name|killEvent
init|=
operator|(
name|RMAppKillByClientEvent
operator|)
name|event
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|killEvent
operator|.
name|getCallerUGI
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
name|InetAddress
name|remoteIP
init|=
name|killEvent
operator|.
name|getIp
argument_list|()
decl_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"RMAppImpl"
argument_list|,
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|remoteIP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AppKilledTransition
specifier|private
specifier|static
class|class
name|AppKilledTransition
extends|extends
name|FinalTransition
block|{
DECL|method|AppKilledTransition ()
specifier|public
name|AppKilledTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|RMAppImpl
operator|.
name|auditLogKillEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|KillAttemptTransition
specifier|private
specifier|static
class|class
name|KillAttemptTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|stateBeforeKilling
operator|=
name|app
operator|.
name|getState
argument_list|()
expr_stmt|;
comment|// Forward app kill diagnostics in the event to kill app attempt.
comment|// These diagnostics will be returned back in ATTEMPT_KILLED event sent by
comment|// RMAppAttemptImpl.
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|app
operator|.
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|,
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppImpl
operator|.
name|auditLogKillEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AppRejectedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AppRejectedTransition
extends|extends
name|FinalTransition
block|{
DECL|method|AppRejectedTransition ()
specifier|public
name|AppRejectedTransition
parameter_list|()
block|{
name|super
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|event
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|FinalTransition
specifier|private
specifier|static
class|class
name|FinalTransition
extends|extends
name|RMAppTransition
block|{
DECL|field|finalState
specifier|private
specifier|final
name|RMAppState
name|finalState
decl_stmt|;
DECL|method|FinalTransition (RMAppState finalState)
specifier|public
name|FinalTransition
parameter_list|(
name|RMAppState
name|finalState
parameter_list|)
block|{
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
block|}
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|logAggregationStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|app
operator|.
name|getRanNodes
argument_list|()
control|)
block|{
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanAppEvent
argument_list|(
name|nodeId
argument_list|,
name|app
operator|.
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|app
operator|.
name|finishTime
operator|=
name|app
operator|.
name|storedFinishTime
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|finishTime
operator|==
literal|0
condition|)
block|{
name|app
operator|.
name|finishTime
operator|=
name|app
operator|.
name|systemClock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
comment|// Recovered apps that are completed were not added to scheduler, so no
comment|// need to remove them from scheduler.
if|if
condition|(
name|app
operator|.
name|recoveredFinalState
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|AppRemovedSchedulerEvent
argument_list|(
name|app
operator|.
name|applicationId
argument_list|,
name|finalState
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppManagerEvent
argument_list|(
name|app
operator|.
name|applicationId
argument_list|,
name|RMAppManagerEventType
operator|.
name|APP_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|applicationFinished
argument_list|(
name|app
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
name|app
operator|.
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|appFinished
argument_list|(
name|app
argument_list|,
name|finalState
argument_list|,
name|app
operator|.
name|finishTime
argument_list|)
expr_stmt|;
comment|// set the memory free
name|app
operator|.
name|submissionContext
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|setTokensConf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|method|getNumFailedAppAttempts ()
specifier|public
name|int
name|getNumFailedAppAttempts
parameter_list|()
block|{
name|int
name|completedAttempts
init|=
literal|0
decl_stmt|;
comment|// Do not count AM preemption, hardware failures or NM resync
comment|// as attempt failure.
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
condition|)
block|{
name|completedAttempts
operator|++
expr_stmt|;
block|}
block|}
return|return
name|completedAttempts
return|;
block|}
DECL|class|AttemptFailedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AttemptFailedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppEvent
argument_list|,
name|RMAppState
argument_list|>
block|{
DECL|field|initialState
specifier|private
specifier|final
name|RMAppState
name|initialState
decl_stmt|;
DECL|method|AttemptFailedTransition (RMAppState initialState)
specifier|public
name|AttemptFailedTransition
parameter_list|(
name|RMAppState
name|initialState
parameter_list|)
block|{
name|this
operator|.
name|initialState
operator|=
name|initialState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|RMAppState
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|int
name|numberOfFailure
init|=
name|app
operator|.
name|getNumFailedAppAttempts
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|maxAppAttempts
operator|==
literal|1
condition|)
block|{
comment|// If the user explicitly set the attempts to 1 then there are likely
comment|// correctness issues if the AM restarts for any reason.
name|LOG
operator|.
name|info
argument_list|(
literal|"Max app attempts is 1 for "
operator|+
name|app
operator|.
name|applicationId
operator|+
literal|", preventing further attempts."
argument_list|)
expr_stmt|;
name|numberOfFailure
operator|=
name|app
operator|.
name|maxAppAttempts
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The number of failed attempts"
operator|+
operator|(
name|app
operator|.
name|attemptFailuresValidityInterval
operator|>
literal|0
condition|?
literal|" in previous "
operator|+
name|app
operator|.
name|attemptFailuresValidityInterval
operator|+
literal|" milliseconds "
else|:
literal|" "
operator|)
operator|+
literal|"is "
operator|+
name|numberOfFailure
operator|+
literal|". The max attempts is "
operator|+
name|app
operator|.
name|maxAppAttempts
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|attemptFailuresValidityInterval
operator|>
literal|0
condition|)
block|{
name|removeExcessAttempts
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|app
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
operator|&&
name|numberOfFailure
operator|<
name|app
operator|.
name|maxAppAttempts
condition|)
block|{
if|if
condition|(
name|initialState
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|)
condition|)
block|{
comment|// If this is not last attempt, app should be killed instead of
comment|// launching a new attempt
name|app
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
operator|new
name|AppKilledTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
return|return
name|RMAppState
operator|.
name|FINAL_SAVING
return|;
block|}
name|boolean
name|transferStateFromPreviousAttempt
decl_stmt|;
name|RMAppFailedAttemptEvent
name|failedEvent
init|=
operator|(
name|RMAppFailedAttemptEvent
operator|)
name|event
decl_stmt|;
name|transferStateFromPreviousAttempt
operator|=
name|failedEvent
operator|.
name|getTransferStateFromPreviousAttempt
argument_list|()
expr_stmt|;
name|RMAppAttempt
name|oldAttempt
init|=
name|app
operator|.
name|currentAttempt
decl_stmt|;
name|app
operator|.
name|createAndStartNewAttempt
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
comment|// Transfer the state from the previous attempt to the current attempt.
comment|// Note that the previous failed attempt may still be collecting the
comment|// container events from the scheduler and update its data structures
comment|// before the new attempt is created. We always transferState for
comment|// finished containers so that they can be acked to NM,
comment|// but when pulling finished container we will check this flag again.
operator|(
operator|(
name|RMAppAttemptImpl
operator|)
name|app
operator|.
name|currentAttempt
operator|)
operator|.
name|transferStateFromAttempt
argument_list|(
name|oldAttempt
argument_list|)
expr_stmt|;
return|return
name|initialState
return|;
block|}
else|else
block|{
if|if
condition|(
name|numberOfFailure
operator|>=
name|app
operator|.
name|maxAppAttempts
condition|)
block|{
name|app
operator|.
name|isNumAttemptsBeyondThreshold
operator|=
literal|true
expr_stmt|;
block|}
name|app
operator|.
name|rememberTargetTransitionsAndStoreState
argument_list|(
name|event
argument_list|,
operator|new
name|AttemptFailedFinalStateSavedTransition
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
return|return
name|RMAppState
operator|.
name|FINAL_SAVING
return|;
block|}
block|}
DECL|method|removeExcessAttempts (RMAppImpl app)
specifier|private
name|void
name|removeExcessAttempts
parameter_list|(
name|RMAppImpl
name|app
parameter_list|)
block|{
while|while
condition|(
name|app
operator|.
name|nextAttemptId
operator|-
name|app
operator|.
name|firstAttemptIdInStateStore
operator|>
name|app
operator|.
name|maxAppAttempts
condition|)
block|{
comment|// attempts' first element is oldest attempt because it is a
comment|// LinkedHashMap
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|firstAttemptIdInStateStore
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|rmAppAttempt
init|=
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|long
name|endTime
init|=
name|app
operator|.
name|systemClock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmAppAttempt
operator|.
name|getFinishTime
argument_list|()
operator|<
operator|(
name|endTime
operator|-
name|app
operator|.
name|attemptFailuresValidityInterval
operator|)
condition|)
block|{
name|app
operator|.
name|firstAttemptIdInStateStore
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove attempt from state store : "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
name|app
operator|.
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|removeApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationType ()
specifier|public
name|String
name|getApplicationType
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationType
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationTags ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getApplicationTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationTags
return|;
block|}
annotation|@
name|Override
DECL|method|isAppFinalStateStored ()
specifier|public
name|boolean
name|isAppFinalStateStored
parameter_list|()
block|{
name|RMAppState
name|state
init|=
name|getState
argument_list|()
decl_stmt|;
return|return
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createApplicationState ()
specifier|public
name|YarnApplicationState
name|createApplicationState
parameter_list|()
block|{
name|RMAppState
name|rmAppState
init|=
name|getState
argument_list|()
decl_stmt|;
comment|// If App is in FINAL_SAVING state, return its previous state.
if|if
condition|(
name|rmAppState
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|)
condition|)
block|{
name|rmAppState
operator|=
name|stateBeforeFinalSaving
expr_stmt|;
block|}
if|if
condition|(
name|rmAppState
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|KILLING
argument_list|)
condition|)
block|{
name|rmAppState
operator|=
name|stateBeforeKilling
expr_stmt|;
block|}
return|return
name|RMServerUtils
operator|.
name|createApplicationState
argument_list|(
name|rmAppState
argument_list|)
return|;
block|}
DECL|method|isAppInFinalState (RMApp rmApp)
specifier|public
specifier|static
name|boolean
name|isAppInFinalState
parameter_list|(
name|RMApp
name|rmApp
parameter_list|)
block|{
name|RMAppState
name|appState
init|=
operator|(
operator|(
name|RMAppImpl
operator|)
name|rmApp
operator|)
operator|.
name|getRecoveredFinalState
argument_list|()
decl_stmt|;
if|if
condition|(
name|appState
operator|==
literal|null
condition|)
block|{
name|appState
operator|=
name|rmApp
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
return|return
name|appState
operator|==
name|RMAppState
operator|.
name|FAILED
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|FINISHED
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|KILLED
return|;
block|}
annotation|@
name|Override
DECL|method|isAppInCompletedStates ()
specifier|public
name|boolean
name|isAppInCompletedStates
parameter_list|()
block|{
name|RMAppState
name|appState
init|=
name|getState
argument_list|()
decl_stmt|;
return|return
name|appState
operator|==
name|RMAppState
operator|.
name|FINISHED
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|FINISHING
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|FAILED
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|KILLED
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|FINAL_SAVING
operator|||
name|appState
operator|==
name|RMAppState
operator|.
name|KILLING
return|;
block|}
DECL|method|getRecoveredFinalState ()
specifier|public
name|RMAppState
name|getRecoveredFinalState
parameter_list|()
block|{
return|return
name|this
operator|.
name|recoveredFinalState
return|;
block|}
annotation|@
name|Override
DECL|method|getRanNodes ()
specifier|public
name|Set
argument_list|<
name|NodeId
argument_list|>
name|getRanNodes
parameter_list|()
block|{
return|return
name|ranNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getRMAppMetrics ()
specifier|public
name|RMAppMetrics
name|getRMAppMetrics
parameter_list|()
block|{
name|Resource
name|resourcePreempted
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|numAMContainerPreempted
init|=
literal|0
decl_stmt|;
name|int
name|numNonAMContainerPreempted
init|=
literal|0
decl_stmt|;
name|long
name|memorySeconds
init|=
literal|0
decl_stmt|;
name|long
name|vcoreSeconds
init|=
literal|0
decl_stmt|;
name|long
name|preemptedMemorySeconds
init|=
literal|0
decl_stmt|;
name|long
name|preemptedVcoreSeconds
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|attempt
condition|)
block|{
name|RMAppAttemptMetrics
name|attemptMetrics
init|=
name|attempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|resourcePreempted
argument_list|,
name|attemptMetrics
operator|.
name|getResourcePreempted
argument_list|()
argument_list|)
expr_stmt|;
name|numAMContainerPreempted
operator|+=
name|attemptMetrics
operator|.
name|getIsPreempted
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|numNonAMContainerPreempted
operator|+=
name|attemptMetrics
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
expr_stmt|;
comment|// getAggregateAppResourceUsage() will calculate resource usage stats
comment|// for both running and finished containers.
name|AggregateAppResourceUsage
name|resUsage
init|=
name|attempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
operator|.
name|getAggregateAppResourceUsage
argument_list|()
decl_stmt|;
name|memorySeconds
operator|+=
name|resUsage
operator|.
name|getMemorySeconds
argument_list|()
expr_stmt|;
name|vcoreSeconds
operator|+=
name|resUsage
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
name|preemptedMemorySeconds
operator|+=
name|attemptMetrics
operator|.
name|getPreemptedMemory
argument_list|()
expr_stmt|;
name|preemptedVcoreSeconds
operator|+=
name|attemptMetrics
operator|.
name|getPreemptedVcore
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RMAppMetrics
argument_list|(
name|resourcePreempted
argument_list|,
name|numNonAMContainerPreempted
argument_list|,
name|numAMContainerPreempted
argument_list|,
name|memorySeconds
argument_list|,
name|vcoreSeconds
argument_list|,
name|preemptedMemorySeconds
argument_list|,
name|preemptedVcoreSeconds
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setSystemClock (Clock clock)
specifier|public
name|void
name|setSystemClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|systemClock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReservationId ()
specifier|public
name|ReservationId
name|getReservationId
parameter_list|()
block|{
return|return
name|submissionContext
operator|.
name|getReservationID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAMResourceRequests ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getAMResourceRequests
parameter_list|()
block|{
return|return
name|this
operator|.
name|amReqs
return|;
block|}
annotation|@
name|Override
DECL|method|getLogAggregationReportsForApp ()
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|getLogAggregationReportsForApp
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isLogAggregationFinished
argument_list|()
operator|&&
name|isAppInFinalState
argument_list|(
name|this
argument_list|)
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|this
operator|.
name|logAggregationStartTime
operator|+
name|this
operator|.
name|logAggregationStatusTimeout
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|output
range|:
name|logAggregationStatus
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
operator|&&
operator|!
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
operator|&&
operator|!
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
condition|)
block|{
name|output
operator|.
name|getValue
argument_list|()
operator|.
name|setLogAggregationStatus
argument_list|(
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|logAggregationStatus
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|aggregateLogReport (NodeId nodeId, LogAggregationReport report)
specifier|public
name|void
name|aggregateLogReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|LogAggregationReport
name|report
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|logAggregationEnabled
operator|&&
operator|!
name|isLogAggregationFinished
argument_list|()
condition|)
block|{
name|LogAggregationReport
name|curReport
init|=
name|this
operator|.
name|logAggregationStatus
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|boolean
name|stateChangedToFinal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|curReport
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|logAggregationStatus
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLogAggregationFinishedForNM
argument_list|(
name|report
argument_list|)
condition|)
block|{
name|stateChangedToFinal
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isLogAggregationFinishedForNM
argument_list|(
name|report
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isLogAggregationFinishedForNM
argument_list|(
name|curReport
argument_list|)
condition|)
block|{
name|stateChangedToFinal
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|!=
name|LogAggregationStatus
operator|.
name|RUNNING
operator|||
name|curReport
operator|.
name|getLogAggregationStatus
argument_list|()
operator|!=
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
condition|)
block|{
if|if
condition|(
name|curReport
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|TIME_OUT
operator|&&
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING
condition|)
block|{
comment|// If the log aggregation status got from latest nm heartbeat
comment|// is Running, and current log aggregation status is TimeOut,
comment|// based on whether there are any failure messages for this NM,
comment|// we will reset the log aggregation status as RUNNING or
comment|// RUNNING_WITH_FAILURE
if|if
condition|(
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|report
operator|.
name|setLogAggregationStatus
argument_list|(
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
name|curReport
operator|.
name|setLogAggregationStatus
argument_list|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|updateLogAggregationDiagnosticMessages
argument_list|(
name|nodeId
argument_list|,
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAppInFinalState
argument_list|(
name|this
argument_list|)
operator|&&
name|stateChangedToFinal
condition|)
block|{
name|updateLogAggregationStatus
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLogAggregationStatusForAppReport ()
specifier|public
name|LogAggregationStatus
name|getLogAggregationStatusForAppReport
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|logAggregationEnabled
condition|)
block|{
return|return
name|LogAggregationStatus
operator|.
name|DISABLED
return|;
block|}
if|if
condition|(
name|isLogAggregationFinished
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|logAggregationStatusForAppReport
return|;
block|}
name|Map
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|reports
init|=
name|getLogAggregationReportsForApp
argument_list|()
decl_stmt|;
if|if
condition|(
name|reports
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|logAggregationStatusForAppReport
return|;
block|}
name|int
name|logNotStartCount
init|=
literal|0
decl_stmt|;
name|int
name|logCompletedCount
init|=
literal|0
decl_stmt|;
name|int
name|logTimeOutCount
init|=
literal|0
decl_stmt|;
name|int
name|logFailedCount
init|=
literal|0
decl_stmt|;
name|int
name|logRunningWithFailure
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|report
range|:
name|reports
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|report
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
condition|)
block|{
case|case
name|NOT_START
case|:
name|logNotStartCount
operator|++
expr_stmt|;
break|break;
case|case
name|RUNNING_WITH_FAILURE
case|:
name|logRunningWithFailure
operator|++
expr_stmt|;
break|break;
case|case
name|SUCCEEDED
case|:
name|logCompletedCount
operator|++
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|logFailedCount
operator|++
expr_stmt|;
name|logCompletedCount
operator|++
expr_stmt|;
break|break;
case|case
name|TIME_OUT
case|:
name|logTimeOutCount
operator|++
expr_stmt|;
name|logCompletedCount
operator|++
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|logNotStartCount
operator|==
name|reports
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|LogAggregationStatus
operator|.
name|NOT_START
return|;
block|}
elseif|else
if|if
condition|(
name|logCompletedCount
operator|==
name|reports
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// We should satisfy two condition in order to return SUCCEEDED or FAILED
comment|// 1) make sure the application is in final state
comment|// 2) logs status from all NMs are SUCCEEDED/FAILED/TIMEOUT
comment|// The SUCCEEDED/FAILED status is the final status which means
comment|// the log aggregation is finished. And the log aggregation status will
comment|// not be updated anymore.
if|if
condition|(
name|logFailedCount
operator|>
literal|0
operator|&&
name|isAppInFinalState
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|FAILED
expr_stmt|;
return|return
name|LogAggregationStatus
operator|.
name|FAILED
return|;
block|}
elseif|else
if|if
condition|(
name|logTimeOutCount
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|TIME_OUT
expr_stmt|;
return|return
name|LogAggregationStatus
operator|.
name|TIME_OUT
return|;
block|}
if|if
condition|(
name|isAppInFinalState
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|SUCCEEDED
expr_stmt|;
return|return
name|LogAggregationStatus
operator|.
name|SUCCEEDED
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|logRunningWithFailure
operator|>
literal|0
condition|)
block|{
return|return
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
return|;
block|}
return|return
name|LogAggregationStatus
operator|.
name|RUNNING
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isLogAggregationFinished ()
specifier|private
name|boolean
name|isLogAggregationFinished
parameter_list|()
block|{
return|return
name|this
operator|.
name|logAggregationStatusForAppReport
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
operator|||
name|this
operator|.
name|logAggregationStatusForAppReport
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
operator|||
name|this
operator|.
name|logAggregationStatusForAppReport
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
return|;
block|}
DECL|method|isLogAggregationFinishedForNM (LogAggregationReport report)
specifier|private
name|boolean
name|isLogAggregationFinishedForNM
parameter_list|(
name|LogAggregationReport
name|report
parameter_list|)
block|{
return|return
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|SUCCEEDED
operator|||
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|FAILED
return|;
block|}
DECL|method|updateLogAggregationDiagnosticMessages (NodeId nodeId, LogAggregationReport report)
specifier|private
name|void
name|updateLogAggregationDiagnosticMessages
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|LogAggregationReport
name|report
parameter_list|)
block|{
if|if
condition|(
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|diagnostics
init|=
name|logAggregationDiagnosticsForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|diagnostics
operator|==
literal|null
condition|)
block|{
name|diagnostics
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|logAggregationDiagnosticsForNMs
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|diagnostics
operator|.
name|size
argument_list|()
operator|==
name|maxLogAggregationDiagnosticsInMemory
condition|)
block|{
name|diagnostics
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|diagnostics
operator|.
name|add
argument_list|(
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationStatus
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setDiagnosticMessage
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|diagnostics
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|report
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failureMessages
init|=
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|failureMessages
operator|==
literal|null
condition|)
block|{
name|failureMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|logAggregationFailureMessagesForNMs
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|failureMessages
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|failureMessages
operator|.
name|size
argument_list|()
operator|==
name|maxLogAggregationDiagnosticsInMemory
condition|)
block|{
name|failureMessages
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|failureMessages
operator|.
name|add
argument_list|(
name|report
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateLogAggregationStatus (NodeId nodeId)
specifier|private
name|void
name|updateLogAggregationStatus
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|LogAggregationStatus
name|status
init|=
name|this
operator|.
name|logAggregationStatus
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|getLogAggregationStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
condition|)
block|{
name|this
operator|.
name|logAggregationSucceed
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
condition|)
block|{
name|this
operator|.
name|logAggregationFailed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|logAggregationSucceed
operator|==
name|this
operator|.
name|logAggregationStatus
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|SUCCEEDED
expr_stmt|;
comment|// Since the log aggregation status for this application for all NMs
comment|// is SUCCEEDED, it means all logs are aggregated successfully.
comment|// We could remove all the cached log aggregation reports
name|this
operator|.
name|logAggregationStatus
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationDiagnosticsForNMs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationFailureMessagesForNMs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|logAggregationSucceed
operator|+
name|this
operator|.
name|logAggregationFailed
operator|==
name|this
operator|.
name|logAggregationStatus
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|logAggregationStatusForAppReport
operator|=
name|LogAggregationStatus
operator|.
name|FAILED
expr_stmt|;
comment|// We have collected the log aggregation status for all NMs.
comment|// The log aggregation status is FAILED which means the log
comment|// aggregation fails in some NMs. We are only interested in the
comment|// nodes where the log aggregation is failed. So we could remove
comment|// the log aggregation details for those succeeded NMs
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
argument_list|>
name|it
init|=
name|this
operator|.
name|logAggregationStatus
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|LogAggregationReport
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLogAggregationStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// the log aggregation has finished/failed.
comment|// and the status will not be updated anymore.
name|this
operator|.
name|logAggregationDiagnosticsForNMs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLogAggregationFailureMessagesForNM (NodeId nodeId)
specifier|public
name|String
name|getLogAggregationFailureMessagesForNM
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failureMessages
init|=
name|this
operator|.
name|logAggregationFailureMessagesForNMs
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|failureMessages
operator|==
literal|null
operator|||
name|failureMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|StringUtils
operator|.
name|EMPTY
return|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|failureMessages
argument_list|,
literal|"\n"
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAppNodeLabelExpression ()
specifier|public
name|String
name|getAppNodeLabelExpression
parameter_list|()
block|{
name|String
name|appNodeLabelExpression
init|=
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
name|appNodeLabelExpression
operator|=
operator|(
name|appNodeLabelExpression
operator|==
literal|null
operator|)
condition|?
name|NodeLabel
operator|.
name|NODE_LABEL_EXPRESSION_NOT_SET
else|:
name|appNodeLabelExpression
expr_stmt|;
name|appNodeLabelExpression
operator|=
operator|(
name|appNodeLabelExpression
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|appNodeLabelExpression
expr_stmt|;
return|return
name|appNodeLabelExpression
return|;
block|}
annotation|@
name|Override
DECL|method|getAmNodeLabelExpression ()
specifier|public
name|String
name|getAmNodeLabelExpression
parameter_list|()
block|{
name|String
name|amNodeLabelExpression
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
name|amNodeLabelExpression
operator|=
name|getAMResourceRequests
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getAMResourceRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
else|:
literal|null
expr_stmt|;
name|amNodeLabelExpression
operator|=
operator|(
name|amNodeLabelExpression
operator|==
literal|null
operator|)
condition|?
name|NodeLabel
operator|.
name|NODE_LABEL_EXPRESSION_NOT_SET
else|:
name|amNodeLabelExpression
expr_stmt|;
name|amNodeLabelExpression
operator|=
operator|(
name|amNodeLabelExpression
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|amNodeLabelExpression
expr_stmt|;
block|}
return|return
name|amNodeLabelExpression
return|;
block|}
annotation|@
name|Override
DECL|method|getCallerContext ()
specifier|public
name|CallerContext
name|getCallerContext
parameter_list|()
block|{
return|return
name|callerContext
return|;
block|}
DECL|method|sendATSCreateEvent ()
specifier|private
name|void
name|sendATSCreateEvent
parameter_list|()
block|{
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|applicationStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|appCreated
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getNextAttemptId ()
specifier|public
name|int
name|getNextAttemptId
parameter_list|()
block|{
return|return
name|nextAttemptId
return|;
block|}
DECL|method|getApplicationLifetime (ApplicationTimeoutType type)
specifier|private
name|long
name|getApplicationLifetime
parameter_list|(
name|ApplicationTimeoutType
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
init|=
name|this
operator|.
name|submissionContext
operator|.
name|getApplicationTimeouts
argument_list|()
decl_stmt|;
name|long
name|applicationLifetime
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|timeouts
operator|!=
literal|null
operator|&&
name|timeouts
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|applicationLifetime
operator|=
name|timeouts
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|applicationLifetime
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationTimeouts ()
specifier|public
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|getApplicationTimeouts
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|HashMap
argument_list|(
name|this
operator|.
name|applicationTimeouts
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateApplicationTimeout ( Map<ApplicationTimeoutType, Long> updateTimeout)
specifier|public
name|void
name|updateApplicationTimeout
parameter_list|(
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|updateTimeout
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|COMPLETED_APP_STATES
operator|.
name|contains
argument_list|(
name|getState
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// update monitoring service
name|this
operator|.
name|rmContext
operator|.
name|getRMAppLifetimeMonitor
argument_list|()
operator|.
name|updateApplicationTimeouts
argument_list|(
name|getApplicationId
argument_list|()
argument_list|,
name|updateTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|applicationTimeouts
operator|.
name|putAll
argument_list|(
name|updateTimeout
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationPriority ()
specifier|public
name|Priority
name|getApplicationPriority
parameter_list|()
block|{
return|return
name|applicationPriority
return|;
block|}
DECL|method|setApplicationPriority (Priority applicationPriority)
specifier|public
name|void
name|setApplicationPriority
parameter_list|(
name|Priority
name|applicationPriority
parameter_list|)
block|{
name|this
operator|.
name|applicationPriority
operator|=
name|applicationPriority
expr_stmt|;
block|}
block|}
end_class

end_unit

