begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientToAMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Recoverable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNodeUpdateEvent
operator|.
name|RMAppNodeUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|RMAppImpl
specifier|public
class|class
name|RMAppImpl
implements|implements
name|RMApp
implements|,
name|Recoverable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNAVAILABLE
specifier|private
specifier|static
specifier|final
name|String
name|UNAVAILABLE
init|=
literal|"N/A"
decl_stmt|;
comment|// Immutable fields
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|submissionContext
specifier|private
specifier|final
name|ApplicationSubmissionContext
name|submissionContext
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|masterService
specifier|private
specifier|final
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|StringBuilder
name|diagnostics
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|maxAppAttempts
specifier|private
specifier|final
name|int
name|maxAppAttempts
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|attempts
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|submitTime
specifier|private
specifier|final
name|long
name|submitTime
decl_stmt|;
DECL|field|updatedNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|RMNode
argument_list|>
name|updatedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|applicationType
specifier|private
specifier|final
name|String
name|applicationType
decl_stmt|;
comment|// Mutable fields
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|currentAttempt
specifier|private
name|RMAppAttempt
name|currentAttempt
decl_stmt|;
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|handler
specifier|private
name|EventHandler
name|handler
decl_stmt|;
DECL|field|FINAL_TRANSITION
specifier|private
specifier|static
specifier|final
name|FinalTransition
name|FINAL_TRANSITION
init|=
operator|new
name|FinalTransition
argument_list|()
decl_stmt|;
DECL|field|FINISHED_TRANSITION
specifier|private
specifier|static
specifier|final
name|AppFinishedTransition
name|FINISHED_TRANSITION
init|=
operator|new
name|AppFinishedTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppState
argument_list|,
name|RMAppEventType
argument_list|,
DECL|field|stateMachineFactory
name|RMAppEvent
argument_list|>
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppState
argument_list|,
name|RMAppEventType
argument_list|,
name|RMAppEvent
argument_list|>
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|,
operator|new
name|RMAppSavingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppEventType
operator|.
name|RECOVER
argument_list|,
operator|new
name|StartAppAttemptTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|AppKilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|)
comment|// Transitions from NEW_SAVING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_SAVED
argument_list|,
operator|new
name|StartAppAttemptTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|AppKilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|)
comment|// Transitions from SUBMITTED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
operator|new
name|AppRejectedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAppAndAttemptTransition
argument_list|()
argument_list|)
comment|// Transitions from ACCEPTED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAppAndAttemptTransition
argument_list|()
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
operator|new
name|RMAppNodeUpdateTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHING
argument_list|,
operator|new
name|RMAppFinishingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|FINISHED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAppAndAttemptTransition
argument_list|()
argument_list|)
comment|// Transitions from FINISHING state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|FINISHED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillAppAndAttemptTransition
argument_list|()
argument_list|)
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|)
comment|// Transitions from FINISHED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHING
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|RMAppEventType
operator|.
name|APP_SAVED
argument_list|)
argument_list|)
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|,
name|RMAppEventType
operator|.
name|APP_SAVED
argument_list|)
argument_list|)
comment|// ignorable transitions
operator|.
name|addTransition
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppEventType
operator|.
name|NODE_UPDATE
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|RMAppState
argument_list|,
name|RMAppEventType
argument_list|,
name|RMAppEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ApplicationResourceUsageReport
DECL|field|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
name|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
init|=
name|BuilderUtils
operator|.
name|newApplicationResourceUsageReport
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|DUMMY_APPLICATION_ATTEMPT_NUMBER
specifier|private
specifier|static
specifier|final
name|int
name|DUMMY_APPLICATION_ATTEMPT_NUMBER
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|RMAppImpl (ApplicationId applicationId, RMContext rmContext, Configuration config, String name, String user, String queue, ApplicationSubmissionContext submissionContext, YarnScheduler scheduler, ApplicationMasterService masterService, long submitTime, String applicationType)
specifier|public
name|RMAppImpl
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|applicationType
parameter_list|)
block|{
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|rmContext
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|submissionContext
operator|=
name|submissionContext
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|masterService
operator|=
name|masterService
expr_stmt|;
name|this
operator|.
name|submitTime
operator|=
name|submitTime
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationType
operator|=
name|applicationType
expr_stmt|;
name|int
name|globalMaxAppAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
name|int
name|individualMaxAppAttempts
init|=
name|submissionContext
operator|.
name|getMaxAppAttempts
argument_list|()
decl_stmt|;
if|if
condition|(
name|individualMaxAppAttempts
operator|<=
literal|0
operator|||
name|individualMaxAppAttempts
operator|>
name|globalMaxAppAttempts
condition|)
block|{
name|this
operator|.
name|maxAppAttempts
operator|=
name|globalMaxAppAttempts
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"The specific max attempts: "
operator|+
name|individualMaxAppAttempts
operator|+
literal|" for application: "
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
operator|+
literal|" is invalid, because it is out of the range [1, "
operator|+
name|globalMaxAppAttempts
operator|+
literal|"]. Use the global max attempts instead."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxAppAttempts
operator|=
name|individualMaxAppAttempts
expr_stmt|;
block|}
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationId
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationSubmissionContext ()
specifier|public
name|ApplicationSubmissionContext
name|getApplicationSubmissionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|submissionContext
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalApplicationStatus ()
specifier|public
name|FinalApplicationStatus
name|getFinalApplicationStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// finish state is obtained based on the state machine's current state
comment|// as a fall-back in case the application has not been unregistered
comment|// ( or if the app never unregistered itself )
comment|// when the report is requested
if|if
condition|(
name|currentAttempt
operator|!=
literal|null
operator|&&
name|currentAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|currentAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
return|;
block|}
return|return
name|createFinalApplicationStatus
argument_list|(
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|RMAppState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|currentAttempt
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|currentAttempt
operator|.
name|getProgress
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRMAppAttempt (ApplicationAttemptId appAttemptId)
specifier|public
name|RMAppAttempt
name|getRMAppAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|attempts
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|this
operator|.
name|queue
return|;
block|}
annotation|@
name|Override
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentAppAttempt ()
specifier|public
name|RMAppAttempt
name|getCurrentAppAttempt
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|currentAttempt
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAppAttempts ()
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|getAppAttempts
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|attempts
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFinalApplicationStatus (RMAppState state)
specifier|private
name|FinalApplicationStatus
name|createFinalApplicationStatus
parameter_list|(
name|RMAppState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|NEW_SAVING
case|:
case|case
name|SUBMITTED
case|:
case|case
name|ACCEPTED
case|:
case|case
name|RUNNING
case|:
return|return
name|FinalApplicationStatus
operator|.
name|UNDEFINED
return|;
comment|// finished without a proper final state is the same as failed
case|case
name|FINISHING
case|:
case|case
name|FINISHED
case|:
case|case
name|FAILED
case|:
return|return
name|FinalApplicationStatus
operator|.
name|FAILED
return|;
case|case
name|KILLED
case|:
return|return
name|FinalApplicationStatus
operator|.
name|KILLED
return|;
block|}
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown state passed!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|pullRMNodeUpdates (Collection<RMNode> updatedNodes)
specifier|public
name|int
name|pullRMNodeUpdates
parameter_list|(
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|updatedNodes
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|updatedNodeCount
init|=
name|this
operator|.
name|updatedNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|updatedNodes
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|updatedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|updatedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|updatedNodeCount
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createAndGetApplicationReport (String clientUserName, boolean allowAccess)
specifier|public
name|ApplicationReport
name|createAndGetApplicationReport
parameter_list|(
name|String
name|clientUserName
parameter_list|,
name|boolean
name|allowAccess
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationAttemptId
name|currentApplicationAttemptId
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|clientToAMToken
init|=
literal|null
decl_stmt|;
name|String
name|trackingUrl
init|=
name|UNAVAILABLE
decl_stmt|;
name|String
name|host
init|=
name|UNAVAILABLE
decl_stmt|;
name|String
name|origTrackingUrl
init|=
name|UNAVAILABLE
decl_stmt|;
name|int
name|rpcPort
init|=
operator|-
literal|1
decl_stmt|;
name|ApplicationResourceUsageReport
name|appUsageReport
init|=
name|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
decl_stmt|;
name|FinalApplicationStatus
name|finishState
init|=
name|getFinalApplicationStatus
argument_list|()
decl_stmt|;
name|String
name|diags
init|=
name|UNAVAILABLE
decl_stmt|;
name|float
name|progress
init|=
literal|0.0f
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|amrmToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowAccess
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|currentAttempt
operator|!=
literal|null
condition|)
block|{
name|currentApplicationAttemptId
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
name|trackingUrl
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getTrackingUrl
argument_list|()
expr_stmt|;
name|origTrackingUrl
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// get a token so the client can communicate with the app attempt
comment|// NOTE: token may be unavailable if the attempt is not running
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|attemptClientToAMToken
init|=
name|this
operator|.
name|currentAttempt
operator|.
name|createClientToken
argument_list|(
name|clientUserName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptClientToAMToken
operator|!=
literal|null
condition|)
block|{
name|clientToAMToken
operator|=
name|BuilderUtils
operator|.
name|newClientToAMToken
argument_list|(
name|attemptClientToAMToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|attemptClientToAMToken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptClientToAMToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|attemptClientToAMToken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|host
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|rpcPort
operator|=
name|this
operator|.
name|currentAttempt
operator|.
name|getRpcPort
argument_list|()
expr_stmt|;
name|appUsageReport
operator|=
name|currentAttempt
operator|.
name|getApplicationResourceUsageReport
argument_list|()
expr_stmt|;
name|progress
operator|=
name|currentAttempt
operator|.
name|getProgress
argument_list|()
expr_stmt|;
block|}
name|diags
operator|=
name|this
operator|.
name|diagnostics
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentAttempt
operator|!=
literal|null
operator|&&
name|currentAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
name|RMAppAttemptState
operator|.
name|LAUNCHED
condition|)
block|{
if|if
condition|(
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
operator|&&
name|clientUserName
operator|!=
literal|null
operator|&&
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|clientUserName
argument_list|)
condition|)
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|currentAttempt
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|amrmToken
operator|=
name|BuilderUtils
operator|.
name|newAMRMToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|currentApplicationAttemptId
operator|==
literal|null
condition|)
block|{
name|currentApplicationAttemptId
operator|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|this
operator|.
name|applicationId
argument_list|,
name|DUMMY_APPLICATION_ATTEMPT_NUMBER
argument_list|)
expr_stmt|;
block|}
return|return
name|BuilderUtils
operator|.
name|newApplicationReport
argument_list|(
name|this
operator|.
name|applicationId
argument_list|,
name|currentApplicationAttemptId
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|this
operator|.
name|queue
argument_list|,
name|this
operator|.
name|name
argument_list|,
name|host
argument_list|,
name|rpcPort
argument_list|,
name|clientToAMToken
argument_list|,
name|RMServerUtils
operator|.
name|createApplicationState
argument_list|(
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
argument_list|)
argument_list|,
name|diags
argument_list|,
name|trackingUrl
argument_list|,
name|this
operator|.
name|startTime
argument_list|,
name|this
operator|.
name|finishTime
argument_list|,
name|finishState
argument_list|,
name|appUsageReport
argument_list|,
name|origTrackingUrl
argument_list|,
name|progress
argument_list|,
name|this
operator|.
name|applicationType
argument_list|,
name|amrmToken
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|finishTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSubmitTime ()
specifier|public
name|long
name|getSubmitTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|submitTime
return|;
block|}
annotation|@
name|Override
DECL|method|getTrackingUrl ()
specifier|public
name|String
name|getTrackingUrl
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|currentAttempt
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|currentAttempt
operator|.
name|getTrackingUrl
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|StringBuilder
name|getDiagnostics
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|diagnostics
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMaxAppAttempts ()
specifier|public
name|int
name|getMaxAppAttempts
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxAppAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ApplicationId
name|appID
init|=
name|event
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing event for "
operator|+
name|appID
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RMAppState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
comment|/* keep the master in sync with the state machine */
name|this
operator|.
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|/* TODO fail the application on the failed transition */
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|appID
operator|+
literal|" State change from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
block|{
name|ApplicationState
name|appState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering app: "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" with "
operator|+
operator|+
name|appState
operator|.
name|getAttemptCount
argument_list|()
operator|+
literal|" attempts"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|appState
operator|.
name|getAttemptCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// create attempt
name|createNewAttempt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// recover attempt
operator|(
operator|(
name|RMAppAttemptImpl
operator|)
name|currentAttempt
operator|)
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createNewAttempt (boolean startAttempt)
specifier|private
name|void
name|createNewAttempt
parameter_list|(
name|boolean
name|startAttempt
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt
init|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|appAttemptId
argument_list|,
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
name|conf
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|currentAttempt
operator|=
name|attempt
expr_stmt|;
if|if
condition|(
name|startAttempt
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processNodeUpdate (RMAppNodeUpdateType type, RMNode node)
specifier|private
name|void
name|processNodeUpdate
parameter_list|(
name|RMAppNodeUpdateType
name|type
parameter_list|,
name|RMNode
name|node
parameter_list|)
block|{
name|NodeState
name|nodeState
init|=
name|node
operator|.
name|getState
argument_list|()
decl_stmt|;
name|updatedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received node update event:"
operator|+
name|type
operator|+
literal|" for node:"
operator|+
name|node
operator|+
literal|" with state:"
operator|+
name|nodeState
argument_list|)
expr_stmt|;
block|}
DECL|class|RMAppTransition
specifier|private
specifier|static
class|class
name|RMAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppEvent
argument_list|>
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{     }
empty_stmt|;
block|}
DECL|class|RMAppNodeUpdateTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppNodeUpdateTransition
extends|extends
name|RMAppTransition
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppNodeUpdateEvent
name|nodeUpdateEvent
init|=
operator|(
name|RMAppNodeUpdateEvent
operator|)
name|event
decl_stmt|;
name|app
operator|.
name|processNodeUpdate
argument_list|(
name|nodeUpdateEvent
operator|.
name|getUpdateType
argument_list|()
argument_list|,
name|nodeUpdateEvent
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|StartAppAttemptTransition
specifier|private
specifier|static
specifier|final
class|class
name|StartAppAttemptTransition
extends|extends
name|RMAppTransition
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppEventType
operator|.
name|APP_SAVED
argument_list|)
condition|)
block|{
assert|assert
name|app
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|)
assert|;
name|RMAppStoredEvent
name|storeEvent
init|=
operator|(
name|RMAppStoredEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|storeEvent
operator|.
name|getStoredException
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// For HA this exception needs to be handled by giving up
comment|// master status if we got fenced
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to store application: "
operator|+
name|storeEvent
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|storeEvent
operator|.
name|getStoredException
argument_list|()
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|storeEvent
operator|.
name|getStoredException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|app
operator|.
name|createNewAttempt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|RMAppFinishingTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppFinishingTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|finishTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RMAppSavingTransition
specifier|private
specifier|static
specifier|final
class|class
name|RMAppSavingTransition
extends|extends
name|RMAppTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
comment|// If recovery is enabled then store the application information in a
comment|// non-blocking call so make sure that RM has stored the information
comment|// needed to restart the AM after RM restart without further client
comment|// communication
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing application with id "
operator|+
name|app
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|app
operator|.
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeApplication
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AppFinishedTransition
specifier|private
specifier|static
class|class
name|AppFinishedTransition
extends|extends
name|FinalTransition
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppFinishedAttemptEvent
name|finishedEvent
init|=
operator|(
name|RMAppFinishedAttemptEvent
operator|)
name|event
decl_stmt|;
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|finishedEvent
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|AppKilledTransition
specifier|private
specifier|static
class|class
name|AppKilledTransition
extends|extends
name|FinalTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|"Application killed by user."
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|KillAppAndAttemptTransition
specifier|private
specifier|static
class|class
name|KillAppAndAttemptTransition
extends|extends
name|AppKilledTransition
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|app
operator|.
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AppRejectedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AppRejectedTransition
extends|extends
name|FinalTransition
block|{
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppRejectedEvent
name|rejectedEvent
init|=
operator|(
name|RMAppRejectedEvent
operator|)
name|event
decl_stmt|;
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|rejectedEvent
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|FinalTransition
specifier|private
specifier|static
class|class
name|FinalTransition
extends|extends
name|RMAppTransition
block|{
DECL|method|getNodesOnWhichAttemptRan (RMAppImpl app)
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|getNodesOnWhichAttemptRan
parameter_list|(
name|RMAppImpl
name|app
parameter_list|)
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|app
operator|.
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|nodes
operator|.
name|addAll
argument_list|(
name|attempt
operator|.
name|getRanNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodes
init|=
name|getNodesOnWhichAttemptRan
argument_list|(
name|app
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|nodes
control|)
block|{
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanAppEvent
argument_list|(
name|nodeId
argument_list|,
name|app
operator|.
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|getState
argument_list|()
operator|!=
name|RMAppState
operator|.
name|FINISHING
condition|)
block|{
name|app
operator|.
name|finishTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|app
operator|.
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppManagerEvent
argument_list|(
name|app
operator|.
name|applicationId
argument_list|,
name|RMAppManagerEventType
operator|.
name|APP_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
DECL|class|AttemptFailedTransition
specifier|private
specifier|static
specifier|final
class|class
name|AttemptFailedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMAppImpl
argument_list|,
name|RMAppEvent
argument_list|,
name|RMAppState
argument_list|>
block|{
DECL|field|initialState
specifier|private
specifier|final
name|RMAppState
name|initialState
decl_stmt|;
DECL|method|AttemptFailedTransition (RMAppState initialState)
specifier|public
name|AttemptFailedTransition
parameter_list|(
name|RMAppState
name|initialState
parameter_list|)
block|{
name|this
operator|.
name|initialState
operator|=
name|initialState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMAppImpl app, RMAppEvent event)
specifier|public
name|RMAppState
name|transition
parameter_list|(
name|RMAppImpl
name|app
parameter_list|,
name|RMAppEvent
name|event
parameter_list|)
block|{
name|RMAppFailedAttemptEvent
name|failedEvent
init|=
operator|(
operator|(
name|RMAppFailedAttemptEvent
operator|)
name|event
operator|)
decl_stmt|;
name|boolean
name|retryApp
init|=
literal|true
decl_stmt|;
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
comment|// RM does not manage the AM. Do not retry
name|retryApp
operator|=
literal|false
expr_stmt|;
name|msg
operator|=
literal|"Unmanaged application "
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" failed due to "
operator|+
name|failedEvent
operator|.
name|getDiagnostics
argument_list|()
operator|+
literal|". Failing the application."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|app
operator|.
name|attempts
operator|.
name|size
argument_list|()
operator|>=
name|app
operator|.
name|maxAppAttempts
condition|)
block|{
name|retryApp
operator|=
literal|false
expr_stmt|;
name|msg
operator|=
literal|"Application "
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" failed "
operator|+
name|app
operator|.
name|maxAppAttempts
operator|+
literal|" times due to "
operator|+
name|failedEvent
operator|.
name|getDiagnostics
argument_list|()
operator|+
literal|". Failing the application."
expr_stmt|;
block|}
if|if
condition|(
name|retryApp
condition|)
block|{
name|app
operator|.
name|createNewAttempt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initialState
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|app
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Inform the node for app-finish
name|FINAL_TRANSITION
operator|.
name|transition
argument_list|(
name|app
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|RMAppState
operator|.
name|FAILED
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationType ()
specifier|public
name|String
name|getApplicationType
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationType
return|;
block|}
block|}
end_class

end_unit

