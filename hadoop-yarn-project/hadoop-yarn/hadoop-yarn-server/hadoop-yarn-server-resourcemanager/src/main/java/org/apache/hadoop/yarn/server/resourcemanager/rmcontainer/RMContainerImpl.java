begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmcontainer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRunningOnNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeUpdateContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|RMContainerImpl
specifier|public
class|class
name|RMContainerImpl
implements|implements
name|RMContainer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMContainerImpl
argument_list|,
name|RMContainerState
argument_list|,
name|RMContainerEventType
argument_list|,
name|RMContainerEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMContainerImpl
argument_list|,
name|RMContainerState
argument_list|,
name|RMContainerEventType
argument_list|,
name|RMContainerEvent
argument_list|>
argument_list|(
name|RMContainerState
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|NEW
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
name|RMContainerEventType
operator|.
name|START
argument_list|,
operator|new
name|ContainerStartedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|NEW
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|NEW
argument_list|,
name|RMContainerState
operator|.
name|RESERVED
argument_list|,
name|RMContainerEventType
operator|.
name|RESERVED
argument_list|,
operator|new
name|ContainerReservedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|NEW
argument_list|,
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerEventType
operator|.
name|ACQUIRED
argument_list|,
operator|new
name|AcquiredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RECOVER
argument_list|,
operator|new
name|ContainerRecoveredTransition
argument_list|()
argument_list|)
comment|// Transitions from RESERVED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RESERVED
argument_list|,
name|RMContainerState
operator|.
name|RESERVED
argument_list|,
name|RMContainerEventType
operator|.
name|RESERVED
argument_list|,
operator|new
name|ContainerReservedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RESERVED
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
name|RMContainerEventType
operator|.
name|START
argument_list|,
operator|new
name|ContainerStartedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RESERVED
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
comment|// nothing to do
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RESERVED
argument_list|,
name|RMContainerState
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
comment|// nothing to do
comment|// Transitions from ALLOCATED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerEventType
operator|.
name|ACQUIRED
argument_list|,
operator|new
name|AcquiredTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
name|RMContainerState
operator|.
name|EXPIRED
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|FinishedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
operator|new
name|FinishedTransition
argument_list|()
argument_list|)
comment|// Transitions from ACQUIRED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerEventType
operator|.
name|LAUNCHED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerEventType
operator|.
name|ACQUIRED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|,
operator|new
name|FinishedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerState
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerState
operator|.
name|EXPIRED
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|,
operator|new
name|FinishedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerEventType
operator|.
name|ACQUIRED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerEventType
operator|.
name|RESERVED
argument_list|,
operator|new
name|ContainerReservedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerEventType
operator|.
name|ACQUIRE_UPDATED_CONTAINER
argument_list|,
operator|new
name|ContainerAcquiredWhileRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|RMContainerEventType
operator|.
name|NM_DONE_CHANGE_RESOURCE
argument_list|,
operator|new
name|NMReportedContainerChangeIsDoneTransition
argument_list|()
argument_list|)
comment|// Transitions from COMPLETED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|COMPLETED
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from EXPIRED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|EXPIRED
argument_list|,
name|RMContainerState
operator|.
name|EXPIRED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
argument_list|)
comment|// Transitions from RELEASED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|RELEASED
argument_list|,
name|RMContainerState
operator|.
name|RELEASED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|RMContainerState
argument_list|,
name|RMContainerEventType
argument_list|,
DECL|field|stateMachine
name|RMContainerEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|appAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|appAttemptId
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|eventHandler
specifier|private
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|containerAllocationExpirer
specifier|private
specifier|final
name|ContainerAllocationExpirer
name|containerAllocationExpirer
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|nodeLabelExpression
specifier|private
specifier|final
name|String
name|nodeLabelExpression
decl_stmt|;
DECL|field|container
specifier|private
specifier|volatile
name|Container
name|container
decl_stmt|;
DECL|field|reservedResource
specifier|private
name|Resource
name|reservedResource
decl_stmt|;
DECL|field|reservedNode
specifier|private
name|NodeId
name|reservedNode
decl_stmt|;
DECL|field|reservedSchedulerKey
specifier|private
name|SchedulerRequestKey
name|reservedSchedulerKey
decl_stmt|;
DECL|field|creationTime
specifier|private
name|long
name|creationTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|finishedStatus
specifier|private
name|ContainerStatus
name|finishedStatus
decl_stmt|;
DECL|field|isAMContainer
specifier|private
name|boolean
name|isAMContainer
decl_stmt|;
DECL|field|containerRequestForRecovery
specifier|private
name|ContainerRequest
name|containerRequestForRecovery
decl_stmt|;
comment|// Only used for container resource increase and decrease. This is the
comment|// resource to rollback to should container resource increase token expires.
DECL|field|lastConfirmedResource
specifier|private
name|Resource
name|lastConfirmedResource
decl_stmt|;
DECL|field|queueName
specifier|private
specifier|volatile
name|String
name|queueName
decl_stmt|;
DECL|field|isExternallyAllocated
specifier|private
name|boolean
name|isExternallyAllocated
decl_stmt|;
DECL|field|allocatedSchedulerKey
specifier|private
name|SchedulerRequestKey
name|allocatedSchedulerKey
decl_stmt|;
DECL|field|allocationTags
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
init|=
literal|null
decl_stmt|;
DECL|method|RMContainerImpl (Container container, SchedulerRequestKey schedulerKey, ApplicationAttemptId appAttemptId, NodeId nodeId, String user, RMContext rmContext)
specifier|public
name|RMContainerImpl
parameter_list|(
name|Container
name|container
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
argument_list|(
name|container
argument_list|,
name|schedulerKey
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|,
name|rmContext
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|RMContainerImpl (Container container, SchedulerRequestKey schedulerKey, ApplicationAttemptId appAttemptId, NodeId nodeId, String user, RMContext rmContext, boolean isExternallyAllocated)
specifier|public
name|RMContainerImpl
parameter_list|(
name|Container
name|container
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|boolean
name|isExternallyAllocated
parameter_list|)
block|{
name|this
argument_list|(
name|container
argument_list|,
name|schedulerKey
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|,
name|rmContext
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|""
argument_list|,
name|isExternallyAllocated
argument_list|)
expr_stmt|;
block|}
DECL|field|saveNonAMContainerMetaInfo
specifier|private
name|boolean
name|saveNonAMContainerMetaInfo
decl_stmt|;
DECL|method|RMContainerImpl (Container container, SchedulerRequestKey schedulerKey, ApplicationAttemptId appAttemptId, NodeId nodeId, String user, RMContext rmContext, String nodeLabelExpression)
specifier|public
name|RMContainerImpl
parameter_list|(
name|Container
name|container
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|String
name|nodeLabelExpression
parameter_list|)
block|{
name|this
argument_list|(
name|container
argument_list|,
name|schedulerKey
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|,
name|rmContext
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|nodeLabelExpression
argument_list|)
expr_stmt|;
block|}
DECL|method|RMContainerImpl (Container container, SchedulerRequestKey schedulerKey, ApplicationAttemptId appAttemptId, NodeId nodeId, String user, RMContext rmContext, long creationTime, String nodeLabelExpression)
specifier|public
name|RMContainerImpl
parameter_list|(
name|Container
name|container
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|long
name|creationTime
parameter_list|,
name|String
name|nodeLabelExpression
parameter_list|)
block|{
name|this
argument_list|(
name|container
argument_list|,
name|schedulerKey
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|,
name|rmContext
argument_list|,
name|creationTime
argument_list|,
name|nodeLabelExpression
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|RMContainerImpl (Container container, SchedulerRequestKey schedulerKey, ApplicationAttemptId appAttemptId, NodeId nodeId, String user, RMContext rmContext, long creationTime, String nodeLabelExpression, boolean isExternallyAllocated)
specifier|public
name|RMContainerImpl
parameter_list|(
name|Container
name|container
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|long
name|creationTime
parameter_list|,
name|String
name|nodeLabelExpression
parameter_list|,
name|boolean
name|isExternallyAllocated
parameter_list|)
block|{
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|allocatedSchedulerKey
operator|=
name|schedulerKey
expr_stmt|;
name|this
operator|.
name|appAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|creationTime
operator|=
name|creationTime
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerAllocationExpirer
operator|=
name|rmContext
operator|.
name|getContainerAllocationExpirer
argument_list|()
expr_stmt|;
name|this
operator|.
name|isAMContainer
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|nodeLabelExpression
operator|=
name|nodeLabelExpression
expr_stmt|;
name|this
operator|.
name|lastConfirmedResource
operator|=
name|container
operator|.
name|getResource
argument_list|()
expr_stmt|;
name|this
operator|.
name|isExternallyAllocated
operator|=
name|isExternallyAllocated
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|saveNonAMContainerMetaInfo
operator|=
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|containerStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// If saveNonAMContainerMetaInfo is true, store system metrics for all
comment|// containers. If false, and if this container is marked as the AM, metrics
comment|// will still be published for this container, but that calculation happens
comment|// later.
if|if
condition|(
name|saveNonAMContainerMetaInfo
operator|&&
literal|null
operator|!=
name|container
operator|.
name|getId
argument_list|()
condition|)
block|{
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|containerCreated
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|creationTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|container
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|allocationTags
operator|=
name|this
operator|.
name|container
operator|.
name|getAllocationTags
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|this
operator|.
name|appAttemptId
return|;
block|}
annotation|@
name|Override
DECL|method|getContainer ()
specifier|public
name|Container
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
return|;
block|}
DECL|method|setContainer (Container container)
specifier|public
name|void
name|setContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|RMContainerState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReservedResource ()
specifier|public
name|Resource
name|getReservedResource
parameter_list|()
block|{
return|return
name|reservedResource
return|;
block|}
annotation|@
name|Override
DECL|method|getReservedNode ()
specifier|public
name|NodeId
name|getReservedNode
parameter_list|()
block|{
return|return
name|reservedNode
return|;
block|}
annotation|@
name|Override
DECL|method|getReservedSchedulerKey ()
specifier|public
name|SchedulerRequestKey
name|getReservedSchedulerKey
parameter_list|()
block|{
return|return
name|reservedSchedulerKey
return|;
block|}
annotation|@
name|Override
DECL|method|getAllocatedResource ()
specifier|public
name|Resource
name|getAllocatedResource
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|container
operator|.
name|getResource
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLastConfirmedResource ()
specifier|public
name|Resource
name|getLastConfirmedResource
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|lastConfirmedResource
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAllocatedNode ()
specifier|public
name|NodeId
name|getAllocatedNode
parameter_list|()
block|{
return|return
name|container
operator|.
name|getNodeId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAllocatedSchedulerKey ()
specifier|public
name|SchedulerRequestKey
name|getAllocatedSchedulerKey
parameter_list|()
block|{
return|return
name|allocatedSchedulerKey
return|;
block|}
annotation|@
name|Override
DECL|method|getAllocatedPriority ()
specifier|public
name|Priority
name|getAllocatedPriority
parameter_list|()
block|{
return|return
name|container
operator|.
name|getPriority
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCreationTime ()
specifier|public
name|long
name|getCreationTime
parameter_list|()
block|{
return|return
name|creationTime
return|;
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|finishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnosticsInfo ()
specifier|public
name|String
name|getDiagnosticsInfo
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|finishedStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|finishedStatus
operator|.
name|getDiagnostics
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLogURL ()
specifier|public
name|String
name|getLogURL
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|StringBuilder
name|logURL
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|logURL
operator|.
name|append
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logURL
operator|.
name|append
argument_list|(
name|WebAppUtils
operator|.
name|getRunningLogURL
argument_list|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|logURL
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerExitStatus ()
specifier|public
name|int
name|getContainerExitStatus
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|finishedStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|finishedStatus
operator|.
name|getExitStatus
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerState ()
specifier|public
name|ContainerState
name|getContainerState
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|finishedStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|finishedStatus
operator|.
name|getState
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ContainerState
operator|.
name|RUNNING
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerRequest ()
specifier|public
name|ContainerRequest
name|getContainerRequest
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|containerRequestForRecovery
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setContainerRequest (ContainerRequest request)
specifier|public
name|void
name|setContainerRequest
parameter_list|(
name|ContainerRequest
name|request
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|containerRequestForRecovery
operator|=
name|request
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isAMContainer ()
specifier|public
name|boolean
name|isAMContainer
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|isAMContainer
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setAMContainer (boolean isAMContainer)
specifier|public
name|void
name|setAMContainer
parameter_list|(
name|boolean
name|isAMContainer
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|isAMContainer
operator|=
name|isAMContainer
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Even if saveNonAMContainerMetaInfo is not true, the AM container's system
comment|// metrics still need to be saved so that the AM's logs can be accessed.
comment|// This call to getSystemMetricsPublisher().containerCreated() is mutually
comment|// exclusive with the one in the RMContainerImpl constructor.
if|if
condition|(
operator|!
name|saveNonAMContainerMetaInfo
operator|&&
name|this
operator|.
name|isAMContainer
condition|)
block|{
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|containerCreated
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|creationTime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (RMContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|RMContainerState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on container "
operator|+
name|this
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" Container Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|completed ()
specifier|public
name|boolean
name|completed
parameter_list|()
block|{
return|return
name|finishedStatus
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|getAllocationTags ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllocationTags
parameter_list|()
block|{
return|return
name|allocationTags
return|;
block|}
DECL|method|setAllocationTags (Set<String> tags)
specifier|public
name|void
name|setAllocationTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|this
operator|.
name|allocationTags
operator|=
name|tags
expr_stmt|;
block|}
DECL|class|BaseTransition
specifier|private
specifier|static
class|class
name|BaseTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMContainerImpl
argument_list|,
name|RMContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl cont, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|cont
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{      }
block|}
DECL|class|ContainerRecoveredTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerRecoveredTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMContainerImpl
argument_list|,
name|RMContainerEvent
argument_list|,
name|RMContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|RMContainerState
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
name|NMContainerStatus
name|report
init|=
operator|(
operator|(
name|RMContainerRecoverEvent
operator|)
name|event
operator|)
operator|.
name|getContainerReport
argument_list|()
decl_stmt|;
comment|// Set the allocation tags from the
name|container
operator|.
name|setAllocationTags
argument_list|(
name|report
operator|.
name|getAllocationTags
argument_list|()
argument_list|)
expr_stmt|;
comment|// Notify AllocationTagsManager
name|container
operator|.
name|rmContext
operator|.
name|getAllocationTagsManager
argument_list|()
operator|.
name|addContainer
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocationTags
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
condition|)
block|{
name|ContainerStatus
name|status
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|report
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|report
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|report
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|report
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|FinishedTransition
argument_list|()
operator|.
name|transition
argument_list|(
name|container
argument_list|,
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|status
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|RMContainerState
operator|.
name|COMPLETED
return|;
block|}
elseif|else
if|if
condition|(
name|report
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
comment|// Tell the app
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRunningOnNodeEvent
argument_list|(
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|RMContainerState
operator|.
name|RUNNING
return|;
block|}
else|else
block|{
comment|// This can never happen.
name|LOG
operator|.
name|warn
argument_list|(
literal|"RMContainer received unexpected recover event with container"
operator|+
literal|" state "
operator|+
name|report
operator|.
name|getContainerState
argument_list|()
operator|+
literal|" while recovering."
argument_list|)
expr_stmt|;
return|return
name|RMContainerState
operator|.
name|RUNNING
return|;
block|}
block|}
block|}
DECL|class|ContainerReservedTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerReservedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
name|RMContainerReservedEvent
name|e
init|=
operator|(
name|RMContainerReservedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|reservedResource
operator|=
name|e
operator|.
name|getReservedResource
argument_list|()
expr_stmt|;
name|container
operator|.
name|reservedNode
operator|=
name|e
operator|.
name|getReservedNode
argument_list|()
expr_stmt|;
name|container
operator|.
name|reservedSchedulerKey
operator|=
name|e
operator|.
name|getReservedSchedulerKey
argument_list|()
expr_stmt|;
name|Container
name|c
init|=
name|container
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setNodeId
argument_list|(
name|container
operator|.
name|reservedNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerStartedTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerStartedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
comment|// Notify AllocationTagsManager
name|container
operator|.
name|rmContext
operator|.
name|getAllocationTagsManager
argument_list|()
operator|.
name|addContainer
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocationTags
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|container
operator|.
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AcquiredTransition
specifier|private
specifier|static
specifier|final
class|class
name|AcquiredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
comment|// Clear ResourceRequest stored in RMContainer, we don't need to remember
comment|// this anymore.
name|container
operator|.
name|setContainerRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Register with containerAllocationExpirer.
name|container
operator|.
name|containerAllocationExpirer
operator|.
name|register
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tell the app
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRunningOnNodeEvent
argument_list|(
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ContainerAcquiredWhileRunningTransition
specifier|private
specifier|static
specifier|final
class|class
name|ContainerAcquiredWhileRunningTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
name|RMContainerUpdatesAcquiredEvent
name|acquiredEvent
init|=
operator|(
name|RMContainerUpdatesAcquiredEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|acquiredEvent
operator|.
name|isIncreasedContainer
argument_list|()
condition|)
block|{
comment|// If container is increased but not started by AM, we will start
comment|// containerAllocationExpirer for this container in this transition.
name|container
operator|.
name|containerAllocationExpirer
operator|.
name|register
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|NMReportedContainerChangeIsDoneTransition
specifier|private
specifier|static
specifier|final
class|class
name|NMReportedContainerChangeIsDoneTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
name|RMContainerNMDoneChangeResourceEvent
name|nmDoneChangeResourceEvent
init|=
operator|(
name|RMContainerNMDoneChangeResourceEvent
operator|)
name|event
decl_stmt|;
name|Resource
name|rmContainerResource
init|=
name|container
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
name|Resource
name|nmContainerResource
init|=
name|nmDoneChangeResourceEvent
operator|.
name|getNMContainerResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|rmContainerResource
argument_list|,
name|nmContainerResource
argument_list|)
condition|)
block|{
comment|// If rmContainerResource == nmContainerResource, the resource
comment|// increase is confirmed.
comment|// In this case:
comment|//    - Set the lastConfirmedResource as nmContainerResource
comment|//    - Unregister the allocation expirer
name|container
operator|.
name|lastConfirmedResource
operator|=
name|nmContainerResource
expr_stmt|;
name|container
operator|.
name|containerAllocationExpirer
operator|.
name|unregister
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rmContainerResource
argument_list|,
name|nmContainerResource
argument_list|)
condition|)
block|{
comment|// If rmContainerResource< nmContainerResource, this is caused by the
comment|// following sequence:
comment|//   1. AM asks for increase from 1G to 5G, and RM approves it
comment|//   2. AM acquires the increase token and increases on NM
comment|//   3. Before NM reports 5G to RM to confirm the increase, AM sends
comment|//      a decrease request to 4G, and RM approves it
comment|//   4. When NM reports 5G to RM, RM now sees its own allocation as 4G
comment|// In this cases:
comment|//    - Set the lastConfirmedResource as rmContainerResource
comment|//    - Unregister the allocation expirer
comment|//    - Notify NM to reduce its resource to rmContainerResource
name|container
operator|.
name|lastConfirmedResource
operator|=
name|rmContainerResource
expr_stmt|;
name|container
operator|.
name|containerAllocationExpirer
operator|.
name|unregister
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeUpdateContainerEvent
argument_list|(
name|container
operator|.
name|nodeId
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|nmContainerResource
argument_list|,
name|rmContainerResource
argument_list|)
condition|)
block|{
comment|// If nmContainerResource< rmContainerResource, this is caused by the
comment|// following sequence:
comment|//    1. AM asks for increase from 1G to 2G, and RM approves it
comment|//    2. AM asks for increase from 2G to 4G, and RM approves it
comment|//    3. AM only uses the 2G token to increase on NM, but never uses the
comment|//       4G token
comment|//    4. NM reports 2G to RM, but RM sees its own allocation as 4G
comment|// In this case:
comment|//    - Set the lastConfirmedResource as the maximum of
comment|//      nmContainerResource and lastConfirmedResource
comment|//    - Do NOT unregister the allocation expirer
comment|// When the increase allocation expires, resource will be rolled back to
comment|// the last confirmed resource.
name|container
operator|.
name|lastConfirmedResource
operator|=
name|Resources
operator|.
name|componentwiseMax
argument_list|(
name|nmContainerResource
argument_list|,
name|container
operator|.
name|lastConfirmedResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Something wrong happened, kill the container
name|LOG
operator|.
name|warn
argument_list|(
literal|"Something wrong happened, container size reported by NM"
operator|+
literal|" is not expected, ContainerID="
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" rm-size-resource:"
operator|+
name|rmContainerResource
operator|+
literal|" nm-size-reosurce:"
operator|+
name|nmContainerResource
argument_list|)
expr_stmt|;
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|container
operator|.
name|nodeId
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FinishedTransition
specifier|private
specifier|static
class|class
name|FinishedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
comment|// Notify placementManager
name|container
operator|.
name|rmContext
operator|.
name|getAllocationTagsManager
argument_list|()
operator|.
name|removeContainer
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocationTags
argument_list|()
argument_list|)
expr_stmt|;
name|RMContainerFinishedEvent
name|finishedEvent
init|=
operator|(
name|RMContainerFinishedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|finishTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|container
operator|.
name|finishedStatus
operator|=
name|finishedEvent
operator|.
name|getRemoteContainerStatus
argument_list|()
expr_stmt|;
comment|// Inform AppAttempt
comment|// container.getContainer() can return null when a RMContainer is a
comment|// reserved container
name|updateAttemptMetrics
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|container
operator|.
name|appAttemptId
argument_list|,
name|finishedEvent
operator|.
name|getRemoteContainerStatus
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|containerFinished
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|boolean
name|saveNonAMContainerMetaInfo
init|=
name|container
operator|.
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|saveNonAMContainerMetaInfo
operator|||
name|container
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
name|container
operator|.
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|containerFinished
argument_list|(
name|container
argument_list|,
name|container
operator|.
name|finishTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateAttemptMetrics (RMContainerImpl container)
specifier|private
specifier|static
name|void
name|updateAttemptMetrics
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|RMAppAttempt
name|rmAttempt
init|=
name|container
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmAttempt
operator|!=
literal|null
condition|)
block|{
name|long
name|usedMillis
init|=
name|container
operator|.
name|finishTime
operator|-
name|container
operator|.
name|creationTime
decl_stmt|;
name|rmAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
operator|.
name|updateAggregateAppResourceUsage
argument_list|(
name|resource
argument_list|,
name|usedMillis
argument_list|)
expr_stmt|;
comment|// If this is a preempted container, update preemption metrics
if|if
condition|(
name|ContainerExitStatus
operator|.
name|PREEMPTED
operator|==
name|container
operator|.
name|finishedStatus
operator|.
name|getExitStatus
argument_list|()
condition|)
block|{
name|rmAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
operator|.
name|updatePreemptionInfo
argument_list|(
name|resource
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|rmAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
operator|.
name|updateAggregatePreemptedAppResourceUsage
argument_list|(
name|resource
argument_list|,
name|usedMillis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|KillTransition
specifier|private
specifier|static
specifier|final
class|class
name|KillTransition
extends|extends
name|FinishedTransition
block|{
annotation|@
name|Override
DECL|method|transition (RMContainerImpl container, RMContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMContainerImpl
name|container
parameter_list|,
name|RMContainerEvent
name|event
parameter_list|)
block|{
comment|// Unregister from containerAllocationExpirer.
name|container
operator|.
name|containerAllocationExpirer
operator|.
name|unregister
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inform node
name|container
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|container
operator|.
name|nodeId
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inform appAttempt
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createContainerReport ()
specifier|public
name|ContainerReport
name|createContainerReport
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ContainerReport
name|containerReport
init|=
literal|null
decl_stmt|;
try|try
block|{
name|containerReport
operator|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|this
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|this
operator|.
name|getAllocatedNode
argument_list|()
argument_list|,
name|this
operator|.
name|getAllocatedSchedulerKey
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|this
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|this
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|this
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|,
name|this
operator|.
name|getLogURL
argument_list|()
argument_list|,
name|this
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|,
name|this
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|this
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|this
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|containerReport
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeHttpAddress ()
specifier|public
name|String
name|getNodeHttpAddress
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|httpAddress
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|httpAddress
operator|.
name|append
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|httpAddress
operator|.
name|append
argument_list|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|httpAddress
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeLabelExpression ()
specifier|public
name|String
name|getNodeLabelExpression
parameter_list|()
block|{
if|if
condition|(
name|nodeLabelExpression
operator|==
literal|null
condition|)
block|{
return|return
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
return|;
block|}
return|return
name|nodeLabelExpression
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|RMContainer
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|getContainerId
argument_list|()
condition|)
block|{
return|return
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RMContainer
operator|)
name|obj
operator|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|getContainerId
argument_list|()
condition|)
block|{
return|return
name|getContainerId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (RMContainer o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|RMContainer
name|o
parameter_list|)
block|{
if|if
condition|(
name|getContainerId
argument_list|()
operator|!=
literal|null
operator|&&
name|o
operator|.
name|getContainerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getContainerId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|setQueueName (String queueName)
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
annotation|@
name|Override
DECL|method|getExecutionType ()
specifier|public
name|ExecutionType
name|getExecutionType
parameter_list|()
block|{
return|return
name|container
operator|.
name|getExecutionType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isRemotelyAllocated ()
specifier|public
name|boolean
name|isRemotelyAllocated
parameter_list|()
block|{
return|return
name|isExternallyAllocated
return|;
block|}
annotation|@
name|Override
DECL|method|getAllocatedOrReservedResource ()
specifier|public
name|Resource
name|getAllocatedOrReservedResource
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|RESERVED
argument_list|)
condition|)
block|{
return|return
name|getReservedResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getAllocatedResource
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setContainerId (ContainerId containerId)
specifier|public
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
comment|// In some cases, for example, global scheduling. It is possible that
comment|// container created without container-id assigned, so we will publish
comment|// container creation event to timeline service when id assigned.
name|container
operator|.
name|setId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
operator|.
name|containerStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// If saveNonAMContainerMetaInfo is true, store system metrics for all
comment|// containers. If false, and if this container is marked as the AM, metrics
comment|// will still be published for this container, but that calculation happens
comment|// later.
if|if
condition|(
name|saveNonAMContainerMetaInfo
operator|&&
literal|null
operator|!=
name|container
operator|.
name|getId
argument_list|()
condition|)
block|{
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
operator|.
name|containerCreated
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|creationTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

