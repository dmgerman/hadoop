begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the implementation of {@link ReservationSystem} based on the  * {@link CapacityScheduler}  */
end_comment

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
annotation|@
name|Unstable
DECL|class|CapacityReservationSystem
specifier|public
class|class
name|CapacityReservationSystem
extends|extends
name|AbstractReservationSystem
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CapacityReservationSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|capScheduler
specifier|private
name|CapacityScheduler
name|capScheduler
decl_stmt|;
DECL|method|CapacityReservationSystem ()
specifier|public
name|CapacityReservationSystem
parameter_list|()
block|{
name|super
argument_list|(
name|CapacityReservationSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (Configuration conf, RMContext rmContext)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Validate if the scheduler is capacity based
name|ResourceScheduler
name|scheduler
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|scheduler
operator|instanceof
name|CapacityScheduler
operator|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class "
operator|+
name|scheduler
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" not instance of "
operator|+
name|CapacityScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
name|capScheduler
operator|=
operator|(
name|CapacityScheduler
operator|)
name|scheduler
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|super
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializePlan (String planQueueName)
specifier|protected
name|Plan
name|initializePlan
parameter_list|(
name|String
name|planQueueName
parameter_list|)
throws|throws
name|YarnException
block|{
name|SharingPolicy
name|adPolicy
init|=
name|getAdmissionPolicy
argument_list|(
name|planQueueName
argument_list|)
decl_stmt|;
name|String
name|planQueuePath
init|=
name|capScheduler
operator|.
name|getQueue
argument_list|(
name|planQueueName
argument_list|)
operator|.
name|getQueuePath
argument_list|()
decl_stmt|;
name|adPolicy
operator|.
name|init
argument_list|(
name|planQueuePath
argument_list|,
name|capScheduler
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|CSQueue
name|planQueue
init|=
name|capScheduler
operator|.
name|getQueue
argument_list|(
name|planQueueName
argument_list|)
decl_stmt|;
comment|// Calculate the max plan capacity
name|Resource
name|minAllocation
init|=
name|capScheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
decl_stmt|;
name|ResourceCalculator
name|rescCalc
init|=
name|capScheduler
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|totCap
init|=
name|rescCalc
operator|.
name|multiplyAndNormalizeDown
argument_list|(
name|capScheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|planQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|minAllocation
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
operator|new
name|InMemoryPlan
argument_list|(
name|capScheduler
operator|.
name|getRootQueueMetrics
argument_list|()
argument_list|,
name|adPolicy
argument_list|,
name|getAgent
argument_list|(
name|planQueuePath
argument_list|)
argument_list|,
name|totCap
argument_list|,
name|planStepSize
argument_list|,
name|rescCalc
argument_list|,
name|minAllocation
argument_list|,
name|capScheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|,
name|planQueueName
argument_list|,
name|getReplanner
argument_list|(
name|planQueuePath
argument_list|)
argument_list|,
name|capScheduler
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMoveOnExpiry
argument_list|(
name|planQueuePath
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Intialized plan {0} based on reservable queue {1}"
argument_list|,
name|plan
operator|.
name|toString
argument_list|()
argument_list|,
name|planQueueName
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
annotation|@
name|Override
DECL|method|getReplanner (String planQueueName)
specifier|protected
name|Planner
name|getReplanner
parameter_list|(
name|String
name|planQueueName
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|capSchedulerConfig
init|=
name|capScheduler
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|plannerClassName
init|=
name|capSchedulerConfig
operator|.
name|getReplanner
argument_list|(
name|planQueueName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Replanner: "
operator|+
name|plannerClassName
operator|+
literal|" for queue: "
operator|+
name|planQueueName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|plannerClazz
init|=
name|capSchedulerConfig
operator|.
name|getClassByName
argument_list|(
name|plannerClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Planner
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|plannerClazz
argument_list|)
condition|)
block|{
name|Planner
name|planner
init|=
operator|(
name|Planner
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|plannerClazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|planner
operator|.
name|init
argument_list|(
name|planQueueName
argument_list|,
name|capSchedulerConfig
argument_list|)
expr_stmt|;
return|return
name|planner
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|plannerClazz
operator|+
literal|" not instance of "
operator|+
name|Planner
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate Planner: "
operator|+
name|plannerClassName
operator|+
literal|" for queue: "
operator|+
name|planQueueName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAgent (String queueName)
specifier|protected
name|ReservationAgent
name|getAgent
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|capSchedulerConfig
init|=
name|capScheduler
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|agentClassName
init|=
name|capSchedulerConfig
operator|.
name|getReservationAgent
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Agent: "
operator|+
name|agentClassName
operator|+
literal|" for queue: "
operator|+
name|queueName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|agentClazz
init|=
name|capSchedulerConfig
operator|.
name|getClassByName
argument_list|(
name|agentClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ReservationAgent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|agentClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|ReservationAgent
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|agentClazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|agentClassName
operator|+
literal|" not instance of "
operator|+
name|ReservationAgent
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate Agent: "
operator|+
name|agentClassName
operator|+
literal|" for queue: "
operator|+
name|queueName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAdmissionPolicy (String queueName)
specifier|protected
name|SharingPolicy
name|getAdmissionPolicy
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|capSchedulerConfig
init|=
name|capScheduler
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|admissionPolicyClassName
init|=
name|capSchedulerConfig
operator|.
name|getReservationAdmissionPolicy
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using AdmissionPolicy: "
operator|+
name|admissionPolicyClassName
operator|+
literal|" for queue: "
operator|+
name|queueName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|admissionPolicyClazz
init|=
name|capSchedulerConfig
operator|.
name|getClassByName
argument_list|(
name|admissionPolicyClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|SharingPolicy
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|admissionPolicyClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|SharingPolicy
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|admissionPolicyClazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|admissionPolicyClassName
operator|+
literal|" not instance of "
operator|+
name|SharingPolicy
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate AdmissionPolicy: "
operator|+
name|admissionPolicyClassName
operator|+
literal|" for queue: "
operator|+
name|queueName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

