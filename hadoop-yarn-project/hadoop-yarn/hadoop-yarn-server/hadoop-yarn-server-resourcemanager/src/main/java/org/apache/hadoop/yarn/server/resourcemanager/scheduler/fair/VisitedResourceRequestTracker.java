begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ClusterNodeTracker
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Applications place {@link ResourceRequest}s at multiple levels. This is a  * helper class that allows tracking if a {@link ResourceRequest} has been  * visited at a different locality level.  *  * This is implemented for {@link FSAppAttempt#getStarvedResourceRequests()}.  * The implementation is not thread-safe.  */
end_comment

begin_class
DECL|class|VisitedResourceRequestTracker
class|class
name|VisitedResourceRequestTracker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VisitedResourceRequestTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|TrackerPerPriorityResource
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nodeTracker
specifier|private
specifier|final
name|ClusterNodeTracker
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodeTracker
decl_stmt|;
DECL|method|VisitedResourceRequestTracker ( ClusterNodeTracker<FSSchedulerNode> nodeTracker)
name|VisitedResourceRequestTracker
parameter_list|(
name|ClusterNodeTracker
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodeTracker
parameter_list|)
block|{
name|this
operator|.
name|nodeTracker
operator|=
name|nodeTracker
expr_stmt|;
block|}
comment|/**    * Check if the {@link ResourceRequest} is visited before, and track it.    * @param rr {@link ResourceRequest} to visit    * @return true if<code>rr</code> is the first visit across all    * locality levels, false otherwise    */
DECL|method|visit (ResourceRequest rr)
name|boolean
name|visit
parameter_list|(
name|ResourceRequest
name|rr
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|rr
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|Resource
name|capability
init|=
name|rr
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|TrackerPerPriorityResource
argument_list|>
name|subMap
init|=
name|map
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|==
literal|null
condition|)
block|{
name|subMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|subMap
argument_list|)
expr_stmt|;
block|}
name|TrackerPerPriorityResource
name|tracker
init|=
name|subMap
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
operator|==
literal|null
condition|)
block|{
name|tracker
operator|=
operator|new
name|TrackerPerPriorityResource
argument_list|()
expr_stmt|;
name|subMap
operator|.
name|put
argument_list|(
name|capability
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
return|return
name|tracker
operator|.
name|visit
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
return|;
block|}
DECL|class|TrackerPerPriorityResource
specifier|private
class|class
name|TrackerPerPriorityResource
block|{
DECL|field|racksWithNodesVisited
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|racksWithNodesVisited
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|racksVisted
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|racksVisted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|anyVisited
specifier|private
name|boolean
name|anyVisited
decl_stmt|;
DECL|method|visitAny ()
specifier|private
name|boolean
name|visitAny
parameter_list|()
block|{
if|if
condition|(
name|racksVisted
operator|.
name|isEmpty
argument_list|()
operator|&&
name|racksWithNodesVisited
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|anyVisited
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|anyVisited
return|;
block|}
DECL|method|visitRack (String rackName)
specifier|private
name|boolean
name|visitRack
parameter_list|(
name|String
name|rackName
parameter_list|)
block|{
if|if
condition|(
name|anyVisited
operator|||
name|racksWithNodesVisited
operator|.
name|contains
argument_list|(
name|rackName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|racksVisted
operator|.
name|add
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|visitNode (String rackName)
specifier|private
name|boolean
name|visitNode
parameter_list|(
name|String
name|rackName
parameter_list|)
block|{
if|if
condition|(
name|anyVisited
operator|||
name|racksVisted
operator|.
name|contains
argument_list|(
name|rackName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|racksWithNodesVisited
operator|.
name|add
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Based on whether<code>resourceName</code> is a node, rack or ANY,      * check if this has been visited earlier.      *      * A node is considered visited if its rack or ANY have been visited.      * A rack is considered visited if any nodes or ANY have been visited.      * Any is considered visited if any of the nodes/racks have been visited.      *      * @param resourceName nodename or rackname or ANY      * @return true if this is the first visit, false otherwise      */
DECL|method|visit (String resourceName)
specifier|private
name|boolean
name|visit
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
if|if
condition|(
name|resourceName
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
return|return
name|visitAny
argument_list|()
return|;
block|}
name|List
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodes
init|=
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|int
name|numNodes
init|=
name|nodes
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numNodes
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Found ResourceRequest for a non-existent node/rack named "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|numNodes
operator|==
literal|1
condition|)
block|{
comment|// Found a single node. To be safe, let us verify it is a node and
comment|// not a rack with a single node.
name|FSSchedulerNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
return|return
name|visitNode
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// At this point, it is not ANY or a node. Must be a rack
return|return
name|visitRack
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

