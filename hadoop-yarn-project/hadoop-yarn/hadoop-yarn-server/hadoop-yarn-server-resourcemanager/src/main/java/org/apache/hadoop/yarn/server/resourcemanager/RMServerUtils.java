begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_comment
comment|/**  * Utility methods to aid serving RM data through the REST and RPC APIs  */
end_comment

begin_class
DECL|class|RMServerUtils
specifier|public
class|class
name|RMServerUtils
block|{
DECL|method|queryRMNodes (RMContext context, EnumSet<NodeState> acceptedStates)
specifier|public
specifier|static
name|List
argument_list|<
name|RMNode
argument_list|>
name|queryRMNodes
parameter_list|(
name|RMContext
name|context
parameter_list|,
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|acceptedStates
parameter_list|)
block|{
comment|// nodes contains nodes that are NEW, RUNNING OR UNHEALTHY
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
condition|)
block|{
for|for
control|(
name|RMNode
name|rmNode
range|:
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
condition|)
block|{
for|for
control|(
name|RMNode
name|rmNode
range|:
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

