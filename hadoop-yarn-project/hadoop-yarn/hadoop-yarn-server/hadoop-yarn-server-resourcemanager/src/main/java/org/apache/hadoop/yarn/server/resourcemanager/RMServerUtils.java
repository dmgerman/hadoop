begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidContainerReleaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceBlacklistRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|YarnAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedContainerChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Utility methods to aid serving RM data through the REST and RPC APIs  */
end_comment

begin_class
DECL|class|RMServerUtils
specifier|public
class|class
name|RMServerUtils
block|{
DECL|field|UPDATE_OUTSTANDING_ERROR
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_OUTSTANDING_ERROR
init|=
literal|"UPDATE_OUTSTANDING_ERROR"
decl_stmt|;
DECL|field|INCORRECT_CONTAINER_VERSION_ERROR
specifier|private
specifier|static
specifier|final
name|String
name|INCORRECT_CONTAINER_VERSION_ERROR
init|=
literal|"INCORRECT_CONTAINER_VERSION_ERROR"
decl_stmt|;
DECL|field|INVALID_CONTAINER_ID
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_CONTAINER_ID
init|=
literal|"INVALID_CONTAINER_ID"
decl_stmt|;
DECL|field|RESOURCE_OUTSIDE_ALLOWED_RANGE
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_OUTSIDE_ALLOWED_RANGE
init|=
literal|"RESOURCE_OUTSIDE_ALLOWED_RANGE"
decl_stmt|;
DECL|field|RECORD_FACTORY
specifier|protected
specifier|static
specifier|final
name|RecordFactory
name|RECORD_FACTORY
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|clock
specifier|private
specifier|static
name|Clock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|method|queryRMNodes (RMContext context, EnumSet<NodeState> acceptedStates)
specifier|public
specifier|static
name|List
argument_list|<
name|RMNode
argument_list|>
name|queryRMNodes
parameter_list|(
name|RMContext
name|context
parameter_list|,
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|acceptedStates
parameter_list|)
block|{
comment|// nodes contains nodes that are NEW, RUNNING, UNHEALTHY or DECOMMISSIONING.
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
condition|)
block|{
for|for
control|(
name|RMNode
name|rmNode
range|:
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED
if|if
condition|(
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
operator|||
name|acceptedStates
operator|.
name|contains
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
condition|)
block|{
for|for
control|(
name|RMNode
name|rmNode
range|:
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|rmNode
operator|!=
literal|null
operator|)
operator|&&
name|acceptedStates
operator|.
name|contains
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Check if we have:    * - Request for same containerId and different target resource    * - If targetResources violates maximum/minimumAllocation    * @param rmContext RM context    * @param request Allocate Request    * @param maximumAllocation Maximum Allocation    * @param increaseResourceReqs Increase Resource Request    * @param decreaseResourceReqs Decrease Resource Request    * @return List of container Errors    */
specifier|public
specifier|static
name|List
argument_list|<
name|UpdateContainerError
argument_list|>
DECL|method|validateAndSplitUpdateResourceRequests (RMContext rmContext, AllocateRequest request, Resource maximumAllocation, List<UpdateContainerRequest> increaseResourceReqs, List<UpdateContainerRequest> decreaseResourceReqs)
name|validateAndSplitUpdateResourceRequests
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|AllocateRequest
name|request
parameter_list|,
name|Resource
name|maximumAllocation
parameter_list|,
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|increaseResourceReqs
parameter_list|,
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|decreaseResourceReqs
parameter_list|)
block|{
name|List
argument_list|<
name|UpdateContainerError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|outstandingUpdate
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateContainerRequest
name|updateReq
range|:
name|request
operator|.
name|getUpdateRequests
argument_list|()
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|updateReq
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
name|INVALID_CONTAINER_ID
expr_stmt|;
block|}
comment|// Only allow updates if the requested version matches the current
comment|// version
if|if
condition|(
name|msg
operator|==
literal|null
operator|&&
name|updateReq
operator|.
name|getContainerVersion
argument_list|()
operator|!=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|msg
operator|=
name|INCORRECT_CONTAINER_VERSION_ERROR
operator|+
literal|"|"
operator|+
name|updateReq
operator|.
name|getContainerVersion
argument_list|()
operator|+
literal|"|"
operator|+
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
comment|// No more than 1 container update per request.
if|if
condition|(
name|msg
operator|==
literal|null
operator|&&
name|outstandingUpdate
operator|.
name|contains
argument_list|(
name|updateReq
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|msg
operator|=
name|UPDATE_OUTSTANDING_ERROR
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|Resource
name|original
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Resource
name|target
init|=
name|updateReq
operator|.
name|getCapability
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|target
argument_list|,
name|original
argument_list|)
condition|)
block|{
comment|// This is a decrease request
if|if
condition|(
name|validateIncreaseDecreaseRequest
argument_list|(
name|rmContext
argument_list|,
name|updateReq
argument_list|,
name|maximumAllocation
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|decreaseResourceReqs
operator|.
name|add
argument_list|(
name|updateReq
argument_list|)
expr_stmt|;
name|outstandingUpdate
operator|.
name|add
argument_list|(
name|updateReq
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|RESOURCE_OUTSIDE_ALLOWED_RANGE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// This is an increase request
if|if
condition|(
name|validateIncreaseDecreaseRequest
argument_list|(
name|rmContext
argument_list|,
name|updateReq
argument_list|,
name|maximumAllocation
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|increaseResourceReqs
operator|.
name|add
argument_list|(
name|updateReq
argument_list|)
expr_stmt|;
name|outstandingUpdate
operator|.
name|add
argument_list|(
name|updateReq
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|RESOURCE_OUTSIDE_ALLOWED_RANGE
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|UpdateContainerError
name|updateError
init|=
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|UpdateContainerError
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateError
operator|.
name|setReason
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|updateError
operator|.
name|setUpdateContainerRequest
argument_list|(
name|updateReq
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|updateError
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|errors
return|;
block|}
comment|/**    * Utility method to validate a list resource requests, by insuring that the    * requested memory/vcore is non-negative and not greater than max    */
DECL|method|normalizeAndValidateRequests (List<ResourceRequest> ask, Resource maximumResource, String queueName, YarnScheduler scheduler, RMContext rmContext)
specifier|public
specifier|static
name|void
name|normalizeAndValidateRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|Resource
name|maximumResource
parameter_list|,
name|String
name|queueName
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|InvalidResourceRequestException
block|{
comment|// Get queue from scheduler
name|QueueInfo
name|queueInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|queueInfo
operator|=
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
name|queueName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
for|for
control|(
name|ResourceRequest
name|resReq
range|:
name|ask
control|)
block|{
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maximumResource
argument_list|,
name|queueName
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|,
name|queueInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate increase/decrease request.    *<pre>    * - Throw exception when any other error happens    *</pre>    */
DECL|method|checkSchedContainerChangeRequest ( SchedContainerChangeRequest request, boolean increase)
specifier|public
specifier|static
name|void
name|checkSchedContainerChangeRequest
parameter_list|(
name|SchedContainerChangeRequest
name|request
parameter_list|,
name|boolean
name|increase
parameter_list|)
throws|throws
name|InvalidResourceRequestException
block|{
name|RMContext
name|rmContext
init|=
name|request
operator|.
name|getRmContext
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|request
operator|.
name|getRMContainer
argument_list|()
decl_stmt|;
name|Resource
name|targetResource
init|=
name|request
operator|.
name|getTargetCapacity
argument_list|()
decl_stmt|;
comment|// Compare targetResource and original resource
name|Resource
name|originalResource
init|=
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
comment|// Resource comparasion should be>= (or<=) for all resource vectors, for
comment|// example, you cannot request target resource of a<10G, 10> container to
comment|//<20G, 8>
if|if
condition|(
name|increase
condition|)
block|{
if|if
condition|(
name|originalResource
operator|.
name|getMemorySize
argument_list|()
operator|>
name|targetResource
operator|.
name|getMemorySize
argument_list|()
operator|||
name|originalResource
operator|.
name|getVirtualCores
argument_list|()
operator|>
name|targetResource
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Trying to increase a container, but target resource has some"
operator|+
literal|" resource< original resource, target="
operator|+
name|targetResource
operator|+
literal|" original="
operator|+
name|originalResource
operator|+
literal|" containerId="
operator|+
name|containerId
decl_stmt|;
throw|throw
operator|new
name|InvalidResourceRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|originalResource
operator|.
name|getMemorySize
argument_list|()
operator|<
name|targetResource
operator|.
name|getMemorySize
argument_list|()
operator|||
name|originalResource
operator|.
name|getVirtualCores
argument_list|()
operator|<
name|targetResource
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Trying to decrease a container, but target resource has "
operator|+
literal|"some resource> original resource, target="
operator|+
name|targetResource
operator|+
literal|" original="
operator|+
name|originalResource
operator|+
literal|" containerId="
operator|+
name|containerId
decl_stmt|;
throw|throw
operator|new
name|InvalidResourceRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|// Target resource of the increase request is more than NM can offer
name|ResourceScheduler
name|scheduler
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|request
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getRMNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|targetResource
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Target resource="
operator|+
name|targetResource
operator|+
literal|" of containerId="
operator|+
name|containerId
operator|+
literal|" is more than node's total resource="
operator|+
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidResourceRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/*    * @throw<code>InvalidResourceBlacklistRequestException</code> if the    * resource is not able to be added to the blacklist.    */
DECL|method|validateBlacklistRequest ( ResourceBlacklistRequest blacklistRequest)
specifier|public
specifier|static
name|void
name|validateBlacklistRequest
parameter_list|(
name|ResourceBlacklistRequest
name|blacklistRequest
parameter_list|)
throws|throws
name|InvalidResourceBlacklistRequestException
block|{
if|if
condition|(
name|blacklistRequest
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|plus
init|=
name|blacklistRequest
operator|.
name|getBlacklistAdditions
argument_list|()
decl_stmt|;
if|if
condition|(
name|plus
operator|!=
literal|null
operator|&&
name|plus
operator|.
name|contains
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidResourceBlacklistRequestException
argument_list|(
literal|"Cannot add "
operator|+
name|ResourceRequest
operator|.
name|ANY
operator|+
literal|" to the blacklist!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Sanity check and normalize target resource
DECL|method|validateIncreaseDecreaseRequest (RMContext rmContext, UpdateContainerRequest request, Resource maximumAllocation, boolean increase)
specifier|private
specifier|static
name|boolean
name|validateIncreaseDecreaseRequest
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|UpdateContainerRequest
name|request
parameter_list|,
name|Resource
name|maximumAllocation
parameter_list|,
name|boolean
name|increase
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|<
literal|0
operator|||
name|request
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|>
name|maximumAllocation
operator|.
name|getMemorySize
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|request
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
operator|<
literal|0
operator|||
name|request
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
operator|>
name|maximumAllocation
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ResourceScheduler
name|scheduler
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|ResourceCalculator
name|rc
init|=
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|targetResource
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|rc
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update normalized target resource
name|request
operator|.
name|setCapability
argument_list|(
name|targetResource
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * It will validate to make sure all the containers belong to correct    * application attempt id. If not then it will throw    * {@link InvalidContainerReleaseException}    *    * @param containerReleaseList containers to be released as requested by    *                             application master.    * @param appAttemptId         Application attempt Id    * @throws InvalidContainerReleaseException    */
specifier|public
specifier|static
name|void
DECL|method|validateContainerReleaseRequest (List<ContainerId> containerReleaseList, ApplicationAttemptId appAttemptId)
name|validateContainerReleaseRequest
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerReleaseList
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|InvalidContainerReleaseException
block|{
for|for
control|(
name|ContainerId
name|cId
range|:
name|containerReleaseList
control|)
block|{
if|if
condition|(
operator|!
name|appAttemptId
operator|.
name|equals
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidContainerReleaseException
argument_list|(
literal|"Cannot release container : "
operator|+
name|cId
operator|.
name|toString
argument_list|()
operator|+
literal|" not belonging to this application attempt : "
operator|+
name|appAttemptId
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|verifyAdminAccess ( YarnAuthorizationProvider authorizer, String method, final Log LOG)
specifier|public
specifier|static
name|UserGroupInformation
name|verifyAdminAccess
parameter_list|(
name|YarnAuthorizationProvider
name|authorizer
parameter_list|,
name|String
name|method
parameter_list|,
specifier|final
name|Log
name|LOG
parameter_list|)
throws|throws
name|IOException
block|{
comment|// by default, this method will use AdminService as module name
return|return
name|verifyAdminAccess
argument_list|(
name|authorizer
argument_list|,
name|method
argument_list|,
literal|"AdminService"
argument_list|,
name|LOG
argument_list|)
return|;
block|}
comment|/**    * Utility method to verify if the current user has access based on the    * passed {@link AccessControlList}    *    * @param authorizer the {@link AccessControlList} to check against    * @param method     the method name to be logged    * @param module     like AdminService or NodeLabelManager    * @param LOG        the logger to use    * @return {@link UserGroupInformation} of the current user    * @throws IOException    */
DECL|method|verifyAdminAccess ( YarnAuthorizationProvider authorizer, String method, String module, final Log LOG)
specifier|public
specifier|static
name|UserGroupInformation
name|verifyAdminAccess
parameter_list|(
name|YarnAuthorizationProvider
name|authorizer
parameter_list|,
name|String
name|method
parameter_list|,
name|String
name|module
parameter_list|,
specifier|final
name|Log
name|LOG
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
decl_stmt|;
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get current user"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UNKNOWN"
argument_list|,
name|method
argument_list|,
literal|""
argument_list|,
literal|"AdminService"
argument_list|,
literal|"Couldn't get current user"
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
if|if
condition|(
operator|!
name|authorizer
operator|.
name|isAdmin
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"User "
operator|+
name|user
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" doesn't have permission"
operator|+
literal|" to call '"
operator|+
name|method
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|method
argument_list|,
literal|""
argument_list|,
name|module
argument_list|,
name|RMAuditLogger
operator|.
name|AuditConstants
operator|.
name|UNAUTHORIZED_USER
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|user
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" doesn't have permission"
operator|+
literal|" to call '"
operator|+
name|method
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|method
operator|+
literal|" invoked by user "
operator|+
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
DECL|method|createApplicationState ( RMAppState rmAppState)
specifier|public
specifier|static
name|YarnApplicationState
name|createApplicationState
parameter_list|(
name|RMAppState
name|rmAppState
parameter_list|)
block|{
switch|switch
condition|(
name|rmAppState
condition|)
block|{
case|case
name|NEW
case|:
return|return
name|YarnApplicationState
operator|.
name|NEW
return|;
case|case
name|NEW_SAVING
case|:
return|return
name|YarnApplicationState
operator|.
name|NEW_SAVING
return|;
case|case
name|SUBMITTED
case|:
return|return
name|YarnApplicationState
operator|.
name|SUBMITTED
return|;
case|case
name|ACCEPTED
case|:
return|return
name|YarnApplicationState
operator|.
name|ACCEPTED
return|;
case|case
name|RUNNING
case|:
return|return
name|YarnApplicationState
operator|.
name|RUNNING
return|;
case|case
name|FINISHING
case|:
case|case
name|FINISHED
case|:
return|return
name|YarnApplicationState
operator|.
name|FINISHED
return|;
case|case
name|KILLING
case|:
case|case
name|KILLED
case|:
return|return
name|YarnApplicationState
operator|.
name|KILLED
return|;
case|case
name|FAILED
case|:
return|return
name|YarnApplicationState
operator|.
name|FAILED
return|;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown state passed!"
argument_list|)
throw|;
block|}
block|}
DECL|method|createApplicationAttemptState ( RMAppAttemptState rmAppAttemptState)
specifier|public
specifier|static
name|YarnApplicationAttemptState
name|createApplicationAttemptState
parameter_list|(
name|RMAppAttemptState
name|rmAppAttemptState
parameter_list|)
block|{
switch|switch
condition|(
name|rmAppAttemptState
condition|)
block|{
case|case
name|NEW
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|NEW
return|;
case|case
name|SUBMITTED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|SUBMITTED
return|;
case|case
name|SCHEDULED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|SCHEDULED
return|;
case|case
name|ALLOCATED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|ALLOCATED
return|;
case|case
name|LAUNCHED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|LAUNCHED
return|;
case|case
name|ALLOCATED_SAVING
case|:
case|case
name|LAUNCHED_UNMANAGED_SAVING
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|ALLOCATED_SAVING
return|;
case|case
name|RUNNING
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|RUNNING
return|;
case|case
name|FINISHING
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|FINISHING
return|;
case|case
name|FINISHED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|FINISHED
return|;
case|case
name|KILLED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|KILLED
return|;
case|case
name|FAILED
case|:
return|return
name|YarnApplicationAttemptState
operator|.
name|FAILED
return|;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown state passed!"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Statically defined dummy ApplicationResourceUsageREport.  Used as    * a return value when a valid report cannot be found.    */
specifier|public
specifier|static
specifier|final
name|ApplicationResourceUsageReport
DECL|field|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
name|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
init|=
name|BuilderUtils
operator|.
name|newApplicationResourceUsageReport
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Find all configs whose name starts with    * YarnConfiguration.RM_PROXY_USER_PREFIX, and add a record for each one by    * replacing the prefix with ProxyUsers.CONF_HADOOP_PROXYUSER    */
DECL|method|processRMProxyUsersConf (Configuration conf)
specifier|public
specifier|static
name|void
name|processRMProxyUsersConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rmProxyUsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|startsWith
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PREFIX
argument_list|)
condition|)
block|{
name|rmProxyUsers
operator|.
name|put
argument_list|(
name|ProxyUsers
operator|.
name|CONF_HADOOP_PROXYUSER
operator|+
literal|"."
operator|+
name|propName
operator|.
name|substring
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|rmProxyUsers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateApplicationTimeouts ( Map<ApplicationTimeoutType, Long> timeouts)
specifier|public
specifier|static
name|void
name|validateApplicationTimeouts
parameter_list|(
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|timeouts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeout
range|:
name|timeouts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|timeout
operator|.
name|getValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid application timeout, value="
operator|+
name|timeout
operator|.
name|getValue
argument_list|()
operator|+
literal|" for type="
operator|+
name|timeout
operator|.
name|getKey
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Validate ISO8601 format with epoch time.    * @param timeoutsInISO8601 format    * @return expire time in local epoch    * @throws YarnException if given application timeout value is lesser than    *           current time.    */
DECL|method|validateISO8601AndConvertToLocalTimeEpoch ( Map<ApplicationTimeoutType, String> timeoutsInISO8601)
specifier|public
specifier|static
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|validateISO8601AndConvertToLocalTimeEpoch
parameter_list|(
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
name|timeoutsInISO8601
parameter_list|)
throws|throws
name|YarnException
block|{
name|long
name|currentTimeMillis
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|newApplicationTimeout
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeoutsInISO8601
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
name|timeout
range|:
name|timeoutsInISO8601
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|expireTime
init|=
literal|0L
decl_stmt|;
try|try
block|{
name|expireTime
operator|=
name|Times
operator|.
name|parseISO8601ToLocalTimeInMillis
argument_list|(
name|timeout
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Expire time is not in ISO8601 format. ISO8601 supported "
operator|+
literal|"format is yyyy-MM-dd'T'HH:mm:ss.SSSZ"
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|expireTime
operator|<
name|currentTimeMillis
condition|)
block|{
name|String
name|message
init|=
literal|"Expire time is less than current time, current-time="
operator|+
name|Times
operator|.
name|formatISO8601
argument_list|(
name|currentTimeMillis
argument_list|)
operator|+
literal|" expire-time="
operator|+
name|Times
operator|.
name|formatISO8601
argument_list|(
name|expireTime
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|newApplicationTimeout
operator|.
name|put
argument_list|(
name|timeout
operator|.
name|getKey
argument_list|()
argument_list|,
name|expireTime
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newApplicationTimeout
return|;
block|}
block|}
end_class

end_unit

