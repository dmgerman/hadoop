begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.allocation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|AllocationConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|ConfigurableResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|SchedulingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Responsible for parsing allocation.xml config file.  * All node's text value is stored to textValues if {@link #VALID_TAG_NAMES}  * contains the tag name.  * Other meaningful fields are also saved in {@link #parse()}.  */
end_comment

begin_class
DECL|class|AllocationFileParser
specifier|public
class|class
name|AllocationFileParser
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AllocationFileParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|QUEUE_MAX_RESOURCES_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_MAX_RESOURCES_DEFAULT
init|=
literal|"queueMaxResourcesDefault"
decl_stmt|;
DECL|field|USER_MAX_APPS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|USER_MAX_APPS_DEFAULT
init|=
literal|"userMaxAppsDefault"
decl_stmt|;
DECL|field|DEFAULT_FAIR_SHARE_PREEMPTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FAIR_SHARE_PREEMPTION_TIMEOUT
init|=
literal|"defaultFairSharePreemptionTimeout"
decl_stmt|;
DECL|field|FAIR_SHARE_PREEMPTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|FAIR_SHARE_PREEMPTION_TIMEOUT
init|=
literal|"fairSharePreemptionTimeout"
decl_stmt|;
DECL|field|DEFAULT_MIN_SHARE_PREEMPTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MIN_SHARE_PREEMPTION_TIMEOUT
init|=
literal|"defaultMinSharePreemptionTimeout"
decl_stmt|;
DECL|field|QUEUE_MAX_APPS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_MAX_APPS_DEFAULT
init|=
literal|"queueMaxAppsDefault"
decl_stmt|;
DECL|field|DEFAULT_FAIR_SHARE_PREEMPTION_THRESHOLD
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FAIR_SHARE_PREEMPTION_THRESHOLD
init|=
literal|"defaultFairSharePreemptionThreshold"
decl_stmt|;
DECL|field|QUEUE_MAX_AM_SHARE_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_MAX_AM_SHARE_DEFAULT
init|=
literal|"queueMaxAMShareDefault"
decl_stmt|;
DECL|field|RESERVATION_PLANNER
specifier|private
specifier|static
specifier|final
name|String
name|RESERVATION_PLANNER
init|=
literal|"reservation-planner"
decl_stmt|;
DECL|field|RESERVATION_AGENT
specifier|private
specifier|static
specifier|final
name|String
name|RESERVATION_AGENT
init|=
literal|"reservation-agent"
decl_stmt|;
DECL|field|RESERVATION_ADMISSION_POLICY
specifier|private
specifier|static
specifier|final
name|String
name|RESERVATION_ADMISSION_POLICY
init|=
literal|"reservation-policy"
decl_stmt|;
DECL|field|QUEUE_PLACEMENT_POLICY
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_PLACEMENT_POLICY
init|=
literal|"queuePlacementPolicy"
decl_stmt|;
DECL|field|QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE
init|=
literal|"queue"
decl_stmt|;
DECL|field|POOL
specifier|private
specifier|static
specifier|final
name|String
name|POOL
init|=
literal|"pool"
decl_stmt|;
DECL|field|USER
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
DECL|field|USERNAME
specifier|private
specifier|static
specifier|final
name|String
name|USERNAME
init|=
literal|"name"
decl_stmt|;
DECL|field|MAX_RUNNING_APPS
specifier|private
specifier|static
specifier|final
name|String
name|MAX_RUNNING_APPS
init|=
literal|"maxRunningApps"
decl_stmt|;
DECL|field|DEFAULT_QUEUE_SCHEDULING_POLICY
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE_SCHEDULING_POLICY
init|=
literal|"defaultQueueSchedulingPolicy"
decl_stmt|;
DECL|field|DEFAULT_QUEUE_SCHEDULING_MODE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE_SCHEDULING_MODE
init|=
literal|"defaultQueueSchedulingMode"
decl_stmt|;
DECL|field|VALID_TAG_NAMES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|VALID_TAG_NAMES
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|QUEUE_MAX_RESOURCES_DEFAULT
argument_list|,
name|USER_MAX_APPS_DEFAULT
argument_list|,
name|DEFAULT_FAIR_SHARE_PREEMPTION_TIMEOUT
argument_list|,
name|FAIR_SHARE_PREEMPTION_TIMEOUT
argument_list|,
name|DEFAULT_MIN_SHARE_PREEMPTION_TIMEOUT
argument_list|,
name|QUEUE_MAX_APPS_DEFAULT
argument_list|,
name|DEFAULT_FAIR_SHARE_PREEMPTION_THRESHOLD
argument_list|,
name|QUEUE_MAX_AM_SHARE_DEFAULT
argument_list|,
name|RESERVATION_PLANNER
argument_list|,
name|RESERVATION_AGENT
argument_list|,
name|RESERVATION_ADMISSION_POLICY
argument_list|,
name|QUEUE_PLACEMENT_POLICY
argument_list|,
name|QUEUE
argument_list|,
name|POOL
argument_list|,
name|USER
argument_list|,
name|DEFAULT_QUEUE_SCHEDULING_POLICY
argument_list|,
name|DEFAULT_QUEUE_SCHEDULING_MODE
argument_list|)
decl_stmt|;
DECL|field|elements
specifier|private
specifier|final
name|NodeList
name|elements
decl_stmt|;
DECL|field|textValues
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|textValues
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|queuePlacementPolicyElement
specifier|private
name|Element
name|queuePlacementPolicyElement
decl_stmt|;
DECL|field|queueElements
specifier|private
specifier|final
name|List
argument_list|<
name|Element
argument_list|>
name|queueElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|userMaxApps
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxApps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|defaultSchedulingPolicy
specifier|private
name|SchedulingPolicy
name|defaultSchedulingPolicy
decl_stmt|;
DECL|method|AllocationFileParser (NodeList elements)
specifier|public
name|AllocationFileParser
parameter_list|(
name|NodeList
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
DECL|method|parse ()
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
specifier|final
name|String
name|tagName
init|=
name|element
operator|.
name|getTagName
argument_list|()
decl_stmt|;
if|if
condition|(
name|VALID_TAG_NAMES
operator|.
name|contains
argument_list|(
name|tagName
argument_list|)
condition|)
block|{
if|if
condition|(
name|tagName
operator|.
name|equals
argument_list|(
name|QUEUE_PLACEMENT_POLICY
argument_list|)
condition|)
block|{
name|queuePlacementPolicyElement
operator|=
name|element
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSchedulingPolicy
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|defaultSchedulingPolicy
operator|=
name|extractSchedulingPolicy
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isQueue
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|queueElements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tagName
operator|.
name|equals
argument_list|(
name|USER
argument_list|)
condition|)
block|{
name|extractUserData
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textValues
operator|.
name|put
argument_list|(
name|tagName
argument_list|,
name|getTrimmedTextData
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad element in allocations file: "
operator|+
name|tagName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isSchedulingPolicy (Element element)
specifier|private
name|boolean
name|isSchedulingPolicy
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
name|DEFAULT_QUEUE_SCHEDULING_POLICY
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
name|DEFAULT_QUEUE_SCHEDULING_MODE
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|extractUserData (Element element)
specifier|private
name|void
name|extractUserData
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
specifier|final
name|String
name|userName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
name|USERNAME
argument_list|)
decl_stmt|;
specifier|final
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
name|MAX_RUNNING_APPS
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxApps
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|extractSchedulingPolicy (Element element)
specifier|private
name|SchedulingPolicy
name|extractSchedulingPolicy
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|String
name|text
init|=
name|getTrimmedTextData
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|equalsIgnoreCase
argument_list|(
name|FifoPolicy
operator|.
name|NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Bad fair scheduler "
operator|+
literal|"config file: defaultQueueSchedulingPolicy or "
operator|+
literal|"defaultQueueSchedulingMode can't be FIFO."
argument_list|)
throw|;
block|}
return|return
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|text
argument_list|)
return|;
block|}
DECL|method|isQueue (Element element)
specifier|private
name|boolean
name|isQueue
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|QUEUE
argument_list|)
operator|||
name|element
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|POOL
argument_list|)
return|;
block|}
DECL|method|getTrimmedTextData (Element element)
specifier|private
name|String
name|getTrimmedTextData
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|getQueueMaxResourcesDefault ()
specifier|public
name|ConfigurableResource
name|getQueueMaxResourcesDefault
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|QUEUE_MAX_RESOURCES_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|FairSchedulerConfiguration
operator|.
name|parseResourceConfigValue
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|ConfigurableResource
argument_list|(
name|Resources
operator|.
name|unbounded
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUserMaxAppsDefault ()
specifier|public
name|int
name|getUserMaxAppsDefault
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|USER_MAX_APPS_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|value
operator|.
name|map
argument_list|(
name|Integer
operator|::
name|parseInt
argument_list|)
operator|.
name|orElse
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|getDefaultFairSharePreemptionTimeout ()
specifier|public
name|long
name|getDefaultFairSharePreemptionTimeout
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|FAIR_SHARE_PREEMPTION_TIMEOUT
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|defaultValue
init|=
name|getTextValue
argument_list|(
name|DEFAULT_FAIR_SHARE_PREEMPTION_TIMEOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|defaultValue
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
operator|*
literal|1000L
return|;
block|}
elseif|else
if|if
condition|(
name|defaultValue
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|defaultValue
operator|.
name|get
argument_list|()
argument_list|)
operator|*
literal|1000L
return|;
block|}
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|getDefaultMinSharePreemptionTimeout ()
specifier|public
name|long
name|getDefaultMinSharePreemptionTimeout
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|DEFAULT_MIN_SHARE_PREEMPTION_TIMEOUT
argument_list|)
decl_stmt|;
return|return
name|value
operator|.
name|map
argument_list|(
name|v
lambda|->
name|Long
operator|.
name|parseLong
argument_list|(
name|v
argument_list|)
operator|*
literal|1000L
argument_list|)
operator|.
name|orElse
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|getQueueMaxAppsDefault ()
specifier|public
name|int
name|getQueueMaxAppsDefault
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|QUEUE_MAX_APPS_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|value
operator|.
name|map
argument_list|(
name|Integer
operator|::
name|parseInt
argument_list|)
operator|.
name|orElse
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|getDefaultFairSharePreemptionThreshold ()
specifier|public
name|float
name|getDefaultFairSharePreemptionThreshold
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|DEFAULT_FAIR_SHARE_PREEMPTION_THRESHOLD
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|float
name|floatValue
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|floatValue
argument_list|,
literal|1.0f
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
return|;
block|}
return|return
literal|0.5f
return|;
block|}
DECL|method|getQueueMaxAMShareDefault ()
specifier|public
name|float
name|getQueueMaxAMShareDefault
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getTextValue
argument_list|(
name|QUEUE_MAX_AM_SHARE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|float
name|val
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
name|val
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
return|return
literal|0.5f
return|;
block|}
comment|// Reservation global configuration knobs
DECL|method|getReservationPlanner ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getReservationPlanner
parameter_list|()
block|{
return|return
name|getTextValue
argument_list|(
name|RESERVATION_PLANNER
argument_list|)
return|;
block|}
DECL|method|getReservationAgent ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getReservationAgent
parameter_list|()
block|{
return|return
name|getTextValue
argument_list|(
name|RESERVATION_AGENT
argument_list|)
return|;
block|}
DECL|method|getReservationAdmissionPolicy ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getReservationAdmissionPolicy
parameter_list|()
block|{
return|return
name|getTextValue
argument_list|(
name|RESERVATION_ADMISSION_POLICY
argument_list|)
return|;
block|}
DECL|method|getQueuePlacementPolicy ()
specifier|public
name|Optional
argument_list|<
name|Element
argument_list|>
name|getQueuePlacementPolicy
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|queuePlacementPolicyElement
argument_list|)
return|;
block|}
DECL|method|getTextValue (String key)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getTextValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|textValues
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getQueueElements ()
specifier|public
name|List
argument_list|<
name|Element
argument_list|>
name|getQueueElements
parameter_list|()
block|{
return|return
name|queueElements
return|;
block|}
DECL|method|getUserMaxApps ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getUserMaxApps
parameter_list|()
block|{
return|return
name|userMaxApps
return|;
block|}
DECL|method|getDefaultSchedulingPolicy ()
specifier|public
name|SchedulingPolicy
name|getDefaultSchedulingPolicy
parameter_list|()
block|{
if|if
condition|(
name|defaultSchedulingPolicy
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultSchedulingPolicy
return|;
block|}
return|return
name|SchedulingPolicy
operator|.
name|DEFAULT_POLICY
return|;
block|}
block|}
end_class

end_unit

