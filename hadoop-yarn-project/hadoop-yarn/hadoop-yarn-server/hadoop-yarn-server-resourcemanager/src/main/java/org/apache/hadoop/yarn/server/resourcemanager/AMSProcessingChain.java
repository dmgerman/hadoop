begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This maintains a chain of {@link ApplicationMasterServiceProcessor}s.  */
end_comment

begin_class
DECL|class|AMSProcessingChain
class|class
name|AMSProcessingChain
implements|implements
name|ApplicationMasterServiceProcessor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMSProcessingChain
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|head
specifier|private
name|ApplicationMasterServiceProcessor
name|head
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
comment|/**    * This has to be initialized with at-least 1 Processor.    * @param rootProcessor Root processor.    */
DECL|method|AMSProcessingChain (ApplicationMasterServiceProcessor rootProcessor)
name|AMSProcessingChain
parameter_list|(
name|ApplicationMasterServiceProcessor
name|rootProcessor
parameter_list|)
block|{
if|if
condition|(
name|rootProcessor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"No root ApplicationMasterService"
operator|+
literal|"Processor specified for the processing chain.."
argument_list|)
throw|;
block|}
name|this
operator|.
name|head
operator|=
name|rootProcessor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (ApplicationMasterServiceContext amsContext, ApplicationMasterServiceProcessor nextProcessor)
specifier|public
name|void
name|init
parameter_list|(
name|ApplicationMasterServiceContext
name|amsContext
parameter_list|,
name|ApplicationMasterServiceProcessor
name|nextProcessor
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing AMS Processing chain. Root Processor=["
operator|+
name|this
operator|.
name|head
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]."
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
operator|(
name|RMContext
operator|)
name|amsContext
expr_stmt|;
comment|// The head is initialized with a null 'next' processor
name|this
operator|.
name|head
operator|.
name|init
argument_list|(
name|amsContext
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add an processor to the top of the chain.    * @param processor ApplicationMasterServiceProcessor    */
DECL|method|addProcessor ( ApplicationMasterServiceProcessor processor)
specifier|public
specifier|synchronized
name|void
name|addProcessor
parameter_list|(
name|ApplicationMasterServiceProcessor
name|processor
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding ["
operator|+
name|processor
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] tp top of"
operator|+
literal|" AMS Processing chain. "
argument_list|)
expr_stmt|;
name|processor
operator|.
name|init
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|head
argument_list|)
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|processor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( ApplicationAttemptId applicationAttemptId, RegisterApplicationMasterRequest request, RegisterApplicationMasterResponse resp)
specifier|public
name|void
name|registerApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RegisterApplicationMasterRequest
name|request
parameter_list|,
name|RegisterApplicationMasterResponse
name|resp
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|this
operator|.
name|head
operator|.
name|registerApplicationMaster
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId appAttemptId, AllocateRequest request, AllocateResponse response)
specifier|public
name|void
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AllocateRequest
name|request
parameter_list|,
name|AllocateResponse
name|response
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|head
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( ApplicationAttemptId applicationAttemptId, FinishApplicationMasterRequest request, FinishApplicationMasterResponse response)
specifier|public
name|void
name|finishApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|FinishApplicationMasterRequest
name|request
parameter_list|,
name|FinishApplicationMasterResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|head
operator|.
name|finishApplicationMaster
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

