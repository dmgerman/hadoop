begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollector
import|;
end_import

begin_comment
comment|/**  * This class is responsible for posting application and appattempt lifecycle  * related events to timeline service V2  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|RMTimelineCollector
specifier|public
class|class
name|RMTimelineCollector
extends|extends
name|TimelineCollector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMTimelineCollector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RMTimelineCollector ()
specifier|public
name|RMTimelineCollector
parameter_list|()
block|{
name|super
argument_list|(
literal|"Resource Manager TimelineCollector"
argument_list|)
expr_stmt|;
block|}
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|publishSystemMetricsForV2
specifier|private
name|boolean
name|publishSystemMetricsForV2
decl_stmt|;
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|publishSystemMetricsForV2
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|publishSystemMetricsForV2
condition|)
block|{
comment|// having separate dispatcher to avoid load on RMDispatcher
name|LOG
operator|.
name|info
argument_list|(
literal|"RMTimelineCollector has been configured to publish"
operator|+
literal|" System Metrics in ATS V2"
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SystemMetricsEventType
operator|.
name|class
argument_list|,
operator|new
name|ForwardingEventHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RMTimelineCollector has not been configured to publish"
operator|+
literal|" System Metrics in ATS V2"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|handleSystemMetricsEvent (SystemMetricsEvent event)
specifier|protected
name|void
name|handleSystemMetricsEvent
parameter_list|(
name|SystemMetricsEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown SystemMetricsEvent type: "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * EventHandler implementation which forward events to SystemMetricsPublisher.    * Making use of it, SystemMetricsPublisher can avoid to have a public handle    * method.    */
DECL|class|ForwardingEventHandler
specifier|private
specifier|final
class|class
name|ForwardingEventHandler
implements|implements
name|EventHandler
argument_list|<
name|SystemMetricsEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (SystemMetricsEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SystemMetricsEvent
name|event
parameter_list|)
block|{
name|handleSystemMetricsEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

