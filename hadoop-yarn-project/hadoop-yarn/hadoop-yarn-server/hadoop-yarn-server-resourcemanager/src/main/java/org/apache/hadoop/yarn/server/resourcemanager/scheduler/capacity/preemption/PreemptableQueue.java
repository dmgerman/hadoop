begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.preemption
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|preemption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_class
DECL|class|PreemptableQueue
specifier|public
class|class
name|PreemptableQueue
block|{
comment|// Partition -> killable resources and containers
DECL|field|totalKillableResources
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|totalKillableResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|killableContainers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
argument_list|>
name|killableContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|parent
specifier|private
name|PreemptableQueue
name|parent
decl_stmt|;
DECL|method|PreemptableQueue (PreemptableQueue parent)
specifier|public
name|PreemptableQueue
parameter_list|(
name|PreemptableQueue
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|PreemptableQueue (Map<String, Resource> totalKillableResources, Map<String, Map<ContainerId, RMContainer>> killableContainers)
specifier|public
name|PreemptableQueue
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|totalKillableResources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
argument_list|>
name|killableContainers
parameter_list|)
block|{
name|this
operator|.
name|totalKillableResources
operator|=
name|totalKillableResources
expr_stmt|;
name|this
operator|.
name|killableContainers
operator|=
name|killableContainers
expr_stmt|;
block|}
DECL|method|addKillableContainer (KillableContainer container)
name|void
name|addKillableContainer
parameter_list|(
name|KillableContainer
name|container
parameter_list|)
block|{
name|String
name|partition
init|=
name|container
operator|.
name|getNodePartition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|totalKillableResources
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|totalKillableResources
operator|.
name|put
argument_list|(
name|partition
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|killableContainers
operator|.
name|put
argument_list|(
name|partition
argument_list|,
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RMContainer
name|c
init|=
name|container
operator|.
name|getRMContainer
argument_list|()
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|totalKillableResources
operator|.
name|get
argument_list|(
name|partition
argument_list|)
argument_list|,
name|c
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|killableContainers
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|.
name|put
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|parent
condition|)
block|{
name|parent
operator|.
name|addKillableContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeKillableContainer (KillableContainer container)
name|void
name|removeKillableContainer
parameter_list|(
name|KillableContainer
name|container
parameter_list|)
block|{
name|String
name|partition
init|=
name|container
operator|.
name|getNodePartition
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
name|partitionKillableContainers
init|=
name|killableContainers
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionKillableContainers
operator|!=
literal|null
condition|)
block|{
name|RMContainer
name|rmContainer
init|=
name|partitionKillableContainers
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getRMContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmContainer
condition|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|totalKillableResources
operator|.
name|get
argument_list|(
name|partition
argument_list|)
argument_list|,
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|parent
condition|)
block|{
name|parent
operator|.
name|removeKillableContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getKillableResource (String partition)
specifier|public
name|Resource
name|getKillableResource
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|Resource
name|res
init|=
name|totalKillableResources
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
return|return
name|res
operator|==
literal|null
condition|?
name|Resources
operator|.
name|none
argument_list|()
else|:
name|res
return|;
block|}
DECL|method|getKillableContainers ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RMContainer
argument_list|>
argument_list|>
name|getKillableContainers
parameter_list|()
block|{
return|return
name|killableContainers
return|;
block|}
DECL|method|getTotalKillableResources ()
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getTotalKillableResources
parameter_list|()
block|{
return|return
name|totalKillableResources
return|;
block|}
block|}
end_class

end_unit

