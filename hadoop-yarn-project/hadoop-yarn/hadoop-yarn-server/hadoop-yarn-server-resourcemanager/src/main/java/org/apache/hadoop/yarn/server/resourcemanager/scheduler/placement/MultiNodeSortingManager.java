begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|IteratorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_comment
comment|/**  * Node Sorting Manager which runs all sorter threads and policies.  * @param<N> extends SchedulerNode  */
end_comment

begin_class
DECL|class|MultiNodeSortingManager
specifier|public
class|class
name|MultiNodeSortingManager
parameter_list|<
name|N
extends|extends
name|SchedulerNode
parameter_list|>
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiNodeSortingManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|runningMultiNodeSorters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MultiNodeSorter
argument_list|<
name|N
argument_list|>
argument_list|>
name|runningMultiNodeSorters
decl_stmt|;
DECL|field|policySpecs
specifier|private
name|Set
argument_list|<
name|MultiNodePolicySpec
argument_list|>
name|policySpecs
init|=
operator|new
name|HashSet
argument_list|<
name|MultiNodePolicySpec
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|multiNodePlacementEnabled
specifier|private
name|boolean
name|multiNodePlacementEnabled
decl_stmt|;
DECL|method|MultiNodeSortingManager ()
specifier|public
name|MultiNodeSortingManager
parameter_list|()
block|{
name|super
argument_list|(
literal|"MultiNodeSortingManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|runningMultiNodeSorters
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing NodeSortingService="
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting NodeSortingService="
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|createAllPolicies
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MultiNodeSorter
argument_list|<
name|N
argument_list|>
name|sorter
range|:
name|runningMultiNodeSorters
operator|.
name|values
argument_list|()
control|)
block|{
name|sorter
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|createAllPolicies ()
specifier|private
name|void
name|createAllPolicies
parameter_list|()
block|{
if|if
condition|(
operator|!
name|multiNodePlacementEnabled
condition|)
block|{
return|return;
block|}
for|for
control|(
name|MultiNodePolicySpec
name|policy
range|:
name|policySpecs
control|)
block|{
name|MultiNodeSorter
argument_list|<
name|N
argument_list|>
name|mon
init|=
operator|new
name|MultiNodeSorter
argument_list|<
name|N
argument_list|>
argument_list|(
name|rmContext
argument_list|,
name|policy
argument_list|)
decl_stmt|;
name|mon
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mon
operator|.
name|start
argument_list|()
expr_stmt|;
name|runningMultiNodeSorters
operator|.
name|put
argument_list|(
name|policy
operator|.
name|getPolicyName
argument_list|()
argument_list|,
name|mon
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMultiNodePolicy (String name)
specifier|public
name|MultiNodeSorter
argument_list|<
name|N
argument_list|>
name|getMultiNodePolicy
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|runningMultiNodeSorters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|setRMContext (RMContext context)
specifier|public
name|void
name|setRMContext
parameter_list|(
name|RMContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|context
expr_stmt|;
block|}
DECL|method|registerMultiNodePolicyNames ( boolean isMultiNodePlacementEnabled, Set<MultiNodePolicySpec> multiNodePlacementPolicies)
specifier|public
name|void
name|registerMultiNodePolicyNames
parameter_list|(
name|boolean
name|isMultiNodePlacementEnabled
parameter_list|,
name|Set
argument_list|<
name|MultiNodePolicySpec
argument_list|>
name|multiNodePlacementPolicies
parameter_list|)
block|{
name|this
operator|.
name|policySpecs
operator|.
name|addAll
argument_list|(
name|multiNodePlacementPolicies
argument_list|)
expr_stmt|;
name|this
operator|.
name|multiNodePlacementEnabled
operator|=
name|isMultiNodePlacementEnabled
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MultiNode scheduling is '"
operator|+
name|multiNodePlacementEnabled
operator|+
literal|"', and configured policies are "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|policySpecs
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMultiNodeSortIterator (Collection<N> nodes, String partition, String policyName)
specifier|public
name|Iterator
argument_list|<
name|N
argument_list|>
name|getMultiNodeSortIterator
parameter_list|(
name|Collection
argument_list|<
name|N
argument_list|>
name|nodes
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|policyName
parameter_list|)
block|{
comment|// nodeLookupPolicy can be null if app is configured with invalid policy.
comment|// in such cases, use the the first node.
if|if
condition|(
name|policyName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Multi Node scheduling is enabled, however invalid class is"
operator|+
literal|" configured. Valid sorting policy has to be configured in"
operator|+
literal|" yarn.scheduler.capacity.<queue>.multi-node-sorting.policy"
argument_list|)
expr_stmt|;
return|return
name|IteratorUtils
operator|.
name|singletonIterator
argument_list|(
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
name|MultiNodeSorter
name|multiNodeSorter
init|=
name|getMultiNodePolicy
argument_list|(
name|policyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiNodeSorter
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MultiNode policy '"
operator|+
name|policyName
operator|+
literal|"' is configured, however "
operator|+
literal|"yarn.scheduler.capacity.multi-node-placement-enabled is false"
argument_list|)
expr_stmt|;
return|return
name|IteratorUtils
operator|.
name|singletonIterator
argument_list|(
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
name|MultiNodeLookupPolicy
argument_list|<
name|N
argument_list|>
name|policy
init|=
name|multiNodeSorter
operator|.
name|getMultiNodeLookupPolicy
argument_list|()
decl_stmt|;
comment|// If sorter thread is not running, refresh node set.
if|if
condition|(
operator|!
name|multiNodeSorter
operator|.
name|isSorterThreadRunning
argument_list|()
condition|)
block|{
name|policy
operator|.
name|addAndRefreshNodesSet
argument_list|(
name|nodes
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|policy
operator|.
name|getPreferredNodeIterator
argument_list|(
name|nodes
argument_list|,
name|partition
argument_list|)
return|;
block|}
block|}
end_class

end_unit

