begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HostsFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HostsFileReader
operator|.
name|HostDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNodeUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNodeUpdateEvent
operator|.
name|RMAppNodeUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeDecommissioningEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|NodesListManager
specifier|public
class|class
name|NodesListManager
extends|extends
name|CompositeService
implements|implements
name|EventHandler
argument_list|<
name|NodesListManagerEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodesListManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hostsReader
specifier|private
name|HostsFileReader
name|hostsReader
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
comment|// Default decommissioning timeout value in seconds.
comment|// Negative value indicates no timeout. 0 means immediate.
DECL|field|defaultDecTimeoutSecs
specifier|private
name|int
name|defaultDecTimeoutSecs
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
decl_stmt|;
DECL|field|includesFile
specifier|private
name|String
name|includesFile
decl_stmt|;
DECL|field|excludesFile
specifier|private
name|String
name|excludesFile
decl_stmt|;
DECL|field|resolver
specifier|private
name|Resolver
name|resolver
decl_stmt|;
DECL|field|removalTimer
specifier|private
name|Timer
name|removalTimer
decl_stmt|;
DECL|field|nodeRemovalCheckInterval
specifier|private
name|int
name|nodeRemovalCheckInterval
decl_stmt|;
DECL|method|NodesListManager (RMContext rmContext)
specifier|public
name|NodesListManager
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|NodesListManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|int
name|nodeIpCacheTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeIpCacheTimeout
operator|<=
literal|0
condition|)
block|{
name|resolver
operator|=
operator|new
name|DirectResolver
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resolver
operator|=
operator|new
name|CachedResolver
argument_list|(
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|,
name|nodeIpCacheTimeout
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
comment|// Read the hosts/exclude files to restrict access to the RM
try|try
block|{
name|this
operator|.
name|includesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostsReader
operator|=
name|createHostsFileReader
argument_list|(
name|this
operator|.
name|includesFile
argument_list|,
name|this
operator|.
name|excludesFile
argument_list|)
expr_stmt|;
name|setDecommissionedNMs
argument_list|()
expr_stmt|;
name|printConfiguredHosts
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|disableHostsFileReader
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|disableHostsFileReader
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|nodeRemovalTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|)
decl_stmt|;
name|nodeRemovalCheckInterval
operator|=
operator|(
name|Math
operator|.
name|min
argument_list|(
name|nodeRemovalTimeout
operator|/
literal|2
argument_list|,
literal|600000
argument_list|)
operator|)
expr_stmt|;
name|removalTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Node Removal Timer"
argument_list|)
expr_stmt|;
name|removalTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|now
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isUntrackedNode
argument_list|(
name|rmNode
operator|.
name|getHostName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|rmNode
operator|.
name|getUntrackedTimeStamp
argument_list|()
operator|==
literal|0
condition|)
block|{
name|rmNode
operator|.
name|setUntrackedTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|now
operator|-
name|rmNode
operator|.
name|getUntrackedTimeStamp
argument_list|()
operator|>
name|nodeRemovalTimeout
condition|)
block|{
name|RMNode
name|result
init|=
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|decrInactiveNMMetrics
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed "
operator|+
name|result
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" node "
operator|+
name|result
operator|.
name|getHostName
argument_list|()
operator|+
literal|" from inactive nodes list"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|rmNode
operator|.
name|setUntrackedTimeStamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
name|nodeRemovalCheckInterval
argument_list|,
name|nodeRemovalCheckInterval
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|decrInactiveNMMetrics (RMNode rmNode)
specifier|private
name|void
name|decrInactiveNMMetrics
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|SHUTDOWN
case|:
name|clusterMetrics
operator|.
name|decrNumShutdownNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONED
case|:
name|clusterMetrics
operator|.
name|decrDecommisionedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|LOST
case|:
name|clusterMetrics
operator|.
name|decrNumLostNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|REBOOTED
case|:
name|clusterMetrics
operator|.
name|decrNumRebootedNMs
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected node state"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
name|removalTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
DECL|method|printConfiguredHosts ()
specifier|private
name|void
name|printConfiguredHosts
parameter_list|()
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"hostsReader: in="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
operator|+
literal|" out="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|HostDetails
name|hostDetails
init|=
name|hostsReader
operator|.
name|getHostDetails
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|include
range|:
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"include: "
operator|+
name|include
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|exclude
range|:
name|hostDetails
operator|.
name|getExcludedHosts
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"exclude: "
operator|+
name|exclude
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshNodes (Configuration yarnConf)
specifier|public
name|void
name|refreshNodes
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|refreshNodes
argument_list|(
name|yarnConf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshNodes (Configuration yarnConf, boolean graceful)
specifier|public
name|void
name|refreshNodes
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|,
name|boolean
name|graceful
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|refreshHostsReader
argument_list|(
name|yarnConf
argument_list|,
name|graceful
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshHostsReader ( Configuration yarnConf, boolean graceful, Integer timeout)
specifier|private
name|void
name|refreshHostsReader
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|,
name|boolean
name|graceful
parameter_list|,
name|Integer
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// resolve the default timeout to the decommission timeout that is
comment|// configured at this moment
if|if
condition|(
literal|null
operator|==
name|timeout
condition|)
block|{
name|timeout
operator|=
name|readDecommissioningTimeout
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|yarnConf
condition|)
block|{
name|yarnConf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
block|}
name|includesFile
operator|=
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|excludesFile
operator|=
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"refreshNodes excludesFile "
operator|+
name|excludesFile
argument_list|)
expr_stmt|;
name|hostsReader
operator|.
name|refresh
argument_list|(
name|includesFile
argument_list|,
name|excludesFile
argument_list|)
expr_stmt|;
name|printConfiguredHosts
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hostsReader include:{"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|hostsReader
operator|.
name|getHosts
argument_list|()
argument_list|)
operator|+
literal|"} exclude:{"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|hostsReader
operator|.
name|getExcludedHosts
argument_list|()
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|handleExcludeNodeList
argument_list|(
name|graceful
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setDecommissionedNMs ()
specifier|private
name|void
name|setDecommissionedNMs
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|excludeList
init|=
name|hostsReader
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|host
range|:
name|excludeList
control|)
block|{
name|NodeId
name|nodeId
init|=
name|createUnknownNodeId
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|RMNodeImpl
name|rmNode
init|=
operator|new
name|RMNodeImpl
argument_list|(
name|nodeId
argument_list|,
name|rmContext
argument_list|,
name|host
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|UnknownNode
argument_list|(
name|host
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"unknown"
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nodeId
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle excluded nodes based on following rules:
comment|// Recommission DECOMMISSIONED or DECOMMISSIONING nodes no longer excluded;
comment|// Gracefully decommission excluded nodes that are not already
comment|// DECOMMISSIONED nor DECOMMISSIONING; Take no action for excluded nodes
comment|// that are already DECOMMISSIONED or DECOMMISSIONING.
DECL|method|handleExcludeNodeList (boolean graceful, int timeout)
specifier|private
name|void
name|handleExcludeNodeList
parameter_list|(
name|boolean
name|graceful
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
comment|// DECOMMISSIONED/DECOMMISSIONING nodes need to be re-commissioned.
name|List
argument_list|<
name|RMNode
argument_list|>
name|nodesToRecom
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
comment|// Nodes need to be decommissioned (graceful or forceful);
name|List
argument_list|<
name|RMNode
argument_list|>
name|nodesToDecom
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
name|HostDetails
name|hostDetails
init|=
name|hostsReader
operator|.
name|getHostDetails
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|excludes
init|=
name|hostDetails
operator|.
name|getExcludedMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNode
name|n
range|:
name|this
operator|.
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|NodeState
name|s
init|=
name|n
operator|.
name|getState
argument_list|()
decl_stmt|;
comment|// An invalid node (either due to explicit exclude or not include)
comment|// should be excluded.
name|boolean
name|isExcluded
init|=
operator|!
name|isValidNode
argument_list|(
name|n
operator|.
name|getHostName
argument_list|()
argument_list|,
name|includes
argument_list|,
name|excludes
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeStr
init|=
literal|"node "
operator|+
name|n
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" with state "
operator|+
name|s
decl_stmt|;
if|if
condition|(
operator|!
name|isExcluded
condition|)
block|{
comment|// Note that no action is needed for DECOMMISSIONED node.
if|if
condition|(
name|s
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recommission "
operator|+
name|nodeStr
argument_list|)
expr_stmt|;
name|nodesToRecom
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
comment|// Otherwise no-action needed.
block|}
else|else
block|{
comment|// exclude is true.
if|if
condition|(
name|graceful
condition|)
block|{
comment|// Use per node timeout if exist otherwise the request timeout.
name|Integer
name|timeoutToUse
init|=
operator|(
name|excludes
operator|.
name|get
argument_list|(
name|n
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|excludes
operator|.
name|get
argument_list|(
name|n
operator|.
name|getHostName
argument_list|()
argument_list|)
else|:
name|timeout
decl_stmt|;
if|if
condition|(
name|s
operator|!=
name|NodeState
operator|.
name|DECOMMISSIONED
operator|&&
name|s
operator|!=
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Gracefully decommission "
operator|+
name|nodeStr
argument_list|)
expr_stmt|;
name|nodesToDecom
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getDecommissioningTimeout
argument_list|()
argument_list|,
name|timeoutToUse
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Update "
operator|+
name|nodeStr
operator|+
literal|" timeout to be "
operator|+
name|timeoutToUse
argument_list|)
expr_stmt|;
name|nodesToDecom
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No action for "
operator|+
name|nodeStr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|s
operator|!=
name|NodeState
operator|.
name|DECOMMISSIONED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Forcefully decommission "
operator|+
name|nodeStr
argument_list|)
expr_stmt|;
name|nodesToDecom
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|RMNode
name|n
range|:
name|nodesToRecom
control|)
block|{
name|RMNodeEvent
name|e
init|=
operator|new
name|RMNodeEvent
argument_list|(
name|n
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|RMNodeEventType
operator|.
name|RECOMMISSION
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RMNode
name|n
range|:
name|nodesToDecom
control|)
block|{
name|RMNodeEvent
name|e
decl_stmt|;
if|if
condition|(
name|graceful
condition|)
block|{
name|Integer
name|timeoutToUse
init|=
operator|(
name|excludes
operator|.
name|get
argument_list|(
name|n
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|excludes
operator|.
name|get
argument_list|(
name|n
operator|.
name|getHostName
argument_list|()
argument_list|)
else|:
name|timeout
decl_stmt|;
name|e
operator|=
operator|new
name|RMNodeDecommissioningEvent
argument_list|(
name|n
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|timeoutToUse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RMNodeEventType
name|eventType
init|=
name|isUntrackedNode
argument_list|(
name|n
operator|.
name|getHostName
argument_list|()
argument_list|)
condition|?
name|RMNodeEventType
operator|.
name|SHUTDOWN
else|:
name|RMNodeEventType
operator|.
name|DECOMMISSION
decl_stmt|;
name|e
operator|=
operator|new
name|RMNodeEvent
argument_list|(
name|n
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|updateInactiveNodes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNodeRemovalCheckInterval ()
specifier|public
name|int
name|getNodeRemovalCheckInterval
parameter_list|()
block|{
return|return
name|nodeRemovalCheckInterval
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNodeRemovalCheckInterval (int interval)
specifier|public
name|void
name|setNodeRemovalCheckInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|this
operator|.
name|nodeRemovalCheckInterval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getResolver ()
specifier|public
name|Resolver
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|interface|Resolver
specifier|public
interface|interface
name|Resolver
block|{
comment|// try to resolve hostName to IP address, fallback to hostName if failed
DECL|method|resolve (String hostName)
name|String
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
function_decl|;
block|}
annotation|@
name|VisibleForTesting
DECL|class|DirectResolver
specifier|public
specifier|static
class|class
name|DirectResolver
implements|implements
name|Resolver
block|{
annotation|@
name|Override
DECL|method|resolve (String hostName)
specifier|public
name|String
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|hostName
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|CachedResolver
specifier|public
specifier|static
class|class
name|CachedResolver
extends|extends
name|AbstractService
implements|implements
name|Resolver
block|{
DECL|class|CacheEntry
specifier|private
specifier|static
class|class
name|CacheEntry
block|{
DECL|field|ip
specifier|public
name|String
name|ip
decl_stmt|;
DECL|field|resolveTime
specifier|public
name|long
name|resolveTime
decl_stmt|;
DECL|method|CacheEntry (String ip, long resolveTime)
specifier|public
name|CacheEntry
parameter_list|(
name|String
name|ip
parameter_list|,
name|long
name|resolveTime
parameter_list|)
block|{
name|this
operator|.
name|ip
operator|=
name|ip
expr_stmt|;
name|this
operator|.
name|resolveTime
operator|=
name|resolveTime
expr_stmt|;
block|}
block|}
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|expiryIntervalMs
specifier|private
name|int
name|expiryIntervalMs
decl_stmt|;
DECL|field|checkIntervalMs
specifier|private
name|int
name|checkIntervalMs
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|checkingTimer
specifier|private
name|Timer
name|checkingTimer
decl_stmt|;
DECL|field|expireChecker
specifier|private
name|TimerTask
name|expireChecker
init|=
operator|new
name|ExpireChecker
argument_list|()
decl_stmt|;
DECL|method|CachedResolver (Clock clock, int expiryIntervalSecs)
specifier|public
name|CachedResolver
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|int
name|expiryIntervalSecs
parameter_list|)
block|{
name|super
argument_list|(
literal|"NodesListManager.CachedResolver"
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|expiryIntervalMs
operator|=
name|expiryIntervalSecs
operator|*
literal|1000
expr_stmt|;
name|checkIntervalMs
operator|=
name|expiryIntervalMs
operator|/
literal|3
expr_stmt|;
name|checkingTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Timer-NodesListManager.CachedResolver.ExpireChecker"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|checkingTimer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|expireChecker
argument_list|,
name|checkIntervalMs
argument_list|,
name|checkIntervalMs
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|checkingTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addToCache (String hostName, String ip)
specifier|public
name|void
name|addToCache
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|ip
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
operator|new
name|CacheEntry
argument_list|(
name|ip
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFromCache (String hostName)
specifier|public
name|void
name|removeFromCache
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
DECL|method|reload (String hostName)
specifier|private
name|String
name|reload
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|addToCache
argument_list|(
name|hostName
argument_list|,
name|ip
argument_list|)
expr_stmt|;
return|return
name|ip
return|;
block|}
annotation|@
name|Override
DECL|method|resolve (String hostName)
specifier|public
name|String
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|CacheEntry
name|e
init|=
name|cache
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|e
operator|.
name|ip
return|;
block|}
return|return
name|reload
argument_list|(
name|hostName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getExpireChecker ()
specifier|public
name|TimerTask
name|getExpireChecker
parameter_list|()
block|{
return|return
name|expireChecker
return|;
block|}
DECL|class|ExpireChecker
specifier|private
class|class
name|ExpireChecker
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|currentTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|>
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|resolveTime
operator|+
name|CachedResolver
operator|.
name|this
operator|.
name|expiryIntervalMs
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|ip
operator|+
literal|"] Expired after "
operator|+
name|CachedResolver
operator|.
name|this
operator|.
name|expiryIntervalMs
operator|/
literal|1000
operator|+
literal|" secs"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|isValidNode (String hostName)
specifier|public
name|boolean
name|isValidNode
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|HostDetails
name|hostDetails
init|=
name|hostsReader
operator|.
name|getHostDetails
argument_list|()
decl_stmt|;
return|return
name|isValidNode
argument_list|(
name|hostName
argument_list|,
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
argument_list|,
name|hostDetails
operator|.
name|getExcludedHosts
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isValidNode ( String hostName, Set<String> hostsList, Set<String> excludeList)
specifier|private
name|boolean
name|isValidNode
parameter_list|(
name|String
name|hostName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|hostsList
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excludeList
parameter_list|)
block|{
name|String
name|ip
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
return|return
operator|(
name|hostsList
operator|.
name|isEmpty
argument_list|()
operator|||
name|hostsList
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|||
name|hostsList
operator|.
name|contains
argument_list|(
name|ip
argument_list|)
operator|)
operator|&&
operator|!
operator|(
name|excludeList
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|||
name|excludeList
operator|.
name|contains
argument_list|(
name|ip
argument_list|)
operator|)
return|;
block|}
DECL|method|sendRMAppNodeUpdateEventToNonFinalizedApps ( RMNode eventNode, RMAppNodeUpdateType appNodeUpdateType)
specifier|private
name|void
name|sendRMAppNodeUpdateEventToNonFinalizedApps
parameter_list|(
name|RMNode
name|eventNode
parameter_list|,
name|RMAppNodeUpdateType
name|appNodeUpdateType
parameter_list|)
block|{
for|for
control|(
name|RMApp
name|app
range|:
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|app
operator|.
name|isAppFinalStateStored
argument_list|()
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppNodeUpdateEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|eventNode
argument_list|,
name|appNodeUpdateType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|handle (NodesListManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|NodesListManagerEvent
name|event
parameter_list|)
block|{
name|RMNode
name|eventNode
init|=
name|event
operator|.
name|getNode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_UNUSABLE
case|:
name|LOG
operator|.
name|debug
argument_list|(
name|eventNode
operator|+
literal|" reported unusable"
argument_list|)
expr_stmt|;
name|sendRMAppNodeUpdateEventToNonFinalizedApps
argument_list|(
name|eventNode
argument_list|,
name|RMAppNodeUpdateType
operator|.
name|NODE_UNUSABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_USABLE
case|:
name|LOG
operator|.
name|debug
argument_list|(
name|eventNode
operator|+
literal|" reported usable"
argument_list|)
expr_stmt|;
name|sendRMAppNodeUpdateEventToNonFinalizedApps
argument_list|(
name|eventNode
argument_list|,
name|RMAppNodeUpdateType
operator|.
name|NODE_USABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_DECOMMISSIONING
case|:
name|LOG
operator|.
name|debug
argument_list|(
name|eventNode
operator|+
literal|" reported decommissioning"
argument_list|)
expr_stmt|;
name|sendRMAppNodeUpdateEventToNonFinalizedApps
argument_list|(
name|eventNode
argument_list|,
name|RMAppNodeUpdateType
operator|.
name|NODE_DECOMMISSIONING
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Ignoring invalid eventtype "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove the cache of normalized hostname if enabled
if|if
condition|(
name|resolver
operator|instanceof
name|CachedResolver
condition|)
block|{
operator|(
operator|(
name|CachedResolver
operator|)
name|resolver
operator|)
operator|.
name|removeFromCache
argument_list|(
name|eventNode
operator|.
name|getNodeID
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|disableHostsFileReader (Exception ex)
specifier|private
name|void
name|disableHostsFileReader
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to init hostsReader, disabling"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|includesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostsReader
operator|=
name|createHostsFileReader
argument_list|(
name|this
operator|.
name|includesFile
argument_list|,
name|this
operator|.
name|excludesFile
argument_list|)
expr_stmt|;
name|setDecommissionedNMs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe2
parameter_list|)
block|{
comment|// Should *never* happen
name|this
operator|.
name|hostsReader
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ioe2
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// Should *never* happen
name|this
operator|.
name|hostsReader
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHostsReader ()
specifier|public
name|HostsFileReader
name|getHostsReader
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostsReader
return|;
block|}
DECL|method|createHostsFileReader (String includesFile, String excludesFile)
specifier|private
name|HostsFileReader
name|createHostsFileReader
parameter_list|(
name|String
name|includesFile
parameter_list|,
name|String
name|excludesFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|HostsFileReader
name|hostsReader
init|=
operator|new
name|HostsFileReader
argument_list|(
name|includesFile
argument_list|,
operator|(
name|includesFile
operator|==
literal|null
operator|||
name|includesFile
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|includesFile
argument_list|)
argument_list|,
name|excludesFile
argument_list|,
operator|(
name|excludesFile
operator|==
literal|null
operator|||
name|excludesFile
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|excludesFile
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|hostsReader
return|;
block|}
DECL|method|updateInactiveNodes ()
specifier|private
name|void
name|updateInactiveNodes
parameter_list|()
block|{
name|long
name|now
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isUntrackedNode
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
name|rmNode
operator|.
name|getUntrackedTimeStamp
argument_list|()
operator|==
literal|0
condition|)
block|{
name|rmNode
operator|.
name|setUntrackedTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isUntrackedNode (String hostName)
specifier|public
name|boolean
name|isUntrackedNode
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|String
name|ip
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|HostDetails
name|hostDetails
init|=
name|hostsReader
operator|.
name|getHostDetails
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hostsList
init|=
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeList
init|=
name|hostDetails
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
return|return
operator|!
name|hostsList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|hostsList
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|&&
operator|!
name|hostsList
operator|.
name|contains
argument_list|(
name|ip
argument_list|)
operator|&&
operator|!
name|excludeList
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|&&
operator|!
name|excludeList
operator|.
name|contains
argument_list|(
name|ip
argument_list|)
return|;
block|}
comment|/**    * Refresh the nodes gracefully    *    * @param yarnConf    * @param timeout decommission timeout, null means default timeout.    * @throws IOException    * @throws YarnException    */
DECL|method|refreshNodesGracefully (Configuration yarnConf, Integer timeout)
specifier|public
name|void
name|refreshNodesGracefully
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|,
name|Integer
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|refreshHostsReader
argument_list|(
name|yarnConf
argument_list|,
literal|true
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * It checks for any nodes in decommissioning state    *    * @return decommissioning nodes    */
DECL|method|checkForDecommissioningNodes ()
specifier|public
name|Set
argument_list|<
name|NodeId
argument_list|>
name|checkForDecommissioningNodes
parameter_list|()
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|decommissioningNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|decommissioningNodes
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|decommissioningNodes
return|;
block|}
comment|/**    * Forcefully decommission the nodes if they are in DECOMMISSIONING state    */
DECL|method|refreshNodesForcefully ()
specifier|public
name|void
name|refreshNodesForcefully
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|RMNodeEventType
name|nodeEventType
init|=
name|isUntrackedNode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
condition|?
name|RMNodeEventType
operator|.
name|SHUTDOWN
else|:
name|RMNodeEventType
operator|.
name|DECOMMISSION
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|nodeEventType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Read possible new DECOMMISSIONING_TIMEOUT_KEY from yarn-site.xml.
comment|// This enables NodesListManager to pick up new value without
comment|// ResourceManager restart.
DECL|method|readDecommissioningTimeout (Configuration pConf)
specifier|private
name|int
name|readDecommissioningTimeout
parameter_list|(
name|Configuration
name|pConf
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|pConf
operator|==
literal|null
condition|)
block|{
name|pConf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
block|}
name|int
name|configuredDefaultDecTimeoutSecs
init|=
name|pConf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultDecTimeoutSecs
operator|!=
name|configuredDefaultDecTimeoutSecs
condition|)
block|{
name|defaultDecTimeoutSecs
operator|=
name|configuredDefaultDecTimeoutSecs
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Use new decommissioningTimeoutSecs: "
operator|+
name|defaultDecTimeoutSecs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error readDecommissioningTimeout "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultDecTimeoutSecs
return|;
block|}
comment|/**    * A NodeId instance needed upon startup for populating inactive nodes Map.    * It only knows the hostname/ip and marks the port to -1 or invalid.    */
DECL|method|createUnknownNodeId (String host)
specifier|public
specifier|static
name|NodeId
name|createUnknownNodeId
parameter_list|(
name|String
name|host
parameter_list|)
block|{
return|return
name|NodeId
operator|.
name|newInstance
argument_list|(
name|host
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * A Node instance needed upon startup for populating inactive nodes Map.    * It only knows its hostname/ip.    */
DECL|class|UnknownNode
specifier|private
specifier|static
class|class
name|UnknownNode
implements|implements
name|Node
block|{
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|method|UnknownNode (String host)
specifier|public
name|UnknownNode
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNetworkLocation ()
specifier|public
name|String
name|getNetworkLocation
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setNetworkLocation (String location)
specifier|public
name|void
name|setNetworkLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|host
return|;
block|}
annotation|@
name|Override
DECL|method|getParent ()
specifier|public
name|Node
name|getParent
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setParent (Node parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|getLevel ()
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|setLevel (int i)
specifier|public
name|void
name|setLevel
parameter_list|(
name|int
name|i
parameter_list|)
block|{      }
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String hst)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|hst
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|hst
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

