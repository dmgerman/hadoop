begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HostsFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNodeUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppNodeUpdateEvent
operator|.
name|RMAppNodeUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|NodesListManager
specifier|public
class|class
name|NodesListManager
extends|extends
name|CompositeService
implements|implements
name|EventHandler
argument_list|<
name|NodesListManagerEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodesListManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hostsReader
specifier|private
name|HostsFileReader
name|hostsReader
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|unusableRMNodesConcurrentSet
specifier|private
name|Set
argument_list|<
name|RMNode
argument_list|>
name|unusableRMNodesConcurrentSet
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|RMNode
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|includesFile
specifier|private
name|String
name|includesFile
decl_stmt|;
DECL|field|excludesFile
specifier|private
name|String
name|excludesFile
decl_stmt|;
DECL|field|resolver
specifier|private
name|Resolver
name|resolver
decl_stmt|;
DECL|method|NodesListManager (RMContext rmContext)
specifier|public
name|NodesListManager
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|NodesListManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|int
name|nodeIpCacheTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeIpCacheTimeout
operator|<=
literal|0
condition|)
block|{
name|resolver
operator|=
operator|new
name|DirectResolver
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resolver
operator|=
operator|new
name|CachedResolver
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|nodeIpCacheTimeout
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
comment|// Read the hosts/exclude files to restrict access to the RM
try|try
block|{
name|this
operator|.
name|includesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostsReader
operator|=
name|createHostsFileReader
argument_list|(
name|this
operator|.
name|includesFile
argument_list|,
name|this
operator|.
name|excludesFile
argument_list|)
expr_stmt|;
name|setDecomissionedNMsMetrics
argument_list|()
expr_stmt|;
name|printConfiguredHosts
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|disableHostsFileReader
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|disableHostsFileReader
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|printConfiguredHosts ()
specifier|private
name|void
name|printConfiguredHosts
parameter_list|()
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"hostsReader: in="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
operator|+
literal|" out="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|include
range|:
name|hostsReader
operator|.
name|getHosts
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"include: "
operator|+
name|include
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|exclude
range|:
name|hostsReader
operator|.
name|getExcludedHosts
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"exclude: "
operator|+
name|exclude
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshNodes (Configuration yarnConf)
specifier|public
name|void
name|refreshNodes
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|refreshHostsReader
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isValidNode
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nodeId
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|refreshHostsReader (Configuration yarnConf)
specifier|private
name|void
name|refreshHostsReader
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
synchronized|synchronized
init|(
name|hostsReader
init|)
block|{
if|if
condition|(
literal|null
operator|==
name|yarnConf
condition|)
block|{
name|yarnConf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
block|}
name|includesFile
operator|=
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|excludesFile
operator|=
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|hostsReader
operator|.
name|updateFileNames
argument_list|(
name|includesFile
argument_list|,
name|excludesFile
argument_list|)
expr_stmt|;
name|hostsReader
operator|.
name|refresh
argument_list|(
name|includesFile
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|includesFile
argument_list|)
argument_list|,
name|excludesFile
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|excludesFile
argument_list|)
argument_list|)
expr_stmt|;
name|printConfiguredHosts
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setDecomissionedNMsMetrics ()
specifier|private
name|void
name|setDecomissionedNMsMetrics
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|excludeList
init|=
name|hostsReader
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|setDecommisionedNMs
argument_list|(
name|excludeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getResolver ()
specifier|public
name|Resolver
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|interface|Resolver
specifier|public
interface|interface
name|Resolver
block|{
comment|// try to resolve hostName to IP address, fallback to hostName if failed
DECL|method|resolve (String hostName)
name|String
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
function_decl|;
block|}
annotation|@
name|VisibleForTesting
DECL|class|DirectResolver
specifier|public
specifier|static
class|class
name|DirectResolver
implements|implements
name|Resolver
block|{
annotation|@
name|Override
DECL|method|resolve (String hostName)
specifier|public
name|String
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|hostName
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|CachedResolver
specifier|public
specifier|static
class|class
name|CachedResolver
extends|extends
name|AbstractService
implements|implements
name|Resolver
block|{
DECL|class|CacheEntry
specifier|private
specifier|static
class|class
name|CacheEntry
block|{
DECL|field|ip
specifier|public
name|String
name|ip
decl_stmt|;
DECL|field|resolveTime
specifier|public
name|long
name|resolveTime
decl_stmt|;
DECL|method|CacheEntry (String ip, long resolveTime)
specifier|public
name|CacheEntry
parameter_list|(
name|String
name|ip
parameter_list|,
name|long
name|resolveTime
parameter_list|)
block|{
name|this
operator|.
name|ip
operator|=
name|ip
expr_stmt|;
name|this
operator|.
name|resolveTime
operator|=
name|resolveTime
expr_stmt|;
block|}
block|}
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|expiryIntervalMs
specifier|private
name|int
name|expiryIntervalMs
decl_stmt|;
DECL|field|checkIntervalMs
specifier|private
name|int
name|checkIntervalMs
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|checkingTimer
specifier|private
name|Timer
name|checkingTimer
decl_stmt|;
DECL|field|expireChecker
specifier|private
name|TimerTask
name|expireChecker
init|=
operator|new
name|ExpireChecker
argument_list|()
decl_stmt|;
DECL|method|CachedResolver (Clock clock, int expiryIntervalSecs)
specifier|public
name|CachedResolver
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|int
name|expiryIntervalSecs
parameter_list|)
block|{
name|super
argument_list|(
literal|"NodesListManager.CachedResolver"
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|expiryIntervalMs
operator|=
name|expiryIntervalSecs
operator|*
literal|1000
expr_stmt|;
name|checkIntervalMs
operator|=
name|expiryIntervalMs
operator|/
literal|3
expr_stmt|;
name|checkingTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Timer-NodesListManager.CachedResolver.ExpireChecker"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|checkingTimer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|expireChecker
argument_list|,
name|checkIntervalMs
argument_list|,
name|checkIntervalMs
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|checkingTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addToCache (String hostName, String ip)
specifier|public
name|void
name|addToCache
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|ip
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
operator|new
name|CacheEntry
argument_list|(
name|ip
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFromCache (String hostName)
specifier|public
name|void
name|removeFromCache
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
DECL|method|reload (String hostName)
specifier|private
name|String
name|reload
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|addToCache
argument_list|(
name|hostName
argument_list|,
name|ip
argument_list|)
expr_stmt|;
return|return
name|ip
return|;
block|}
annotation|@
name|Override
DECL|method|resolve (String hostName)
specifier|public
name|String
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|CacheEntry
name|e
init|=
name|cache
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|e
operator|.
name|ip
return|;
block|}
return|return
name|reload
argument_list|(
name|hostName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getExpireChecker ()
specifier|public
name|TimerTask
name|getExpireChecker
parameter_list|()
block|{
return|return
name|expireChecker
return|;
block|}
DECL|class|ExpireChecker
specifier|private
class|class
name|ExpireChecker
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|currentTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|>
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|resolveTime
operator|+
name|CachedResolver
operator|.
name|this
operator|.
name|expiryIntervalMs
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|ip
operator|+
literal|"] Expired after "
operator|+
name|CachedResolver
operator|.
name|this
operator|.
name|expiryIntervalMs
operator|/
literal|1000
operator|+
literal|" secs"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|isValidNode (String hostName)
specifier|public
name|boolean
name|isValidNode
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|String
name|ip
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|hostsReader
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|hostsList
init|=
name|hostsReader
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeList
init|=
name|hostsReader
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
return|return
operator|(
name|hostsList
operator|.
name|isEmpty
argument_list|()
operator|||
name|hostsList
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|||
name|hostsList
operator|.
name|contains
argument_list|(
name|ip
argument_list|)
operator|)
operator|&&
operator|!
operator|(
name|excludeList
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|||
name|excludeList
operator|.
name|contains
argument_list|(
name|ip
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**    * Provides the currently unusable nodes. Copies it into provided collection.    * @param unUsableNodes    *          Collection to which the unusable nodes are added    * @return number of unusable nodes added    */
DECL|method|getUnusableNodes (Collection<RMNode> unUsableNodes)
specifier|public
name|int
name|getUnusableNodes
parameter_list|(
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|unUsableNodes
parameter_list|)
block|{
name|unUsableNodes
operator|.
name|addAll
argument_list|(
name|unusableRMNodesConcurrentSet
argument_list|)
expr_stmt|;
return|return
name|unusableRMNodesConcurrentSet
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|handle (NodesListManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|NodesListManagerEvent
name|event
parameter_list|)
block|{
name|RMNode
name|eventNode
init|=
name|event
operator|.
name|getNode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_UNUSABLE
case|:
name|LOG
operator|.
name|debug
argument_list|(
name|eventNode
operator|+
literal|" reported unusable"
argument_list|)
expr_stmt|;
name|unusableRMNodesConcurrentSet
operator|.
name|add
argument_list|(
name|eventNode
argument_list|)
expr_stmt|;
for|for
control|(
name|RMApp
name|app
range|:
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|app
operator|.
name|isAppFinalStateStored
argument_list|()
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppNodeUpdateEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|eventNode
argument_list|,
name|RMAppNodeUpdateType
operator|.
name|NODE_UNUSABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|NODE_USABLE
case|:
if|if
condition|(
name|unusableRMNodesConcurrentSet
operator|.
name|contains
argument_list|(
name|eventNode
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|eventNode
operator|+
literal|" reported usable"
argument_list|)
expr_stmt|;
name|unusableRMNodesConcurrentSet
operator|.
name|remove
argument_list|(
name|eventNode
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RMApp
name|app
range|:
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|app
operator|.
name|isAppFinalStateStored
argument_list|()
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppNodeUpdateEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|eventNode
argument_list|,
name|RMAppNodeUpdateType
operator|.
name|NODE_USABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Ignoring invalid eventtype "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove the cache of normalized hostname if enabled
if|if
condition|(
name|resolver
operator|instanceof
name|CachedResolver
condition|)
block|{
operator|(
operator|(
name|CachedResolver
operator|)
name|resolver
operator|)
operator|.
name|removeFromCache
argument_list|(
name|eventNode
operator|.
name|getNodeID
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|disableHostsFileReader (Exception ex)
specifier|private
name|void
name|disableHostsFileReader
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to init hostsReader, disabling"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|includesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludesFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostsReader
operator|=
name|createHostsFileReader
argument_list|(
name|this
operator|.
name|includesFile
argument_list|,
name|this
operator|.
name|excludesFile
argument_list|)
expr_stmt|;
name|setDecomissionedNMsMetrics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe2
parameter_list|)
block|{
comment|// Should *never* happen
name|this
operator|.
name|hostsReader
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ioe2
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// Should *never* happen
name|this
operator|.
name|hostsReader
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHostsReader ()
specifier|public
name|HostsFileReader
name|getHostsReader
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostsReader
return|;
block|}
DECL|method|createHostsFileReader (String includesFile, String excludesFile)
specifier|private
name|HostsFileReader
name|createHostsFileReader
parameter_list|(
name|String
name|includesFile
parameter_list|,
name|String
name|excludesFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|HostsFileReader
name|hostsReader
init|=
operator|new
name|HostsFileReader
argument_list|(
name|includesFile
argument_list|,
operator|(
name|includesFile
operator|==
literal|null
operator|||
name|includesFile
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|includesFile
argument_list|)
argument_list|,
name|excludesFile
argument_list|,
operator|(
name|excludesFile
operator|==
literal|null
operator|||
name|excludesFile
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rmContext
operator|.
name|getConfigurationProvider
argument_list|()
operator|.
name|getConfigurationInputStream
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|excludesFile
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|hostsReader
return|;
block|}
comment|/**    * Refresh the nodes gracefully    *    * @param conf    * @throws IOException    * @throws YarnException    */
DECL|method|refreshNodesGracefully (Configuration conf)
specifier|public
name|void
name|refreshNodesGracefully
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|refreshHostsReader
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidNode
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nodeId
argument_list|,
name|RMNodeEventType
operator|.
name|GRACEFUL_DECOMMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Recommissioning the nodes
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nodeId
argument_list|,
name|RMNodeEventType
operator|.
name|RECOMMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * It checks for any nodes in decommissioning state    *    * @return decommissioning nodes    */
DECL|method|checkForDecommissioningNodes ()
specifier|public
name|Set
argument_list|<
name|NodeId
argument_list|>
name|checkForDecommissioningNodes
parameter_list|()
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|decommissioningNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|decommissioningNodes
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|decommissioningNodes
return|;
block|}
comment|/**    * Forcefully decommission the nodes if they are in DECOMMISSIONING state    */
DECL|method|refreshNodesForcefully ()
specifier|public
name|void
name|refreshNodesForcefully
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|entry
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

