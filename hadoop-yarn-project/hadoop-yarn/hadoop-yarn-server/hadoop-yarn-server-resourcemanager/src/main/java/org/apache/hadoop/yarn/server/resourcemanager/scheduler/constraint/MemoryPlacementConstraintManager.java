begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * In memory implementation of the {@link PlacementConstraintManagerService}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MemoryPlacementConstraintManager
specifier|public
class|class
name|MemoryPlacementConstraintManager
extends|extends
name|PlacementConstraintManagerService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MemoryPlacementConstraintManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
comment|/**    * Stores the global constraints that will be manipulated by the cluster    * admin. The key of each entry is the tag that will enable the corresponding    * constraint.    */
DECL|field|globalConstraints
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementConstraint
argument_list|>
name|globalConstraints
decl_stmt|;
comment|/**    * Stores the constraints for each application, along with the allocation tags    * that will enable each of the constraints for a given application.    */
DECL|field|appConstraints
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementConstraint
argument_list|>
argument_list|>
name|appConstraints
decl_stmt|;
DECL|method|MemoryPlacementConstraintManager ()
specifier|public
name|MemoryPlacementConstraintManager
parameter_list|()
block|{
name|this
operator|.
name|globalConstraints
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|appConstraints
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplication (ApplicationId appId, Map<Set<String>, PlacementConstraint> constraintMap)
specifier|public
name|void
name|registerApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
parameter_list|)
block|{
comment|// Check if app already exists. If not, prepare its constraint map.
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintsForApp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|appConstraints
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Application {} has already been registered."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Go over each sourceTag-constraint pair, validate it, and add it to the
comment|// constraint map for this app.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|entry
range|:
name|constraintMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|constraint
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|validateConstraint
argument_list|(
name|sourceTags
argument_list|,
name|constraint
argument_list|)
condition|)
block|{
name|String
name|sourceTag
init|=
name|getValidSourceTag
argument_list|(
name|sourceTags
argument_list|)
decl_stmt|;
name|constraintsForApp
operator|.
name|put
argument_list|(
name|sourceTag
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|constraintsForApp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} was registered, but no constraints were added."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
comment|// Update appConstraints.
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|appConstraints
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|constraintsForApp
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addConstraint (ApplicationId appId, Set<String> sourceTags, PlacementConstraint placementConstraint, boolean replace)
specifier|public
name|void
name|addConstraint
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|,
name|PlacementConstraint
name|placementConstraint
parameter_list|,
name|boolean
name|replace
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintsForApp
init|=
name|appConstraints
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraintsForApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot add constraint to application {}, as it has not "
operator|+
literal|"been registered yet."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return;
block|}
name|addConstraintToMap
argument_list|(
name|constraintsForApp
argument_list|,
name|sourceTags
argument_list|,
name|placementConstraint
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addGlobalConstraint (Set<String> sourceTags, PlacementConstraint placementConstraint, boolean replace)
specifier|public
name|void
name|addGlobalConstraint
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|,
name|PlacementConstraint
name|placementConstraint
parameter_list|,
name|boolean
name|replace
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|addConstraintToMap
argument_list|(
name|globalConstraints
argument_list|,
name|sourceTags
argument_list|,
name|placementConstraint
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method that adds a constraint to a map for a given source tag.    * Assumes there is already a lock on the constraint map.    *    * @param constraintMap constraint map to which the constraint will be added    * @param sourceTags the source tags that will enable this constraint    * @param placementConstraint the new constraint to be added    * @param replace if true, an existing constraint for these sourceTags will be    *          replaced with the new one    */
DECL|method|addConstraintToMap ( Map<String, PlacementConstraint> constraintMap, Set<String> sourceTags, PlacementConstraint placementConstraint, boolean replace)
specifier|private
name|void
name|addConstraintToMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|,
name|PlacementConstraint
name|placementConstraint
parameter_list|,
name|boolean
name|replace
parameter_list|)
block|{
if|if
condition|(
name|validateConstraint
argument_list|(
name|sourceTags
argument_list|,
name|placementConstraint
argument_list|)
condition|)
block|{
name|String
name|sourceTag
init|=
name|getValidSourceTag
argument_list|(
name|sourceTags
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraintMap
operator|.
name|get
argument_list|(
name|sourceTag
argument_list|)
operator|==
literal|null
operator|||
name|replace
condition|)
block|{
if|if
condition|(
name|replace
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replacing the constraint associated with tag {} with {}."
argument_list|,
name|sourceTag
argument_list|,
name|placementConstraint
argument_list|)
expr_stmt|;
block|}
name|constraintMap
operator|.
name|put
argument_list|(
name|sourceTag
argument_list|,
name|placementConstraint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Constraint {} will not be added. There is already a "
operator|+
literal|"constraint associated with tag {}."
argument_list|,
name|placementConstraint
argument_list|,
name|sourceTag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getConstraints ( ApplicationId appId)
specifier|public
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|getConstraints
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|appConstraints
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} is not registered in the Placement "
operator|+
literal|"Constraint Manager."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Copy to a new map and return an unmodifiable version of it.
comment|// Each key of the map is a set with a single source tag.
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
init|=
name|appConstraints
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|Stream
operator|.
name|of
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|constraintMap
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConstraint (ApplicationId appId, Set<String> sourceTags)
specifier|public
name|PlacementConstraint
name|getConstraint
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateSourceTags
argument_list|(
name|sourceTags
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|sourceTag
init|=
name|getValidSourceTag
argument_list|(
name|sourceTags
argument_list|)
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|appConstraints
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} is not registered in the Placement "
operator|+
literal|"Constraint Manager."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// TODO: Merge this constraint with the global one for this tag, if one
comment|// exists.
return|return
name|appConstraints
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|get
argument_list|(
name|sourceTag
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getGlobalConstraint (Set<String> sourceTags)
specifier|public
name|PlacementConstraint
name|getGlobalConstraint
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateSourceTags
argument_list|(
name|sourceTags
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|sourceTag
init|=
name|getValidSourceTag
argument_list|(
name|sourceTags
argument_list|)
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|globalConstraints
operator|.
name|get
argument_list|(
name|sourceTag
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unregisterApplication (ApplicationId appId)
specifier|public
name|void
name|unregisterApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|appConstraints
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeGlobalConstraint (Set<String> sourceTags)
specifier|public
name|void
name|removeGlobalConstraint
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateSourceTags
argument_list|(
name|sourceTags
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|sourceTag
init|=
name|getValidSourceTag
argument_list|(
name|sourceTags
argument_list|)
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|globalConstraints
operator|.
name|remove
argument_list|(
name|sourceTag
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumRegisteredApplications ()
specifier|public
name|int
name|getNumRegisteredApplications
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|appConstraints
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumGlobalConstraints ()
specifier|public
name|int
name|getNumGlobalConstraints
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|globalConstraints
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

