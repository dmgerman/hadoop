begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerExpiredSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_comment
comment|/**  * A scheduler that schedules resources between a set of queues. The scheduler  * keeps track of the resources used by each queue, and attempts to maintain  * fairness by scheduling tasks at queues whose allocations are farthest below  * an ideal fair distribution.  *   * The fair scheduler supports hierarchical queues. All queues descend from a  * queue named "root". Available resources are distributed among the children  * of the root queue in the typical fair scheduling fashion. Then, the children  * distribute the resources assigned to them to their children in the same  * fashion.  Applications may only be scheduled on leaf queues. Queues can be  * specified as children of other queues by placing them as sub-elements of their  * parents in the fair scheduler configuration file.  *   * A queue's name starts with the names of its parents, with periods as  * separators.  So a queue named "queue1" under the root named, would be   * referred to as "root.queue1", and a queue named "queue2" under a queue  * named "parent1" would be referred to as "root.parent1.queue2".  */
end_comment

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
annotation|@
name|Unstable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|FairScheduler
specifier|public
class|class
name|FairScheduler
implements|implements
name|ResourceScheduler
block|{
DECL|field|initialized
specifier|private
name|boolean
name|initialized
decl_stmt|;
DECL|field|conf
specifier|private
name|FairSchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|minimumAllocation
specifier|private
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|maximumAllocation
specifier|private
name|Resource
name|maximumAllocation
decl_stmt|;
DECL|field|queueMgr
specifier|private
name|QueueManager
name|queueMgr
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// How often fair shares are re-calculated (ms)
DECL|field|UPDATE_INTERVAL
specifier|protected
name|long
name|UPDATE_INTERVAL
init|=
literal|500
decl_stmt|;
comment|// Whether to use username in place of "default" queue name
DECL|field|userAsDefaultQueue
specifier|private
specifier|volatile
name|boolean
name|userAsDefaultQueue
init|=
literal|false
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ALLOCATION
specifier|private
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Aggregate metrics
DECL|field|rootMetrics
name|QueueMetrics
name|rootMetrics
decl_stmt|;
comment|// Time when we last updated preemption vars
DECL|field|lastPreemptionUpdateTime
specifier|protected
name|long
name|lastPreemptionUpdateTime
decl_stmt|;
comment|// Time we last ran preemptTasksIfNecessary
DECL|field|lastPreemptCheckTime
specifier|private
name|long
name|lastPreemptCheckTime
decl_stmt|;
comment|// This stores per-application scheduling information, indexed by
comment|// attempt ID's for fast lookup.
DECL|field|applications
specifier|protected
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FSSchedulerApp
argument_list|>
name|applications
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FSSchedulerApp
argument_list|>
argument_list|()
decl_stmt|;
comment|// Nodes in the cluster, indexed by NodeId
DECL|field|nodes
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|FSSchedulerNode
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|FSSchedulerNode
argument_list|>
argument_list|()
decl_stmt|;
comment|// Aggregate capacity of the cluster
DECL|field|clusterCapacity
specifier|private
name|Resource
name|clusterCapacity
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// How often tasks are preempted (must be longer than a couple
comment|// of heartbeats to give task-kill commands a chance to act).
DECL|field|preemptionInterval
specifier|protected
name|long
name|preemptionInterval
init|=
literal|15000
decl_stmt|;
DECL|field|preemptionEnabled
specifier|protected
name|boolean
name|preemptionEnabled
decl_stmt|;
DECL|field|sizeBasedWeight
specifier|protected
name|boolean
name|sizeBasedWeight
decl_stmt|;
comment|// Give larger weights to larger jobs
DECL|field|weightAdjuster
specifier|protected
name|WeightAdjuster
name|weightAdjuster
decl_stmt|;
comment|// Can be null for no weight adjuster
DECL|field|nodeLocalityThreshold
specifier|protected
name|double
name|nodeLocalityThreshold
decl_stmt|;
comment|// Cluster threshold for node locality
DECL|field|rackLocalityThreshold
specifier|protected
name|double
name|rackLocalityThreshold
decl_stmt|;
comment|// Cluster threshold for rack locality
DECL|field|eventLog
specifier|private
name|FairSchedulerEventLog
name|eventLog
decl_stmt|;
comment|// Machine-readable event log
DECL|field|assignMultiple
specifier|protected
name|boolean
name|assignMultiple
decl_stmt|;
comment|// Allocate multiple containers per
comment|// heartbeat
DECL|field|maxAssign
specifier|protected
name|int
name|maxAssign
decl_stmt|;
comment|// Max containers to assign per heartbeat
DECL|method|FairScheduler ()
specifier|public
name|FairScheduler
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|SystemClock
argument_list|()
expr_stmt|;
name|queueMgr
operator|=
operator|new
name|QueueManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|FairSchedulerConfiguration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getQueueManager ()
specifier|public
name|QueueManager
name|getQueueManager
parameter_list|()
block|{
return|return
name|queueMgr
return|;
block|}
DECL|method|getRMContainer (ContainerId containerId)
specifier|private
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|FSSchedulerApp
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|application
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|application
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
comment|/**    * A runnable which calls {@link FairScheduler#update()} every    *<code>UPDATE_INTERVAL</code> milliseconds.    */
DECL|class|UpdateThread
specifier|private
class|class
name|UpdateThread
implements|implements
name|Runnable
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|UPDATE_INTERVAL
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in fair scheduler UpdateThread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Recompute the internal variables used by the scheduler - per-job weights,    * fair shares, deficits, minimum slot allocations, and amount of used and    * required resources per job.    */
DECL|method|update ()
specifier|protected
specifier|synchronized
name|void
name|update
parameter_list|()
block|{
name|queueMgr
operator|.
name|reloadAllocsIfNecessary
argument_list|()
expr_stmt|;
comment|// Relaod alloc file
name|updateRunnability
argument_list|()
expr_stmt|;
comment|// Set job runnability based on user/queue limits
name|updatePreemptionVariables
argument_list|()
expr_stmt|;
comment|// Determine if any queues merit preemption
name|FSQueue
name|rootQueue
init|=
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
comment|// Recursively update demands for all queues
name|rootQueue
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|rootQueue
operator|.
name|setFairShare
argument_list|(
name|clusterCapacity
argument_list|)
expr_stmt|;
comment|// Recursively compute fair shares for all queues
comment|// and update metrics
name|rootQueue
operator|.
name|recomputeFairShares
argument_list|()
expr_stmt|;
comment|// Update recorded capacity of root queue (child queues are updated
comment|// when fair share is calculated).
name|rootMetrics
operator|.
name|setAvailableResourcesToQueue
argument_list|(
name|clusterCapacity
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the preemption fields for all QueueScheduables, i.e. the times since    * each queue last was at its guaranteed share and at> 1/2 of its fair share    * for each type of task.    */
DECL|method|updatePreemptionVariables ()
specifier|private
name|void
name|updatePreemptionVariables
parameter_list|()
block|{
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|lastPreemptionUpdateTime
operator|=
name|now
expr_stmt|;
for|for
control|(
name|FSLeafQueue
name|sched
range|:
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isStarvedForMinShare
argument_list|(
name|sched
argument_list|)
condition|)
block|{
name|sched
operator|.
name|setLastTimeAtMinShare
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isStarvedForFairShare
argument_list|(
name|sched
argument_list|)
condition|)
block|{
name|sched
operator|.
name|setLastTimeAtHalfFairShare
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Is a queue below its min share for the given task type?    */
DECL|method|isStarvedForMinShare (FSLeafQueue sched)
name|boolean
name|isStarvedForMinShare
parameter_list|(
name|FSLeafQueue
name|sched
parameter_list|)
block|{
name|Resource
name|desiredShare
init|=
name|Resources
operator|.
name|min
argument_list|(
name|sched
operator|.
name|getMinShare
argument_list|()
argument_list|,
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|lessThan
argument_list|(
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|,
name|desiredShare
argument_list|)
return|;
block|}
comment|/**    * Is a queue being starved for fair share for the given task type? This is    * defined as being below half its fair share.    */
DECL|method|isStarvedForFairShare (FSLeafQueue sched)
name|boolean
name|isStarvedForFairShare
parameter_list|(
name|FSLeafQueue
name|sched
parameter_list|)
block|{
name|Resource
name|desiredFairShare
init|=
name|Resources
operator|.
name|max
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|sched
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|.5
argument_list|)
argument_list|,
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|lessThan
argument_list|(
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|,
name|desiredFairShare
argument_list|)
return|;
block|}
comment|/**    * Check for queues that need tasks preempted, either because they have been    * below their guaranteed share for minSharePreemptionTimeout or they have    * been below half their fair share for the fairSharePreemptionTimeout. If    * such queues exist, compute how many tasks of each type need to be preempted    * and then select the right ones using preemptTasks.    */
DECL|method|preemptTasksIfNecessary ()
specifier|protected
specifier|synchronized
name|void
name|preemptTasksIfNecessary
parameter_list|()
block|{
if|if
condition|(
operator|!
name|preemptionEnabled
condition|)
block|{
return|return;
block|}
name|long
name|curTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTime
operator|-
name|lastPreemptCheckTime
operator|<
name|preemptionInterval
condition|)
block|{
return|return;
block|}
name|lastPreemptCheckTime
operator|=
name|curTime
expr_stmt|;
name|Resource
name|resToPreempt
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
for|for
control|(
name|FSLeafQueue
name|sched
range|:
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
name|resToPreempt
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|resToPreempt
argument_list|,
name|resToPreempt
argument_list|(
name|sched
argument_list|,
name|curTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resToPreempt
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|preemptResources
argument_list|(
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
argument_list|,
name|resToPreempt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Preempt a quantity of resources from a list of QueueSchedulables. The    * policy for this is to pick apps from queues that are over their fair share,    * but make sure that no queue is placed below its fair share in the process.    * We further prioritize preemption by choosing containers with lowest    * priority to preempt.    */
DECL|method|preemptResources (Collection<FSLeafQueue> scheds, Resource toPreempt)
specifier|protected
name|void
name|preemptResources
parameter_list|(
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|scheds
parameter_list|,
name|Resource
name|toPreempt
parameter_list|)
block|{
if|if
condition|(
name|scheds
operator|.
name|isEmpty
argument_list|()
operator|||
name|Resources
operator|.
name|equals
argument_list|(
name|toPreempt
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|RMContainer
argument_list|,
name|FSSchedulerApp
argument_list|>
name|apps
init|=
operator|new
name|HashMap
argument_list|<
name|RMContainer
argument_list|,
name|FSSchedulerApp
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMContainer
argument_list|,
name|FSLeafQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|RMContainer
argument_list|,
name|FSLeafQueue
argument_list|>
argument_list|()
decl_stmt|;
comment|// Collect running containers from over-scheduled queues
name|List
argument_list|<
name|RMContainer
argument_list|>
name|runningContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FSLeafQueue
name|sched
range|:
name|scheds
control|)
block|{
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|,
name|sched
operator|.
name|getFairShare
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|AppSchedulable
name|as
range|:
name|sched
operator|.
name|getAppSchedulables
argument_list|()
control|)
block|{
for|for
control|(
name|RMContainer
name|c
range|:
name|as
operator|.
name|getApp
argument_list|()
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|runningContainers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|as
operator|.
name|getApp
argument_list|()
argument_list|)
expr_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|sched
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Sort containers into reverse order of priority
name|Collections
operator|.
name|sort
argument_list|(
name|runningContainers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|RMContainer
name|c1
parameter_list|,
name|RMContainer
name|c2
parameter_list|)
block|{
return|return
name|c2
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c1
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Scan down the sorted list of task statuses until we've killed enough
comment|// tasks, making sure we don't kill too many from any queue
for|for
control|(
name|RMContainer
name|container
range|:
name|runningContainers
control|)
block|{
name|FSLeafQueue
name|sched
init|=
name|queues
operator|.
name|get
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|,
name|sched
operator|.
name|getFairShare
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preempting container (prio="
operator|+
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|+
literal|"res="
operator|+
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|+
literal|") from queue "
operator|+
name|sched
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerStatus
name|status
init|=
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|PREEMPTED_CONTAINER
argument_list|)
decl_stmt|;
comment|// TODO: Not sure if this ever actually adds this to the list of cleanup
comment|// containers on the RMNode (see SchedulerNode.releaseContainer()).
name|completedContainer
argument_list|(
name|container
argument_list|,
name|status
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|toPreempt
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|toPreempt
argument_list|,
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|toPreempt
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Return the resource amount that this queue is allowed to preempt, if any.    * If the queue has been below its min share for at least its preemption    * timeout, it should preempt the difference between its current share and    * this min share. If it has been below half its fair share for at least the    * fairSharePreemptionTimeout, it should preempt enough tasks to get up to its    * full fair share. If both conditions hold, we preempt the max of the two    * amounts (this shouldn't happen unless someone sets the timeouts to be    * identical for some reason).    */
DECL|method|resToPreempt (FSLeafQueue sched, long curTime)
specifier|protected
name|Resource
name|resToPreempt
parameter_list|(
name|FSLeafQueue
name|sched
parameter_list|,
name|long
name|curTime
parameter_list|)
block|{
name|String
name|queue
init|=
name|sched
operator|.
name|getName
argument_list|()
decl_stmt|;
name|long
name|minShareTimeout
init|=
name|queueMgr
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|long
name|fairShareTimeout
init|=
name|queueMgr
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
decl_stmt|;
name|Resource
name|resDueToMinShare
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
name|Resource
name|resDueToFairShare
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTime
operator|-
name|sched
operator|.
name|getLastTimeAtMinShare
argument_list|()
operator|>
name|minShareTimeout
condition|)
block|{
name|Resource
name|target
init|=
name|Resources
operator|.
name|min
argument_list|(
name|sched
operator|.
name|getMinShare
argument_list|()
argument_list|,
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
name|resDueToMinShare
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|target
argument_list|,
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curTime
operator|-
name|sched
operator|.
name|getLastTimeAtHalfFairShare
argument_list|()
operator|>
name|fairShareTimeout
condition|)
block|{
name|Resource
name|target
init|=
name|Resources
operator|.
name|min
argument_list|(
name|sched
operator|.
name|getFairShare
argument_list|()
argument_list|,
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
name|resDueToFairShare
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|target
argument_list|,
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resource
name|resToPreempt
init|=
name|Resources
operator|.
name|max
argument_list|(
name|resDueToMinShare
argument_list|,
name|resDueToFairShare
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resToPreempt
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Should preempt "
operator|+
name|resToPreempt
operator|+
literal|" res for queue "
operator|+
name|sched
operator|.
name|getName
argument_list|()
operator|+
literal|": resDueToMinShare = "
operator|+
name|resDueToMinShare
operator|+
literal|", resDueToFairShare = "
operator|+
name|resDueToFairShare
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|resToPreempt
return|;
block|}
comment|/**    * This updates the runnability of all apps based on whether or not any    * users/queues have exceeded their capacity.    */
DECL|method|updateRunnability ()
specifier|private
name|void
name|updateRunnability
parameter_list|()
block|{
name|List
argument_list|<
name|AppSchedulable
argument_list|>
name|apps
init|=
operator|new
name|ArrayList
argument_list|<
name|AppSchedulable
argument_list|>
argument_list|()
decl_stmt|;
comment|// Start by marking everything as not runnable
for|for
control|(
name|FSLeafQueue
name|leafQueue
range|:
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
for|for
control|(
name|AppSchedulable
name|a
range|:
name|leafQueue
operator|.
name|getAppSchedulables
argument_list|()
control|)
block|{
name|a
operator|.
name|setRunnable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create a list of sorted jobs in order of start time and priority
name|Collections
operator|.
name|sort
argument_list|(
name|apps
argument_list|,
operator|new
name|FifoAppComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mark jobs as runnable in order of start time and priority, until
comment|// user or queue limits have been reached.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AppSchedulable
name|app
range|:
name|apps
control|)
block|{
name|String
name|user
init|=
name|app
operator|.
name|getApp
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|app
operator|.
name|getApp
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|int
name|userCount
init|=
name|userApps
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|?
name|userApps
operator|.
name|get
argument_list|(
name|user
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|queueCount
init|=
name|queueApps
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|?
name|queueApps
operator|.
name|get
argument_list|(
name|queue
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|userCount
operator|<
name|queueMgr
operator|.
name|getUserMaxApps
argument_list|(
name|user
argument_list|)
operator|&&
name|queueCount
operator|<
name|queueMgr
operator|.
name|getQueueMaxApps
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|userApps
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|userCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|queueApps
operator|.
name|put
argument_list|(
name|queue
argument_list|,
name|queueCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|app
operator|.
name|setRunnable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getContainerTokenSecretManager ()
specifier|public
name|RMContainerTokenSecretManager
name|getContainerTokenSecretManager
parameter_list|()
block|{
return|return
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
return|;
block|}
comment|// synchronized for sizeBasedWeight
DECL|method|getAppWeight (AppSchedulable app)
specifier|public
specifier|synchronized
name|double
name|getAppWeight
parameter_list|(
name|AppSchedulable
name|app
parameter_list|)
block|{
if|if
condition|(
operator|!
name|app
operator|.
name|getRunnable
argument_list|()
condition|)
block|{
comment|// Job won't launch tasks, but don't return 0 to avoid division errors
return|return
literal|1.0
return|;
block|}
else|else
block|{
name|double
name|weight
init|=
literal|1.0
decl_stmt|;
if|if
condition|(
name|sizeBasedWeight
condition|)
block|{
comment|// Set weight based on current demand
name|weight
operator|=
name|Math
operator|.
name|log1p
argument_list|(
name|app
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|weight
operator|*=
name|app
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
if|if
condition|(
name|weightAdjuster
operator|!=
literal|null
condition|)
block|{
comment|// Run weight through the user-supplied weightAdjuster
name|weight
operator|=
name|weightAdjuster
operator|.
name|adjustWeight
argument_list|(
name|app
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
return|return
name|weight
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMinimumResourceCapability ()
specifier|public
name|Resource
name|getMinimumResourceCapability
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability ()
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|()
block|{
return|return
name|maximumAllocation
return|;
block|}
DECL|method|getNodeLocalityThreshold ()
specifier|public
name|double
name|getNodeLocalityThreshold
parameter_list|()
block|{
return|return
name|nodeLocalityThreshold
return|;
block|}
DECL|method|getRackLocalityThreshold ()
specifier|public
name|double
name|getRackLocalityThreshold
parameter_list|()
block|{
return|return
name|rackLocalityThreshold
return|;
block|}
DECL|method|getClusterCapacity ()
specifier|public
name|Resource
name|getClusterCapacity
parameter_list|()
block|{
return|return
name|clusterCapacity
return|;
block|}
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
DECL|method|setClock (Clock clock)
specifier|protected
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
DECL|method|getEventLog ()
specifier|public
name|FairSchedulerEventLog
name|getEventLog
parameter_list|()
block|{
return|return
name|eventLog
return|;
block|}
comment|/**    * Add a new application to the scheduler, with a given id, queue name, and    * user. This will accept a new app even if the user or queue is above    * configured limits, but the app will not be marked as runnable.    */
DECL|method|addApplication ( ApplicationAttemptId applicationAttemptId, String queueName, String user)
specifier|protected
specifier|synchronized
name|void
name|addApplication
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|FSLeafQueue
name|queue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
comment|// queue is not an existing or createable leaf queue
name|queue
operator|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
name|FSSchedulerApp
name|schedulerApp
init|=
operator|new
name|FSSchedulerApp
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
operator|new
name|ActiveUsersManager
argument_list|(
name|getRootQueueMetrics
argument_list|()
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Enforce ACLs
name|UserGroupInformation
name|userUgi
decl_stmt|;
try|try
block|{
name|userUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to get current user information"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Always a singleton list
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|info
init|=
name|queue
operator|.
name|getQueueUserAclInfo
argument_list|(
name|userUgi
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUserAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User "
operator|+
name|userUgi
operator|.
name|getUserName
argument_list|()
operator|+
literal|" cannot submit"
operator|+
literal|" applications to queue "
operator|+
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|queue
operator|.
name|addApp
argument_list|(
name|schedulerApp
argument_list|)
expr_stmt|;
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|submitApp
argument_list|(
name|user
argument_list|,
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|rootMetrics
operator|.
name|submitApp
argument_list|(
name|user
argument_list|,
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|applications
operator|.
name|put
argument_list|(
name|applicationAttemptId
argument_list|,
name|schedulerApp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application Submission: "
operator|+
name|applicationAttemptId
operator|+
literal|", user: "
operator|+
name|user
operator|+
literal|", currently active: "
operator|+
name|applications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeApplication ( ApplicationAttemptId applicationAttemptId, RMAppAttemptState rmAppAttemptFinalState)
specifier|private
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationAttemptId
operator|+
literal|" is done."
operator|+
literal|" finalState="
operator|+
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
name|FSSchedulerApp
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|applicationAttemptId
operator|+
literal|" has completed!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Release all the running containers
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|application
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|COMPLETED_APPLICATION
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Release all reserved containers
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|application
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|"Application Complete"
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Clean up pending requests, metrics etc.
name|application
operator|.
name|stop
argument_list|(
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
comment|// Inform the queue
name|FSLeafQueue
name|queue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|application
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|removeApp
argument_list|(
name|application
argument_list|)
expr_stmt|;
comment|// Remove from our data-structure
name|applications
operator|.
name|remove
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clean up a completed container.    */
DECL|method|completedContainer (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|private
specifier|synchronized
name|void
name|completedContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Null container completed..."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// Get the application for the finished container
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|FSSchedulerApp
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|container
operator|+
literal|" of"
operator|+
literal|" unknown application "
operator|+
name|applicationAttemptId
operator|+
literal|" completed with event "
operator|+
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get the node on which the container was allocated
name|FSSchedulerNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RESERVED
condition|)
block|{
name|application
operator|.
name|unreserve
argument_list|(
name|node
argument_list|,
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|unreserveResource
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|application
operator|.
name|containerCompleted
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|node
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationAttemptId
operator|+
literal|" released container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|node
operator|+
literal|" with event: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|addNode (RMNode node)
specifier|private
specifier|synchronized
name|void
name|addNode
parameter_list|(
name|RMNode
name|node
parameter_list|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterCapacity
argument_list|,
name|node
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added node "
operator|+
name|node
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" cluster capacity: "
operator|+
name|clusterCapacity
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNode (RMNode rmNode)
specifier|private
specifier|synchronized
name|void
name|removeNode
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
name|FSSchedulerNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|clusterCapacity
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove running containers
name|List
argument_list|<
name|RMContainer
argument_list|>
name|runningContainers
init|=
name|node
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|runningContainers
control|)
block|{
name|completedContainer
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Remove reservations, if any
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|completedContainer
argument_list|(
name|reservedContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|reservedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|remove
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed node "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" cluster capacity: "
operator|+
name|clusterCapacity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId appAttemptId, List<ResourceRequest> ask, List<ContainerId> release)
specifier|public
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|)
block|{
comment|// Make sure this application exists
name|FSSchedulerApp
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling allocate on removed "
operator|+
literal|"or non existant application "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
name|EMPTY_ALLOCATION
return|;
block|}
comment|// Sanity check
name|SchedulerUtils
operator|.
name|normalizeRequests
argument_list|(
name|ask
argument_list|,
name|minimumAllocation
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release containers
for|for
control|(
name|ContainerId
name|releasedContainerId
range|:
name|release
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|releasedContainerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"FairScheduler"
argument_list|,
literal|"Trying to release container not owned by app or with invalid id"
argument_list|,
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|releasedContainerId
argument_list|)
expr_stmt|;
block|}
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|releasedContainerId
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|application
init|)
block|{
if|if
condition|(
operator|!
name|ask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: pre-update"
operator|+
literal|" applicationAttemptId="
operator|+
name|appAttemptId
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
comment|// Update application requests
name|application
operator|.
name|updateResourceRequests
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: post-update"
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate:"
operator|+
literal|" applicationAttemptId="
operator|+
name|appAttemptId
operator|+
literal|" #ask="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Allocation
argument_list|(
name|application
operator|.
name|pullNewlyAllocatedContainers
argument_list|()
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Process a container which has launched on a node, as reported by the node.    */
DECL|method|containerLaunchedOnNode (ContainerId containerId, FSSchedulerNode node)
specifier|private
name|void
name|containerLaunchedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|)
block|{
comment|// Get the application for the finished container
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|FSSchedulerApp
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application: "
operator|+
name|applicationAttemptId
operator|+
literal|" launched container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
name|application
operator|.
name|containerLaunchedOnNode
argument_list|(
name|containerId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process a heartbeat update from a node.    */
DECL|method|nodeUpdate (RMNode nm, List<ContainerStatus> newlyLaunchedContainers, List<ContainerStatus> completedContainers)
specifier|private
specifier|synchronized
name|void
name|nodeUpdate
parameter_list|(
name|RMNode
name|nm
parameter_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
parameter_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"nodeUpdate: "
operator|+
name|nm
operator|+
literal|" cluster capacity: "
operator|+
name|clusterCapacity
argument_list|)
expr_stmt|;
block|}
name|eventLog
operator|.
name|log
argument_list|(
literal|"HEARTBEAT"
argument_list|,
name|nm
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|FSSchedulerNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Processing the newly launched containers
for|for
control|(
name|ContainerStatus
name|launchedContainer
range|:
name|newlyLaunchedContainers
control|)
block|{
name|containerLaunchedOnNode
argument_list|(
name|launchedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Process completed containers
for|for
control|(
name|ContainerStatus
name|completedContainer
range|:
name|completedContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|completedContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container FINISHED: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|completedContainer
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|completedContainer
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
comment|// Assign new containers...
comment|// 1. Check for reserved applications
comment|// 2. Schedule if there are no reservations
comment|// If we have have an application that has reserved a resource on this node
comment|// already, we try to complete the reservation.
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|FSSchedulerApp
name|reservedApplication
init|=
name|applications
operator|.
name|get
argument_list|(
name|reservedContainer
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Try to fulfill the reservation
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to fulfill reservation for application "
operator|+
name|reservedApplication
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|nm
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|reservedApplication
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|assignContainer
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Otherwise, schedule at queue which is furthest below fair share
else|else
block|{
name|int
name|assignedContainers
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// At most one task is scheduled each iteration of this loop
name|List
argument_list|<
name|FSLeafQueue
argument_list|>
name|scheds
init|=
operator|new
name|ArrayList
argument_list|<
name|FSLeafQueue
argument_list|>
argument_list|(
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|scheds
argument_list|,
operator|new
name|SchedulingAlgorithms
operator|.
name|FairShareComparator
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|assignedContainer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FSLeafQueue
name|sched
range|:
name|scheds
control|)
block|{
name|Resource
name|assigned
init|=
name|sched
operator|.
name|assignContainer
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|eventLog
operator|.
name|log
argument_list|(
literal|"ASSIGN"
argument_list|,
name|nm
operator|.
name|getHostName
argument_list|()
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|assignedContainers
operator|++
expr_stmt|;
name|assignedContainer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|assignedContainer
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|assignMultiple
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|(
name|assignedContainers
operator|>=
name|maxAssign
operator|)
operator|&&
operator|(
name|maxAssign
operator|>
literal|0
operator|)
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|FSSchedulerNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerNodeReport
argument_list|(
name|node
argument_list|)
return|;
block|}
DECL|method|getSchedulerApp (ApplicationAttemptId appAttemptId)
specifier|public
name|FSSchedulerApp
name|getSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
return|return
name|applications
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerAppInfo ( ApplicationAttemptId appAttemptId)
specifier|public
name|SchedulerAppReport
name|getSchedulerAppInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|applications
operator|.
name|containsKey
argument_list|(
name|appAttemptId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Request for appInfo of unknown attempt"
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SchedulerAppReport
argument_list|(
name|applications
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueueMetrics ()
specifier|public
name|QueueMetrics
name|getRootQueueMetrics
parameter_list|()
block|{
return|return
name|rootMetrics
return|;
block|}
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_ADDED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeAddedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeAddedSchedulerEvent
name|nodeAddedEvent
init|=
operator|(
name|NodeAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addNode
argument_list|(
name|nodeAddedEvent
operator|.
name|getAddedRMNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_REMOVED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeRemovedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeRemovedSchedulerEvent
name|nodeRemovedEvent
init|=
operator|(
name|NodeRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeNode
argument_list|(
name|nodeRemovedEvent
operator|.
name|getRemovedRMNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_UPDATE
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeUpdateSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeUpdateSchedulerEvent
name|nodeUpdatedEvent
init|=
operator|(
name|NodeUpdateSchedulerEvent
operator|)
name|event
decl_stmt|;
name|nodeUpdate
argument_list|(
name|nodeUpdatedEvent
operator|.
name|getRMNode
argument_list|()
argument_list|,
name|nodeUpdatedEvent
operator|.
name|getNewlyLaunchedContainers
argument_list|()
argument_list|,
name|nodeUpdatedEvent
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ADDED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AppAddedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|(
name|AppAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|String
name|queue
init|=
name|appAddedEvent
operator|.
name|getQueue
argument_list|()
decl_stmt|;
comment|// Potentially set queue to username if configured to do so
name|String
name|def
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|equals
argument_list|(
name|def
argument_list|)
operator|&&
name|userAsDefaultQueue
condition|)
block|{
name|queue
operator|=
name|appAddedEvent
operator|.
name|getUser
argument_list|()
expr_stmt|;
block|}
name|addApplication
argument_list|(
name|appAddedEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|queue
argument_list|,
name|appAddedEvent
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_REMOVED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AppRemovedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|AppRemovedSchedulerEvent
name|appRemovedEvent
init|=
operator|(
name|AppRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeApplication
argument_list|(
name|appRemovedEvent
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|,
name|appRemovedEvent
operator|.
name|getFinalAttemptState
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_EXPIRED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|ContainerExpiredSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|ContainerExpiredSchedulerEvent
name|containerExpiredEvent
init|=
operator|(
name|ContainerExpiredSchedulerEvent
operator|)
name|event
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|containerExpiredEvent
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|completedContainer
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerId
argument_list|,
name|SchedulerUtils
operator|.
name|EXPIRED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown event arrived at FairScheduler: "
operator|+
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOT IMPLEMENTED
block|}
annotation|@
name|Override
DECL|method|reinitialize (Configuration conf, RMContext rmContext)
specifier|public
specifier|synchronized
name|void
name|reinitialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|FairSchedulerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rootMetrics
operator|=
name|QueueMetrics
operator|.
name|forQueue
argument_list|(
literal|"root"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|eventLog
operator|=
operator|new
name|FairSchedulerEventLog
argument_list|()
expr_stmt|;
name|eventLog
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|minimumAllocation
operator|=
name|this
operator|.
name|conf
operator|.
name|getMinimumMemoryAllocation
argument_list|()
expr_stmt|;
name|maximumAllocation
operator|=
name|this
operator|.
name|conf
operator|.
name|getMaximumMemoryAllocation
argument_list|()
expr_stmt|;
name|userAsDefaultQueue
operator|=
name|this
operator|.
name|conf
operator|.
name|getUserAsDefaultQueue
argument_list|()
expr_stmt|;
name|nodeLocalityThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityThresholdNode
argument_list|()
expr_stmt|;
name|rackLocalityThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityThresholdRack
argument_list|()
expr_stmt|;
name|preemptionEnabled
operator|=
name|this
operator|.
name|conf
operator|.
name|getPreemptionEnabled
argument_list|()
expr_stmt|;
name|assignMultiple
operator|=
name|this
operator|.
name|conf
operator|.
name|getAssignMultiple
argument_list|()
expr_stmt|;
name|maxAssign
operator|=
name|this
operator|.
name|conf
operator|.
name|getMaxAssign
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|sizeBasedWeight
operator|=
name|this
operator|.
name|conf
operator|.
name|getSizeBasedWeight
argument_list|()
expr_stmt|;
try|try
block|{
name|queueMgr
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to start FairScheduler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Thread
name|updateThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|UpdateThread
argument_list|()
argument_list|)
decl_stmt|;
name|updateThread
operator|.
name|setName
argument_list|(
literal|"FairSchedulerUpdateThread"
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|FairSchedulerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|userAsDefaultQueue
operator|=
name|this
operator|.
name|conf
operator|.
name|getUserAsDefaultQueue
argument_list|()
expr_stmt|;
name|nodeLocalityThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityThresholdNode
argument_list|()
expr_stmt|;
name|rackLocalityThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityThresholdRack
argument_list|()
expr_stmt|;
name|preemptionEnabled
operator|=
name|this
operator|.
name|conf
operator|.
name|getPreemptionEnabled
argument_list|()
expr_stmt|;
try|try
block|{
name|queueMgr
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize FairScheduler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (String queueName, boolean includeChildQueues, boolean recursive)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|queueMgr
operator|.
name|exists
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
operator|.
name|getQueueInfo
argument_list|(
name|includeChildQueues
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAclInfo ()
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|()
block|{
name|UserGroupInformation
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|QueueUserACLInfo
argument_list|>
argument_list|()
return|;
block|}
return|return
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumClusterNodes ()
specifier|public
name|int
name|getNumClusterNodes
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

