begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeResourceUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|UpdatedContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedContainerChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerExpiredSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeResourceUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A scheduler that schedules resources between a set of queues. The scheduler  * keeps track of the resources used by each queue, and attempts to maintain  * fairness by scheduling tasks at queues whose allocations are farthest below  * an ideal fair distribution.  *   * The fair scheduler supports hierarchical queues. All queues descend from a  * queue named "root". Available resources are distributed among the children  * of the root queue in the typical fair scheduling fashion. Then, the children  * distribute the resources assigned to them to their children in the same  * fashion.  Applications may only be scheduled on leaf queues. Queues can be  * specified as children of other queues by placing them as sub-elements of  * their parents in the fair scheduler configuration file.  *  * A queue's name starts with the names of its parents, with periods as  * separators.  So a queue named "queue1" under the root named, would be   * referred to as "root.queue1", and a queue named "queue2" under a queue  * named "parent1" would be referred to as "root.parent1.queue2".  */
end_comment

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
annotation|@
name|Unstable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|FairScheduler
specifier|public
class|class
name|FairScheduler
extends|extends
name|AbstractYarnScheduler
argument_list|<
name|FSAppAttempt
argument_list|,
name|FSSchedulerNode
argument_list|>
block|{
DECL|field|conf
specifier|private
name|FairSchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|incrAllocation
specifier|private
name|Resource
name|incrAllocation
decl_stmt|;
DECL|field|queueMgr
specifier|private
name|QueueManager
name|queueMgr
decl_stmt|;
DECL|field|clock
specifier|private
specifier|volatile
name|Clock
name|clock
decl_stmt|;
DECL|field|usePortForNodeName
specifier|private
name|boolean
name|usePortForNodeName
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RESOURCE_CALCULATOR
specifier|private
specifier|static
specifier|final
name|ResourceCalculator
name|RESOURCE_CALCULATOR
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|DOMINANT_RESOURCE_CALCULATOR
specifier|private
specifier|static
specifier|final
name|ResourceCalculator
name|DOMINANT_RESOURCE_CALCULATOR
init|=
operator|new
name|DominantResourceCalculator
argument_list|()
decl_stmt|;
comment|// Value that container assignment methods return when a container is
comment|// reserved
DECL|field|CONTAINER_RESERVED
specifier|public
specifier|static
specifier|final
name|Resource
name|CONTAINER_RESERVED
init|=
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// How often fair shares are re-calculated (ms)
DECL|field|updateInterval
specifier|protected
name|long
name|updateInterval
decl_stmt|;
DECL|field|UPDATE_DEBUG_FREQUENCY
specifier|private
specifier|final
name|int
name|UPDATE_DEBUG_FREQUENCY
init|=
literal|5
decl_stmt|;
DECL|field|updatesToSkipForDebug
specifier|private
name|int
name|updatesToSkipForDebug
init|=
name|UPDATE_DEBUG_FREQUENCY
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|updateThread
name|Thread
name|updateThread
decl_stmt|;
DECL|field|updateThreadMonitor
specifier|private
specifier|final
name|Object
name|updateThreadMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|schedulingThread
name|Thread
name|schedulingThread
decl_stmt|;
comment|// timeout to join when we stop this service
DECL|field|THREAD_JOIN_TIMEOUT_MS
specifier|protected
specifier|final
name|long
name|THREAD_JOIN_TIMEOUT_MS
init|=
literal|1000
decl_stmt|;
comment|// Aggregate metrics
DECL|field|rootMetrics
name|FSQueueMetrics
name|rootMetrics
decl_stmt|;
DECL|field|fsOpDurations
name|FSOpDurations
name|fsOpDurations
decl_stmt|;
comment|// Time when we last updated preemption vars
DECL|field|lastPreemptionUpdateTime
specifier|protected
name|long
name|lastPreemptionUpdateTime
decl_stmt|;
comment|// Time we last ran preemptTasksIfNecessary
DECL|field|lastPreemptCheckTime
specifier|private
name|long
name|lastPreemptCheckTime
decl_stmt|;
comment|// Preemption related variables
DECL|field|preemptionEnabled
specifier|protected
name|boolean
name|preemptionEnabled
decl_stmt|;
DECL|field|preemptionUtilizationThreshold
specifier|protected
name|float
name|preemptionUtilizationThreshold
decl_stmt|;
comment|// How often tasks are preempted
DECL|field|preemptionInterval
specifier|protected
name|long
name|preemptionInterval
decl_stmt|;
comment|// ms to wait before force killing stuff (must be longer than a couple
comment|// of heartbeats to give task-kill commands a chance to act).
DECL|field|waitTimeBeforeKill
specifier|protected
name|long
name|waitTimeBeforeKill
decl_stmt|;
comment|// Containers whose AMs have been warned that they will be preempted soon.
DECL|field|warnedContainers
specifier|private
name|List
argument_list|<
name|RMContainer
argument_list|>
name|warnedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reservableNodesRatio
specifier|private
name|float
name|reservableNodesRatio
decl_stmt|;
comment|// percentage of available nodes
comment|// an app can be reserved on
DECL|field|sizeBasedWeight
specifier|protected
name|boolean
name|sizeBasedWeight
decl_stmt|;
comment|// Give larger weights to larger jobs
comment|// Continuous Scheduling enabled or not
DECL|field|continuousSchedulingEnabled
specifier|protected
name|boolean
name|continuousSchedulingEnabled
decl_stmt|;
comment|// Sleep time for each pass in continuous scheduling
DECL|field|continuousSchedulingSleepMs
specifier|protected
specifier|volatile
name|int
name|continuousSchedulingSleepMs
decl_stmt|;
comment|// Node available resource comparator
DECL|field|nodeAvailableResourceComparator
specifier|private
name|Comparator
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodeAvailableResourceComparator
init|=
operator|new
name|NodeAvailableResourceComparator
argument_list|()
decl_stmt|;
DECL|field|nodeLocalityThreshold
specifier|protected
name|double
name|nodeLocalityThreshold
decl_stmt|;
comment|// Cluster threshold for node locality
DECL|field|rackLocalityThreshold
specifier|protected
name|double
name|rackLocalityThreshold
decl_stmt|;
comment|// Cluster threshold for rack locality
DECL|field|nodeLocalityDelayMs
specifier|protected
name|long
name|nodeLocalityDelayMs
decl_stmt|;
comment|// Delay for node locality
DECL|field|rackLocalityDelayMs
specifier|protected
name|long
name|rackLocalityDelayMs
decl_stmt|;
comment|// Delay for rack locality
DECL|field|eventLog
specifier|private
name|FairSchedulerEventLog
name|eventLog
decl_stmt|;
comment|// Machine-readable event log
DECL|field|assignMultiple
specifier|protected
name|boolean
name|assignMultiple
decl_stmt|;
comment|// Allocate multiple containers per
comment|// heartbeat
annotation|@
name|VisibleForTesting
DECL|field|maxAssignDynamic
name|boolean
name|maxAssignDynamic
decl_stmt|;
DECL|field|maxAssign
specifier|protected
name|int
name|maxAssign
decl_stmt|;
comment|// Max containers to assign per heartbeat
annotation|@
name|VisibleForTesting
DECL|field|maxRunningEnforcer
specifier|final
name|MaxRunningAppsEnforcer
name|maxRunningEnforcer
decl_stmt|;
DECL|field|allocsLoader
specifier|private
name|AllocationFileLoaderService
name|allocsLoader
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|allocConf
name|AllocationConfiguration
name|allocConf
decl_stmt|;
comment|// Container size threshold for making a reservation.
annotation|@
name|VisibleForTesting
DECL|field|reservationThreshold
name|Resource
name|reservationThreshold
decl_stmt|;
DECL|method|FairScheduler ()
specifier|public
name|FairScheduler
parameter_list|()
block|{
name|super
argument_list|(
name|FairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|allocsLoader
operator|=
operator|new
name|AllocationFileLoaderService
argument_list|()
expr_stmt|;
name|queueMgr
operator|=
operator|new
name|QueueManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|maxRunningEnforcer
operator|=
operator|new
name|MaxRunningAppsEnforcer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|isAtLeastReservationThreshold ( ResourceCalculator resourceCalculator, Resource resource)
specifier|public
name|boolean
name|isAtLeastReservationThreshold
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|getClusterResource
argument_list|()
argument_list|,
name|resource
argument_list|,
name|reservationThreshold
argument_list|)
return|;
block|}
DECL|method|validateConf (Configuration conf)
specifier|private
name|void
name|validateConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// validate scheduler memory allocation setting
name|int
name|minMem
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|int
name|maxMem
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
if|if
condition|(
name|minMem
argument_list|<
literal|0
operator|||
name|minMem
argument_list|>
name|maxMem
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid resource scheduler memory"
operator|+
literal|" allocation configuration: "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|minMem
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
operator|+
literal|"="
operator|+
name|maxMem
operator|+
literal|".  Both values must be greater than or equal to 0"
operator|+
literal|"and the maximum allocation value must be greater than or equal to"
operator|+
literal|"the minimum allocation value."
argument_list|)
throw|;
block|}
comment|// validate scheduler vcores allocation setting
name|int
name|minVcores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|int
name|maxVcores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
if|if
condition|(
name|minVcores
argument_list|<
literal|0
operator|||
name|minVcores
argument_list|>
name|maxVcores
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid resource scheduler vcores"
operator|+
literal|" allocation configuration: "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
operator|+
literal|"="
operator|+
name|minVcores
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
operator|+
literal|"="
operator|+
name|maxVcores
operator|+
literal|".  Both values must be greater than or equal to 0"
operator|+
literal|"and the maximum allocation value must be greater than or equal to"
operator|+
literal|"the minimum allocation value."
argument_list|)
throw|;
block|}
block|}
DECL|method|getConf ()
specifier|public
name|FairSchedulerConfiguration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getNumNodesInRack (String rackName)
specifier|public
name|int
name|getNumNodesInRack
parameter_list|(
name|String
name|rackName
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|nodeCount
argument_list|(
name|rackName
argument_list|)
return|;
block|}
DECL|method|getQueueManager ()
specifier|public
name|QueueManager
name|getQueueManager
parameter_list|()
block|{
return|return
name|queueMgr
return|;
block|}
comment|// Allows UpdateThread to start processing without waiting till updateInterval
DECL|method|triggerUpdate ()
name|void
name|triggerUpdate
parameter_list|()
block|{
synchronized|synchronized
init|(
name|updateThreadMonitor
init|)
block|{
name|updateThreadMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Thread which calls {@link FairScheduler#update()} every    *<code>updateInterval</code> milliseconds.    */
DECL|class|UpdateThread
specifier|private
class|class
name|UpdateThread
extends|extends
name|Thread
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|updateThreadMonitor
init|)
block|{
name|updateThreadMonitor
operator|.
name|wait
argument_list|(
name|updateInterval
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|update
argument_list|()
expr_stmt|;
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|long
name|duration
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|fsOpDurations
operator|.
name|addUpdateThreadRunDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Update thread interrupted. Exiting."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in fair scheduler UpdateThread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Thread which attempts scheduling resources continuously,    * asynchronous to the node heartbeats.    */
DECL|class|ContinuousSchedulingThread
specifier|private
class|class
name|ContinuousSchedulingThread
extends|extends
name|Thread
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|continuousSchedulingAttempt
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|getContinuousSchedulingSleepMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Continuous scheduling thread interrupted. Exiting."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|/**    * Recompute the internal variables used by the scheduler - per-job weights,    * fair shares, deficits, minimum slot allocations, and amount of used and    * required resources per job.    */
DECL|method|update ()
specifier|protected
name|void
name|update
parameter_list|()
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|updateStarvationStats
argument_list|()
expr_stmt|;
comment|// Determine if any queues merit preemption
name|FSQueue
name|rootQueue
init|=
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
comment|// Recursively update demands for all queues
name|rootQueue
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|Resource
name|clusterResource
init|=
name|getClusterResource
argument_list|()
decl_stmt|;
name|rootQueue
operator|.
name|setFairShare
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Recursively compute fair shares for all queues
comment|// and update metrics
name|rootQueue
operator|.
name|recomputeShares
argument_list|()
expr_stmt|;
name|updateRootQueueMetrics
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|--
name|updatesToSkipForDebug
operator|<
literal|0
condition|)
block|{
name|updatesToSkipForDebug
operator|=
name|UPDATE_DEBUG_FREQUENCY
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cluster Capacity: "
operator|+
name|clusterResource
operator|+
literal|"  Allocations: "
operator|+
name|rootMetrics
operator|.
name|getAllocatedResources
argument_list|()
operator|+
literal|"  Availability: "
operator|+
name|Resource
operator|.
name|newInstance
argument_list|(
name|rootMetrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|,
name|rootMetrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
operator|+
literal|"  Demand: "
operator|+
name|rootQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|duration
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|fsOpDurations
operator|.
name|addUpdateCallDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Update the preemption fields for all QueueScheduables, i.e. the times since    * each queue last was at its guaranteed share and over its fair share    * threshold for each type of task.    */
DECL|method|updateStarvationStats ()
specifier|private
name|void
name|updateStarvationStats
parameter_list|()
block|{
name|lastPreemptionUpdateTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
for|for
control|(
name|FSLeafQueue
name|sched
range|:
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
name|sched
operator|.
name|updateStarvationStats
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Check for queues that need tasks preempted, either because they have been    * below their guaranteed share for minSharePreemptionTimeout or they have    * been below their fair share threshold for the fairSharePreemptionTimeout. If    * such queues exist, compute how many tasks of each type need to be preempted    * and then select the right ones using preemptTasks.    */
DECL|method|preemptTasksIfNecessary ()
specifier|protected
name|void
name|preemptTasksIfNecessary
parameter_list|()
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|shouldAttemptPreemption
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|curTime
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTime
operator|-
name|lastPreemptCheckTime
operator|<
name|preemptionInterval
condition|)
block|{
return|return;
block|}
name|lastPreemptCheckTime
operator|=
name|curTime
expr_stmt|;
name|Resource
name|resToPreempt
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FSLeafQueue
name|sched
range|:
name|queueMgr
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|resToPreempt
argument_list|,
name|resourceDeficit
argument_list|(
name|sched
argument_list|,
name|curTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isResourceGreaterThanNone
argument_list|(
name|resToPreempt
argument_list|)
condition|)
block|{
name|preemptResources
argument_list|(
name|resToPreempt
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Preempt a quantity of resources. Each round, we start from the root queue,    * level-by-level, until choosing a candidate application.    * The policy for prioritizing preemption for each queue depends on its    * SchedulingPolicy: (1) fairshare/DRF, choose the ChildSchedulable that is    * most over its fair share; (2) FIFO, choose the childSchedulable that is    * latest launched.    * Inside each application, we further prioritize preemption by choosing    * containers with lowest priority to preempt.    * We make sure that no queue is placed below its fair share in the process.    */
DECL|method|preemptResources (Resource toPreempt)
specifier|protected
name|void
name|preemptResources
parameter_list|(
name|Resource
name|toPreempt
parameter_list|)
block|{
name|long
name|start
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|toPreempt
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Scan down the list of containers we've already warned and kill them
comment|// if we need to.  Remove any containers from the list that we don't need
comment|// or that are no longer running.
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|warnedIter
init|=
name|warnedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|warnedIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RMContainer
name|container
init|=
name|warnedIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|container
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RUNNING
operator|||
name|container
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|ALLOCATED
operator|)
operator|&&
name|isResourceGreaterThanNone
argument_list|(
name|toPreempt
argument_list|)
condition|)
block|{
name|warnOrKillContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|toPreempt
argument_list|,
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|warnedIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Reset preemptedResource for each app
for|for
control|(
name|FSLeafQueue
name|queue
range|:
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
name|queue
operator|.
name|resetPreemptedResources
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|isResourceGreaterThanNone
argument_list|(
name|toPreempt
argument_list|)
condition|)
block|{
name|RMContainer
name|container
init|=
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|preemptContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|warnOrKillContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|warnedContainers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|toPreempt
argument_list|,
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// Clear preemptedResources for each app
for|for
control|(
name|FSLeafQueue
name|queue
range|:
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
control|)
block|{
name|queue
operator|.
name|clearPreemptedResources
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|duration
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|fsOpDurations
operator|.
name|addPreemptCallDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
DECL|method|isResourceGreaterThanNone (Resource toPreempt)
specifier|private
name|boolean
name|isResourceGreaterThanNone
parameter_list|(
name|Resource
name|toPreempt
parameter_list|)
block|{
return|return
operator|(
name|toPreempt
operator|.
name|getMemorySize
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|toPreempt
operator|.
name|getVirtualCores
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|warnOrKillContainer (RMContainer container)
specifier|protected
name|void
name|warnOrKillContainer
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue
init|=
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Preempting container (prio="
operator|+
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|+
literal|"res="
operator|+
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|+
literal|") from queue "
operator|+
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|time
init|=
name|app
operator|.
name|getContainerPreemptionTime
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
comment|// if we asked for preemption more than maxWaitTimeBeforeKill ms ago,
comment|// proceed with kill
if|if
condition|(
name|time
operator|+
name|waitTimeBeforeKill
operator|<
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|ContainerStatus
name|status
init|=
name|SchedulerUtils
operator|.
name|createPreemptedContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|PREEMPTED_CONTAINER
argument_list|)
decl_stmt|;
comment|// TODO: Not sure if this ever actually adds this to the list of cleanup
comment|// containers on the RMNode (see SchedulerNode.releaseContainer()).
name|super
operator|.
name|completedContainer
argument_list|(
name|container
argument_list|,
name|status
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing container"
operator|+
name|container
operator|+
literal|" (after waiting for preemption for "
operator|+
operator|(
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|time
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// track the request in the FSAppAttempt itself
name|app
operator|.
name|addPreemption
argument_list|(
name|container
argument_list|,
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return the resource amount that this queue is allowed to preempt, if any.    * If the queue has been below its min share for at least its preemption    * timeout, it should preempt the difference between its current share and    * this min share. If it has been below its fair share preemption threshold    * for at least the fairSharePreemptionTimeout, it should preempt enough tasks    * to get up to its full fair share. If both conditions hold, we preempt the    * max of the two amounts (this shouldn't happen unless someone sets the    * timeouts to be identical for some reason).    */
DECL|method|resourceDeficit (FSLeafQueue sched, long curTime)
specifier|protected
name|Resource
name|resourceDeficit
parameter_list|(
name|FSLeafQueue
name|sched
parameter_list|,
name|long
name|curTime
parameter_list|)
block|{
name|long
name|minShareTimeout
init|=
name|sched
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
decl_stmt|;
name|long
name|fairShareTimeout
init|=
name|sched
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
decl_stmt|;
name|Resource
name|resDueToMinShare
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
name|Resource
name|resDueToFairShare
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
name|ResourceCalculator
name|calc
init|=
name|sched
operator|.
name|getPolicy
argument_list|()
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|getClusterResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTime
operator|-
name|sched
operator|.
name|getLastTimeAtMinShare
argument_list|()
operator|>
name|minShareTimeout
condition|)
block|{
name|Resource
name|target
init|=
name|Resources
operator|.
name|componentwiseMin
argument_list|(
name|sched
operator|.
name|getMinShare
argument_list|()
argument_list|,
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
name|resDueToMinShare
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|calc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|target
argument_list|,
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curTime
operator|-
name|sched
operator|.
name|getLastTimeAtFairShareThreshold
argument_list|()
operator|>
name|fairShareTimeout
condition|)
block|{
name|Resource
name|target
init|=
name|Resources
operator|.
name|componentwiseMin
argument_list|(
name|sched
operator|.
name|getFairShare
argument_list|()
argument_list|,
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|)
decl_stmt|;
name|resDueToFairShare
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|calc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|target
argument_list|,
name|sched
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resource
name|deficit
init|=
name|Resources
operator|.
name|max
argument_list|(
name|calc
argument_list|,
name|clusterResource
argument_list|,
name|resDueToMinShare
argument_list|,
name|resDueToFairShare
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|calc
argument_list|,
name|clusterResource
argument_list|,
name|deficit
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Should preempt "
operator|+
name|deficit
operator|+
literal|" res for queue "
operator|+
name|sched
operator|.
name|getName
argument_list|()
operator|+
literal|": resDueToMinShare = "
operator|+
name|resDueToMinShare
operator|+
literal|", resDueToFairShare = "
operator|+
name|resDueToFairShare
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|deficit
return|;
block|}
specifier|public
name|RMContainerTokenSecretManager
DECL|method|getContainerTokenSecretManager ()
name|getContainerTokenSecretManager
parameter_list|()
block|{
return|return
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
return|;
block|}
DECL|method|getAppWeight (FSAppAttempt app)
specifier|public
name|ResourceWeights
name|getAppWeight
parameter_list|(
name|FSAppAttempt
name|app
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|double
name|weight
init|=
literal|1.0
decl_stmt|;
if|if
condition|(
name|sizeBasedWeight
condition|)
block|{
comment|// Set weight based on current memory demand
name|weight
operator|=
name|Math
operator|.
name|log1p
argument_list|(
name|app
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|weight
operator|*=
name|app
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|ResourceWeights
name|resourceWeights
init|=
name|app
operator|.
name|getResourceWeights
argument_list|()
decl_stmt|;
name|resourceWeights
operator|.
name|setWeight
argument_list|(
operator|(
name|float
operator|)
name|weight
argument_list|)
expr_stmt|;
return|return
name|resourceWeights
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getIncrementResourceCapability ()
specifier|public
name|Resource
name|getIncrementResourceCapability
parameter_list|()
block|{
return|return
name|incrAllocation
return|;
block|}
DECL|method|getFSSchedulerNode (NodeId nodeId)
specifier|private
name|FSSchedulerNode
name|getFSSchedulerNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|getNodeLocalityThreshold ()
specifier|public
name|double
name|getNodeLocalityThreshold
parameter_list|()
block|{
return|return
name|nodeLocalityThreshold
return|;
block|}
DECL|method|getRackLocalityThreshold ()
specifier|public
name|double
name|getRackLocalityThreshold
parameter_list|()
block|{
return|return
name|rackLocalityThreshold
return|;
block|}
DECL|method|getNodeLocalityDelayMs ()
specifier|public
name|long
name|getNodeLocalityDelayMs
parameter_list|()
block|{
return|return
name|nodeLocalityDelayMs
return|;
block|}
DECL|method|getRackLocalityDelayMs ()
specifier|public
name|long
name|getRackLocalityDelayMs
parameter_list|()
block|{
return|return
name|rackLocalityDelayMs
return|;
block|}
DECL|method|isContinuousSchedulingEnabled ()
specifier|public
name|boolean
name|isContinuousSchedulingEnabled
parameter_list|()
block|{
return|return
name|continuousSchedulingEnabled
return|;
block|}
DECL|method|getContinuousSchedulingSleepMs ()
specifier|public
name|int
name|getContinuousSchedulingSleepMs
parameter_list|()
block|{
return|return
name|continuousSchedulingSleepMs
return|;
block|}
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setClock (Clock clock)
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
DECL|method|getEventLog ()
specifier|public
name|FairSchedulerEventLog
name|getEventLog
parameter_list|()
block|{
return|return
name|eventLog
return|;
block|}
comment|/**    * Add a new application to the scheduler, with a given id, queue name, and    * user. This will accept a new app even if the user or queue is above    * configured limits, but the app will not be marked as runnable.    */
DECL|method|addApplication (ApplicationId applicationId, String queueName, String user, boolean isAppRecovering)
specifier|protected
name|void
name|addApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|isAppRecovering
parameter_list|)
block|{
if|if
condition|(
name|queueName
operator|==
literal|null
operator|||
name|queueName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Reject application "
operator|+
name|applicationId
operator|+
literal|" submitted by user "
operator|+
name|user
operator|+
literal|" with an empty queue name."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|queueName
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|||
name|queueName
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Reject application "
operator|+
name|applicationId
operator|+
literal|" submitted by user "
operator|+
name|user
operator|+
literal|" with an illegal queue name "
operator|+
name|queueName
operator|+
literal|". "
operator|+
literal|"The queue name cannot start/end with period."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue
init|=
name|assignToQueue
argument_list|(
name|rmApp
argument_list|,
name|queueName
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Enforce ACLs
name|UserGroupInformation
name|userUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queue
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|userUgi
argument_list|)
operator|&&
operator|!
name|queue
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|userUgi
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|userUgi
operator|.
name|getUserName
argument_list|()
operator|+
literal|" cannot submit applications to queue "
operator|+
name|queue
operator|.
name|getName
argument_list|()
operator|+
literal|"(requested queuename is "
operator|+
name|queueName
operator|+
literal|")"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|SchedulerApplication
argument_list|<
name|FSAppAttempt
argument_list|>
name|application
init|=
operator|new
name|SchedulerApplication
argument_list|<
name|FSAppAttempt
argument_list|>
argument_list|(
name|queue
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|applications
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|submitApp
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Accepted application "
operator|+
name|applicationId
operator|+
literal|" from user: "
operator|+
name|user
operator|+
literal|", in queue: "
operator|+
name|queue
operator|.
name|getName
argument_list|()
operator|+
literal|", currently num of applications: "
operator|+
name|applications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAppRecovering
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|applicationId
operator|+
literal|" is recovering. Skip notifying APP_ACCEPTED"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add a new application attempt to the scheduler.    */
DECL|method|addApplicationAttempt ( ApplicationAttemptId applicationAttemptId, boolean transferStateFromPreviousAttempt, boolean isAttemptRecovering)
specifier|protected
name|void
name|addApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|boolean
name|transferStateFromPreviousAttempt
parameter_list|,
name|boolean
name|isAttemptRecovering
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|SchedulerApplication
argument_list|<
name|FSAppAttempt
argument_list|>
name|application
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|queue
init|=
operator|(
name|FSLeafQueue
operator|)
name|application
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|FSAppAttempt
name|attempt
init|=
operator|new
name|FSAppAttempt
argument_list|(
name|this
argument_list|,
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
operator|new
name|ActiveUsersManager
argument_list|(
name|getRootQueueMetrics
argument_list|()
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|transferStateFromPreviousAttempt
condition|)
block|{
name|attempt
operator|.
name|transferStateFromPreviousAttempt
argument_list|(
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|setCurrentAppAttempt
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|boolean
name|runnable
init|=
name|maxRunningEnforcer
operator|.
name|canAppBeRunnable
argument_list|(
name|queue
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addApp
argument_list|(
name|attempt
argument_list|,
name|runnable
argument_list|)
expr_stmt|;
if|if
condition|(
name|runnable
condition|)
block|{
name|maxRunningEnforcer
operator|.
name|trackRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxRunningEnforcer
operator|.
name|trackNonRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|submitAppAttempt
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added Application Attempt "
operator|+
name|applicationAttemptId
operator|+
literal|" to scheduler from user: "
operator|+
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAttemptRecovering
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|applicationAttemptId
operator|+
literal|" is recovering. Skipping notifying ATTEMPT_ADDED"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method that attempts to assign the app to a queue. The method is    * responsible to call the appropriate event-handler if the app is rejected.    */
annotation|@
name|VisibleForTesting
DECL|method|assignToQueue (RMApp rmApp, String queueName, String user)
name|FSLeafQueue
name|assignToQueue
parameter_list|(
name|RMApp
name|rmApp
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|FSLeafQueue
name|queue
init|=
literal|null
decl_stmt|;
name|String
name|appRejectMsg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|QueuePlacementPolicy
name|placementPolicy
init|=
name|allocConf
operator|.
name|getPlacementPolicy
argument_list|()
decl_stmt|;
name|queueName
operator|=
name|placementPolicy
operator|.
name|assignAppToQueue
argument_list|(
name|queueName
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|queueName
operator|==
literal|null
condition|)
block|{
name|appRejectMsg
operator|=
literal|"Application rejected by queue placement policy"
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|appRejectMsg
operator|=
name|queueName
operator|+
literal|" is not a leaf queue"
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|se
parameter_list|)
block|{
name|appRejectMsg
operator|=
literal|"Unable to match app "
operator|+
name|rmApp
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" to a queue placement policy, and no valid terminal queue "
operator|+
literal|" placement rule is configured. Please contact an administrator "
operator|+
literal|" to confirm that the fair scheduler configuration contains a "
operator|+
literal|" valid terminal queue placement rule."
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidQueueNameException
name|qne
parameter_list|)
block|{
name|appRejectMsg
operator|=
name|qne
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|appRejectMsg
operator|=
literal|"Error assigning app to queue "
operator|+
name|queueName
expr_stmt|;
block|}
if|if
condition|(
name|appRejectMsg
operator|!=
literal|null
operator|&&
name|rmApp
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|appRejectMsg
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|appRejectMsg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
name|rmApp
operator|.
name|setQueue
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't find RM app to set queue name on"
argument_list|)
expr_stmt|;
block|}
return|return
name|queue
return|;
block|}
DECL|method|removeApplication (ApplicationId applicationId, RMAppState finalState)
specifier|private
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|RMAppState
name|finalState
parameter_list|)
block|{
name|SchedulerApplication
argument_list|<
name|FSAppAttempt
argument_list|>
name|application
init|=
name|applications
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't find application "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|application
operator|.
name|stop
argument_list|(
name|finalState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeApplicationAttempt ( ApplicationAttemptId applicationAttemptId, RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)
specifier|private
name|void
name|removeApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|,
name|boolean
name|keepContainers
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationAttemptId
operator|+
literal|" is done."
operator|+
literal|" finalState="
operator|+
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|applicationAttemptId
operator|+
literal|" has completed!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Release all the running containers
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|attempt
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|keepContainers
operator|&&
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
comment|// do not kill the running container in the case of work-preserving AM
comment|// restart.
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip killing "
operator|+
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|super
operator|.
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|COMPLETED_APPLICATION
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Release all reserved containers
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|attempt
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
name|super
operator|.
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|"Application Complete"
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Clean up pending requests, metrics etc.
name|attempt
operator|.
name|stop
argument_list|(
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
comment|// Inform the queue
name|FSLeafQueue
name|queue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|attempt
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|wasRunnable
init|=
name|queue
operator|.
name|removeApp
argument_list|(
name|attempt
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasRunnable
condition|)
block|{
name|maxRunningEnforcer
operator|.
name|untrackRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|maxRunningEnforcer
operator|.
name|updateRunnabilityOnAppRemoval
argument_list|(
name|attempt
argument_list|,
name|attempt
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxRunningEnforcer
operator|.
name|untrackNonRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Clean up a completed container.    */
annotation|@
name|Override
DECL|method|completedContainerInternal ( RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|protected
name|void
name|completedContainerInternal
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// Get the application for the finished container
name|FSAppAttempt
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|container
operator|+
literal|" of"
operator|+
literal|" finished application "
operator|+
name|appId
operator|+
literal|" completed with event "
operator|+
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get the node on which the container was allocated
name|FSSchedulerNode
name|node
init|=
name|getFSSchedulerNode
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RESERVED
condition|)
block|{
name|application
operator|.
name|unreserve
argument_list|(
name|rmContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|application
operator|.
name|containerCompleted
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|node
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|updateRootQueueMetrics
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application attempt "
operator|+
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" released container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" on node: "
operator|+
name|node
operator|+
literal|" with event: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addNode (List<NMContainerStatus> containerReports, RMNode node)
specifier|private
name|void
name|addNode
parameter_list|(
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerReports
parameter_list|,
name|RMNode
name|node
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
name|usePortForNodeName
argument_list|)
decl_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|triggerUpdate
argument_list|()
expr_stmt|;
name|Resource
name|clusterResource
init|=
name|getClusterResource
argument_list|()
decl_stmt|;
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added node "
operator|+
name|node
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" cluster capacity: "
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
name|recoverContainersOnNode
argument_list|(
name|containerReports
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|updateRootQueueMetrics
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeNode (RMNode rmNode)
specifier|private
name|void
name|removeNode
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|rmNode
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|node
init|=
name|nodeTracker
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Attempting to remove non-existent node "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Remove running containers
name|List
argument_list|<
name|RMContainer
argument_list|>
name|runningContainers
init|=
name|node
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|runningContainers
control|)
block|{
name|super
operator|.
name|completedContainer
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
comment|// Remove reservations, if any
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|completedContainer
argument_list|(
name|reservedContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|reservedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|Resource
name|clusterResource
init|=
name|getClusterResource
argument_list|()
decl_stmt|;
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|updateRootQueueMetrics
argument_list|()
expr_stmt|;
name|triggerUpdate
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed node "
operator|+
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
operator|+
literal|" cluster capacity: "
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId appAttemptId, List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals, List<UpdateContainerRequest> increaseRequests, List<UpdateContainerRequest> decreaseRequests)
specifier|public
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|,
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|increaseRequests
parameter_list|,
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|decreaseRequests
parameter_list|)
block|{
comment|// Make sure this application exists
name|FSAppAttempt
name|application
init|=
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling allocate on removed "
operator|+
literal|"or non existent application "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
name|EMPTY_ALLOCATION
return|;
block|}
comment|// Sanity check
name|SchedulerUtils
operator|.
name|normalizeRequests
argument_list|(
name|ask
argument_list|,
name|DOMINANT_RESOURCE_CALCULATOR
argument_list|,
name|getClusterResource
argument_list|()
argument_list|,
name|minimumAllocation
argument_list|,
name|getMaximumResourceCapability
argument_list|()
argument_list|,
name|incrAllocation
argument_list|)
expr_stmt|;
comment|// Record container allocation start time
name|application
operator|.
name|recordContainerRequestTime
argument_list|(
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release containers
name|releaseContainers
argument_list|(
name|release
argument_list|,
name|application
argument_list|)
expr_stmt|;
try|try
block|{
name|application
operator|.
name|getWriteLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: pre-update"
operator|+
literal|" applicationAttemptId="
operator|+
name|appAttemptId
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
comment|// Update application requests
name|application
operator|.
name|updateResourceRequests
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|application
operator|.
name|getWriteLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: post-update"
operator|+
literal|" applicationAttemptId="
operator|+
name|appAttemptId
operator|+
literal|" #ask="
operator|+
name|ask
operator|.
name|size
argument_list|()
operator|+
literal|" reservation= "
operator|+
name|application
operator|.
name|getCurrentReservation
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Preempting "
operator|+
name|application
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" container(s)"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|preemptionContainerIds
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|application
operator|.
name|getPreemptionContainers
argument_list|()
control|)
block|{
name|preemptionContainerIds
operator|.
name|add
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newlyAllocatedContainers
init|=
name|application
operator|.
name|pullNewlyAllocatedContainers
argument_list|()
decl_stmt|;
comment|// Record container allocation time
if|if
condition|(
operator|!
operator|(
name|newlyAllocatedContainers
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|application
operator|.
name|recordContainerAllocationTime
argument_list|(
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Resource
name|headroom
init|=
name|application
operator|.
name|getHeadroom
argument_list|()
decl_stmt|;
name|application
operator|.
name|setApplicationHeadroomForMetrics
argument_list|(
name|headroom
argument_list|)
expr_stmt|;
return|return
operator|new
name|Allocation
argument_list|(
name|newlyAllocatedContainers
argument_list|,
name|headroom
argument_list|,
name|preemptionContainerIds
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|application
operator|.
name|pullUpdatedNMTokens
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Process a heartbeat update from a node.    */
DECL|method|nodeUpdate (RMNode nm)
specifier|private
name|void
name|nodeUpdate
parameter_list|(
name|RMNode
name|nm
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"nodeUpdate: "
operator|+
name|nm
operator|+
literal|" cluster capacity: "
operator|+
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|eventLog
operator|.
name|log
argument_list|(
literal|"HEARTBEAT"
argument_list|,
name|nm
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|FSSchedulerNode
name|node
init|=
name|getFSSchedulerNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|containerInfoList
init|=
name|nm
operator|.
name|pullContainerUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdatedContainerInfo
name|containerInfo
range|:
name|containerInfoList
control|)
block|{
name|newlyLaunchedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getNewlyLaunchedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|completedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Processing the newly launched containers
for|for
control|(
name|ContainerStatus
name|launchedContainer
range|:
name|newlyLaunchedContainers
control|)
block|{
name|containerLaunchedOnNode
argument_list|(
name|launchedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Process completed containers
for|for
control|(
name|ContainerStatus
name|completedContainer
range|:
name|completedContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|completedContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container FINISHED: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|completedContainer
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|completedContainer
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
comment|// If the node is decommissioning, send an update to have the total
comment|// resource equal to the used resource, so no available resource to
comment|// schedule.
if|if
condition|(
name|nm
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeResourceUpdateEvent
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|getSchedulerNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|continuousSchedulingEnabled
condition|)
block|{
if|if
condition|(
operator|!
name|completedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attemptScheduling
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|attemptScheduling
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Updating node resource utilization
name|node
operator|.
name|setAggregatedContainersUtilization
argument_list|(
name|nm
operator|.
name|getAggregatedContainersUtilization
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setNodeUtilization
argument_list|(
name|nm
operator|.
name|getNodeUtilization
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|fsOpDurations
operator|.
name|addNodeUpdateDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|continuousSchedulingAttempt ()
name|void
name|continuousSchedulingAttempt
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodeIdList
init|=
name|nodeTracker
operator|.
name|sortedNodeList
argument_list|(
name|nodeAvailableResourceComparator
argument_list|)
decl_stmt|;
comment|// iterate all nodes
for|for
control|(
name|FSSchedulerNode
name|node
range|:
name|nodeIdList
control|)
block|{
try|try
block|{
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|minimumAllocation
argument_list|,
name|node
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
condition|)
block|{
name|attemptScheduling
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while attempting scheduling for node "
operator|+
name|node
operator|+
literal|": "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ex
operator|instanceof
name|YarnRuntimeException
operator|)
operator|&&
operator|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InterruptedException
operator|)
condition|)
block|{
comment|// AsyncDispatcher translates InterruptedException to
comment|// YarnRuntimeException with cause InterruptedException.
comment|// Need to throw InterruptedException to stop schedulingThread.
throw|throw
operator|(
name|InterruptedException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
name|long
name|duration
init|=
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|fsOpDurations
operator|.
name|addContinuousSchedulingRunDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
comment|/** Sort nodes by available resource */
DECL|class|NodeAvailableResourceComparator
specifier|private
class|class
name|NodeAvailableResourceComparator
implements|implements
name|Comparator
argument_list|<
name|FSSchedulerNode
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (FSSchedulerNode n1, FSSchedulerNode n2)
specifier|public
name|int
name|compare
parameter_list|(
name|FSSchedulerNode
name|n1
parameter_list|,
name|FSSchedulerNode
name|n2
parameter_list|)
block|{
return|return
name|RESOURCE_CALCULATOR
operator|.
name|compare
argument_list|(
name|getClusterResource
argument_list|()
argument_list|,
name|n2
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|,
name|n1
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|shouldContinueAssigning (int containers, Resource maxResourcesToAssign, Resource assignedResource)
specifier|private
name|boolean
name|shouldContinueAssigning
parameter_list|(
name|int
name|containers
parameter_list|,
name|Resource
name|maxResourcesToAssign
parameter_list|,
name|Resource
name|assignedResource
parameter_list|)
block|{
if|if
condition|(
operator|!
name|assignMultiple
condition|)
block|{
return|return
literal|false
return|;
comment|// assignMultiple is not enabled. Allocate one at a time.
block|}
if|if
condition|(
name|maxAssignDynamic
condition|)
block|{
comment|// Using fitsIn to check if the resources assigned so far are less than
comment|// or equal to max resources to assign (half of remaining resources).
comment|// The "equal to" part can lead to allocating one extra container.
return|return
name|Resources
operator|.
name|fitsIn
argument_list|(
name|assignedResource
argument_list|,
name|maxResourcesToAssign
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|maxAssign
operator|<=
literal|0
operator|||
name|containers
operator|<
name|maxAssign
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|attemptScheduling (FSSchedulerNode node)
name|void
name|attemptScheduling
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmContext
operator|.
name|isWorkPreservingRecoveryEnabled
argument_list|()
operator|&&
operator|!
name|rmContext
operator|.
name|isSchedulerReadyForAllocatingContainers
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|NodeId
name|nodeID
init|=
name|node
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodeTracker
operator|.
name|exists
argument_list|(
name|nodeID
argument_list|)
condition|)
block|{
comment|// The node might have just been removed while this thread was waiting
comment|// on the synchronized lock before it entered this synchronized method
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping scheduling as the node "
operator|+
name|nodeID
operator|+
literal|" has been removed"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Assign new containers...
comment|// 1. Check for reserved applications
comment|// 2. Schedule if there are no reservations
name|boolean
name|validReservation
init|=
literal|false
decl_stmt|;
name|FSAppAttempt
name|reservedAppSchedulable
init|=
name|node
operator|.
name|getReservedAppSchedulable
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedAppSchedulable
operator|!=
literal|null
condition|)
block|{
name|validReservation
operator|=
name|reservedAppSchedulable
operator|.
name|assignReservedContainer
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validReservation
condition|)
block|{
comment|// No reservation, schedule at queue which is farthest below fair share
name|int
name|assignedContainers
init|=
literal|0
decl_stmt|;
name|Resource
name|assignedResource
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|maxResourcesToAssign
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|node
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|,
literal|0.5f
argument_list|)
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|boolean
name|assignedContainer
init|=
literal|false
decl_stmt|;
name|Resource
name|assignment
init|=
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|assignContainer
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|assignedContainers
operator|++
expr_stmt|;
name|assignedContainer
operator|=
literal|true
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|assignedResource
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignedContainer
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|shouldContinueAssigning
argument_list|(
name|assignedContainers
argument_list|,
name|maxResourcesToAssign
argument_list|,
name|assignedResource
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
name|updateRootQueueMetrics
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSchedulerApp (ApplicationAttemptId appAttemptId)
specifier|public
name|FSAppAttempt
name|getSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
return|return
name|super
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceCalculator ()
specifier|public
name|ResourceCalculator
name|getResourceCalculator
parameter_list|()
block|{
return|return
name|RESOURCE_CALCULATOR
return|;
block|}
comment|/**    * Subqueue metrics might be a little out of date because fair shares are    * recalculated at the update interval, but the root queue metrics needs to    * be updated synchronously with allocations and completions so that cluster    * metrics will be consistent.    */
DECL|method|updateRootQueueMetrics ()
specifier|private
name|void
name|updateRootQueueMetrics
parameter_list|()
block|{
name|rootMetrics
operator|.
name|setAvailableResourcesToQueue
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|getClusterResource
argument_list|()
argument_list|,
name|rootMetrics
operator|.
name|getAllocatedResources
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if preemption is enabled and the utilization threshold for    * preemption is met.    *    * @return true if preemption should be attempted, false otherwise.    */
DECL|method|shouldAttemptPreemption ()
specifier|private
name|boolean
name|shouldAttemptPreemption
parameter_list|()
block|{
if|if
condition|(
name|preemptionEnabled
condition|)
block|{
name|Resource
name|clusterResource
init|=
name|getClusterResource
argument_list|()
decl_stmt|;
return|return
operator|(
name|preemptionUtilizationThreshold
operator|<
name|Math
operator|.
name|max
argument_list|(
operator|(
name|float
operator|)
name|rootMetrics
operator|.
name|getAllocatedMB
argument_list|()
operator|/
name|clusterResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|rootMetrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
operator|/
name|clusterResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueueMetrics ()
specifier|public
name|QueueMetrics
name|getRootQueueMetrics
parameter_list|()
block|{
return|return
name|rootMetrics
return|;
block|}
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_ADDED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeAddedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeAddedSchedulerEvent
name|nodeAddedEvent
init|=
operator|(
name|NodeAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addNode
argument_list|(
name|nodeAddedEvent
operator|.
name|getContainerReports
argument_list|()
argument_list|,
name|nodeAddedEvent
operator|.
name|getAddedRMNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_REMOVED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeRemovedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeRemovedSchedulerEvent
name|nodeRemovedEvent
init|=
operator|(
name|NodeRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeNode
argument_list|(
name|nodeRemovedEvent
operator|.
name|getRemovedRMNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_UPDATE
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeUpdateSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeUpdateSchedulerEvent
name|nodeUpdatedEvent
init|=
operator|(
name|NodeUpdateSchedulerEvent
operator|)
name|event
decl_stmt|;
name|nodeUpdate
argument_list|(
name|nodeUpdatedEvent
operator|.
name|getRMNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ADDED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AppAddedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|(
name|AppAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|String
name|queueName
init|=
name|resolveReservationQueueName
argument_list|(
name|appAddedEvent
operator|.
name|getQueue
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getReservationID
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getIsAppRecovering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueName
operator|!=
literal|null
condition|)
block|{
name|addApplication
argument_list|(
name|appAddedEvent
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|queueName
argument_list|,
name|appAddedEvent
operator|.
name|getUser
argument_list|()
argument_list|,
name|appAddedEvent
operator|.
name|getIsAppRecovering
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APP_REMOVED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AppRemovedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|AppRemovedSchedulerEvent
name|appRemovedEvent
init|=
operator|(
name|AppRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeApplication
argument_list|(
name|appRemovedEvent
operator|.
name|getApplicationID
argument_list|()
argument_list|,
name|appRemovedEvent
operator|.
name|getFinalState
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE_RESOURCE_UPDATE
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|NodeResourceUpdateSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|NodeResourceUpdateSchedulerEvent
name|nodeResourceUpdatedEvent
init|=
operator|(
name|NodeResourceUpdateSchedulerEvent
operator|)
name|event
decl_stmt|;
name|updateNodeResource
argument_list|(
name|nodeResourceUpdatedEvent
operator|.
name|getRMNode
argument_list|()
argument_list|,
name|nodeResourceUpdatedEvent
operator|.
name|getResourceOption
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_ADDED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AppAttemptAddedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|AppAttemptAddedSchedulerEvent
name|appAttemptAddedEvent
init|=
operator|(
name|AppAttemptAddedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|addApplicationAttempt
argument_list|(
name|appAttemptAddedEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttemptAddedEvent
operator|.
name|getTransferStateFromPreviousAttempt
argument_list|()
argument_list|,
name|appAttemptAddedEvent
operator|.
name|getIsAttemptRecovering
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_REMOVED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AppAttemptRemovedSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|AppAttemptRemovedSchedulerEvent
name|appAttemptRemovedEvent
init|=
operator|(
name|AppAttemptRemovedSchedulerEvent
operator|)
name|event
decl_stmt|;
name|removeApplicationAttempt
argument_list|(
name|appAttemptRemovedEvent
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|,
name|appAttemptRemovedEvent
operator|.
name|getFinalAttemptState
argument_list|()
argument_list|,
name|appAttemptRemovedEvent
operator|.
name|getKeepContainersAcrossAppAttempts
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_EXPIRED
case|:
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|ContainerExpiredSchedulerEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected event type: "
operator|+
name|event
argument_list|)
throw|;
block|}
name|ContainerExpiredSchedulerEvent
name|containerExpiredEvent
init|=
operator|(
name|ContainerExpiredSchedulerEvent
operator|)
name|event
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|containerExpiredEvent
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|super
operator|.
name|completedContainer
argument_list|(
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerId
argument_list|,
name|SchedulerUtils
operator|.
name|EXPIRED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown event arrived at FairScheduler: "
operator|+
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resolveReservationQueueName (String queueName, ApplicationId applicationId, ReservationId reservationID, boolean isRecovering)
specifier|private
name|String
name|resolveReservationQueueName
parameter_list|(
name|String
name|queueName
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|ReservationId
name|reservationID
parameter_list|,
name|boolean
name|isRecovering
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|FSQueue
name|queue
init|=
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|queue
operator|==
literal|null
operator|)
operator|||
operator|!
name|allocConf
operator|.
name|isReservable
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|queueName
return|;
block|}
comment|// Use fully specified name from now on (including root. prefix)
name|queueName
operator|=
name|queue
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservationID
operator|!=
literal|null
condition|)
block|{
name|String
name|resQName
init|=
name|queueName
operator|+
literal|"."
operator|+
name|reservationID
operator|.
name|toString
argument_list|()
decl_stmt|;
name|queue
operator|=
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|resQName
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
comment|// reservation has terminated during failover
if|if
condition|(
name|isRecovering
operator|&&
name|allocConf
operator|.
name|getMoveOnExpiry
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
comment|// move to the default child queue of the plan
return|return
name|getDefaultQueueForPlanQueue
argument_list|(
name|queueName
argument_list|)
return|;
block|}
name|String
name|message
init|=
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" submitted to a reservation which is not yet "
operator|+
literal|"currently active: "
operator|+
name|resQName
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|queue
operator|.
name|getParent
argument_list|()
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Application: "
operator|+
name|applicationId
operator|+
literal|" submitted to a reservation "
operator|+
name|resQName
operator|+
literal|" which does not belong to the specified queue: "
operator|+
name|queueName
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// use the reservation queue to run the app
name|queueName
operator|=
name|resQName
expr_stmt|;
block|}
else|else
block|{
comment|// use the default child queue of the plan for unreserved apps
name|queueName
operator|=
name|getDefaultQueueForPlanQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
return|return
name|queueName
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDefaultQueueForPlanQueue (String queueName)
specifier|private
name|String
name|getDefaultQueueForPlanQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|String
name|planName
init|=
name|queueName
operator|.
name|substring
argument_list|(
name|queueName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|queueName
operator|=
name|queueName
operator|+
literal|"."
operator|+
name|planName
operator|+
name|ReservationConstants
operator|.
name|DEFAULT_QUEUE_SUFFIX
expr_stmt|;
return|return
name|queueName
return|;
block|}
annotation|@
name|Override
DECL|method|recover (RMState state)
specifier|public
name|void
name|recover
parameter_list|(
name|RMState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOT IMPLEMENTED
block|}
DECL|method|setRMContext (RMContext rmContext)
specifier|public
name|void
name|setRMContext
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
DECL|method|initScheduler (Configuration conf)
specifier|private
name|void
name|initScheduler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|FairSchedulerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|validateConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|minimumAllocation
operator|=
name|this
operator|.
name|conf
operator|.
name|getMinimumAllocation
argument_list|()
expr_stmt|;
name|initMaximumResourceCapability
argument_list|(
name|this
operator|.
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
expr_stmt|;
name|incrAllocation
operator|=
name|this
operator|.
name|conf
operator|.
name|getIncrementAllocation
argument_list|()
expr_stmt|;
name|updateReservationThreshold
argument_list|()
expr_stmt|;
name|continuousSchedulingEnabled
operator|=
name|this
operator|.
name|conf
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
expr_stmt|;
name|continuousSchedulingSleepMs
operator|=
name|this
operator|.
name|conf
operator|.
name|getContinuousSchedulingSleepMs
argument_list|()
expr_stmt|;
name|nodeLocalityThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityThresholdNode
argument_list|()
expr_stmt|;
name|rackLocalityThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityThresholdRack
argument_list|()
expr_stmt|;
name|nodeLocalityDelayMs
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityDelayNodeMs
argument_list|()
expr_stmt|;
name|rackLocalityDelayMs
operator|=
name|this
operator|.
name|conf
operator|.
name|getLocalityDelayRackMs
argument_list|()
expr_stmt|;
name|preemptionEnabled
operator|=
name|this
operator|.
name|conf
operator|.
name|getPreemptionEnabled
argument_list|()
expr_stmt|;
name|preemptionUtilizationThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getPreemptionUtilizationThreshold
argument_list|()
expr_stmt|;
name|assignMultiple
operator|=
name|this
operator|.
name|conf
operator|.
name|getAssignMultiple
argument_list|()
expr_stmt|;
name|maxAssignDynamic
operator|=
name|this
operator|.
name|conf
operator|.
name|isMaxAssignDynamic
argument_list|()
expr_stmt|;
name|maxAssign
operator|=
name|this
operator|.
name|conf
operator|.
name|getMaxAssign
argument_list|()
expr_stmt|;
name|sizeBasedWeight
operator|=
name|this
operator|.
name|conf
operator|.
name|getSizeBasedWeight
argument_list|()
expr_stmt|;
name|preemptionInterval
operator|=
name|this
operator|.
name|conf
operator|.
name|getPreemptionInterval
argument_list|()
expr_stmt|;
name|waitTimeBeforeKill
operator|=
name|this
operator|.
name|conf
operator|.
name|getWaitTimeBeforeKill
argument_list|()
expr_stmt|;
name|usePortForNodeName
operator|=
name|this
operator|.
name|conf
operator|.
name|getUsePortForNodeName
argument_list|()
expr_stmt|;
name|reservableNodesRatio
operator|=
name|this
operator|.
name|conf
operator|.
name|getReservableNodes
argument_list|()
expr_stmt|;
name|updateInterval
operator|=
name|this
operator|.
name|conf
operator|.
name|getUpdateInterval
argument_list|()
expr_stmt|;
if|if
condition|(
name|updateInterval
operator|<
literal|0
condition|)
block|{
name|updateInterval
operator|=
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_UPDATE_INTERVAL_MS
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|UPDATE_INTERVAL_MS
operator|+
literal|" is invalid, so using default value "
operator|+
operator|+
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_UPDATE_INTERVAL_MS
operator|+
literal|" ms instead"
argument_list|)
expr_stmt|;
block|}
name|rootMetrics
operator|=
name|FSQueueMetrics
operator|.
name|forQueue
argument_list|(
literal|"root"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fsOpDurations
operator|=
name|FSOpDurations
operator|.
name|getInstance
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// This stores per-application scheduling information
name|this
operator|.
name|applications
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|eventLog
operator|=
operator|new
name|FairSchedulerEventLog
argument_list|()
expr_stmt|;
name|eventLog
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|allocConf
operator|=
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|queueMgr
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to start FairScheduler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|updateThread
operator|=
operator|new
name|UpdateThread
argument_list|()
expr_stmt|;
name|updateThread
operator|.
name|setName
argument_list|(
literal|"FairSchedulerUpdateThread"
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|continuousSchedulingEnabled
condition|)
block|{
comment|// start continuous scheduling thread
name|schedulingThread
operator|=
operator|new
name|ContinuousSchedulingThread
argument_list|()
expr_stmt|;
name|schedulingThread
operator|.
name|setName
argument_list|(
literal|"FairSchedulerContinuousScheduling"
argument_list|)
expr_stmt|;
name|schedulingThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|allocsLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocsLoader
operator|.
name|setReloadListener
argument_list|(
operator|new
name|AllocationReloadListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we fail to load allocations file on initialize, we want to fail
comment|// immediately.  After a successful load, exceptions on future reloads
comment|// will just result in leaving things as they are.
try|try
block|{
name|allocsLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize FairScheduler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateReservationThreshold ()
specifier|private
name|void
name|updateReservationThreshold
parameter_list|()
block|{
name|Resource
name|newThreshold
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|getIncrementResourceCapability
argument_list|()
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getReservationThresholdIncrementMultiple
argument_list|()
argument_list|)
decl_stmt|;
name|reservationThreshold
operator|=
name|newThreshold
expr_stmt|;
block|}
DECL|method|startSchedulerThreads ()
specifier|private
name|void
name|startSchedulerThreads
parameter_list|()
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|updateThread
argument_list|,
literal|"updateThread is null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|allocsLoader
argument_list|,
literal|"allocsLoader is null"
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|continuousSchedulingEnabled
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|schedulingThread
argument_list|,
literal|"schedulingThread is null"
argument_list|)
expr_stmt|;
name|schedulingThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|allocsLoader
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initScheduler
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|startSchedulerThreads
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|updateThread
operator|!=
literal|null
condition|)
block|{
name|updateThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|updateThread
operator|.
name|join
argument_list|(
name|THREAD_JOIN_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|continuousSchedulingEnabled
condition|)
block|{
if|if
condition|(
name|schedulingThread
operator|!=
literal|null
condition|)
block|{
name|schedulingThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|schedulingThread
operator|.
name|join
argument_list|(
name|THREAD_JOIN_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocsLoader
operator|!=
literal|null
condition|)
block|{
name|allocsLoader
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (Configuration conf, RMContext rmContext)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|allocsLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload allocations file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (String queueName, boolean includeChildQueues, boolean recursive)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|queueMgr
operator|.
name|exists
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"queue "
operator|+
name|queueName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
operator|.
name|getQueueInfo
argument_list|(
name|includeChildQueues
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAclInfo ()
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|()
block|{
name|UserGroupInformation
name|user
decl_stmt|;
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|QueueUserACLInfo
argument_list|>
argument_list|()
return|;
block|}
return|return
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumClusterNodes ()
specifier|public
name|int
name|getNumClusterNodes
parameter_list|()
block|{
return|return
name|nodeTracker
operator|.
name|nodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, QueueACL acl, String queueName)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|FSQueue
name|queue
init|=
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ACL not found for queue access-type "
operator|+
name|acl
operator|+
literal|" for queue "
operator|+
name|queueName
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
name|queue
operator|.
name|hasAccess
argument_list|(
name|acl
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAllocationConfiguration ()
specifier|public
name|AllocationConfiguration
name|getAllocationConfiguration
parameter_list|()
block|{
return|return
name|allocConf
return|;
block|}
DECL|class|AllocationReloadListener
specifier|private
class|class
name|AllocationReloadListener
implements|implements
name|AllocationFileLoaderService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onReload (AllocationConfiguration queueInfo)
specifier|public
name|void
name|onReload
parameter_list|(
name|AllocationConfiguration
name|queueInfo
parameter_list|)
block|{
comment|// Commit the reload; also create any queue defined in the alloc file
comment|// if it does not already exist, so it can be displayed on the web UI.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|allocConf
operator|=
name|queueInfo
expr_stmt|;
name|allocConf
operator|.
name|getDefaultSchedulingPolicy
argument_list|()
operator|.
name|initialize
argument_list|(
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|queueMgr
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|applyChildDefaults
argument_list|()
expr_stmt|;
name|maxRunningEnforcer
operator|.
name|updateRunnabilityOnReload
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * After reloading the allocation config, the max resource settings for any    * ad hoc queues will be missing. This method goes through the queue manager's    * queue list and adds back the max resources settings for any ad hoc queues.    * Note that the new max resource settings will be based on the new config.    * The old settings are lost.    */
DECL|method|applyChildDefaults ()
specifier|private
name|void
name|applyChildDefaults
parameter_list|()
block|{
name|Collection
argument_list|<
name|FSQueue
argument_list|>
name|queues
init|=
name|queueMgr
operator|.
name|getQueues
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|configuredLeafQueues
init|=
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|configuredParentQueues
init|=
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
decl_stmt|;
for|for
control|(
name|FSQueue
name|queue
range|:
name|queues
control|)
block|{
comment|// If the queue is ad hoc and not root, apply the child defaults
if|if
condition|(
operator|(
name|queue
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|configuredLeafQueues
operator|.
name|contains
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|configuredParentQueues
operator|.
name|contains
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|max
init|=
name|queue
operator|.
name|getParent
argument_list|()
operator|.
name|getMaxChildQueueResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|setMaxShare
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getAppsInQueue (String queueName)
specifier|public
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|getAppsInQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|FSQueue
name|queue
init|=
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|collectSchedulerApplications
argument_list|(
name|apps
argument_list|)
expr_stmt|;
return|return
name|apps
return|;
block|}
annotation|@
name|Override
DECL|method|moveApplication (ApplicationId appId, String queueName)
specifier|public
name|String
name|moveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|SchedulerApplication
argument_list|<
name|FSAppAttempt
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"App to be moved "
operator|+
name|appId
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|FSAppAttempt
name|attempt
init|=
operator|(
name|FSAppAttempt
operator|)
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// To serialize with FairScheduler#allocate, synchronize on app attempt
try|try
block|{
name|attempt
operator|.
name|getWriteLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
operator|(
name|FSLeafQueue
operator|)
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|String
name|destQueueName
init|=
name|handleMoveToPlanQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|destQueueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetQueue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Target queue "
operator|+
name|queueName
operator|+
literal|" not found or is not a leaf queue."
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetQueue
operator|==
name|oldQueue
condition|)
block|{
return|return
name|oldQueue
operator|.
name|getQueueName
argument_list|()
return|;
block|}
if|if
condition|(
name|oldQueue
operator|.
name|isRunnableApp
argument_list|(
name|attempt
argument_list|)
condition|)
block|{
name|verifyMoveDoesNotViolateConstraints
argument_list|(
name|attempt
argument_list|,
name|oldQueue
argument_list|,
name|targetQueue
argument_list|)
expr_stmt|;
block|}
name|executeMove
argument_list|(
name|app
argument_list|,
name|attempt
argument_list|,
name|oldQueue
argument_list|,
name|targetQueue
argument_list|)
expr_stmt|;
return|return
name|targetQueue
operator|.
name|getQueueName
argument_list|()
return|;
block|}
finally|finally
block|{
name|attempt
operator|.
name|getWriteLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyMoveDoesNotViolateConstraints (FSAppAttempt app, FSLeafQueue oldQueue, FSLeafQueue targetQueue)
specifier|private
name|void
name|verifyMoveDoesNotViolateConstraints
parameter_list|(
name|FSAppAttempt
name|app
parameter_list|,
name|FSLeafQueue
name|oldQueue
parameter_list|,
name|FSLeafQueue
name|targetQueue
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|queueName
init|=
name|targetQueue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// When checking maxResources and maxRunningApps, only need to consider
comment|// queues before the lowest common ancestor of the two queues because the
comment|// total running apps in queues above will not be changed.
name|FSQueue
name|lowestCommonAncestor
init|=
name|findLowestCommonAncestorQueue
argument_list|(
name|oldQueue
argument_list|,
name|targetQueue
argument_list|)
decl_stmt|;
name|Resource
name|consumption
init|=
name|app
operator|.
name|getCurrentConsumption
argument_list|()
decl_stmt|;
comment|// Check whether the move would go over maxRunningApps or maxShare
name|FSQueue
name|cur
init|=
name|targetQueue
decl_stmt|;
while|while
condition|(
name|cur
operator|!=
name|lowestCommonAncestor
condition|)
block|{
comment|// maxRunningApps
if|if
condition|(
name|cur
operator|.
name|getNumRunnableApps
argument_list|()
operator|==
name|cur
operator|.
name|getMaxRunningApps
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Moving app attempt "
operator|+
name|appAttId
operator|+
literal|" to queue "
operator|+
name|queueName
operator|+
literal|" would violate queue maxRunningApps constraints on"
operator|+
literal|" queue "
operator|+
name|cur
operator|.
name|getQueueName
argument_list|()
argument_list|)
throw|;
block|}
comment|// maxShare
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getResourceUsage
argument_list|()
argument_list|,
name|consumption
argument_list|)
argument_list|,
name|cur
operator|.
name|getMaxShare
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Moving app attempt "
operator|+
name|appAttId
operator|+
literal|" to queue "
operator|+
name|queueName
operator|+
literal|" would violate queue maxShare constraints on"
operator|+
literal|" queue "
operator|+
name|cur
operator|.
name|getQueueName
argument_list|()
argument_list|)
throw|;
block|}
name|cur
operator|=
name|cur
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper for moveApplication, which has appropriate synchronization, so all    * operations will be atomic.    */
DECL|method|executeMove (SchedulerApplication<FSAppAttempt> app, FSAppAttempt attempt, FSLeafQueue oldQueue, FSLeafQueue newQueue)
specifier|private
name|void
name|executeMove
parameter_list|(
name|SchedulerApplication
argument_list|<
name|FSAppAttempt
argument_list|>
name|app
parameter_list|,
name|FSAppAttempt
name|attempt
parameter_list|,
name|FSLeafQueue
name|oldQueue
parameter_list|,
name|FSLeafQueue
name|newQueue
parameter_list|)
block|{
name|boolean
name|wasRunnable
init|=
name|oldQueue
operator|.
name|removeApp
argument_list|(
name|attempt
argument_list|)
decl_stmt|;
comment|// if app was not runnable before, it may be runnable now
name|boolean
name|nowRunnable
init|=
name|maxRunningEnforcer
operator|.
name|canAppBeRunnable
argument_list|(
name|newQueue
argument_list|,
name|attempt
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasRunnable
operator|&&
operator|!
name|nowRunnable
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should have already verified that app "
operator|+
name|attempt
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" would be runnable in new queue"
argument_list|)
throw|;
block|}
if|if
condition|(
name|wasRunnable
condition|)
block|{
name|maxRunningEnforcer
operator|.
name|untrackRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nowRunnable
condition|)
block|{
comment|// App has changed from non-runnable to runnable
name|maxRunningEnforcer
operator|.
name|untrackNonRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
name|attempt
operator|.
name|move
argument_list|(
name|newQueue
argument_list|)
expr_stmt|;
comment|// This updates all the metrics
name|app
operator|.
name|setQueue
argument_list|(
name|newQueue
argument_list|)
expr_stmt|;
name|newQueue
operator|.
name|addApp
argument_list|(
name|attempt
argument_list|,
name|nowRunnable
argument_list|)
expr_stmt|;
if|if
condition|(
name|nowRunnable
condition|)
block|{
name|maxRunningEnforcer
operator|.
name|trackRunnableApp
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wasRunnable
condition|)
block|{
name|maxRunningEnforcer
operator|.
name|updateRunnabilityOnAppRemoval
argument_list|(
name|attempt
argument_list|,
name|oldQueue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|findLowestCommonAncestorQueue (FSQueue queue1, FSQueue queue2)
name|FSQueue
name|findLowestCommonAncestorQueue
parameter_list|(
name|FSQueue
name|queue1
parameter_list|,
name|FSQueue
name|queue2
parameter_list|)
block|{
comment|// Because queue names include ancestors, separated by periods, we can find
comment|// the lowest common ancestors by going from the start of the names until
comment|// there's a character that doesn't match.
name|String
name|name1
init|=
name|queue1
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|queue2
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// We keep track of the last period we encounter to avoid returning root.apple
comment|// when the queues are root.applepie and root.appletart
name|int
name|lastPeriodIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|max
argument_list|(
name|name1
operator|.
name|length
argument_list|()
argument_list|,
name|name2
operator|.
name|length
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|name1
operator|.
name|length
argument_list|()
operator|<=
name|i
operator|||
name|name2
operator|.
name|length
argument_list|()
operator|<=
name|i
operator|||
name|name1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|name2
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|name1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastPeriodIndex
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|name1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|lastPeriodIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|queue1
return|;
comment|// names are identical
block|}
comment|/**    * Process resource update on a node and update Queue.    */
annotation|@
name|Override
DECL|method|updateNodeResource (RMNode nm, ResourceOption resourceOption)
specifier|public
name|void
name|updateNodeResource
parameter_list|(
name|RMNode
name|nm
parameter_list|,
name|ResourceOption
name|resourceOption
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|super
operator|.
name|updateNodeResource
argument_list|(
name|nm
argument_list|,
name|resourceOption
argument_list|)
expr_stmt|;
name|updateRootQueueMetrics
argument_list|()
expr_stmt|;
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getSchedulingResourceTypes ()
specifier|public
name|EnumSet
argument_list|<
name|SchedulerResourceTypes
argument_list|>
name|getSchedulingResourceTypes
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|,
name|SchedulerResourceTypes
operator|.
name|CPU
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPlanQueues ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPlanQueues
parameter_list|()
throws|throws
name|YarnException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|planQueues
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FSQueue
name|fsQueue
range|:
name|queueMgr
operator|.
name|getQueues
argument_list|()
control|)
block|{
name|String
name|queueName
init|=
name|fsQueue
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocConf
operator|.
name|isReservable
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|planQueues
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|planQueues
return|;
block|}
annotation|@
name|Override
DECL|method|setEntitlement (String queueName, QueueEntitlement entitlement)
specifier|public
name|void
name|setEntitlement
parameter_list|(
name|String
name|queueName
parameter_list|,
name|QueueEntitlement
name|entitlement
parameter_list|)
throws|throws
name|YarnException
block|{
name|FSLeafQueue
name|reservationQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationQueue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Target queue "
operator|+
name|queueName
operator|+
literal|" not found or is not a leaf queue."
argument_list|)
throw|;
block|}
name|reservationQueue
operator|.
name|setWeights
argument_list|(
name|entitlement
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Does MaxCapacity need to be set for fairScheduler ?
block|}
comment|/**    * Only supports removing empty leaf queues    * @param queueName name of queue to remove    * @throws YarnException if queue to remove is either not a leaf or if its    * not empty    */
annotation|@
name|Override
DECL|method|removeQueue (String queueName)
specifier|public
name|void
name|removeQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
name|FSLeafQueue
name|reservationQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservationQueue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|queueMgr
operator|.
name|removeLeafQueue
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Could not remove queue "
operator|+
name|queueName
operator|+
literal|" as "
operator|+
literal|"its either not a leaf queue or its not empty"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|handleMoveToPlanQueue (String targetQueueName)
specifier|private
name|String
name|handleMoveToPlanQueue
parameter_list|(
name|String
name|targetQueueName
parameter_list|)
block|{
name|FSQueue
name|dest
init|=
name|queueMgr
operator|.
name|getQueue
argument_list|(
name|targetQueueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
operator|&&
name|allocConf
operator|.
name|isReservable
argument_list|(
name|dest
operator|.
name|getQueueName
argument_list|()
argument_list|)
condition|)
block|{
comment|// use the default child reservation queue of the plan
name|targetQueueName
operator|=
name|getDefaultQueueForPlanQueue
argument_list|(
name|targetQueueName
argument_list|)
expr_stmt|;
block|}
return|return
name|targetQueueName
return|;
block|}
annotation|@
name|Override
DECL|method|decreaseContainer ( SchedContainerChangeRequest decreaseRequest, SchedulerApplicationAttempt attempt)
specifier|protected
name|void
name|decreaseContainer
parameter_list|(
name|SchedContainerChangeRequest
name|decreaseRequest
parameter_list|,
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|getReservableNodesRatio ()
specifier|public
name|float
name|getReservableNodesRatio
parameter_list|()
block|{
return|return
name|reservableNodesRatio
return|;
block|}
block|}
end_class

end_unit

