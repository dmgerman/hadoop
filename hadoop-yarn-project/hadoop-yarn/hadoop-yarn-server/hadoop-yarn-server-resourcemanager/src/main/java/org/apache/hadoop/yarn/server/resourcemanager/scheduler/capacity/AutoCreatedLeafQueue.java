begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AbstractManagedParentQueue
operator|.
name|AutoCreatedLeafQueueTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Leaf queues which are auto created by an underkying implementation of  * AbstractManagedParentQueue. Eg: PlanQueue for reservations or  * ManagedParentQueue for auto created dynamic queues  */
end_comment

begin_class
DECL|class|AutoCreatedLeafQueue
specifier|public
class|class
name|AutoCreatedLeafQueue
extends|extends
name|LeafQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AutoCreatedLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|AbstractManagedParentQueue
name|parent
decl_stmt|;
DECL|method|AutoCreatedLeafQueue (CapacitySchedulerContext cs, String queueName, AbstractManagedParentQueue parent)
specifier|public
name|AutoCreatedLeafQueue
parameter_list|(
name|CapacitySchedulerContext
name|cs
parameter_list|,
name|String
name|queueName
parameter_list|,
name|AbstractManagedParentQueue
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cs
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueueTemplate
name|leafQueueTemplate
init|=
name|parent
operator|.
name|getLeafQueueTemplate
argument_list|()
decl_stmt|;
name|updateApplicationAndUserLimits
argument_list|(
name|leafQueueTemplate
operator|.
name|getUserLimit
argument_list|()
argument_list|,
name|leafQueueTemplate
operator|.
name|getUserLimitFactor
argument_list|()
argument_list|,
name|leafQueueTemplate
operator|.
name|getMaxApps
argument_list|()
argument_list|,
name|leafQueueTemplate
operator|.
name|getMaxAppsPerUser
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CSQueue newlyParsedQueue, Resource clusterResource)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|newlyParsedQueue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|newlyParsedQueue
argument_list|)
expr_stmt|;
name|super
operator|.
name|reinitialize
argument_list|(
name|newlyParsedQueue
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|CSQueueUtils
operator|.
name|updateQueueStatistics
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|this
argument_list|,
name|labelManager
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueueTemplate
name|leafQueueTemplate
init|=
name|parent
operator|.
name|getLeafQueueTemplate
argument_list|()
decl_stmt|;
name|updateApplicationAndUserLimits
argument_list|(
name|leafQueueTemplate
operator|.
name|getUserLimit
argument_list|()
argument_list|,
name|leafQueueTemplate
operator|.
name|getUserLimitFactor
argument_list|()
argument_list|,
name|leafQueueTemplate
operator|.
name|getMaxApps
argument_list|()
argument_list|,
name|leafQueueTemplate
operator|.
name|getMaxAppsPerUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This methods to change capacity for a queue and adjusts its    * absoluteCapacity.    *    * @param entitlement the new entitlement for the queue (capacity,    *                    maxCapacity)    * @throws SchedulerDynamicEditException    */
DECL|method|setEntitlement (QueueEntitlement entitlement)
specifier|public
name|void
name|setEntitlement
parameter_list|(
name|QueueEntitlement
name|entitlement
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|float
name|capacity
init|=
name|entitlement
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|capacity
argument_list|<
literal|0
operator|||
name|capacity
argument_list|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Capacity demand is not in the [0,1] range: "
operator|+
name|capacity
argument_list|)
throw|;
block|}
name|setCapacity
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|setAbsoluteCapacity
argument_list|(
name|getParent
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|setMaxCapacity
argument_list|(
name|entitlement
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully changed to "
operator|+
name|capacity
operator|+
literal|" for queue "
operator|+
name|this
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validate (final CSQueue newlyParsedQueue)
specifier|private
name|void
name|validate
parameter_list|(
specifier|final
name|CSQueue
name|newlyParsedQueue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|newlyParsedQueue
operator|instanceof
name|AutoCreatedLeafQueue
operator|)
operator|||
operator|!
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error trying to reinitialize "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" from "
operator|+
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupConfigurableCapacities ()
specifier|protected
name|void
name|setupConfigurableCapacities
parameter_list|()
block|{
name|CSQueueUtils
operator|.
name|updateAndCheckCapacitiesByLabel
argument_list|(
name|getQueuePath
argument_list|()
argument_list|,
name|queueCapacities
argument_list|,
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|getQueueCapacities
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|updateApplicationAndUserLimits (int userLimit, float userLimitFactor, int maxAppsForAutoCreatedQueues, int maxAppsPerUserForAutoCreatedQueues)
specifier|private
name|void
name|updateApplicationAndUserLimits
parameter_list|(
name|int
name|userLimit
parameter_list|,
name|float
name|userLimitFactor
parameter_list|,
name|int
name|maxAppsForAutoCreatedQueues
parameter_list|,
name|int
name|maxAppsPerUserForAutoCreatedQueues
parameter_list|)
block|{
name|setUserLimit
argument_list|(
name|userLimit
argument_list|)
expr_stmt|;
name|setUserLimitFactor
argument_list|(
name|userLimitFactor
argument_list|)
expr_stmt|;
name|setMaxApplications
argument_list|(
name|maxAppsForAutoCreatedQueues
argument_list|)
expr_stmt|;
name|setMaxApplicationsPerUser
argument_list|(
name|maxAppsPerUserForAutoCreatedQueues
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

