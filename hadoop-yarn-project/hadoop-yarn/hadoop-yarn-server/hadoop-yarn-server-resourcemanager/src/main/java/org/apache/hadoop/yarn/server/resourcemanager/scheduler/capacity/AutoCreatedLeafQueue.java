begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Leaf queues which are auto created by an underlying implementation of  * AbstractManagedParentQueue. Eg: PlanQueue for reservations or  * ManagedParentQueue for auto created dynamic queues  */
end_comment

begin_class
DECL|class|AutoCreatedLeafQueue
specifier|public
class|class
name|AutoCreatedLeafQueue
extends|extends
name|AbstractAutoCreatedLeafQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AutoCreatedLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AutoCreatedLeafQueue (CapacitySchedulerContext cs, String queueName, ManagedParentQueue parent)
specifier|public
name|AutoCreatedLeafQueue
parameter_list|(
name|CapacitySchedulerContext
name|cs
parameter_list|,
name|String
name|queueName
parameter_list|,
name|ManagedParentQueue
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cs
argument_list|,
name|parent
operator|.
name|getLeafQueueConfigs
argument_list|(
name|queueName
argument_list|)
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateCapacitiesToZero
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CSQueue newlyParsedQueue, Resource clusterResource)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|newlyParsedQueue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|newlyParsedQueue
argument_list|)
expr_stmt|;
name|ManagedParentQueue
name|managedParentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|parent
decl_stmt|;
name|super
operator|.
name|reinitialize
argument_list|(
name|newlyParsedQueue
argument_list|,
name|clusterResource
argument_list|,
name|managedParentQueue
operator|.
name|getLeafQueueConfigs
argument_list|(
name|newlyParsedQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Reset capacities to 0 since reinitialize above
comment|// queueCapacities to initialize to configured capacity which might
comment|// overcommit resources from parent queue
name|updateCapacitiesToZero
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reinitializeFromTemplate (AutoCreatedLeafQueueConfig leafQueueTemplate)
specifier|public
name|void
name|reinitializeFromTemplate
parameter_list|(
name|AutoCreatedLeafQueueConfig
name|leafQueueTemplate
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
throws|,
name|IOException
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// TODO:
comment|// reinitialize only capacities for now since 0 capacity updates
comment|// can cause
comment|// abs capacity related config computations to be incorrect if we go
comment|// through reinitialize
name|QueueCapacities
name|capacities
init|=
name|leafQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
comment|//update abs capacities
name|setupConfigurableCapacities
argument_list|(
name|capacities
argument_list|)
expr_stmt|;
comment|//reset capacities for the leaf queue
name|mergeCapacities
argument_list|(
name|capacities
argument_list|)
expr_stmt|;
comment|//update queue used capacity for all the node labels
name|CSQueueUtils
operator|.
name|updateQueueStatistics
argument_list|(
name|resourceCalculator
argument_list|,
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|this
argument_list|,
name|labelManager
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//activate applications if any are pending
name|activateApplications
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mergeCapacities (QueueCapacities capacities)
specifier|private
name|void
name|mergeCapacities
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|)
block|{
for|for
control|(
name|String
name|nodeLabel
range|:
name|capacities
operator|.
name|getExistingNodeLabels
argument_list|()
control|)
block|{
name|queueCapacities
operator|.
name|setCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|capacities
operator|.
name|getCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
name|queueCapacities
operator|.
name|setAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|capacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
name|queueCapacities
operator|.
name|setMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|capacities
operator|.
name|getMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
name|queueCapacities
operator|.
name|setAbsoluteMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|,
name|capacities
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resourceByLabel
init|=
name|labelManager
operator|.
name|getResourceByLabel
argument_list|(
name|nodeLabel
argument_list|,
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
decl_stmt|;
name|getQueueResourceQuotas
argument_list|()
operator|.
name|setEffectiveMinResource
argument_list|(
name|nodeLabel
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|resourceByLabel
argument_list|,
name|queueCapacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getQueueResourceQuotas
argument_list|()
operator|.
name|setEffectiveMaxResource
argument_list|(
name|nodeLabel
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|resourceByLabel
argument_list|,
name|queueCapacities
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateConfigurations (AutoCreatedLeafQueueConfig template)
specifier|public
name|void
name|validateConfigurations
parameter_list|(
name|AutoCreatedLeafQueueConfig
name|template
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|QueueCapacities
name|capacities
init|=
name|template
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|capacities
operator|.
name|getExistingNodeLabels
argument_list|()
control|)
block|{
name|float
name|capacity
init|=
name|capacities
operator|.
name|getCapacity
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|capacity
argument_list|<
literal|0
operator|||
name|capacity
argument_list|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|SchedulerDynamicEditException
argument_list|(
literal|"Capacity demand is not in the [0,1] range: "
operator|+
name|capacity
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|validate (final CSQueue newlyParsedQueue)
specifier|private
name|void
name|validate
parameter_list|(
specifier|final
name|CSQueue
name|newlyParsedQueue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|newlyParsedQueue
operator|instanceof
name|AutoCreatedLeafQueue
operator|)
operator|||
operator|!
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error trying to reinitialize "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" from "
operator|+
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|updateCapacitiesToZero ()
specifier|private
name|void
name|updateCapacitiesToZero
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|String
name|nodeLabel
range|:
name|parent
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getExistingNodeLabels
argument_list|()
control|)
block|{
comment|//TODO - update to use getMaximumCapacity(nodeLabel) in YARN-7574
name|setEntitlement
argument_list|(
name|nodeLabel
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
literal|0.0f
argument_list|,
name|parent
operator|.
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

