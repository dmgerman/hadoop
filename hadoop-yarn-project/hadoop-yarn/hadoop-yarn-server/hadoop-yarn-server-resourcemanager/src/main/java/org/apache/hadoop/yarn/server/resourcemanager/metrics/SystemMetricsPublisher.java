begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The class that helps RM publish metrics to the timeline server. RM will  * always invoke the methods of this class regardless the service is enabled or  * not. If it is disabled, publishing requests will be ignored silently.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SystemMetricsPublisher
specifier|public
class|class
name|SystemMetricsPublisher
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|publishSystemMetrics
specifier|private
name|boolean
name|publishSystemMetrics
decl_stmt|;
DECL|field|publishContainerMetrics
specifier|private
name|boolean
name|publishContainerMetrics
decl_stmt|;
DECL|field|rmContext
specifier|protected
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|SystemMetricsPublisher (RMContext rmContext)
specifier|public
name|SystemMetricsPublisher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|publishSystemMetrics
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|TimelineServicePublisher
name|timelineServicePublisher
init|=
name|getTimelineServicePublisher
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|timelineServicePublisher
operator|!=
literal|null
condition|)
block|{
name|addService
argument_list|(
name|timelineServicePublisher
argument_list|)
expr_stmt|;
comment|// init required to be called so that other methods of
comment|// TimelineServicePublisher can be utilized
name|timelineServicePublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|timelineServicePublisher
argument_list|)
expr_stmt|;
name|publishContainerMetrics
operator|=
name|timelineServicePublisher
operator|.
name|publishRMContainerMetrics
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SystemMetricsEventType
operator|.
name|class
argument_list|,
name|timelineServicePublisher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TimelineServicePublisher is not configured"
argument_list|)
expr_stmt|;
name|publishSystemMetrics
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"YARN system metrics publishing service is enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"YARN system metrics publishing service is not enabled"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createDispatcher (TimelineServicePublisher timelineServicePublisher)
name|Dispatcher
name|createDispatcher
parameter_list|(
name|TimelineServicePublisher
name|timelineServicePublisher
parameter_list|)
block|{
return|return
name|timelineServicePublisher
operator|.
name|getDispatcher
argument_list|()
return|;
block|}
DECL|method|getTimelineServicePublisher (Configuration conf)
name|TimelineServicePublisher
name|getTimelineServicePublisher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimelineServiceV1Publisher
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimelineServiceV2Publisher
argument_list|(
name|rmContext
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appCreated (RMApp app, long createdTime)
specifier|public
name|void
name|appCreated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|long
name|createdTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|ApplicationSubmissionContext
name|appSubmissionContext
init|=
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationCreatedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|createdTime
argument_list|,
name|app
operator|.
name|getApplicationTags
argument_list|()
argument_list|,
name|appSubmissionContext
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|appSubmissionContext
operator|.
name|getPriority
argument_list|()
argument_list|,
name|app
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|,
name|app
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|,
name|app
operator|.
name|getCallerContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appUpdated (RMApp app, long updatedTime)
specifier|public
name|void
name|appUpdated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|long
name|updatedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationUpdatedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|updatedTime
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appFinished (RMApp app, RMAppState state, long finishedTime)
specifier|public
name|void
name|appFinished
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|RMAppState
name|state
parameter_list|,
name|long
name|finishedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|RMServerUtils
operator|.
name|createApplicationState
argument_list|(
name|state
argument_list|)
argument_list|,
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|finishedTime
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
argument_list|,
operator|(
name|RMAppImpl
operator|)
name|app
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appACLsUpdated (RMApp app, String appViewACLs, long updatedTime)
specifier|public
name|void
name|appACLsUpdated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|String
name|appViewACLs
parameter_list|,
name|long
name|updatedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationACLsUpdatedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appViewACLs
operator|==
literal|null
condition|?
literal|""
else|:
name|appViewACLs
argument_list|,
name|updatedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appStateUpdated (RMApp app, YarnApplicationState appState, long updatedTime)
specifier|public
name|void
name|appStateUpdated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|YarnApplicationState
name|appState
parameter_list|,
name|long
name|updatedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicaitonStateUpdatedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appState
argument_list|,
name|updatedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appAttemptRegistered (RMAppAttempt appAttempt, long registeredTime)
specifier|public
name|void
name|appAttemptRegistered
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|long
name|registeredTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|ContainerId
name|container
init|=
operator|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRegisteredEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|,
name|container
argument_list|,
name|registeredTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appAttemptFinished (RMAppAttempt appAttempt, RMAppAttemptState appAttemtpState, RMApp app, long finishedTime)
specifier|public
name|void
name|appAttemptFinished
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|RMAppAttemptState
name|appAttemtpState
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|long
name|finishedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|ContainerId
name|container
init|=
operator|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptFinishedEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
comment|// app will get the final status from app attempt, or create one
comment|// based on app state if it doesn't exist
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|RMServerUtils
operator|.
name|createApplicationAttemptState
argument_list|(
name|appAttemtpState
argument_list|)
argument_list|,
name|finishedTime
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerCreated (RMContainer container, long createdTime)
specifier|public
name|void
name|containerCreated
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|long
name|createdTime
parameter_list|)
block|{
if|if
condition|(
name|publishContainerMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerCreatedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedNode
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedPriority
argument_list|()
argument_list|,
name|createdTime
argument_list|,
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerFinished (RMContainer container, long finishedTime)
specifier|public
name|void
name|containerFinished
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|long
name|finishedTime
parameter_list|)
block|{
if|if
condition|(
name|publishContainerMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerFinishedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|finishedTime
argument_list|,
name|container
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|isPublishContainerMetrics ()
name|boolean
name|isPublishContainerMetrics
parameter_list|()
block|{
return|return
name|publishContainerMetrics
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDispatcher ()
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
DECL|interface|TimelineServicePublisher
interface|interface
name|TimelineServicePublisher
extends|extends
name|Service
block|{
comment|/**      * @return the Dispatcher which needs to be used to dispatch events      */
DECL|method|getDispatcher ()
name|Dispatcher
name|getDispatcher
parameter_list|()
function_decl|;
comment|/**      * @return true if RMContainerMetricsNeeds to be sent      */
DECL|method|publishRMContainerMetrics ()
name|boolean
name|publishRMContainerMetrics
parameter_list|()
function_decl|;
comment|/**      * @return EventHandler which needs to be registered to the dispatcher to      *         handle the SystemMetricsEvent      */
DECL|method|getEventHandler ()
name|EventHandler
argument_list|<
name|SystemMetricsEvent
argument_list|>
name|getEventHandler
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

