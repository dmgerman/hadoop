begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|AppAttemptMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ContainerMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_comment
comment|/**  * The class that helps RM publish metrics to the timeline server. RM will  * always invoke the methods of this class regardless the service is enabled or  * not. If it is disabled, publishing requests will be ignored silently.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SystemMetricsPublisher
specifier|public
class|class
name|SystemMetricsPublisher
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|client
specifier|private
name|TimelineClient
name|client
decl_stmt|;
DECL|field|publishSystemMetrics
specifier|private
name|boolean
name|publishSystemMetrics
decl_stmt|;
DECL|method|SystemMetricsPublisher ()
specifier|public
name|SystemMetricsPublisher
parameter_list|()
block|{
name|super
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|publishSystemMetrics
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|client
operator|=
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SystemMetricsEventType
operator|.
name|class
argument_list|,
operator|new
name|ForwardingEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"YARN system metrics publishing service is enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"YARN system metrics publishing service is not enabled"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appCreated (RMApp app, long createdTime)
specifier|public
name|void
name|appCreated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|long
name|createdTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationCreatedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|createdTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appFinished (RMApp app, RMAppState state, long finishedTime)
specifier|public
name|void
name|appFinished
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|RMAppState
name|state
parameter_list|,
name|long
name|finishedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|RMServerUtils
operator|.
name|createApplicationState
argument_list|(
name|state
argument_list|)
argument_list|,
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|finishedTime
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appACLsUpdated (RMApp app, String appViewACLs, long updatedTime)
specifier|public
name|void
name|appACLsUpdated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|String
name|appViewACLs
parameter_list|,
name|long
name|updatedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationACLsUpdatedEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appViewACLs
operator|==
literal|null
condition|?
literal|""
else|:
name|appViewACLs
argument_list|,
name|updatedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appAttemptRegistered (RMAppAttempt appAttempt, long registeredTime)
specifier|public
name|void
name|appAttemptRegistered
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|long
name|registeredTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRegisteredEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|registeredTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|appAttemptFinished (RMAppAttempt appAttempt, RMAppAttemptState appAttemtpState, RMApp app, long finishedTime)
specifier|public
name|void
name|appAttemptFinished
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|RMAppAttemptState
name|appAttemtpState
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|long
name|finishedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptFinishedEvent
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
comment|// app will get the final status from app attempt, or create one
comment|// based on app state if it doesn't exist
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|RMServerUtils
operator|.
name|createApplicationAttemptState
argument_list|(
name|appAttemtpState
argument_list|)
argument_list|,
name|finishedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerCreated (RMContainer container, long createdTime)
specifier|public
name|void
name|containerCreated
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|long
name|createdTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerCreatedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedNode
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedPriority
argument_list|()
argument_list|,
name|createdTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerFinished (RMContainer container, long finishedTime)
specifier|public
name|void
name|containerFinished
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|long
name|finishedTime
parameter_list|)
block|{
if|if
condition|(
name|publishSystemMetrics
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerFinishedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|finishedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDispatcher (Configuration conf)
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|MultiThreadedDispatcher
name|dispatcher
init|=
operator|new
name|MultiThreadedDispatcher
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
DECL|method|handleSystemMetricsEvent ( SystemMetricsEvent event)
specifier|protected
name|void
name|handleSystemMetricsEvent
parameter_list|(
name|SystemMetricsEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APP_CREATED
case|:
name|publishApplicationCreatedEvent
argument_list|(
operator|(
name|ApplicationCreatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_FINISHED
case|:
name|publishApplicationFinishedEvent
argument_list|(
operator|(
name|ApplicationFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ACLS_UPDATED
case|:
name|publishApplicationACLsUpdatedEvent
argument_list|(
operator|(
name|ApplicationACLsUpdatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_REGISTERED
case|:
name|publishAppAttemptRegisteredEvent
argument_list|(
operator|(
name|AppAttemptRegisteredEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_FINISHED
case|:
name|publishAppAttemptFinishedEvent
argument_list|(
operator|(
name|AppAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_CREATED
case|:
name|publishContainerCreatedEvent
argument_list|(
operator|(
name|ContainerCreatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_FINISHED
case|:
name|publishContainerFinishedEvent
argument_list|(
operator|(
name|ContainerFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown SystemMetricsEvent type: "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|publishApplicationCreatedEvent (ApplicationCreatedEvent event)
specifier|private
name|void
name|publishApplicationCreatedEvent
parameter_list|(
name|ApplicationCreatedEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createApplicationEntity
argument_list|(
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|NAME_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getApplicationName
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|SUBMITTED_TIME_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getSubmittedTime
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setOtherInfo
argument_list|(
name|entityInfo
argument_list|)
expr_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|publishApplicationFinishedEvent (ApplicationFinishedEvent event)
specifier|private
name|void
name|publishApplicationFinishedEvent
parameter_list|(
name|ApplicationFinishedEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createApplicationEntity
argument_list|(
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|,
name|event
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|,
name|event
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|,
name|event
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getLatestApplicationAttemptId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|eventInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|LATEST_APP_ATTEMPT_EVENT_INFO
argument_list|,
name|event
operator|.
name|getLatestApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RMAppMetrics
name|appMetrics
init|=
name|event
operator|.
name|getAppMetrics
argument_list|()
decl_stmt|;
name|entity
operator|.
name|addOtherInfo
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_METRICS
argument_list|,
name|appMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addOtherInfo
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_MEM_METRICS
argument_list|,
name|appMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setEventInfo
argument_list|(
name|eventInfo
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|publishApplicationACLsUpdatedEvent ( ApplicationACLsUpdatedEvent event)
specifier|private
name|void
name|publishApplicationACLsUpdatedEvent
parameter_list|(
name|ApplicationACLsUpdatedEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createApplicationEntity
argument_list|(
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_VIEW_ACLS_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getViewAppACLs
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setOtherInfo
argument_list|(
name|entityInfo
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|ACLS_UPDATED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|createApplicationEntity ( ApplicationId applicationId)
specifier|private
specifier|static
name|TimelineEntity
name|createApplicationEntity
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setEntityType
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntityId
argument_list|(
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
specifier|private
name|void
DECL|method|publishAppAttemptRegisteredEvent (AppAttemptRegisteredEvent event)
name|publishAppAttemptRegisteredEvent
parameter_list|(
name|AppAttemptRegisteredEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createAppAttemptEntity
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|REGISTERED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_EVENT_INFO
argument_list|,
name|event
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_EVENT_INFO
argument_list|,
name|event
operator|.
name|getOriginalTrackingURL
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|HOST_EVENT_INFO
argument_list|,
name|event
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|RPC_PORT_EVENT_INFO
argument_list|,
name|event
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_EVENT_INFO
argument_list|,
name|event
operator|.
name|getMasterContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setEventInfo
argument_list|(
name|eventInfo
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|publishAppAttemptFinishedEvent (AppAttemptFinishedEvent event)
specifier|private
name|void
name|publishAppAttemptFinishedEvent
parameter_list|(
name|AppAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createAppAttemptEntity
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_EVENT_INFO
argument_list|,
name|event
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_EVENT_INFO
argument_list|,
name|event
operator|.
name|getOriginalTrackingURL
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|,
name|event
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|,
name|event
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|,
name|event
operator|.
name|getYarnApplicationAttemptState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setEventInfo
argument_list|(
name|eventInfo
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|createAppAttemptEntity ( ApplicationAttemptId appAttemptId)
specifier|private
specifier|static
name|TimelineEntity
name|createAppAttemptEntity
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setEntityType
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntityId
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addPrimaryFilter
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|PARENT_PRIMARY_FILTER
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
DECL|method|publishContainerCreatedEvent (ContainerCreatedEvent event)
specifier|private
name|void
name|publishContainerCreatedEvent
parameter_list|(
name|ContainerCreatedEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createContainerEntity
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_MEMORY_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getAllocatedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_VCORE_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getAllocatedResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|entityInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PRIORITY_ENTITY_INFO
argument_list|,
name|event
operator|.
name|getAllocatedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setOtherInfo
argument_list|(
name|entityInfo
argument_list|)
expr_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|ContainerMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|publishContainerFinishedEvent (ContainerFinishedEvent event)
specifier|private
name|void
name|publishContainerFinishedEvent
parameter_list|(
name|ContainerFinishedEvent
name|event
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
name|createContainerEntity
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|ContainerMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|,
name|event
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|EXIT_STATUS_EVENT_INFO
argument_list|,
name|event
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|put
argument_list|(
name|ContainerMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|,
name|event
operator|.
name|getContainerState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setEventInfo
argument_list|(
name|eventInfo
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|putEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerEntity ( ContainerId containerId)
specifier|private
specifier|static
name|TimelineEntity
name|createContainerEntity
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setEntityType
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntityId
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addPrimaryFilter
argument_list|(
name|ContainerMetricsConstants
operator|.
name|PARENT_PRIMARIY_FILTER
argument_list|,
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
DECL|method|putEntity (TimelineEntity entity)
specifier|private
name|void
name|putEntity
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Publishing the entity "
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|", JSON-style content: "
operator|+
name|TimelineUtils
operator|.
name|dumpTimelineRecordtoJSON
argument_list|(
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|putEntities
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when publishing entity ["
operator|+
name|entity
operator|.
name|getEntityType
argument_list|()
operator|+
literal|","
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * EventHandler implementation which forward events to SystemMetricsPublisher.    * Making use of it, SystemMetricsPublisher can avoid to have a public handle    * method.    */
DECL|class|ForwardingEventHandler
specifier|private
specifier|final
class|class
name|ForwardingEventHandler
implements|implements
name|EventHandler
argument_list|<
name|SystemMetricsEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (SystemMetricsEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SystemMetricsEvent
name|event
parameter_list|)
block|{
name|handleSystemMetricsEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|MultiThreadedDispatcher
specifier|protected
specifier|static
class|class
name|MultiThreadedDispatcher
extends|extends
name|CompositeService
implements|implements
name|Dispatcher
block|{
DECL|field|dispatchers
specifier|private
name|List
argument_list|<
name|AsyncDispatcher
argument_list|>
name|dispatchers
init|=
operator|new
name|ArrayList
argument_list|<
name|AsyncDispatcher
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MultiThreadedDispatcher (int num)
specifier|public
name|MultiThreadedDispatcher
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|super
argument_list|(
name|MultiThreadedDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|AsyncDispatcher
name|dispatcher
init|=
name|createDispatcher
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|add
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
operator|new
name|CompositEventHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|register (Class<? extends Enum> eventType, EventHandler handler)
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{
for|for
control|(
name|AsyncDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
name|dispatcher
operator|.
name|register
argument_list|(
name|eventType
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setDrainEventsOnStop ()
specifier|public
name|void
name|setDrainEventsOnStop
parameter_list|()
block|{
for|for
control|(
name|AsyncDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CompositEventHandler
specifier|private
class|class
name|CompositEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// Use hashCode (of ApplicationId) to dispatch the event to the child
comment|// dispatcher, such that all the writing events of one application will
comment|// be handled by one thread, the scheduled order of the these events
comment|// will be preserved
name|int
name|index
init|=
operator|(
name|event
operator|.
name|hashCode
argument_list|()
operator|&
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|%
name|dispatchers
operator|.
name|size
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDispatcher ()
specifier|protected
name|AsyncDispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|AsyncDispatcher
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

