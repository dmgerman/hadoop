begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NewApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CredentialsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FairSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FifoSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LocalResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|StatisticsItemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/cluster"
argument_list|)
DECL|class|RMWebServices
specifier|public
class|class
name|RMWebServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMWebServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY
init|=
literal|""
decl_stmt|;
DECL|field|ANY
specifier|private
specifier|static
specifier|final
name|String
name|ANY
init|=
literal|"*"
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|response
specifier|private
annotation|@
name|Context
name|HttpServletResponse
name|response
decl_stmt|;
DECL|field|DELEGATION_TOKEN_HEADER
specifier|public
specifier|final
specifier|static
name|String
name|DELEGATION_TOKEN_HEADER
init|=
literal|"Hadoop-YARN-RM-Delegation-Token"
decl_stmt|;
annotation|@
name|Inject
DECL|method|RMWebServices (final ResourceManager rm, Configuration conf)
specifier|public
name|RMWebServices
parameter_list|(
specifier|final
name|ResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|RMWebServices (ResourceManager rm, Configuration conf, HttpServletResponse response)
name|RMWebServices
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|this
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|hasAccess (RMApp app, HttpServletRequest hsr)
specifier|protected
name|Boolean
name|hasAccess
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
comment|// Check for the authorization.
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|this
operator|.
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|||
name|this
operator|.
name|rm
operator|.
name|getQueueACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|//clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|get ()
specifier|public
name|ClusterInfo
name|get
parameter_list|()
block|{
return|return
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/info"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClusterInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/metrics"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterMetricsInfo ()
specifier|public
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClusterMetricsInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/scheduler"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getSchedulerInfo ()
specifier|public
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerInfo
name|sinfo
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
name|CSQueue
name|root
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|sinfo
operator|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FairScheduler
condition|)
block|{
name|FairScheduler
name|fs
init|=
operator|(
name|FairScheduler
operator|)
name|rs
decl_stmt|;
name|sinfo
operator|=
operator|new
name|FairSchedulerInfo
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FifoScheduler
condition|)
block|{
name|sinfo
operator|=
operator|new
name|FifoSchedulerInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Unknown scheduler configured"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SchedulerTypeInfo
argument_list|(
name|sinfo
argument_list|)
return|;
block|}
comment|/**    * Returns all nodes in the cluster. If the states param is given, returns    * all nodes that are in the comma-separated list of states.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNodes (@ueryParamR) String states)
specifier|public
name|NodesInfo
name|getNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|String
name|states
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|acceptedStates
decl_stmt|;
if|if
condition|(
name|states
operator|==
literal|null
condition|)
block|{
name|acceptedStates
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acceptedStates
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|stateStr
range|:
name|states
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|acceptedStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|valueOf
argument_list|(
name|stateStr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|acceptedStates
argument_list|)
decl_stmt|;
name|NodesInfo
name|nodesInfo
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|rmNodes
control|)
block|{
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|rmNode
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|)
operator|.
name|contains
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|nodesInfo
operator|.
name|add
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|nodesInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes/{nodeId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNode (@athParamR) String nodeId)
specifier|public
name|NodeInfo
name|getNode
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"nodeId"
argument_list|)
name|String
name|nodeId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeId
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|boolean
name|isInactive
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
name|ni
operator|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
name|isInactive
operator|=
literal|true
expr_stmt|;
block|}
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|ni
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInactive
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getApps (@ontext HttpServletRequest hsr, @QueryParam(R) String stateQuery, @QueryParam(R) Set<String> statesQuery, @QueryParam(R) String finalStatusQuery, @QueryParam(R) String userQuery, @QueryParam(R) String queueQuery, @QueryParam(R) String count, @QueryParam(R) String startedBegin, @QueryParam(R) String startedEnd, @QueryParam(R) String finishBegin, @QueryParam(R) String finishEnd, @QueryParam(R) Set<String> applicationTypes, @QueryParam(R) Set<String> applicationTags)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finalStatus"
argument_list|)
name|String
name|finalStatusQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"queue"
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|count
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|)
name|String
name|finishEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTypes"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTags"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|)
block|{
name|boolean
name|checkCount
init|=
literal|false
decl_stmt|;
name|boolean
name|checkStart
init|=
literal|false
decl_stmt|;
name|boolean
name|checkEnd
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppTypes
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppStates
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppTags
init|=
literal|false
decl_stmt|;
name|long
name|countNum
init|=
literal|0
decl_stmt|;
comment|// set values suitable in case both of begin/end not specified
name|long
name|sBegin
init|=
literal|0
decl_stmt|;
name|long
name|sEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|fBegin
init|=
literal|0
decl_stmt|;
name|long
name|fEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
operator|!
name|count
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkCount
operator|=
literal|true
expr_stmt|;
name|countNum
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|countNum
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"limit value must be greater then 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedBegin
operator|!=
literal|null
operator|&&
operator|!
name|startedBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|sBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedEnd
operator|!=
literal|null
operator|&&
operator|!
name|startedEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|sEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sBegin
operator|>
name|sEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than startTimeBegin"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishBegin
operator|!=
literal|null
operator|&&
operator|!
name|finishBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|fBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|finishEnd
operator|!=
literal|null
operator|&&
operator|!
name|finishEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|fEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fBegin
operator|>
name|fEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than finishTimeBegin"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
name|parseQueries
argument_list|(
name|applicationTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppTypes
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
name|parseQueries
argument_list|(
name|applicationTags
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppTags
operator|=
literal|true
expr_stmt|;
block|}
comment|// stateQuery is deprecated.
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|statesQuery
operator|.
name|add
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appStates
init|=
name|parseQueries
argument_list|(
name|statesQuery
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppStates
operator|=
literal|true
expr_stmt|;
block|}
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkStart
condition|)
block|{
name|request
operator|.
name|setStartRange
argument_list|(
name|sBegin
argument_list|,
name|sEnd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkEnd
condition|)
block|{
name|request
operator|.
name|setFinishRange
argument_list|(
name|fBegin
argument_list|,
name|fEnd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkCount
condition|)
block|{
name|request
operator|.
name|setLimit
argument_list|(
name|countNum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkAppTypes
condition|)
block|{
name|request
operator|.
name|setApplicationTypes
argument_list|(
name|appTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkAppTags
condition|)
block|{
name|request
operator|.
name|setApplicationTags
argument_list|(
name|appTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkAppStates
condition|)
block|{
name|request
operator|.
name|setApplicationStates
argument_list|(
name|appStates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queueQuery
operator|!=
literal|null
operator|&&
operator|!
name|queueQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
comment|// validate queue exists
try|try
block|{
name|cs
operator|.
name|getQueueInfo
argument_list|(
name|queueQuery
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
name|queueQuery
argument_list|)
expr_stmt|;
name|request
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userQuery
operator|!=
literal|null
operator|&&
operator|!
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
name|userQuery
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUsers
argument_list|(
name|users
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appReports
operator|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request
argument_list|,
literal|false
argument_list|)
operator|.
name|getApplicationList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to retrieve apps from ClientRMService"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unable to retrieve apps from ClientRMService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|appReports
control|)
block|{
name|RMApp
name|rmapp
init|=
name|apps
operator|.
name|get
argument_list|(
name|report
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmapp
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|finalStatusQuery
operator|!=
literal|null
operator|&&
operator|!
name|finalStatusQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|finalStatusQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|finalStatusQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|rm
argument_list|,
name|rmapp
argument_list|,
name|hasAccess
argument_list|(
name|rmapp
argument_list|,
name|hsr
argument_list|)
argument_list|,
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|allApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
return|return
name|allApps
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/appstatistics"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppStatistics ( @ontext HttpServletRequest hsr, @QueryParam(R) Set<String> stateQueries, @QueryParam(R) Set<String> typeQueries)
specifier|public
name|ApplicationStatisticsInfo
name|getAppStatistics
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|stateQueries
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTypes"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|typeQueries
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
comment|// parse the params and build the scoreboard
comment|// converting state/type name to lowercase
name|Set
argument_list|<
name|String
argument_list|>
name|states
init|=
name|parseQueries
argument_list|(
name|stateQueries
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
name|parseQueries
argument_list|(
name|typeQueries
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if no types, counts the applications of any types
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"# of applicationTypes = "
operator|+
name|types
operator|.
name|size
argument_list|()
operator|+
literal|", we temporarily support at most one applicationType"
argument_list|)
throw|;
block|}
comment|// if no states, returns the counts of all RMAppStates
if|if
condition|(
name|states
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|YarnApplicationState
name|state
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|states
operator|.
name|add
argument_list|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// in case we extend to multiple applicationTypes in the future
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
init|=
name|buildScoreboard
argument_list|(
name|states
argument_list|,
name|types
argument_list|)
decl_stmt|;
comment|// go through the apps in RM to count the numbers, ignoring the case of
comment|// the state/type name
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
for|for
control|(
name|RMApp
name|rmapp
range|:
name|apps
operator|.
name|values
argument_list|()
control|)
block|{
name|YarnApplicationState
name|state
init|=
name|rmapp
operator|.
name|createApplicationState
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|rmapp
operator|.
name|getApplicationType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|states
operator|.
name|contains
argument_list|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|ANY
argument_list|)
condition|)
block|{
name|countApp
argument_list|(
name|scoreboard
argument_list|,
name|state
argument_list|,
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|countApp
argument_list|(
name|scoreboard
argument_list|,
name|state
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// fill the response object
name|ApplicationStatisticsInfo
name|appStatInfo
init|=
operator|new
name|ApplicationStatisticsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|partScoreboard
range|:
name|scoreboard
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|statEntry
range|:
name|partScoreboard
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StatisticsItemInfo
name|statItem
init|=
operator|new
name|StatisticsItemInfo
argument_list|(
name|partScoreboard
operator|.
name|getKey
argument_list|()
argument_list|,
name|statEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|statEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|appStatInfo
operator|.
name|add
argument_list|(
name|statItem
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appStatInfo
return|;
block|}
DECL|method|parseQueries ( Set<String> queries, boolean isState)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseQueries
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queries
parameter_list|,
name|boolean
name|isState
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|queries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|paramStrs
init|=
name|query
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|paramStr
range|:
name|paramStrs
control|)
block|{
if|if
condition|(
name|paramStr
operator|!=
literal|null
operator|&&
operator|!
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isState
condition|)
block|{
try|try
block|{
comment|// enum string is in the uppercase
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|YarnApplicationState
index|[]
name|stateArray
init|=
name|YarnApplicationState
operator|.
name|values
argument_list|()
decl_stmt|;
name|String
name|allAppStates
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|stateArray
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid application-state "
operator|+
name|paramStr
operator|.
name|trim
argument_list|()
operator|+
literal|" specified. It should be one of "
operator|+
name|allAppStates
argument_list|)
throw|;
block|}
block|}
name|params
operator|.
name|add
argument_list|(
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|buildScoreboard ( Set<String> states, Set<String> types)
specifier|private
specifier|static
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|buildScoreboard
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|states
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
init|=
operator|new
name|HashMap
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// default states will result in enumerating all YarnApplicationStates
assert|assert
operator|!
name|states
operator|.
name|isEmpty
argument_list|()
assert|;
for|for
control|(
name|String
name|state
range|:
name|states
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|partScoreboard
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|scoreboard
operator|.
name|put
argument_list|(
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|,
name|partScoreboard
argument_list|)
expr_stmt|;
comment|// types is verified no to be empty
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|partScoreboard
operator|.
name|put
argument_list|(
name|type
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scoreboard
return|;
block|}
DECL|method|countApp ( Map<YarnApplicationState, Map<String, Long>> scoreboard, YarnApplicationState state, String type)
specifier|private
specifier|static
name|void
name|countApp
parameter_list|(
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
parameter_list|,
name|YarnApplicationState
name|state
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|partScoreboard
init|=
name|scoreboard
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Long
name|count
init|=
name|partScoreboard
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|partScoreboard
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
operator|+
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getApp (@ontext HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|id
decl_stmt|;
name|id
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is null"
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AppInfo
argument_list|(
name|rm
argument_list|,
name|app
argument_list|,
name|hasAccess
argument_list|(
name|app
argument_list|,
name|hsr
argument_list|)
argument_list|,
name|hsr
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppAttempts (@athParamR) String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|id
decl_stmt|;
name|id
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is null"
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|AppAttemptsInfo
name|appAttemptsInfo
init|=
operator|new
name|AppAttemptsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AppAttemptInfo
name|attemptInfo
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|attempt
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|appAttemptsInfo
operator|.
name|add
argument_list|(
name|attemptInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttemptsInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/state"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppState (@ontext HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|AppState
name|getAppState
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to get state of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|AppState
name|ret
init|=
operator|new
name|AppState
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setState
argument_list|(
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|// can't return POJO because we can't control the status code
comment|// it's always set to 200 when we need to allow it to be set
comment|// to 202
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/state"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|updateAppState (AppState targetState, @Context HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|Response
name|updateAppState
parameter_list|(
name|AppState
name|targetState
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to kill an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|targetState
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
comment|// user is attempting to change state. right we only
comment|// allow users to kill the app
if|if
condition|(
name|targetState
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|killApp
argument_list|(
name|app
argument_list|,
name|callerUGI
argument_list|,
name|hsr
argument_list|)
return|;
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Only '"
operator|+
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
operator|+
literal|"' is allowed as a target state."
argument_list|)
throw|;
block|}
name|AppState
name|ret
init|=
operator|new
name|AppState
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setState
argument_list|(
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/get-node-to-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNodeToLabels (@ontext HttpServletRequest hsr)
specifier|public
name|NodeToLabelsInfo
name|getNodeToLabels
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|NodeToLabelsInfo
name|ntl
init|=
operator|new
name|NodeToLabelsInfo
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeLabelsInfo
argument_list|>
name|ntlMap
init|=
name|ntl
operator|.
name|getNodeToLabels
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeIdToLabels
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getNodeLabels
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nitle
range|:
name|nodeIdToLabels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ntlMap
operator|.
name|put
argument_list|(
name|nitle
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|NodeLabelsInfo
argument_list|(
name|nitle
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ntl
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/replace-node-to-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|replaceLabelsOnNodes ( final NodeToLabelsInfo newNodeToLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|replaceLabelsOnNodes
parameter_list|(
specifier|final
name|NodeToLabelsInfo
name|newNodeToLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated for"
operator|+
literal|" post to .../replace-node-to-labels"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to .../replace-node-to-labels "
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeIdToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeLabelsInfo
argument_list|>
name|nitle
range|:
name|newNodeToLabels
operator|.
name|getNodeToLabels
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nodeIdToLabels
operator|.
name|put
argument_list|(
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nitle
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|nitle
operator|.
name|getValue
argument_list|()
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|nodeIdToLabels
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/get-node-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterNodeLabels (@ontext HttpServletRequest hsr)
specifier|public
name|NodeLabelsInfo
name|getClusterNodeLabels
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|NodeLabelsInfo
name|ret
init|=
operator|new
name|NodeLabelsInfo
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getClusterNodeLabels
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/add-node-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|addToClusterNodeLabels (final NodeLabelsInfo newNodeLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|addToClusterNodeLabels
parameter_list|(
specifier|final
name|NodeLabelsInfo
name|newNodeLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated for"
operator|+
literal|" post to .../add-node-labels"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to .../add-node-labels "
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|newNodeLabels
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/remove-node-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|removeFromCluserNodeLabels (final NodeLabelsInfo oldNodeLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|removeFromCluserNodeLabels
parameter_list|(
specifier|final
name|NodeLabelsInfo
name|oldNodeLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated for"
operator|+
literal|" post to .../remove-node-labels"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to .../remove-node-labels "
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldNodeLabels
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes/{nodeId}/get-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getLabelsOnNode (@ontext HttpServletRequest hsr, @PathParam(R) String nodeId)
specifier|public
name|NodeLabelsInfo
name|getLabelsOnNode
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"nodeId"
argument_list|)
name|String
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeLabelsInfo
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getLabelsOnNode
argument_list|(
name|nid
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/nodes/{nodeId}/replace-labels"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|replaceLabelsOnNode (NodeLabelsInfo newNodeLabelsInfo, @Context HttpServletRequest hsr, @PathParam(R) String nodeId)
specifier|public
name|Response
name|replaceLabelsOnNode
parameter_list|(
name|NodeLabelsInfo
name|newNodeLabelsInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"nodeId"
argument_list|)
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated for"
operator|+
literal|" post to .../nodes/nodeid/replace-labels"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to .../nodes/nodeid/replace-labels"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newLabelsForNode
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|newLabelsForNode
operator|.
name|put
argument_list|(
name|nid
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|newNodeLabelsInfo
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|newLabelsForNode
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|killApp (RMApp app, UserGroupInformation callerUGI, HttpServletRequest hsr)
specifier|protected
name|Response
name|killApp
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"app cannot be null"
argument_list|)
throw|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|ApplicationId
name|appid
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|KillApplicationResponse
name|resp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KillApplicationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KillApplicationResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|KillApplicationRequest
name|req
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appid
argument_list|)
decl_stmt|;
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
comment|// if the root cause is a permissions issue
comment|// bubble that up to the user
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|ue
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|String
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"Unauthorized attempt to kill appid "
operator|+
name|appId
operator|+
literal|" by remote user "
operator|+
name|userName
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
name|AppState
name|ret
init|=
operator|new
name|AppState
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setState
argument_list|(
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resp
operator|.
name|getIsKillCompleted
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"RMWebService"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
name|hsr
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/queue"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppQueue (@ontext HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|AppQueue
name|getAppQueue
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"UNKNOWN-USER"
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to get state of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|AppQueue
name|ret
init|=
operator|new
name|AppQueue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/queue"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|updateAppQueue (AppQueue targetQueue, @Context HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|Response
name|updateAppQueue
parameter_list|(
name|AppQueue
name|targetQueue
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to move an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|app
operator|.
name|getQueue
argument_list|()
operator|.
name|equals
argument_list|(
name|targetQueue
operator|.
name|getQueue
argument_list|()
argument_list|)
condition|)
block|{
comment|// user is attempting to change queue.
return|return
name|moveApp
argument_list|(
name|app
argument_list|,
name|callerUGI
argument_list|,
name|targetQueue
operator|.
name|getQueue
argument_list|()
argument_list|)
return|;
block|}
name|AppQueue
name|ret
init|=
operator|new
name|AppQueue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|moveApp (RMApp app, UserGroupInformation callerUGI, String targetQueue)
specifier|protected
name|Response
name|moveApp
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|String
name|targetQueue
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"app cannot be null"
argument_list|)
throw|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|ApplicationId
name|appid
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|reqTargetQueue
init|=
name|targetQueue
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|MoveApplicationAcrossQueuesRequest
name|req
init|=
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|appid
argument_list|,
name|reqTargetQueue
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
comment|// if the root cause is a permissions issue
comment|// bubble that up to the user
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|ue
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|String
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"Unauthorized attempt to move appid "
operator|+
name|appId
operator|+
literal|" by remote user "
operator|+
name|userName
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ye
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"App in"
argument_list|)
operator|&&
name|ye
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"state cannot be moved."
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
name|AppQueue
name|ret
init|=
operator|new
name|AppQueue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getRMAppForAppId (String appId)
specifier|private
name|RMApp
name|getRMAppForAppId
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is invalid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is invalid"
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|app
return|;
block|}
DECL|method|getCallerUserGroupInformation ( HttpServletRequest hsr, boolean usePrincipal)
specifier|private
name|UserGroupInformation
name|getCallerUserGroupInformation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|boolean
name|usePrincipal
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|hsr
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|usePrincipal
condition|)
block|{
name|Principal
name|princ
init|=
name|hsr
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|remoteUser
operator|=
name|princ
operator|==
literal|null
condition|?
literal|null
else|:
name|princ
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
DECL|method|isStaticUser (UserGroupInformation callerUGI)
specifier|private
name|boolean
name|isStaticUser
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
name|String
name|staticUser
init|=
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_HTTP_STATIC_USER
argument_list|,
name|CommonConfigurationKeys
operator|.
name|DEFAULT_HADOOP_HTTP_STATIC_USER
argument_list|)
decl_stmt|;
return|return
name|staticUser
operator|.
name|equals
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Generates a new ApplicationId which is then sent to the client    *     * @param hsr    *          the servlet request    * @return Response containing the app id and the maximum resource    *         capabilities    * @throws AuthorizationException    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/apps/new-application"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|createNewApplication (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|createNewApplication
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Unable to obtain user name, "
operator|+
literal|"user not authenticated"
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|NewApplication
name|appId
init|=
name|createNewApplication
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|appId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// reuse the code in ClientRMService to create new app
comment|// get the new app id and submit app
comment|// set location header with new app location
comment|/**    * Function to submit an app to the RM    *     * @param newApp    *          structure containing information to construct the    *          ApplicationSubmissionContext    * @param hsr    *          the servlet request    * @return Response containing the status code    * @throws AuthorizationException    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|submitApplication (ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Unable to obtain user name, "
operator|+
literal|"user not authenticated"
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ApplicationSubmissionContext
name|appContext
init|=
name|createAppSubmissionContext
argument_list|(
name|newApp
argument_list|)
decl_stmt|;
specifier|final
name|SubmitApplicationRequest
name|req
init|=
name|SubmitApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SubmitApplicationResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|submitApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Submit app request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|String
name|url
init|=
name|hsr
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"/"
operator|+
name|newApp
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
name|url
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Function that actually creates the ApplicationId by calling the    * ClientRMService    *     * @return returns structure containing the app-id and maximum resource    *         capabilities    */
DECL|method|createNewApplication ()
specifier|private
name|NewApplication
name|createNewApplication
parameter_list|()
block|{
name|GetNewApplicationRequest
name|req
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|GetNewApplicationResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getNewApplication
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to create new app from RM web service"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NewApplication
name|appId
init|=
operator|new
name|NewApplication
argument_list|(
name|resp
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|resp
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|appId
return|;
block|}
comment|/**    * Create the actual ApplicationSubmissionContext to be submitted to the RM    * from the information provided by the user.    *     * @param newApp    *          the information provided by the user    * @return returns the constructed ApplicationSubmissionContext    * @throws IOException    */
DECL|method|createAppSubmissionContext ( ApplicationSubmissionContextInfo newApp)
specifier|protected
name|ApplicationSubmissionContext
name|createAppSubmissionContext
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create local resources and app submission context
name|ApplicationId
name|appid
decl_stmt|;
name|String
name|error
init|=
literal|"Could not parse application id "
operator|+
name|newApp
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
try|try
block|{
name|appid
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|newApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|ApplicationSubmissionContext
name|appContext
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|appid
argument_list|,
name|newApp
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|newApp
operator|.
name|getQueue
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|newApp
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|createContainerLaunchContext
argument_list|(
name|newApp
argument_list|)
argument_list|,
name|newApp
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|newApp
operator|.
name|getCancelTokensWhenComplete
argument_list|()
argument_list|,
name|newApp
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|,
name|createAppSubmissionContextResource
argument_list|(
name|newApp
argument_list|)
argument_list|,
name|newApp
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|newApp
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
argument_list|,
name|newApp
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|,
name|newApp
operator|.
name|getAMContainerNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setApplicationTags
argument_list|(
name|newApp
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appContext
return|;
block|}
DECL|method|createAppSubmissionContextResource ( ApplicationSubmissionContextInfo newApp)
specifier|protected
name|Resource
name|createAppSubmissionContextResource
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getvCores
argument_list|()
operator|>
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Requested more cores than configured max"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|>
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Requested more memory than configured max"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Resource
name|r
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|newApp
operator|.
name|getResource
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
comment|/**    * Create the ContainerLaunchContext required for the    * ApplicationSubmissionContext. This function takes the user information and    * generates the ByteBuffer structures required by the ContainerLaunchContext    *     * @param newApp    *          the information provided by the user    * @return created context    * @throws BadRequestException    * @throws IOException    */
DECL|method|createContainerLaunchContext ( ApplicationSubmissionContextInfo newApp)
specifier|protected
name|ContainerLaunchContext
name|createContainerLaunchContext
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|IOException
block|{
comment|// create container launch context
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|hmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getAuxillaryServiceData
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|Base64
name|decoder
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|decoder
operator|.
name|decode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|hmap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|hlr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResourceInfo
argument_list|>
name|entry
range|:
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResourceInfo
name|l
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LocalResource
name|lr
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromURI
argument_list|(
name|l
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|,
name|l
operator|.
name|getType
argument_list|()
argument_list|,
name|l
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|l
operator|.
name|getSize
argument_list|()
argument_list|,
name|l
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|hlr
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|lr
argument_list|)
expr_stmt|;
block|}
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Credentials
name|cs
init|=
name|createCredentials
argument_list|(
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|writeTokenStorageToStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|ctx
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|hlr
argument_list|,
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getCommands
argument_list|()
argument_list|,
name|hmap
argument_list|,
name|tokens
argument_list|,
name|newApp
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getAcls
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ctx
return|;
block|}
comment|/**    * Generate a Credentials object from the information in the CredentialsInfo    * object.    *     * @param credentials    *          the CredentialsInfo provided by the user.    * @return    */
DECL|method|createCredentials (CredentialsInfo credentials)
specifier|private
name|Credentials
name|createCredentials
parameter_list|(
name|CredentialsInfo
name|credentials
parameter_list|)
block|{
name|Credentials
name|ret
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|credentials
operator|.
name|getTokens
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Text
name|alias
init|=
operator|new
name|Text
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addToken
argument_list|(
name|alias
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|credentials
operator|.
name|getSecrets
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Text
name|alias
init|=
operator|new
name|Text
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Base64
name|decoder
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret
init|=
name|decoder
operator|.
name|decode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addSecretKey
argument_list|(
name|alias
argument_list|,
name|secret
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Could not parse credentials data; exception message = "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|createKerberosUserGroupInformation ( HttpServletRequest hsr)
specifier|private
name|UserGroupInformation
name|createKerberosUserGroupInformation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|String
name|authType
init|=
name|hsr
operator|.
name|getAuthType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|KerberosAuthenticationHandler
operator|.
name|TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Delegation token operations can only be carried out on a "
operator|+
literal|"Kerberos authenticated channel. Expected auth type is "
operator|+
name|KerberosAuthenticationHandler
operator|.
name|TYPE
operator|+
literal|", got type "
operator|+
name|authType
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|hsr
operator|.
name|getAttribute
argument_list|(
name|DelegationTokenAuthenticationHandler
operator|.
name|DELEGATION_TOKEN_UGI_ATTRIBUTE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Delegation token operations cannot be carried out using delegation"
operator|+
literal|" token authentication."
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|callerUGI
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
return|return
name|callerUGI
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/delegation-token"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|postDelegationToken (DelegationToken tokenData, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|createKerberosUserGroupInformation
argument_list|(
name|hsr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|createDelegationToken
argument_list|(
name|tokenData
argument_list|,
name|hsr
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/delegation-token/expiration"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
specifier|public
name|Response
DECL|method|postDelegationTokenExpiration (@ontext HttpServletRequest hsr)
name|postDelegationTokenExpiration
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|createKerberosUserGroupInformation
argument_list|(
name|hsr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|DelegationToken
name|requestToken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|requestToken
operator|.
name|setToken
argument_list|(
name|extractToken
argument_list|(
name|hsr
argument_list|)
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|renewDelegationToken
argument_list|(
name|requestToken
argument_list|,
name|hsr
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
DECL|method|createDelegationToken (DelegationToken tokenData, HttpServletRequest hsr, UserGroupInformation callerUGI)
specifier|private
name|Response
name|createDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
specifier|final
name|String
name|renewer
init|=
name|tokenData
operator|.
name|getRenewer
argument_list|()
decl_stmt|;
name|GetDelegationTokenResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|GetDelegationTokenResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetDelegationTokenResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|GetDelegationTokenRequest
name|createReq
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|createReq
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create delegation token request failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|tk
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|identifier
init|=
name|tk
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|long
name|currentExpiration
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getRenewDate
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|DelegationToken
name|respToken
init|=
operator|new
name|DelegationToken
argument_list|(
name|tk
operator|.
name|encodeToUrlString
argument_list|()
argument_list|,
name|renewer
argument_list|,
name|identifier
operator|.
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tk
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|currentExpiration
argument_list|,
name|identifier
operator|.
name|getMaxDate
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|respToken
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|renewDelegationToken (DelegationToken tokenData, HttpServletRequest hsr, UserGroupInformation callerUGI)
specifier|private
name|Response
name|renewDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
name|extractToken
argument_list|(
name|tokenData
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RenewDelegationTokenRequest
name|req
init|=
name|RenewDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
name|dToken
argument_list|)
decl_stmt|;
name|RenewDelegationTokenResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RenewDelegationTokenResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RenewDelegationTokenResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|renewDelegationToken
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidToken
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|long
name|renewTime
init|=
name|resp
operator|.
name|getNextExpirationTime
argument_list|()
decl_stmt|;
name|DelegationToken
name|respToken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|respToken
operator|.
name|setNextExpirationTime
argument_list|(
name|renewTime
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|respToken
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// For cancelling tokens, the encoded token is passed as a header
comment|// There are two reasons for this -
comment|// 1. Passing a request body as part of a DELETE request is not
comment|// allowed by Jetty
comment|// 2. Passing the encoded token as part of the url is not ideal
comment|// since urls tend to get logged and anyone with access to
comment|// the logs can extract tokens which are meant to be secret
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/delegation-token"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|cancelDelegationToken (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|cancelDelegationToken
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
decl_stmt|;
try|try
block|{
name|callerUGI
operator|=
name|createKerberosUserGroupInformation
argument_list|(
name|hsr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
name|extractToken
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CancelDelegationTokenRequest
name|req
init|=
name|CancelDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
name|dToken
argument_list|)
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|CancelDelegationTokenResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CancelDelegationTokenResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|cancelDelegationToken
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidToken
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|extractToken ( HttpServletRequest request)
specifier|private
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|extractToken
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|encodedToken
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|DELEGATION_TOKEN_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Header '"
operator|+
name|DELEGATION_TOKEN_HEADER
operator|+
literal|"' containing encoded token not found"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|extractToken
argument_list|(
name|encodedToken
argument_list|)
return|;
block|}
DECL|method|extractToken (String encodedToken)
specifier|private
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|extractToken
parameter_list|(
name|String
name|encodedToken
parameter_list|)
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not decode encoded token"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|token
return|;
block|}
block|}
end_class

end_unit

