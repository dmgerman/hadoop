begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|EnumUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NodeLabelsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivitiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterUserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FairSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FifoSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LabelsToNodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NewApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NewReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsEntryList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|RMQueueAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDefinitionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDeleteRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDeleteResponseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationListInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationRequestsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationSubmissionRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationUpdateRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationUpdateResponseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceOptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|StatisticsItemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ConfInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|WebServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AdHocLogDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedConfUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
argument_list|)
DECL|class|RMWebServices
specifier|public
class|class
name|RMWebServices
extends|extends
name|WebServices
implements|implements
name|RMWebServiceProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RMWebServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|response
specifier|private
annotation|@
name|Context
name|HttpServletResponse
name|response
decl_stmt|;
comment|// -------Default values of QueryParams for RMWebServiceProtocol--------
DECL|field|DEFAULT_QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE
init|=
literal|"default"
decl_stmt|;
DECL|field|DEFAULT_RESERVATION_ID
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RESERVATION_ID
init|=
literal|""
decl_stmt|;
DECL|field|DEFAULT_START_TIME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_START_TIME
init|=
literal|"0"
decl_stmt|;
DECL|field|DEFAULT_END_TIME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_END_TIME
init|=
literal|"-1"
decl_stmt|;
DECL|field|DEFAULT_INCLUDE_RESOURCE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INCLUDE_RESOURCE
init|=
literal|"false"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|isCentralizedNodeLabelConfiguration
name|boolean
name|isCentralizedNodeLabelConfiguration
init|=
literal|true
decl_stmt|;
DECL|field|filterAppsByUser
specifier|private
name|boolean
name|filterAppsByUser
init|=
literal|false
decl_stmt|;
DECL|field|DELEGATION_TOKEN_HEADER
specifier|public
specifier|final
specifier|static
name|String
name|DELEGATION_TOKEN_HEADER
init|=
literal|"Hadoop-YARN-RM-Delegation-Token"
decl_stmt|;
annotation|@
name|Inject
DECL|method|RMWebServices (final ResourceManager rm, Configuration conf)
specifier|public
name|RMWebServices
parameter_list|(
specifier|final
name|ResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// don't inject, always take appBaseRoot from RM.
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|isCentralizedNodeLabelConfiguration
operator|=
name|YarnConfiguration
operator|.
name|isCentralizedNodeLabelConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterAppsByUser
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FILTER_ENTITY_LIST_BY_USER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER
argument_list|)
expr_stmt|;
block|}
DECL|method|RMWebServices (ResourceManager rm, Configuration conf, HttpServletResponse response)
name|RMWebServices
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|this
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|hasAccess (RMApp app, HttpServletRequest hsr)
specifier|protected
name|Boolean
name|hasAccess
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
comment|// Check for the authorization.
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|forwardedAddresses
init|=
literal|null
decl_stmt|;
name|String
name|forwardedFor
init|=
name|hsr
operator|.
name|getHeader
argument_list|(
name|RMWSConsts
operator|.
name|FORWARDED_FOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|forwardedFor
operator|!=
literal|null
condition|)
block|{
name|forwardedAddresses
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|forwardedFor
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|this
operator|.
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|||
name|this
operator|.
name|rm
operator|.
name|getQueueACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|app
argument_list|,
name|hsr
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|forwardedAddresses
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * initForReadableEndpoints does the init for all readable REST end points.    */
DECL|method|initForReadableEndpoints ()
specifier|private
name|void
name|initForReadableEndpoints
parameter_list|()
block|{
comment|// clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * initForWritableEndpoints does the init and acls verification for all    * writable REST end points.    *    * @param callerUGI    *          remote caller who initiated the request    * @param doAdminACLsCheck    *          boolean flag to indicate whether ACLs check is needed    * @throws AuthorizationException    *           in case of no access to perfom this op.    */
DECL|method|initForWritableEndpoints (UserGroupInformation callerUGI, boolean doAdminACLsCheck)
specifier|private
name|void
name|initForWritableEndpoints
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|boolean
name|doAdminACLsCheck
parameter_list|)
throws|throws
name|AuthorizationException
block|{
comment|// clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|doAdminACLsCheck
condition|)
block|{
name|ApplicationACLsManager
name|aclsManager
init|=
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|aclsManager
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|aclsManager
operator|.
name|isAdmin
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Only admins can carry out this operation."
decl_stmt|;
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|ClusterInfo
name|get
parameter_list|()
block|{
return|return
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|INFO
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClusterInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|CLUSTER_USER_INFO
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterUserInfo (@ontext HttpServletRequest hsr)
specifier|public
name|ClusterUserInfo
name|getClusterUserInfo
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|ClusterUserInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|METRICS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterMetricsInfo ()
specifier|public
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClusterMetricsInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getSchedulerInfo ()
specifier|public
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerInfo
name|sinfo
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
name|CSQueue
name|root
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|sinfo
operator|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|root
argument_list|,
name|cs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FairScheduler
condition|)
block|{
name|FairScheduler
name|fs
init|=
operator|(
name|FairScheduler
operator|)
name|rs
decl_stmt|;
name|sinfo
operator|=
operator|new
name|FairSchedulerInfo
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FifoScheduler
condition|)
block|{
name|sinfo
operator|=
operator|new
name|FifoSchedulerInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Unknown scheduler configured"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SchedulerTypeInfo
argument_list|(
name|sinfo
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_LOGS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|dumpSchedulerLogs (@ormParamRMWSConsts.TIME) String time, @Context HttpServletRequest hsr)
specifier|public
name|String
name|dumpSchedulerLogs
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|RMWSConsts
operator|.
name|TIME
argument_list|)
name|String
name|time
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|int
name|period
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Period must be greater than 0"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|logHierarchy
init|=
literal|"org.apache.hadoop.yarn.server.resourcemanager.scheduler"
decl_stmt|;
name|String
name|logfile
init|=
literal|"yarn-scheduler-debug.log"
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|logfile
operator|=
literal|"yarn-capacity-scheduler-debug.log"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FairScheduler
condition|)
block|{
name|logfile
operator|=
literal|"yarn-fair-scheduler-debug.log"
expr_stmt|;
block|}
name|AdHocLogDumper
name|dumper
init|=
operator|new
name|AdHocLogDumper
argument_list|(
name|logHierarchy
argument_list|,
name|logfile
argument_list|)
decl_stmt|;
comment|// time period is sent to us in seconds
name|dumper
operator|.
name|dumpLogs
argument_list|(
literal|"DEBUG"
argument_list|,
name|period
operator|*
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|"Capacity scheduler logs are being created."
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getNodes (@ueryParamRMWSConsts.STATES) String states)
specifier|public
name|NodesInfo
name|getNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATES
argument_list|)
name|String
name|states
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|acceptedStates
decl_stmt|;
if|if
condition|(
name|states
operator|==
literal|null
condition|)
block|{
name|acceptedStates
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acceptedStates
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|stateStr
range|:
name|states
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|acceptedStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|stateStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|acceptedStates
argument_list|)
decl_stmt|;
name|NodesInfo
name|nodesInfo
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|rmNodes
control|)
block|{
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|rmNode
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|.
name|isInactiveState
argument_list|()
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|RMWSConsts
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|nodesInfo
operator|.
name|add
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|nodesInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES_NODEID
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getNode (@athParamRMWSConsts.NODEID) String nodeId)
specifier|public
name|NodeInfo
name|getNode
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|NodeId
name|nid
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|boolean
name|isInactive
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
name|ni
operator|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
expr_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
name|isInactive
operator|=
literal|true
expr_stmt|;
block|}
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|ni
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInactive
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|RMWSConsts
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeInfo
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODE_RESOURCE
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|updateNodeResource ( @ontext HttpServletRequest hsr, @PathParam(RMWSConsts.NODEID) String nodeId, ResourceOptionInfo resourceOption)
specifier|public
name|ResourceInfo
name|updateNodeResource
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|,
name|ResourceOptionInfo
name|resourceOption
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RMNode
name|rmNode
init|=
name|getRMNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
name|nodeResourceMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|resourceOption
operator|.
name|getResourceOption
argument_list|()
argument_list|)
decl_stmt|;
name|UpdateNodeResourceRequest
name|updateRequest
init|=
name|UpdateNodeResourceRequest
operator|.
name|newInstance
argument_list|(
name|nodeResourceMap
argument_list|)
decl_stmt|;
try|try
block|{
name|RMContext
name|rmContext
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|AdminService
name|admin
init|=
name|rmContext
operator|.
name|getRMAdminService
argument_list|()
decl_stmt|;
name|admin
operator|.
name|updateNodeResource
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to update the node resource "
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update the node resource {}."
argument_list|,
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ResourceInfo
argument_list|(
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the RMNode in the RM from the node identifier.    * @param nodeId Node identifier.    * @return The RMNode in the RM.    */
DECL|method|getRMNode (final String nodeId)
specifier|private
name|RMNode
name|getRMNode
parameter_list|(
specifier|final
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|NodeId
name|nid
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|RMNode
name|ni
init|=
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
name|ni
operator|=
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
expr_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
block|}
return|return
name|ni
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getApps (@ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.STATE) String stateQuery, @QueryParam(RMWSConsts.STATES) Set<String> statesQuery, @QueryParam(RMWSConsts.FINAL_STATUS) String finalStatusQuery, @QueryParam(RMWSConsts.USER) String userQuery, @QueryParam(RMWSConsts.QUEUE) String queueQuery, @QueryParam(RMWSConsts.LIMIT) String limit, @QueryParam(RMWSConsts.STARTED_TIME_BEGIN) String startedBegin, @QueryParam(RMWSConsts.STARTED_TIME_END) String startedEnd, @QueryParam(RMWSConsts.FINISHED_TIME_BEGIN) String finishBegin, @QueryParam(RMWSConsts.FINISHED_TIME_END) String finishEnd, @QueryParam(RMWSConsts.APPLICATION_TYPES) Set<String> applicationTypes, @QueryParam(RMWSConsts.APPLICATION_TAGS) Set<String> applicationTags, @QueryParam(RMWSConsts.DESELECTS) Set<String> unselectedFields)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATE
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|FINAL_STATUS
argument_list|)
name|String
name|finalStatusQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|USER
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LIMIT
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STARTED_TIME_BEGIN
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STARTED_TIME_END
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|FINISHED_TIME_BEGIN
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|FINISHED_TIME_END
argument_list|)
name|String
name|finishEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APPLICATION_TYPES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APPLICATION_TAGS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|DESELECTS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|GetApplicationsRequest
name|request
init|=
name|ApplicationsRequestBuilder
operator|.
name|create
argument_list|()
operator|.
name|withStateQuery
argument_list|(
name|stateQuery
argument_list|)
operator|.
name|withStatesQuery
argument_list|(
name|statesQuery
argument_list|)
operator|.
name|withUserQuery
argument_list|(
name|userQuery
argument_list|)
operator|.
name|withQueueQuery
argument_list|(
name|rm
argument_list|,
name|queueQuery
argument_list|)
operator|.
name|withLimit
argument_list|(
name|limit
argument_list|)
operator|.
name|withStartedTimeBegin
argument_list|(
name|startedBegin
argument_list|)
operator|.
name|withStartedTimeEnd
argument_list|(
name|startedEnd
argument_list|)
operator|.
name|withFinishTimeBegin
argument_list|(
name|finishBegin
argument_list|)
operator|.
name|withFinishTimeEnd
argument_list|(
name|finishEnd
argument_list|)
operator|.
name|withApplicationTypes
argument_list|(
name|applicationTypes
argument_list|)
operator|.
name|withApplicationTags
argument_list|(
name|applicationTags
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
decl_stmt|;
try|try
block|{
name|appReports
operator|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to retrieve apps from ClientRMService"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unable to retrieve apps from ClientRMService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|appReports
control|)
block|{
name|RMApp
name|rmapp
init|=
name|apps
operator|.
name|get
argument_list|(
name|report
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmapp
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|finalStatusQuery
operator|!=
literal|null
operator|&&
operator|!
name|finalStatusQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|finalStatusQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|finalStatusQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|DeSelectFields
name|deSelectFields
init|=
operator|new
name|DeSelectFields
argument_list|()
decl_stmt|;
name|deSelectFields
operator|.
name|initFields
argument_list|(
name|unselectedFields
argument_list|)
expr_stmt|;
name|boolean
name|allowAccess
init|=
name|hasAccess
argument_list|(
name|rmapp
argument_list|,
name|hsr
argument_list|)
decl_stmt|;
comment|// Given RM is configured to display apps per user, skip apps to which
comment|// this caller doesn't have access to view.
if|if
condition|(
name|filterAppsByUser
operator|&&
operator|!
name|allowAccess
condition|)
block|{
continue|continue;
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|rm
argument_list|,
name|rmapp
argument_list|,
name|allowAccess
argument_list|,
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
argument_list|,
name|deSelectFields
argument_list|)
decl_stmt|;
name|allApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
return|return
name|allApps
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_ACTIVITIES
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getActivities (@ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.NODEID) String nodeId, @QueryParam(RMWSConsts.GROUP_BY) String groupBy)
specifier|public
name|ActivitiesInfo
name|getActivities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|)
name|String
name|groupBy
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|YarnScheduler
name|scheduler
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheduler
operator|instanceof
name|AbstractYarnScheduler
condition|)
block|{
name|String
name|errMessage
init|=
literal|""
decl_stmt|;
name|AbstractYarnScheduler
name|abstractYarnScheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|scheduler
decl_stmt|;
name|ActivitiesManager
name|activitiesManager
init|=
name|abstractYarnScheduler
operator|.
name|getActivitiesManager
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|activitiesManager
condition|)
block|{
name|errMessage
operator|=
literal|"Not Capacity Scheduler"
expr_stmt|;
return|return
operator|new
name|ActivitiesInfo
argument_list|(
name|errMessage
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
name|activitiesGroupBy
decl_stmt|;
try|try
block|{
name|activitiesGroupBy
operator|=
name|parseActivitiesGroupBy
argument_list|(
name|groupBy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ActivitiesInfo
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
name|List
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|nodeList
init|=
name|abstractYarnScheduler
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|getAllNodes
argument_list|()
decl_stmt|;
name|boolean
name|illegalInput
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodeList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|illegalInput
operator|=
literal|true
expr_stmt|;
name|errMessage
operator|=
literal|"No node manager running in the cluster"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|String
name|hostName
init|=
name|nodeId
decl_stmt|;
name|String
name|portName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|nodeId
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|hostName
operator|=
name|nodeId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|portName
operator|=
name|nodeId
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|correctNodeId
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FiCaSchedulerNode
name|node
range|:
name|nodeList
control|)
block|{
if|if
condition|(
operator|(
name|portName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|.
name|equals
argument_list|(
name|hostName
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|portName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|.
name|equals
argument_list|(
name|hostName
argument_list|)
operator|&&
name|String
operator|.
name|valueOf
argument_list|(
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getCommandPort
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|portName
argument_list|)
operator|)
condition|)
block|{
name|correctNodeId
operator|=
literal|true
expr_stmt|;
name|nodeId
operator|=
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|correctNodeId
condition|)
block|{
name|illegalInput
operator|=
literal|true
expr_stmt|;
name|errMessage
operator|=
literal|"Cannot find node manager with given node id"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|illegalInput
condition|)
block|{
name|activitiesManager
operator|.
name|recordNextNodeUpdateActivities
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|activitiesManager
operator|.
name|getActivitiesInfo
argument_list|(
name|nodeId
argument_list|,
name|activitiesGroupBy
argument_list|)
return|;
block|}
comment|// Return a activities info with error message
return|return
operator|new
name|ActivitiesInfo
argument_list|(
name|errMessage
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_APP_ACTIVITIES
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppActivities (@ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.APP_ID) String appId, @QueryParam(RMWSConsts.MAX_TIME) String time, @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set<String> requestPriorities, @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS) Set<String> allocationRequestIds, @QueryParam(RMWSConsts.GROUP_BY) String groupBy)
specifier|public
name|AppActivitiesInfo
name|getAppActivities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APP_ID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|MAX_TIME
argument_list|)
name|String
name|time
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|REQUEST_PRIORITIES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|requestPriorities
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|ALLOCATION_REQUEST_IDS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|allocationRequestIds
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|)
name|String
name|groupBy
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|YarnScheduler
name|scheduler
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheduler
operator|instanceof
name|AbstractYarnScheduler
condition|)
block|{
name|AbstractYarnScheduler
name|abstractYarnScheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|scheduler
decl_stmt|;
name|ActivitiesManager
name|activitiesManager
init|=
name|abstractYarnScheduler
operator|.
name|getActivitiesManager
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|activitiesManager
condition|)
block|{
name|String
name|errMessage
init|=
literal|"Not Capacity Scheduler"
decl_stmt|;
return|return
operator|new
name|AppActivitiesInfo
argument_list|(
name|errMessage
argument_list|,
name|appId
argument_list|)
return|;
block|}
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
name|String
name|errMessage
init|=
literal|"Must provide an application Id"
decl_stmt|;
return|return
operator|new
name|AppActivitiesInfo
argument_list|(
name|errMessage
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
name|activitiesGroupBy
decl_stmt|;
try|try
block|{
name|activitiesGroupBy
operator|=
name|parseActivitiesGroupBy
argument_list|(
name|groupBy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|AppActivitiesInfo
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|appId
argument_list|)
return|;
block|}
name|double
name|maxTime
init|=
literal|3.0
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|maxTime
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxTime
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|time
operator|+
literal|".0"
argument_list|)
expr_stmt|;
block|}
block|}
name|ApplicationId
name|applicationId
decl_stmt|;
try|try
block|{
name|applicationId
operator|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|activitiesManager
operator|.
name|turnOnAppActivitiesRecording
argument_list|(
name|applicationId
argument_list|,
name|maxTime
argument_list|)
expr_stmt|;
name|AppActivitiesInfo
name|appActivitiesInfo
init|=
name|activitiesManager
operator|.
name|getAppActivitiesInfo
argument_list|(
name|applicationId
argument_list|,
name|requestPriorities
argument_list|,
name|allocationRequestIds
argument_list|,
name|activitiesGroupBy
argument_list|)
decl_stmt|;
return|return
name|appActivitiesInfo
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMessage
init|=
literal|"Cannot find application with given appId"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppActivitiesInfo
argument_list|(
name|errMessage
argument_list|,
name|appId
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseActivitiesGroupBy (String groupBy)
specifier|private
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
name|parseActivitiesGroupBy
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
if|if
condition|(
name|groupBy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|EnumUtils
operator|.
name|isValidEnum
argument_list|(
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
operator|.
name|class
argument_list|,
name|groupBy
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|errMesasge
init|=
literal|"Got invalid groupBy: "
operator|+
name|groupBy
operator|+
literal|", valid groupBy types: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMesasge
argument_list|)
throw|;
block|}
return|return
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
operator|.
name|valueOf
argument_list|(
name|groupBy
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APP_STATISTICS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppStatistics ( @ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.STATES) Set<String> stateQueries, @QueryParam(RMWSConsts.APPLICATION_TYPES) Set<String> typeQueries)
specifier|public
name|ApplicationStatisticsInfo
name|getAppStatistics
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|stateQueries
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APPLICATION_TYPES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|typeQueries
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
comment|// parse the params and build the scoreboard
comment|// converting state/type name to lowercase
name|Set
argument_list|<
name|String
argument_list|>
name|states
init|=
name|parseQueries
argument_list|(
name|stateQueries
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
name|parseQueries
argument_list|(
name|typeQueries
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if no types, counts the applications of any types
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"# of applicationTypes = "
operator|+
name|types
operator|.
name|size
argument_list|()
operator|+
literal|", we temporarily support at most one applicationType"
argument_list|)
throw|;
block|}
comment|// if no states, returns the counts of all RMAppStates
if|if
condition|(
name|states
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|YarnApplicationState
name|state
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|states
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// in case we extend to multiple applicationTypes in the future
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
init|=
name|buildScoreboard
argument_list|(
name|states
argument_list|,
name|types
argument_list|)
decl_stmt|;
comment|// go through the apps in RM to count the numbers, ignoring the case of
comment|// the state/type name
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
for|for
control|(
name|RMApp
name|rmapp
range|:
name|apps
operator|.
name|values
argument_list|()
control|)
block|{
name|YarnApplicationState
name|state
init|=
name|rmapp
operator|.
name|createApplicationState
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|rmapp
operator|.
name|getApplicationType
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|states
operator|.
name|contains
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|RMWSConsts
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|countApp
argument_list|(
name|scoreboard
argument_list|,
name|state
argument_list|,
name|RMWSConsts
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|countApp
argument_list|(
name|scoreboard
argument_list|,
name|state
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// fill the response object
name|ApplicationStatisticsInfo
name|appStatInfo
init|=
operator|new
name|ApplicationStatisticsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|partScoreboard
range|:
name|scoreboard
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|statEntry
range|:
name|partScoreboard
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StatisticsItemInfo
name|statItem
init|=
operator|new
name|StatisticsItemInfo
argument_list|(
name|partScoreboard
operator|.
name|getKey
argument_list|()
argument_list|,
name|statEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|statEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|appStatInfo
operator|.
name|add
argument_list|(
name|statItem
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appStatInfo
return|;
block|}
DECL|method|buildScoreboard ( Set<String> states, Set<String> types)
specifier|private
specifier|static
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|buildScoreboard
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|states
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
init|=
operator|new
name|HashMap
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// default states will result in enumerating all YarnApplicationStates
assert|assert
operator|!
name|states
operator|.
name|isEmpty
argument_list|()
assert|;
for|for
control|(
name|String
name|state
range|:
name|states
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|partScoreboard
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|scoreboard
operator|.
name|put
argument_list|(
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|state
argument_list|)
argument_list|)
argument_list|,
name|partScoreboard
argument_list|)
expr_stmt|;
comment|// types is verified no to be empty
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|partScoreboard
operator|.
name|put
argument_list|(
name|type
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scoreboard
return|;
block|}
DECL|method|countApp ( Map<YarnApplicationState, Map<String, Long>> scoreboard, YarnApplicationState state, String type)
specifier|private
specifier|static
name|void
name|countApp
parameter_list|(
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
parameter_list|,
name|YarnApplicationState
name|state
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|partScoreboard
init|=
name|scoreboard
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Long
name|count
init|=
name|partScoreboard
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|partScoreboard
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
operator|+
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getApp (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId, @QueryParam(RMWSConsts.DESELECTS) Set<String> unselectedFields)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|DESELECTS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|ApplicationId
name|id
init|=
name|WebAppUtils
operator|.
name|parseApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|DeSelectFields
name|deSelectFields
init|=
operator|new
name|DeSelectFields
argument_list|()
decl_stmt|;
name|deSelectFields
operator|.
name|initFields
argument_list|(
name|unselectedFields
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppInfo
argument_list|(
name|rm
argument_list|,
name|app
argument_list|,
name|hasAccess
argument_list|(
name|app
argument_list|,
name|hsr
argument_list|)
argument_list|,
name|hsr
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
argument_list|,
name|deSelectFields
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_APPATTEMPTS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppAttempts (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|ApplicationId
name|id
init|=
name|WebAppUtils
operator|.
name|parseApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|AppAttemptsInfo
name|appAttemptsInfo
init|=
operator|new
name|AppAttemptsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AppAttemptInfo
name|attemptInfo
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|rm
argument_list|,
name|attempt
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|hsr
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
argument_list|)
decl_stmt|;
name|appAttemptsInfo
operator|.
name|add
argument_list|(
name|attemptInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttemptsInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_APPATTEMPTS_APPATTEMPTID
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppAttempt ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.APPATTEMPTID) String appAttemptId)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
name|getAppAttempt
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPATTEMPTID
argument_list|)
name|String
name|appAttemptId
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getAppAttempt
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_APPATTEMPTS_APPATTEMPTID_CONTAINERS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getContainers (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.APPATTEMPTID) String appAttemptId)
specifier|public
name|ContainersInfo
name|getContainers
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPATTEMPTID
argument_list|)
name|String
name|appAttemptId
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getContainers
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|GET_CONTAINER
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getContainer (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.APPATTEMPTID) String appAttemptId, @PathParam(R) String containerId)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPATTEMPTID
argument_list|)
name|String
name|appAttemptId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"containerid"
argument_list|)
name|String
name|containerId
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getContainer
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_STATE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppState (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppState
name|getAppState
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|GET_APP_STATE
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to get state of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|AppState
name|ret
init|=
operator|new
name|AppState
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setState
argument_list|(
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|// can't return POJO because we can't control the status code
comment|// it's always set to 200 when we need to allow it to be set
comment|// to 202
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_STATE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateAppState (AppState targetState, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateAppState
parameter_list|(
name|AppState
name|targetState
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to kill an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|targetState
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
comment|// user is attempting to change state. right we only
comment|// allow users to kill the app
if|if
condition|(
name|targetState
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|killApp
argument_list|(
name|app
argument_list|,
name|callerUGI
argument_list|,
name|hsr
argument_list|,
name|targetState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Only '"
operator|+
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
operator|+
literal|"' is allowed as a target state."
argument_list|)
throw|;
block|}
name|AppState
name|ret
init|=
operator|new
name|AppState
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setState
argument_list|(
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|GET_NODE_TO_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getNodeToLabels (@ontext HttpServletRequest hsr)
specifier|public
name|NodeToLabelsInfo
name|getNodeToLabels
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|NodeToLabelsInfo
name|ntl
init|=
operator|new
name|NodeToLabelsInfo
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeLabelsInfo
argument_list|>
name|ntlMap
init|=
name|ntl
operator|.
name|getNodeToLabels
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|nodeIdToLabels
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getNodeLabelsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|nitle
range|:
name|nodeIdToLabels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeLabel
argument_list|>
argument_list|(
name|nitle
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ntlMap
operator|.
name|put
argument_list|(
name|nitle
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|NodeLabelsInfo
argument_list|(
name|labels
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ntl
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|LABEL_MAPPINGS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getLabelsToNodes ( @ueryParamRMWSConsts.LABELS) Set<String> labels)
specifier|public
name|LabelsToNodesInfo
name|getLabelsToNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LABELS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|LabelsToNodesInfo
name|lts
init|=
operator|new
name|LabelsToNodesInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeLabelInfo
argument_list|,
name|NodeIDsInfo
argument_list|>
name|ltsMap
init|=
name|lts
operator|.
name|getLabelsToNodes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labelsToNodeId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|labels
operator|==
literal|null
operator|||
name|labels
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|labelsToNodeId
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getLabelsInfoToNodes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|labelsToNodeId
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getLabelsInfoToNodes
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|entry
range|:
name|labelsToNodeId
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodeIdStrList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|nodeIdStrList
operator|.
name|add
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ltsMap
operator|.
name|put
argument_list|(
operator|new
name|NodeLabelInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NodeIDsInfo
argument_list|(
name|nodeIdStrList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|lts
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|REPLACE_NODE_TO_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|replaceLabelsOnNodes ( final NodeToLabelsEntryList newNodeToLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|replaceLabelsOnNodes
parameter_list|(
specifier|final
name|NodeToLabelsEntryList
name|newNodeToLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeIdToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeToLabelsEntry
name|nitle
range|:
name|newNodeToLabels
operator|.
name|getNodeToLabels
argument_list|()
control|)
block|{
name|nodeIdToLabels
operator|.
name|put
argument_list|(
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nitle
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|nitle
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceLabelsOnNode
argument_list|(
name|nodeIdToLabels
argument_list|,
name|hsr
argument_list|,
literal|"/replace-node-to-labels"
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES_NODEID_REPLACE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|replaceLabelsOnNode ( @ueryParamR) Set<String> newNodeLabelsName, @Context HttpServletRequest hsr, @PathParam(R) String nodeId)
specifier|public
name|Response
name|replaceLabelsOnNode
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"labels"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|newNodeLabelsName
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"nodeId"
argument_list|)
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newLabelsForNode
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|newLabelsForNode
operator|.
name|put
argument_list|(
name|nid
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|newNodeLabelsName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|replaceLabelsOnNode
argument_list|(
name|newLabelsForNode
argument_list|,
name|hsr
argument_list|,
literal|"/nodes/nodeid/replace-labels"
argument_list|)
return|;
block|}
DECL|method|replaceLabelsOnNode ( Map<NodeId, Set<String>> newLabelsForNode, HttpServletRequest hsr, String operation)
specifier|private
name|Response
name|replaceLabelsOnNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newLabelsForNode
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeLabelsUtils
operator|.
name|verifyCentralizedNodeLabelConfEnabled
argument_list|(
literal|"replaceLabelsOnNode"
argument_list|,
name|isCentralizedNodeLabelConfiguration
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated for"
operator|+
literal|" post to ..."
operator|+
name|operation
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to ..."
operator|+
name|operation
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|newLabelsForNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|GET_NODE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterNodeLabels (@ontext HttpServletRequest hsr)
specifier|public
name|NodeLabelsInfo
name|getClusterNodeLabels
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabels
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getClusterNodeLabels
argument_list|()
decl_stmt|;
name|NodeLabelsInfo
name|ret
init|=
operator|new
name|NodeLabelsInfo
argument_list|(
name|nodeLabels
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|ADD_NODE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|addToClusterNodeLabels (final NodeLabelsInfo newNodeLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|addToClusterNodeLabels
parameter_list|(
specifier|final
name|NodeLabelsInfo
name|newNodeLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to .../add-node-labels "
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|newNodeLabels
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|REMOVE_NODE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|removeFromCluserNodeLabels ( @ueryParamRMWSConsts.LABELS) Set<String> oldNodeLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|removeFromCluserNodeLabels
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LABELS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|oldNodeLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" not authorized"
operator|+
literal|" for post to .../remove-node-labels "
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldNodeLabels
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES_NODEID_GETLABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getLabelsOnNode (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.NODEID) String nodeId)
specifier|public
name|NodeLabelsInfo
name|getLabelsOnNode
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeLabel
argument_list|>
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getLabelsInfoByNode
argument_list|(
name|nid
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeLabelsInfo
argument_list|(
name|labels
argument_list|)
return|;
block|}
DECL|method|killApp (RMApp app, UserGroupInformation callerUGI, HttpServletRequest hsr, String diagnostic)
specifier|protected
name|Response
name|killApp
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|diagnostic
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"app cannot be null"
argument_list|)
throw|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|ApplicationId
name|appid
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|KillApplicationResponse
name|resp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KillApplicationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KillApplicationResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|KillApplicationRequest
name|req
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appid
argument_list|)
decl_stmt|;
if|if
condition|(
name|diagnostic
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setDiagnostics
argument_list|(
name|diagnostic
argument_list|)
expr_stmt|;
block|}
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
comment|// if the root cause is a permissions issue
comment|// bubble that up to the user
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|ue
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|String
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"Unauthorized attempt to kill appid "
operator|+
name|appId
operator|+
literal|" by remote user "
operator|+
name|userName
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
name|AppState
name|ret
init|=
operator|new
name|AppState
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setState
argument_list|(
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resp
operator|.
name|getIsKillCompleted
argument_list|()
condition|)
block|{
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|KILL_APP_REQUEST
argument_list|,
literal|"RMWebService"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
name|hsr
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_PRIORITY
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppPriority (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppPriority
name|getAppPriority
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"UNKNOWN-USER"
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|GET_APP_PRIORITY
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to get priority of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|AppPriority
name|ret
init|=
operator|new
name|AppPriority
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setPriority
argument_list|(
name|app
operator|.
name|getApplicationPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_PRIORITY
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateApplicationPriority (AppPriority targetPriority, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateApplicationPriority
parameter_list|(
name|AppPriority
name|targetPriority
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetPriority
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Target Priority cannot be null"
argument_list|)
throw|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_APP_PRIORITY
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to update priority an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Priority
name|priority
init|=
name|app
operator|.
name|getApplicationPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
operator|==
literal|null
operator|||
name|priority
operator|.
name|getPriority
argument_list|()
operator|!=
name|targetPriority
operator|.
name|getPriority
argument_list|()
condition|)
block|{
return|return
name|modifyApplicationPriority
argument_list|(
name|app
argument_list|,
name|callerUGI
argument_list|,
name|targetPriority
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|targetPriority
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|modifyApplicationPriority (final RMApp app, UserGroupInformation callerUGI, final int appPriority)
specifier|private
name|Response
name|modifyApplicationPriority
parameter_list|(
specifier|final
name|RMApp
name|app
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
specifier|final
name|int
name|appPriority
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
decl_stmt|;
name|UpdateApplicationPriorityRequest
name|request
init|=
name|UpdateApplicationPriorityRequest
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|updateApplicationPriority
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
comment|// if the root cause is a permissions issue
comment|// bubble that up to the user
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|ue
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|String
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"Unauthorized attempt to change priority of appid "
operator|+
name|appId
operator|+
literal|" by remote user "
operator|+
name|userName
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ye
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Application in"
argument_list|)
operator|&&
name|ye
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"state cannot be update priority."
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
name|AppPriority
name|ret
init|=
operator|new
name|AppPriority
argument_list|(
name|app
operator|.
name|getApplicationPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_QUEUE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppQueue (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppQueue
name|getAppQueue
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"UNKNOWN-USER"
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|GET_APP_QUEUE
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to get queue of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|AppQueue
name|ret
init|=
operator|new
name|AppQueue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_QUEUE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateAppQueue (AppQueue targetQueue, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateAppQueue
parameter_list|(
name|AppQueue
name|targetQueue
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|MOVE_APP_REQUEST
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to move an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|app
operator|.
name|getQueue
argument_list|()
operator|.
name|equals
argument_list|(
name|targetQueue
operator|.
name|getQueue
argument_list|()
argument_list|)
condition|)
block|{
comment|// user is attempting to change queue.
return|return
name|moveApp
argument_list|(
name|app
argument_list|,
name|callerUGI
argument_list|,
name|targetQueue
operator|.
name|getQueue
argument_list|()
argument_list|)
return|;
block|}
name|AppQueue
name|ret
init|=
operator|new
name|AppQueue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|moveApp (RMApp app, UserGroupInformation callerUGI, String targetQueue)
specifier|protected
name|Response
name|moveApp
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|String
name|targetQueue
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"app cannot be null"
argument_list|)
throw|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|ApplicationId
name|appid
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|reqTargetQueue
init|=
name|targetQueue
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|MoveApplicationAcrossQueuesRequest
name|req
init|=
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|appid
argument_list|,
name|reqTargetQueue
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
comment|// if the root cause is a permissions issue
comment|// bubble that up to the user
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|ue
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|String
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"Unauthorized attempt to move appid "
operator|+
name|appId
operator|+
literal|" by remote user "
operator|+
name|userName
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ye
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"App in"
argument_list|)
operator|&&
name|ye
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"state cannot be moved."
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
name|AppQueue
name|ret
init|=
operator|new
name|AppQueue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setQueue
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getRMAppForAppId (String appId)
specifier|private
name|RMApp
name|getRMAppForAppId
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
name|ApplicationId
name|id
init|=
name|WebAppUtils
operator|.
name|parseApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|app
return|;
block|}
DECL|method|getCallerUserGroupInformation ( HttpServletRequest hsr, boolean usePrincipal)
specifier|private
name|UserGroupInformation
name|getCallerUserGroupInformation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|boolean
name|usePrincipal
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|hsr
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|usePrincipal
condition|)
block|{
name|Principal
name|princ
init|=
name|hsr
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|remoteUser
operator|=
name|princ
operator|==
literal|null
condition|?
literal|null
else|:
name|princ
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
DECL|method|isStaticUser (UserGroupInformation callerUGI)
specifier|private
name|boolean
name|isStaticUser
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
name|String
name|staticUser
init|=
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_HTTP_STATIC_USER
argument_list|,
name|CommonConfigurationKeys
operator|.
name|DEFAULT_HADOOP_HTTP_STATIC_USER
argument_list|)
decl_stmt|;
return|return
name|staticUser
operator|.
name|equals
argument_list|(
name|callerUGI
operator|.
name|getUserName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_NEW_APPLICATION
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|createNewApplication (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|createNewApplication
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NewApplication
name|appId
init|=
name|createNewApplication
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|appId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// reuse the code in ClientRMService to create new app
comment|// get the new app id and submit app
comment|// set location header with new app location
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|submitApplication (ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|appContext
init|=
name|RMWebAppUtil
operator|.
name|createAppSubmissionContext
argument_list|(
name|newApp
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|SubmitApplicationRequest
name|req
init|=
name|SubmitApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SubmitApplicationResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|submitApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Submit app request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|String
name|url
init|=
name|hsr
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"/"
operator|+
name|newApp
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
name|url
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Function that actually creates the ApplicationId by calling the    * ClientRMService    *     * @return returns structure containing the app-id and maximum resource    *         capabilities    */
DECL|method|createNewApplication ()
specifier|private
name|NewApplication
name|createNewApplication
parameter_list|()
block|{
name|GetNewApplicationRequest
name|req
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|GetNewApplicationResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getNewApplication
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to create new app from RM web service"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NewApplication
name|appId
init|=
operator|new
name|NewApplication
argument_list|(
name|resp
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|resp
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|createKerberosUserGroupInformation (HttpServletRequest hsr, UserGroupInformation callerUGI)
specifier|private
name|void
name|createKerberosUserGroupInformation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
block|{
name|String
name|authType
init|=
name|hsr
operator|.
name|getAuthType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|KerberosAuthenticationHandler
operator|.
name|TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Delegation token operations can only be carried out on a "
operator|+
literal|"Kerberos authenticated channel. Expected auth type is "
operator|+
name|KerberosAuthenticationHandler
operator|.
name|TYPE
operator|+
literal|", got type "
operator|+
name|authType
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|hsr
operator|.
name|getAttribute
argument_list|(
name|DelegationTokenAuthenticationHandler
operator|.
name|DELEGATION_TOKEN_UGI_ATTRIBUTE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Delegation token operations cannot be carried out using "
operator|+
literal|"delegation token authentication."
decl_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|DELEGATION_TOKEN
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|postDelegationToken (DelegationToken tokenData, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|createKerberosUserGroupInformation
argument_list|(
name|hsr
argument_list|,
name|callerUGI
argument_list|)
expr_stmt|;
name|callerUGI
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|createDelegationToken
argument_list|(
name|tokenData
argument_list|,
name|hsr
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|DELEGATION_TOKEN_EXPIRATION
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|postDelegationTokenExpiration (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationTokenExpiration
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|createKerberosUserGroupInformation
argument_list|(
name|hsr
argument_list|,
name|callerUGI
argument_list|)
expr_stmt|;
name|callerUGI
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|DelegationToken
name|requestToken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|requestToken
operator|.
name|setToken
argument_list|(
name|extractToken
argument_list|(
name|hsr
argument_list|)
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|renewDelegationToken
argument_list|(
name|requestToken
argument_list|,
name|hsr
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
DECL|method|createDelegationToken (DelegationToken tokenData, HttpServletRequest hsr, UserGroupInformation callerUGI)
specifier|private
name|Response
name|createDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
specifier|final
name|String
name|renewer
init|=
name|tokenData
operator|.
name|getRenewer
argument_list|()
decl_stmt|;
name|GetDelegationTokenResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|GetDelegationTokenResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetDelegationTokenResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|GetDelegationTokenRequest
name|createReq
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|createReq
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create delegation token request failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|tk
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|resp
operator|.
name|getRMDelegationToken
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|identifier
init|=
name|tk
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|long
name|currentExpiration
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getRenewDate
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|DelegationToken
name|respToken
init|=
operator|new
name|DelegationToken
argument_list|(
name|tk
operator|.
name|encodeToUrlString
argument_list|()
argument_list|,
name|renewer
argument_list|,
name|identifier
operator|.
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tk
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|currentExpiration
argument_list|,
name|identifier
operator|.
name|getMaxDate
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|respToken
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|renewDelegationToken (DelegationToken tokenData, HttpServletRequest hsr, UserGroupInformation callerUGI)
specifier|private
name|Response
name|renewDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
name|extractToken
argument_list|(
name|tokenData
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RenewDelegationTokenRequest
name|req
init|=
name|RenewDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
name|dToken
argument_list|)
decl_stmt|;
name|RenewDelegationTokenResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RenewDelegationTokenResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RenewDelegationTokenResponse
name|run
parameter_list|()
throws|throws
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|renewDelegationToken
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidToken
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|long
name|renewTime
init|=
name|resp
operator|.
name|getNextExpirationTime
argument_list|()
decl_stmt|;
name|DelegationToken
name|respToken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|respToken
operator|.
name|setNextExpirationTime
argument_list|(
name|renewTime
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|respToken
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// For cancelling tokens, the encoded token is passed as a header
comment|// There are two reasons for this -
comment|// 1. Passing a request body as part of a DELETE request is not
comment|// allowed by Jetty
comment|// 2. Passing the encoded token as part of the url is not ideal
comment|// since urls tend to get logged and anyone with access to
comment|// the logs can extract tokens which are meant to be secret
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|DELEGATION_TOKEN
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|cancelDelegationToken (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|cancelDelegationToken
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|createKerberosUserGroupInformation
argument_list|(
name|hsr
argument_list|,
name|callerUGI
argument_list|)
expr_stmt|;
name|callerUGI
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
name|extractToken
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CancelDelegationTokenRequest
name|req
init|=
name|CancelDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
name|dToken
argument_list|)
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|CancelDelegationTokenResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CancelDelegationTokenResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|cancelDelegationToken
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidToken
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Renew delegation token request failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|extractToken ( HttpServletRequest request)
specifier|private
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|extractToken
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|encodedToken
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|DELEGATION_TOKEN_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Header '"
operator|+
name|DELEGATION_TOKEN_HEADER
operator|+
literal|"' containing encoded token not found"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|extractToken
argument_list|(
name|encodedToken
argument_list|)
return|;
block|}
DECL|method|extractToken (String encodedToken)
specifier|private
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|extractToken
parameter_list|(
name|String
name|encodedToken
parameter_list|)
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not decode encoded token"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|token
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_NEW
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|createNewReservation (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|createNewReservation
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NewReservation
name|reservationId
init|=
name|createNewReservation
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|reservationId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Function that actually creates the {@link ReservationId} by calling the    * ClientRMService.    *    * @return returns structure containing the {@link ReservationId}    * @throws IOException if creation fails.    */
DECL|method|createNewReservation ()
specifier|private
name|NewReservation
name|createNewReservation
parameter_list|()
throws|throws
name|IOException
block|{
name|GetNewReservationRequest
name|req
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetNewReservationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|GetNewReservationResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getNewReservation
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to create new reservation from RM web service"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NewReservation
name|reservationId
init|=
operator|new
name|NewReservation
argument_list|(
name|resp
operator|.
name|getReservationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|reservationId
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_SUBMIT
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|submitReservation (ReservationSubmissionRequestInfo resContext, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequestInfo
name|resContext
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|ReservationSubmissionRequest
name|reservation
init|=
name|createReservationSubmissionRequest
argument_list|(
name|resContext
argument_list|)
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ReservationSubmissionResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReservationSubmissionResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|submitReservation
argument_list|(
name|reservation
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Submit reservation request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createReservationSubmissionRequest ( ReservationSubmissionRequestInfo resContext)
specifier|private
name|ReservationSubmissionRequest
name|createReservationSubmissionRequest
parameter_list|(
name|ReservationSubmissionRequestInfo
name|resContext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// defending against a couple of common submission format problems
if|if
condition|(
name|resContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Input ReservationSubmissionContext should not be null"
argument_list|)
throw|;
block|}
name|ReservationDefinitionInfo
name|resInfo
init|=
name|resContext
operator|.
name|getReservationDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|resInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Input ReservationDefinition should not be null"
argument_list|)
throw|;
block|}
name|ReservationRequestsInfo
name|resReqsInfo
init|=
name|resInfo
operator|.
name|getReservationRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|resReqsInfo
operator|==
literal|null
operator|||
name|resReqsInfo
operator|.
name|getReservationRequest
argument_list|()
operator|==
literal|null
operator|||
name|resReqsInfo
operator|.
name|getReservationRequest
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The ReservationDefinition should"
operator|+
literal|" contain at least one ReservationRequest"
argument_list|)
throw|;
block|}
name|ReservationRequestInterpreter
index|[]
name|values
init|=
name|ReservationRequestInterpreter
operator|.
name|values
argument_list|()
decl_stmt|;
name|ReservationRequestInterpreter
name|resInt
init|=
name|values
index|[
name|resReqsInfo
operator|.
name|getReservationRequestsInterpreter
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|ReservationRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReservationRequestInfo
name|resReqInfo
range|:
name|resReqsInfo
operator|.
name|getReservationRequest
argument_list|()
control|)
block|{
name|ResourceInfo
name|rInfo
init|=
name|resReqInfo
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|rInfo
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|rInfo
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numContainers
init|=
name|resReqInfo
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|minConcurrency
init|=
name|resReqInfo
operator|.
name|getMinConcurrency
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
name|resReqInfo
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|ReservationRequest
name|rr
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|capability
argument_list|,
name|numContainers
argument_list|,
name|minConcurrency
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
name|ReservationRequests
name|reqs
init|=
name|ReservationRequests
operator|.
name|newInstance
argument_list|(
name|list
argument_list|,
name|resInt
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|ReservationDefinition
operator|.
name|newInstance
argument_list|(
name|resInfo
operator|.
name|getArrival
argument_list|()
argument_list|,
name|resInfo
operator|.
name|getDeadline
argument_list|()
argument_list|,
name|reqs
argument_list|,
name|resInfo
operator|.
name|getReservationName
argument_list|()
argument_list|,
name|resInfo
operator|.
name|getRecurrenceExpression
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|resInfo
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationId
init|=
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|resContext
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|request
init|=
name|ReservationSubmissionRequest
operator|.
name|newInstance
argument_list|(
name|rDef
argument_list|,
name|resContext
operator|.
name|getQueue
argument_list|()
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_UPDATE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateReservation (ReservationUpdateRequestInfo resContext, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|updateReservation
parameter_list|(
name|ReservationUpdateRequestInfo
name|resContext
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|ReservationUpdateRequest
name|reservation
init|=
name|createReservationUpdateRequest
argument_list|(
name|resContext
argument_list|)
decl_stmt|;
name|ReservationUpdateResponseInfo
name|resRespInfo
decl_stmt|;
try|try
block|{
name|resRespInfo
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ReservationUpdateResponseInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReservationUpdateResponseInfo
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|updateReservation
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReservationUpdateResponseInfo
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Update reservation request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|resRespInfo
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createReservationUpdateRequest ( ReservationUpdateRequestInfo resContext)
specifier|private
name|ReservationUpdateRequest
name|createReservationUpdateRequest
parameter_list|(
name|ReservationUpdateRequestInfo
name|resContext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// defending against a couple of common submission format problems
if|if
condition|(
name|resContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Input ReservationSubmissionContext should not be null"
argument_list|)
throw|;
block|}
name|ReservationDefinitionInfo
name|resInfo
init|=
name|resContext
operator|.
name|getReservationDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|resInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Input ReservationDefinition should not be null"
argument_list|)
throw|;
block|}
name|ReservationRequestsInfo
name|resReqsInfo
init|=
name|resInfo
operator|.
name|getReservationRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|resReqsInfo
operator|==
literal|null
operator|||
name|resReqsInfo
operator|.
name|getReservationRequest
argument_list|()
operator|==
literal|null
operator|||
name|resReqsInfo
operator|.
name|getReservationRequest
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The ReservationDefinition should"
operator|+
literal|" contain at least one ReservationRequest"
argument_list|)
throw|;
block|}
if|if
condition|(
name|resContext
operator|.
name|getReservationId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Update operations must specify an existing ReservaitonId"
argument_list|)
throw|;
block|}
name|ReservationRequestInterpreter
index|[]
name|values
init|=
name|ReservationRequestInterpreter
operator|.
name|values
argument_list|()
decl_stmt|;
name|ReservationRequestInterpreter
name|resInt
init|=
name|values
index|[
name|resReqsInfo
operator|.
name|getReservationRequestsInterpreter
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|ReservationRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReservationRequestInfo
name|resReqInfo
range|:
name|resReqsInfo
operator|.
name|getReservationRequest
argument_list|()
control|)
block|{
name|ResourceInfo
name|rInfo
init|=
name|resReqInfo
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|rInfo
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|rInfo
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numContainers
init|=
name|resReqInfo
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|minConcurrency
init|=
name|resReqInfo
operator|.
name|getMinConcurrency
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
name|resReqInfo
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|ReservationRequest
name|rr
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|capability
argument_list|,
name|numContainers
argument_list|,
name|minConcurrency
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
name|ReservationRequests
name|reqs
init|=
name|ReservationRequests
operator|.
name|newInstance
argument_list|(
name|list
argument_list|,
name|resInt
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|ReservationDefinition
operator|.
name|newInstance
argument_list|(
name|resInfo
operator|.
name|getArrival
argument_list|()
argument_list|,
name|resInfo
operator|.
name|getDeadline
argument_list|()
argument_list|,
name|reqs
argument_list|,
name|resInfo
operator|.
name|getReservationName
argument_list|()
argument_list|,
name|resInfo
operator|.
name|getRecurrenceExpression
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|resInfo
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReservationUpdateRequest
name|request
init|=
name|ReservationUpdateRequest
operator|.
name|newInstance
argument_list|(
name|rDef
argument_list|,
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|resContext
operator|.
name|getReservationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_DELETE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|deleteReservation (ReservationDeleteRequestInfo resContext, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequestInfo
name|resContext
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|ReservationDeleteRequest
name|reservation
init|=
name|createReservationDeleteRequest
argument_list|(
name|resContext
argument_list|)
decl_stmt|;
name|ReservationDeleteResponseInfo
name|resRespInfo
decl_stmt|;
try|try
block|{
name|resRespInfo
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ReservationDeleteResponseInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReservationDeleteResponseInfo
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|deleteReservation
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReservationDeleteResponseInfo
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Update reservation request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|resRespInfo
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createReservationDeleteRequest ( ReservationDeleteRequestInfo resContext)
specifier|private
name|ReservationDeleteRequest
name|createReservationDeleteRequest
parameter_list|(
name|ReservationDeleteRequestInfo
name|resContext
parameter_list|)
throws|throws
name|IOException
block|{
name|ReservationDeleteRequest
name|request
init|=
name|ReservationDeleteRequest
operator|.
name|newInstance
argument_list|(
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|resContext
operator|.
name|getReservationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_LIST
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|listReservation ( @ueryParamRMWSConsts.QUEUE) @efaultValueDEFAULT_QUEUE) String queue, @QueryParam(RMWSConsts.RESERVATION_ID) @DefaultValue(DEFAULT_RESERVATION_ID) String reservationId, @QueryParam(RMWSConsts.START_TIME) @DefaultValue(DEFAULT_START_TIME) long startTime, @QueryParam(RMWSConsts.END_TIME) @DefaultValue(DEFAULT_END_TIME) long endTime, @QueryParam(RMWSConsts.INCLUDE_RESOURCE) @DefaultValue(DEFAULT_INCLUDE_RESOURCE) boolean includeResourceAllocations, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|listReservation
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_QUEUE
argument_list|)
name|String
name|queue
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_ID
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_RESERVATION_ID
argument_list|)
name|String
name|reservationId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|START_TIME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_START_TIME
argument_list|)
name|long
name|startTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|END_TIME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_END_TIME
argument_list|)
name|long
name|endTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|INCLUDE_RESOURCE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_INCLUDE_RESOURCE
argument_list|)
name|boolean
name|includeResourceAllocations
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
specifier|final
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|,
name|reservationId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|includeResourceAllocations
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Unable to obtain user name, "
operator|+
literal|"user not authenticated"
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ReservationListResponse
name|resRespInfo
decl_stmt|;
try|try
block|{
name|resRespInfo
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ReservationListResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReservationListResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ue
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"List reservation request failed"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
name|ue
throw|;
block|}
name|ReservationListInfo
name|resResponse
init|=
operator|new
name|ReservationListInfo
argument_list|(
name|resRespInfo
argument_list|,
name|includeResourceAllocations
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|resResponse
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_TIMEOUTS_TYPE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppTimeout (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.TYPE) String type)
specifier|public
name|AppTimeoutInfo
name|getAppTimeout
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|TYPE
argument_list|)
name|String
name|type
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|validateAppTimeoutRequest
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|ApplicationTimeoutType
name|appTimeoutType
init|=
name|parseTimeoutType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Long
name|timeoutValue
init|=
name|app
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|get
argument_list|(
name|appTimeoutType
argument_list|)
decl_stmt|;
name|AppTimeoutInfo
name|timeout
init|=
name|constructAppTimeoutDao
argument_list|(
name|appTimeoutType
argument_list|,
name|timeoutValue
argument_list|)
decl_stmt|;
return|return
name|timeout
return|;
block|}
DECL|method|validateAppTimeoutRequest (HttpServletRequest hsr, String appId)
specifier|private
name|RMApp
name|validateAppTimeoutRequest
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"UNKNOWN-USER"
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|isStaticUser
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The default static user cannot carry out this operation."
decl_stmt|;
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|GET_APP_TIMEOUTS
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|GET_APP_TIMEOUTS
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to get timeouts of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|app
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_TIMEOUTS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppTimeouts (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppTimeoutsInfo
name|getAppTimeouts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|validateAppTimeoutRequest
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|AppTimeoutsInfo
name|timeouts
init|=
operator|new
name|AppTimeoutsInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|applicationTimeouts
init|=
name|app
operator|.
name|getApplicationTimeouts
argument_list|()
decl_stmt|;
if|if
condition|(
name|applicationTimeouts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If application is not set timeout, lifetime should be sent as default
comment|// with expiryTime=UNLIMITED and remainingTime=-1
name|timeouts
operator|.
name|add
argument_list|(
name|constructAppTimeoutDao
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeout
range|:
name|app
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AppTimeoutInfo
name|timeoutInfo
init|=
name|constructAppTimeoutDao
argument_list|(
name|timeout
operator|.
name|getKey
argument_list|()
argument_list|,
name|timeout
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|timeouts
operator|.
name|add
argument_list|(
name|timeoutInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|timeouts
return|;
block|}
DECL|method|parseTimeoutType (String type)
specifier|private
name|ApplicationTimeoutType
name|parseTimeoutType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
try|try
block|{
comment|// enum string is in the uppercase
return|return
name|ApplicationTimeoutType
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|type
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|ApplicationTimeoutType
index|[]
name|typeArray
init|=
name|ApplicationTimeoutType
operator|.
name|values
argument_list|()
decl_stmt|;
name|String
name|allAppTimeoutTypes
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|typeArray
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid application-state "
operator|+
name|type
operator|.
name|trim
argument_list|()
operator|+
literal|" specified. It should be one of "
operator|+
name|allAppTimeoutTypes
argument_list|)
throw|;
block|}
block|}
DECL|method|constructAppTimeoutDao (ApplicationTimeoutType type, Long timeoutInMillis)
specifier|private
name|AppTimeoutInfo
name|constructAppTimeoutDao
parameter_list|(
name|ApplicationTimeoutType
name|type
parameter_list|,
name|Long
name|timeoutInMillis
parameter_list|)
block|{
name|AppTimeoutInfo
name|timeout
init|=
operator|new
name|AppTimeoutInfo
argument_list|()
decl_stmt|;
name|timeout
operator|.
name|setTimeoutType
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeoutInMillis
operator|!=
literal|null
condition|)
block|{
name|timeout
operator|.
name|setExpiryTime
argument_list|(
name|Times
operator|.
name|formatISO8601
argument_list|(
name|timeoutInMillis
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|setRemainingTime
argument_list|(
name|Math
operator|.
name|max
argument_list|(
operator|(
name|timeoutInMillis
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|)
operator|/
literal|1000
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|timeout
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_TIMEOUT
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateApplicationTimeout (AppTimeoutInfo appTimeout, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateApplicationTimeout
parameter_list|(
name|AppTimeoutInfo
name|appTimeout
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
name|getRMAppForAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|userName
argument_list|,
name|AuditConstants
operator|.
name|UPDATE_APP_TIMEOUTS
argument_list|,
literal|"UNKNOWN"
argument_list|,
literal|"RMWebService"
argument_list|,
literal|"Trying to update timeout of an absent application "
operator|+
name|appId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|updateApplicationTimeouts
argument_list|(
name|app
argument_list|,
name|callerUGI
argument_list|,
name|appTimeout
argument_list|)
return|;
block|}
DECL|method|updateApplicationTimeouts (final RMApp app, UserGroupInformation callerUGI, final AppTimeoutInfo appTimeout)
specifier|private
name|Response
name|updateApplicationTimeouts
parameter_list|(
specifier|final
name|RMApp
name|app
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
specifier|final
name|AppTimeoutInfo
name|appTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|appTimeout
operator|.
name|getTimeoutType
argument_list|()
operator|==
literal|null
operator|||
name|appTimeout
operator|.
name|getExpireTime
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Timeout type or ExpiryTime is null."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|UpdateApplicationTimeoutsRequest
name|request
init|=
name|UpdateApplicationTimeoutsRequest
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|appTimeout
operator|.
name|getTimeoutType
argument_list|()
argument_list|,
name|appTimeout
operator|.
name|getExpireTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|updateApplicationTimeouts
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ue
parameter_list|)
block|{
comment|// if the root cause is a permissions issue
comment|// bubble that up to the user
if|if
condition|(
name|ue
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnException
condition|)
block|{
name|YarnException
name|ye
init|=
operator|(
name|YarnException
operator|)
name|ue
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|String
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"Unauthorized attempt to change timeout of app "
operator|+
name|appId
operator|+
literal|" by remote user "
operator|+
name|userName
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ye
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ue
throw|;
block|}
block|}
name|AppTimeoutInfo
name|timeout
init|=
name|constructAppTimeoutDao
argument_list|(
name|appTimeout
operator|.
name|getTimeoutType
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|get
argument_list|(
name|appTimeout
operator|.
name|getTimeoutType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|timeout
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationReport ( GetApplicationReportRequest request)
specifier|protected
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|GetApplicationReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationsReport ( final GetApplicationsRequest request)
specifier|protected
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplicationsReport
parameter_list|(
specifier|final
name|GetApplicationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptReport ( GetApplicationAttemptReportRequest request)
specifier|protected
name|ApplicationAttemptReport
name|getApplicationAttemptReport
parameter_list|(
name|GetApplicationAttemptReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptsReport ( GetApplicationAttemptsRequest request)
specifier|protected
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|getApplicationAttemptsReport
parameter_list|(
name|GetApplicationAttemptsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationAttempts
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerReport ( GetContainerReportRequest request)
specifier|protected
name|ContainerReport
name|getContainerReport
parameter_list|(
name|GetContainerReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContainersReport ( GetContainersRequest request)
specifier|protected
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|getContainersReport
parameter_list|(
name|GetContainersRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerList
argument_list|()
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_CONF
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|updateSchedulerConfiguration (SchedConfUpdateInfo mutationInfo, @Context HttpServletRequest hsr)
specifier|public
specifier|synchronized
name|Response
name|updateSchedulerConfiguration
parameter_list|(
name|SchedConfUpdateInfo
name|mutationInfo
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheduler
operator|instanceof
name|MutableConfScheduler
operator|&&
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|scheduler
operator|)
operator|.
name|isConfigurationMutable
argument_list|()
condition|)
block|{
try|try
block|{
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableConfigurationProvider
name|provider
init|=
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getMutableConfProvider
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|provider
operator|.
name|getAclMutationPolicy
argument_list|()
operator|.
name|isMutationAllowed
argument_list|(
name|callerUGI
argument_list|,
name|mutationInfo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
argument_list|(
literal|"User"
operator|+
literal|" is not admin of all modified queues."
argument_list|)
throw|;
block|}
name|provider
operator|.
name|logAndApplyMutation
argument_list|(
name|callerUGI
argument_list|,
name|mutationInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|refreshQueues
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|YarnException
name|e
parameter_list|)
block|{
name|provider
operator|.
name|confirmPendingMutation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|provider
operator|.
name|confirmPendingMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception thrown when modifying configuration."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Configuration change "
operator|+
literal|"successfully applied."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Configuration change only supported by "
operator|+
literal|"MutableConfScheduler."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_CONF
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getSchedulerConfiguration (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|getSchedulerConfiguration
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
block|{
comment|// Only admin user is allowed to read scheduler conf,
comment|// in order to avoid leaking sensitive info, such as ACLs
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initForWritableEndpoints
argument_list|(
name|callerUGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheduler
operator|instanceof
name|MutableConfScheduler
operator|&&
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|scheduler
operator|)
operator|.
name|isConfigurationMutable
argument_list|()
condition|)
block|{
name|MutableConfigurationProvider
name|mutableConfigurationProvider
init|=
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getMutableConfProvider
argument_list|()
decl_stmt|;
comment|// We load the cached configuration from configuration store,
comment|// this should be the conf properties used by the scheduler.
name|Configuration
name|schedulerConf
init|=
name|mutableConfigurationProvider
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
operator|new
name|ConfInfo
argument_list|(
name|schedulerConf
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"This API only supports to retrieve scheduler configuration"
operator|+
literal|" from a mutable-conf scheduler, underneath scheduler "
operator|+
name|scheduler
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" is not an instance of MutableConfScheduler"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|CHECK_USER_ACCESS_TO_QUEUE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|checkUserAccessToQueue ( @athParamRMWSConsts.QUEUE) String queue, @QueryParam(RMWSConsts.USER) String username, @QueryParam(RMWSConsts.QUEUE_ACL_TYPE) @DefaultValue(R) String queueAclType, @Context HttpServletRequest hsr)
specifier|public
name|RMQueueAclInfo
name|checkUserAccessToQueue
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE
argument_list|)
name|String
name|queue
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|USER
argument_list|)
name|String
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE_ACL_TYPE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"SUBMIT_APPLICATIONS"
argument_list|)
name|String
name|queueAclType
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|initForReadableEndpoints
argument_list|()
expr_stmt|;
comment|// For the user who invokes this REST call, he/she should have admin access
comment|// to the queue. Otherwise we will reject the call.
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|queue
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ForbiddenException
argument_list|(
literal|"User="
operator|+
name|callerUGI
operator|.
name|getUserName
argument_list|()
operator|+
literal|" doesn't haven access to queue="
operator|+
name|queue
operator|+
literal|" so it cannot check ACLs for other users."
argument_list|)
throw|;
block|}
comment|// Create UGI for the to-be-checked user.
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ForbiddenException
argument_list|(
literal|"Failed to retrieve UserGroupInformation for user="
operator|+
name|username
argument_list|)
throw|;
block|}
comment|// Check if the specified queue acl is valid.
name|QueueACL
name|queueACL
decl_stmt|;
try|try
block|{
name|queueACL
operator|=
name|QueueACL
operator|.
name|valueOf
argument_list|(
name|queueAclType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Specified queueAclType="
operator|+
name|queueAclType
operator|+
literal|" is not a valid type, valid queue acl types={"
operator|+
literal|"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|user
argument_list|,
name|queueACL
argument_list|,
name|queue
argument_list|)
condition|)
block|{
return|return
operator|new
name|RMQueueAclInfo
argument_list|(
literal|false
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|"User="
operator|+
name|username
operator|+
literal|" doesn't have access to queue="
operator|+
name|queue
operator|+
literal|" with acl-type="
operator|+
name|queueAclType
argument_list|)
return|;
block|}
return|return
operator|new
name|RMQueueAclInfo
argument_list|(
literal|true
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

