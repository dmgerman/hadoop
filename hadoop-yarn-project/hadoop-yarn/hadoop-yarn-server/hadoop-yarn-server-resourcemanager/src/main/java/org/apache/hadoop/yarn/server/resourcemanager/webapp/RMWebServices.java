begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FairSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FifoSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|StatisticsItemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/cluster"
argument_list|)
DECL|class|RMWebServices
specifier|public
class|class
name|RMWebServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMWebServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY
init|=
literal|""
decl_stmt|;
DECL|field|ANY
specifier|private
specifier|static
specifier|final
name|String
name|ANY
init|=
literal|"*"
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|aclsManager
specifier|private
specifier|final
name|ApplicationACLsManager
name|aclsManager
decl_stmt|;
DECL|field|queueACLsManager
specifier|private
specifier|final
name|QueueACLsManager
name|queueACLsManager
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|response
specifier|private
annotation|@
name|Context
name|HttpServletResponse
name|response
decl_stmt|;
annotation|@
name|Inject
DECL|method|RMWebServices (final ResourceManager rm, final ApplicationACLsManager aclsManager, final QueueACLsManager queueACLsManager, Configuration conf)
specifier|public
name|RMWebServices
parameter_list|(
specifier|final
name|ResourceManager
name|rm
parameter_list|,
specifier|final
name|ApplicationACLsManager
name|aclsManager
parameter_list|,
specifier|final
name|QueueACLsManager
name|queueACLsManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|aclsManager
operator|=
name|aclsManager
expr_stmt|;
name|this
operator|.
name|queueACLsManager
operator|=
name|queueACLsManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|hasAccess (RMApp app, HttpServletRequest hsr)
specifier|protected
name|Boolean
name|hasAccess
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
comment|// Check for the authorization.
name|String
name|remoteUser
init|=
name|hsr
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|this
operator|.
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|||
name|this
operator|.
name|queueACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|//clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|get ()
specifier|public
name|ClusterInfo
name|get
parameter_list|()
block|{
return|return
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/info"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClusterInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/metrics"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterMetricsInfo ()
specifier|public
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClusterMetricsInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|,
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/scheduler"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getSchedulerInfo ()
specifier|public
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerInfo
name|sinfo
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
name|CSQueue
name|root
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|sinfo
operator|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FairScheduler
condition|)
block|{
name|FairScheduler
name|fs
init|=
operator|(
name|FairScheduler
operator|)
name|rs
decl_stmt|;
name|sinfo
operator|=
operator|new
name|FairSchedulerInfo
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FifoScheduler
condition|)
block|{
name|sinfo
operator|=
operator|new
name|FifoSchedulerInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Unknown scheduler configured"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SchedulerTypeInfo
argument_list|(
name|sinfo
argument_list|)
return|;
block|}
comment|/**    * Returns all nodes in the cluster. If the states param is given, returns    * all nodes that are in the comma-separated list of states.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNodes (@ueryParamR) String states)
specifier|public
name|NodesInfo
name|getNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|String
name|states
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|acceptedStates
decl_stmt|;
if|if
condition|(
name|states
operator|==
literal|null
condition|)
block|{
name|acceptedStates
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acceptedStates
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|stateStr
range|:
name|states
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|acceptedStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|valueOf
argument_list|(
name|stateStr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|acceptedStates
argument_list|)
decl_stmt|;
name|NodesInfo
name|nodesInfo
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|rmNodes
control|)
block|{
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|rmNode
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|)
operator|.
name|contains
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|nodesInfo
operator|.
name|add
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|nodesInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes/{nodeId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNode (@athParamR) String nodeId)
specifier|public
name|NodeInfo
name|getNode
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"nodeId"
argument_list|)
name|String
name|nodeId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeId
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|boolean
name|isInactive
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
name|ni
operator|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
name|isInactive
operator|=
literal|true
expr_stmt|;
block|}
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|ni
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInactive
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getApps (@ontext HttpServletRequest hsr, @QueryParam(R) String stateQuery, @QueryParam(R) Set<String> statesQuery, @QueryParam(R) String finalStatusQuery, @QueryParam(R) String userQuery, @QueryParam(R) String queueQuery, @QueryParam(R) String count, @QueryParam(R) String startedBegin, @QueryParam(R) String startedEnd, @QueryParam(R) String finishBegin, @QueryParam(R) String finishEnd, @QueryParam(R) Set<String> applicationTypes, @QueryParam(R) Set<String> applicationTags)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finalStatus"
argument_list|)
name|String
name|finalStatusQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"queue"
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|count
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|)
name|String
name|finishEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTypes"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTags"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|)
block|{
name|boolean
name|checkCount
init|=
literal|false
decl_stmt|;
name|boolean
name|checkStart
init|=
literal|false
decl_stmt|;
name|boolean
name|checkEnd
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppTypes
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppStates
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppTags
init|=
literal|false
decl_stmt|;
name|long
name|countNum
init|=
literal|0
decl_stmt|;
comment|// set values suitable in case both of begin/end not specified
name|long
name|sBegin
init|=
literal|0
decl_stmt|;
name|long
name|sEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|fBegin
init|=
literal|0
decl_stmt|;
name|long
name|fEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
operator|!
name|count
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkCount
operator|=
literal|true
expr_stmt|;
name|countNum
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|countNum
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"limit value must be greater then 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedBegin
operator|!=
literal|null
operator|&&
operator|!
name|startedBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|sBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedEnd
operator|!=
literal|null
operator|&&
operator|!
name|startedEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|sEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sBegin
operator|>
name|sEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than startTimeBegin"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishBegin
operator|!=
literal|null
operator|&&
operator|!
name|finishBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|fBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|finishEnd
operator|!=
literal|null
operator|&&
operator|!
name|finishEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|fEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fBegin
operator|>
name|fEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than finishTimeBegin"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
name|parseQueries
argument_list|(
name|applicationTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppTypes
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
name|parseQueries
argument_list|(
name|applicationTags
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppTags
operator|=
literal|true
expr_stmt|;
block|}
comment|// stateQuery is deprecated.
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|statesQuery
operator|.
name|add
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appStates
init|=
name|parseQueries
argument_list|(
name|statesQuery
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppStates
operator|=
literal|true
expr_stmt|;
block|}
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkStart
condition|)
block|{
name|request
operator|.
name|setStartRange
argument_list|(
name|sBegin
argument_list|,
name|sEnd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkEnd
condition|)
block|{
name|request
operator|.
name|setFinishRange
argument_list|(
name|fBegin
argument_list|,
name|fEnd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkCount
condition|)
block|{
name|request
operator|.
name|setLimit
argument_list|(
name|countNum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkAppTypes
condition|)
block|{
name|request
operator|.
name|setApplicationTypes
argument_list|(
name|appTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkAppTags
condition|)
block|{
name|request
operator|.
name|setApplicationTags
argument_list|(
name|appTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkAppStates
condition|)
block|{
name|request
operator|.
name|setApplicationStates
argument_list|(
name|appStates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queueQuery
operator|!=
literal|null
operator|&&
operator|!
name|queueQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
comment|// validate queue exists
try|try
block|{
name|cs
operator|.
name|getQueueInfo
argument_list|(
name|queueQuery
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
name|queueQuery
argument_list|)
expr_stmt|;
name|request
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userQuery
operator|!=
literal|null
operator|&&
operator|!
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
name|userQuery
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUsers
argument_list|(
name|users
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appReports
operator|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request
argument_list|,
literal|false
argument_list|)
operator|.
name|getApplicationList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to retrieve apps from ClientRMService"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unable to retrieve apps from ClientRMService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|appReports
control|)
block|{
name|RMApp
name|rmapp
init|=
name|apps
operator|.
name|get
argument_list|(
name|report
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalStatusQuery
operator|!=
literal|null
operator|&&
operator|!
name|finalStatusQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|finalStatusQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|finalStatusQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|rmapp
argument_list|,
name|hasAccess
argument_list|(
name|rmapp
argument_list|,
name|hsr
argument_list|)
argument_list|,
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|allApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
return|return
name|allApps
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/appstatistics"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppStatistics ( @ontext HttpServletRequest hsr, @QueryParam(R) Set<String> stateQueries, @QueryParam(R) Set<String> typeQueries)
specifier|public
name|ApplicationStatisticsInfo
name|getAppStatistics
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|stateQueries
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTypes"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|typeQueries
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
comment|// parse the params and build the scoreboard
comment|// converting state/type name to lowercase
name|Set
argument_list|<
name|String
argument_list|>
name|states
init|=
name|parseQueries
argument_list|(
name|stateQueries
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
name|parseQueries
argument_list|(
name|typeQueries
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if no types, counts the applications of any types
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"# of applicationTypes = "
operator|+
name|types
operator|.
name|size
argument_list|()
operator|+
literal|", we temporarily support at most one applicationType"
argument_list|)
throw|;
block|}
comment|// if no states, returns the counts of all RMAppStates
if|if
condition|(
name|states
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|YarnApplicationState
name|state
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|states
operator|.
name|add
argument_list|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// in case we extend to multiple applicationTypes in the future
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
init|=
name|buildScoreboard
argument_list|(
name|states
argument_list|,
name|types
argument_list|)
decl_stmt|;
comment|// go through the apps in RM to count the numbers, ignoring the case of
comment|// the state/type name
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
for|for
control|(
name|RMApp
name|rmapp
range|:
name|apps
operator|.
name|values
argument_list|()
control|)
block|{
name|YarnApplicationState
name|state
init|=
name|rmapp
operator|.
name|createApplicationState
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|rmapp
operator|.
name|getApplicationType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|states
operator|.
name|contains
argument_list|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|ANY
argument_list|)
condition|)
block|{
name|countApp
argument_list|(
name|scoreboard
argument_list|,
name|state
argument_list|,
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|countApp
argument_list|(
name|scoreboard
argument_list|,
name|state
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// fill the response object
name|ApplicationStatisticsInfo
name|appStatInfo
init|=
operator|new
name|ApplicationStatisticsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|partScoreboard
range|:
name|scoreboard
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|statEntry
range|:
name|partScoreboard
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StatisticsItemInfo
name|statItem
init|=
operator|new
name|StatisticsItemInfo
argument_list|(
name|partScoreboard
operator|.
name|getKey
argument_list|()
argument_list|,
name|statEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|statEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|appStatInfo
operator|.
name|add
argument_list|(
name|statItem
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appStatInfo
return|;
block|}
DECL|method|parseQueries ( Set<String> queries, boolean isState)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseQueries
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queries
parameter_list|,
name|boolean
name|isState
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|queries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|paramStrs
init|=
name|query
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|paramStr
range|:
name|paramStrs
control|)
block|{
if|if
condition|(
name|paramStr
operator|!=
literal|null
operator|&&
operator|!
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isState
condition|)
block|{
try|try
block|{
comment|// enum string is in the uppercase
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|YarnApplicationState
index|[]
name|stateArray
init|=
name|YarnApplicationState
operator|.
name|values
argument_list|()
decl_stmt|;
name|String
name|allAppStates
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|stateArray
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid application-state "
operator|+
name|paramStr
operator|.
name|trim
argument_list|()
operator|+
literal|" specified. It should be one of "
operator|+
name|allAppStates
argument_list|)
throw|;
block|}
block|}
name|params
operator|.
name|add
argument_list|(
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|buildScoreboard ( Set<String> states, Set<String> types)
specifier|private
specifier|static
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|buildScoreboard
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|states
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
init|=
operator|new
name|HashMap
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// default states will result in enumerating all YarnApplicationStates
assert|assert
operator|!
name|states
operator|.
name|isEmpty
argument_list|()
assert|;
for|for
control|(
name|String
name|state
range|:
name|states
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|partScoreboard
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|scoreboard
operator|.
name|put
argument_list|(
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|,
name|partScoreboard
argument_list|)
expr_stmt|;
comment|// types is verified no to be empty
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|partScoreboard
operator|.
name|put
argument_list|(
name|type
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scoreboard
return|;
block|}
DECL|method|countApp ( Map<YarnApplicationState, Map<String, Long>> scoreboard, YarnApplicationState state, String type)
specifier|private
specifier|static
name|void
name|countApp
parameter_list|(
name|Map
argument_list|<
name|YarnApplicationState
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|scoreboard
parameter_list|,
name|YarnApplicationState
name|state
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|partScoreboard
init|=
name|scoreboard
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Long
name|count
init|=
name|partScoreboard
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|partScoreboard
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
operator|+
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getApp (@ontext HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|id
decl_stmt|;
name|id
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is null"
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AppInfo
argument_list|(
name|app
argument_list|,
name|hasAccess
argument_list|(
name|app
argument_list|,
name|hsr
argument_list|)
argument_list|,
name|hsr
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppAttempts (@athParamR) String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|id
decl_stmt|;
name|id
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is null"
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|AppAttemptsInfo
name|appAttemptsInfo
init|=
operator|new
name|AppAttemptsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AppAttemptInfo
name|attemptInfo
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|attempt
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|appAttemptsInfo
operator|.
name|add
argument_list|(
name|attemptInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttemptsInfo
return|;
block|}
block|}
end_class

end_unit

