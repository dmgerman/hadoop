begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_class
DECL|class|AbstractSystemMetricsPublisher
specifier|public
specifier|abstract
class|class
name|AbstractSystemMetricsPublisher
extends|extends
name|CompositeService
implements|implements
name|SystemMetricsPublisher
block|{
DECL|field|dispatcher
specifier|private
name|MultiThreadedDispatcher
name|dispatcher
decl_stmt|;
DECL|method|getDispatcher ()
specifier|protected
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
DECL|method|AbstractSystemMetricsPublisher (String name)
specifier|public
name|AbstractSystemMetricsPublisher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|dispatcher
operator|=
operator|new
name|MultiThreadedDispatcher
argument_list|(
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|MultiThreadedDispatcher
specifier|public
specifier|static
class|class
name|MultiThreadedDispatcher
extends|extends
name|CompositeService
implements|implements
name|Dispatcher
block|{
DECL|field|dispatchers
specifier|private
name|List
argument_list|<
name|AsyncDispatcher
argument_list|>
name|dispatchers
init|=
operator|new
name|ArrayList
argument_list|<
name|AsyncDispatcher
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MultiThreadedDispatcher (int num)
specifier|public
name|MultiThreadedDispatcher
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|super
argument_list|(
name|MultiThreadedDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|AsyncDispatcher
name|dispatcher
init|=
name|createDispatcher
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|add
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
operator|new
name|CompositEventHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|register (Class<? extends Enum> eventType, EventHandler handler)
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{
for|for
control|(
name|AsyncDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
name|dispatcher
operator|.
name|register
argument_list|(
name|eventType
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setDrainEventsOnStop ()
specifier|public
name|void
name|setDrainEventsOnStop
parameter_list|()
block|{
for|for
control|(
name|AsyncDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CompositEventHandler
specifier|private
class|class
name|CompositEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// Use hashCode (of ApplicationId) to dispatch the event to the child
comment|// dispatcher, such that all the writing events of one application will
comment|// be handled by one thread, the scheduled order of the these events
comment|// will be preserved
name|int
name|index
init|=
operator|(
name|event
operator|.
name|hashCode
argument_list|()
operator|&
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|%
name|dispatchers
operator|.
name|size
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDispatcher ()
specifier|protected
name|AsyncDispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|AsyncDispatcher
argument_list|()
return|;
block|}
block|}
comment|/**    * EventType which is used while publishing the events    */
DECL|enum|SystemMetricsEventType
specifier|protected
specifier|static
enum|enum
name|SystemMetricsEventType
block|{
DECL|enumConstant|PUBLISH_ENTITY
DECL|enumConstant|PUBLISH_APPLICATION_FINISHED_ENTITY
name|PUBLISH_ENTITY
block|,
name|PUBLISH_APPLICATION_FINISHED_ENTITY
block|}
comment|/**    * TimelinePublishEvent's hash code should be based on application's id this    * will ensure all the events related to a particular app goes to particular    * thread of MultiThreaded dispatcher.    */
DECL|class|TimelinePublishEvent
specifier|protected
specifier|static
specifier|abstract
class|class
name|TimelinePublishEvent
extends|extends
name|AbstractEvent
argument_list|<
name|SystemMetricsEventType
argument_list|>
block|{
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
decl_stmt|;
DECL|method|TimelinePublishEvent (SystemMetricsEventType type, ApplicationId appId)
specifier|public
name|TimelinePublishEvent
parameter_list|(
name|SystemMetricsEventType
name|type
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
block|}
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|appId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|appId
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|TimelinePublishEvent
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimelinePublishEvent
name|other
init|=
operator|(
name|TimelinePublishEvent
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|appId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|getType
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|appId
argument_list|)
operator|||
operator|!
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

