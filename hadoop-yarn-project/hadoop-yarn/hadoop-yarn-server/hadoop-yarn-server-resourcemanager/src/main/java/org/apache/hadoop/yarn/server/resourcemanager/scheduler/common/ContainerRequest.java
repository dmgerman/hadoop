begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ContainerRequest is a class to capture resource requests associated with a  * Container, this will be used by scheduler to recover resource requests if the  * container preempted or cancelled before AM acquire the container.  *  * It should include deducted resource requests when the container allocated.  *  * Lifecycle of the ContainerRequest is:  *  *<pre>  * 1) It is instantiated when container created.  * 2) It will be set to ContainerImpl by scheduler.  * 3) When container preempted or cancelled because of whatever reason before  *    container acquired by AM. ContainerRequest will be added back to pending  *    request pool.  * 4) It will be cleared from ContainerImpl if the container already acquired by  *    AM.  *</pre>  */
end_comment

begin_class
DECL|class|ContainerRequest
specifier|public
class|class
name|ContainerRequest
block|{
DECL|field|requests
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
decl_stmt|;
DECL|field|schedulingRequest
specifier|private
name|SchedulingRequest
name|schedulingRequest
decl_stmt|;
DECL|method|ContainerRequest (List<ResourceRequest> requests)
specifier|public
name|ContainerRequest
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
parameter_list|)
block|{
name|this
operator|.
name|requests
operator|=
name|requests
expr_stmt|;
name|schedulingRequest
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|ContainerRequest (SchedulingRequest schedulingRequest)
specifier|public
name|ContainerRequest
parameter_list|(
name|SchedulingRequest
name|schedulingRequest
parameter_list|)
block|{
name|this
operator|.
name|schedulingRequest
operator|=
name|schedulingRequest
expr_stmt|;
name|this
operator|.
name|requests
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getResourceRequests ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getResourceRequests
parameter_list|()
block|{
return|return
name|requests
return|;
block|}
DECL|method|getSchedulingRequest ()
specifier|public
name|SchedulingRequest
name|getSchedulingRequest
parameter_list|()
block|{
return|return
name|schedulingRequest
return|;
block|}
block|}
end_class

end_unit

