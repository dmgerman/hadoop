begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi.processor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
operator|.
name|ApplicationMasterServiceProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|Volume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|VolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|provisioner
operator|.
name|VolumeProvisioningResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|provisioner
operator|.
name|VolumeProvisioningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|InvalidVolumeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|VolumeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|VolumeProvisioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * AMS processor that handles volume resource requests.  *  */
end_comment

begin_class
DECL|class|VolumeAMSProcessor
specifier|public
class|class
name|VolumeAMSProcessor
implements|implements
name|ApplicationMasterServiceProcessor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeAMSProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nextAMSProcessor
specifier|private
name|ApplicationMasterServiceProcessor
name|nextAMSProcessor
decl_stmt|;
DECL|field|volumeManager
specifier|private
name|VolumeManager
name|volumeManager
decl_stmt|;
annotation|@
name|Override
DECL|method|init (ApplicationMasterServiceContext amsContext, ApplicationMasterServiceProcessor nextProcessor)
specifier|public
name|void
name|init
parameter_list|(
name|ApplicationMasterServiceContext
name|amsContext
parameter_list|,
name|ApplicationMasterServiceProcessor
name|nextProcessor
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing CSI volume processor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextAMSProcessor
operator|=
name|nextProcessor
expr_stmt|;
name|this
operator|.
name|volumeManager
operator|=
operator|(
operator|(
name|RMContext
operator|)
name|amsContext
operator|)
operator|.
name|getVolumeManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( ApplicationAttemptId applicationAttemptId, RegisterApplicationMasterRequest request, RegisterApplicationMasterResponse response)
specifier|public
name|void
name|registerApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|RegisterApplicationMasterRequest
name|request
parameter_list|,
name|RegisterApplicationMasterResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|this
operator|.
name|nextAMSProcessor
operator|.
name|registerApplicationMaster
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId appAttemptId, AllocateRequest request, AllocateResponse response)
specifier|public
name|void
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AllocateRequest
name|request
parameter_list|,
name|AllocateResponse
name|response
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|Volume
argument_list|>
name|volumes
init|=
name|aggregateVolumesFrom
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumes
operator|!=
literal|null
operator|&&
name|volumes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ScheduledFuture
argument_list|<
name|VolumeProvisioningResults
argument_list|>
name|result
init|=
name|this
operator|.
name|volumeManager
operator|.
name|schedule
argument_list|(
operator|new
name|VolumeProvisioningTask
argument_list|(
name|volumes
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|VolumeProvisioningResults
name|volumeResult
init|=
name|result
operator|.
name|get
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|volumeResult
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|VolumeProvisioningException
argument_list|(
literal|"Volume provisioning failed,"
operator|+
literal|" result details: "
operator|+
name|volumeResult
operator|.
name|getBriefMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|TimeoutException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume provisioning task failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|VolumeException
argument_list|(
literal|"Volume provisioning task failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Go to next processor
name|this
operator|.
name|nextAMSProcessor
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|// Currently only scheduling request is supported.
DECL|method|aggregateVolumesFrom (AllocateRequest request)
specifier|private
name|List
argument_list|<
name|Volume
argument_list|>
name|aggregateVolumesFrom
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|VolumeException
block|{
name|List
argument_list|<
name|Volume
argument_list|>
name|volumeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|requests
init|=
name|request
operator|.
name|getSchedulingRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SchedulingRequest
name|req
range|:
name|requests
control|)
block|{
name|Resource
name|totalResource
init|=
name|req
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ResourceInformation
argument_list|>
name|resourceList
init|=
name|totalResource
operator|.
name|getAllResourcesListCopy
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceInformation
name|resourceInformation
range|:
name|resourceList
control|)
block|{
name|List
argument_list|<
name|VolumeMetaData
argument_list|>
name|volumes
init|=
name|VolumeMetaData
operator|.
name|fromResource
argument_list|(
name|resourceInformation
argument_list|)
decl_stmt|;
for|for
control|(
name|VolumeMetaData
name|vs
range|:
name|volumes
control|)
block|{
if|if
condition|(
name|vs
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getMinCapacity
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// capacity not specified, ignore
continue|continue;
block|}
elseif|else
if|if
condition|(
name|vs
operator|.
name|isProvisionedVolume
argument_list|()
condition|)
block|{
name|volumeList
operator|.
name|add
argument_list|(
name|checkAndGetVolume
argument_list|(
name|vs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidVolumeException
argument_list|(
literal|"Only pre-provisioned volume"
operator|+
literal|" is supported now, volumeID must exist."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
return|return
name|volumeList
return|;
block|}
comment|/**    * If given volume ID already exists in the volume manager,    * it returns the existing volume. Otherwise, it creates a new    * volume and add that to volume manager.    * @param metaData    * @return volume    */
DECL|method|checkAndGetVolume (VolumeMetaData metaData)
specifier|private
name|Volume
name|checkAndGetVolume
parameter_list|(
name|VolumeMetaData
name|metaData
parameter_list|)
block|{
name|Volume
name|toAdd
init|=
operator|new
name|VolumeImpl
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|volumeManager
operator|.
name|addOrGetVolume
argument_list|(
name|toAdd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( ApplicationAttemptId applicationAttemptId, FinishApplicationMasterRequest request, FinishApplicationMasterResponse response)
specifier|public
name|void
name|finishApplicationMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|FinishApplicationMasterRequest
name|request
parameter_list|,
name|FinishApplicationMasterResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|nextAMSProcessor
operator|.
name|finishApplicationMaster
argument_list|(
name|applicationAttemptId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

