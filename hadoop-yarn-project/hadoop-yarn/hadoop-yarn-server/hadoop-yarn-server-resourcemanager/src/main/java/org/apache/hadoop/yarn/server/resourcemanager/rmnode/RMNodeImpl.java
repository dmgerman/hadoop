begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmnode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|OpportunisticContainersStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManagerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRunningOnNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|AllocationExpirationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeResourceUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
operator|.
name|ContainerIdComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class is used to keep track of all the applications/containers  * running on a node.  *  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|RMNodeImpl
specifier|public
class|class
name|RMNodeImpl
implements|implements
name|RMNode
implements|,
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMNodeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|nodeUpdateQueue
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|nodeUpdateQueue
decl_stmt|;
DECL|field|nextHeartBeat
specifier|private
specifier|volatile
name|boolean
name|nextHeartBeat
init|=
literal|true
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|RMContext
name|context
decl_stmt|;
DECL|field|hostName
specifier|private
specifier|final
name|String
name|hostName
decl_stmt|;
DECL|field|commandPort
specifier|private
specifier|final
name|int
name|commandPort
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|nodeAddress
specifier|private
specifier|final
name|String
name|nodeAddress
decl_stmt|;
comment|// The containerManager address
DECL|field|httpAddress
specifier|private
name|String
name|httpAddress
decl_stmt|;
comment|/* Snapshot of total resources before receiving decommissioning command */
DECL|field|originalTotalCapability
specifier|private
specifier|volatile
name|Resource
name|originalTotalCapability
decl_stmt|;
DECL|field|totalCapability
specifier|private
specifier|volatile
name|Resource
name|totalCapability
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
DECL|field|healthReport
specifier|private
name|String
name|healthReport
decl_stmt|;
DECL|field|lastHealthReportTime
specifier|private
name|long
name|lastHealthReportTime
decl_stmt|;
DECL|field|nodeManagerVersion
specifier|private
name|String
name|nodeManagerVersion
decl_stmt|;
DECL|field|decommissioningTimeout
specifier|private
name|Integer
name|decommissioningTimeout
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
decl_stmt|;
comment|/* Aggregated resource utilization for the containers. */
DECL|field|containersUtilization
specifier|private
name|ResourceUtilization
name|containersUtilization
decl_stmt|;
comment|/* Resource utilization for the node. */
DECL|field|nodeUtilization
specifier|private
name|ResourceUtilization
name|nodeUtilization
decl_stmt|;
comment|/** Physical resources in the node. */
DECL|field|physicalResource
specifier|private
specifier|volatile
name|Resource
name|physicalResource
decl_stmt|;
comment|/* Container Queue Information for the node.. Used by Distributed Scheduler */
DECL|field|opportunisticContainersStatus
specifier|private
name|OpportunisticContainersStatus
name|opportunisticContainersStatus
decl_stmt|;
DECL|field|containerAllocationExpirer
specifier|private
specifier|final
name|ContainerAllocationExpirer
name|containerAllocationExpirer
decl_stmt|;
comment|/* set of containers that have just launched */
DECL|field|launchedContainers
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|launchedContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
comment|/* track completed container globally */
DECL|field|completedContainers
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|completedContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
comment|/* set of containers that need to be cleaned */
DECL|field|containersToClean
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containersToClean
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
operator|new
name|ContainerIdComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|/* set of containers that need to be signaled */
DECL|field|containersToSignal
specifier|private
specifier|final
name|List
argument_list|<
name|SignalContainerRequest
argument_list|>
name|containersToSignal
init|=
operator|new
name|ArrayList
argument_list|<
name|SignalContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|/*    * set of containers to notify NM to remove them from its context. Currently,    * this includes containers that were notified to AM about their completion    */
DECL|field|containersToBeRemovedFromNM
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containersToBeRemovedFromNM
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
comment|/* the list of applications that have finished and need to be purged */
DECL|field|finishedApplications
specifier|private
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplications
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
comment|/* the list of applications that are running on this node */
DECL|field|runningApplications
specifier|private
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApplications
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|toBeUpdatedContainers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|toBeUpdatedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nmReportedIncreasedContainers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|nmReportedIncreasedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|latestNodeHeartBeatResponse
specifier|private
name|NodeHeartbeatResponse
name|latestNodeHeartBeatResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMNodeImpl
argument_list|,
name|NodeState
argument_list|,
name|RMNodeEventType
argument_list|,
DECL|field|stateMachineFactory
name|RMNodeEvent
argument_list|>
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMNodeImpl
argument_list|,
name|NodeState
argument_list|,
name|RMNodeEventType
argument_list|,
name|RMNodeEvent
argument_list|>
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|)
comment|//Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|STARTED
argument_list|,
operator|new
name|AddNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|,
name|NodeState
operator|.
name|NEW
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenUnusableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
comment|//Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateWhenHealthyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|GRACEFUL_DECOMMISSION
argument_list|,
operator|new
name|DecommissioningNodeTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|RMNodeEventType
operator|.
name|REBOOTING
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_APP
argument_list|,
operator|new
name|CleanUpAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|,
operator|new
name|CleanUpContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
operator|new
name|ReconnectNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|UPDATE_CONTAINER
argument_list|,
operator|new
name|UpdateContainersTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|SIGNAL_CONTAINER
argument_list|,
operator|new
name|SignalContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|RMNodeEventType
operator|.
name|SHUTDOWN
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
comment|//Transitions from REBOOTED state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenUnusableTransition
argument_list|()
argument_list|)
comment|//Transitions from DECOMMISSIONED state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenUnusableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
comment|//Transitions from DECOMMISSIONING state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|RECOMMISSION
argument_list|,
operator|new
name|RecommissionNodeTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateWhenHealthyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|GRACEFUL_DECOMMISSION
argument_list|,
operator|new
name|DecommissioningNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|RMNodeEventType
operator|.
name|REBOOTING
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_APP
argument_list|,
operator|new
name|CleanUpAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|RMNodeEventType
operator|.
name|SHUTDOWN
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
comment|// TODO (in YARN-3223) update resource when container finished.
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|,
operator|new
name|CleanUpContainerTransition
argument_list|()
argument_list|)
comment|// TODO (in YARN-3223) update resource when container finished.
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
operator|new
name|ReconnectNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenRunningTransition
argument_list|()
argument_list|)
comment|//Transitions from LOST state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenUnusableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
comment|//Transitions from UNHEALTHY state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateWhenUnHealthyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|,
name|RMNodeEventType
operator|.
name|GRACEFUL_DECOMMISSION
argument_list|,
operator|new
name|DecommissioningNodeTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|RMNodeEventType
operator|.
name|REBOOTING
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
operator|new
name|ReconnectNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_APP
argument_list|,
operator|new
name|CleanUpAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|,
operator|new
name|CleanUpContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenUnusableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|SIGNAL_CONTAINER
argument_list|,
operator|new
name|SignalContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|RMNodeEventType
operator|.
name|SHUTDOWN
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
comment|//Transitions from SHUTDOWN state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|RMNodeEventType
operator|.
name|RESOURCE_UPDATE
argument_list|,
operator|new
name|UpdateNodeResourceWhenUnusableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|RMNodeEventType
operator|.
name|FINISHED_CONTAINERS_PULLED_BY_AM
argument_list|,
operator|new
name|AddContainersToBeRemovedFromNMTransition
argument_list|()
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|NodeState
argument_list|,
name|RMNodeEventType
argument_list|,
DECL|field|stateMachine
name|RMNodeEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|method|RMNodeImpl (NodeId nodeId, RMContext context, String hostName, int cmPort, int httpPort, Node node, Resource capability, String nodeManagerVersion)
specifier|public
name|RMNodeImpl
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|String
name|hostName
parameter_list|,
name|int
name|cmPort
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|Node
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|String
name|nodeManagerVersion
parameter_list|)
block|{
name|this
argument_list|(
name|nodeId
argument_list|,
name|context
argument_list|,
name|hostName
argument_list|,
name|cmPort
argument_list|,
name|httpPort
argument_list|,
name|node
argument_list|,
name|capability
argument_list|,
name|nodeManagerVersion
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RMNodeImpl (NodeId nodeId, RMContext context, String hostName, int cmPort, int httpPort, Node node, Resource capability, String nodeManagerVersion, Resource physResource)
specifier|public
name|RMNodeImpl
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|String
name|hostName
parameter_list|,
name|int
name|cmPort
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|Node
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|String
name|nodeManagerVersion
parameter_list|,
name|Resource
name|physResource
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|commandPort
operator|=
name|cmPort
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|httpPort
expr_stmt|;
name|this
operator|.
name|totalCapability
operator|=
name|capability
expr_stmt|;
name|this
operator|.
name|nodeAddress
operator|=
name|hostName
operator|+
literal|":"
operator|+
name|cmPort
expr_stmt|;
name|this
operator|.
name|httpAddress
operator|=
name|hostName
operator|+
literal|":"
operator|+
name|httpPort
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|healthReport
operator|=
literal|"Healthy"
expr_stmt|;
name|this
operator|.
name|lastHealthReportTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeManagerVersion
operator|=
name|nodeManagerVersion
expr_stmt|;
name|this
operator|.
name|timeStamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|physicalResource
operator|=
name|physResource
expr_stmt|;
name|this
operator|.
name|latestNodeHeartBeatResponse
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeUpdateQueue
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|UpdatedContainerInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerAllocationExpirer
operator|=
name|context
operator|.
name|getContainerAllocationExpirer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandPort ()
specifier|public
name|int
name|getCommandPort
parameter_list|()
block|{
return|return
name|commandPort
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|httpPort
return|;
block|}
comment|// Test only
DECL|method|setHttpPort (int port)
specifier|public
name|void
name|setHttpPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|httpPort
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeID ()
specifier|public
name|NodeId
name|getNodeID
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeAddress ()
specifier|public
name|String
name|getNodeAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpAddress ()
specifier|public
name|String
name|getHttpAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|httpAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalCapability ()
specifier|public
name|Resource
name|getTotalCapability
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalCapability
return|;
block|}
annotation|@
name|Override
DECL|method|getRackName ()
specifier|public
name|String
name|getRackName
parameter_list|()
block|{
return|return
name|node
operator|.
name|getNetworkLocation
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNode ()
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|getHealthReport ()
specifier|public
name|String
name|getHealthReport
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|healthReport
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setHealthReport (String healthReport)
specifier|public
name|void
name|setHealthReport
parameter_list|(
name|String
name|healthReport
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|healthReport
operator|=
name|healthReport
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setLastHealthReportTime (long lastHealthReportTime)
specifier|public
name|void
name|setLastHealthReportTime
parameter_list|(
name|long
name|lastHealthReportTime
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|lastHealthReportTime
operator|=
name|lastHealthReportTime
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLastHealthReportTime ()
specifier|public
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|lastHealthReportTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeManagerVersion ()
specifier|public
name|String
name|getNodeManagerVersion
parameter_list|()
block|{
return|return
name|nodeManagerVersion
return|;
block|}
annotation|@
name|Override
DECL|method|getAggregatedContainersUtilization ()
specifier|public
name|ResourceUtilization
name|getAggregatedContainersUtilization
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|containersUtilization
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setAggregatedContainersUtilization ( ResourceUtilization containersUtilization)
specifier|public
name|void
name|setAggregatedContainersUtilization
parameter_list|(
name|ResourceUtilization
name|containersUtilization
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|containersUtilization
operator|=
name|containersUtilization
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeUtilization ()
specifier|public
name|ResourceUtilization
name|getNodeUtilization
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|nodeUtilization
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setNodeUtilization (ResourceUtilization nodeUtilization)
specifier|public
name|void
name|setNodeUtilization
parameter_list|(
name|ResourceUtilization
name|nodeUtilization
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|nodeUtilization
operator|=
name|nodeUtilization
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPhysicalResource ()
specifier|public
name|Resource
name|getPhysicalResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|physicalResource
return|;
block|}
DECL|method|setPhysicalResource (Resource physicalResource)
specifier|public
name|void
name|setPhysicalResource
parameter_list|(
name|Resource
name|physicalResource
parameter_list|)
block|{
name|this
operator|.
name|physicalResource
operator|=
name|physicalResource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|NodeState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAppsToCleanup ()
specifier|public
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getAppsToCleanup
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|(
name|this
operator|.
name|finishedApplications
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRunningApps ()
specifier|public
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getRunningApps
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|(
name|this
operator|.
name|runningApplications
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainersToCleanUp ()
specifier|public
name|List
argument_list|<
name|ContainerId
argument_list|>
name|getContainersToCleanUp
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|this
operator|.
name|containersToClean
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|updateNodeHeartbeatResponseForCleanup (NodeHeartbeatResponse response)
specifier|public
name|void
name|updateNodeHeartbeatResponseForCleanup
parameter_list|(
name|NodeHeartbeatResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|response
operator|.
name|addAllContainersToCleanup
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|this
operator|.
name|containersToClean
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAllApplicationsToCleanup
argument_list|(
name|this
operator|.
name|finishedApplications
argument_list|)
expr_stmt|;
name|response
operator|.
name|addContainersToBeRemovedFromNM
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|this
operator|.
name|containersToBeRemovedFromNM
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAllContainersToSignal
argument_list|(
name|this
operator|.
name|containersToSignal
argument_list|)
expr_stmt|;
name|this
operator|.
name|completedContainers
operator|.
name|removeAll
argument_list|(
name|this
operator|.
name|containersToBeRemovedFromNM
argument_list|)
expr_stmt|;
name|this
operator|.
name|containersToClean
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|finishedApplications
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|containersToSignal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|containersToBeRemovedFromNM
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|getToBeUpdatedContainers ()
specifier|public
name|Collection
argument_list|<
name|Container
argument_list|>
name|getToBeUpdatedContainers
parameter_list|()
block|{
return|return
name|toBeUpdatedContainers
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateNodeHeartbeatResponseForUpdatedContainers ( NodeHeartbeatResponse response)
specifier|public
name|void
name|updateNodeHeartbeatResponseForUpdatedContainers
parameter_list|(
name|NodeHeartbeatResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|response
operator|.
name|addAllContainersToUpdate
argument_list|(
name|toBeUpdatedContainers
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|toBeUpdatedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLastNodeHeartBeatResponse ()
specifier|public
name|NodeHeartbeatResponse
name|getLastNodeHeartBeatResponse
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|latestNodeHeartBeatResponse
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resetLastNodeHeartBeatResponse ()
specifier|public
name|void
name|resetLastNodeHeartBeatResponse
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|latestNodeHeartBeatResponse
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handle (RMNodeEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|NodeState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on Node  "
operator|+
name|this
operator|.
name|nodeId
operator|+
literal|" oldState "
operator|+
name|oldState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|nodeId
operator|+
literal|" Node Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMetricsForRejoinedNode (NodeState previousNodeState)
specifier|private
name|void
name|updateMetricsForRejoinedNode
parameter_list|(
name|NodeState
name|previousNodeState
parameter_list|)
block|{
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrNumActiveNodes
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|previousNodeState
condition|)
block|{
case|case
name|LOST
case|:
name|metrics
operator|.
name|decrNumLostNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|REBOOTED
case|:
name|metrics
operator|.
name|decrNumRebootedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONED
case|:
name|metrics
operator|.
name|decrDecommisionedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|decrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHUTDOWN
case|:
name|metrics
operator|.
name|decrNumShutdownNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONING
case|:
name|metrics
operator|.
name|decrDecommissioningNMs
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected previous node state"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update metrics when moving to Decommissioning state
DECL|method|updateMetricsForGracefulDecommission (NodeState initialState, NodeState finalState)
specifier|private
name|void
name|updateMetricsForGracefulDecommission
parameter_list|(
name|NodeState
name|initialState
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
block|{
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|initialState
condition|)
block|{
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|decrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|RUNNING
case|:
name|metrics
operator|.
name|decrNumActiveNodes
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONING
case|:
name|metrics
operator|.
name|decrDecommissioningNMs
argument_list|()
expr_stmt|;
break|break;
default|default :
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected initial state"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|DECOMMISSIONING
case|:
name|metrics
operator|.
name|incrDecommissioningNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|RUNNING
case|:
name|metrics
operator|.
name|incrNumActiveNodes
argument_list|()
expr_stmt|;
break|break;
default|default :
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected final state"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateMetricsForDeactivatedNode (NodeState initialState, NodeState finalState)
specifier|private
name|void
name|updateMetricsForDeactivatedNode
parameter_list|(
name|NodeState
name|initialState
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
block|{
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|initialState
condition|)
block|{
case|case
name|RUNNING
case|:
name|metrics
operator|.
name|decrNumActiveNodes
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONING
case|:
name|metrics
operator|.
name|decrDecommissioningNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONED
case|:
name|metrics
operator|.
name|decrDecommisionedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|decrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|NEW
case|:
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected initial state"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|DECOMMISSIONED
case|:
name|metrics
operator|.
name|incrDecommisionedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|LOST
case|:
name|metrics
operator|.
name|incrNumLostNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|REBOOTED
case|:
name|metrics
operator|.
name|incrNumRebootedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|incrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHUTDOWN
case|:
name|metrics
operator|.
name|incrNumShutdownNMs
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected final state"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleRunningAppOnNode (RMNodeImpl rmNode, RMContext context, ApplicationId appId, NodeId nodeId)
specifier|private
specifier|static
name|void
name|handleRunningAppOnNode
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|context
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// if we failed getting app by appId, maybe something wrong happened, just
comment|// add the app to the finishedApplications list so that the app can be
comment|// cleaned up on the NM
if|if
condition|(
literal|null
operator|==
name|app
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot get RMApp by appId="
operator|+
name|appId
operator|+
literal|", just added it to finishedApplications list for cleanup"
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|finishedApplications
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|runningApplications
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Add running applications back due to Node add or Node reconnection.
name|rmNode
operator|.
name|runningApplications
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRunningOnNodeEvent
argument_list|(
name|appId
argument_list|,
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateNodeResourceFromEvent (RMNodeImpl rmNode, RMNodeResourceUpdateEvent event)
specifier|private
specifier|static
name|void
name|updateNodeResourceFromEvent
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeResourceUpdateEvent
name|event
parameter_list|)
block|{
name|ResourceOption
name|resourceOption
init|=
name|event
operator|.
name|getResourceOption
argument_list|()
decl_stmt|;
comment|// Set resource on RMNode
name|rmNode
operator|.
name|totalCapability
operator|=
name|resourceOption
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
DECL|method|updateRMNodeFromStatusEvents ( RMNodeImpl rmNode, RMNodeStatusEvent statusEvent)
specifier|private
specifier|static
name|NodeHealthStatus
name|updateRMNodeFromStatusEvents
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeStatusEvent
name|statusEvent
parameter_list|)
block|{
comment|// Switch the last heartbeatresponse.
name|rmNode
operator|.
name|latestNodeHeartBeatResponse
operator|=
name|statusEvent
operator|.
name|getLatestResponse
argument_list|()
expr_stmt|;
name|NodeHealthStatus
name|remoteNodeHealthStatus
init|=
name|statusEvent
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|rmNode
operator|.
name|setHealthReport
argument_list|(
name|remoteNodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|setLastHealthReportTime
argument_list|(
name|remoteNodeHealthStatus
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|setAggregatedContainersUtilization
argument_list|(
name|statusEvent
operator|.
name|getAggregatedContainersUtilization
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|setNodeUtilization
argument_list|(
name|statusEvent
operator|.
name|getNodeUtilization
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|remoteNodeHealthStatus
return|;
block|}
DECL|class|AddNodeTransition
specifier|public
specifier|static
class|class
name|AddNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
comment|// Inform the scheduler
name|RMNodeStartedEvent
name|startEvent
init|=
operator|(
name|RMNodeStartedEvent
operator|)
name|event
decl_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containers
init|=
literal|null
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|rmNode
operator|.
name|nodeId
decl_stmt|;
name|RMNode
name|previousRMNode
init|=
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousRMNode
operator|!=
literal|null
condition|)
block|{
name|rmNode
operator|.
name|updateMetricsForRejoinedNode
argument_list|(
name|previousRMNode
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeId
name|unknownNodeId
init|=
name|NodesListManager
operator|.
name|createUnknownNodeId
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|previousRMNode
operator|=
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|remove
argument_list|(
name|unknownNodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousRMNode
operator|!=
literal|null
condition|)
block|{
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|decrDecommisionedNMs
argument_list|()
expr_stmt|;
block|}
comment|// Increment activeNodes explicitly because this is a new node.
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrNumActiveNodes
argument_list|()
expr_stmt|;
name|containers
operator|=
name|startEvent
operator|.
name|getNMContainerStatuses
argument_list|()
expr_stmt|;
if|if
condition|(
name|containers
operator|!=
literal|null
operator|&&
operator|!
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NMContainerStatus
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
operator|||
name|container
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|SCHEDULED
condition|)
block|{
name|rmNode
operator|.
name|launchedContainers
operator|.
name|add
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|startEvent
operator|.
name|getRunningApplications
argument_list|()
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|startEvent
operator|.
name|getRunningApplications
argument_list|()
control|)
block|{
name|handleRunningAppOnNode
argument_list|(
name|rmNode
argument_list|,
name|rmNode
operator|.
name|context
argument_list|,
name|appId
argument_list|,
name|rmNode
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode
argument_list|,
name|containers
argument_list|)
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_USABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReconnectNodeTransition
specifier|public
specifier|static
class|class
name|ReconnectNodeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|,
name|NodeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|NodeState
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeReconnectEvent
name|reconnectEvent
init|=
operator|(
name|RMNodeReconnectEvent
operator|)
name|event
decl_stmt|;
name|RMNode
name|newNode
init|=
name|reconnectEvent
operator|.
name|getReconnectedNode
argument_list|()
decl_stmt|;
name|rmNode
operator|.
name|nodeManagerVersion
operator|=
name|newNode
operator|.
name|getNodeManagerVersion
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApps
init|=
name|reconnectEvent
operator|.
name|getRunningApplications
argument_list|()
decl_stmt|;
name|boolean
name|noRunningApps
init|=
operator|(
name|runningApps
operator|==
literal|null
operator|)
operator|||
operator|(
name|runningApps
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
comment|// No application running on the node, so send node-removal event with
comment|// cleaning up old container info.
if|if
condition|(
name|noRunningApps
condition|)
block|{
if|if
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
comment|// When node in decommissioning, and no running apps on this node,
comment|// it will return as decommissioned state.
name|deactivateNode
argument_list|(
name|rmNode
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
return|return
name|NodeState
operator|.
name|DECOMMISSIONED
return|;
block|}
name|rmNode
operator|.
name|nodeUpdateQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|getHttpPort
argument_list|()
operator|==
name|newNode
operator|.
name|getHttpPort
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
operator|.
name|equals
argument_list|(
name|newNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
condition|)
block|{
name|rmNode
operator|.
name|totalCapability
operator|=
name|newNode
operator|.
name|getTotalCapability
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
comment|// Only add old node if old state is RUNNING
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Reconnected node differs, so replace old node and start new node
switch|switch
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNING
case|:
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|decrNumActiveNodes
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|decrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected Rmnode state"
argument_list|)
expr_stmt|;
block|}
name|rmNode
operator|.
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStartedEvent
argument_list|(
name|newNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rmNode
operator|.
name|httpPort
operator|=
name|newNode
operator|.
name|getHttpPort
argument_list|()
expr_stmt|;
name|rmNode
operator|.
name|httpAddress
operator|=
name|newNode
operator|.
name|getHttpAddress
argument_list|()
expr_stmt|;
name|boolean
name|isCapabilityChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
operator|.
name|equals
argument_list|(
name|newNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
condition|)
block|{
name|rmNode
operator|.
name|totalCapability
operator|=
name|newNode
operator|.
name|getTotalCapability
argument_list|()
expr_stmt|;
name|isCapabilityChanged
operator|=
literal|true
expr_stmt|;
block|}
name|handleNMContainerStatus
argument_list|(
name|reconnectEvent
operator|.
name|getNMContainerStatuses
argument_list|()
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationId
name|appId
range|:
name|reconnectEvent
operator|.
name|getRunningApplications
argument_list|()
control|)
block|{
name|handleRunningAppOnNode
argument_list|(
name|rmNode
argument_list|,
name|rmNode
operator|.
name|context
argument_list|,
name|appId
argument_list|,
name|rmNode
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCapabilityChanged
operator|&&
name|rmNode
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
comment|// Update scheduler node's capacity for reconnect node.
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeResourceUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|newNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rmNode
operator|.
name|getState
argument_list|()
return|;
block|}
DECL|method|handleNMContainerStatus ( List<NMContainerStatus> nmContainerStatuses, RMNodeImpl rmnode)
specifier|private
name|void
name|handleNMContainerStatus
parameter_list|(
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|nmContainerStatuses
parameter_list|,
name|RMNodeImpl
name|rmnode
parameter_list|)
block|{
if|if
condition|(
name|nmContainerStatuses
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NMContainerStatus
name|nmContainerStatus
range|:
name|nmContainerStatuses
control|)
block|{
name|containerStatuses
operator|.
name|add
argument_list|(
name|createContainerStatus
argument_list|(
name|nmContainerStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rmnode
operator|.
name|handleContainerStatus
argument_list|(
name|containerStatuses
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContainerStatus ( NMContainerStatus remoteContainer)
specifier|private
name|ContainerStatus
name|createContainerStatus
parameter_list|(
name|NMContainerStatus
name|remoteContainer
parameter_list|)
block|{
name|ContainerStatus
name|cStatus
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|remoteContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|remoteContainer
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|remoteContainer
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|remoteContainer
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|cStatus
return|;
block|}
block|}
DECL|class|UpdateNodeResourceWhenRunningTransition
specifier|public
specifier|static
class|class
name|UpdateNodeResourceWhenRunningTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeResourceUpdateEvent
name|updateEvent
init|=
operator|(
name|RMNodeResourceUpdateEvent
operator|)
name|event
decl_stmt|;
name|updateNodeResourceFromEvent
argument_list|(
name|rmNode
argument_list|,
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Notify new resourceOption to scheduler
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeResourceUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|,
name|updateEvent
operator|.
name|getResourceOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UpdateNodeResourceWhenUnusableTransition
specifier|public
specifier|static
class|class
name|UpdateNodeResourceWhenUnusableTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
comment|// The node is not usable, only log a warn message
name|LOG
operator|.
name|warn
argument_list|(
literal|"Try to update resource on a "
operator|+
name|rmNode
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" node: "
operator|+
name|rmNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|updateNodeResourceFromEvent
argument_list|(
name|rmNode
argument_list|,
operator|(
name|RMNodeResourceUpdateEvent
operator|)
name|event
argument_list|)
expr_stmt|;
comment|// No need to notify scheduler as schedulerNode is not function now
comment|// and can sync later from RMnode.
block|}
block|}
DECL|class|CleanUpAppTransition
specifier|public
specifier|static
class|class
name|CleanUpAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
operator|(
operator|(
name|RMNodeCleanAppEvent
operator|)
name|event
operator|)
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|rmNode
operator|.
name|finishedApplications
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|runningApplications
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CleanUpContainerTransition
specifier|public
specifier|static
class|class
name|CleanUpContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNode
operator|.
name|containersToClean
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RMNodeCleanContainerEvent
operator|)
name|event
operator|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AddContainersToBeRemovedFromNMTransition
specifier|public
specifier|static
class|class
name|AddContainersToBeRemovedFromNMTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNode
operator|.
name|containersToBeRemovedFromNM
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|RMNodeFinishedContainersPulledByAMEvent
operator|)
name|event
operator|)
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transition to Update a container.    */
DECL|class|UpdateContainersTransition
specifier|public
specifier|static
class|class
name|UpdateContainersTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeUpdateContainerEvent
name|de
init|=
operator|(
name|RMNodeUpdateContainerEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|de
operator|.
name|getToBeUpdatedContainers
argument_list|()
control|)
block|{
name|rmNode
operator|.
name|toBeUpdatedContainers
operator|.
name|put
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|DeactivateNodeTransition
specifier|public
specifier|static
class|class
name|DeactivateNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
DECL|field|finalState
specifier|private
specifier|final
name|NodeState
name|finalState
decl_stmt|;
DECL|method|DeactivateNodeTransition (NodeState finalState)
specifier|public
name|DeactivateNodeTransition
parameter_list|(
name|NodeState
name|finalState
parameter_list|)
block|{
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeImpl
operator|.
name|deactivateNode
argument_list|(
name|rmNode
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Put a node in deactivated (decommissioned or shutdown) status.    * @param rmNode    * @param finalState    */
DECL|method|deactivateNode (RMNodeImpl rmNode, NodeState finalState)
specifier|public
specifier|static
name|void
name|deactivateNode
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
block|{
if|if
condition|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|rmNode
operator|.
name|updateMetricsForDeactivatedNode
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
return|return;
block|}
name|reportNodeUnusable
argument_list|(
name|rmNode
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
comment|// Deactivate the node
name|rmNode
operator|.
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|remove
argument_list|(
name|rmNode
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deactivating Node "
operator|+
name|rmNode
operator|.
name|nodeId
operator|+
literal|" as it is now "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|put
argument_list|(
name|rmNode
operator|.
name|nodeId
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|context
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|isUntrackedNode
argument_list|(
name|rmNode
operator|.
name|hostName
argument_list|)
condition|)
block|{
name|rmNode
operator|.
name|setUntrackedTimeStamp
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Report node is UNUSABLE and update metrics.    * @param rmNode    * @param finalState    */
DECL|method|reportNodeUnusable (RMNodeImpl rmNode, NodeState finalState)
specifier|public
specifier|static
name|void
name|reportNodeUnusable
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
block|{
comment|// Inform the scheduler
name|rmNode
operator|.
name|nodeUpdateQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// If the current state is NodeState.UNHEALTHY
comment|// Then node is already been removed from the
comment|// Scheduler
name|NodeState
name|initialState
init|=
name|rmNode
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initialState
operator|.
name|equals
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
condition|)
block|{
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_UNUSABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|//Update the metrics
name|rmNode
operator|.
name|updateMetricsForDeactivatedNode
argument_list|(
name|initialState
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
block|}
comment|/**    * The transition to put node in decommissioning state.    */
DECL|class|DecommissioningNodeTransition
specifier|public
specifier|static
class|class
name|DecommissioningNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
DECL|field|initState
specifier|private
specifier|final
name|NodeState
name|initState
decl_stmt|;
DECL|field|finalState
specifier|private
specifier|final
name|NodeState
name|finalState
decl_stmt|;
DECL|method|DecommissioningNodeTransition (NodeState initState, NodeState finalState)
specifier|public
name|DecommissioningNodeTransition
parameter_list|(
name|NodeState
name|initState
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
block|{
name|this
operator|.
name|initState
operator|=
name|initState
expr_stmt|;
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|Integer
name|timeout
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|RMNodeDecommissioningEvent
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|RMNodeDecommissioningEvent
name|e
init|=
operator|(
operator|(
name|RMNodeDecommissioningEvent
operator|)
name|event
operator|)
decl_stmt|;
name|timeout
operator|=
name|e
operator|.
name|getDecommissioningTimeout
argument_list|()
expr_stmt|;
block|}
comment|// Pick up possible updates on decommissioningTimeout.
if|if
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
condition|)
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|rmNode
operator|.
name|getDecommissioningTimeout
argument_list|()
argument_list|,
name|timeout
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Update "
operator|+
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" DecommissioningTimeout to be "
operator|+
name|timeout
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|decommissioningTimeout
operator|=
name|timeout
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" is already DECOMMISSIONING"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Put Node "
operator|+
name|rmNode
operator|.
name|nodeId
operator|+
literal|" in DECOMMISSIONING."
argument_list|)
expr_stmt|;
comment|// Update NM metrics during graceful decommissioning.
name|rmNode
operator|.
name|updateMetricsForGracefulDecommission
argument_list|(
name|initState
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|decommissioningTimeout
operator|=
name|timeout
expr_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|originalTotalCapability
operator|==
literal|null
condition|)
block|{
name|rmNode
operator|.
name|originalTotalCapability
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|rmNode
operator|.
name|totalCapability
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Preserve original total capability: "
operator|+
name|rmNode
operator|.
name|originalTotalCapability
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RecommissionNodeTransition
specifier|public
specifier|static
class|class
name|RecommissionNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
DECL|field|finalState
specifier|private
specifier|final
name|NodeState
name|finalState
decl_stmt|;
DECL|method|RecommissionNodeTransition (NodeState finalState)
specifier|public
name|RecommissionNodeTransition
parameter_list|(
name|NodeState
name|finalState
parameter_list|)
block|{
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
comment|// Restore the original total capability
if|if
condition|(
name|rmNode
operator|.
name|originalTotalCapability
operator|!=
literal|null
condition|)
block|{
name|rmNode
operator|.
name|totalCapability
operator|=
name|rmNode
operator|.
name|originalTotalCapability
expr_stmt|;
name|rmNode
operator|.
name|originalTotalCapability
operator|=
literal|null
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Node "
operator|+
name|rmNode
operator|.
name|nodeId
operator|+
literal|" in DECOMMISSIONING is "
operator|+
literal|"recommissioned back to RUNNING."
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|updateMetricsForGracefulDecommission
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
comment|//update the scheduler with the restored original total capability
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeResourceUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|rmNode
operator|.
name|totalCapability
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Status update transition when node is healthy.    */
DECL|class|StatusUpdateWhenHealthyTransition
specifier|public
specifier|static
class|class
name|StatusUpdateWhenHealthyTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|,
name|NodeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|NodeState
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeStatusEvent
name|statusEvent
init|=
operator|(
name|RMNodeStatusEvent
operator|)
name|event
decl_stmt|;
name|rmNode
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|statusEvent
operator|.
name|getOpportunisticContainersStatus
argument_list|()
argument_list|)
expr_stmt|;
name|NodeHealthStatus
name|remoteNodeHealthStatus
init|=
name|updateRMNodeFromStatusEvents
argument_list|(
name|rmNode
argument_list|,
name|statusEvent
argument_list|)
decl_stmt|;
name|NodeState
name|initialState
init|=
name|rmNode
operator|.
name|getState
argument_list|()
decl_stmt|;
name|boolean
name|isNodeDecommissioning
init|=
name|initialState
operator|.
name|equals
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNodeDecommissioning
condition|)
block|{
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|keepAliveApps
init|=
name|statusEvent
operator|.
name|getKeepAliveAppIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|runningApplications
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|keepAliveApps
operator|==
literal|null
operator|||
name|keepAliveApps
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|RMNodeImpl
operator|.
name|deactivateNode
argument_list|(
name|rmNode
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
return|return
name|NodeState
operator|.
name|DECOMMISSIONED
return|;
block|}
block|}
if|if
condition|(
operator|!
name|remoteNodeHealthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node "
operator|+
name|rmNode
operator|.
name|nodeId
operator|+
literal|" reported UNHEALTHY with details: "
operator|+
name|remoteNodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
comment|// if a node in decommissioning receives an unhealthy report,
comment|// it will stay in decommissioning.
if|if
condition|(
name|isNodeDecommissioning
condition|)
block|{
return|return
name|NodeState
operator|.
name|DECOMMISSIONING
return|;
block|}
else|else
block|{
name|reportNodeUnusable
argument_list|(
name|rmNode
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
return|return
name|NodeState
operator|.
name|UNHEALTHY
return|;
block|}
block|}
name|rmNode
operator|.
name|handleContainerStatus
argument_list|(
name|statusEvent
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|handleReportedIncreasedContainers
argument_list|(
name|statusEvent
operator|.
name|getNMReportedIncreasedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|logAggregationReportsForApps
init|=
name|statusEvent
operator|.
name|getLogAggregationReportsForApps
argument_list|()
decl_stmt|;
if|if
condition|(
name|logAggregationReportsForApps
operator|!=
literal|null
operator|&&
operator|!
name|logAggregationReportsForApps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rmNode
operator|.
name|handleLogAggregationStatus
argument_list|(
name|logAggregationReportsForApps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rmNode
operator|.
name|nextHeartBeat
condition|)
block|{
name|rmNode
operator|.
name|nextHeartBeat
operator|=
literal|false
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update DTRenewer in secure mode to keep these apps alive. Today this is
comment|// needed for log-aggregation to finish long after the apps are gone.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|rmNode
operator|.
name|context
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|updateKeepAliveApplications
argument_list|(
name|statusEvent
operator|.
name|getKeepAliveAppIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|initialState
return|;
block|}
block|}
DECL|class|StatusUpdateWhenUnHealthyTransition
specifier|public
specifier|static
class|class
name|StatusUpdateWhenUnHealthyTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|,
name|NodeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|NodeState
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeStatusEvent
name|statusEvent
init|=
operator|(
name|RMNodeStatusEvent
operator|)
name|event
decl_stmt|;
comment|// Switch the last heartbeatresponse.
name|NodeHealthStatus
name|remoteNodeHealthStatus
init|=
name|updateRMNodeFromStatusEvents
argument_list|(
name|rmNode
argument_list|,
name|statusEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteNodeHealthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
condition|)
block|{
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_USABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// ??? how about updating metrics before notifying to ensure that
comment|// notifiers get update metadata because they will very likely query it
comment|// upon notification
comment|// Update metrics
name|rmNode
operator|.
name|updateMetricsForRejoinedNode
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
return|return
name|NodeState
operator|.
name|RUNNING
return|;
block|}
return|return
name|NodeState
operator|.
name|UNHEALTHY
return|;
block|}
block|}
DECL|class|SignalContainerTransition
specifier|public
specifier|static
class|class
name|SignalContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNode
operator|.
name|containersToSignal
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RMNodeSignalContainerEvent
operator|)
name|event
operator|)
operator|.
name|getSignalRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|pullContainerUpdates ()
specifier|public
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|pullContainerUpdates
parameter_list|()
block|{
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|latestContainerInfoList
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdatedContainerInfo
argument_list|>
argument_list|()
decl_stmt|;
name|UpdatedContainerInfo
name|containerInfo
decl_stmt|;
while|while
condition|(
operator|(
name|containerInfo
operator|=
name|nodeUpdateQueue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|latestContainerInfoList
operator|.
name|add
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nextHeartBeat
operator|=
literal|true
expr_stmt|;
return|return
name|latestContainerInfoList
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNextHeartBeat (boolean nextHeartBeat)
specifier|public
name|void
name|setNextHeartBeat
parameter_list|(
name|boolean
name|nextHeartBeat
parameter_list|)
block|{
name|this
operator|.
name|nextHeartBeat
operator|=
name|nextHeartBeat
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getQueueSize ()
specifier|public
name|int
name|getQueueSize
parameter_list|()
block|{
return|return
name|nodeUpdateQueue
operator|.
name|size
argument_list|()
return|;
block|}
comment|// For test only.
annotation|@
name|VisibleForTesting
DECL|method|getLaunchedContainers ()
specifier|public
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|getLaunchedContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|launchedContainers
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCompletedContainers ()
specifier|public
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|getCompletedContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|completedContainers
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodeLabels
parameter_list|()
block|{
name|RMNodeLabelsManager
name|nlm
init|=
name|context
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|nlm
operator|==
literal|null
operator|||
name|nlm
operator|.
name|getLabelsOnNode
argument_list|(
name|nodeId
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
return|;
block|}
return|return
name|nlm
operator|.
name|getLabelsOnNode
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|handleReportedIncreasedContainers ( List<Container> reportedIncreasedContainers)
specifier|private
name|void
name|handleReportedIncreasedContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|reportedIncreasedContainers
parameter_list|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|reportedIncreasedContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Don't bother with containers already scheduled for cleanup, or for
comment|// applications already killed. The scheduler doens't need to know any
comment|// more about this container
if|if
condition|(
name|containersToClean
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" already scheduled for "
operator|+
literal|"cleanup, no further processing"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ApplicationId
name|containerAppId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|finishedApplications
operator|.
name|contains
argument_list|(
name|containerAppId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" belongs to an application that is already killed,"
operator|+
literal|" no further processing"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|this
operator|.
name|nmReportedIncreasedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleContainerStatus (List<ContainerStatus> containerStatuses)
specifier|private
name|void
name|handleContainerStatus
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
parameter_list|)
block|{
comment|// Filter the map to only obtain just launched containers and finished
comment|// containers.
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyCompletedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numRemoteRunningContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|remoteContainer
range|:
name|containerStatuses
control|)
block|{
name|ContainerId
name|containerId
init|=
name|remoteContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
comment|// Don't bother with containers already scheduled for cleanup, or for
comment|// applications already killed. The scheduler doens't need to know any
comment|// more about this container
if|if
condition|(
name|containersToClean
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" already scheduled for "
operator|+
literal|"cleanup, no further processing"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ApplicationId
name|containerAppId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|finishedApplications
operator|.
name|contains
argument_list|(
name|containerAppId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" belongs to an application that is already killed,"
operator|+
literal|" no further processing"
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|runningApplications
operator|.
name|contains
argument_list|(
name|containerAppId
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is the first container get launched for application "
operator|+
name|containerAppId
argument_list|)
expr_stmt|;
block|}
name|handleRunningAppOnNode
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|containerAppId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
comment|// Process running containers
if|if
condition|(
name|remoteContainer
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
operator|||
name|remoteContainer
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|SCHEDULED
condition|)
block|{
operator|++
name|numRemoteRunningContainers
expr_stmt|;
if|if
condition|(
operator|!
name|launchedContainers
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// Just launched container. RM knows about it the first time.
name|launchedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|newlyLaunchedContainers
operator|.
name|add
argument_list|(
name|remoteContainer
argument_list|)
expr_stmt|;
comment|// Unregister from containerAllocationExpirer.
name|containerAllocationExpirer
operator|.
name|unregister
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// A finished container
name|launchedContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|completedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|newlyCompletedContainers
operator|.
name|add
argument_list|(
name|remoteContainer
argument_list|)
expr_stmt|;
block|}
comment|// Unregister from containerAllocationExpirer.
name|containerAllocationExpirer
operator|.
name|unregister
argument_list|(
operator|new
name|AllocationExpirationInfo
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|lostContainers
init|=
name|findLostContainers
argument_list|(
name|numRemoteRunningContainers
argument_list|,
name|containerStatuses
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|remoteContainer
range|:
name|lostContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|remoteContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|completedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|newlyCompletedContainers
operator|.
name|add
argument_list|(
name|remoteContainer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newlyLaunchedContainers
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|||
name|newlyCompletedContainers
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|nodeUpdateQueue
operator|.
name|add
argument_list|(
operator|new
name|UpdatedContainerInfo
argument_list|(
name|newlyLaunchedContainers
argument_list|,
name|newlyCompletedContainers
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findLostContainers (int numRemoteRunning, List<ContainerStatus> containerStatuses)
specifier|private
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|findLostContainers
parameter_list|(
name|int
name|numRemoteRunning
parameter_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
parameter_list|)
block|{
if|if
condition|(
name|numRemoteRunning
operator|>=
name|launchedContainers
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|nodeContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|numRemoteRunning
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|lostContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|(
name|launchedContainers
operator|.
name|size
argument_list|()
operator|-
name|numRemoteRunning
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|remoteContainer
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|remoteContainer
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
operator|&&
name|remoteContainer
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|GUARANTEED
condition|)
block|{
name|nodeContainers
operator|.
name|add
argument_list|(
name|remoteContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|ContainerId
argument_list|>
name|iter
init|=
name|launchedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ContainerId
name|containerId
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodeContainers
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|String
name|diag
init|=
literal|"Container "
operator|+
name|containerId
operator|+
literal|" was running but not reported from "
operator|+
name|nodeId
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|diag
argument_list|)
expr_stmt|;
name|lostContainers
operator|.
name|add
argument_list|(
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerId
argument_list|,
name|diag
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|lostContainers
return|;
block|}
DECL|method|handleLogAggregationStatus ( List<LogAggregationReport> logAggregationReportsForApps)
specifier|private
name|void
name|handleLogAggregationStatus
parameter_list|(
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|logAggregationReportsForApps
parameter_list|)
block|{
for|for
control|(
name|LogAggregationReport
name|report
range|:
name|logAggregationReportsForApps
control|)
block|{
name|RMApp
name|rmApp
init|=
name|this
operator|.
name|context
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|report
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|RMAppImpl
operator|)
name|rmApp
operator|)
operator|.
name|aggregateLogReport
argument_list|(
name|this
operator|.
name|nodeId
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|pullNewlyIncreasedContainers ()
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|pullNewlyIncreasedContainers
parameter_list|()
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|nmReportedIncreasedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|container
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|(
name|nmReportedIncreasedContainers
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|nmReportedIncreasedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|container
return|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getOriginalTotalCapability ()
specifier|public
name|Resource
name|getOriginalTotalCapability
parameter_list|()
block|{
return|return
name|this
operator|.
name|originalTotalCapability
return|;
block|}
DECL|method|getOpportunisticContainersStatus ()
specifier|public
name|OpportunisticContainersStatus
name|getOpportunisticContainersStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|opportunisticContainersStatus
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setOpportunisticContainersStatus ( OpportunisticContainersStatus opportunisticContainersStatus)
specifier|public
name|void
name|setOpportunisticContainersStatus
parameter_list|(
name|OpportunisticContainersStatus
name|opportunisticContainersStatus
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|opportunisticContainersStatus
operator|=
name|opportunisticContainersStatus
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUntrackedTimeStamp ()
specifier|public
name|long
name|getUntrackedTimeStamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeStamp
return|;
block|}
annotation|@
name|Override
DECL|method|setUntrackedTimeStamp (long ts)
specifier|public
name|void
name|setUntrackedTimeStamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|ts
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDecommissioningTimeout ()
specifier|public
name|Integer
name|getDecommissioningTimeout
parameter_list|()
block|{
return|return
name|decommissioningTimeout
return|;
block|}
block|}
end_class

end_unit

