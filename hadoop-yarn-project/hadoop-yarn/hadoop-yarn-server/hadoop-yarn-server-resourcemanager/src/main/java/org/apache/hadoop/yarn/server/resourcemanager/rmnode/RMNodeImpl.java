begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmnode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManagerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRunningOnNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
operator|.
name|ContainerIdComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class is used to keep track of all the applications/containers  * running on a node.  *  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|RMNodeImpl
specifier|public
class|class
name|RMNodeImpl
implements|implements
name|RMNode
implements|,
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMNodeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|nodeUpdateQueue
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|nodeUpdateQueue
decl_stmt|;
DECL|field|nextHeartBeat
specifier|private
specifier|volatile
name|boolean
name|nextHeartBeat
init|=
literal|true
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|RMContext
name|context
decl_stmt|;
DECL|field|hostName
specifier|private
specifier|final
name|String
name|hostName
decl_stmt|;
DECL|field|commandPort
specifier|private
specifier|final
name|int
name|commandPort
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|nodeAddress
specifier|private
specifier|final
name|String
name|nodeAddress
decl_stmt|;
comment|// The containerManager address
DECL|field|httpAddress
specifier|private
name|String
name|httpAddress
decl_stmt|;
DECL|field|resourceOption
specifier|private
specifier|volatile
name|ResourceOption
name|resourceOption
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
DECL|field|healthReport
specifier|private
name|String
name|healthReport
decl_stmt|;
DECL|field|lastHealthReportTime
specifier|private
name|long
name|lastHealthReportTime
decl_stmt|;
DECL|field|nodeManagerVersion
specifier|private
name|String
name|nodeManagerVersion
decl_stmt|;
comment|/* set of containers that have just launched */
DECL|field|launchedContainers
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|launchedContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
comment|/* set of containers that need to be cleaned */
DECL|field|containersToClean
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containersToClean
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
operator|new
name|ContainerIdComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|/* the list of applications that have finished and need to be purged */
DECL|field|finishedApplications
specifier|private
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplications
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|latestNodeHeartBeatResponse
specifier|private
name|NodeHeartbeatResponse
name|latestNodeHeartBeatResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|RMNodeImpl
argument_list|,
name|NodeState
argument_list|,
name|RMNodeEventType
argument_list|,
DECL|field|stateMachineFactory
name|RMNodeEvent
argument_list|>
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|RMNodeImpl
argument_list|,
name|NodeState
argument_list|,
name|RMNodeEventType
argument_list|,
name|RMNodeEvent
argument_list|>
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|)
comment|//Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|STARTED
argument_list|,
operator|new
name|AddNodeTransition
argument_list|()
argument_list|)
comment|//Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateWhenHealthyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|RMNodeEventType
operator|.
name|REBOOTING
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_APP
argument_list|,
operator|new
name|CleanUpAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|,
operator|new
name|CleanUpContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
operator|new
name|ReconnectNodeTransition
argument_list|()
argument_list|)
comment|//Transitions from UNHEALTHY state
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|,
name|RMNodeEventType
operator|.
name|STATUS_UPDATE
argument_list|,
operator|new
name|StatusUpdateWhenUnHealthyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|,
name|RMNodeEventType
operator|.
name|DECOMMISSION
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|,
name|RMNodeEventType
operator|.
name|EXPIRE
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|,
name|RMNodeEventType
operator|.
name|REBOOTING
argument_list|,
operator|new
name|DeactivateNodeTransition
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
operator|new
name|ReconnectNodeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_APP
argument_list|,
operator|new
name|CleanUpAppTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|RMNodeEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|,
operator|new
name|CleanUpContainerTransition
argument_list|()
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|NodeState
argument_list|,
name|RMNodeEventType
argument_list|,
DECL|field|stateMachine
name|RMNodeEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|method|RMNodeImpl (NodeId nodeId, RMContext context, String hostName, int cmPort, int httpPort, Node node, ResourceOption resourceOption, String nodeManagerVersion)
specifier|public
name|RMNodeImpl
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|String
name|hostName
parameter_list|,
name|int
name|cmPort
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|Node
name|node
parameter_list|,
name|ResourceOption
name|resourceOption
parameter_list|,
name|String
name|nodeManagerVersion
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|commandPort
operator|=
name|cmPort
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|httpPort
expr_stmt|;
name|this
operator|.
name|resourceOption
operator|=
name|resourceOption
expr_stmt|;
name|this
operator|.
name|nodeAddress
operator|=
name|hostName
operator|+
literal|":"
operator|+
name|cmPort
expr_stmt|;
name|this
operator|.
name|httpAddress
operator|=
name|hostName
operator|+
literal|":"
operator|+
name|httpPort
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|healthReport
operator|=
literal|"Healthy"
expr_stmt|;
name|this
operator|.
name|lastHealthReportTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeManagerVersion
operator|=
name|nodeManagerVersion
expr_stmt|;
name|this
operator|.
name|latestNodeHeartBeatResponse
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeUpdateQueue
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|UpdatedContainerInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandPort ()
specifier|public
name|int
name|getCommandPort
parameter_list|()
block|{
return|return
name|commandPort
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|httpPort
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeID ()
specifier|public
name|NodeId
name|getNodeID
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeAddress ()
specifier|public
name|String
name|getNodeAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpAddress ()
specifier|public
name|String
name|getHttpAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|httpAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalCapability ()
specifier|public
name|Resource
name|getTotalCapability
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceOption
operator|.
name|getResource
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setResourceOption (ResourceOption resourceOption)
specifier|public
name|void
name|setResourceOption
parameter_list|(
name|ResourceOption
name|resourceOption
parameter_list|)
block|{
name|this
operator|.
name|resourceOption
operator|=
name|resourceOption
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourceOption ()
specifier|public
name|ResourceOption
name|getResourceOption
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceOption
return|;
block|}
annotation|@
name|Override
DECL|method|getRackName ()
specifier|public
name|String
name|getRackName
parameter_list|()
block|{
return|return
name|node
operator|.
name|getNetworkLocation
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNode ()
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|getHealthReport ()
specifier|public
name|String
name|getHealthReport
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|healthReport
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setHealthReport (String healthReport)
specifier|public
name|void
name|setHealthReport
parameter_list|(
name|String
name|healthReport
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|healthReport
operator|=
name|healthReport
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setLastHealthReportTime (long lastHealthReportTime)
specifier|public
name|void
name|setLastHealthReportTime
parameter_list|(
name|long
name|lastHealthReportTime
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|lastHealthReportTime
operator|=
name|lastHealthReportTime
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLastHealthReportTime ()
specifier|public
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|lastHealthReportTime
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeManagerVersion ()
specifier|public
name|String
name|getNodeManagerVersion
parameter_list|()
block|{
return|return
name|nodeManagerVersion
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|NodeState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAppsToCleanup ()
specifier|public
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getAppsToCleanup
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|(
name|this
operator|.
name|finishedApplications
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainersToCleanUp ()
specifier|public
name|List
argument_list|<
name|ContainerId
argument_list|>
name|getContainersToCleanUp
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|this
operator|.
name|containersToClean
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|updateNodeHeartbeatResponseForCleanup (NodeHeartbeatResponse response)
specifier|public
name|void
name|updateNodeHeartbeatResponseForCleanup
parameter_list|(
name|NodeHeartbeatResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|response
operator|.
name|addAllContainersToCleanup
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|this
operator|.
name|containersToClean
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAllApplicationsToCleanup
argument_list|(
name|this
operator|.
name|finishedApplications
argument_list|)
expr_stmt|;
name|this
operator|.
name|containersToClean
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|finishedApplications
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|getLastNodeHeartBeatResponse ()
specifier|public
name|NodeHeartbeatResponse
name|getLastNodeHeartBeatResponse
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|latestNodeHeartBeatResponse
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handle (RMNodeEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getNodeId
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|NodeState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on Node  "
operator|+
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|nodeId
operator|+
literal|" Node Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMetricsForRejoinedNode (NodeState previousNodeState)
specifier|private
name|void
name|updateMetricsForRejoinedNode
parameter_list|(
name|NodeState
name|previousNodeState
parameter_list|)
block|{
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrNumActiveNodes
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|previousNodeState
condition|)
block|{
case|case
name|LOST
case|:
name|metrics
operator|.
name|decrNumLostNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|REBOOTED
case|:
name|metrics
operator|.
name|decrNumRebootedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECOMMISSIONED
case|:
name|metrics
operator|.
name|decrDecommisionedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|decrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|updateMetricsForDeactivatedNode (NodeState initialState, NodeState finalState)
specifier|private
name|void
name|updateMetricsForDeactivatedNode
parameter_list|(
name|NodeState
name|initialState
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
block|{
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|initialState
condition|)
block|{
case|case
name|RUNNING
case|:
name|metrics
operator|.
name|decrNumActiveNodes
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|decrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// Decomissioned NMs equals to the nodes missing in include list (if
comment|// include list not empty) or the nodes listed in excluded list.
comment|// DecomissionedNMs as per exclude list is set upfront when the
comment|// exclude list is read so that RM restart can also reflect the
comment|// decomissionedNMs. Note that RM is still not able to know decomissionedNMs
comment|// as per include list after it restarts as they are known when those nodes
comment|// come for registration.
comment|// DecomissionedNMs as per include list is incremented in this transition.
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|DECOMMISSIONED
case|:
name|Set
argument_list|<
name|String
argument_list|>
name|ecludedHosts
init|=
name|context
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getHostsReader
argument_list|()
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ecludedHosts
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
operator|&&
operator|!
name|ecludedHosts
operator|.
name|contains
argument_list|(
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|hostName
argument_list|)
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|incrDecommisionedNMs
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|LOST
case|:
name|metrics
operator|.
name|incrNumLostNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|REBOOTED
case|:
name|metrics
operator|.
name|incrNumRebootedNMs
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|metrics
operator|.
name|incrNumUnhealthyNMs
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|handleRunningAppOnNode (RMNodeImpl rmNode, RMContext context, ApplicationId appId, NodeId nodeId)
specifier|private
specifier|static
name|void
name|handleRunningAppOnNode
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMContext
name|context
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|context
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// if we failed getting app by appId, maybe something wrong happened, just
comment|// add the app to the finishedApplications list so that the app can be
comment|// cleaned up on the NM
if|if
condition|(
literal|null
operator|==
name|app
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot get RMApp by appId="
operator|+
name|appId
operator|+
literal|", just added it to finishedApplications list for cleanup"
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|finishedApplications
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRunningOnNodeEvent
argument_list|(
name|appId
argument_list|,
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|AddNodeTransition
specifier|public
specifier|static
class|class
name|AddNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
comment|// Inform the scheduler
name|RMNodeStartedEvent
name|startEvent
init|=
operator|(
name|RMNodeStartedEvent
operator|)
name|event
decl_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containers
init|=
literal|null
decl_stmt|;
name|String
name|host
init|=
name|rmNode
operator|.
name|nodeId
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|host
argument_list|)
condition|)
block|{
comment|// Old node rejoining
name|RMNode
name|previouRMNode
init|=
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|remove
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|updateMetricsForRejoinedNode
argument_list|(
name|previouRMNode
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Increment activeNodes explicitly because this is a new node.
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrNumActiveNodes
argument_list|()
expr_stmt|;
name|containers
operator|=
name|startEvent
operator|.
name|getNMContainerStatuses
argument_list|()
expr_stmt|;
if|if
condition|(
name|containers
operator|!=
literal|null
operator|&&
operator|!
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NMContainerStatus
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
name|rmNode
operator|.
name|launchedContainers
operator|.
name|add
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|startEvent
operator|.
name|getRunningApplications
argument_list|()
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|startEvent
operator|.
name|getRunningApplications
argument_list|()
control|)
block|{
name|handleRunningAppOnNode
argument_list|(
name|rmNode
argument_list|,
name|rmNode
operator|.
name|context
argument_list|,
name|appId
argument_list|,
name|rmNode
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode
argument_list|,
name|containers
argument_list|)
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_USABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReconnectNodeTransition
specifier|public
specifier|static
class|class
name|ReconnectNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeReconnectEvent
name|reconnectEvent
init|=
operator|(
name|RMNodeReconnectEvent
operator|)
name|event
decl_stmt|;
name|RMNode
name|newNode
init|=
name|reconnectEvent
operator|.
name|getReconnectedNode
argument_list|()
decl_stmt|;
name|rmNode
operator|.
name|nodeManagerVersion
operator|=
name|newNode
operator|.
name|getNodeManagerVersion
argument_list|()
expr_stmt|;
name|rmNode
operator|.
name|httpPort
operator|=
name|newNode
operator|.
name|getHttpPort
argument_list|()
expr_stmt|;
name|rmNode
operator|.
name|httpAddress
operator|=
name|newNode
operator|.
name|getHttpAddress
argument_list|()
expr_stmt|;
name|rmNode
operator|.
name|resourceOption
operator|=
name|newNode
operator|.
name|getResourceOption
argument_list|()
expr_stmt|;
comment|// Reset heartbeat ID since node just restarted.
name|rmNode
operator|.
name|getLastNodeHeartBeatResponse
argument_list|()
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|reconnectEvent
operator|.
name|getRunningApplications
argument_list|()
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|reconnectEvent
operator|.
name|getRunningApplications
argument_list|()
control|)
block|{
name|handleRunningAppOnNode
argument_list|(
name|rmNode
argument_list|,
name|rmNode
operator|.
name|context
argument_list|,
name|appId
argument_list|,
name|rmNode
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_USABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CleanUpAppTransition
specifier|public
specifier|static
class|class
name|CleanUpAppTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNode
operator|.
name|finishedApplications
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RMNodeCleanAppEvent
operator|)
name|event
operator|)
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CleanUpContainerTransition
specifier|public
specifier|static
class|class
name|CleanUpContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNode
operator|.
name|containersToClean
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RMNodeCleanContainerEvent
operator|)
name|event
operator|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeactivateNodeTransition
specifier|public
specifier|static
class|class
name|DeactivateNodeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|>
block|{
DECL|field|finalState
specifier|private
specifier|final
name|NodeState
name|finalState
decl_stmt|;
DECL|method|DeactivateNodeTransition (NodeState finalState)
specifier|public
name|DeactivateNodeTransition
parameter_list|(
name|NodeState
name|finalState
parameter_list|)
block|{
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
comment|// Inform the scheduler
name|rmNode
operator|.
name|nodeUpdateQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// If the current state is NodeState.UNHEALTHY
comment|// Then node is already been removed from the
comment|// Scheduler
name|NodeState
name|initialState
init|=
name|rmNode
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initialState
operator|.
name|equals
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
condition|)
block|{
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_UNUSABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Deactivate the node
name|rmNode
operator|.
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|remove
argument_list|(
name|rmNode
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deactivating Node "
operator|+
name|rmNode
operator|.
name|nodeId
operator|+
literal|" as it is now "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|put
argument_list|(
name|rmNode
operator|.
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
comment|//Update the metrics
name|rmNode
operator|.
name|updateMetricsForDeactivatedNode
argument_list|(
name|initialState
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StatusUpdateWhenHealthyTransition
specifier|public
specifier|static
class|class
name|StatusUpdateWhenHealthyTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|,
name|NodeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|NodeState
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeStatusEvent
name|statusEvent
init|=
operator|(
name|RMNodeStatusEvent
operator|)
name|event
decl_stmt|;
comment|// Switch the last heartbeatresponse.
name|rmNode
operator|.
name|latestNodeHeartBeatResponse
operator|=
name|statusEvent
operator|.
name|getLatestResponse
argument_list|()
expr_stmt|;
name|NodeHealthStatus
name|remoteNodeHealthStatus
init|=
name|statusEvent
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|rmNode
operator|.
name|setHealthReport
argument_list|(
name|remoteNodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|setLastHealthReportTime
argument_list|(
name|remoteNodeHealthStatus
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|remoteNodeHealthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node "
operator|+
name|rmNode
operator|.
name|nodeId
operator|+
literal|" reported UNHEALTHY with details: "
operator|+
name|remoteNodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|nodeUpdateQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Inform the scheduler
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_UNUSABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update metrics
name|rmNode
operator|.
name|updateMetricsForDeactivatedNode
argument_list|(
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
return|return
name|NodeState
operator|.
name|UNHEALTHY
return|;
block|}
comment|// Filter the map to only obtain just launched containers and finished
comment|// containers.
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|remoteContainer
range|:
name|statusEvent
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
name|remoteContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
comment|// Don't bother with containers already scheduled for cleanup, or for
comment|// applications already killed. The scheduler doens't need to know any
comment|// more about this container
if|if
condition|(
name|rmNode
operator|.
name|containersToClean
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" already scheduled for "
operator|+
literal|"cleanup, no further processing"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|rmNode
operator|.
name|finishedApplications
operator|.
name|contains
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" belongs to an application that is already killed,"
operator|+
literal|" no further processing"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Process running containers
if|if
condition|(
name|remoteContainer
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
if|if
condition|(
operator|!
name|rmNode
operator|.
name|launchedContainers
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// Just launched container. RM knows about it the first time.
name|rmNode
operator|.
name|launchedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|newlyLaunchedContainers
operator|.
name|add
argument_list|(
name|remoteContainer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// A finished container
name|rmNode
operator|.
name|launchedContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|completedContainers
operator|.
name|add
argument_list|(
name|remoteContainer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newlyLaunchedContainers
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|||
name|completedContainers
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|rmNode
operator|.
name|nodeUpdateQueue
operator|.
name|add
argument_list|(
operator|new
name|UpdatedContainerInfo
argument_list|(
name|newlyLaunchedContainers
argument_list|,
name|completedContainers
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rmNode
operator|.
name|nextHeartBeat
condition|)
block|{
name|rmNode
operator|.
name|nextHeartBeat
operator|=
literal|false
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update DTRenewer in secure mode to keep these apps alive. Today this is
comment|// needed for log-aggregation to finish long after the apps are gone.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|rmNode
operator|.
name|context
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|updateKeepAliveApplications
argument_list|(
name|statusEvent
operator|.
name|getKeepAliveAppIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|NodeState
operator|.
name|RUNNING
return|;
block|}
block|}
DECL|class|StatusUpdateWhenUnHealthyTransition
specifier|public
specifier|static
class|class
name|StatusUpdateWhenUnHealthyTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|RMNodeImpl
argument_list|,
name|RMNodeEvent
argument_list|,
name|NodeState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (RMNodeImpl rmNode, RMNodeEvent event)
specifier|public
name|NodeState
name|transition
parameter_list|(
name|RMNodeImpl
name|rmNode
parameter_list|,
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|RMNodeStatusEvent
name|statusEvent
init|=
operator|(
name|RMNodeStatusEvent
operator|)
name|event
decl_stmt|;
comment|// Switch the last heartbeatresponse.
name|rmNode
operator|.
name|latestNodeHeartBeatResponse
operator|=
name|statusEvent
operator|.
name|getLatestResponse
argument_list|()
expr_stmt|;
name|NodeHealthStatus
name|remoteNodeHealthStatus
init|=
name|statusEvent
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|rmNode
operator|.
name|setHealthReport
argument_list|(
name|remoteNodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|setLastHealthReportTime
argument_list|(
name|remoteNodeHealthStatus
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|remoteNodeHealthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
condition|)
block|{
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
name|rmNode
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodesListManagerEvent
argument_list|(
name|NodesListManagerEventType
operator|.
name|NODE_USABLE
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// ??? how about updating metrics before notifying to ensure that
comment|// notifiers get update metadata because they will very likely query it
comment|// upon notification
comment|// Update metrics
name|rmNode
operator|.
name|updateMetricsForRejoinedNode
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
return|return
name|NodeState
operator|.
name|RUNNING
return|;
block|}
return|return
name|NodeState
operator|.
name|UNHEALTHY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|pullContainerUpdates ()
specifier|public
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|pullContainerUpdates
parameter_list|()
block|{
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|latestContainerInfoList
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdatedContainerInfo
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeUpdateQueue
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|latestContainerInfoList
operator|.
name|add
argument_list|(
name|nodeUpdateQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nextHeartBeat
operator|=
literal|true
expr_stmt|;
return|return
name|latestContainerInfoList
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNextHeartBeat (boolean nextHeartBeat)
specifier|public
name|void
name|setNextHeartBeat
parameter_list|(
name|boolean
name|nextHeartBeat
parameter_list|)
block|{
name|this
operator|.
name|nextHeartBeat
operator|=
name|nextHeartBeat
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getQueueSize ()
specifier|public
name|int
name|getQueueSize
parameter_list|()
block|{
return|return
name|nodeUpdateQueue
operator|.
name|size
argument_list|()
return|;
block|}
comment|// For test only.
annotation|@
name|VisibleForTesting
DECL|method|getLaunchedContainers ()
specifier|public
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|getLaunchedContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|launchedContainers
return|;
block|}
block|}
end_class

end_unit

