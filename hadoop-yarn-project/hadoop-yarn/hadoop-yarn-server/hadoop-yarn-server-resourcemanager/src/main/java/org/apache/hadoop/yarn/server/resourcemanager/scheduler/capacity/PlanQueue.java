begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This represents a dynamic queue managed by the {@link ReservationSystem}.  * From the user perspective this is equivalent to a LeafQueue that respect  * reservations, but functionality wise is a sub-class of ParentQueue  *  */
end_comment

begin_class
DECL|class|PlanQueue
specifier|public
class|class
name|PlanQueue
extends|extends
name|AbstractManagedParentQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PlanQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|showReservationsAsQueues
specifier|private
name|boolean
name|showReservationsAsQueues
decl_stmt|;
DECL|method|PlanQueue (CapacitySchedulerContext cs, String queueName, CSQueue parent, CSQueue old)
specifier|public
name|PlanQueue
parameter_list|(
name|CapacitySchedulerContext
name|cs
parameter_list|,
name|String
name|queueName
parameter_list|,
name|CSQueue
name|parent
parameter_list|,
name|CSQueue
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cs
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CSQueue newlyParsedQueue, Resource clusterResource)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|newlyParsedQueue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
name|validate
argument_list|(
name|newlyParsedQueue
argument_list|)
expr_stmt|;
name|super
operator|.
name|reinitialize
argument_list|(
name|newlyParsedQueue
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeLeafQueueConfigs ()
specifier|protected
name|void
name|initializeLeafQueueConfigs
parameter_list|()
block|{
name|String
name|queuePath
init|=
name|super
operator|.
name|getQueuePath
argument_list|()
decl_stmt|;
name|showReservationsAsQueues
operator|=
name|csContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getShowReservationAsQueues
argument_list|(
name|queuePath
argument_list|)
expr_stmt|;
name|super
operator|.
name|initializeLeafQueueConfigs
argument_list|()
expr_stmt|;
block|}
DECL|method|validate (final CSQueue newlyParsedQueue)
specifier|private
name|void
name|validate
parameter_list|(
specifier|final
name|CSQueue
name|newlyParsedQueue
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity check
if|if
condition|(
operator|!
operator|(
name|newlyParsedQueue
operator|instanceof
name|PlanQueue
operator|)
operator|||
operator|!
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to reinitialize "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" from "
operator|+
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
name|PlanQueue
name|newlyParsedParentQueue
init|=
operator|(
name|PlanQueue
operator|)
name|newlyParsedQueue
decl_stmt|;
if|if
condition|(
name|newlyParsedParentQueue
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Reservable Queue should not have sub-queues in the"
operator|+
literal|"configuration expect the default reservation queue"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Determine whether to hide/show the ReservationQueues    */
DECL|method|showReservationsAsQueues ()
specifier|public
name|boolean
name|showReservationsAsQueues
parameter_list|()
block|{
return|return
name|showReservationsAsQueues
return|;
block|}
block|}
end_class

end_unit

