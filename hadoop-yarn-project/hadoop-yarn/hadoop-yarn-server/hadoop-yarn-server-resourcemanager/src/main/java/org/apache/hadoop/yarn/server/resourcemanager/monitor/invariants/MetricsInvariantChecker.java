begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.invariants
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|invariants
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsCollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|PreemptableResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|Compilable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|CompiledScript
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngineManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|SimpleBindings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This policy checks at every invocation that a given set of invariants  * (specified in a file) are respected over QueueMetrics and JvmMetrics. The  * file may contain arbitrary (Javascrip) boolean expression over the metrics  * variables.  *  * The right set of invariants depends on the deployment environment, a large  * number of complex invariant can make this check expensive.  *  * The MetricsInvariantChecker can be configured to throw a RuntimeException or  * simlpy warn in the logs if an invariant is not respected.  */
end_comment

begin_class
DECL|class|MetricsInvariantChecker
specifier|public
class|class
name|MetricsInvariantChecker
extends|extends
name|InvariantsChecker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricsInvariantChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INVARIANTS_FILE
specifier|public
specifier|static
specifier|final
name|String
name|INVARIANTS_FILE
init|=
literal|"yarn.resourcemanager.invariant-checker.file"
decl_stmt|;
DECL|field|metricsSystem
specifier|private
name|MetricsSystem
name|metricsSystem
decl_stmt|;
DECL|field|collector
specifier|private
name|MetricsCollectorImpl
name|collector
decl_stmt|;
DECL|field|bindings
specifier|private
name|SimpleBindings
name|bindings
decl_stmt|;
DECL|field|manager
specifier|private
name|ScriptEngineManager
name|manager
decl_stmt|;
DECL|field|scriptEngine
specifier|private
name|Compilable
name|scriptEngine
decl_stmt|;
DECL|field|invariantFile
specifier|private
name|String
name|invariantFile
decl_stmt|;
DECL|field|invariants
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CompiledScript
argument_list|>
name|invariants
decl_stmt|;
DECL|field|combinedInvariants
specifier|private
name|CompiledScript
name|combinedInvariants
decl_stmt|;
comment|// set of metrics we monitor
DECL|field|queueMetrics
specifier|private
name|QueueMetrics
name|queueMetrics
decl_stmt|;
DECL|field|jvmMetrics
specifier|private
name|JvmMetrics
name|jvmMetrics
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Configuration config, RMContext rmContext, PreemptableResourceScheduler preemptableResourceScheduler)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|PreemptableResourceScheduler
name|preemptableResourceScheduler
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|rmContext
argument_list|,
name|preemptableResourceScheduler
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricsSystem
operator|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
expr_stmt|;
name|this
operator|.
name|queueMetrics
operator|=
name|QueueMetrics
operator|.
name|forQueue
argument_list|(
name|metricsSystem
argument_list|,
literal|"root"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|jvmMetrics
operator|=
operator|(
name|JvmMetrics
operator|)
name|metricsSystem
operator|.
name|getSource
argument_list|(
literal|"JvmMetrics"
argument_list|)
expr_stmt|;
comment|// at first collect all metrics
name|collector
operator|=
operator|new
name|MetricsCollectorImpl
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jvmMetrics
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// prepare bindings and evaluation engine
name|this
operator|.
name|bindings
operator|=
operator|new
name|SimpleBindings
argument_list|()
expr_stmt|;
name|this
operator|.
name|manager
operator|=
operator|new
name|ScriptEngineManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|scriptEngine
operator|=
operator|(
name|Compilable
operator|)
name|manager
operator|.
name|getEngineByName
argument_list|(
literal|"JavaScript"
argument_list|)
expr_stmt|;
comment|// load metrics invariant from file
name|this
operator|.
name|invariantFile
operator|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsInvariantChecker
operator|.
name|INVARIANTS_FILE
argument_list|)
expr_stmt|;
name|this
operator|.
name|invariants
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// preload all bindings
name|queueMetrics
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jvmMetrics
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|MetricsRecord
name|record
range|:
name|collector
operator|.
name|getRecords
argument_list|()
control|)
block|{
for|for
control|(
name|AbstractMetric
name|am
range|:
name|record
operator|.
name|metrics
argument_list|()
control|)
block|{
name|bindings
operator|.
name|put
argument_list|(
name|am
operator|.
name|name
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|am
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tempInv
init|=
name|Files
operator|.
name|readLines
argument_list|(
operator|new
name|File
argument_list|(
name|invariantFile
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
comment|// precompile individual invariants
for|for
control|(
name|String
name|inv
range|:
name|tempInv
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"&&"
argument_list|)
expr_stmt|;
block|}
name|invariants
operator|.
name|put
argument_list|(
name|inv
argument_list|,
name|scriptEngine
operator|.
name|compile
argument_list|(
name|inv
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|inv
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
block|}
comment|// create a single large combined invariant for speed of checking
name|combinedInvariants
operator|=
name|scriptEngine
operator|.
name|compile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading invariant file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ScriptException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error compiling invariant "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|editSchedule ()
specifier|public
name|void
name|editSchedule
parameter_list|()
block|{
comment|// grab all changed metrics and update bindings
name|collector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|jvmMetrics
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|MetricsRecord
name|record
range|:
name|collector
operator|.
name|getRecords
argument_list|()
control|)
block|{
for|for
control|(
name|AbstractMetric
name|am
range|:
name|record
operator|.
name|metrics
argument_list|()
control|)
block|{
name|bindings
operator|.
name|put
argument_list|(
name|am
operator|.
name|name
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|am
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// evaluate all invariants with new bindings
try|try
block|{
comment|// fastpath check all invariants at once (much faster)
name|boolean
name|allInvHold
init|=
operator|(
name|boolean
operator|)
name|combinedInvariants
operator|.
name|eval
argument_list|(
name|bindings
argument_list|)
decl_stmt|;
comment|// if any fails, check individually to produce more insightful log
if|if
condition|(
operator|!
name|allInvHold
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompiledScript
argument_list|>
name|e
range|:
name|invariants
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|invariantsHold
init|=
operator|(
name|boolean
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|eval
argument_list|(
name|bindings
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|invariantsHold
condition|)
block|{
comment|// filter bindings to produce minimal set
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|matchingBindings
init|=
name|extractMatchingBindings
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|bindings
argument_list|)
decl_stmt|;
name|logOrThrow
argument_list|(
literal|"Invariant \""
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"\" is NOT holding, with bindings: "
operator|+
name|matchingBindings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ScriptException
name|e
parameter_list|)
block|{
name|logOrThrow
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractMatchingBindings (String inv, SimpleBindings allBindings)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractMatchingBindings
parameter_list|(
name|String
name|inv
parameter_list|,
name|SimpleBindings
name|allBindings
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|matchingBindings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|s
range|:
name|allBindings
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|inv
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|matchingBindings
operator|.
name|put
argument_list|(
name|s
operator|.
name|getKey
argument_list|()
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchingBindings
return|;
block|}
block|}
end_class

end_unit

