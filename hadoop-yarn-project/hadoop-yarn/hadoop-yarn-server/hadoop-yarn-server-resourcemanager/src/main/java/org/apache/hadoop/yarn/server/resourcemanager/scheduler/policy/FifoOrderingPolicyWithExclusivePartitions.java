begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_comment
comment|/**  * Similar to {@link FifoOrderingPolicy}, but with separate ordering policies  * for each partition in  * {@code yarn.scheduler.capacity.<queue-path>.ordering-policy.exclusive-enforced-partitions}.  */
end_comment

begin_class
DECL|class|FifoOrderingPolicyWithExclusivePartitions
specifier|public
class|class
name|FifoOrderingPolicyWithExclusivePartitions
parameter_list|<
name|S
extends|extends
name|SchedulableEntity
parameter_list|>
implements|implements
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
block|{
DECL|field|DEFAULT_PARTITION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARTITION
init|=
literal|"DEFAULT_PARTITION"
decl_stmt|;
DECL|field|orderingPolicies
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
argument_list|>
name|orderingPolicies
decl_stmt|;
DECL|method|FifoOrderingPolicyWithExclusivePartitions ()
specifier|public
name|FifoOrderingPolicyWithExclusivePartitions
parameter_list|()
block|{
name|this
operator|.
name|orderingPolicies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|orderingPolicies
operator|.
name|put
argument_list|(
name|DEFAULT_PARTITION
argument_list|,
operator|new
name|FifoOrderingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getSchedulableEntities ()
specifier|public
name|Collection
argument_list|<
name|S
argument_list|>
name|getSchedulableEntities
parameter_list|()
block|{
return|return
name|unionOrderingPolicies
argument_list|()
operator|.
name|getSchedulableEntities
argument_list|()
return|;
block|}
DECL|method|getAssignmentIterator (IteratorSelector sel)
specifier|public
name|Iterator
argument_list|<
name|S
argument_list|>
name|getAssignmentIterator
parameter_list|(
name|IteratorSelector
name|sel
parameter_list|)
block|{
comment|// Return schedulable entities only from filtered partition
return|return
name|getPartitionOrderingPolicy
argument_list|(
name|sel
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|getAssignmentIterator
argument_list|(
name|sel
argument_list|)
return|;
block|}
DECL|method|getPreemptionIterator ()
specifier|public
name|Iterator
argument_list|<
name|S
argument_list|>
name|getPreemptionIterator
parameter_list|()
block|{
comment|// Entities from all partitions should be preemptible
return|return
name|unionOrderingPolicies
argument_list|()
operator|.
name|getPreemptionIterator
argument_list|()
return|;
block|}
comment|/**    * Union all schedulable entities from all ordering policies.    * @return ordering policy containing all schedulable entities    */
DECL|method|unionOrderingPolicies ()
specifier|private
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
name|unionOrderingPolicies
parameter_list|()
block|{
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
name|ret
init|=
operator|new
name|FifoOrderingPolicy
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
argument_list|>
name|entry
range|:
name|orderingPolicies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|addAllSchedulableEntities
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|addSchedulableEntity (S s)
specifier|public
name|void
name|addSchedulableEntity
parameter_list|(
name|S
name|s
parameter_list|)
block|{
name|getPartitionOrderingPolicy
argument_list|(
name|s
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|addSchedulableEntity
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSchedulableEntity (S s)
specifier|public
name|boolean
name|removeSchedulableEntity
parameter_list|(
name|S
name|s
parameter_list|)
block|{
return|return
name|getPartitionOrderingPolicy
argument_list|(
name|s
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|removeSchedulableEntity
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|addAllSchedulableEntities (Collection<S> sc)
specifier|public
name|void
name|addAllSchedulableEntities
parameter_list|(
name|Collection
argument_list|<
name|S
argument_list|>
name|sc
parameter_list|)
block|{
for|for
control|(
name|S
name|entity
range|:
name|sc
control|)
block|{
name|getPartitionOrderingPolicy
argument_list|(
name|entity
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|addSchedulableEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumSchedulableEntities ()
specifier|public
name|int
name|getNumSchedulableEntities
parameter_list|()
block|{
comment|// Return total number of schedulable entities, to maintain parity with
comment|// existing FifoOrderingPolicy e.g. when determining if queue has reached
comment|// its max app limit
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
argument_list|>
name|entry
range|:
name|orderingPolicies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNumSchedulableEntities
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|containerAllocated (S schedulableEntity, RMContainer r)
specifier|public
name|void
name|containerAllocated
parameter_list|(
name|S
name|schedulableEntity
parameter_list|,
name|RMContainer
name|r
parameter_list|)
block|{
name|getPartitionOrderingPolicy
argument_list|(
name|schedulableEntity
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|containerAllocated
argument_list|(
name|schedulableEntity
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|containerReleased (S schedulableEntity, RMContainer r)
specifier|public
name|void
name|containerReleased
parameter_list|(
name|S
name|schedulableEntity
parameter_list|,
name|RMContainer
name|r
parameter_list|)
block|{
name|getPartitionOrderingPolicy
argument_list|(
name|schedulableEntity
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|containerReleased
argument_list|(
name|schedulableEntity
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|demandUpdated (S schedulableEntity)
specifier|public
name|void
name|demandUpdated
parameter_list|(
name|S
name|schedulableEntity
parameter_list|)
block|{
name|getPartitionOrderingPolicy
argument_list|(
name|schedulableEntity
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|demandUpdated
argument_list|(
name|schedulableEntity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure (Map<String, String> conf)
specifier|public
name|void
name|configure
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|partitions
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|EXCLUSIVE_ENFORCED_PARTITIONS_SUFFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|partition
range|:
name|partitions
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|partition
operator|=
name|partition
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|partition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|orderingPolicies
operator|.
name|put
argument_list|(
name|partition
argument_list|,
operator|new
name|FifoOrderingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getInfo ()
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
return|return
literal|"FifoOrderingPolicyWithExclusivePartitions"
return|;
block|}
annotation|@
name|Override
DECL|method|getConfigName ()
specifier|public
name|String
name|getConfigName
parameter_list|()
block|{
return|return
name|CapacitySchedulerConfiguration
operator|.
name|FIFO_WITH_PARTITIONS_APP_ORDERING_POLICY
return|;
block|}
DECL|method|getPartitionOrderingPolicy (String partition)
specifier|private
name|OrderingPolicy
argument_list|<
name|S
argument_list|>
name|getPartitionOrderingPolicy
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|String
name|keyPartition
init|=
name|orderingPolicies
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|?
name|partition
else|:
name|DEFAULT_PARTITION
decl_stmt|;
return|return
name|orderingPolicies
operator|.
name|get
argument_list|(
name|keyPartition
argument_list|)
return|;
block|}
block|}
end_class

end_unit

