begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * A {@code ConfigurableResource} object represents an entity that is used to  * configure resources, such as maximum resources of a queue. It can be  * percentage of cluster resources or an absolute value.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ConfigurableResource
specifier|public
class|class
name|ConfigurableResource
block|{
DECL|field|resource
specifier|private
specifier|final
name|Resource
name|resource
decl_stmt|;
DECL|field|percentages
specifier|private
specifier|final
name|double
index|[]
name|percentages
decl_stmt|;
DECL|method|ConfigurableResource (double[] percentages)
specifier|public
name|ConfigurableResource
parameter_list|(
name|double
index|[]
name|percentages
parameter_list|)
block|{
name|this
operator|.
name|percentages
operator|=
name|percentages
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|resource
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|ConfigurableResource (Resource resource)
specifier|public
name|ConfigurableResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|percentages
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
comment|/**    * Get resource by multiplying the cluster resource and the percentage of    * each resource respectively. Return the absolute resource if either    * {@code percentages} or {@code clusterResource} is null.    *    * @param clusterResource the cluster resource    * @return resource    */
DECL|method|getResource (Resource clusterResource)
specifier|public
name|Resource
name|getResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
if|if
condition|(
name|percentages
operator|!=
literal|null
operator|&&
name|clusterResource
operator|!=
literal|null
condition|)
block|{
name|long
name|memory
init|=
call|(
name|long
call|)
argument_list|(
name|clusterResource
operator|.
name|getMemorySize
argument_list|()
operator|*
name|percentages
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|vcore
init|=
call|(
name|int
call|)
argument_list|(
name|clusterResource
operator|.
name|getVirtualCores
argument_list|()
operator|*
name|percentages
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|vcore
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|resource
return|;
block|}
block|}
comment|/**    * Get the absolute resource.    *    * @return the absolute resource    */
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
block|}
end_class

end_unit

