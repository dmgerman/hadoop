begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_comment
comment|/**  * A {@code ConfigurableResource} object represents an entity that is used to  * configure resources, such as maximum resources of a queue. It can be  * percentage of cluster resources or an absolute value.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ConfigurableResource
specifier|public
class|class
name|ConfigurableResource
block|{
DECL|field|resource
specifier|private
specifier|final
name|Resource
name|resource
decl_stmt|;
DECL|field|percentages
specifier|private
specifier|final
name|double
index|[]
name|percentages
decl_stmt|;
DECL|method|ConfigurableResource ()
name|ConfigurableResource
parameter_list|()
block|{
name|this
argument_list|(
name|getOneHundredPercentArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ConfigurableResource (double[] percentages)
name|ConfigurableResource
parameter_list|(
name|double
index|[]
name|percentages
parameter_list|)
block|{
name|this
operator|.
name|percentages
operator|=
name|percentages
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|resource
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Creates a  {@link ConfigurableResource} instance with all resource values    * initialized to {@code value}.    * @param value the value to use for all resources    */
DECL|method|ConfigurableResource (long value)
name|ConfigurableResource
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|ResourceUtils
operator|.
name|createResourceWithSameValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ConfigurableResource (Resource resource)
specifier|public
name|ConfigurableResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|percentages
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|method|getOneHundredPercentArray ()
specifier|private
specifier|static
name|double
index|[]
name|getOneHundredPercentArray
parameter_list|()
block|{
name|double
index|[]
name|resourcePercentages
init|=
operator|new
name|double
index|[
name|ResourceUtils
operator|.
name|getNumberOfCountableResourceTypes
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|resourcePercentages
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
return|return
name|resourcePercentages
return|;
block|}
comment|/**    * Get resource by multiplying the cluster resource and the percentage of    * each resource respectively. Return the absolute resource if either    * {@code percentages} or {@code clusterResource} is null.    *    * @param clusterResource the cluster resource    * @return resource the resulting resource    */
DECL|method|getResource (Resource clusterResource)
specifier|public
name|Resource
name|getResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
if|if
condition|(
name|percentages
operator|!=
literal|null
operator|&&
name|clusterResource
operator|!=
literal|null
condition|)
block|{
name|long
name|memory
init|=
call|(
name|long
call|)
argument_list|(
name|clusterResource
operator|.
name|getMemorySize
argument_list|()
operator|*
name|percentages
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|vcore
init|=
call|(
name|int
call|)
argument_list|(
name|clusterResource
operator|.
name|getVirtualCores
argument_list|()
operator|*
name|percentages
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Resource
name|res
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|vcore
argument_list|)
decl_stmt|;
name|ResourceInformation
index|[]
name|clusterInfo
init|=
name|clusterResource
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|clusterInfo
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|setResourceValue
argument_list|(
name|i
argument_list|,
call|(
name|long
call|)
argument_list|(
name|clusterInfo
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
operator|*
name|percentages
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
else|else
block|{
return|return
name|resource
return|;
block|}
block|}
comment|/**    * Get the absolute resource.    *    * @return the absolute resource    */
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
comment|/**    * Set the value of the wrapped resource if this object isn't setup to use    * percentages. If this object is set to use percentages, this method has    * no effect.    *    * @param name the name of the resource    * @param value the value    */
DECL|method|setValue (String name, long value)
name|void
name|setValue
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|setResourceValue
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the percentage of the resource if this object is setup to use    * percentages. If this object is set to use percentages, this method has    * no effect.    *    * @param name the name of the resource    * @param value the percentage    */
DECL|method|setPercentage (String name, double value)
name|void
name|setPercentage
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|percentages
operator|!=
literal|null
condition|)
block|{
name|Integer
name|index
init|=
name|ResourceUtils
operator|.
name|getResourceTypeIndex
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|percentages
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"The requested resource, \""
operator|+
name|name
operator|+
literal|"\", could not be found."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

