begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueResourceQuotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_comment
comment|/**  * DAO which wraps PartitionQueueCapacitiesInfo applicable for a queue  */
end_comment

begin_class
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|QueueCapacitiesInfo
specifier|public
class|class
name|QueueCapacitiesInfo
block|{
DECL|field|queueCapacitiesByPartition
specifier|protected
name|List
argument_list|<
name|PartitionQueueCapacitiesInfo
argument_list|>
name|queueCapacitiesByPartition
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|QueueCapacitiesInfo ()
specifier|public
name|QueueCapacitiesInfo
parameter_list|()
block|{   }
DECL|method|QueueCapacitiesInfo (QueueCapacities capacities, QueueResourceQuotas resourceQuotas, boolean considerAMUsage)
specifier|public
name|QueueCapacitiesInfo
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|,
name|QueueResourceQuotas
name|resourceQuotas
parameter_list|,
name|boolean
name|considerAMUsage
parameter_list|)
block|{
if|if
condition|(
name|capacities
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|float
name|capacity
decl_stmt|;
name|float
name|usedCapacity
decl_stmt|;
name|float
name|maxCapacity
decl_stmt|;
name|float
name|absCapacity
decl_stmt|;
name|float
name|absUsedCapacity
decl_stmt|;
name|float
name|absMaxCapacity
decl_stmt|;
name|float
name|maxAMLimitPercentage
decl_stmt|;
for|for
control|(
name|String
name|partitionName
range|:
name|capacities
operator|.
name|getExistingNodeLabels
argument_list|()
control|)
block|{
name|usedCapacity
operator|=
name|capacities
operator|.
name|getUsedCapacity
argument_list|(
name|partitionName
argument_list|)
operator|*
literal|100
expr_stmt|;
name|capacity
operator|=
name|capacities
operator|.
name|getCapacity
argument_list|(
name|partitionName
argument_list|)
operator|*
literal|100
expr_stmt|;
name|maxCapacity
operator|=
name|capacities
operator|.
name|getMaximumCapacity
argument_list|(
name|partitionName
argument_list|)
expr_stmt|;
name|absCapacity
operator|=
name|CapacitySchedulerQueueInfo
operator|.
name|cap
argument_list|(
name|capacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|partitionName
argument_list|)
argument_list|,
literal|0f
argument_list|,
literal|1f
argument_list|)
operator|*
literal|100
expr_stmt|;
name|absUsedCapacity
operator|=
name|CapacitySchedulerQueueInfo
operator|.
name|cap
argument_list|(
name|capacities
operator|.
name|getAbsoluteUsedCapacity
argument_list|(
name|partitionName
argument_list|)
argument_list|,
literal|0f
argument_list|,
literal|1f
argument_list|)
operator|*
literal|100
expr_stmt|;
name|absMaxCapacity
operator|=
name|CapacitySchedulerQueueInfo
operator|.
name|cap
argument_list|(
name|capacities
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|partitionName
argument_list|)
argument_list|,
literal|0f
argument_list|,
literal|1f
argument_list|)
operator|*
literal|100
expr_stmt|;
name|maxAMLimitPercentage
operator|=
name|capacities
operator|.
name|getMaxAMResourcePercentage
argument_list|(
name|partitionName
argument_list|)
operator|*
literal|100
expr_stmt|;
if|if
condition|(
name|maxCapacity
argument_list|<
name|CapacitySchedulerQueueInfo
operator|.
name|EPSILON
operator|||
name|maxCapacity
argument_list|>
literal|1f
condition|)
name|maxCapacity
operator|=
literal|1f
expr_stmt|;
name|maxCapacity
operator|=
name|maxCapacity
operator|*
literal|100
expr_stmt|;
name|queueCapacitiesByPartition
operator|.
name|add
argument_list|(
operator|new
name|PartitionQueueCapacitiesInfo
argument_list|(
name|partitionName
argument_list|,
name|capacity
argument_list|,
name|usedCapacity
argument_list|,
name|maxCapacity
argument_list|,
name|absCapacity
argument_list|,
name|absUsedCapacity
argument_list|,
name|absMaxCapacity
argument_list|,
name|considerAMUsage
condition|?
name|maxAMLimitPercentage
else|:
literal|0f
argument_list|,
name|resourceQuotas
operator|.
name|getConfiguredMinResource
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|resourceQuotas
operator|.
name|getConfiguredMaxResource
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|resourceQuotas
operator|.
name|getEffectiveMinResource
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|resourceQuotas
operator|.
name|getEffectiveMaxResource
argument_list|(
name|partitionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|QueueCapacitiesInfo (QueueCapacities capacities, QueueResourceQuotas resourceQuotas)
specifier|public
name|QueueCapacitiesInfo
parameter_list|(
name|QueueCapacities
name|capacities
parameter_list|,
name|QueueResourceQuotas
name|resourceQuotas
parameter_list|)
block|{
name|this
argument_list|(
name|capacities
argument_list|,
name|resourceQuotas
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|add (PartitionQueueCapacitiesInfo partitionQueueCapacitiesInfo)
specifier|public
name|void
name|add
parameter_list|(
name|PartitionQueueCapacitiesInfo
name|partitionQueueCapacitiesInfo
parameter_list|)
block|{
name|queueCapacitiesByPartition
operator|.
name|add
argument_list|(
name|partitionQueueCapacitiesInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|getQueueCapacitiesByPartition ()
specifier|public
name|List
argument_list|<
name|PartitionQueueCapacitiesInfo
argument_list|>
name|getQueueCapacitiesByPartition
parameter_list|()
block|{
return|return
name|queueCapacitiesByPartition
return|;
block|}
DECL|method|setQueueCapacitiesByPartition ( List<PartitionQueueCapacitiesInfo> capacities)
specifier|public
name|void
name|setQueueCapacitiesByPartition
parameter_list|(
name|List
argument_list|<
name|PartitionQueueCapacitiesInfo
argument_list|>
name|capacities
parameter_list|)
block|{
name|this
operator|.
name|queueCapacitiesByPartition
operator|=
name|capacities
expr_stmt|;
block|}
DECL|method|getPartitionQueueCapacitiesInfo ( String partitionName)
specifier|public
name|PartitionQueueCapacitiesInfo
name|getPartitionQueueCapacitiesInfo
parameter_list|(
name|String
name|partitionName
parameter_list|)
block|{
for|for
control|(
name|PartitionQueueCapacitiesInfo
name|partitionQueueCapacitiesInfo
range|:
name|queueCapacitiesByPartition
control|)
block|{
if|if
condition|(
name|partitionQueueCapacitiesInfo
operator|.
name|getPartitionName
argument_list|()
operator|.
name|equals
argument_list|(
name|partitionName
argument_list|)
condition|)
block|{
return|return
name|partitionQueueCapacitiesInfo
return|;
block|}
block|}
return|return
operator|new
name|PartitionQueueCapacitiesInfo
argument_list|()
return|;
block|}
block|}
end_class

end_unit

