begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Allocation tags under same namespace.  */
end_comment

begin_class
DECL|class|AllocationTags
specifier|public
specifier|final
class|class
name|AllocationTags
block|{
DECL|field|ns
specifier|private
name|TargetApplicationsNamespace
name|ns
decl_stmt|;
DECL|field|tags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|tags
decl_stmt|;
DECL|field|applicationId
specifier|private
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|method|AllocationTags (TargetApplicationsNamespace namespace, Set<String> allocationTags)
specifier|private
name|AllocationTags
parameter_list|(
name|TargetApplicationsNamespace
name|namespace
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|allocationTags
expr_stmt|;
block|}
DECL|method|AllocationTags (TargetApplicationsNamespace namespace, Set<String> allocationTags, ApplicationId currentAppId)
specifier|private
name|AllocationTags
parameter_list|(
name|TargetApplicationsNamespace
name|namespace
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|,
name|ApplicationId
name|currentAppId
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|allocationTags
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|currentAppId
expr_stmt|;
block|}
comment|/**    * @return the namespace of these tags.    */
DECL|method|getNamespace ()
specifier|public
name|TargetApplicationsNamespace
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|ns
return|;
block|}
DECL|method|getCurrentApplicationId ()
specifier|public
name|ApplicationId
name|getCurrentApplicationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationId
return|;
block|}
comment|/**    * @return the allocation tags.    */
DECL|method|getTags ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|tags
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createSingleAppAllocationTags ( ApplicationId appId, Set<String> tags)
specifier|public
specifier|static
name|AllocationTags
name|createSingleAppAllocationTags
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|TargetApplicationsNamespace
name|namespace
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|AppID
argument_list|(
name|appId
argument_list|)
decl_stmt|;
return|return
operator|new
name|AllocationTags
argument_list|(
name|namespace
argument_list|,
name|tags
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createGlobalAllocationTags (Set<String> tags)
specifier|public
specifier|static
name|AllocationTags
name|createGlobalAllocationTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|TargetApplicationsNamespace
name|namespace
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|All
argument_list|()
decl_stmt|;
return|return
operator|new
name|AllocationTags
argument_list|(
name|namespace
argument_list|,
name|tags
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createOtherAppAllocationTags ( ApplicationId currentApp, Set<String> tags)
specifier|public
specifier|static
name|AllocationTags
name|createOtherAppAllocationTags
parameter_list|(
name|ApplicationId
name|currentApp
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|TargetApplicationsNamespace
name|namespace
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|NotSelf
argument_list|()
decl_stmt|;
return|return
operator|new
name|AllocationTags
argument_list|(
name|namespace
argument_list|,
name|tags
argument_list|,
name|currentApp
argument_list|)
return|;
block|}
DECL|method|createAllocationTags ( ApplicationId currentApplicationId, String namespaceString, Set<String> tags)
specifier|public
specifier|static
name|AllocationTags
name|createAllocationTags
parameter_list|(
name|ApplicationId
name|currentApplicationId
parameter_list|,
name|String
name|namespaceString
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|TargetApplicationsNamespace
name|namespace
init|=
name|TargetApplicationsNamespace
operator|.
name|parse
argument_list|(
name|namespaceString
argument_list|)
decl_stmt|;
return|return
operator|new
name|AllocationTags
argument_list|(
name|namespace
argument_list|,
name|tags
argument_list|,
name|currentApplicationId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

