begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FSQueueSchedulable
specifier|public
class|class
name|FSQueueSchedulable
extends|extends
name|Schedulable
implements|implements
name|Queue
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSQueueSchedulable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|queue
specifier|private
name|FSQueue
name|queue
decl_stmt|;
DECL|field|queueMgr
specifier|private
name|QueueManager
name|queueMgr
decl_stmt|;
DECL|field|appScheds
specifier|private
name|List
argument_list|<
name|AppSchedulable
argument_list|>
name|appScheds
init|=
operator|new
name|LinkedList
argument_list|<
name|AppSchedulable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|demand
specifier|private
name|Resource
name|demand
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|metrics
specifier|private
name|QueueMetrics
name|metrics
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Variables used for preemption
DECL|field|lastTimeAtMinShare
name|long
name|lastTimeAtMinShare
decl_stmt|;
DECL|field|lastTimeAtHalfFairShare
name|long
name|lastTimeAtHalfFairShare
decl_stmt|;
comment|// Constructor for tests
DECL|method|FSQueueSchedulable (FairScheduler scheduler, FSQueue fsQueue, QueueManager qMgr, QueueMetrics metrics, long minShare, long fairShare)
specifier|protected
name|FSQueueSchedulable
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|,
name|FSQueue
name|fsQueue
parameter_list|,
name|QueueManager
name|qMgr
parameter_list|,
name|QueueMetrics
name|metrics
parameter_list|,
name|long
name|minShare
parameter_list|,
name|long
name|fairShare
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|queueMgr
operator|=
name|qMgr
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|fsQueue
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|minShare
expr_stmt|;
name|this
operator|.
name|lastTimeAtHalfFairShare
operator|=
name|fairShare
expr_stmt|;
block|}
DECL|method|FSQueueSchedulable (FairScheduler scheduler, FSQueue queue)
specifier|public
name|FSQueueSchedulable
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|,
name|FSQueue
name|queue
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|queueMgr
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|QueueMetrics
operator|.
name|forQueue
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastTimeAtHalfFairShare
operator|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
DECL|method|addApp (AppSchedulable app)
specifier|public
name|void
name|addApp
parameter_list|(
name|AppSchedulable
name|app
parameter_list|)
block|{
name|appScheds
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
DECL|method|removeApp (FSSchedulerApp app)
specifier|public
name|void
name|removeApp
parameter_list|(
name|FSSchedulerApp
name|app
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|AppSchedulable
argument_list|>
name|it
init|=
name|appScheds
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AppSchedulable
name|appSched
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|appSched
operator|.
name|getApp
argument_list|()
operator|==
name|app
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Update demand by asking apps in the queue to update    */
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{
comment|// Compute demand by iterating through apps in the queue
comment|// Limit demand to maxResources
name|Resource
name|maxRes
init|=
name|queueMgr
operator|.
name|getMaxResources
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|demand
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|AppSchedulable
name|sched
range|:
name|appScheds
control|)
block|{
name|sched
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|Resource
name|toAdd
init|=
name|sched
operator|.
name|getDemand
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Counting resource from "
operator|+
name|sched
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|toAdd
operator|+
literal|"; Total resource consumption for "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" now "
operator|+
name|demand
argument_list|)
expr_stmt|;
block|}
name|demand
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|demand
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|demand
argument_list|,
name|maxRes
argument_list|)
condition|)
block|{
name|demand
operator|=
name|maxRes
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The updated demand for "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|demand
operator|+
literal|"; the max is "
operator|+
name|maxRes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Distribute the queue's fair share among its jobs    */
annotation|@
name|Override
DECL|method|redistributeShare ()
specifier|public
name|void
name|redistributeShare
parameter_list|()
block|{
if|if
condition|(
name|queue
operator|.
name|getSchedulingMode
argument_list|()
operator|==
name|SchedulingMode
operator|.
name|FAIR
condition|)
block|{
name|SchedulingAlgorithms
operator|.
name|computeFairShares
argument_list|(
name|appScheds
argument_list|,
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|AppSchedulable
name|sched
range|:
name|appScheds
control|)
block|{
name|sched
operator|.
name|setFairShare
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|Resource
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|Resource
name|getMinShare
parameter_list|()
block|{
return|return
name|queueMgr
operator|.
name|getMinResources
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWeight ()
specifier|public
name|double
name|getWeight
parameter_list|()
block|{
return|return
name|queueMgr
operator|.
name|getQueueWeight
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|assignContainer (FSSchedulerNode node, boolean reserved)
specifier|public
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|,
name|boolean
name|reserved
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node offered to queue: "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" reserved: "
operator|+
name|reserved
argument_list|)
expr_stmt|;
comment|// If this queue is over its limit, reject
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|this
operator|.
name|getResourceUsage
argument_list|()
argument_list|,
name|queueMgr
operator|.
name|getMaxResources
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|// If this node already has reserved resources for an app, first try to
comment|// finish allocating resources for that app.
if|if
condition|(
name|reserved
condition|)
block|{
for|for
control|(
name|AppSchedulable
name|sched
range|:
name|appScheds
control|)
block|{
if|if
condition|(
name|sched
operator|.
name|getApp
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|==
name|node
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
condition|)
block|{
return|return
name|sched
operator|.
name|assignContainer
argument_list|(
name|node
argument_list|,
name|reserved
argument_list|)
return|;
block|}
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
comment|// We should never get here
block|}
comment|// Otherwise, chose app to schedule based on given policy (fair vs fifo).
else|else
block|{
name|SchedulingMode
name|mode
init|=
name|queue
operator|.
name|getSchedulingMode
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|comparator
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|SchedulingMode
operator|.
name|FIFO
condition|)
block|{
name|comparator
operator|=
operator|new
name|SchedulingAlgorithms
operator|.
name|FifoComparator
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|SchedulingMode
operator|.
name|FAIR
condition|)
block|{
name|comparator
operator|=
operator|new
name|SchedulingAlgorithms
operator|.
name|FairShareComparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported queue scheduling mode "
operator|+
name|mode
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|appScheds
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
for|for
control|(
name|AppSchedulable
name|sched
range|:
name|appScheds
control|)
block|{
return|return
name|sched
operator|.
name|assignContainer
argument_list|(
name|node
argument_list|,
name|reserved
argument_list|)
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getQueue ()
name|FSQueue
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
DECL|method|getAppSchedulables ()
specifier|public
name|Collection
argument_list|<
name|AppSchedulable
argument_list|>
name|getAppSchedulables
parameter_list|()
block|{
return|return
name|appScheds
return|;
block|}
DECL|method|getLastTimeAtMinShare ()
specifier|public
name|long
name|getLastTimeAtMinShare
parameter_list|()
block|{
return|return
name|lastTimeAtMinShare
return|;
block|}
DECL|method|setLastTimeAtMinShare (long lastTimeAtMinShare)
specifier|public
name|void
name|setLastTimeAtMinShare
parameter_list|(
name|long
name|lastTimeAtMinShare
parameter_list|)
block|{
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|lastTimeAtMinShare
expr_stmt|;
block|}
DECL|method|getLastTimeAtHalfFairShare ()
specifier|public
name|long
name|getLastTimeAtHalfFairShare
parameter_list|()
block|{
return|return
name|lastTimeAtHalfFairShare
return|;
block|}
DECL|method|setLastTimeAtHalfFairShare (long lastTimeAtHalfFairShare)
specifier|public
name|void
name|setLastTimeAtHalfFairShare
parameter_list|(
name|long
name|lastTimeAtHalfFairShare
parameter_list|)
block|{
name|this
operator|.
name|lastTimeAtHalfFairShare
operator|=
name|lastTimeAtHalfFairShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|QueueMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUsage ()
specifier|public
name|Resource
name|getResourceUsage
parameter_list|()
block|{
name|Resource
name|usage
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|AppSchedulable
name|app
range|:
name|appScheds
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|usage
argument_list|,
name|app
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|usage
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
name|Priority
name|p
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAcls ()
specifier|public
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|getQueueAcls
parameter_list|()
block|{
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
name|this
operator|.
name|queueMgr
operator|.
name|getQueueAcls
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|(
name|acls
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (boolean includeChildQueues, boolean recursive)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|QueueInfo
name|queueInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|queueInfo
operator|.
name|setQueueName
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: we might change these queue metrics around a little bit
comment|// to match the semantics of the fair scheduler.
name|queueInfo
operator|.
name|setCapacity
argument_list|(
operator|(
name|float
operator|)
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|/
name|scheduler
operator|.
name|getClusterCapacity
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setCapacity
argument_list|(
operator|(
name|float
operator|)
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|/
name|scheduler
operator|.
name|getClusterCapacity
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setChildQueues
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|setQueueState
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|queueInfo
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAclInfo (UserGroupInformation user)
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueUserAclInfo
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|QueueUserACLInfo
name|userAclInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueUserACLInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueACL
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueACL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueACL
name|operation
range|:
name|QueueACL
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
name|this
operator|.
name|queueMgr
operator|.
name|getQueueAcls
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acls
operator|.
name|get
argument_list|(
name|operation
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
name|userAclInfo
operator|.
name|setQueueName
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|userAclInfo
operator|.
name|setUserAcls
argument_list|(
name|operations
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|userAclInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

