begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|leader
operator|.
name|LeaderLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|leader
operator|.
name|LeaderLatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Leader election implementation that uses Curator.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CuratorBasedElectorService
specifier|public
class|class
name|CuratorBasedElectorService
extends|extends
name|AbstractService
implements|implements
name|EmbeddedElector
implements|,
name|LeaderLatchListener
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CuratorBasedElectorService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|leaderLatch
specifier|private
name|LeaderLatch
name|leaderLatch
decl_stmt|;
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|latchPath
specifier|private
name|String
name|latchPath
decl_stmt|;
DECL|field|rmId
specifier|private
name|String
name|rmId
decl_stmt|;
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
DECL|method|CuratorBasedElectorService (RMContext rmContext, ResourceManager rm)
specifier|public
name|CuratorBasedElectorService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|ResourceManager
name|rm
parameter_list|)
block|{
name|super
argument_list|(
name|CuratorBasedElectorService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|rmId
operator|=
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|clusterId
init|=
name|YarnConfiguration
operator|.
name|getClusterId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|zkBasePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ZK_BASE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH
argument_list|)
decl_stmt|;
name|latchPath
operator|=
name|zkBasePath
operator|+
literal|"/"
operator|+
name|clusterId
expr_stmt|;
name|curator
operator|=
name|rm
operator|.
name|getCurator
argument_list|()
expr_stmt|;
name|initAndStartLeaderLatch
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|initAndStartLeaderLatch ()
specifier|private
name|void
name|initAndStartLeaderLatch
parameter_list|()
throws|throws
name|Exception
block|{
name|leaderLatch
operator|=
operator|new
name|LeaderLatch
argument_list|(
name|curator
argument_list|,
name|latchPath
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|leaderLatch
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|leaderLatch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|closeLeaderLatch
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rejoinElection ()
specifier|public
name|void
name|rejoinElection
parameter_list|()
block|{
try|try
block|{
name|closeLeaderLatch
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|initAndStartLeaderLatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fail to re-join election."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getZookeeperConnectionState ()
specifier|public
name|String
name|getZookeeperConnectionState
parameter_list|()
block|{
return|return
literal|"Connected to zookeeper : "
operator|+
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|isConnected
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isLeader ()
specifier|public
name|void
name|isLeader
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|rmId
operator|+
literal|"is elected leader, transitioning to active"
argument_list|)
expr_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_ZKFC
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|rmId
operator|+
literal|" failed to transition to active, giving up leadership"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|notLeader
argument_list|()
expr_stmt|;
name|rejoinElection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeLeaderLatch ()
specifier|private
name|void
name|closeLeaderLatch
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|leaderLatch
operator|!=
literal|null
condition|)
block|{
name|leaderLatch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|notLeader ()
specifier|public
name|void
name|notLeader
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|rmId
operator|+
literal|" relinquish leadership"
argument_list|)
expr_stmt|;
try|try
block|{
name|rmContext
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToStandby
argument_list|(
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_ZKFC
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|rmId
operator|+
literal|" did not transition to standby successfully."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// only for testing
annotation|@
name|VisibleForTesting
DECL|method|getCuratorClient ()
specifier|public
name|CuratorFramework
name|getCuratorClient
parameter_list|()
block|{
return|return
name|this
operator|.
name|curator
return|;
block|}
block|}
end_class

end_unit

