begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/*  * It contains allocation information for one allocation in a node heartbeat.  * Detailed allocation activities are first stored in "AllocationActivity"  * as operations, then transformed to a tree structure.  * Tree structure starts from root queue and ends in leaf queue,  * application or container allocation.  */
end_comment

begin_class
DECL|class|NodeAllocation
specifier|public
class|class
name|NodeAllocation
block|{
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
DECL|field|containerState
specifier|private
name|AllocationState
name|containerState
init|=
name|AllocationState
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|allocationOperations
specifier|private
name|List
argument_list|<
name|AllocationActivity
argument_list|>
name|allocationOperations
decl_stmt|;
DECL|field|root
specifier|private
name|ActivityNode
name|root
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodeAllocation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|NodeAllocation (NodeId nodeId)
specifier|public
name|NodeAllocation
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|allocationOperations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|addAllocationActivity (String parentName, String childName, String priority, ActivityState state, String diagnostic, String type)
specifier|public
name|void
name|addAllocationActivity
parameter_list|(
name|String
name|parentName
parameter_list|,
name|String
name|childName
parameter_list|,
name|String
name|priority
parameter_list|,
name|ActivityState
name|state
parameter_list|,
name|String
name|diagnostic
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|AllocationActivity
name|allocate
init|=
operator|new
name|AllocationActivity
argument_list|(
name|parentName
argument_list|,
name|childName
argument_list|,
name|priority
argument_list|,
name|state
argument_list|,
name|diagnostic
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|this
operator|.
name|allocationOperations
operator|.
name|add
argument_list|(
name|allocate
argument_list|)
expr_stmt|;
block|}
DECL|method|updateContainerState (ContainerId containerId, AllocationState containerState)
specifier|public
name|void
name|updateContainerState
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|AllocationState
name|containerState
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|containerState
operator|=
name|containerState
expr_stmt|;
block|}
comment|// In node allocation, transform each activity to a tree-like structure
comment|// for frontend activity display.
comment|// eg:    root
comment|//         / \
comment|//        a   b
comment|//       / \
comment|//    app1 app2
comment|//    / \
comment|//  CA1 CA2
comment|// CA means Container Attempt
DECL|method|transformToTree ()
specifier|public
name|void
name|transformToTree
parameter_list|()
block|{
name|List
argument_list|<
name|ActivityNode
argument_list|>
name|allocationTree
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|AllocationActivity
argument_list|>
name|ite
init|=
name|allocationOperations
operator|.
name|listIterator
argument_list|(
name|allocationOperations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|ite
operator|.
name|previous
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ite
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|AllocationActivity
name|allocationOperation
range|:
name|allocationOperations
control|)
block|{
name|ActivityNode
name|node
init|=
name|allocationOperation
operator|.
name|createTreeNode
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|allocationTree
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|allocationTree
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getParentName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addChild
argument_list|(
name|allocationTree
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|allocationTree
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|allocationTree
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|root
operator|=
name|allocationTree
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTimeStamp (long timeStamp)
specifier|public
name|void
name|setTimeStamp
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|timeStamp
expr_stmt|;
block|}
DECL|method|getTimeStamp ()
specifier|public
name|long
name|getTimeStamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeStamp
return|;
block|}
DECL|method|getFinalAllocationState ()
specifier|public
name|AllocationState
name|getFinalAllocationState
parameter_list|()
block|{
return|return
name|containerState
return|;
block|}
DECL|method|getContainerId ()
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
if|if
condition|(
name|containerId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|containerId
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getRoot ()
specifier|public
name|ActivityNode
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

