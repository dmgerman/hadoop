begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|Lock
operator|.
name|NoLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LeafQueue
specifier|public
class|class
name|LeafQueue
extends|extends
name|AbstractCSQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|absoluteUsedCapacity
specifier|private
name|float
name|absoluteUsedCapacity
init|=
literal|0.0f
decl_stmt|;
DECL|field|userLimit
specifier|private
name|int
name|userLimit
decl_stmt|;
DECL|field|userLimitFactor
specifier|private
name|float
name|userLimitFactor
decl_stmt|;
DECL|field|maxApplications
specifier|protected
name|int
name|maxApplications
decl_stmt|;
DECL|field|maxApplicationsPerUser
specifier|protected
name|int
name|maxApplicationsPerUser
decl_stmt|;
DECL|field|maxAMResourcePerQueuePercent
specifier|private
name|float
name|maxAMResourcePerQueuePercent
decl_stmt|;
DECL|field|maxActiveApplications
specifier|private
name|int
name|maxActiveApplications
decl_stmt|;
comment|// Based on absolute max capacity
DECL|field|maxActiveAppsUsingAbsCap
specifier|private
name|int
name|maxActiveAppsUsingAbsCap
decl_stmt|;
comment|// Based on absolute capacity
DECL|field|maxActiveApplicationsPerUser
specifier|private
name|int
name|maxActiveApplicationsPerUser
decl_stmt|;
DECL|field|nodeLocalityDelay
specifier|private
name|int
name|nodeLocalityDelay
decl_stmt|;
DECL|field|activeApplications
name|Set
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|activeApplications
decl_stmt|;
DECL|field|applicationAttemptMap
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FiCaSchedulerApp
argument_list|>
name|applicationAttemptMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|FiCaSchedulerApp
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|pendingApplications
name|Set
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|pendingApplications
decl_stmt|;
DECL|field|minimumAllocationFactor
specifier|private
specifier|final
name|float
name|minimumAllocationFactor
decl_stmt|;
DECL|field|users
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
name|users
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|CapacitySchedulerContext
name|scheduler
decl_stmt|;
DECL|field|activeUsersManager
specifier|private
specifier|final
name|ActiveUsersManager
name|activeUsersManager
decl_stmt|;
comment|// cache last cluster resource to compute actual capacity
DECL|field|lastClusterResource
specifier|private
name|Resource
name|lastClusterResource
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|queueHeadroomInfo
specifier|private
specifier|final
name|QueueHeadroomInfo
name|queueHeadroomInfo
init|=
operator|new
name|QueueHeadroomInfo
argument_list|()
decl_stmt|;
DECL|method|LeafQueue (CapacitySchedulerContext cs, String queueName, CSQueue parent, CSQueue old)
specifier|public
name|LeafQueue
parameter_list|(
name|CapacitySchedulerContext
name|cs
parameter_list|,
name|String
name|queueName
parameter_list|,
name|CSQueue
name|parent
parameter_list|,
name|CSQueue
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|cs
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|old
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|cs
expr_stmt|;
name|this
operator|.
name|activeUsersManager
operator|=
operator|new
name|ActiveUsersManager
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|this
operator|.
name|minimumAllocationFactor
operator|=
name|Resources
operator|.
name|ratio
argument_list|(
name|resourceCalculator
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|maximumAllocation
argument_list|,
name|minimumAllocation
argument_list|)
argument_list|,
name|maximumAllocation
argument_list|)
expr_stmt|;
name|float
name|capacity
init|=
name|getCapacityFromConf
argument_list|()
decl_stmt|;
name|float
name|absoluteCapacity
init|=
name|parent
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|capacity
decl_stmt|;
name|float
name|maximumCapacity
init|=
operator|(
name|float
operator|)
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumCapacity
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
operator|/
literal|100
decl_stmt|;
name|float
name|absoluteMaxCapacity
init|=
name|CSQueueUtils
operator|.
name|computeAbsoluteMaximumCapacity
argument_list|(
name|maximumCapacity
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|int
name|userLimit
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUserLimit
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|userLimitFactor
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUserLimitFactor
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxApplications
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumApplicationsPerQueue
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxApplications
operator|<
literal|0
condition|)
block|{
name|int
name|maxSystemApps
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|maxApplications
operator|=
call|(
name|int
call|)
argument_list|(
name|maxSystemApps
operator|*
name|absoluteCapacity
argument_list|)
expr_stmt|;
block|}
name|maxApplicationsPerUser
operator|=
call|(
name|int
call|)
argument_list|(
name|maxApplications
operator|*
operator|(
name|userLimit
operator|/
literal|100.0f
operator|)
operator|*
name|userLimitFactor
argument_list|)
expr_stmt|;
name|float
name|maxAMResourcePerQueuePercent
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumApplicationMasterResourcePerQueuePercent
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxActiveApplications
init|=
name|CSQueueUtils
operator|.
name|computeMaxActiveApplications
argument_list|(
name|resourceCalculator
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|this
operator|.
name|minimumAllocation
argument_list|,
name|maxAMResourcePerQueuePercent
argument_list|,
name|absoluteMaxCapacity
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxActiveAppsUsingAbsCap
operator|=
name|CSQueueUtils
operator|.
name|computeMaxActiveApplications
argument_list|(
name|resourceCalculator
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|this
operator|.
name|minimumAllocation
argument_list|,
name|maxAMResourcePerQueuePercent
argument_list|,
name|absoluteCapacity
argument_list|)
expr_stmt|;
name|int
name|maxActiveApplicationsPerUser
init|=
name|CSQueueUtils
operator|.
name|computeMaxActiveApplicationsPerUser
argument_list|(
name|maxActiveAppsUsingAbsCap
argument_list|,
name|userLimit
argument_list|,
name|userLimitFactor
argument_list|)
decl_stmt|;
name|this
operator|.
name|queueInfo
operator|.
name|setChildQueues
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QueueState
name|state
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getState
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAcls
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|setupQueueConfigs
argument_list|(
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|capacity
argument_list|,
name|absoluteCapacity
argument_list|,
name|maximumCapacity
argument_list|,
name|absoluteMaxCapacity
argument_list|,
name|userLimit
argument_list|,
name|userLimitFactor
argument_list|,
name|maxApplications
argument_list|,
name|maxAMResourcePerQueuePercent
argument_list|,
name|maxApplicationsPerUser
argument_list|,
name|maxActiveApplications
argument_list|,
name|maxActiveApplicationsPerUser
argument_list|,
name|state
argument_list|,
name|acls
argument_list|,
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getNodeLocalityDelay
argument_list|()
argument_list|,
name|accessibleLabels
argument_list|,
name|defaultLabelExpression
argument_list|,
name|this
operator|.
name|capacitiyByNodeLabels
argument_list|,
name|this
operator|.
name|maxCapacityByNodeLabels
argument_list|,
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReservationContinueLook
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"LeafQueue:"
operator|+
literal|" name="
operator|+
name|queueName
operator|+
literal|", fullname="
operator|+
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|applicationComparator
init|=
name|cs
operator|.
name|getApplicationComparator
argument_list|()
decl_stmt|;
name|this
operator|.
name|pendingApplications
operator|=
operator|new
name|TreeSet
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|(
name|applicationComparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeApplications
operator|=
operator|new
name|TreeSet
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|(
name|applicationComparator
argument_list|)
expr_stmt|;
block|}
comment|// externalizing in method, to allow overriding
DECL|method|getCapacityFromConf ()
specifier|protected
name|float
name|getCapacityFromConf
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|scheduler
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
operator|/
literal|100
return|;
block|}
DECL|method|setupQueueConfigs ( Resource clusterResource, float capacity, float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity, int userLimit, float userLimitFactor, int maxApplications, float maxAMResourcePerQueuePercent, int maxApplicationsPerUser, int maxActiveApplications, int maxActiveApplicationsPerUser, QueueState state, Map<QueueACL, AccessControlList> acls, int nodeLocalityDelay, Set<String> labels, String defaultLabelExpression, Map<String, Float> capacitieByLabel, Map<String, Float> maximumCapacitiesByLabel, boolean revervationContinueLooking)
specifier|protected
specifier|synchronized
name|void
name|setupQueueConfigs
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|absoluteCapacity
parameter_list|,
name|float
name|maximumCapacity
parameter_list|,
name|float
name|absoluteMaxCapacity
parameter_list|,
name|int
name|userLimit
parameter_list|,
name|float
name|userLimitFactor
parameter_list|,
name|int
name|maxApplications
parameter_list|,
name|float
name|maxAMResourcePerQueuePercent
parameter_list|,
name|int
name|maxApplicationsPerUser
parameter_list|,
name|int
name|maxActiveApplications
parameter_list|,
name|int
name|maxActiveApplicationsPerUser
parameter_list|,
name|QueueState
name|state
parameter_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
parameter_list|,
name|int
name|nodeLocalityDelay
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|,
name|String
name|defaultLabelExpression
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|capacitieByLabel
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|maximumCapacitiesByLabel
parameter_list|,
name|boolean
name|revervationContinueLooking
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setupQueueConfigs
argument_list|(
name|clusterResource
argument_list|,
name|capacity
argument_list|,
name|absoluteCapacity
argument_list|,
name|maximumCapacity
argument_list|,
name|absoluteMaxCapacity
argument_list|,
name|state
argument_list|,
name|acls
argument_list|,
name|labels
argument_list|,
name|defaultLabelExpression
argument_list|,
name|capacitieByLabel
argument_list|,
name|maximumCapacitiesByLabel
argument_list|,
name|revervationContinueLooking
argument_list|)
expr_stmt|;
comment|// Sanity check
name|CSQueueUtils
operator|.
name|checkMaxCapacity
argument_list|(
name|getQueueName
argument_list|()
argument_list|,
name|capacity
argument_list|,
name|maximumCapacity
argument_list|)
expr_stmt|;
name|float
name|absCapacity
init|=
name|getParent
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|capacity
decl_stmt|;
name|CSQueueUtils
operator|.
name|checkAbsoluteCapacity
argument_list|(
name|getQueueName
argument_list|()
argument_list|,
name|absCapacity
argument_list|,
name|absoluteMaxCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|absoluteCapacity
operator|=
name|absCapacity
expr_stmt|;
name|this
operator|.
name|userLimit
operator|=
name|userLimit
expr_stmt|;
name|this
operator|.
name|userLimitFactor
operator|=
name|userLimitFactor
expr_stmt|;
name|this
operator|.
name|maxApplications
operator|=
name|maxApplications
expr_stmt|;
name|this
operator|.
name|maxAMResourcePerQueuePercent
operator|=
name|maxAMResourcePerQueuePercent
expr_stmt|;
name|this
operator|.
name|maxApplicationsPerUser
operator|=
name|maxApplicationsPerUser
expr_stmt|;
name|this
operator|.
name|maxActiveApplications
operator|=
name|maxActiveApplications
expr_stmt|;
name|this
operator|.
name|maxActiveApplicationsPerUser
operator|=
name|maxActiveApplicationsPerUser
expr_stmt|;
if|if
condition|(
operator|!
name|SchedulerUtils
operator|.
name|checkQueueLabelExpression
argument_list|(
name|this
operator|.
name|accessibleLabels
argument_list|,
name|this
operator|.
name|defaultLabelExpression
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid default label expression of "
operator|+
literal|" queue="
operator|+
name|queueInfo
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" doesn't have permission to access all labels "
operator|+
literal|"in default label expression. labelExpression of resource request="
operator|+
operator|(
name|this
operator|.
name|defaultLabelExpression
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|defaultLabelExpression
operator|)
operator|+
literal|". Queue labels="
operator|+
operator|(
name|queueInfo
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|StringUtils
operator|.
name|join
argument_list|(
name|queueInfo
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
literal|','
argument_list|)
operator|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|nodeLocalityDelay
operator|=
name|nodeLocalityDelay
expr_stmt|;
name|StringBuilder
name|aclsString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|e
range|:
name|acls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|aclsString
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|labelStrBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|labels
control|)
block|{
name|labelStrBuilder
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|labelStrBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing "
operator|+
name|queueName
operator|+
literal|"\n"
operator|+
literal|"capacity = "
operator|+
name|capacity
operator|+
literal|" [= (float) configuredCapacity / 100 ]"
operator|+
literal|"\n"
operator|+
literal|"asboluteCapacity = "
operator|+
name|absoluteCapacity
operator|+
literal|" [= parentAbsoluteCapacity * capacity ]"
operator|+
literal|"\n"
operator|+
literal|"maxCapacity = "
operator|+
name|maximumCapacity
operator|+
literal|" [= configuredMaxCapacity ]"
operator|+
literal|"\n"
operator|+
literal|"absoluteMaxCapacity = "
operator|+
name|absoluteMaxCapacity
operator|+
literal|" [= 1.0 maximumCapacity undefined, "
operator|+
literal|"(parentAbsoluteMaxCapacity * maximumCapacity) / 100 otherwise ]"
operator|+
literal|"\n"
operator|+
literal|"userLimit = "
operator|+
name|userLimit
operator|+
literal|" [= configuredUserLimit ]"
operator|+
literal|"\n"
operator|+
literal|"userLimitFactor = "
operator|+
name|userLimitFactor
operator|+
literal|" [= configuredUserLimitFactor ]"
operator|+
literal|"\n"
operator|+
literal|"maxApplications = "
operator|+
name|maxApplications
operator|+
literal|" [= configuredMaximumSystemApplicationsPerQueue or"
operator|+
literal|" (int)(configuredMaximumSystemApplications * absoluteCapacity)]"
operator|+
literal|"\n"
operator|+
literal|"maxApplicationsPerUser = "
operator|+
name|maxApplicationsPerUser
operator|+
literal|" [= (int)(maxApplications * (userLimit / 100.0f) * "
operator|+
literal|"userLimitFactor) ]"
operator|+
literal|"\n"
operator|+
literal|"maxActiveApplications = "
operator|+
name|maxActiveApplications
operator|+
literal|" [= max("
operator|+
literal|"(int)ceil((clusterResourceMemory / minimumAllocation) * "
operator|+
literal|"maxAMResourcePerQueuePercent * absoluteMaxCapacity),"
operator|+
literal|"1) ]"
operator|+
literal|"\n"
operator|+
literal|"maxActiveAppsUsingAbsCap = "
operator|+
name|maxActiveAppsUsingAbsCap
operator|+
literal|" [= max("
operator|+
literal|"(int)ceil((clusterResourceMemory / minimumAllocation) *"
operator|+
literal|"maxAMResourcePercent * absoluteCapacity),"
operator|+
literal|"1) ]"
operator|+
literal|"\n"
operator|+
literal|"maxActiveApplicationsPerUser = "
operator|+
name|maxActiveApplicationsPerUser
operator|+
literal|" [= max("
operator|+
literal|"(int)(maxActiveApplications * (userLimit / 100.0f) * "
operator|+
literal|"userLimitFactor),"
operator|+
literal|"1) ]"
operator|+
literal|"\n"
operator|+
literal|"usedCapacity = "
operator|+
name|usedCapacity
operator|+
literal|" [= usedResourcesMemory / "
operator|+
literal|"(clusterResourceMemory * absoluteCapacity)]"
operator|+
literal|"\n"
operator|+
literal|"absoluteUsedCapacity = "
operator|+
name|absoluteUsedCapacity
operator|+
literal|" [= usedResourcesMemory / clusterResourceMemory]"
operator|+
literal|"\n"
operator|+
literal|"maxAMResourcePerQueuePercent = "
operator|+
name|maxAMResourcePerQueuePercent
operator|+
literal|" [= configuredMaximumAMResourcePercent ]"
operator|+
literal|"\n"
operator|+
literal|"minimumAllocationFactor = "
operator|+
name|minimumAllocationFactor
operator|+
literal|" [= (float)(maximumAllocationMemory - minimumAllocationMemory) / "
operator|+
literal|"maximumAllocationMemory ]"
operator|+
literal|"\n"
operator|+
literal|"numContainers = "
operator|+
name|numContainers
operator|+
literal|" [= currentNumContainers ]"
operator|+
literal|"\n"
operator|+
literal|"state = "
operator|+
name|state
operator|+
literal|" [= configuredState ]"
operator|+
literal|"\n"
operator|+
literal|"acls = "
operator|+
name|aclsString
operator|+
literal|" [= configuredAcls ]"
operator|+
literal|"\n"
operator|+
literal|"nodeLocalityDelay = "
operator|+
name|nodeLocalityDelay
operator|+
literal|"\n"
operator|+
literal|"labels="
operator|+
name|labelStrBuilder
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"nodeLocalityDelay = "
operator|+
name|nodeLocalityDelay
operator|+
literal|"\n"
operator|+
literal|"reservationsContinueLooking = "
operator|+
name|reservationsContinueLooking
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueuePath ()
specifier|public
name|String
name|getQueuePath
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|"."
operator|+
name|getQueueName
argument_list|()
return|;
block|}
comment|/**    * Used only by tests.    */
annotation|@
name|Private
DECL|method|getMinimumAllocationFactor ()
specifier|public
name|float
name|getMinimumAllocationFactor
parameter_list|()
block|{
return|return
name|minimumAllocationFactor
return|;
block|}
comment|/**    * Used only by tests.    */
annotation|@
name|Private
DECL|method|getMaxAMResourcePerQueuePercent ()
specifier|public
name|float
name|getMaxAMResourcePerQueuePercent
parameter_list|()
block|{
return|return
name|maxAMResourcePerQueuePercent
return|;
block|}
DECL|method|getMaxApplications ()
specifier|public
name|int
name|getMaxApplications
parameter_list|()
block|{
return|return
name|maxApplications
return|;
block|}
DECL|method|getMaxApplicationsPerUser ()
specifier|public
specifier|synchronized
name|int
name|getMaxApplicationsPerUser
parameter_list|()
block|{
return|return
name|maxApplicationsPerUser
return|;
block|}
DECL|method|getMaximumActiveApplications ()
specifier|public
specifier|synchronized
name|int
name|getMaximumActiveApplications
parameter_list|()
block|{
return|return
name|maxActiveApplications
return|;
block|}
DECL|method|getMaximumActiveApplicationsPerUser ()
specifier|public
specifier|synchronized
name|int
name|getMaximumActiveApplicationsPerUser
parameter_list|()
block|{
return|return
name|maxActiveApplicationsPerUser
return|;
block|}
annotation|@
name|Override
DECL|method|getActiveUsersManager ()
specifier|public
name|ActiveUsersManager
name|getActiveUsersManager
parameter_list|()
block|{
return|return
name|activeUsersManager
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues ()
specifier|public
name|List
argument_list|<
name|CSQueue
argument_list|>
name|getChildQueues
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Set user limit - used only for testing.    * @param userLimit new user limit    */
DECL|method|setUserLimit (int userLimit)
specifier|synchronized
name|void
name|setUserLimit
parameter_list|(
name|int
name|userLimit
parameter_list|)
block|{
name|this
operator|.
name|userLimit
operator|=
name|userLimit
expr_stmt|;
block|}
comment|/**    * Set user limit factor - used only for testing.    * @param userLimitFactor new user limit factor    */
DECL|method|setUserLimitFactor (float userLimitFactor)
specifier|synchronized
name|void
name|setUserLimitFactor
parameter_list|(
name|float
name|userLimitFactor
parameter_list|)
block|{
name|this
operator|.
name|userLimitFactor
operator|=
name|userLimitFactor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumApplications ()
specifier|public
specifier|synchronized
name|int
name|getNumApplications
parameter_list|()
block|{
return|return
name|getNumPendingApplications
argument_list|()
operator|+
name|getNumActiveApplications
argument_list|()
return|;
block|}
DECL|method|getNumPendingApplications ()
specifier|public
specifier|synchronized
name|int
name|getNumPendingApplications
parameter_list|()
block|{
return|return
name|pendingApplications
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getNumActiveApplications ()
specifier|public
specifier|synchronized
name|int
name|getNumActiveApplications
parameter_list|()
block|{
return|return
name|activeApplications
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getNumApplications (String user)
specifier|public
specifier|synchronized
name|int
name|getNumApplications
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|getUser
argument_list|(
name|user
argument_list|)
operator|.
name|getTotalApplications
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getNumPendingApplications (String user)
specifier|public
specifier|synchronized
name|int
name|getNumPendingApplications
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|getUser
argument_list|(
name|user
argument_list|)
operator|.
name|getPendingApplications
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getNumActiveApplications (String user)
specifier|public
specifier|synchronized
name|int
name|getNumActiveApplications
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|getUser
argument_list|(
name|user
argument_list|)
operator|.
name|getActiveApplications
argument_list|()
return|;
block|}
DECL|method|getNumContainers ()
specifier|public
specifier|synchronized
name|int
name|getNumContainers
parameter_list|()
block|{
return|return
name|numContainers
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
specifier|synchronized
name|QueueState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|Private
DECL|method|getUserLimit ()
specifier|public
specifier|synchronized
name|int
name|getUserLimit
parameter_list|()
block|{
return|return
name|userLimit
return|;
block|}
annotation|@
name|Private
DECL|method|getUserLimitFactor ()
specifier|public
specifier|synchronized
name|float
name|getUserLimitFactor
parameter_list|()
block|{
return|return
name|userLimitFactor
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo ( boolean includeChildQueues, boolean recursive)
specifier|public
specifier|synchronized
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|queueInfo
operator|.
name|setCurrentCapacity
argument_list|(
name|usedCapacity
argument_list|)
expr_stmt|;
return|return
name|queueInfo
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
DECL|method|getQueueUserAclInfo (UserGroupInformation user)
name|getQueueUserAclInfo
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|QueueUserACLInfo
name|userAclInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueUserACLInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueACL
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueACL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueACL
name|operation
range|:
name|QueueACL
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasAccess
argument_list|(
name|operation
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
name|userAclInfo
operator|.
name|setQueueName
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|userAclInfo
operator|.
name|setUserAcls
argument_list|(
name|operations
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|userAclInfo
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|getNodeLocalityDelay ()
specifier|public
name|int
name|getNodeLocalityDelay
parameter_list|()
block|{
return|return
name|nodeLocalityDelay
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|queueName
operator|+
literal|": "
operator|+
literal|"capacity="
operator|+
name|capacity
operator|+
literal|", "
operator|+
literal|"absoluteCapacity="
operator|+
name|absoluteCapacity
operator|+
literal|", "
operator|+
literal|"usedResources="
operator|+
name|usedResources
operator|+
literal|", "
operator|+
literal|"usedCapacity="
operator|+
name|getUsedCapacity
argument_list|()
operator|+
literal|", "
operator|+
literal|"absoluteUsedCapacity="
operator|+
name|getAbsoluteUsedCapacity
argument_list|()
operator|+
literal|", "
operator|+
literal|"numApps="
operator|+
name|getNumApplications
argument_list|()
operator|+
literal|", "
operator|+
literal|"numContainers="
operator|+
name|getNumContainers
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNodeLabelManager (RMNodeLabelsManager mgr)
specifier|public
specifier|synchronized
name|void
name|setNodeLabelManager
parameter_list|(
name|RMNodeLabelsManager
name|mgr
parameter_list|)
block|{
name|this
operator|.
name|labelManager
operator|=
name|mgr
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUser (String userName)
specifier|public
specifier|synchronized
name|User
name|getUser
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|User
name|user
init|=
name|users
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
operator|new
name|User
argument_list|()
expr_stmt|;
name|users
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
comment|/**    * @return an ArrayList of UserInfo objects who are active in this queue    */
DECL|method|getUsers ()
specifier|public
specifier|synchronized
name|ArrayList
argument_list|<
name|UserInfo
argument_list|>
name|getUsers
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|UserInfo
argument_list|>
name|usersToReturn
init|=
operator|new
name|ArrayList
argument_list|<
name|UserInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
name|entry
range|:
name|users
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|usersToReturn
operator|.
name|add
argument_list|(
operator|new
name|UserInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Resources
operator|.
name|clone
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|consumed
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getActiveApplications
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPendingApplications
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|usersToReturn
return|;
block|}
annotation|@
name|Override
DECL|method|reinitialize ( CSQueue newlyParsedQueue, Resource clusterResource)
specifier|public
specifier|synchronized
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|newlyParsedQueue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity check
if|if
condition|(
operator|!
operator|(
name|newlyParsedQueue
operator|instanceof
name|LeafQueue
operator|)
operator|||
operator|!
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to reinitialize "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" from "
operator|+
name|newlyParsedQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
name|LeafQueue
name|newlyParsedLeafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|newlyParsedQueue
decl_stmt|;
name|setupQueueConfigs
argument_list|(
name|clusterResource
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|capacity
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|absoluteCapacity
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|maximumCapacity
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|absoluteMaxCapacity
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|userLimit
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|userLimitFactor
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|maxApplications
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|maxAMResourcePerQueuePercent
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|getMaximumActiveApplications
argument_list|()
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|getMaximumActiveApplicationsPerUser
argument_list|()
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|state
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|acls
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|getNodeLocalityDelay
argument_list|()
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|accessibleLabels
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|defaultLabelExpression
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|capacitiyByNodeLabels
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|maxCapacityByNodeLabels
argument_list|,
name|newlyParsedLeafQueue
operator|.
name|reservationsContinueLooking
argument_list|)
expr_stmt|;
comment|// queue metrics are updated, more resource may be available
comment|// activate the pending applications if possible
name|activateApplications
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|submitApplicationAttempt (FiCaSchedulerApp application, String userName)
specifier|public
name|void
name|submitApplicationAttempt
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
comment|// Add the attempt to our data-structures
name|addApplicationAttempt
argument_list|(
name|application
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|// We don't want to update metrics for move app
if|if
condition|(
name|application
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|metrics
operator|.
name|submitAppAttempt
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|getParent
argument_list|()
operator|.
name|submitApplicationAttempt
argument_list|(
name|application
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|submitApplication (ApplicationId applicationId, String userName, String queue)
specifier|public
name|void
name|submitApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|AccessControlException
block|{
comment|// Careful! Locking order is important!
comment|// Check queue ACLs
name|UserGroupInformation
name|userUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|userUgi
argument_list|)
operator|&&
operator|!
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|userUgi
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" cannot submit"
operator|+
literal|" applications to queue "
operator|+
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
name|User
name|user
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Check if the queue is accepting jobs
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|QueueState
operator|.
name|RUNNING
condition|)
block|{
name|String
name|msg
init|=
literal|"Queue "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" is STOPPED. Cannot accept submission of application: "
operator|+
name|applicationId
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Check submission limits for queues
if|if
condition|(
name|getNumApplications
argument_list|()
operator|>=
name|getMaxApplications
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Queue "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" already has "
operator|+
name|getNumApplications
argument_list|()
operator|+
literal|" applications,"
operator|+
literal|" cannot accept submission of application: "
operator|+
name|applicationId
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Check submission limits for the user on this queue
name|user
operator|=
name|getUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getTotalApplications
argument_list|()
operator|>=
name|getMaxApplicationsPerUser
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Queue "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" already has "
operator|+
name|user
operator|.
name|getTotalApplications
argument_list|()
operator|+
literal|" applications from user "
operator|+
name|userName
operator|+
literal|" cannot accept submission of application: "
operator|+
name|applicationId
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|// Inform the parent queue
try|try
block|{
name|getParent
argument_list|()
operator|.
name|submitApplication
argument_list|(
name|applicationId
argument_list|,
name|userName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to submit application to parent-queue: "
operator|+
name|getParent
argument_list|()
operator|.
name|getQueuePath
argument_list|()
argument_list|,
name|ace
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
block|}
DECL|method|activateApplications ()
specifier|private
specifier|synchronized
name|void
name|activateApplications
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|i
init|=
name|pendingApplications
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check queue limit
if|if
condition|(
name|getNumActiveApplications
argument_list|()
operator|>=
name|getMaximumActiveApplications
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Check user limit
name|User
name|user
init|=
name|getUser
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getActiveApplications
argument_list|()
operator|<
name|getMaximumActiveApplicationsPerUser
argument_list|()
condition|)
block|{
name|user
operator|.
name|activateApplication
argument_list|()
expr_stmt|;
name|activeApplications
operator|.
name|add
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" from user: "
operator|+
name|application
operator|.
name|getUser
argument_list|()
operator|+
literal|" activated in queue: "
operator|+
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addApplicationAttempt (FiCaSchedulerApp application, User user)
specifier|private
specifier|synchronized
name|void
name|addApplicationAttempt
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|User
name|user
parameter_list|)
block|{
comment|// Accept
name|user
operator|.
name|submitApplication
argument_list|()
expr_stmt|;
name|pendingApplications
operator|.
name|add
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|applicationAttemptMap
operator|.
name|put
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// Activate applications
name|activateApplications
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application added -"
operator|+
literal|" appId: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" user: "
operator|+
name|user
operator|+
literal|","
operator|+
literal|" leaf-queue: "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" #user-pending-applications: "
operator|+
name|user
operator|.
name|getPendingApplications
argument_list|()
operator|+
literal|" #user-active-applications: "
operator|+
name|user
operator|.
name|getActiveApplications
argument_list|()
operator|+
literal|" #queue-pending-applications: "
operator|+
name|getNumPendingApplications
argument_list|()
operator|+
literal|" #queue-active-applications: "
operator|+
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishApplication (ApplicationId application, String user)
specifier|public
name|void
name|finishApplication
parameter_list|(
name|ApplicationId
name|application
parameter_list|,
name|String
name|user
parameter_list|)
block|{
comment|// Inform the activeUsersManager
name|activeUsersManager
operator|.
name|deactivateApplication
argument_list|(
name|user
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// Inform the parent queue
name|getParent
argument_list|()
operator|.
name|finishApplication
argument_list|(
name|application
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationAttempt (FiCaSchedulerApp application, String queue)
specifier|public
name|void
name|finishApplicationAttempt
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|removeApplicationAttempt
argument_list|(
name|application
argument_list|,
name|getUser
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getParent
argument_list|()
operator|.
name|finishApplicationAttempt
argument_list|(
name|application
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|removeApplicationAttempt ( FiCaSchedulerApp application, User user)
specifier|public
specifier|synchronized
name|void
name|removeApplicationAttempt
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|boolean
name|wasActive
init|=
name|activeApplications
operator|.
name|remove
argument_list|(
name|application
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wasActive
condition|)
block|{
name|pendingApplications
operator|.
name|remove
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
name|applicationAttemptMap
operator|.
name|remove
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|finishApplication
argument_list|(
name|wasActive
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getTotalApplications
argument_list|()
operator|==
literal|0
condition|)
block|{
name|users
operator|.
name|remove
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check if we can activate more applications
name|activateApplications
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application removed -"
operator|+
literal|" appId: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" user: "
operator|+
name|application
operator|.
name|getUser
argument_list|()
operator|+
literal|" queue: "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" #user-pending-applications: "
operator|+
name|user
operator|.
name|getPendingApplications
argument_list|()
operator|+
literal|" #user-active-applications: "
operator|+
name|user
operator|.
name|getActiveApplications
argument_list|()
operator|+
literal|" #queue-pending-applications: "
operator|+
name|getNumPendingApplications
argument_list|()
operator|+
literal|" #queue-active-applications: "
operator|+
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplication ( ApplicationAttemptId applicationAttemptId)
specifier|private
specifier|synchronized
name|FiCaSchedulerApp
name|getApplication
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
return|return
name|applicationAttemptMap
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
return|;
block|}
DECL|field|NULL_ASSIGNMENT
specifier|private
specifier|static
specifier|final
name|CSAssignment
name|NULL_ASSIGNMENT
init|=
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
decl_stmt|;
DECL|field|SKIP_ASSIGNMENT
specifier|private
specifier|static
specifier|final
name|CSAssignment
name|SKIP_ASSIGNMENT
init|=
operator|new
name|CSAssignment
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|method|getRequestLabelSetByExpression ( String labelExpression)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRequestLabelSetByExpression
parameter_list|(
name|String
name|labelExpression
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|labelExpression
condition|)
block|{
return|return
name|labels
return|;
block|}
for|for
control|(
name|String
name|l
range|:
name|labelExpression
operator|.
name|split
argument_list|(
literal|"&&"
argument_list|)
control|)
block|{
if|if
condition|(
name|l
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|labels
operator|.
name|add
argument_list|(
name|l
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|labels
return|;
block|}
annotation|@
name|Override
DECL|method|assignContainers (Resource clusterResource, FiCaSchedulerNode node, boolean needToUnreserve)
specifier|public
specifier|synchronized
name|CSAssignment
name|assignContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers: node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" #applications="
operator|+
name|activeApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if our queue cannot access this node, just return
if|if
condition|(
operator|!
name|SchedulerUtils
operator|.
name|checkQueueAccessToNode
argument_list|(
name|accessibleLabels
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|NULL_ASSIGNMENT
return|;
block|}
comment|// Check for reserved resources
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|reservedContainer
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|application
init|)
block|{
return|return
name|assignReservedContainer
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|reservedContainer
argument_list|,
name|clusterResource
argument_list|)
return|;
block|}
block|}
comment|// Try to assign containers to applications in order
for|for
control|(
name|FiCaSchedulerApp
name|application
range|:
name|activeApplications
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pre-assignContainers for application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|application
init|)
block|{
comment|// Check if this resource is on the blacklist
if|if
condition|(
name|SchedulerAppUtils
operator|.
name|isBlacklisted
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|LOG
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Schedule in priority order
for|for
control|(
name|Priority
name|priority
range|:
name|application
operator|.
name|getPriorities
argument_list|()
control|)
block|{
name|ResourceRequest
name|anyRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|anyRequest
condition|)
block|{
continue|continue;
block|}
comment|// Required resource
name|Resource
name|required
init|=
name|anyRequest
operator|.
name|getCapability
argument_list|()
decl_stmt|;
comment|// Do we need containers at this 'priority'?
if|if
condition|(
name|application
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|reservationsContinueLooking
condition|)
block|{
if|if
condition|(
operator|!
name|needContainers
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|required
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"doesn't need containers based on reservation algo!"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|requestedNodeLabels
init|=
name|getRequestLabelSetByExpression
argument_list|(
name|anyRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
comment|// Compute user-limit& set headroom
comment|// Note: We compute both user-limit& headroom with the highest
comment|//       priority request as the target.
comment|//       This works since we never assign lower priority requests
comment|//       before all higher priority ones are serviced.
name|Resource
name|userLimit
init|=
name|computeUserLimitAndSetHeadroom
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|required
argument_list|,
name|requestedNodeLabels
argument_list|)
decl_stmt|;
comment|// Check queue max-capacity limit
if|if
condition|(
operator|!
name|canAssignToThisQueue
argument_list|(
name|clusterResource
argument_list|,
name|required
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|,
name|application
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
name|NULL_ASSIGNMENT
return|;
block|}
comment|// Check user limit
if|if
condition|(
operator|!
name|assignToUser
argument_list|(
name|clusterResource
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|userLimit
argument_list|,
name|application
argument_list|,
literal|true
argument_list|,
name|requestedNodeLabels
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// Inform the application it is about to get a scheduling opportunity
name|application
operator|.
name|addSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
comment|// Try to schedule
name|CSAssignment
name|assignment
init|=
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|,
name|needToUnreserve
argument_list|)
decl_stmt|;
comment|// Did the application skip this node?
if|if
condition|(
name|assignment
operator|.
name|getSkipped
argument_list|()
condition|)
block|{
comment|// Don't count 'skipped nodes' as a scheduling opportunity!
name|application
operator|.
name|subtractSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Did we schedule or reserve a container?
name|Resource
name|assigned
init|=
name|assignment
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// Book-keeping
comment|// Note: Update headroom to account for current allocation too...
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|assigned
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't reset scheduling opportunities for non-local assignments
comment|// otherwise the app will be delayed for each non-local assignment.
comment|// This helps apps with many off-cluster requests schedule faster.
if|if
condition|(
name|assignment
operator|.
name|getType
argument_list|()
operator|!=
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resetting scheduling opportunities"
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
comment|// Done
return|return
name|assignment
return|;
block|}
else|else
block|{
comment|// Do not assign out of order w.r.t priorities
break|break;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"post-assignContainers for application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
block|}
return|return
name|NULL_ASSIGNMENT
return|;
block|}
specifier|private
specifier|synchronized
name|CSAssignment
DECL|method|assignReservedContainer (FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, Resource clusterResource)
name|assignReservedContainer
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
comment|// Do we still need this reservation?
name|Priority
name|priority
init|=
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Release
return|return
operator|new
name|CSAssignment
argument_list|(
name|application
argument_list|,
name|rmContainer
argument_list|)
return|;
block|}
comment|// Try to assign if we have sufficient resources
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Doesn't matter... since it's already charged for at time of reservation
comment|// "re-reservation" is *free*
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
return|;
block|}
DECL|method|getHeadroom (User user, Resource queueMaxCap, Resource clusterResource, FiCaSchedulerApp application, Resource required)
specifier|protected
name|Resource
name|getHeadroom
parameter_list|(
name|User
name|user
parameter_list|,
name|Resource
name|queueMaxCap
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
return|return
name|getHeadroom
argument_list|(
name|user
argument_list|,
name|queueMaxCap
argument_list|,
name|clusterResource
argument_list|,
name|computeUserLimit
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|required
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getHeadroom (User user, Resource queueMaxCap, Resource clusterResource, Resource userLimit)
specifier|private
name|Resource
name|getHeadroom
parameter_list|(
name|User
name|user
parameter_list|,
name|Resource
name|queueMaxCap
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|userLimit
parameter_list|)
block|{
comment|/**       * Headroom is:      *    min(      *        min(userLimit, queueMaxCap) - userConsumed,      *        queueMaxCap - queueUsedResources      *       )      *       * ( which can be expressed as,       *  min (userLimit - userConsumed, queuMaxCap - userConsumed,       *    queueMaxCap - queueUsedResources)      *  )      *      * given that queueUsedResources>= userConsumed, this simplifies to      *      *>> min (userlimit - userConsumed,   queueMaxCap - queueUsedResources)<<       *      */
name|Resource
name|headroom
init|=
name|Resources
operator|.
name|min
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|userLimit
argument_list|,
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
argument_list|)
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|queueMaxCap
argument_list|,
name|usedResources
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|headroom
return|;
block|}
DECL|method|canAssignToThisQueue (Resource clusterResource, Resource required, Set<String> nodeLabels, FiCaSchedulerApp application, boolean checkReservations)
specifier|synchronized
name|boolean
name|canAssignToThisQueue
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|required
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|boolean
name|checkReservations
parameter_list|)
block|{
comment|// Get label of this queue can access, it's (nodeLabel AND queueLabel)
name|Set
argument_list|<
name|String
argument_list|>
name|labelCanAccess
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|nodeLabels
operator|||
name|nodeLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|labelCanAccess
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|// Any queue can always access any node without label
name|labelCanAccess
operator|.
name|add
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|labelCanAccess
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Sets
operator|.
name|intersection
argument_list|(
name|accessibleLabels
argument_list|,
name|nodeLabels
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|canAssign
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labelCanAccess
control|)
block|{
if|if
condition|(
operator|!
name|usedResourcesByNodeLabels
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|usedResourcesByNodeLabels
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resource
name|potentialTotalCapacity
init|=
name|Resources
operator|.
name|add
argument_list|(
name|usedResourcesByNodeLabels
operator|.
name|get
argument_list|(
name|label
argument_list|)
argument_list|,
name|required
argument_list|)
decl_stmt|;
name|float
name|potentialNewCapacity
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|potentialTotalCapacity
argument_list|,
name|labelManager
operator|.
name|getResourceByLabel
argument_list|(
name|label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
decl_stmt|;
comment|// if enabled, check to see if could we potentially use this node instead
comment|// of a reserved node if the application has reserved containers
comment|// TODO, now only consider reservation cases when the node has no label
if|if
condition|(
name|this
operator|.
name|reservationsContinueLooking
operator|&&
name|checkReservations
operator|&&
name|label
operator|.
name|equals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
name|float
name|potentialNewWithoutReservedCapacity
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|potentialTotalCapacity
argument_list|,
name|application
operator|.
name|getCurrentReservation
argument_list|()
argument_list|)
argument_list|,
name|labelManager
operator|.
name|getResourceByLabel
argument_list|(
name|label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|potentialNewWithoutReservedCapacity
operator|<=
name|absoluteMaxCapacity
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"try to use reserved: "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" usedResources: "
operator|+
name|usedResources
operator|+
literal|" clusterResources: "
operator|+
name|clusterResource
operator|+
literal|" reservedResources: "
operator|+
name|application
operator|.
name|getCurrentReservation
argument_list|()
operator|+
literal|" currentCapacity "
operator|+
name|Resources
operator|.
name|divide
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|usedResources
argument_list|,
name|clusterResource
argument_list|)
operator|+
literal|" required "
operator|+
name|required
operator|+
literal|" potentialNewWithoutReservedCapacity: "
operator|+
name|potentialNewWithoutReservedCapacity
operator|+
literal|" ( "
operator|+
literal|" max-capacity: "
operator|+
name|absoluteMaxCapacity
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// we could potentially use this node instead of reserved node
return|return
literal|true
return|;
block|}
block|}
comment|// Otherwise, if any of the label of this node beyond queue limit, we
comment|// cannot allocate on this node. Consider a small epsilon here.
if|if
condition|(
name|potentialNewCapacity
operator|>
name|getAbsoluteMaximumCapacityByNodeLabel
argument_list|(
name|label
argument_list|)
operator|+
literal|1e-4
condition|)
block|{
name|canAssign
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|"Check assign to queue, label="
operator|+
name|label
operator|+
literal|" usedResources: "
operator|+
name|usedResourcesByNodeLabels
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|+
literal|" clusterResources: "
operator|+
name|clusterResource
operator|+
literal|" currentCapacity "
operator|+
name|Resources
operator|.
name|divide
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|usedResourcesByNodeLabels
operator|.
name|get
argument_list|(
name|label
argument_list|)
argument_list|,
name|labelManager
operator|.
name|getResourceByLabel
argument_list|(
name|label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
operator|+
literal|" potentialNewCapacity: "
operator|+
name|potentialNewCapacity
operator|+
literal|" ( "
operator|+
literal|" max-capacity: "
operator|+
name|absoluteMaxCapacity
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|canAssign
return|;
block|}
annotation|@
name|Lock
argument_list|(
block|{
name|LeafQueue
operator|.
name|class
block|,
name|FiCaSchedulerApp
operator|.
name|class
block|}
argument_list|)
DECL|method|computeUserLimitAndSetHeadroom (FiCaSchedulerApp application, Resource clusterResource, Resource required, Set<String> requestedLabels)
name|Resource
name|computeUserLimitAndSetHeadroom
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|required
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestedLabels
parameter_list|)
block|{
name|String
name|user
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|User
name|queueUser
init|=
name|getUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// Compute user limit respect requested labels,
comment|// TODO, need consider headroom respect labels also
name|Resource
name|userLimit
init|=
name|computeUserLimit
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|required
argument_list|,
name|queueUser
argument_list|,
name|requestedLabels
argument_list|)
decl_stmt|;
comment|//Max avail capacity needs to take into account usage by ancestor-siblings
comment|//which are greater than their base capacity, so we are interested in "max avail"
comment|//capacity
name|float
name|absoluteMaxAvailCapacity
init|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|Resource
name|queueMaxCap
init|=
comment|// Queue Max-Capacity
name|Resources
operator|.
name|multiplyAndNormalizeDown
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|absoluteMaxAvailCapacity
argument_list|,
name|minimumAllocation
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|queueHeadroomInfo
init|)
block|{
name|queueHeadroomInfo
operator|.
name|setQueueMaxCap
argument_list|(
name|queueMaxCap
argument_list|)
expr_stmt|;
name|queueHeadroomInfo
operator|.
name|setClusterResource
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
block|}
name|Resource
name|headroom
init|=
name|getHeadroom
argument_list|(
name|queueUser
argument_list|,
name|queueMaxCap
argument_list|,
name|clusterResource
argument_list|,
name|userLimit
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Headroom calculation for user "
operator|+
name|user
operator|+
literal|": "
operator|+
literal|" userLimit="
operator|+
name|userLimit
operator|+
literal|" queueMaxCap="
operator|+
name|queueMaxCap
operator|+
literal|" consumed="
operator|+
name|queueUser
operator|.
name|getTotalConsumedResources
argument_list|()
operator|+
literal|" headroom="
operator|+
name|headroom
argument_list|)
expr_stmt|;
block|}
name|CapacityHeadroomProvider
name|headroomProvider
init|=
operator|new
name|CapacityHeadroomProvider
argument_list|(
name|queueUser
argument_list|,
name|this
argument_list|,
name|application
argument_list|,
name|required
argument_list|,
name|queueHeadroomInfo
argument_list|)
decl_stmt|;
name|application
operator|.
name|setHeadroomProvider
argument_list|(
name|headroomProvider
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableResourcesToUser
argument_list|(
name|user
argument_list|,
name|headroom
argument_list|)
expr_stmt|;
return|return
name|userLimit
return|;
block|}
annotation|@
name|Lock
argument_list|(
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|computeUserLimit (FiCaSchedulerApp application, Resource clusterResource, Resource required, User user, Set<String> requestedLabels)
specifier|private
name|Resource
name|computeUserLimit
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|required
parameter_list|,
name|User
name|user
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestedLabels
parameter_list|)
block|{
comment|// What is our current capacity?
comment|// * It is equal to the max(required, queue-capacity) if
comment|//   we're running below capacity. The 'max' ensures that jobs in queues
comment|//   with miniscule capacity (< 1 slot) make progress
comment|// * If we're running over capacity, then its
comment|//   (usedResources + required) (which extra resources we are allocating)
name|Resource
name|queueCapacity
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestedLabels
operator|!=
literal|null
operator|&&
operator|!
name|requestedLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if we have multiple labels to request, we will choose to use the first
comment|// label
name|String
name|firstLabel
init|=
name|requestedLabels
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|queueCapacity
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|queueCapacity
argument_list|,
name|Resources
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|resourceCalculator
argument_list|,
name|labelManager
operator|.
name|getResourceByLabel
argument_list|(
name|firstLabel
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|getAbsoluteCapacityByNodeLabel
argument_list|(
name|firstLabel
argument_list|)
argument_list|,
name|minimumAllocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// else there's no label on request, just to use absolute capacity as
comment|// capacity for nodes without label
name|queueCapacity
operator|=
name|Resources
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|resourceCalculator
argument_list|,
name|labelManager
operator|.
name|getResourceByLabel
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|absoluteCapacity
argument_list|,
name|minimumAllocation
argument_list|)
expr_stmt|;
block|}
comment|// Allow progress for queues with miniscule capacity
name|queueCapacity
operator|=
name|Resources
operator|.
name|max
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|queueCapacity
argument_list|,
name|required
argument_list|)
expr_stmt|;
name|Resource
name|currentCapacity
init|=
name|Resources
operator|.
name|lessThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|usedResources
argument_list|,
name|queueCapacity
argument_list|)
condition|?
name|queueCapacity
else|:
name|Resources
operator|.
name|add
argument_list|(
name|usedResources
argument_list|,
name|required
argument_list|)
decl_stmt|;
comment|// Never allow a single user to take more than the
comment|// queue's configured capacity * user-limit-factor.
comment|// Also, the queue's configured capacity should be higher than
comment|// queue-hard-limit * ulMin
specifier|final
name|int
name|activeUsers
init|=
name|activeUsersManager
operator|.
name|getNumActiveUsers
argument_list|()
decl_stmt|;
name|Resource
name|limit
init|=
name|Resources
operator|.
name|roundUp
argument_list|(
name|resourceCalculator
argument_list|,
name|Resources
operator|.
name|min
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|max
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|divideAndCeil
argument_list|(
name|resourceCalculator
argument_list|,
name|currentCapacity
argument_list|,
name|activeUsers
argument_list|)
argument_list|,
name|Resources
operator|.
name|divideAndCeil
argument_list|(
name|resourceCalculator
argument_list|,
name|Resources
operator|.
name|multiplyAndRoundDown
argument_list|(
name|currentCapacity
argument_list|,
name|userLimit
argument_list|)
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiplyAndRoundDown
argument_list|(
name|queueCapacity
argument_list|,
name|userLimitFactor
argument_list|)
argument_list|)
argument_list|,
name|minimumAllocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"User limit computation for "
operator|+
name|userName
operator|+
literal|" in queue "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" userLimit="
operator|+
name|userLimit
operator|+
literal|" userLimitFactor="
operator|+
name|userLimitFactor
operator|+
literal|" required: "
operator|+
name|required
operator|+
literal|" consumed: "
operator|+
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
operator|+
literal|" limit: "
operator|+
name|limit
operator|+
literal|" queueCapacity: "
operator|+
name|queueCapacity
operator|+
literal|" qconsumed: "
operator|+
name|usedResources
operator|+
literal|" currentCapacity: "
operator|+
name|currentCapacity
operator|+
literal|" activeUsers: "
operator|+
name|activeUsers
operator|+
literal|" clusterCapacity: "
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
return|return
name|limit
return|;
block|}
annotation|@
name|Private
DECL|method|assignToUser (Resource clusterResource, String userName, Resource limit, FiCaSchedulerApp application, boolean checkReservations, Set<String> requestLabels)
specifier|protected
specifier|synchronized
name|boolean
name|assignToUser
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|String
name|userName
parameter_list|,
name|Resource
name|limit
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|boolean
name|checkReservations
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestLabels
parameter_list|)
block|{
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
decl_stmt|;
if|if
condition|(
name|requestLabels
operator|!=
literal|null
operator|&&
operator|!
name|requestLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|label
operator|=
name|requestLabels
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// Note: We aren't considering the current request since there is a fixed
comment|// overhead of the AM, but it's a> check, not a>= check, so...
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|user
operator|.
name|getConsumedResourceByLabel
argument_list|(
name|label
argument_list|)
argument_list|,
name|limit
argument_list|)
condition|)
block|{
comment|// if enabled, check to see if could we potentially use this node instead
comment|// of a reserved node if the application has reserved containers
if|if
condition|(
name|this
operator|.
name|reservationsContinueLooking
operator|&&
name|checkReservations
condition|)
block|{
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
argument_list|,
name|application
operator|.
name|getCurrentReservation
argument_list|()
argument_list|)
argument_list|,
name|limit
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" in queue "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" will exceed limit based on reservations - "
operator|+
literal|" consumed: "
operator|+
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
operator|+
literal|" reserved: "
operator|+
name|application
operator|.
name|getCurrentReservation
argument_list|()
operator|+
literal|" limit: "
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" in queue "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" will exceed limit - "
operator|+
literal|" consumed: "
operator|+
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
operator|+
literal|" limit: "
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|needContainers (FiCaSchedulerApp application, Priority priority, Resource required)
name|boolean
name|needContainers
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
name|int
name|requiredContainers
init|=
name|application
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|int
name|reservedContainers
init|=
name|application
operator|.
name|getNumReservedContainers
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|int
name|starvation
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|>
literal|0
condition|)
block|{
name|float
name|nodeFactor
init|=
name|Resources
operator|.
name|ratio
argument_list|(
name|resourceCalculator
argument_list|,
name|required
argument_list|,
name|getMaximumAllocation
argument_list|()
argument_list|)
decl_stmt|;
comment|// Use percentage of node required to bias against large containers...
comment|// Protect against corner case where you need the whole node with
comment|// Math.min(nodeFactor, minimumAllocationFactor)
name|starvation
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|application
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
operator|/
operator|(
name|float
operator|)
name|reservedContainers
operator|)
operator|*
operator|(
literal|1.0f
operator|-
operator|(
name|Math
operator|.
name|min
argument_list|(
name|nodeFactor
argument_list|,
name|getMinimumAllocationFactor
argument_list|()
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"needsContainers:"
operator|+
literal|" app.#re-reserve="
operator|+
name|application
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
operator|+
literal|" reserved="
operator|+
name|reservedContainers
operator|+
literal|" nodeFactor="
operator|+
name|nodeFactor
operator|+
literal|" minAllocFactor="
operator|+
name|getMinimumAllocationFactor
argument_list|()
operator|+
literal|" starvation="
operator|+
name|starvation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|(
operator|(
name|starvation
operator|+
name|requiredContainers
operator|)
operator|-
name|reservedContainers
operator|)
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|assignContainersOnNode (Resource clusterResource, FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, RMContainer reservedContainer, boolean needToUnreserve)
specifier|private
name|CSAssignment
name|assignContainersOnNode
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
name|Resource
name|assigned
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
comment|// Data-local
name|ResourceRequest
name|nodeLocalResourceRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalResourceRequest
operator|!=
literal|null
condition|)
block|{
name|assigned
operator|=
name|assignNodeLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|nodeLocalResourceRequest
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|,
name|needToUnreserve
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|CSAssignment
argument_list|(
name|assigned
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
return|;
block|}
block|}
comment|// Rack-local
name|ResourceRequest
name|rackLocalResourceRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalResourceRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|rackLocalResourceRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
name|assigned
operator|=
name|assignRackLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|rackLocalResourceRequest
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|,
name|needToUnreserve
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|CSAssignment
argument_list|(
name|assigned
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
return|;
block|}
block|}
comment|// Off-switch
name|ResourceRequest
name|offSwitchResourceRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|offSwitchResourceRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|offSwitchResourceRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|assignOffSwitchContainers
argument_list|(
name|clusterResource
argument_list|,
name|offSwitchResourceRequest
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|,
name|needToUnreserve
argument_list|)
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
return|;
block|}
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
annotation|@
name|Private
DECL|method|findNodeToUnreserve (Resource clusterResource, FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, Resource capability)
specifier|protected
name|boolean
name|findNodeToUnreserve
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Resource
name|capability
parameter_list|)
block|{
comment|// need to unreserve some other container first
name|NodeId
name|idToUnreserve
init|=
name|application
operator|.
name|getNodeIdToUnreserve
argument_list|(
name|priority
argument_list|,
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|idToUnreserve
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checked to see if could unreserve for app but nothing "
operator|+
literal|"reserved that matches for this app"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|FiCaSchedulerNode
name|nodeToUnreserve
init|=
name|scheduler
operator|.
name|getNode
argument_list|(
name|idToUnreserve
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeToUnreserve
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"node to unreserve doesn't exist, nodeid: "
operator|+
name|idToUnreserve
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unreserving for app: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" on nodeId: "
operator|+
name|idToUnreserve
operator|+
literal|" in order to replace reserved application and place it on node: "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" needing: "
operator|+
name|capability
argument_list|)
expr_stmt|;
block|}
comment|// headroom
name|Resources
operator|.
name|addTo
argument_list|(
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|,
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getReservedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure to not have completedContainers sort the queues here since
comment|// we are already inside an iterator loop for the queues and this would
comment|// cause an concurrent modification exception.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|nodeToUnreserve
argument_list|,
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|UNRESERVED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Private
DECL|method|checkLimitsToReserve (Resource clusterResource, FiCaSchedulerApp application, Resource capability, boolean needToUnreserve)
specifier|protected
name|boolean
name|checkLimitsToReserve
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
if|if
condition|(
name|needToUnreserve
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"we needed to unreserve to be able to allocate"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// we can't reserve if we got here based on the limit
comment|// checks assuming we could unreserve!!!
name|Resource
name|userLimit
init|=
name|computeUserLimitAndSetHeadroom
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|capability
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Check queue max-capacity limit,
comment|// TODO: Consider reservation on labels
if|if
condition|(
operator|!
name|canAssignToThisQueue
argument_list|(
name|clusterResource
argument_list|,
name|capability
argument_list|,
literal|null
argument_list|,
name|application
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"was going to reserve but hit queue limit"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Check user limit
if|if
condition|(
operator|!
name|assignToUser
argument_list|(
name|clusterResource
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|userLimit
argument_list|,
name|application
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"was going to reserve but hit user limit"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assignNodeLocalContainers (Resource clusterResource, ResourceRequest nodeLocalResourceRequest, FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, RMContainer reservedContainer, boolean needToUnreserve)
specifier|private
name|Resource
name|assignNodeLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceRequest
name|nodeLocalResourceRequest
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|nodeLocalResourceRequest
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|,
name|needToUnreserve
argument_list|)
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|assignRackLocalContainers ( Resource clusterResource, ResourceRequest rackLocalResourceRequest, FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, RMContainer reservedContainer, boolean needToUnreserve)
specifier|private
name|Resource
name|assignRackLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceRequest
name|rackLocalResourceRequest
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|rackLocalResourceRequest
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|,
name|needToUnreserve
argument_list|)
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|assignOffSwitchContainers ( Resource clusterResource, ResourceRequest offSwitchResourceRequest, FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, RMContainer reservedContainer, boolean needToUnreserve)
specifier|private
name|Resource
name|assignOffSwitchContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceRequest
name|offSwitchResourceRequest
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|offSwitchResourceRequest
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|,
name|needToUnreserve
argument_list|)
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|canAssign (FiCaSchedulerApp application, Priority priority, FiCaSchedulerNode node, NodeType type, RMContainer reservedContainer)
name|boolean
name|canAssign
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
comment|// Clearly we need containers for this application...
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// 'Delay' off-switch
name|ResourceRequest
name|offSwitchRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|long
name|missedOpportunities
init|=
name|application
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|long
name|requiredContainers
init|=
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|float
name|localityWaitFactor
init|=
name|application
operator|.
name|getLocalityWaitFactor
argument_list|(
name|priority
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|requiredContainers
operator|*
name|localityWaitFactor
operator|)
operator|<
name|missedOpportunities
operator|)
return|;
block|}
comment|// Check if we need containers on this rack
name|ResourceRequest
name|rackLocalRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalRequest
operator|==
literal|null
operator|||
name|rackLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If we are here, we do need containers on this rack for RACK_LOCAL req
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
comment|// 'Delay' rack-local just a little bit...
name|long
name|missedOpportunities
init|=
name|application
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
decl_stmt|;
return|return
operator|(
name|Math
operator|.
name|min
argument_list|(
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|,
name|getNodeLocalityDelay
argument_list|()
argument_list|)
operator|<
name|missedOpportunities
operator|)
return|;
block|}
comment|// Check if we need containers on this host
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
comment|// Now check if we need containers on this host...
name|ResourceRequest
name|nodeLocalRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalRequest
operator|!=
literal|null
condition|)
block|{
return|return
name|nodeLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getContainer (RMContainer rmContainer, FiCaSchedulerApp application, FiCaSchedulerNode node, Resource capability, Priority priority)
specifier|private
name|Container
name|getContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
return|return
operator|(
name|rmContainer
operator|!=
literal|null
operator|)
condition|?
name|rmContainer
operator|.
name|getContainer
argument_list|()
else|:
name|createContainer
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|createContainer (FiCaSchedulerApp application, FiCaSchedulerNode node, Resource capability, Priority priority)
name|Container
name|createContainer
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|application
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the container
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
DECL|method|assignContainer (Resource clusterResource, FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, ResourceRequest request, NodeType type, RMContainer rmContainer, boolean needToUnreserve)
specifier|private
name|Resource
name|assignContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|boolean
name|needToUnreserve
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers: node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" request="
operator|+
name|request
operator|+
literal|" type="
operator|+
name|type
operator|+
literal|" needToUnreserve= "
operator|+
name|needToUnreserve
argument_list|)
expr_stmt|;
block|}
comment|// check if the resource request can access the label
if|if
condition|(
operator|!
name|SchedulerUtils
operator|.
name|checkNodeLabelExpression
argument_list|(
name|node
operator|.
name|getLabels
argument_list|()
argument_list|,
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
condition|)
block|{
comment|// this is a reserved container, but we cannot allocate it now according
comment|// to label not match. This can be caused by node label changed
comment|// We should un-reserve this container.
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|unreserve
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
name|Resource
name|capability
init|=
name|request
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|Resource
name|available
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
decl_stmt|;
name|Resource
name|totalResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|capability
argument_list|,
name|totalResource
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node : "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" does not have sufficient resource for request : "
operator|+
name|request
operator|+
literal|" node total capability : "
operator|+
name|node
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
assert|assert
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|available
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
assert|;
comment|// Create the container if necessary
name|Container
name|container
init|=
name|getContainer
argument_list|(
name|rmContainer
argument_list|,
name|application
argument_list|,
name|node
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|)
decl_stmt|;
comment|// something went wrong getting/creating the container
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get container for allocation!"
argument_list|)
expr_stmt|;
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|// default to true since if reservation continue look feature isn't on
comment|// needContainers is checked earlier and we wouldn't have gotten this far
name|boolean
name|canAllocContainer
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|reservationsContinueLooking
condition|)
block|{
comment|// based on reservations can we allocate/reserve more or do we need
comment|// to unreserve one first
name|canAllocContainer
operator|=
name|needContainers
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|capability
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"can alloc container is: "
operator|+
name|canAllocContainer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Can we allocate a container on this node?
name|int
name|availableContainers
init|=
name|resourceCalculator
operator|.
name|computeAvailableContainers
argument_list|(
name|available
argument_list|,
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableContainers
operator|>
literal|0
condition|)
block|{
comment|// Allocate...
comment|// Did we previously reserve containers at this 'priority'?
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|unreserve
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|reservationsContinueLooking
operator|&&
operator|(
operator|!
name|canAllocContainer
operator|||
name|needToUnreserve
operator|)
condition|)
block|{
comment|// need to unreserve some other container first
name|boolean
name|res
init|=
name|findNodeToUnreserve
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|// we got here by possibly ignoring queue capacity limits. If the
comment|// parameter needToUnreserve is true it means we ignored one of those
comment|// limits in the chance we could unreserve. If we are here we aren't
comment|// trying to unreserve so we can't allocate anymore due to that parent
comment|// limit.
if|if
condition|(
name|needToUnreserve
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"we needed to unreserve to be able to allocate, skipping"
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
block|}
comment|// Inform the application
name|RMContainer
name|allocatedContainer
init|=
name|application
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
comment|// Does the application need this resource?
if|if
condition|(
name|allocatedContainer
operator|==
literal|null
condition|)
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|// Inform the node
name|node
operator|.
name|allocateContainer
argument_list|(
name|allocatedContainer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"assignedContainer"
operator|+
literal|" application attempt="
operator|+
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" container="
operator|+
name|container
operator|+
literal|" queue="
operator|+
name|this
operator|+
literal|" clusterResource="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
comment|// if we are allowed to allocate but this node doesn't have space, reserve it or
comment|// if this was an already a reserved container, reserve it again
if|if
condition|(
operator|(
name|canAllocContainer
operator|)
operator|||
operator|(
name|rmContainer
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|reservationsContinueLooking
condition|)
block|{
comment|// we got here by possibly ignoring parent queue capacity limits. If
comment|// the parameter needToUnreserve is true it means we ignored one of
comment|// those limits in the chance we could unreserve. If we are here
comment|// we aren't trying to unreserve so we can't allocate
comment|// anymore due to that parent limit
name|boolean
name|res
init|=
name|checkLimitsToReserve
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|capability
argument_list|,
name|needToUnreserve
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
block|}
comment|// Reserve by 'charging' in advance...
name|reserve
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reserved container "
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" resource="
operator|+
name|request
operator|.
name|getCapability
argument_list|()
operator|+
literal|" queue="
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" usedCapacity="
operator|+
name|getUsedCapacity
argument_list|()
operator|+
literal|" absoluteUsedCapacity="
operator|+
name|getAbsoluteUsedCapacity
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|getCapability
argument_list|()
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
block|}
DECL|method|reserve (FiCaSchedulerApp application, Priority priority, FiCaSchedulerNode node, RMContainer rmContainer, Container container)
specifier|private
name|void
name|reserve
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Update reserved metrics if this is the first reservation
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|getMetrics
argument_list|()
operator|.
name|reserveResource
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Inform the application
name|rmContainer
operator|=
name|application
operator|.
name|reserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
comment|// Update the node
name|node
operator|.
name|reserveResource
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
DECL|method|unreserve (FiCaSchedulerApp application, Priority priority, FiCaSchedulerNode node, RMContainer rmContainer)
specifier|private
name|boolean
name|unreserve
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
comment|// Done with the reservation?
if|if
condition|(
name|application
operator|.
name|unreserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|)
condition|)
block|{
name|node
operator|.
name|unreserveResource
argument_list|(
name|application
argument_list|)
expr_stmt|;
comment|// Update reserved metrics
name|getMetrics
argument_list|()
operator|.
name|unreserveResource
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|completedContainer (Resource clusterResource, FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue, boolean sortQueues)
specifier|public
name|void
name|completedContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|,
name|CSQueue
name|childQueue
parameter_list|,
name|boolean
name|sortQueues
parameter_list|)
block|{
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// Inform the application& the node
comment|// Note: It's safe to assume that all state changes to RMContainer
comment|// happen under scheduler's lock...
comment|// So, this is, in effect, a transaction across application& node
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RESERVED
condition|)
block|{
name|removed
operator|=
name|unreserve
argument_list|(
name|application
argument_list|,
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removed
operator|=
name|application
operator|.
name|containerCompleted
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|node
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|// Book-keeping
if|if
condition|(
name|removed
condition|)
block|{
name|releaseResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"completedContainer"
operator|+
literal|" container="
operator|+
name|container
operator|+
literal|" queue="
operator|+
name|this
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removed
condition|)
block|{
comment|// Inform the parent queue _outside_ of the leaf-queue lock
name|getParent
argument_list|()
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|event
argument_list|,
name|this
argument_list|,
name|sortQueues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|allocateResource (Resource clusterResource, SchedulerApplicationAttempt application, Resource resource, Set<String> nodeLabels)
specifier|synchronized
name|void
name|allocateResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApplicationAttempt
name|application
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
parameter_list|)
block|{
name|super
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|resource
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
comment|// Update user metrics
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|user
operator|.
name|assignContainer
argument_list|(
name|resource
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
comment|// Note this is a bit unconventional since it gets the object and modifies
comment|// it here, rather then using set routine
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// headroom
name|metrics
operator|.
name|setAvailableResourcesToUser
argument_list|(
name|userName
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|" user="
operator|+
name|userName
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" numContainers="
operator|+
name|numContainers
operator|+
literal|" headroom = "
operator|+
name|application
operator|.
name|getHeadroom
argument_list|()
operator|+
literal|" user-resources="
operator|+
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|releaseResource (Resource clusterResource, FiCaSchedulerApp application, Resource resource, Set<String> nodeLabels)
specifier|synchronized
name|void
name|releaseResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
parameter_list|)
block|{
name|super
operator|.
name|releaseResource
argument_list|(
name|clusterResource
argument_list|,
name|resource
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
comment|// Update user metrics
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|user
operator|.
name|releaseContainer
argument_list|(
name|resource
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableResourcesToUser
argument_list|(
name|userName
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" numContainers="
operator|+
name|numContainers
operator|+
literal|" user="
operator|+
name|userName
operator|+
literal|" user-resources="
operator|+
name|user
operator|.
name|getTotalConsumedResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateClusterResource (Resource clusterResource)
specifier|public
specifier|synchronized
name|void
name|updateClusterResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
name|lastClusterResource
operator|=
name|clusterResource
expr_stmt|;
comment|// Update queue properties
name|maxActiveApplications
operator|=
name|CSQueueUtils
operator|.
name|computeMaxActiveApplications
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|minimumAllocation
argument_list|,
name|maxAMResourcePerQueuePercent
argument_list|,
name|absoluteMaxCapacity
argument_list|)
expr_stmt|;
name|maxActiveAppsUsingAbsCap
operator|=
name|CSQueueUtils
operator|.
name|computeMaxActiveApplications
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|minimumAllocation
argument_list|,
name|maxAMResourcePerQueuePercent
argument_list|,
name|absoluteCapacity
argument_list|)
expr_stmt|;
name|maxActiveApplicationsPerUser
operator|=
name|CSQueueUtils
operator|.
name|computeMaxActiveApplicationsPerUser
argument_list|(
name|maxActiveAppsUsingAbsCap
argument_list|,
name|userLimit
argument_list|,
name|userLimitFactor
argument_list|)
expr_stmt|;
comment|// Update metrics
name|CSQueueUtils
operator|.
name|updateQueueStatistics
argument_list|(
name|resourceCalculator
argument_list|,
name|this
argument_list|,
name|getParent
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|minimumAllocation
argument_list|)
expr_stmt|;
comment|// queue metrics are updated, more resource may be available
comment|// activate the pending applications if possible
name|activateApplications
argument_list|()
expr_stmt|;
comment|// Update application properties
for|for
control|(
name|FiCaSchedulerApp
name|application
range|:
name|activeApplications
control|)
block|{
synchronized|synchronized
init|(
name|application
init|)
block|{
name|computeUserLimitAndSetHeadroom
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
DECL|field|consumed
name|Resource
name|consumed
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|consumedByLabel
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|consumedByLabel
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|pendingApplications
name|int
name|pendingApplications
init|=
literal|0
decl_stmt|;
DECL|field|activeApplications
name|int
name|activeApplications
init|=
literal|0
decl_stmt|;
DECL|method|getTotalConsumedResources ()
specifier|public
name|Resource
name|getTotalConsumedResources
parameter_list|()
block|{
return|return
name|consumed
return|;
block|}
DECL|method|getConsumedResourceByLabel (String label)
specifier|public
name|Resource
name|getConsumedResourceByLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|Resource
name|r
init|=
name|consumedByLabel
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|r
condition|)
block|{
return|return
name|r
return|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|getPendingApplications ()
specifier|public
name|int
name|getPendingApplications
parameter_list|()
block|{
return|return
name|pendingApplications
return|;
block|}
DECL|method|getActiveApplications ()
specifier|public
name|int
name|getActiveApplications
parameter_list|()
block|{
return|return
name|activeApplications
return|;
block|}
DECL|method|getTotalApplications ()
specifier|public
name|int
name|getTotalApplications
parameter_list|()
block|{
return|return
name|getPendingApplications
argument_list|()
operator|+
name|getActiveApplications
argument_list|()
return|;
block|}
DECL|method|submitApplication ()
specifier|public
specifier|synchronized
name|void
name|submitApplication
parameter_list|()
block|{
operator|++
name|pendingApplications
expr_stmt|;
block|}
DECL|method|activateApplication ()
specifier|public
specifier|synchronized
name|void
name|activateApplication
parameter_list|()
block|{
operator|--
name|pendingApplications
expr_stmt|;
operator|++
name|activeApplications
expr_stmt|;
block|}
DECL|method|finishApplication (boolean wasActive)
specifier|public
specifier|synchronized
name|void
name|finishApplication
parameter_list|(
name|boolean
name|wasActive
parameter_list|)
block|{
if|if
condition|(
name|wasActive
condition|)
block|{
operator|--
name|activeApplications
expr_stmt|;
block|}
else|else
block|{
operator|--
name|pendingApplications
expr_stmt|;
block|}
block|}
DECL|method|assignContainer (Resource resource, Set<String> nodeLabels)
specifier|public
specifier|synchronized
name|void
name|assignContainer
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
parameter_list|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|consumed
argument_list|,
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeLabels
operator|==
literal|null
operator|||
name|nodeLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|consumedByLabel
operator|.
name|containsKey
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
name|consumedByLabel
operator|.
name|put
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|consumedByLabel
operator|.
name|get
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|label
range|:
name|nodeLabels
control|)
block|{
if|if
condition|(
operator|!
name|consumedByLabel
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|consumedByLabel
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|addTo
argument_list|(
name|consumedByLabel
operator|.
name|get
argument_list|(
name|label
argument_list|)
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|releaseContainer (Resource resource, Set<String> nodeLabels)
specifier|public
specifier|synchronized
name|void
name|releaseContainer
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
parameter_list|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|consumed
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// Update usedResources by labels
if|if
condition|(
name|nodeLabels
operator|==
literal|null
operator|||
name|nodeLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|consumedByLabel
operator|.
name|containsKey
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
name|consumedByLabel
operator|.
name|put
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|consumedByLabel
operator|.
name|get
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|label
range|:
name|nodeLabels
control|)
block|{
if|if
condition|(
operator|!
name|consumedByLabel
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|consumedByLabel
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|consumedByLabel
operator|.
name|get
argument_list|(
name|label
argument_list|)
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|recoverContainer (Resource clusterResource, SchedulerApplicationAttempt attempt, RMContainer rmContainer)
specifier|public
name|void
name|recoverContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApplicationAttempt
name|attempt
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|scheduler
operator|.
name|getNode
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|attempt
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getParent
argument_list|()
operator|.
name|recoverContainer
argument_list|(
name|clusterResource
argument_list|,
name|attempt
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtain (read-only) collection of active applications.    */
DECL|method|getApplications ()
specifier|public
name|Set
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|getApplications
parameter_list|()
block|{
comment|// need to access the list of apps from the preemption monitor
return|return
name|activeApplications
return|;
block|}
comment|// return a single Resource capturing the overal amount of pending resources
DECL|method|getTotalResourcePending ()
specifier|public
name|Resource
name|getTotalResourcePending
parameter_list|()
block|{
name|Resource
name|ret
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|FiCaSchedulerApp
name|f
range|:
name|activeApplications
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|ret
argument_list|,
name|f
operator|.
name|getTotalPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|collectSchedulerApplications ( Collection<ApplicationAttemptId> apps)
specifier|public
name|void
name|collectSchedulerApplications
parameter_list|(
name|Collection
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
parameter_list|)
block|{
for|for
control|(
name|FiCaSchedulerApp
name|pendingApp
range|:
name|pendingApplications
control|)
block|{
name|apps
operator|.
name|add
argument_list|(
name|pendingApp
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
name|activeApplications
control|)
block|{
name|apps
operator|.
name|add
argument_list|(
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|attachContainer (Resource clusterResource, FiCaSchedulerApp application, RMContainer rmContainer)
specifier|public
name|void
name|attachContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|scheduler
operator|.
name|getNode
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"movedContainer"
operator|+
literal|" container="
operator|+
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|+
literal|" resource="
operator|+
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|+
literal|" queueMoveIn="
operator|+
name|this
operator|+
literal|" usedCapacity="
operator|+
name|getUsedCapacity
argument_list|()
operator|+
literal|" absoluteUsedCapacity="
operator|+
name|getAbsoluteUsedCapacity
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Inform the parent queue
name|getParent
argument_list|()
operator|.
name|attachContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|detachContainer (Resource clusterResource, FiCaSchedulerApp application, RMContainer rmContainer)
specifier|public
name|void
name|detachContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerApp
name|application
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
name|FiCaSchedulerNode
name|node
init|=
name|scheduler
operator|.
name|getNode
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|releaseResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"movedContainer"
operator|+
literal|" container="
operator|+
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|+
literal|" resource="
operator|+
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|+
literal|" queueMoveOut="
operator|+
name|this
operator|+
literal|" usedCapacity="
operator|+
name|getUsedCapacity
argument_list|()
operator|+
literal|" absoluteUsedCapacity="
operator|+
name|getAbsoluteUsedCapacity
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Inform the parent queue
name|getParent
argument_list|()
operator|.
name|detachContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAbsActualCapacity ()
specifier|public
name|float
name|getAbsActualCapacity
parameter_list|()
block|{
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|lastClusterResource
argument_list|,
name|lastClusterResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|absoluteCapacity
return|;
block|}
name|Resource
name|resourceRespectLabels
init|=
name|labelManager
operator|==
literal|null
condition|?
name|lastClusterResource
else|:
name|labelManager
operator|.
name|getQueueResource
argument_list|(
name|queueName
argument_list|,
name|accessibleLabels
argument_list|,
name|lastClusterResource
argument_list|)
decl_stmt|;
name|float
name|absActualCapacity
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|resourceCalculator
argument_list|,
name|lastClusterResource
argument_list|,
name|resourceRespectLabels
argument_list|,
name|lastClusterResource
argument_list|)
decl_stmt|;
return|return
name|absActualCapacity
operator|>
name|absoluteCapacity
condition|?
name|absoluteCapacity
else|:
name|absActualCapacity
return|;
block|}
DECL|method|setCapacity (float capacity)
specifier|public
name|void
name|setCapacity
parameter_list|(
name|float
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
DECL|method|setAbsoluteCapacity (float absoluteCapacity)
specifier|public
name|void
name|setAbsoluteCapacity
parameter_list|(
name|float
name|absoluteCapacity
parameter_list|)
block|{
name|this
operator|.
name|absoluteCapacity
operator|=
name|absoluteCapacity
expr_stmt|;
block|}
DECL|method|setMaxApplications (int maxApplications)
specifier|public
name|void
name|setMaxApplications
parameter_list|(
name|int
name|maxApplications
parameter_list|)
block|{
name|this
operator|.
name|maxApplications
operator|=
name|maxApplications
expr_stmt|;
block|}
comment|/*    * Holds shared values used by all applications in    * the queue to calculate headroom on demand    */
DECL|class|QueueHeadroomInfo
specifier|static
class|class
name|QueueHeadroomInfo
block|{
DECL|field|queueMaxCap
specifier|private
name|Resource
name|queueMaxCap
decl_stmt|;
DECL|field|clusterResource
specifier|private
name|Resource
name|clusterResource
decl_stmt|;
DECL|method|setQueueMaxCap (Resource queueMaxCap)
specifier|public
name|void
name|setQueueMaxCap
parameter_list|(
name|Resource
name|queueMaxCap
parameter_list|)
block|{
name|this
operator|.
name|queueMaxCap
operator|=
name|queueMaxCap
expr_stmt|;
block|}
DECL|method|getQueueMaxCap ()
specifier|public
name|Resource
name|getQueueMaxCap
parameter_list|()
block|{
return|return
name|queueMaxCap
return|;
block|}
DECL|method|setClusterResource (Resource clusterResource)
specifier|public
name|void
name|setClusterResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
name|this
operator|.
name|clusterResource
operator|=
name|clusterResource
expr_stmt|;
block|}
DECL|method|getClusterResource ()
specifier|public
name|Resource
name|getClusterResource
parameter_list|()
block|{
return|return
name|clusterResource
return|;
block|}
block|}
block|}
end_class

end_unit

