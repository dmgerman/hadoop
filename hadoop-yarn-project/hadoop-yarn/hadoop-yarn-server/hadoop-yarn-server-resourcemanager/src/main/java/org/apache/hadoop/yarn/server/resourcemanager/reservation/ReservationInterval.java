begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_comment
comment|/**  * This represents the time duration of the reservation  *   */
end_comment

begin_class
DECL|class|ReservationInterval
specifier|public
class|class
name|ReservationInterval
implements|implements
name|Comparable
argument_list|<
name|ReservationInterval
argument_list|>
block|{
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
specifier|final
name|long
name|endTime
decl_stmt|;
DECL|method|ReservationInterval (long startTime, long endTime)
specifier|public
name|ReservationInterval
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
comment|/**    * Get the start time of the reservation interval    *     * @return the startTime    */
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**    * Get the end time of the reservation interval    *     * @return the endTime    */
DECL|method|getEndTime ()
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
comment|/**    * Returns whether the interval is active at the specified instant of time    *     * @param tick the instance of the time to check    * @return true if active, false otherwise    */
DECL|method|isOverlap (long tick)
specifier|public
name|boolean
name|isOverlap
parameter_list|(
name|long
name|tick
parameter_list|)
block|{
return|return
operator|(
name|startTime
operator|<=
name|tick
operator|&&
name|tick
operator|<=
name|endTime
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ReservationInterval anotherInterval)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReservationInterval
name|anotherInterval
parameter_list|)
block|{
name|long
name|diff
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|startTime
operator|==
name|anotherInterval
operator|.
name|getStartTime
argument_list|()
condition|)
block|{
name|diff
operator|=
name|endTime
operator|-
name|anotherInterval
operator|.
name|getEndTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|diff
operator|=
name|startTime
operator|-
name|anotherInterval
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|endTime
operator|^
operator|(
name|endTime
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|startTime
operator|^
operator|(
name|startTime
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ReservationInterval
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReservationInterval
name|other
init|=
operator|(
name|ReservationInterval
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|endTime
operator|!=
name|other
operator|.
name|endTime
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|startTime
operator|!=
name|other
operator|.
name|startTime
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|startTime
operator|+
literal|", "
operator|+
name|endTime
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

