begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|DefaultPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FSPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PrimaryGroupPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|RejectPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|SecondaryGroupExistingPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|SpecifiedPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserPlacementRule
import|;
end_import

begin_class
DECL|class|QueuePlacementConverter
class|class
name|QueuePlacementConverter
block|{
DECL|field|USER
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"%user"
decl_stmt|;
DECL|field|PRIMARY_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|PRIMARY_GROUP
init|=
literal|"%primary_group"
decl_stmt|;
DECL|field|SECONDARY_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|SECONDARY_GROUP
init|=
literal|"%secondary_group"
decl_stmt|;
DECL|method|convertPlacementPolicy (PlacementManager placementManager, FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertPlacementPolicy
parameter_list|(
name|PlacementManager
name|placementManager
parameter_list|,
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
parameter_list|,
name|boolean
name|userAsDefaultQueue
parameter_list|)
block|{
name|StringBuilder
name|mapping
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|userAsDefaultQueue
condition|)
block|{
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
operator|+
name|USER
argument_list|)
expr_stmt|;
block|}
name|int
name|ruleCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PlacementRule
name|rule
range|:
name|placementManager
operator|.
name|getPlacementRules
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|FSPlacementRule
operator|)
name|rule
operator|)
operator|.
name|getCreateFlag
argument_list|()
condition|)
block|{
name|ruleHandler
operator|.
name|handleQueueAutoCreate
argument_list|(
name|rule
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ruleCount
operator|++
expr_stmt|;
if|if
condition|(
name|rule
operator|instanceof
name|UserPlacementRule
condition|)
block|{
name|UserPlacementRule
name|userRule
init|=
operator|(
name|UserPlacementRule
operator|)
name|rule
decl_stmt|;
comment|// nested rule
if|if
condition|(
name|userRule
operator|.
name|getParentRule
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|handleNestedRule
argument_list|(
name|mapping
argument_list|,
name|userRule
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|userAsDefaultQueue
condition|)
block|{
if|if
condition|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mapping
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
operator|+
name|USER
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|rule
operator|instanceof
name|SpecifiedPlacementRule
condition|)
block|{
if|if
condition|(
name|ruleCount
operator|>
literal|1
condition|)
block|{
name|ruleHandler
operator|.
name|handleSpecifiedNotFirstRule
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"yarn.scheduler.capacity.queue-mappings-override.enable"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rule
operator|instanceof
name|PrimaryGroupPlacementRule
condition|)
block|{
if|if
condition|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mapping
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
operator|+
name|PRIMARY_GROUP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rule
operator|instanceof
name|DefaultPlacementRule
condition|)
block|{
name|DefaultPlacementRule
name|defaultRule
init|=
operator|(
name|DefaultPlacementRule
operator|)
name|rule
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mapping
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|defaultRule
operator|.
name|defaultQueueName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rule
operator|instanceof
name|SecondaryGroupExistingPlacementRule
condition|)
block|{
comment|// TODO: wait for YARN-9840
if|if
condition|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mapping
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
operator|+
name|SECONDARY_GROUP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|rule
operator|instanceof
name|RejectPlacementRule
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown placement rule: "
operator|+
name|rule
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"yarn.scheduler.capacity.queue-mappings"
argument_list|,
name|mapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
DECL|method|handleNestedRule (StringBuilder mapping, UserPlacementRule userRule)
specifier|private
name|void
name|handleNestedRule
parameter_list|(
name|StringBuilder
name|mapping
parameter_list|,
name|UserPlacementRule
name|userRule
parameter_list|)
block|{
name|PlacementRule
name|pr
init|=
name|userRule
operator|.
name|getParentRule
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mapping
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pr
operator|instanceof
name|PrimaryGroupPlacementRule
condition|)
block|{
comment|// TODO: wait for YARN-9841
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
operator|+
name|PRIMARY_GROUP
operator|+
literal|"."
operator|+
name|USER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|instanceof
name|SecondaryGroupExistingPlacementRule
condition|)
block|{
comment|// TODO: wait for YARN-9865
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
operator|+
name|SECONDARY_GROUP
operator|+
literal|"."
operator|+
name|USER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|instanceof
name|DefaultPlacementRule
condition|)
block|{
name|DefaultPlacementRule
name|defaultRule
init|=
operator|(
name|DefaultPlacementRule
operator|)
name|pr
decl_stmt|;
name|mapping
operator|.
name|append
argument_list|(
literal|"u:"
operator|+
name|USER
operator|+
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|defaultRule
operator|.
name|defaultQueueName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
operator|+
name|USER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported nested rule: "
operator|+
name|pr
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

