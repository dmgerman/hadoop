begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|QueuePlacementPolicy
specifier|public
class|class
name|QueuePlacementPolicy
block|{
DECL|field|ruleClasses
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|QueuePlacementRule
argument_list|>
argument_list|>
name|ruleClasses
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|QueuePlacementRule
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|QueuePlacementRule
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|QueuePlacementRule
operator|.
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"primaryGroup"
argument_list|,
name|QueuePlacementRule
operator|.
name|PrimaryGroup
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"secondaryGroupExistingQueue"
argument_list|,
name|QueuePlacementRule
operator|.
name|SecondaryGroupExistingQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"specified"
argument_list|,
name|QueuePlacementRule
operator|.
name|Specified
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"nestedUserQueue"
argument_list|,
name|QueuePlacementRule
operator|.
name|NestedUserQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|QueuePlacementRule
operator|.
name|Default
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"reject"
argument_list|,
name|QueuePlacementRule
operator|.
name|Reject
operator|.
name|class
argument_list|)
expr_stmt|;
name|ruleClasses
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|field|rules
specifier|private
specifier|final
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
decl_stmt|;
DECL|field|configuredQueues
specifier|private
specifier|final
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|Groups
name|groups
decl_stmt|;
DECL|method|QueuePlacementPolicy (List<QueuePlacementRule> rules, Map<FSQueueType, Set<String>> configuredQueues, Configuration conf)
specifier|public
name|QueuePlacementPolicy
parameter_list|(
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
parameter_list|,
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rules
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isTerminal
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Rules after rule "
operator|+
name|i
operator|+
literal|" in queue placement policy can never be reached"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|rules
operator|.
name|get
argument_list|(
name|rules
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|isTerminal
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Could get past last queue placement rule without assigning"
argument_list|)
throw|;
block|}
name|this
operator|.
name|rules
operator|=
name|rules
expr_stmt|;
name|this
operator|.
name|configuredQueues
operator|=
name|configuredQueues
expr_stmt|;
name|groups
operator|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Builds a QueuePlacementPolicy from an xml element.    */
DECL|method|fromXml (Element el, Map<FSQueueType, Set<String>> configuredQueues, Configuration conf)
specifier|public
specifier|static
name|QueuePlacementPolicy
name|fromXml
parameter_list|(
name|Element
name|el
parameter_list|,
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|QueuePlacementRule
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|elements
init|=
name|el
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|QueuePlacementRule
name|rule
init|=
name|createAndInitializeRule
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueuePlacementPolicy
argument_list|(
name|rules
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create and initialize a rule given a xml node    * @param node    * @return QueuePlacementPolicy    * @throws AllocationConfigurationException    */
DECL|method|createAndInitializeRule (Node node)
specifier|public
specifier|static
name|QueuePlacementRule
name|createAndInitializeRule
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|ruleName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|ruleName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"No name provided for a "
operator|+
literal|"rule element"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|QueuePlacementRule
argument_list|>
name|clazz
init|=
name|ruleClasses
operator|.
name|get
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"No rule class found for "
operator|+
name|ruleName
argument_list|)
throw|;
block|}
name|QueuePlacementRule
name|rule
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rule
operator|.
name|initializeFromXml
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|rule
return|;
block|}
comment|/**    * Build a simple queue placement policy from the allow-undeclared-pools and    * user-as-default-queue configuration options.    */
DECL|method|fromConfiguration (Configuration conf, Map<FSQueueType, Set<String>> configuredQueues)
specifier|public
specifier|static
name|QueuePlacementPolicy
name|fromConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
parameter_list|)
block|{
name|boolean
name|create
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_ALLOW_UNDECLARED_POOLS
argument_list|)
decl_stmt|;
name|boolean
name|userAsDefaultQueue
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_USER_AS_DEFAULT_QUEUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|QueuePlacementRule
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Specified
argument_list|()
operator|.
name|initialize
argument_list|(
name|create
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|userAsDefaultQueue
condition|)
block|{
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|User
argument_list|()
operator|.
name|initialize
argument_list|(
name|create
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|userAsDefaultQueue
operator|||
operator|!
name|create
condition|)
block|{
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Default
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|QueuePlacementPolicy
argument_list|(
name|rules
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AllocationConfigurationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should never hit exception when loading"
operator|+
literal|"placement policy from conf"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Applies this rule to an app with the given requested queue and user/group    * information.    *     * @param requestedQueue    *    The queue specified in the ApplicationSubmissionContext    * @param user    *    The user submitting the app    * @return    *    The name of the queue to assign the app to.  Or null if the app should    *    be rejected.    * @throws IOException    *    If an exception is encountered while getting the user's groups    */
DECL|method|assignAppToQueue (String requestedQueue, String user)
specifier|public
name|String
name|assignAppToQueue
parameter_list|(
name|String
name|requestedQueue
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|QueuePlacementRule
name|rule
range|:
name|rules
control|)
block|{
name|String
name|queue
init|=
name|rule
operator|.
name|assignAppToQueue
argument_list|(
name|requestedQueue
argument_list|,
name|user
argument_list|,
name|groups
argument_list|,
name|configuredQueues
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
operator|||
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|queue
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should have applied a rule before "
operator|+
literal|"reaching here"
argument_list|)
throw|;
block|}
DECL|method|getRules ()
specifier|public
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|getRules
parameter_list|()
block|{
return|return
name|rules
return|;
block|}
block|}
end_class

end_unit

