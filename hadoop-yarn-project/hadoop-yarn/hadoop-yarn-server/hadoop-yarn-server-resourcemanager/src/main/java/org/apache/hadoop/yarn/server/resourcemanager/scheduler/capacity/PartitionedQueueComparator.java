begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_class
DECL|class|PartitionedQueueComparator
specifier|public
class|class
name|PartitionedQueueComparator
implements|implements
name|Comparator
argument_list|<
name|CSQueue
argument_list|>
block|{
DECL|field|partitionToLookAt
specifier|private
name|String
name|partitionToLookAt
init|=
literal|null
decl_stmt|;
DECL|method|setPartitionToLookAt (String partitionToLookAt)
specifier|public
name|void
name|setPartitionToLookAt
parameter_list|(
name|String
name|partitionToLookAt
parameter_list|)
block|{
name|this
operator|.
name|partitionToLookAt
operator|=
name|partitionToLookAt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (CSQueue q1, CSQueue q2)
specifier|public
name|int
name|compare
parameter_list|(
name|CSQueue
name|q1
parameter_list|,
name|CSQueue
name|q2
parameter_list|)
block|{
comment|/*      * 1. Check accessible to given partition, if one queue accessible and      * the other not, accessible queue goes first.      */
name|boolean
name|q1Accessible
init|=
name|q1
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|boolean
name|q2Accessible
init|=
name|q2
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
if|if
condition|(
name|q1Accessible
operator|&&
operator|!
name|q2Accessible
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q1Accessible
operator|&&
name|q2Accessible
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|/*      *       * 2. When two queue has same accessibility, check who will go first:      * Now we simply compare their used resource on the partition to lookAt      */
name|float
name|used1
init|=
name|q1
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getUsedCapacity
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|float
name|used2
init|=
name|q2
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getUsedCapacity
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|used1
operator|-
name|used2
argument_list|)
operator|<
literal|1e-6
condition|)
block|{
comment|// When used capacity is same, compare their guaranteed-capacity
name|float
name|cap1
init|=
name|q1
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
name|float
name|cap2
init|=
name|q2
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|partitionToLookAt
argument_list|)
decl_stmt|;
comment|// when cap1 == cap2, we will compare queue's name
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|cap1
operator|-
name|cap2
argument_list|)
operator|<
literal|1e-6
condition|)
block|{
return|return
name|q1
operator|.
name|getQueueName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|q2
operator|.
name|getQueueName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Float
operator|.
name|compare
argument_list|(
name|cap2
argument_list|,
name|cap1
argument_list|)
return|;
block|}
return|return
name|Float
operator|.
name|compare
argument_list|(
name|used1
argument_list|,
name|used2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

