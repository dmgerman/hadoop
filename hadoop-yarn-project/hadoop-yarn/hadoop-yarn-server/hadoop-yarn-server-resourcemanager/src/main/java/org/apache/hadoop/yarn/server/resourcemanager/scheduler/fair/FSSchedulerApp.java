begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Represents an application attempt from the viewpoint of the Fair Scheduler.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FSSchedulerApp
specifier|public
class|class
name|FSSchedulerApp
extends|extends
name|SchedulerApplicationAttempt
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appSchedulable
specifier|private
name|AppSchedulable
name|appSchedulable
decl_stmt|;
DECL|field|preemptionMap
specifier|final
name|Map
argument_list|<
name|RMContainer
argument_list|,
name|Long
argument_list|>
name|preemptionMap
init|=
operator|new
name|HashMap
argument_list|<
name|RMContainer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FSSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, FSLeafQueue queue, ActiveUsersManager activeUsersManager, RMContext rmContext)
specifier|public
name|FSSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|FSLeafQueue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|activeUsersManager
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppSchedulable (AppSchedulable appSchedulable)
specifier|public
name|void
name|setAppSchedulable
parameter_list|(
name|AppSchedulable
name|appSchedulable
parameter_list|)
block|{
name|this
operator|.
name|appSchedulable
operator|=
name|appSchedulable
expr_stmt|;
block|}
DECL|method|getAppSchedulable ()
specifier|public
name|AppSchedulable
name|getAppSchedulable
parameter_list|()
block|{
return|return
name|appSchedulable
return|;
block|}
DECL|method|containerCompleted (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|synchronized
specifier|public
name|void
name|containerCompleted
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed container: "
operator|+
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" in state: "
operator|+
name|rmContainer
operator|.
name|getState
argument_list|()
operator|+
literal|" event:"
operator|+
name|event
argument_list|)
expr_stmt|;
comment|// Remove from the list of containers
name|liveContainers
operator|.
name|remove
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// Update usage metrics
name|Resource
name|containerResource
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|releaseResources
argument_list|(
name|getUser
argument_list|()
argument_list|,
literal|1
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|currentConsumption
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
comment|// remove from preemption map if it is completed
name|preemptionMap
operator|.
name|remove
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
block|}
DECL|method|unreserve (FSSchedulerNode node, Priority priority)
specifier|public
specifier|synchronized
name|void
name|unreserve
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|RMContainer
name|reservedContainer
init|=
name|reservedContainers
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|reservedContainers
operator|.
name|remove
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
comment|// Reset the re-reservation count
name|resetReReservations
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|currentReservation
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" unreserved "
operator|+
literal|" on node "
operator|+
name|node
operator|+
literal|", currently has "
operator|+
name|reservedContainers
operator|.
name|size
argument_list|()
operator|+
literal|" at priority "
operator|+
name|priority
operator|+
literal|"; currentReservation "
operator|+
name|currentReservation
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalityWaitFactor ( Priority priority, int clusterNodes)
specifier|public
specifier|synchronized
name|float
name|getLocalityWaitFactor
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|clusterNodes
parameter_list|)
block|{
comment|// Estimate: Required unique resources (i.e. hosts + racks)
name|int
name|requiredResources
init|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// waitFactor can't be more than '1'
comment|// i.e. no point skipping more than clustersize opportunities
return|return
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|float
operator|)
name|requiredResources
operator|/
name|clusterNodes
operator|)
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
comment|/**    * Delay scheduling: We often want to prioritize scheduling of node-local    * containers over rack-local or off-switch containers. To acheive this    * we first only allow node-local assigments for a given prioirty level,    * then relax the locality threshold once we've had a long enough period    * without succesfully scheduling. We measure both the number of "missed"    * scheduling opportunities since the last container was scheduled    * at the current allowed level and the time since the last container    * was scheduled. Currently we use only the former.    */
comment|// Current locality threshold
DECL|field|allowedLocalityLevel
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|NodeType
argument_list|>
name|allowedLocalityLevel
init|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Return the level at which we are allowed to schedule containers, given the    * current size of the cluster and thresholds indicating how many nodes to    * fail at (as a fraction of cluster size) before relaxing scheduling    * constraints.    */
DECL|method|getAllowedLocalityLevel (Priority priority, int numNodes, double nodeLocalityThreshold, double rackLocalityThreshold)
specifier|public
specifier|synchronized
name|NodeType
name|getAllowedLocalityLevel
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|double
name|nodeLocalityThreshold
parameter_list|,
name|double
name|rackLocalityThreshold
parameter_list|)
block|{
comment|// upper limit on threshold
if|if
condition|(
name|nodeLocalityThreshold
operator|>
literal|1.0
condition|)
block|{
name|nodeLocalityThreshold
operator|=
literal|1.0
expr_stmt|;
block|}
if|if
condition|(
name|rackLocalityThreshold
operator|>
literal|1.0
condition|)
block|{
name|rackLocalityThreshold
operator|=
literal|1.0
expr_stmt|;
block|}
comment|// If delay scheduling is not being used, can schedule anywhere
if|if
condition|(
name|nodeLocalityThreshold
operator|<
literal|0.0
operator|||
name|rackLocalityThreshold
operator|<
literal|0.0
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// Default level is NODE_LOCAL
if|if
condition|(
operator|!
name|allowedLocalityLevel
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
return|return
name|NodeType
operator|.
name|NODE_LOCAL
return|;
block|}
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
comment|// If level is already most liberal, we're done
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
condition|)
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
name|double
name|threshold
init|=
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|?
name|nodeLocalityThreshold
else|:
name|rackLocalityThreshold
decl_stmt|;
comment|// Relax locality constraints once we've surpassed threshold.
if|if
condition|(
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
operator|>
operator|(
name|numNodes
operator|*
name|threshold
operator|)
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
comment|/**    * Return the level at which we are allowed to schedule containers.    * Given the thresholds indicating how much time passed before relaxing    * scheduling constraints.    */
DECL|method|getAllowedLocalityLevelByTime (Priority priority, long nodeLocalityDelayMs, long rackLocalityDelayMs, long currentTimeMs)
specifier|public
specifier|synchronized
name|NodeType
name|getAllowedLocalityLevelByTime
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|long
name|nodeLocalityDelayMs
parameter_list|,
name|long
name|rackLocalityDelayMs
parameter_list|,
name|long
name|currentTimeMs
parameter_list|)
block|{
comment|// if not being used, can schedule anywhere
if|if
condition|(
name|nodeLocalityDelayMs
operator|<
literal|0
operator|||
name|rackLocalityDelayMs
operator|<
literal|0
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// default level is NODE_LOCAL
if|if
condition|(
operator|!
name|allowedLocalityLevel
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
return|return
name|NodeType
operator|.
name|NODE_LOCAL
return|;
block|}
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
comment|// if level is already most liberal, we're done
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// check waiting time
name|long
name|waitTime
init|=
name|currentTimeMs
decl_stmt|;
if|if
condition|(
name|lastScheduledContainer
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|waitTime
operator|-=
name|lastScheduledContainer
operator|.
name|get
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|waitTime
operator|-=
name|appSchedulable
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
block|}
name|long
name|thresholdTime
init|=
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|?
name|nodeLocalityDelayMs
else|:
name|rackLocalityDelayMs
decl_stmt|;
if|if
condition|(
name|waitTime
operator|>
name|thresholdTime
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|,
name|currentTimeMs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|,
name|currentTimeMs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|allocate (NodeType type, FSSchedulerNode node, Priority priority, ResourceRequest request, Container container)
specifier|synchronized
specifier|public
name|RMContainer
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|FSSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Update allowed locality level
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowed
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|this
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Required sanity check - AM can call 'allocate' to update resource
comment|// request without locking the scheduler, hence we need to check
if|if
condition|(
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Create RMContainer
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|appSchedulingInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Add it to allContainers list.
name|newlyAllocatedContainers
operator|.
name|add
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|liveContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Update consumption and track allocations
name|appSchedulingInfo
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|currentConsumption
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|RMContainerEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationAttemptId="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" container="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" host="
operator|+
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|ALLOC_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rmContainer
return|;
block|}
comment|/**    * Should be called when the scheduler assigns a container at a higher    * degree of locality than the current threshold. Reset the allowed locality    * level to a higher degree of locality.    */
DECL|method|resetAllowedLocalityLevel (Priority priority, NodeType level)
specifier|public
specifier|synchronized
name|void
name|resetAllowedLocalityLevel
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|NodeType
name|level
parameter_list|)
block|{
name|NodeType
name|old
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Raising locality level from "
operator|+
name|old
operator|+
literal|" to "
operator|+
name|level
operator|+
literal|" at "
operator|+
literal|" priority "
operator|+
name|priority
argument_list|)
expr_stmt|;
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
comment|// related methods
DECL|method|addPreemption (RMContainer container, long time)
specifier|public
name|void
name|addPreemption
parameter_list|(
name|RMContainer
name|container
parameter_list|,
name|long
name|time
parameter_list|)
block|{
assert|assert
name|preemptionMap
operator|.
name|get
argument_list|(
name|container
argument_list|)
operator|==
literal|null
assert|;
name|preemptionMap
operator|.
name|put
argument_list|(
name|container
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerPreemptionTime (RMContainer container)
specifier|public
name|Long
name|getContainerPreemptionTime
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{
return|return
name|preemptionMap
operator|.
name|get
argument_list|(
name|container
argument_list|)
return|;
block|}
DECL|method|getPreemptionContainers ()
specifier|public
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|getPreemptionContainers
parameter_list|()
block|{
return|return
name|preemptionMap
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueue ()
specifier|public
name|FSLeafQueue
name|getQueue
parameter_list|()
block|{
return|return
operator|(
name|FSLeafQueue
operator|)
name|super
operator|.
name|getQueue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

