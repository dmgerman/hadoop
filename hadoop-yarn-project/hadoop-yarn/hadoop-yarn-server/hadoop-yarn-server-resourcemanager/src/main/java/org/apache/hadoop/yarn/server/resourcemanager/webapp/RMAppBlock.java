begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|JQueryUI
operator|.
name|_INFO_WRAP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|AppBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|DIV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|InfoBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|RMAppBlock
specifier|public
class|class
name|RMAppBlock
extends|extends
name|AppBlock
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppBlock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
annotation|@
name|Inject
DECL|method|RMAppBlock (ViewContext ctx, Configuration conf, ResourceManager rm)
name|RMAppBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ResourceManager
name|rm
parameter_list|)
block|{
name|super
argument_list|(
name|rm
operator|.
name|getClientRMService
argument_list|()
argument_list|,
name|ctx
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|super
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createApplicationMetricsTable (Block html)
specifier|protected
name|void
name|createApplicationMetricsTable
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|RMApp
name|rmApp
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|RMAppMetrics
name|appMetrics
init|=
name|rmApp
operator|==
literal|null
condition|?
literal|null
else|:
name|rmApp
operator|.
name|getRMAppMetrics
argument_list|()
decl_stmt|;
comment|// Get attempt metrics and fields, it is possible currentAttempt of RMApp is
comment|// null. In that case, we will assume resource preempted and number of Non
comment|// AM container preempted on that attempt is 0
name|RMAppAttemptMetrics
name|attemptMetrics
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
operator|||
literal|null
operator|==
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
condition|)
block|{
name|attemptMetrics
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|attemptMetrics
operator|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getRMAppAttemptMetrics
argument_list|()
expr_stmt|;
block|}
name|Resource
name|attemptResourcePreempted
init|=
name|attemptMetrics
operator|==
literal|null
condition|?
name|Resources
operator|.
name|none
argument_list|()
else|:
name|attemptMetrics
operator|.
name|getResourcePreempted
argument_list|()
decl_stmt|;
name|int
name|attemptNumNonAMContainerPreempted
init|=
name|attemptMetrics
operator|==
literal|null
condition|?
literal|0
else|:
name|attemptMetrics
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
decl_stmt|;
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|pdiv
init|=
name|html
operator|.
name|_
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
operator|.
name|div
argument_list|(
name|_INFO_WRAP
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Application Overview"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Application Metrics"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Total Resource Preempted:"
argument_list|,
name|appMetrics
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|appMetrics
operator|.
name|getResourcePreempted
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Total Number of Non-AM Containers Preempted:"
argument_list|,
name|appMetrics
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|appMetrics
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Total Number of AM Containers Preempted:"
argument_list|,
name|appMetrics
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|appMetrics
operator|.
name|getNumAMContainersPreempted
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Resource Preempted from Current Attempt:"
argument_list|,
name|attemptResourcePreempted
argument_list|)
operator|.
name|_
argument_list|(
literal|"Number of Non-AM Containers Preempted from Current Attempt:"
argument_list|,
name|attemptNumNonAMContainerPreempted
argument_list|)
operator|.
name|_
argument_list|(
literal|"Aggregate Resource Allocation:"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%d MB-seconds, %d vcore-seconds"
argument_list|,
name|appMetrics
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|appMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|appMetrics
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|appMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pdiv
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateApplicationTable (Block html, UserGroupInformation callerUGI, Collection<ApplicationAttemptReport> attempts)
specifier|protected
name|void
name|generateApplicationTable
parameter_list|(
name|Block
name|html
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|attempts
parameter_list|)
block|{
comment|// Application Attempt Table
name|Hamlet
operator|.
name|TBODY
argument_list|<
name|Hamlet
operator|.
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#attempts"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".id"
argument_list|,
literal|"Attempt ID"
argument_list|)
operator|.
name|th
argument_list|(
literal|".started"
argument_list|,
literal|"Started"
argument_list|)
operator|.
name|th
argument_list|(
literal|".node"
argument_list|,
literal|"Node"
argument_list|)
operator|.
name|th
argument_list|(
literal|".logs"
argument_list|,
literal|"Logs"
argument_list|)
operator|.
name|th
argument_list|(
literal|".blacklistednodes"
argument_list|,
literal|"Blacklisted Nodes"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|StringBuilder
name|attemptsTableData
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[\n"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ApplicationAttemptReport
name|appAttemptReport
range|:
name|attempts
control|)
block|{
name|AppAttemptInfo
name|appAttempt
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|appAttemptReport
argument_list|)
decl_stmt|;
name|ContainerReport
name|containerReport
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// AM container is always the first container of the attempt
specifier|final
name|GetContainerReportRequest
name|request
init|=
name|GetContainerReportRequest
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|containerReport
operator|=
name|appBaseProt
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|containerReport
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerReport
name|report
init|=
literal|null
decl_stmt|;
try|try
block|{
name|report
operator|=
name|appBaseProt
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the AM container of the application attempt "
operator|+
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|startTime
init|=
literal|0L
decl_stmt|;
name|String
name|logsLink
init|=
literal|null
decl_stmt|;
name|String
name|nodeLink
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|containerReport
operator|!=
literal|null
condition|)
block|{
name|ContainerInfo
name|container
init|=
operator|new
name|ContainerInfo
argument_list|(
name|containerReport
argument_list|)
decl_stmt|;
name|startTime
operator|=
name|container
operator|.
name|getStartedTime
argument_list|()
expr_stmt|;
name|logsLink
operator|=
name|containerReport
operator|.
name|getLogUrl
argument_list|()
expr_stmt|;
name|nodeLink
operator|=
name|containerReport
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
block|}
name|String
name|blacklistedNodesCount
init|=
literal|"N/A"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|RMAppAttemptBlock
operator|.
name|getBlacklistedNodes
argument_list|(
name|rm
argument_list|,
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|blacklistedNodesCount
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// AppAttemptID numerical value parsed by parseHadoopID in
comment|// yarn.dt.plugins.js
name|attemptsTableData
operator|.
name|append
argument_list|(
literal|"[\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|(
literal|"appattempt"
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\"<a "
argument_list|)
operator|.
name|append
argument_list|(
name|nodeLink
operator|==
literal|null
condition|?
literal|"#"
else|:
literal|"href='"
operator|+
name|nodeLink
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|nodeLink
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|StringEscapeUtils
operator|.
name|escapeJavaScript
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeHtml
argument_list|(
name|nodeLink
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\"<a "
argument_list|)
operator|.
name|append
argument_list|(
name|logsLink
operator|==
literal|null
condition|?
literal|"#"
else|:
literal|"href='"
operator|+
name|logsLink
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|logsLink
operator|==
literal|null
condition|?
literal|"N/A"
else|:
literal|"Logs"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\","
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|blacklistedNodesCount
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"],\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptsTableData
operator|.
name|charAt
argument_list|(
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|','
condition|)
block|{
name|attemptsTableData
operator|.
name|delete
argument_list|(
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|,
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|attemptsTableData
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
literal|"var attemptsTableData="
operator|+
name|attemptsTableData
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

