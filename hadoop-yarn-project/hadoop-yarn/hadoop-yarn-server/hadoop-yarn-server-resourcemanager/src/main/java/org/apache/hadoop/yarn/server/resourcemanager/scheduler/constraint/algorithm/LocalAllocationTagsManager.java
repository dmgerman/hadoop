begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.algorithm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|algorithm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|AllocationTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|AllocationTagsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|InvalidAllocationTagsQueryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongBinaryOperator
import|;
end_import

begin_class
DECL|class|LocalAllocationTagsManager
class|class
name|LocalAllocationTagsManager
extends|extends
name|AllocationTagsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LocalAllocationTagsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tagsManager
specifier|private
specifier|final
name|AllocationTagsManager
name|tagsManager
decl_stmt|;
comment|// Application's Temporary containers mapping
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|>
argument_list|>
DECL|field|appTempMappings
name|appTempMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|LocalAllocationTagsManager ( AllocationTagsManager allocationTagsManager)
name|LocalAllocationTagsManager
parameter_list|(
name|AllocationTagsManager
name|allocationTagsManager
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagsManager
operator|=
name|allocationTagsManager
expr_stmt|;
block|}
DECL|method|addTempTags (NodeId nodeId, ApplicationId applicationId, Set<String> allocationTags)
name|void
name|addTempTags
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|>
name|appTempMapping
init|=
name|appTempMappings
operator|.
name|computeIfAbsent
argument_list|(
name|applicationId
argument_list|,
name|k
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|containerTempMapping
init|=
name|appTempMapping
operator|.
name|computeIfAbsent
argument_list|(
name|nodeId
argument_list|,
name|k
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|allocationTags
control|)
block|{
name|containerTempMapping
operator|.
name|computeIfAbsent
argument_list|(
name|tag
argument_list|,
name|k
lambda|->
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added TEMP container with tags=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|allocationTags
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|tagsManager
operator|.
name|addTags
argument_list|(
name|nodeId
argument_list|,
name|applicationId
argument_list|,
name|allocationTags
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTempTags (NodeId nodeId, ApplicationId applicationId, Set<String> allocationTags)
name|void
name|removeTempTags
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|>
name|appTempMapping
init|=
name|appTempMappings
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appTempMapping
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|containerTempMap
init|=
name|appTempMapping
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerTempMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|tag
range|:
name|allocationTags
control|)
block|{
name|AtomicInteger
name|count
init|=
name|containerTempMap
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|decrementAndGet
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|containerTempMap
operator|.
name|remove
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|allocationTags
operator|!=
literal|null
condition|)
block|{
name|removeTags
argument_list|(
name|nodeId
argument_list|,
name|applicationId
argument_list|,
name|allocationTags
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Method removes temporary containers associated with an application    * Used by the placement algorithm to clean temporary tags at the end of    * a placement cycle.    * @param applicationId Application Id.    */
DECL|method|cleanTempContainers (ApplicationId applicationId)
specifier|public
name|void
name|cleanTempContainers
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|appTempMappings
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appTempMappings
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|nodeE
lambda|->
block|{
name|nodeE
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|tagE
lambda|->
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tagE
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|removeTags
argument_list|(
name|nodeE
operator|.
name|getKey
argument_list|()
argument_list|,
name|applicationId
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|tagE
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|appTempMappings
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed TEMP containers of app="
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addContainer (NodeId nodeId, ContainerId containerId, Set<String> allocationTags)
specifier|public
name|void
name|addContainer
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|tagsManager
operator|.
name|addContainer
argument_list|(
name|nodeId
argument_list|,
name|containerId
argument_list|,
name|allocationTags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeContainer (NodeId nodeId, ContainerId containerId, Set<String> allocationTags)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|tagsManager
operator|.
name|removeContainer
argument_list|(
name|nodeId
argument_list|,
name|containerId
argument_list|,
name|allocationTags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeTags (NodeId nodeId, ApplicationId applicationId, Set<String> allocationTags)
specifier|public
name|void
name|removeTags
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|tagsManager
operator|.
name|removeTags
argument_list|(
name|nodeId
argument_list|,
name|applicationId
argument_list|,
name|allocationTags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeCardinality (NodeId nodeId, ApplicationId applicationId, String tag)
specifier|public
name|long
name|getNodeCardinality
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
return|return
name|tagsManager
operator|.
name|getNodeCardinality
argument_list|(
name|nodeId
argument_list|,
name|applicationId
argument_list|,
name|tag
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeCardinalityByOp (NodeId nodeId, AllocationTags tags, LongBinaryOperator op)
specifier|public
name|long
name|getNodeCardinalityByOp
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|AllocationTags
name|tags
parameter_list|,
name|LongBinaryOperator
name|op
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
return|return
name|tagsManager
operator|.
name|getNodeCardinalityByOp
argument_list|(
name|nodeId
argument_list|,
name|tags
argument_list|,
name|op
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRackCardinality (String rack, ApplicationId applicationId, String tag)
specifier|public
name|long
name|getRackCardinality
parameter_list|(
name|String
name|rack
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
return|return
name|tagsManager
operator|.
name|getRackCardinality
argument_list|(
name|rack
argument_list|,
name|applicationId
argument_list|,
name|tag
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRackCardinalityByOp (String rack, AllocationTags tags, LongBinaryOperator op)
specifier|public
name|long
name|getRackCardinalityByOp
parameter_list|(
name|String
name|rack
parameter_list|,
name|AllocationTags
name|tags
parameter_list|,
name|LongBinaryOperator
name|op
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
return|return
name|tagsManager
operator|.
name|getRackCardinalityByOp
argument_list|(
name|rack
argument_list|,
name|tags
argument_list|,
name|op
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|allocationTagExistsOnNode (NodeId nodeId, ApplicationId applicationId, String tag)
specifier|public
name|boolean
name|allocationTagExistsOnNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|InvalidAllocationTagsQueryException
block|{
return|return
name|tagsManager
operator|.
name|allocationTagExistsOnNode
argument_list|(
name|nodeId
argument_list|,
name|applicationId
argument_list|,
name|tag
argument_list|)
return|;
block|}
block|}
end_class

end_unit

