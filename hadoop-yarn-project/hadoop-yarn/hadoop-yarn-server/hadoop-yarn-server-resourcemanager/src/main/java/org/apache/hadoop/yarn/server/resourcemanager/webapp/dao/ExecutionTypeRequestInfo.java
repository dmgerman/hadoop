begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_comment
comment|/**  * Simple class representing an execution type request.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"ExecutionTypeRequest"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ExecutionTypeRequestInfo
specifier|public
class|class
name|ExecutionTypeRequestInfo
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"executionType"
argument_list|)
DECL|field|executionType
specifier|private
name|String
name|executionType
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"enforceExecutionType"
argument_list|)
DECL|field|enforceExecutionType
specifier|private
name|boolean
name|enforceExecutionType
decl_stmt|;
DECL|method|ExecutionTypeRequestInfo ()
specifier|public
name|ExecutionTypeRequestInfo
parameter_list|()
block|{   }
DECL|method|ExecutionTypeRequestInfo (ExecutionTypeRequest executionTypeRequest)
specifier|public
name|ExecutionTypeRequestInfo
parameter_list|(
name|ExecutionTypeRequest
name|executionTypeRequest
parameter_list|)
block|{
name|executionType
operator|=
name|executionTypeRequest
operator|.
name|getExecutionType
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|enforceExecutionType
operator|=
name|executionTypeRequest
operator|.
name|getEnforceExecutionType
argument_list|()
expr_stmt|;
block|}
DECL|method|getExecutionType ()
specifier|public
name|ExecutionType
name|getExecutionType
parameter_list|()
block|{
return|return
name|ExecutionType
operator|.
name|valueOf
argument_list|(
name|executionType
argument_list|)
return|;
block|}
DECL|method|setExecutionType (ExecutionType executionType)
specifier|public
name|void
name|setExecutionType
parameter_list|(
name|ExecutionType
name|executionType
parameter_list|)
block|{
name|this
operator|.
name|executionType
operator|=
name|executionType
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
DECL|method|getEnforceExecutionType ()
specifier|public
name|boolean
name|getEnforceExecutionType
parameter_list|()
block|{
return|return
name|enforceExecutionType
return|;
block|}
DECL|method|setEnforceExecutionType (boolean enforceExecutionType)
specifier|public
name|void
name|setEnforceExecutionType
parameter_list|(
name|boolean
name|enforceExecutionType
parameter_list|)
block|{
name|this
operator|.
name|enforceExecutionType
operator|=
name|enforceExecutionType
expr_stmt|;
block|}
block|}
end_class

end_unit

