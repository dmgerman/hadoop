begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerResourceChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMoveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerRecoverEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeDecreaseContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|AbstractYarnScheduler
specifier|public
specifier|abstract
class|class
name|AbstractYarnScheduler
parameter_list|<
name|T
extends|extends
name|SchedulerApplicationAttempt
parameter_list|,
name|N
extends|extends
name|SchedulerNode
parameter_list|>
extends|extends
name|AbstractService
implements|implements
name|ResourceScheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractYarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Nodes in the cluster, indexed by NodeId
DECL|field|nodes
specifier|protected
name|Map
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
argument_list|()
decl_stmt|;
comment|// Whole capacity of the cluster
DECL|field|clusterResource
specifier|protected
name|Resource
name|clusterResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|minimumAllocation
specifier|protected
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|maximumAllocation
specifier|protected
name|Resource
name|maximumAllocation
decl_stmt|;
DECL|field|configuredMaximumAllocation
specifier|private
name|Resource
name|configuredMaximumAllocation
decl_stmt|;
DECL|field|maxNodeMemory
specifier|private
name|int
name|maxNodeMemory
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|maxNodeVCores
specifier|private
name|int
name|maxNodeVCores
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|maxAllocReadLock
specifier|private
specifier|final
name|ReadLock
name|maxAllocReadLock
decl_stmt|;
DECL|field|maxAllocWriteLock
specifier|private
specifier|final
name|WriteLock
name|maxAllocWriteLock
decl_stmt|;
DECL|field|useConfiguredMaximumAllocationOnly
specifier|private
name|boolean
name|useConfiguredMaximumAllocationOnly
init|=
literal|true
decl_stmt|;
DECL|field|configuredMaximumAllocationWaitTime
specifier|private
name|long
name|configuredMaximumAllocationWaitTime
decl_stmt|;
DECL|field|rmContext
specifier|protected
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|maxClusterLevelAppPriority
specifier|private
specifier|volatile
name|Priority
name|maxClusterLevelAppPriority
decl_stmt|;
comment|/*    * All schedulers which are inheriting AbstractYarnScheduler should use    * concurrent version of 'applications' map.    */
DECL|field|applications
specifier|protected
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
argument_list|>
name|applications
decl_stmt|;
DECL|field|nmExpireInterval
specifier|protected
name|int
name|nmExpireInterval
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|protected
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ALLOCATION
specifier|protected
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Construct the service.    *    * @param name service name    */
DECL|method|AbstractYarnScheduler (String name)
specifier|public
name|AbstractYarnScheduler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|maxAllocReadLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAllocWriteLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|nmExpireInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
name|configuredMaximumAllocationWaitTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|)
expr_stmt|;
name|maxClusterLevelAppPriority
operator|=
name|getMaxPriorityFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createReleaseCache
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getTransferredContainers ( ApplicationAttemptId currentAttempt)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getTransferredContainers
parameter_list|(
name|ApplicationAttemptId
name|currentAttempt
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|currentAttempt
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|RMApp
name|appImpl
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appImpl
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
return|return
name|containerList
return|;
block|}
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
return|return
name|containerList
return|;
block|}
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|liveContainers
control|)
block|{
if|if
condition|(
operator|!
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|amContainerId
argument_list|)
condition|)
block|{
name|containerList
operator|.
name|add
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerList
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
argument_list|>
DECL|method|getSchedulerApplications ()
name|getSchedulerApplications
parameter_list|()
block|{
return|return
name|applications
return|;
block|}
comment|/**    * Add blacklisted NodeIds to the list that is passed.    *    * @param app application attempt.    * @param blacklistNodeIdList the list to store blacklisted NodeIds.    */
DECL|method|addBlacklistedNodeIdsToList (SchedulerApplicationAttempt app, List<NodeId> blacklistNodeIdList)
specifier|public
name|void
name|addBlacklistedNodeIdsToList
parameter_list|(
name|SchedulerApplicationAttempt
name|app
parameter_list|,
name|List
argument_list|<
name|NodeId
argument_list|>
name|blacklistNodeIdList
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|nodeEntry
range|:
name|nodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|SchedulerAppUtils
operator|.
name|isBlacklisted
argument_list|(
name|app
argument_list|,
name|nodeEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|LOG
argument_list|)
condition|)
block|{
name|blacklistNodeIdList
operator|.
name|add
argument_list|(
name|nodeEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getClusterResource ()
specifier|public
name|Resource
name|getClusterResource
parameter_list|()
block|{
return|return
name|clusterResource
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimumResourceCapability ()
specifier|public
name|Resource
name|getMinimumResourceCapability
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability ()
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|()
block|{
name|Resource
name|maxResource
decl_stmt|;
name|maxAllocReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|useConfiguredMaximumAllocationOnly
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
operator|>
name|configuredMaximumAllocationWaitTime
condition|)
block|{
name|useConfiguredMaximumAllocationOnly
operator|=
literal|false
expr_stmt|;
block|}
name|maxResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|configuredMaximumAllocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxResource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|maximumAllocation
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|maxAllocReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|maxResource
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability (String queueName)
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
name|getMaximumResourceCapability
argument_list|()
return|;
block|}
DECL|method|initMaximumResourceCapability (Resource maximumAllocation)
specifier|protected
name|void
name|initMaximumResourceCapability
parameter_list|(
name|Resource
name|maximumAllocation
parameter_list|)
block|{
name|maxAllocWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|configuredMaximumAllocation
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|configuredMaximumAllocation
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|maximumAllocation
argument_list|)
expr_stmt|;
name|this
operator|.
name|maximumAllocation
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|maximumAllocation
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|maxAllocWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|containerLaunchedOnNode ( ContainerId containerId, SchedulerNode node)
specifier|protected
specifier|synchronized
name|void
name|containerLaunchedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SchedulerNode
name|node
parameter_list|)
block|{
comment|// Get the application for the finished container
name|SchedulerApplicationAttempt
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" launched container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|application
operator|.
name|containerLaunchedOnNode
argument_list|(
name|containerId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|containerIncreasedOnNode (ContainerId containerId, SchedulerNode node, Container increasedContainerReportedByNM)
specifier|protected
specifier|synchronized
name|void
name|containerIncreasedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Container
name|increasedContainerReportedByNM
parameter_list|)
block|{
comment|// Get the application for the finished container
name|SchedulerApplicationAttempt
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" increased container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|Resource
name|rmContainerResource
init|=
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
name|Resource
name|nmContainerResource
init|=
name|increasedContainerReportedByNM
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|equals
argument_list|(
name|nmContainerResource
argument_list|,
name|rmContainerResource
argument_list|)
condition|)
block|{
comment|// NM reported expected container size, tell RMContainer. Which will stop
comment|// container expire monitor
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|containerId
argument_list|,
name|RMContainerEventType
operator|.
name|NM_DONE_CHANGE_RESOURCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|getResourceCalculator
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|nmContainerResource
argument_list|,
name|rmContainerResource
argument_list|)
condition|)
block|{
comment|// when rmContainerResource>= nmContainerResource, we won't do anything,
comment|// it is possible a container increased is issued by RM, but AM hasn't
comment|// told NM.
block|}
elseif|else
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|getResourceCalculator
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|rmContainerResource
argument_list|,
name|nmContainerResource
argument_list|)
condition|)
block|{
comment|// When rmContainerResource<= nmContainerResource, it could happen when a
comment|// container decreased by RM before it is increased in NM.
comment|// Tell NM to decrease the container
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeDecreaseContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Something wrong happened, kill the container
name|LOG
operator|.
name|warn
argument_list|(
literal|"Something wrong happened, container size reported by NM"
operator|+
literal|" is not expected, ContainerID="
operator|+
name|containerId
operator|+
literal|" rm-size-resource:"
operator|+
name|rmContainerResource
operator|+
literal|" nm-size-reosurce:"
operator|+
name|nmContainerResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getApplicationAttempt (ApplicationAttemptId applicationAttemptId)
specifier|public
name|T
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerAppInfo ( ApplicationAttemptId appAttemptId)
specifier|public
name|SchedulerAppReport
name|getSchedulerAppInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for appInfo of unknown attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SchedulerAppReport
argument_list|(
name|attempt
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAppResourceUsageReport ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationResourceUsageReport
name|getAppResourceUsageReport
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for appInfo of unknown attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|attempt
operator|.
name|getResourceUsageReport
argument_list|()
return|;
block|}
DECL|method|getCurrentAttemptForContainer (ContainerId containerId)
specifier|public
name|T
name|getCurrentAttemptForContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|getApplicationAttempt
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRMContainer (ContainerId containerId)
specifier|public
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
operator|(
name|attempt
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|attempt
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|N
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerNodeReport
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|moveApplication (ApplicationId appId, String newQueue)
specifier|public
name|String
name|moveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support moving apps between queues"
argument_list|)
throw|;
block|}
DECL|method|removeQueue (String queueName)
specifier|public
name|void
name|removeQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support removing queues"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|addQueue (Queue newQueue)
specifier|public
name|void
name|addQueue
parameter_list|(
name|Queue
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setEntitlement (String queue, QueueEntitlement entitlement)
specifier|public
name|void
name|setEntitlement
parameter_list|(
name|String
name|queue
parameter_list|,
name|QueueEntitlement
name|entitlement
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support this operation"
argument_list|)
throw|;
block|}
DECL|method|killOrphanContainerOnNode (RMNode node, NMContainerStatus container)
specifier|private
name|void
name|killOrphanContainerOnNode
parameter_list|(
name|RMNode
name|node
parameter_list|,
name|NMContainerStatus
name|container
parameter_list|)
block|{
if|if
condition|(
operator|!
name|container
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recoverContainersOnNode ( List<NMContainerStatus> containerReports, RMNode nm)
specifier|public
specifier|synchronized
name|void
name|recoverContainersOnNode
parameter_list|(
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerReports
parameter_list|,
name|RMNode
name|nm
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rmContext
operator|.
name|isWorkPreservingRecoveryEnabled
argument_list|()
operator|||
name|containerReports
operator|==
literal|null
operator|||
operator|(
name|containerReports
operator|!=
literal|null
operator|&&
name|containerReports
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|NMContainerStatus
name|container
range|:
name|containerReports
control|)
block|{
name|ApplicationId
name|appId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Skip recovering container "
operator|+
name|container
operator|+
literal|" for unknown application."
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Unmanaged AM recovery is addressed in YARN-1815
if|if
condition|(
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip recovering container "
operator|+
name|container
operator|+
literal|" for unmanaged AM."
operator|+
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|schedulerApp
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip recovering container  "
operator|+
name|container
operator|+
literal|" for unknown SchedulerApplication. Application current state is "
operator|+
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering container "
operator|+
name|container
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|schedulerApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
condition|)
block|{
comment|// Do not recover containers for stopped attempt or previous attempt.
if|if
condition|(
name|schedulerAttempt
operator|.
name|isStopped
argument_list|()
operator|||
operator|!
name|schedulerAttempt
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip recovering container "
operator|+
name|container
operator|+
literal|" for already stopped attempt."
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// create container
name|RMContainer
name|rmContainer
init|=
name|recoverAndCreateContainer
argument_list|(
name|container
argument_list|,
name|nm
argument_list|)
decl_stmt|;
comment|// recover RMContainer
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerRecoverEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
comment|// recover scheduler node
name|SchedulerNode
name|schedulerNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|recoverContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// recover queue: update headroom etc.
name|Queue
name|queue
init|=
name|schedulerAttempt
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|recoverContainer
argument_list|(
name|clusterResource
argument_list|,
name|schedulerAttempt
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// recover scheduler attempt
name|schedulerAttempt
operator|.
name|recoverContainer
argument_list|(
name|schedulerNode
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// set master container for the current running AMContainer for this
comment|// attempt.
name|RMAppAttempt
name|appAttempt
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|!=
literal|null
condition|)
block|{
name|Container
name|masterContainer
init|=
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
decl_stmt|;
comment|// Mark current running AMContainer's RMContainer based on the master
comment|// container ID stored in AppAttempt.
if|if
condition|(
name|masterContainer
operator|!=
literal|null
operator|&&
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setAMContainer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|schedulerAttempt
init|)
block|{
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releases
init|=
name|schedulerAttempt
operator|.
name|getPendingRelease
argument_list|()
decl_stmt|;
if|if
condition|(
name|releases
operator|.
name|contains
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
comment|// release the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
argument_list|)
expr_stmt|;
name|releases
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is released by application."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|recoverAndCreateContainer (NMContainerStatus status, RMNode node)
specifier|private
name|RMContainer
name|recoverAndCreateContainer
parameter_list|(
name|NMContainerStatus
name|status
parameter_list|,
name|RMNode
name|node
parameter_list|)
block|{
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|status
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|node
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|status
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|status
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|attemptId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|applications
operator|.
name|get
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|,
name|status
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rmContainer
return|;
block|}
comment|/**    * Recover resource request back from RMContainer when a container is     * preempted before AM pulled the same. If container is pulled by    * AM, then RMContainer will not have resource request to recover.    * @param rmContainer rmContainer    */
DECL|method|recoverResourceRequestForContainer (RMContainer rmContainer)
specifier|private
name|void
name|recoverResourceRequestForContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
init|=
name|rmContainer
operator|.
name|getResourceRequests
argument_list|()
decl_stmt|;
comment|// If container state is moved to ACQUIRED, request will be empty.
if|if
condition|(
name|requests
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Add resource request back to Scheduler ApplicationAttempt.
comment|// We lookup the application-attempt here again using
comment|// getCurrentApplicationAttempt() because there is only one app-attempt at
comment|// any point in the scheduler. But in corner cases, AMs can crash,
comment|// corresponding containers get killed and recovered to the same-attempt,
comment|// but because the app-attempt is extinguished right after, the recovered
comment|// requests don't serve any purpose, but that's okay.
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerAttempt
operator|!=
literal|null
condition|)
block|{
name|schedulerAttempt
operator|.
name|recoverResourceRequestsForContainer
argument_list|(
name|requests
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createReleaseCache ()
specifier|protected
name|void
name|createReleaseCache
parameter_list|()
block|{
comment|// Cleanup the cache after nm expire interval.
operator|new
name|Timer
argument_list|()
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|clearPendingContainerCache
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Release request cache is cleaned up"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|nmExpireInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|clearPendingContainerCache ()
specifier|public
name|void
name|clearPendingContainerCache
parameter_list|()
block|{
for|for
control|(
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
range|:
name|applications
operator|.
name|values
argument_list|()
control|)
block|{
name|T
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|attempt
init|)
block|{
for|for
control|(
name|ContainerId
name|containerId
range|:
name|attempt
operator|.
name|getPendingRelease
argument_list|()
control|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"Scheduler"
argument_list|,
literal|"Trying to release container not owned by app "
operator|+
literal|"or with invalid id."
argument_list|,
name|attempt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|attempt
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
comment|// clean up a completed container
DECL|method|completedContainer (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|public
name|void
name|completedContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerStatus
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" completed with event "
operator|+
name|event
operator|+
literal|", but corresponding RMContainer doesn't exist."
argument_list|)
expr_stmt|;
return|return;
block|}
name|completedContainerInternal
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|// If the container is getting killed in ACQUIRED state, the requester (AM
comment|// for regular containers and RM itself for AM container) will not know what
comment|// happened. Simply add the ResourceRequest back again so that requester
comment|// doesn't need to do anything conditionally.
name|recoverResourceRequestForContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
block|}
comment|// clean up a completed container
DECL|method|completedContainerInternal (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|protected
specifier|abstract
name|void
name|completedContainerInternal
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
function_decl|;
DECL|method|releaseContainers (List<ContainerId> containers, SchedulerApplicationAttempt attempt)
specifier|protected
name|void
name|releaseContainers
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containers
parameter_list|,
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
block|{
for|for
control|(
name|ContainerId
name|containerId
range|:
name|containers
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
operator|<
name|nmExpireInterval
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|containerId
operator|+
literal|" doesn't exist. Add the container"
operator|+
literal|" to the release request cache as it maybe on recovery."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|attempt
init|)
block|{
name|attempt
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|attempt
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"Scheduler"
argument_list|,
literal|"Trying to release container not owned by app or with invalid id."
argument_list|,
name|attempt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerId
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decreaseContainers ( List<SchedContainerChangeRequest> decreaseRequests, SchedulerApplicationAttempt attempt)
specifier|protected
name|void
name|decreaseContainers
parameter_list|(
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
name|decreaseRequests
parameter_list|,
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
block|{
for|for
control|(
name|SchedContainerChangeRequest
name|request
range|:
name|decreaseRequests
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing decrease request:"
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasIncreaseRequest
init|=
name|attempt
operator|.
name|removeIncreaseRequest
argument_list|(
name|request
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasIncreaseRequest
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"While processing decrease request, found a increase request "
operator|+
literal|"for the same container "
operator|+
name|request
operator|.
name|getContainerId
argument_list|()
operator|+
literal|", removed the increase request"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// handle decrease request
name|decreaseContainer
argument_list|(
name|request
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decreaseContainer ( SchedContainerChangeRequest decreaseRequest, SchedulerApplicationAttempt attempt)
specifier|protected
specifier|abstract
name|void
name|decreaseContainer
parameter_list|(
name|SchedContainerChangeRequest
name|decreaseRequest
parameter_list|,
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getSchedulerNode (NodeId nodeId)
specifier|public
name|SchedulerNode
name|getSchedulerNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|moveAllApps (String sourceQueue, String destQueue)
specifier|public
specifier|synchronized
name|void
name|moveAllApps
parameter_list|(
name|String
name|sourceQueue
parameter_list|,
name|String
name|destQueue
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// check if destination queue is a valid leaf queue
try|try
block|{
name|getQueueInfo
argument_list|(
name|destQueue
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// check if source queue is a valid
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|getAppsInQueue
argument_list|(
name|sourceQueue
argument_list|)
decl_stmt|;
if|if
condition|(
name|apps
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Queue: "
operator|+
name|sourceQueue
operator|+
literal|" doesn't exist"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// generate move events for each pending/running app
for|for
control|(
name|ApplicationAttemptId
name|app
range|:
name|apps
control|)
block|{
name|SettableFuture
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppMoveEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|destQueue
argument_list|,
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|killAllAppsInQueue (String queueName)
specifier|public
specifier|synchronized
name|void
name|killAllAppsInQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// check if queue is a valid
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|getAppsInQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|apps
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Queue: "
operator|+
name|queueName
operator|+
literal|" doesn't exist"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// generate kill events for each pending/running app
for|for
control|(
name|ApplicationAttemptId
name|app
range|:
name|apps
control|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
literal|"Application killed due to expiry of reservation queue "
operator|+
name|queueName
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Process resource update on a node.    */
DECL|method|updateNodeResource (RMNode nm, ResourceOption resourceOption)
specifier|public
specifier|synchronized
name|void
name|updateNodeResource
parameter_list|(
name|RMNode
name|nm
parameter_list|,
name|ResourceOption
name|resourceOption
parameter_list|)
block|{
name|SchedulerNode
name|node
init|=
name|getSchedulerNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|newResource
init|=
name|resourceOption
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Resource
name|oldResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldResource
operator|.
name|equals
argument_list|(
name|newResource
argument_list|)
condition|)
block|{
comment|// Notify NodeLabelsManager about this change
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|updateNodeResource
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newResource
argument_list|)
expr_stmt|;
comment|// Log resource change
name|LOG
operator|.
name|info
argument_list|(
literal|"Update resource on node: "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" from: "
operator|+
name|oldResource
operator|+
literal|", to: "
operator|+
name|newResource
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|updateMaximumAllocation
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// update resource to node
name|node
operator|.
name|setTotalResource
argument_list|(
name|newResource
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|,
operator|(
name|N
operator|)
name|node
argument_list|)
expr_stmt|;
name|updateMaximumAllocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// update resource to clusterResource
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|clusterResource
argument_list|,
name|oldResource
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterResource
argument_list|,
name|newResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Log resource change
name|LOG
operator|.
name|warn
argument_list|(
literal|"Update resource on node: "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" with the same resource: "
operator|+
name|newResource
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getSchedulingResourceTypes ()
specifier|public
name|EnumSet
argument_list|<
name|SchedulerResourceTypes
argument_list|>
name|getSchedulingResourceTypes
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPlanQueues ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPlanQueues
parameter_list|()
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support reservations"
argument_list|)
throw|;
block|}
DECL|method|updateMaximumAllocation (SchedulerNode node, boolean add)
specifier|protected
name|void
name|updateMaximumAllocation
parameter_list|(
name|SchedulerNode
name|node
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|Resource
name|totalResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
name|maxAllocWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|add
condition|)
block|{
comment|// added node
name|int
name|nodeMemory
init|=
name|totalResource
operator|.
name|getMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeMemory
operator|>
name|maxNodeMemory
condition|)
block|{
name|maxNodeMemory
operator|=
name|nodeMemory
expr_stmt|;
name|maximumAllocation
operator|.
name|setMemory
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|configuredMaximumAllocation
operator|.
name|getMemory
argument_list|()
argument_list|,
name|maxNodeMemory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nodeVCores
init|=
name|totalResource
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeVCores
operator|>
name|maxNodeVCores
condition|)
block|{
name|maxNodeVCores
operator|=
name|nodeVCores
expr_stmt|;
name|maximumAllocation
operator|.
name|setVirtualCores
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|configuredMaximumAllocation
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|maxNodeVCores
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// removed node
if|if
condition|(
name|maxNodeMemory
operator|==
name|totalResource
operator|.
name|getMemory
argument_list|()
condition|)
block|{
name|maxNodeMemory
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|maxNodeVCores
operator|==
name|totalResource
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
name|maxNodeVCores
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// We only have to iterate through the nodes if the current max memory
comment|// or vcores was equal to the removed node's
if|if
condition|(
name|maxNodeMemory
operator|==
operator|-
literal|1
operator|||
name|maxNodeVCores
operator|==
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|nodeEntry
range|:
name|nodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|nodeMemory
init|=
name|nodeEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getTotalResource
argument_list|()
operator|.
name|getMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeMemory
operator|>
name|maxNodeMemory
condition|)
block|{
name|maxNodeMemory
operator|=
name|nodeMemory
expr_stmt|;
block|}
name|int
name|nodeVCores
init|=
name|nodeEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getTotalResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeVCores
operator|>
name|maxNodeVCores
condition|)
block|{
name|maxNodeVCores
operator|=
name|nodeVCores
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxNodeMemory
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no nodes
name|maximumAllocation
operator|.
name|setMemory
argument_list|(
name|configuredMaximumAllocation
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maximumAllocation
operator|.
name|setMemory
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|configuredMaximumAllocation
operator|.
name|getMemory
argument_list|()
argument_list|,
name|maxNodeMemory
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxNodeVCores
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no nodes
name|maximumAllocation
operator|.
name|setVirtualCores
argument_list|(
name|configuredMaximumAllocation
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maximumAllocation
operator|.
name|setVirtualCores
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|configuredMaximumAllocation
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|maxNodeVCores
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|maxAllocWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|refreshMaximumAllocation (Resource newMaxAlloc)
specifier|protected
name|void
name|refreshMaximumAllocation
parameter_list|(
name|Resource
name|newMaxAlloc
parameter_list|)
block|{
name|maxAllocWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|configuredMaximumAllocation
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|newMaxAlloc
argument_list|)
expr_stmt|;
name|int
name|maxMemory
init|=
name|newMaxAlloc
operator|.
name|getMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxNodeMemory
operator|!=
operator|-
literal|1
condition|)
block|{
name|maxMemory
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxMemory
argument_list|,
name|maxNodeMemory
argument_list|)
expr_stmt|;
block|}
name|int
name|maxVcores
init|=
name|newMaxAlloc
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxNodeVCores
operator|!=
operator|-
literal|1
condition|)
block|{
name|maxVcores
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxVcores
argument_list|,
name|maxNodeVCores
argument_list|)
expr_stmt|;
block|}
name|maximumAllocation
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|,
name|maxVcores
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|maxAllocWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPendingResourceRequestsForAttempt ( ApplicationAttemptId attemptId)
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getPendingResourceRequestsForAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|checkAndGetApplicationPriority (Priority priorityFromContext, String user, String queueName, ApplicationId applicationId)
specifier|public
name|Priority
name|checkAndGetApplicationPriority
parameter_list|(
name|Priority
name|priorityFromContext
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queueName
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Dummy Implementation till Application Priority changes are done in
comment|// specific scheduler.
return|return
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationPriority (Priority newPriority, ApplicationId applicationId)
specifier|public
name|void
name|updateApplicationPriority
parameter_list|(
name|Priority
name|newPriority
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Dummy Implementation till Application Priority changes are done in
comment|// specific scheduler.
block|}
annotation|@
name|Override
DECL|method|getMaxClusterLevelAppPriority ()
specifier|public
name|Priority
name|getMaxClusterLevelAppPriority
parameter_list|()
block|{
return|return
name|maxClusterLevelAppPriority
return|;
block|}
DECL|method|getMaxPriorityFromConf (Configuration conf)
specifier|private
name|Priority
name|getMaxPriorityFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|Priority
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setClusterMaxPriority (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setClusterMaxPriority
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
name|maxClusterLevelAppPriority
operator|=
name|getMaxPriorityFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated the cluste max priority to maxClusterLevelAppPriority = "
operator|+
name|maxClusterLevelAppPriority
argument_list|)
expr_stmt|;
block|}
comment|/**    * Normalize container increase/decrease request, and return    * SchedulerContainerResourceChangeRequest according to given    * ContainerResourceChangeRequest.    *     *<pre>    * - Returns non-null value means validation succeeded    * - Throw exception when any other error happens    *</pre>    */
specifier|private
name|SchedContainerChangeRequest
DECL|method|checkAndNormalizeContainerChangeRequest ( ContainerResourceChangeRequest request, boolean increase)
name|checkAndNormalizeContainerChangeRequest
parameter_list|(
name|ContainerResourceChangeRequest
name|request
parameter_list|,
name|boolean
name|increase
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// We have done a check in ApplicationMasterService, but RMContainer status
comment|// / Node resource could change since AMS won't acquire lock of scheduler.
name|RMServerUtils
operator|.
name|checkAndNormalizeContainerChangeRequest
argument_list|(
name|rmContext
argument_list|,
name|request
argument_list|,
name|increase
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode
init|=
name|getSchedulerNode
argument_list|(
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SchedContainerChangeRequest
argument_list|(
name|schedulerNode
argument_list|,
name|rmContainer
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
DECL|method|checkAndNormalizeContainerChangeRequests ( List<ContainerResourceChangeRequest> changeRequests, boolean increase)
name|checkAndNormalizeContainerChangeRequests
parameter_list|(
name|List
argument_list|<
name|ContainerResourceChangeRequest
argument_list|>
name|changeRequests
parameter_list|,
name|boolean
name|increase
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|changeRequests
operator|||
name|changeRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
name|schedulerChangeRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerResourceChangeRequest
name|r
range|:
name|changeRequests
control|)
block|{
name|SchedContainerChangeRequest
name|sr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sr
operator|=
name|checkAndNormalizeContainerChangeRequest
argument_list|(
name|r
argument_list|,
name|increase
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error happens when checking increase request, Ignoring.."
operator|+
literal|" exception="
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|schedulerChangeRequests
operator|.
name|add
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
return|return
name|schedulerChangeRequests
return|;
block|}
block|}
end_class

end_unit

