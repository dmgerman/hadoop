begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_class
DECL|class|AbstractYarnScheduler
specifier|public
class|class
name|AbstractYarnScheduler
block|{
DECL|field|rmContext
specifier|protected
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|applications
specifier|protected
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
name|applications
decl_stmt|;
DECL|method|getTransferredContainers ( ApplicationAttemptId currentAttempt)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Container
argument_list|>
name|getTransferredContainers
parameter_list|(
name|ApplicationAttemptId
name|currentAttempt
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|currentAttempt
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SchedulerApplication
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|RMApp
name|appImpl
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appImpl
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
return|return
name|containerList
return|;
block|}
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|liveContainers
control|)
block|{
if|if
condition|(
operator|!
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|amContainerId
argument_list|)
condition|)
block|{
name|containerList
operator|.
name|add
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerList
return|;
block|}
DECL|method|getSchedulerApplications ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
name|getSchedulerApplications
parameter_list|()
block|{
return|return
name|applications
return|;
block|}
block|}
end_class

end_unit

