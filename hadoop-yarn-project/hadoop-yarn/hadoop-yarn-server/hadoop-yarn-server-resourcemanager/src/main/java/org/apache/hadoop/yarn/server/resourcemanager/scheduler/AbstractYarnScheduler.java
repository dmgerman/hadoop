begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMCriticalThreadUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingMonitorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerNMDoneChangeResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerRecoverEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeCleanContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeFinishedContainersPulledByAMEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeResourceUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|UpdatedContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivitiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ReleaseContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|OpportunisticContainerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|AbstractYarnScheduler
specifier|public
specifier|abstract
class|class
name|AbstractYarnScheduler
parameter_list|<
name|T
extends|extends
name|SchedulerApplicationAttempt
parameter_list|,
name|N
extends|extends
name|SchedulerNode
parameter_list|>
extends|extends
name|AbstractService
implements|implements
name|ResourceScheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractYarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeTracker
specifier|protected
specifier|final
name|ClusterNodeTracker
argument_list|<
name|N
argument_list|>
name|nodeTracker
init|=
operator|new
name|ClusterNodeTracker
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|minimumAllocation
specifier|protected
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|rmContext
specifier|protected
specifier|volatile
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|maxClusterLevelAppPriority
specifier|private
specifier|volatile
name|Priority
name|maxClusterLevelAppPriority
decl_stmt|;
DECL|field|activitiesManager
specifier|protected
name|ActivitiesManager
name|activitiesManager
decl_stmt|;
DECL|field|schedulerHealth
specifier|protected
name|SchedulerHealth
name|schedulerHealth
init|=
operator|new
name|SchedulerHealth
argument_list|()
decl_stmt|;
DECL|field|lastNodeUpdateTime
specifier|protected
specifier|volatile
name|long
name|lastNodeUpdateTime
decl_stmt|;
comment|// timeout to join when we stop this service
DECL|field|THREAD_JOIN_TIMEOUT_MS
specifier|protected
specifier|final
name|long
name|THREAD_JOIN_TIMEOUT_MS
init|=
literal|1000
decl_stmt|;
DECL|field|clock
specifier|private
specifier|volatile
name|Clock
name|clock
decl_stmt|;
comment|/**    * To enable the update thread, subclasses should set updateInterval to a    * positive value during {@link #serviceInit(Configuration)}.    */
DECL|field|updateInterval
specifier|protected
name|long
name|updateInterval
init|=
operator|-
literal|1L
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|updateThread
name|Thread
name|updateThread
decl_stmt|;
DECL|field|updateThreadMonitor
specifier|private
specifier|final
name|Object
name|updateThreadMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/*    * All schedulers which are inheriting AbstractYarnScheduler should use    * concurrent version of 'applications' map.    */
DECL|field|applications
specifier|protected
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
argument_list|>
name|applications
decl_stmt|;
DECL|field|nmExpireInterval
specifier|protected
name|int
name|nmExpireInterval
decl_stmt|;
DECL|field|nmHeartbeatInterval
specifier|protected
name|long
name|nmHeartbeatInterval
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ALLOCATION
specifier|protected
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
comment|/*    * Use writeLock for any of operations below:    * - queue change (hierarchy / configuration / container allocation)    * - application(add/remove/allocate-container, but not include container    *   finish)    * - node (add/remove/change-resource/container-allocation, but not include    *   container finish)    */
DECL|field|writeLock
specifier|protected
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
comment|// If set to true, then ALL container updates will be automatically sent to
comment|// the NM in the next heartbeat.
DECL|field|autoUpdateContainers
specifier|private
name|boolean
name|autoUpdateContainers
init|=
literal|false
decl_stmt|;
DECL|field|schedulingMonitorManager
specifier|protected
name|SchedulingMonitorManager
name|schedulingMonitorManager
init|=
operator|new
name|SchedulingMonitorManager
argument_list|()
decl_stmt|;
comment|/**    * Construct the service.    *    * @param name service name    */
DECL|method|AbstractYarnScheduler (String name)
specifier|public
name|AbstractYarnScheduler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|clock
operator|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|nmExpireInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
name|nmHeartbeatInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|)
expr_stmt|;
name|long
name|configuredMaximumAllocationWaitTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|)
decl_stmt|;
name|nodeTracker
operator|.
name|setConfiguredMaxAllocationWaitTime
argument_list|(
name|configuredMaximumAllocationWaitTime
argument_list|)
expr_stmt|;
name|maxClusterLevelAppPriority
operator|=
name|getMaxPriorityFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createReleaseCache
argument_list|()
expr_stmt|;
name|autoUpdateContainers
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AUTO_UPDATE_CONTAINERS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AUTO_UPDATE_CONTAINERS
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateInterval
operator|>
literal|0
condition|)
block|{
name|updateThread
operator|=
operator|new
name|UpdateThread
argument_list|()
expr_stmt|;
name|updateThread
operator|.
name|setName
argument_list|(
literal|"SchedulerUpdateThread"
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|RMCriticalThreadUncaughtExceptionHandler
argument_list|(
name|rmContext
argument_list|)
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|updateThread
operator|!=
literal|null
condition|)
block|{
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|schedulingMonitorManager
operator|.
name|startAll
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|updateThread
operator|!=
literal|null
condition|)
block|{
name|updateThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|updateThread
operator|.
name|join
argument_list|(
name|THREAD_JOIN_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
name|schedulingMonitorManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNodeTracker ()
specifier|public
name|ClusterNodeTracker
argument_list|<
name|N
argument_list|>
name|getNodeTracker
parameter_list|()
block|{
return|return
name|nodeTracker
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getSchedulingMonitorManager ()
specifier|public
name|SchedulingMonitorManager
name|getSchedulingMonitorManager
parameter_list|()
block|{
return|return
name|schedulingMonitorManager
return|;
block|}
comment|/*    * YARN-3136 removed synchronized lock for this method for performance    * purposes    */
DECL|method|getTransferredContainers ( ApplicationAttemptId currentAttempt)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getTransferredContainers
parameter_list|(
name|ApplicationAttemptId
name|currentAttempt
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|currentAttempt
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
return|return
name|containerList
return|;
block|}
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|pullContainersToTransfer
argument_list|()
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
literal|null
decl_stmt|;
comment|// For UAM, amContainer would be null
if|if
condition|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|amContainerId
operator|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|liveContainers
control|)
block|{
if|if
condition|(
operator|!
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|amContainerId
argument_list|)
condition|)
block|{
name|containerList
operator|.
name|add
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerList
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
argument_list|>
DECL|method|getSchedulerApplications ()
name|getSchedulerApplications
parameter_list|()
block|{
return|return
name|applications
return|;
block|}
comment|/**    * Add blacklisted NodeIds to the list that is passed.    *    * @param app application attempt.    */
DECL|method|getBlacklistedNodes (final SchedulerApplicationAttempt app)
specifier|public
name|List
argument_list|<
name|N
argument_list|>
name|getBlacklistedNodes
parameter_list|(
specifier|final
name|SchedulerApplicationAttempt
name|app
parameter_list|)
block|{
name|NodeFilter
name|nodeFilter
init|=
operator|new
name|NodeFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|SchedulerNode
name|node
parameter_list|)
block|{
return|return
name|SchedulerAppUtils
operator|.
name|isPlaceBlacklisted
argument_list|(
name|app
argument_list|,
name|node
argument_list|,
name|LOG
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|nodeTracker
operator|.
name|getNodes
argument_list|(
name|nodeFilter
argument_list|)
return|;
block|}
DECL|method|getNodes (final NodeFilter filter)
specifier|public
name|List
argument_list|<
name|N
argument_list|>
name|getNodes
parameter_list|(
specifier|final
name|NodeFilter
name|filter
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|getNodes
argument_list|(
name|filter
argument_list|)
return|;
block|}
DECL|method|shouldContainersBeAutoUpdated ()
specifier|public
name|boolean
name|shouldContainersBeAutoUpdated
parameter_list|()
block|{
return|return
name|this
operator|.
name|autoUpdateContainers
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterResource ()
specifier|public
name|Resource
name|getClusterResource
parameter_list|()
block|{
return|return
name|nodeTracker
operator|.
name|getClusterCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimumResourceCapability ()
specifier|public
name|Resource
name|getMinimumResourceCapability
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability ()
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|()
block|{
return|return
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability (String queueName)
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
name|getMaximumResourceCapability
argument_list|()
return|;
block|}
DECL|method|initMaximumResourceCapability (Resource maximumAllocation)
specifier|protected
name|void
name|initMaximumResourceCapability
parameter_list|(
name|Resource
name|maximumAllocation
parameter_list|)
block|{
name|nodeTracker
operator|.
name|setConfiguredMaxAllocation
argument_list|(
name|maximumAllocation
argument_list|)
expr_stmt|;
block|}
DECL|method|getSchedulerHealth ()
specifier|public
name|SchedulerHealth
name|getSchedulerHealth
parameter_list|()
block|{
return|return
name|this
operator|.
name|schedulerHealth
return|;
block|}
DECL|method|setLastNodeUpdateTime (long time)
specifier|protected
name|void
name|setLastNodeUpdateTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|lastNodeUpdateTime
operator|=
name|time
expr_stmt|;
block|}
DECL|method|getLastNodeUpdateTime ()
specifier|public
name|long
name|getLastNodeUpdateTime
parameter_list|()
block|{
return|return
name|lastNodeUpdateTime
return|;
block|}
DECL|method|containerLaunchedOnNode ( ContainerId containerId, SchedulerNode node)
specifier|protected
name|void
name|containerLaunchedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SchedulerNode
name|node
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Get the application for the finished container
name|SchedulerApplicationAttempt
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" launched container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|application
operator|.
name|containerLaunchedOnNode
argument_list|(
name|containerId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|containerStarted
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|containerIncreasedOnNode (ContainerId containerId, SchedulerNode node, Container increasedContainerReportedByNM)
specifier|protected
name|void
name|containerIncreasedOnNode
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Container
name|increasedContainerReportedByNM
parameter_list|)
block|{
comment|/*      * No lock is required, as this method is protected by scheduler's writeLock      */
comment|// Get the application for the finished container
name|SchedulerApplicationAttempt
name|application
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown application "
operator|+
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" increased container "
operator|+
name|containerId
operator|+
literal|" on node: "
operator|+
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
comment|// Some unknown container sneaked into the system. Kill it.
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerNMDoneChangeResourceEvent
argument_list|(
name|containerId
argument_list|,
name|increasedContainerReportedByNM
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Rename it to getCurrentApplicationAttempt
DECL|method|getApplicationAttempt (ApplicationAttemptId applicationAttemptId)
specifier|public
name|T
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerAppInfo ( ApplicationAttemptId appAttemptId)
specifier|public
name|SchedulerAppReport
name|getSchedulerAppInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for appInfo of unknown attempt {}"
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SchedulerAppReport
argument_list|(
name|attempt
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAppResourceUsageReport ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationResourceUsageReport
name|getAppResourceUsageReport
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for appInfo of unknown attempt {}"
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|attempt
operator|.
name|getResourceUsageReport
argument_list|()
return|;
block|}
DECL|method|getCurrentAttemptForContainer (ContainerId containerId)
specifier|public
name|T
name|getCurrentAttemptForContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|getApplicationAttempt
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRMContainer (ContainerId containerId)
specifier|public
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
operator|(
name|attempt
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|attempt
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|getNodeReport
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|moveApplication (ApplicationId appId, String newQueue)
specifier|public
name|String
name|moveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support moving apps between queues"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|preValidateMoveApplication (ApplicationId appId, String newQueue)
specifier|public
name|void
name|preValidateMoveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support pre-validation of moving apps between queues"
argument_list|)
throw|;
block|}
DECL|method|removeQueue (String queueName)
specifier|public
name|void
name|removeQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support removing queues"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|addQueue (Queue newQueue)
specifier|public
name|void
name|addQueue
parameter_list|(
name|Queue
name|newQueue
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setEntitlement (String queue, QueueEntitlement entitlement)
specifier|public
name|void
name|setEntitlement
parameter_list|(
name|String
name|queue
parameter_list|,
name|QueueEntitlement
name|entitlement
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support this operation"
argument_list|)
throw|;
block|}
DECL|method|killOrphanContainerOnNode (RMNode node, NMContainerStatus container)
specifier|private
name|void
name|killOrphanContainerOnNode
parameter_list|(
name|RMNode
name|node
parameter_list|,
name|NMContainerStatus
name|container
parameter_list|)
block|{
if|if
condition|(
operator|!
name|container
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeCleanContainerEvent
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recoverContainersOnNode (List<NMContainerStatus> containerReports, RMNode nm)
specifier|public
name|void
name|recoverContainersOnNode
parameter_list|(
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerReports
parameter_list|,
name|RMNode
name|nm
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|rmContext
operator|.
name|isWorkPreservingRecoveryEnabled
argument_list|()
operator|||
name|containerReports
operator|==
literal|null
operator|||
operator|(
name|containerReports
operator|!=
literal|null
operator|&&
name|containerReports
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|NMContainerStatus
name|container
range|:
name|containerReports
control|)
block|{
name|ApplicationId
name|appId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Skip recovering container "
operator|+
name|container
operator|+
literal|" for unknown application."
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|schedulerApp
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerApp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip recovering container  "
operator|+
name|container
operator|+
literal|" for unknown SchedulerApplication. "
operator|+
literal|"Application current state is "
operator|+
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering container "
operator|+
name|container
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|schedulerApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
condition|)
block|{
comment|// Do not recover containers for stopped attempt or previous attempt.
if|if
condition|(
name|schedulerAttempt
operator|.
name|isStopped
argument_list|()
operator|||
operator|!
name|schedulerAttempt
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip recovering container "
operator|+
name|container
operator|+
literal|" for already stopped attempt."
argument_list|)
expr_stmt|;
name|killOrphanContainerOnNode
argument_list|(
name|nm
argument_list|,
name|container
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// create container
name|RMContainer
name|rmContainer
init|=
name|recoverAndCreateContainer
argument_list|(
name|container
argument_list|,
name|nm
argument_list|,
name|schedulerApp
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
comment|// recover RMContainer
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerRecoverEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
comment|// recover scheduler node
name|SchedulerNode
name|schedulerNode
init|=
name|nodeTracker
operator|.
name|getNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|recoverContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// recover queue: update headroom etc.
name|Queue
name|queue
init|=
name|schedulerAttempt
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|recoverContainer
argument_list|(
name|getClusterResource
argument_list|()
argument_list|,
name|schedulerAttempt
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// recover scheduler attempt
name|schedulerAttempt
operator|.
name|recoverContainer
argument_list|(
name|schedulerNode
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// set master container for the current running AMContainer for this
comment|// attempt.
name|RMAppAttempt
name|appAttempt
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|!=
literal|null
condition|)
block|{
name|Container
name|masterContainer
init|=
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
decl_stmt|;
comment|// Mark current running AMContainer's RMContainer based on the master
comment|// container ID stored in AppAttempt.
if|if
condition|(
name|masterContainer
operator|!=
literal|null
operator|&&
name|masterContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setAMContainer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schedulerAttempt
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
comment|// release the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is released by application."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|recoverAndCreateContainer (NMContainerStatus status, RMNode node, String queueName)
specifier|private
name|RMContainer
name|recoverAndCreateContainer
parameter_list|(
name|NMContainerStatus
name|status
parameter_list|,
name|RMNode
name|node
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|status
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|node
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|status
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|status
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|container
operator|.
name|setVersion
argument_list|(
name|status
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setExecutionType
argument_list|(
name|status
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setAllocationRequestId
argument_list|(
name|status
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setAllocationTags
argument_list|(
name|status
operator|.
name|getAllocationTags
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|SchedulerRequestKey
operator|.
name|extractFrom
argument_list|(
name|container
argument_list|)
argument_list|,
name|attemptId
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|applications
operator|.
name|get
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|,
name|status
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setQueueName
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
return|return
name|rmContainer
return|;
block|}
comment|/**    * Recover resource request back from RMContainer when a container is    * preempted before AM pulled the same. If container is pulled by    * AM, then RMContainer will not have resource request to recover.    * @param rmContainer rmContainer    */
DECL|method|recoverResourceRequestForContainer (RMContainer rmContainer)
specifier|private
name|void
name|recoverResourceRequestForContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|ContainerRequest
name|containerRequest
init|=
name|rmContainer
operator|.
name|getContainerRequest
argument_list|()
decl_stmt|;
comment|// If container state is moved to ACQUIRED, request will be empty.
if|if
condition|(
name|containerRequest
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Add resource request back to Scheduler ApplicationAttempt.
comment|// We lookup the application-attempt here again using
comment|// getCurrentApplicationAttempt() because there is only one app-attempt at
comment|// any point in the scheduler. But in corner cases, AMs can crash,
comment|// corresponding containers get killed and recovered to the same-attempt,
comment|// but because the app-attempt is extinguished right after, the recovered
comment|// requests don't serve any purpose, but that's okay.
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerAttempt
operator|!=
literal|null
condition|)
block|{
name|schedulerAttempt
operator|.
name|recoverResourceRequestsForContainer
argument_list|(
name|containerRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createReleaseCache ()
specifier|protected
name|void
name|createReleaseCache
parameter_list|()
block|{
comment|// Cleanup the cache after nm expire interval.
operator|new
name|Timer
argument_list|()
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|clearPendingContainerCache
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Release request cache is cleaned up"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|nmExpireInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|clearPendingContainerCache ()
specifier|public
name|void
name|clearPendingContainerCache
parameter_list|()
block|{
for|for
control|(
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
range|:
name|applications
operator|.
name|values
argument_list|()
control|)
block|{
name|T
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ContainerId
name|containerId
range|:
name|attempt
operator|.
name|getPendingRelease
argument_list|()
control|)
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"Scheduler"
argument_list|,
literal|"Trying to release container not owned by app "
operator|+
literal|"or with invalid id."
argument_list|,
name|attempt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|attempt
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
comment|// clean up a completed container
DECL|method|completedContainer (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|public
name|void
name|completedContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerStatus
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" completed with event "
operator|+
name|event
operator|+
literal|", but corresponding RMContainer doesn't exist."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rmContainer
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|GUARANTEED
condition|)
block|{
name|completedContainerInternal
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|completeOustandingUpdatesWhichAreReserved
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ContainerId
name|containerId
init|=
name|rmContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerAttempt
operator|!=
literal|null
condition|)
block|{
name|schedulerAttempt
operator|.
name|removeRMContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed container: {} in state: {} event:{}"
argument_list|,
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getState
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|SchedulerNode
name|node
init|=
name|getSchedulerNode
argument_list|(
name|rmContainer
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|releaseContainer
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the container is getting killed in ACQUIRED state, the requester (AM
comment|// for regular containers and RM itself for AM container) will not know what
comment|// happened. Simply add the ResourceRequest back again so that requester
comment|// doesn't need to do anything conditionally.
name|recoverResourceRequestForContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
block|}
comment|// Optimization:
comment|// Check if there are in-flight container updates and complete the
comment|// associated temp containers. These are removed when the app completes,
comment|// but removing them when the actual container completes would allow the
comment|// scheduler to reallocate those resources sooner.
DECL|method|completeOustandingUpdatesWhichAreReserved ( RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|private
name|void
name|completeOustandingUpdatesWhichAreReserved
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
name|N
name|schedulerNode
init|=
name|getSchedulerNode
argument_list|(
name|rmContainer
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerNode
operator|!=
literal|null
operator|&&
name|schedulerNode
operator|.
name|getReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RMContainer
name|resContainer
init|=
name|schedulerNode
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|resContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContainerId
name|containerToUpdate
init|=
name|resContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
operator|.
name|getContainerToUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerToUpdate
operator|!=
literal|null
operator|&&
name|containerToUpdate
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|completedContainerInternal
argument_list|(
name|resContainer
argument_list|,
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|resContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getState
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// clean up a completed container
DECL|method|completedContainerInternal (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|protected
specifier|abstract
name|void
name|completedContainerInternal
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
function_decl|;
DECL|method|releaseContainers (List<ContainerId> containers, SchedulerApplicationAttempt attempt)
specifier|protected
name|void
name|releaseContainers
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containers
parameter_list|,
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
block|{
for|for
control|(
name|ContainerId
name|containerId
range|:
name|containers
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
operator|<
name|nmExpireInterval
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|containerId
operator|+
literal|" doesn't exist. Add the container"
operator|+
literal|" to the release request cache as it maybe on recovery."
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RMAuditLogger
operator|.
name|logFailure
argument_list|(
name|attempt
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"Unauthorized access or invalid container"
argument_list|,
literal|"Scheduler"
argument_list|,
literal|"Trying to release container not owned by app or with invalid id."
argument_list|,
name|attempt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|containerId
argument_list|,
name|SchedulerUtils
operator|.
name|RELEASED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSchedulerNode (NodeId nodeId)
specifier|public
name|N
name|getSchedulerNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|moveAllApps (String sourceQueue, String destQueue)
specifier|public
name|void
name|moveAllApps
parameter_list|(
name|String
name|sourceQueue
parameter_list|,
name|String
name|destQueue
parameter_list|)
throws|throws
name|YarnException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// check if destination queue is a valid leaf queue
try|try
block|{
name|getQueueInfo
argument_list|(
name|destQueue
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// check if source queue is a valid
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|getAppsInQueue
argument_list|(
name|sourceQueue
argument_list|)
decl_stmt|;
if|if
condition|(
name|apps
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Queue: "
operator|+
name|sourceQueue
operator|+
literal|" doesn't exist"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// generate move events for each pending/running app
for|for
control|(
name|ApplicationAttemptId
name|appAttemptId
range|:
name|apps
control|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppManagerEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|destQueue
argument_list|,
name|RMAppManagerEventType
operator|.
name|APP_MOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|killAllAppsInQueue (String queueName)
specifier|public
name|void
name|killAllAppsInQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// check if queue is a valid
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|getAppsInQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|apps
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The specified Queue: "
operator|+
name|queueName
operator|+
literal|" doesn't exist"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// generate kill events for each pending/running app
for|for
control|(
name|ApplicationAttemptId
name|app
range|:
name|apps
control|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
literal|"Application killed due to expiry of reservation queue "
operator|+
name|queueName
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Process resource update on a node.    */
DECL|method|updateNodeResource (RMNode nm, ResourceOption resourceOption)
specifier|public
name|void
name|updateNodeResource
parameter_list|(
name|RMNode
name|nm
parameter_list|,
name|ResourceOption
name|resourceOption
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|SchedulerNode
name|node
init|=
name|getSchedulerNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|newResource
init|=
name|resourceOption
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Resource
name|oldResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldResource
operator|.
name|equals
argument_list|(
name|newResource
argument_list|)
condition|)
block|{
comment|// Notify NodeLabelsManager about this change
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|updateNodeResource
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newResource
argument_list|)
expr_stmt|;
comment|// Log resource change
name|LOG
operator|.
name|info
argument_list|(
literal|"Update resource on node: "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" from: "
operator|+
name|oldResource
operator|+
literal|", to: "
operator|+
name|newResource
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resource to node
name|node
operator|.
name|updateTotalResource
argument_list|(
name|newResource
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
operator|(
name|N
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Log resource change
name|LOG
operator|.
name|warn
argument_list|(
literal|"Update resource on node: "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" with the same resource: "
operator|+
name|newResource
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getSchedulingResourceTypes ()
specifier|public
name|EnumSet
argument_list|<
name|SchedulerResourceTypes
argument_list|>
name|getSchedulingResourceTypes
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPlanQueues ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPlanQueues
parameter_list|()
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support reservations"
argument_list|)
throw|;
block|}
DECL|method|refreshMaximumAllocation (Resource newMaxAlloc)
specifier|protected
name|void
name|refreshMaximumAllocation
parameter_list|(
name|Resource
name|newMaxAlloc
parameter_list|)
block|{
name|nodeTracker
operator|.
name|setConfiguredMaxAllocation
argument_list|(
name|newMaxAlloc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPendingResourceRequestsForAttempt ( ApplicationAttemptId attemptId)
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getPendingResourceRequestsForAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPendingSchedulingRequestsForAttempt ( ApplicationAttemptId attemptId)
specifier|public
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|getPendingSchedulingRequestsForAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|!=
literal|null
condition|)
block|{
return|return
name|attempt
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllSchedulingRequests
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|checkAndGetApplicationPriority ( Priority priorityRequestedByApp, UserGroupInformation user, String queueName, ApplicationId applicationId)
specifier|public
name|Priority
name|checkAndGetApplicationPriority
parameter_list|(
name|Priority
name|priorityRequestedByApp
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|String
name|queueName
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Dummy Implementation till Application Priority changes are done in
comment|// specific scheduler.
return|return
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationPriority (Priority newPriority, ApplicationId applicationId, SettableFuture<Object> future, UserGroupInformation user)
specifier|public
name|Priority
name|updateApplicationPriority
parameter_list|(
name|Priority
name|newPriority
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|SettableFuture
argument_list|<
name|Object
argument_list|>
name|future
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Dummy Implementation till Application Priority changes are done in
comment|// specific scheduler.
return|return
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxClusterLevelAppPriority ()
specifier|public
name|Priority
name|getMaxClusterLevelAppPriority
parameter_list|()
block|{
return|return
name|maxClusterLevelAppPriority
return|;
block|}
DECL|method|getMaxPriorityFromConf (Configuration conf)
specifier|private
name|Priority
name|getMaxPriorityFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|Priority
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setClusterMaxPriority (Configuration conf)
specifier|public
name|void
name|setClusterMaxPriority
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
name|maxClusterLevelAppPriority
operator|=
name|getMaxPriorityFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated the cluste max priority to maxClusterLevelAppPriority = "
operator|+
name|maxClusterLevelAppPriority
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sanity check increase/decrease request, and return    * SchedulerContainerResourceChangeRequest according to given    * UpdateContainerRequest.    *    *<pre>    * - Returns non-null value means validation succeeded    * - Throw exception when any other error happens    *</pre>    */
DECL|method|createSchedContainerChangeRequest ( UpdateContainerRequest request, boolean increase)
specifier|private
name|SchedContainerChangeRequest
name|createSchedContainerChangeRequest
parameter_list|(
name|UpdateContainerRequest
name|request
parameter_list|,
name|boolean
name|increase
parameter_list|)
throws|throws
name|YarnException
block|{
name|ContainerId
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|rmContainer
condition|)
block|{
name|String
name|msg
init|=
literal|"Failed to get rmContainer for "
operator|+
operator|(
name|increase
condition|?
literal|"increase"
else|:
literal|"decrease"
operator|)
operator|+
literal|" request, with container-id="
operator|+
name|containerId
decl_stmt|;
throw|throw
operator|new
name|InvalidResourceRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|SchedulerNode
name|schedulerNode
init|=
name|getSchedulerNode
argument_list|(
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SchedContainerChangeRequest
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|schedulerNode
argument_list|,
name|rmContainer
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
DECL|method|createSchedContainerChangeRequests ( List<UpdateContainerRequest> changeRequests, boolean increase)
name|createSchedContainerChangeRequests
parameter_list|(
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|changeRequests
parameter_list|,
name|boolean
name|increase
parameter_list|)
block|{
name|List
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
name|schedulerChangeRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|SchedContainerChangeRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateContainerRequest
name|r
range|:
name|changeRequests
control|)
block|{
name|SchedContainerChangeRequest
name|sr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sr
operator|=
name|createSchedContainerChangeRequest
argument_list|(
name|r
argument_list|,
name|increase
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error happens when checking increase request, Ignoring.."
operator|+
literal|" exception="
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|schedulerChangeRequests
operator|.
name|add
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
return|return
name|schedulerChangeRequests
return|;
block|}
DECL|method|getActivitiesManager ()
specifier|public
name|ActivitiesManager
name|getActivitiesManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|activitiesManager
return|;
block|}
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setClock (Clock clock)
specifier|public
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Lock
argument_list|(
name|Lock
operator|.
name|NoLock
operator|.
name|class
argument_list|)
DECL|method|getNode (NodeId nodeId)
specifier|public
name|SchedulerNode
name|getNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
comment|/**    * Get lists of new containers from NodeManager and process them.    * @param nm The RMNode corresponding to the NodeManager    * @param schedulerNode schedulerNode    * @return list of completed containers    */
DECL|method|updateNewContainerInfo (RMNode nm, SchedulerNode schedulerNode)
specifier|private
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|updateNewContainerInfo
parameter_list|(
name|RMNode
name|nm
parameter_list|,
name|SchedulerNode
name|schedulerNode
parameter_list|)
block|{
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|containerInfoList
init|=
name|nm
operator|.
name|pullContainerUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|newlyLaunchedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|ContainerStatus
argument_list|>
argument_list|>
name|updateExistContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdatedContainerInfo
name|containerInfo
range|:
name|containerInfoList
control|)
block|{
name|newlyLaunchedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getNewlyLaunchedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|completedContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|updateExistContainers
operator|.
name|addAll
argument_list|(
name|containerInfo
operator|.
name|getUpdateContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Processing the newly launched containers
for|for
control|(
name|ContainerStatus
name|launchedContainer
range|:
name|newlyLaunchedContainers
control|)
block|{
name|containerLaunchedOnNode
argument_list|(
name|launchedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|// Processing the newly increased containers
name|List
argument_list|<
name|Container
argument_list|>
name|newlyIncreasedContainers
init|=
name|nm
operator|.
name|pullNewlyIncreasedContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|newlyIncreasedContainers
control|)
block|{
name|containerIncreasedOnNode
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|schedulerNode
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
comment|// Processing the update exist containers
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|ContainerStatus
argument_list|>
name|c
range|:
name|updateExistContainers
control|)
block|{
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
operator|||
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|RMContainer
name|rmContainer
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// exposed ports are already set for the container, skip
if|if
condition|(
name|rmContainer
operator|.
name|getExposedPorts
argument_list|()
operator|!=
literal|null
operator|&&
name|rmContainer
operator|.
name|getExposedPorts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
continue|continue;
block|}
name|String
name|strExposedPorts
init|=
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|getExposedPorts
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|strExposedPorts
operator|&&
operator|!
name|strExposedPorts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Gson
name|gson
init|=
operator|new
name|Gson
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|exposedPorts
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|strExposedPorts
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"update exist container "
operator|+
name|containerId
operator|.
name|getContainerId
argument_list|()
operator|+
literal|", strExposedPorts = "
operator|+
name|strExposedPorts
argument_list|)
expr_stmt|;
name|rmContainer
operator|.
name|setExposedPorts
argument_list|(
name|exposedPorts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|completedContainers
return|;
block|}
comment|/**    * Process completed container list.    * @param completedContainers Extracted list of completed containers    * @param releasedResources Reference resource object for completed containers    * @param nodeId NodeId corresponding to the NodeManager    * @param schedulerNode schedulerNode    * @return The total number of released containers    */
DECL|method|updateCompletedContainers (List<ContainerStatus> completedContainers, Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode)
specifier|private
name|int
name|updateCompletedContainers
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
parameter_list|,
name|Resource
name|releasedResources
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|SchedulerNode
name|schedulerNode
parameter_list|)
block|{
name|int
name|releasedContainers
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|untrackedContainerIdList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|completedContainer
range|:
name|completedContainers
control|)
block|{
name|ContainerId
name|containerId
init|=
name|completedContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container FINISHED: {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|RMContainer
name|container
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|completedContainer
argument_list|(
name|container
argument_list|,
name|completedContainer
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
if|if
condition|(
name|schedulerNode
operator|!=
literal|null
condition|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containerId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|releasedContainers
operator|++
expr_stmt|;
name|Resource
name|ars
init|=
name|container
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|ars
operator|!=
literal|null
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|releasedResources
argument_list|,
name|ars
argument_list|)
expr_stmt|;
block|}
name|Resource
name|rrs
init|=
name|container
operator|.
name|getReservedResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|rrs
operator|!=
literal|null
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|releasedResources
argument_list|,
name|rrs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Add containers which are untracked by RM.
name|untrackedContainerIdList
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Acknowledge NM to remove RM-untracked-containers from NM context.
if|if
condition|(
operator|!
name|untrackedContainerIdList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeFinishedContainersPulledByAMEvent
argument_list|(
name|nodeId
argument_list|,
name|untrackedContainerIdList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|releasedContainers
return|;
block|}
comment|/**    * Update schedulerHealth information.    * @param releasedResources Reference resource object for completed containers    * @param releasedContainers Count of released containers    */
DECL|method|updateSchedulerHealthInformation (Resource releasedResources, int releasedContainers)
specifier|protected
name|void
name|updateSchedulerHealthInformation
parameter_list|(
name|Resource
name|releasedResources
parameter_list|,
name|int
name|releasedContainers
parameter_list|)
block|{
name|schedulerHealth
operator|.
name|updateSchedulerReleaseDetails
argument_list|(
name|getLastNodeUpdateTime
argument_list|()
argument_list|,
name|releasedResources
argument_list|)
expr_stmt|;
name|schedulerHealth
operator|.
name|updateSchedulerReleaseCounts
argument_list|(
name|releasedContainers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update container and utilization information on the NodeManager.    * @param nm The NodeManager to update    * @param schedulerNode schedulerNode    */
DECL|method|updateNodeResourceUtilization (RMNode nm, SchedulerNode schedulerNode)
specifier|protected
name|void
name|updateNodeResourceUtilization
parameter_list|(
name|RMNode
name|nm
parameter_list|,
name|SchedulerNode
name|schedulerNode
parameter_list|)
block|{
comment|// Updating node resource utilization
name|schedulerNode
operator|.
name|setAggregatedContainersUtilization
argument_list|(
name|nm
operator|.
name|getAggregatedContainersUtilization
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|setNodeUtilization
argument_list|(
name|nm
operator|.
name|getNodeUtilization
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process a heartbeat update from a node.    * @param nm The RMNode corresponding to the NodeManager    */
DECL|method|nodeUpdate (RMNode nm)
specifier|protected
name|void
name|nodeUpdate
parameter_list|(
name|RMNode
name|nm
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"nodeUpdate: {} cluster capacity: {}"
argument_list|,
name|nm
argument_list|,
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Process new container information
comment|// NOTICE: it is possible to not find the NodeID as a node can be
comment|// decommissioned at the same time. Skip updates if node is null.
name|SchedulerNode
name|schedulerNode
init|=
name|getNode
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
name|updateNewContainerInfo
argument_list|(
name|nm
argument_list|,
name|schedulerNode
argument_list|)
decl_stmt|;
comment|// Notify Scheduler Node updated.
if|if
condition|(
name|schedulerNode
operator|!=
literal|null
condition|)
block|{
name|schedulerNode
operator|.
name|notifyNodeUpdate
argument_list|()
expr_stmt|;
block|}
comment|// Process completed containers
name|Resource
name|releasedResources
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|releasedContainers
init|=
name|updateCompletedContainers
argument_list|(
name|completedContainers
argument_list|,
name|releasedResources
argument_list|,
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|schedulerNode
argument_list|)
decl_stmt|;
comment|// If the node is decommissioning, send an update to have the total
comment|// resource equal to the used resource, so no available resource to
comment|// schedule.
if|if
condition|(
name|nm
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
operator|&&
name|schedulerNode
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeResourceUpdateEvent
argument_list|(
name|nm
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateSchedulerHealthInformation
argument_list|(
name|releasedResources
argument_list|,
name|releasedContainers
argument_list|)
expr_stmt|;
if|if
condition|(
name|schedulerNode
operator|!=
literal|null
condition|)
block|{
name|updateNodeResourceUtilization
argument_list|(
name|nm
argument_list|,
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|// Now node data structures are up-to-date and ready for scheduling.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node being looked for scheduling "
operator|+
name|nm
operator|+
literal|" availableResource: "
operator|+
operator|(
name|schedulerNode
operator|==
literal|null
condition|?
literal|"unknown (decommissioned)"
else|:
name|schedulerNode
operator|.
name|getUnallocatedResource
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNormalizedResource (Resource requestedResource, Resource maxResourceCapability)
specifier|public
name|Resource
name|getNormalizedResource
parameter_list|(
name|Resource
name|requestedResource
parameter_list|,
name|Resource
name|maxResourceCapability
parameter_list|)
block|{
return|return
name|SchedulerUtils
operator|.
name|getNormalizedResource
argument_list|(
name|requestedResource
argument_list|,
name|getResourceCalculator
argument_list|()
argument_list|,
name|getMinimumResourceCapability
argument_list|()
argument_list|,
name|maxResourceCapability
argument_list|,
name|getMinimumResourceCapability
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Normalize a list of resource requests.    *    * @param asks resource requests    */
DECL|method|normalizeResourceRequests (List<ResourceRequest> asks)
specifier|protected
name|void
name|normalizeResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
parameter_list|)
block|{
name|normalizeResourceRequests
argument_list|(
name|asks
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Normalize a list of resource requests    * using queue maximum resource allocations.    * @param asks resource requests    */
DECL|method|normalizeResourceRequests (List<ResourceRequest> asks, String queueName)
specifier|protected
name|void
name|normalizeResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|Resource
name|maxAllocation
init|=
name|getMaximumResourceCapability
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|ask
range|:
name|asks
control|)
block|{
name|ask
operator|.
name|setCapability
argument_list|(
name|getNormalizedResource
argument_list|(
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|,
name|maxAllocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleContainerUpdates ( SchedulerApplicationAttempt appAttempt, ContainerUpdates updates)
specifier|protected
name|void
name|handleContainerUpdates
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|,
name|ContainerUpdates
name|updates
parameter_list|)
block|{
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|promotionRequests
init|=
name|updates
operator|.
name|getPromotionRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|promotionRequests
operator|!=
literal|null
operator|&&
operator|!
name|promotionRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Promotion Update requests : "
operator|+
name|promotionRequests
argument_list|)
expr_stmt|;
comment|// Promotion is technically an increase request from
comment|// 0 resources to target resources.
name|handleIncreaseRequests
argument_list|(
name|appAttempt
argument_list|,
name|promotionRequests
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|increaseRequests
init|=
name|updates
operator|.
name|getIncreaseRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|increaseRequests
operator|!=
literal|null
operator|&&
operator|!
name|increaseRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource increase requests : "
operator|+
name|increaseRequests
argument_list|)
expr_stmt|;
name|handleIncreaseRequests
argument_list|(
name|appAttempt
argument_list|,
name|increaseRequests
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|demotionRequests
init|=
name|updates
operator|.
name|getDemotionRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|demotionRequests
operator|!=
literal|null
operator|&&
operator|!
name|demotionRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Demotion Update requests : "
operator|+
name|demotionRequests
argument_list|)
expr_stmt|;
comment|// Demotion is technically a decrease request from initial
comment|// to 0 resources
name|handleDecreaseRequests
argument_list|(
name|appAttempt
argument_list|,
name|demotionRequests
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|decreaseRequests
init|=
name|updates
operator|.
name|getDecreaseRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|decreaseRequests
operator|!=
literal|null
operator|&&
operator|!
name|decreaseRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource decrease requests : "
operator|+
name|decreaseRequests
argument_list|)
expr_stmt|;
name|handleDecreaseRequests
argument_list|(
name|appAttempt
argument_list|,
name|decreaseRequests
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleIncreaseRequests ( SchedulerApplicationAttempt applicationAttempt, List<UpdateContainerRequest> updateContainerRequests)
specifier|private
name|void
name|handleIncreaseRequests
parameter_list|(
name|SchedulerApplicationAttempt
name|applicationAttempt
parameter_list|,
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|updateContainerRequests
parameter_list|)
block|{
for|for
control|(
name|UpdateContainerRequest
name|uReq
range|:
name|updateContainerRequests
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|uReq
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if this is a container update
comment|// And not in the middle of a Demotion
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
comment|// Check if this is an executionType change request
comment|// If so, fix the rr to make it look like a normal rr
comment|// with relaxLocality=false and numContainers=1
name|SchedulerNode
name|schedulerNode
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add only if no outstanding promote requests exist.
if|if
condition|(
operator|!
name|applicationAttempt
operator|.
name|getUpdateContext
argument_list|()
operator|.
name|checkAndAddToOutstandingIncreases
argument_list|(
name|rmContainer
argument_list|,
name|schedulerNode
argument_list|,
name|uReq
argument_list|)
condition|)
block|{
name|applicationAttempt
operator|.
name|addToUpdateContainerErrors
argument_list|(
name|UpdateContainerError
operator|.
name|newInstance
argument_list|(
name|RMServerUtils
operator|.
name|UPDATE_OUTSTANDING_ERROR
argument_list|,
name|uReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot promote non-existent (or completed) Container ["
operator|+
name|uReq
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleDecreaseRequests (SchedulerApplicationAttempt appAttempt, List<UpdateContainerRequest> demotionRequests)
specifier|private
name|void
name|handleDecreaseRequests
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|,
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|demotionRequests
parameter_list|)
block|{
name|OpportunisticContainerContext
name|oppCntxt
init|=
name|appAttempt
operator|.
name|getOpportunisticContainerContext
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateContainerRequest
name|uReq
range|:
name|demotionRequests
control|)
block|{
name|RMContainer
name|rmContainer
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|uReq
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|SchedulerNode
name|schedulerNode
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|getUpdateContext
argument_list|()
operator|.
name|checkAndAddToOutstandingDecreases
argument_list|(
name|uReq
argument_list|,
name|schedulerNode
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
operator|==
name|uReq
operator|.
name|getContainerUpdateType
argument_list|()
condition|)
block|{
name|RMContainer
name|demotedRMContainer
init|=
name|createDemotedRMContainer
argument_list|(
name|appAttempt
argument_list|,
name|oppCntxt
argument_list|,
name|rmContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|demotedRMContainer
operator|!=
literal|null
condition|)
block|{
name|appAttempt
operator|.
name|addToNewlyDemotedContainers
argument_list|(
name|uReq
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|demotedRMContainer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RMContainer
name|demotedRMContainer
init|=
name|createDecreasedRMContainer
argument_list|(
name|appAttempt
argument_list|,
name|uReq
argument_list|,
name|rmContainer
argument_list|)
decl_stmt|;
name|appAttempt
operator|.
name|addToNewlyDecreasedContainers
argument_list|(
name|uReq
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|demotedRMContainer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|appAttempt
operator|.
name|addToUpdateContainerErrors
argument_list|(
name|UpdateContainerError
operator|.
name|newInstance
argument_list|(
name|RMServerUtils
operator|.
name|UPDATE_OUTSTANDING_ERROR
argument_list|,
name|uReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot demote/decrease non-existent (or completed) "
operator|+
literal|"Container ["
operator|+
name|uReq
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createDecreasedRMContainer ( SchedulerApplicationAttempt appAttempt, UpdateContainerRequest uReq, RMContainer rmContainer)
specifier|private
name|RMContainer
name|createDecreasedRMContainer
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|,
name|UpdateContainerRequest
name|uReq
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|SchedulerRequestKey
name|sk
init|=
name|SchedulerRequestKey
operator|.
name|extractFrom
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|decreasedContainer
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|sk
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|,
name|rmContainer
operator|.
name|getExecutionType
argument_list|()
argument_list|,
name|sk
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|decreasedContainer
operator|.
name|setVersion
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|RMContainer
name|newRmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|decreasedContainer
argument_list|,
name|sk
argument_list|,
name|appAttempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|decreasedContainer
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContext
argument_list|,
name|rmContainer
operator|.
name|isRemotelyAllocated
argument_list|()
argument_list|)
decl_stmt|;
name|appAttempt
operator|.
name|addRMContainer
argument_list|(
name|decreasedContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNode
argument_list|(
name|decreasedContainer
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|allocateContainer
argument_list|(
name|newRmContainer
argument_list|)
expr_stmt|;
return|return
name|newRmContainer
return|;
block|}
DECL|method|createDemotedRMContainer ( SchedulerApplicationAttempt appAttempt, OpportunisticContainerContext oppCntxt, RMContainer rmContainer)
specifier|private
name|RMContainer
name|createDemotedRMContainer
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|,
name|OpportunisticContainerContext
name|oppCntxt
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|SchedulerRequestKey
name|sk
init|=
name|SchedulerRequestKey
operator|.
name|extractFrom
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|demotedContainer
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|oppCntxt
operator|.
name|getContainerIdGenerator
argument_list|()
operator|.
name|generateContainerId
argument_list|()
argument_list|)
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|sk
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|sk
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|demotedContainer
operator|.
name|setVersion
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SchedulerUtils
operator|.
name|createOpportunisticRmContainer
argument_list|(
name|rmContext
argument_list|,
name|demotedContainer
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Rollback container update after expiry.    * @param containerId ContainerId.    */
DECL|method|rollbackContainerUpdate ( ContainerId containerId)
specifier|protected
name|void
name|rollbackContainerUpdate
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|RMContainer
name|rmContainer
init|=
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot rollback resource for container "
operator|+
name|containerId
operator|+
literal|". The container does not exist."
argument_list|)
expr_stmt|;
return|return;
block|}
name|T
name|app
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot rollback resource for container "
operator|+
name|containerId
operator|+
literal|". The application that the container "
operator|+
literal|"belongs to does not exist."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rmContainer
operator|.
name|getLastConfirmedResource
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Roll back resource for container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|handleDecreaseRequests
argument_list|(
name|app
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|rmContainer
operator|.
name|getLastConfirmedResource
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeIds (String resourceName)
specifier|public
name|List
argument_list|<
name|NodeId
argument_list|>
name|getNodeIds
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|nodeTracker
operator|.
name|getNodeIdsByResourceName
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
comment|/**    * To be used to release a container via a Scheduler Event rather than    * in the same thread.    * @param container Container.    */
DECL|method|asyncContainerRelease (RMContainer container)
specifier|public
name|void
name|asyncContainerRelease
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ReleaseContainerEvent
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Get a Resource object with for the minimum allocation possible.    *    * @return a Resource object with the minimum allocation for the scheduler    */
DECL|method|getMinimumAllocation ()
specifier|public
name|Resource
name|getMinimumAllocation
parameter_list|()
block|{
name|Resource
name|ret
init|=
name|ResourceUtils
operator|.
name|getResourceTypesMinimumAllocation
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Minimum allocation = "
operator|+
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Get a Resource object with for the maximum allocation possible.    *    * @return a Resource object with the maximum allocation for the scheduler    */
DECL|method|getMaximumAllocation ()
specifier|public
name|Resource
name|getMaximumAllocation
parameter_list|()
block|{
name|Resource
name|ret
init|=
name|ResourceUtils
operator|.
name|getResourceTypesMaximumAllocation
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Maximum allocation = "
operator|+
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|checkAndGetApplicationLifetime (String queueName, long lifetime)
specifier|public
name|long
name|checkAndGetApplicationLifetime
parameter_list|(
name|String
name|queueName
parameter_list|,
name|long
name|lifetime
parameter_list|)
block|{
comment|// Lifetime is the application lifetime by default.
return|return
name|lifetime
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumApplicationLifetime (String queueName)
specifier|public
name|long
name|getMaximumApplicationLifetime
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Kill a RMContainer. This is meant to be called in tests only to simulate    * AM container failures.    * @param container the container to kill    */
annotation|@
name|VisibleForTesting
DECL|method|killContainer (RMContainer container)
specifier|public
specifier|abstract
name|void
name|killContainer
parameter_list|(
name|RMContainer
name|container
parameter_list|)
function_decl|;
comment|/**    * Update internal state of the scheduler.  This can be useful for scheduler    * implementations that maintain some state that needs to be periodically    * updated; for example, metrics or queue resources.  It will be called by the    * {@link UpdateThread} every {@link #updateInterval}.  By default, it will    * not run; subclasses should set {@link #updateInterval} to a    * positive value during {@link #serviceInit(Configuration)} if they want to    * enable the thread.    */
annotation|@
name|VisibleForTesting
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
comment|// do nothing by default
block|}
comment|/**    * Thread which calls {@link #update()} every    *<code>updateInterval</code> milliseconds.    */
DECL|class|UpdateThread
specifier|private
class|class
name|UpdateThread
extends|extends
name|Thread
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|updateThreadMonitor
init|)
block|{
name|updateThreadMonitor
operator|.
name|wait
argument_list|(
name|updateInterval
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Scheduler UpdateThread interrupted. Exiting."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in scheduler UpdateThread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Allows {@link UpdateThread} to start processing without waiting till    * {@link #updateInterval}.    */
DECL|method|triggerUpdate ()
specifier|protected
name|void
name|triggerUpdate
parameter_list|()
block|{
synchronized|synchronized
init|(
name|updateThreadMonitor
init|)
block|{
name|updateThreadMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reinitialize (Configuration conf, RMContext rmContext)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reinitializing SchedulingMonitorManager ..."
argument_list|)
expr_stmt|;
name|schedulingMonitorManager
operator|.
name|reinitialize
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Default implementation. Always returns false.    * @param appAttempt ApplicationAttempt.    * @param schedulingRequest SchedulingRequest.    * @param schedulerNode SchedulerNode.    * @return Success or not.    */
annotation|@
name|Override
DECL|method|attemptAllocationOnNode (SchedulerApplicationAttempt appAttempt, SchedulingRequest schedulingRequest, SchedulerNode schedulerNode)
specifier|public
name|boolean
name|attemptAllocationOnNode
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|,
name|SchedulingRequest
name|schedulingRequest
parameter_list|,
name|SchedulerNode
name|schedulerNode
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|resetSchedulerMetrics ()
specifier|public
name|void
name|resetSchedulerMetrics
parameter_list|()
block|{
comment|// reset scheduler metrics
block|}
block|}
end_class

end_unit

