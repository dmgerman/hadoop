begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|AbstractYarnScheduler
specifier|public
specifier|abstract
class|class
name|AbstractYarnScheduler
parameter_list|<
name|T
extends|extends
name|SchedulerApplicationAttempt
parameter_list|,
name|N
extends|extends
name|SchedulerNode
parameter_list|>
extends|extends
name|AbstractService
implements|implements
name|ResourceScheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractYarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Nodes in the cluster, indexed by NodeId
DECL|field|nodes
specifier|protected
name|Map
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|N
argument_list|>
argument_list|()
decl_stmt|;
comment|// Whole capacity of the cluster
DECL|field|clusterResource
specifier|protected
name|Resource
name|clusterResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|minimumAllocation
specifier|protected
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|maximumAllocation
specifier|protected
name|Resource
name|maximumAllocation
decl_stmt|;
DECL|field|rmContext
specifier|protected
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|applications
specifier|protected
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
argument_list|>
name|applications
decl_stmt|;
DECL|field|EMPTY_CONTAINER_LIST
specifier|protected
specifier|final
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|EMPTY_CONTAINER_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ALLOCATION
specifier|protected
specifier|static
specifier|final
name|Allocation
name|EMPTY_ALLOCATION
init|=
operator|new
name|Allocation
argument_list|(
name|EMPTY_CONTAINER_LIST
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Construct the service.    *    * @param name service name    */
DECL|method|AbstractYarnScheduler (String name)
specifier|public
name|AbstractYarnScheduler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getTransferredContainers ( ApplicationAttemptId currentAttempt)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Container
argument_list|>
name|getTransferredContainers
parameter_list|(
name|ApplicationAttemptId
name|currentAttempt
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|currentAttempt
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|RMApp
name|appImpl
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appImpl
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
return|return
name|containerList
return|;
block|}
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|liveContainers
control|)
block|{
if|if
condition|(
operator|!
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|amContainerId
argument_list|)
condition|)
block|{
name|containerList
operator|.
name|add
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerList
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
argument_list|>
DECL|method|getSchedulerApplications ()
name|getSchedulerApplications
parameter_list|()
block|{
return|return
name|applications
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterResource ()
specifier|public
name|Resource
name|getClusterResource
parameter_list|()
block|{
return|return
name|clusterResource
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimumResourceCapability ()
specifier|public
name|Resource
name|getMinimumResourceCapability
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumResourceCapability ()
specifier|public
name|Resource
name|getMaximumResourceCapability
parameter_list|()
block|{
return|return
name|maximumAllocation
return|;
block|}
DECL|method|getApplicationAttempt (ApplicationAttemptId applicationAttemptId)
specifier|public
name|T
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|SchedulerApplication
argument_list|<
name|T
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerAppInfo ( ApplicationAttemptId appAttemptId)
specifier|public
name|SchedulerAppReport
name|getSchedulerAppInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for appInfo of unknown attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SchedulerAppReport
argument_list|(
name|attempt
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAppResourceUsageReport ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationResourceUsageReport
name|getAppResourceUsageReport
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for appInfo of unknown attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|attempt
operator|.
name|getResourceUsageReport
argument_list|()
return|;
block|}
DECL|method|getCurrentAttemptForContainer (ContainerId containerId)
specifier|public
name|T
name|getCurrentAttemptForContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|getApplicationAttempt
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRMContainer (ContainerId containerId)
specifier|public
name|RMContainer
name|getRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|SchedulerApplicationAttempt
name|attempt
init|=
name|getCurrentAttemptForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
operator|(
name|attempt
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|attempt
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeReport (NodeId nodeId)
specifier|public
name|SchedulerNodeReport
name|getNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|N
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SchedulerNodeReport
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|moveApplication (ApplicationId appId, String newQueue)
specifier|public
name|String
name|moveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support moving apps between queues"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

