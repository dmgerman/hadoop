begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  * Order {@link AppSchedulable} objects by priority and then by submit time, as  * in the default scheduler in Hadoop.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FifoAppComparator
specifier|public
class|class
name|FifoAppComparator
implements|implements
name|Comparator
argument_list|<
name|AppSchedulable
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3428835083489547918L
decl_stmt|;
DECL|method|compare (AppSchedulable a1, AppSchedulable a2)
specifier|public
name|int
name|compare
parameter_list|(
name|AppSchedulable
name|a1
parameter_list|,
name|AppSchedulable
name|a2
parameter_list|)
block|{
name|int
name|res
init|=
name|a1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|a1
operator|.
name|getStartTime
argument_list|()
operator|<
name|a2
operator|.
name|getStartTime
argument_list|()
condition|)
block|{
name|res
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|(
name|a1
operator|.
name|getStartTime
argument_list|()
operator|==
name|a2
operator|.
name|getStartTime
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
comment|// If there is a tie, break it by app ID to get a deterministic order
name|res
operator|=
name|a1
operator|.
name|getApp
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getApp
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

